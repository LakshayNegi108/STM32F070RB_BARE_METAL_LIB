
tft_QRDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008de8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd4  08008ea8  08008ea8  00018ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c7c  08009c7c  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08009c7c  08009c7c  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c7c  08009c7c  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c7c  08009c7c  00019c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c80  08009c80  00019c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08009c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c4c  200000c8  08009d4c  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d14  08009d4c  00020d14  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b18  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e61  00000000  00000000  00032c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00035a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c28  00000000  00000000  000367e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135a5  00000000  00000000  00037408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001242e  00000000  00000000  0004a9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066e2f  00000000  00000000  0005cddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c3c0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003400  00000000  00000000  000c3c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000c8 	.word	0x200000c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008e90 	.word	0x08008e90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000cc 	.word	0x200000cc
 8000104:	08008e90 	.word	0x08008e90

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <checkButtonPressed>:
		return 0;
	}
}

uint8_t checkButtonPressed(uint16_t ts_x1, uint16_t ts_y1, uint16_t ts_x2,
		uint16_t ts_y2) {
 8000418:	b5b0      	push	{r4, r5, r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0005      	movs	r5, r0
 8000420:	000c      	movs	r4, r1
 8000422:	0010      	movs	r0, r2
 8000424:	0019      	movs	r1, r3
 8000426:	1dbb      	adds	r3, r7, #6
 8000428:	1c2a      	adds	r2, r5, #0
 800042a:	801a      	strh	r2, [r3, #0]
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	1c22      	adds	r2, r4, #0
 8000430:	801a      	strh	r2, [r3, #0]
 8000432:	1cbb      	adds	r3, r7, #2
 8000434:	1c02      	adds	r2, r0, #0
 8000436:	801a      	strh	r2, [r3, #0]
 8000438:	003b      	movs	r3, r7
 800043a:	1c0a      	adds	r2, r1, #0
 800043c:	801a      	strh	r2, [r3, #0]
	if ((x > ts_x1 && x < ts_x2) && (y > ts_y1 && y < ts_y2)) {
 800043e:	4b0f      	ldr	r3, [pc, #60]	; (800047c <checkButtonPressed+0x64>)
 8000440:	881b      	ldrh	r3, [r3, #0]
 8000442:	1dba      	adds	r2, r7, #6
 8000444:	8812      	ldrh	r2, [r2, #0]
 8000446:	429a      	cmp	r2, r3
 8000448:	d213      	bcs.n	8000472 <checkButtonPressed+0x5a>
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <checkButtonPressed+0x64>)
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	1cba      	adds	r2, r7, #2
 8000450:	8812      	ldrh	r2, [r2, #0]
 8000452:	429a      	cmp	r2, r3
 8000454:	d90d      	bls.n	8000472 <checkButtonPressed+0x5a>
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <checkButtonPressed+0x68>)
 8000458:	881b      	ldrh	r3, [r3, #0]
 800045a:	1d3a      	adds	r2, r7, #4
 800045c:	8812      	ldrh	r2, [r2, #0]
 800045e:	429a      	cmp	r2, r3
 8000460:	d207      	bcs.n	8000472 <checkButtonPressed+0x5a>
 8000462:	4b07      	ldr	r3, [pc, #28]	; (8000480 <checkButtonPressed+0x68>)
 8000464:	881b      	ldrh	r3, [r3, #0]
 8000466:	003a      	movs	r2, r7
 8000468:	8812      	ldrh	r2, [r2, #0]
 800046a:	429a      	cmp	r2, r3
 800046c:	d901      	bls.n	8000472 <checkButtonPressed+0x5a>
		return 1;
 800046e:	2301      	movs	r3, #1
 8000470:	e000      	b.n	8000474 <checkButtonPressed+0x5c>
	} else {
		return 0;
 8000472:	2300      	movs	r3, #0
	}
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bdb0      	pop	{r4, r5, r7, pc}
 800047c:	200000e4 	.word	0x200000e4
 8000480:	200000e6 	.word	0x200000e6

08000484 <dispWifi>:
	B, B, B, B, B, B, B, B, B, B, W, W, W, B, B, B, B, B, B, B, B, B, B, B, B,
	B, B, B, B, B, B, B, B, B, B, B, W, B, B, B, B, B, B, B, B, B, B, B, B, B,
};

void dispWifi(uint16_t row, uint16_t col)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0
 800048a:	0002      	movs	r2, r0
 800048c:	1dbb      	adds	r3, r7, #6
 800048e:	801a      	strh	r2, [r3, #0]
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	1c0a      	adds	r2, r1, #0
 8000494:	801a      	strh	r2, [r3, #0]
	int k = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	617b      	str	r3, [r7, #20]
	for(int i = row + 0; i < row + 25; i++){
 800049a:	1dbb      	adds	r3, r7, #6
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	613b      	str	r3, [r7, #16]
 80004a0:	e01d      	b.n	80004de <dispWifi+0x5a>
		for(int j = col + 0; j < col + 25; j++){
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	e010      	b.n	80004cc <dispWifi+0x48>
			LCD_DrawPixel(i, j, wifi[k]);
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	b218      	sxth	r0, r3
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	b219      	sxth	r1, r3
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <dispWifi+0x70>)
 80004b4:	697a      	ldr	r2, [r7, #20]
 80004b6:	0052      	lsls	r2, r2, #1
 80004b8:	5ad3      	ldrh	r3, [r2, r3]
 80004ba:	001a      	movs	r2, r3
 80004bc:	f006 fee6 	bl	800728c <LCD_DrawPixel>
			k++;
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	3301      	adds	r3, #1
 80004c4:	617b      	str	r3, [r7, #20]
		for(int j = col + 0; j < col + 25; j++){
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	3301      	adds	r3, #1
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	881b      	ldrh	r3, [r3, #0]
 80004d0:	3318      	adds	r3, #24
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	dde8      	ble.n	80004aa <dispWifi+0x26>
	for(int i = row + 0; i < row + 25; i++){
 80004d8:	693b      	ldr	r3, [r7, #16]
 80004da:	3301      	adds	r3, #1
 80004dc:	613b      	str	r3, [r7, #16]
 80004de:	1dbb      	adds	r3, r7, #6
 80004e0:	881b      	ldrh	r3, [r3, #0]
 80004e2:	3318      	adds	r3, #24
 80004e4:	693a      	ldr	r2, [r7, #16]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	dddb      	ble.n	80004a2 <dispWifi+0x1e>
		}
	}
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b006      	add	sp, #24
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	0800930c 	.word	0x0800930c

080004f8 <main>:

int main(void) {
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b087      	sub	sp, #28
 80004fc:	af00      	add	r7, sp, #0
//	HAL_Init();

	SystemClock_Config();
 80004fe:	f000 f8d1 	bl	80006a4 <SystemClock_Config>

	uart_print_config(9600, 48);
 8000502:	2396      	movs	r3, #150	; 0x96
 8000504:	019b      	lsls	r3, r3, #6
 8000506:	2130      	movs	r1, #48	; 0x30
 8000508:	0018      	movs	r0, r3
 800050a:	f002 fceb 	bl	8002ee4 <uart_print_config>
	MX_GPIO_Init();
 800050e:	f000 f953 	bl	80007b8 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000512:	f000 f913 	bl	800073c <MX_SPI1_Init>
	MX_FATFS_Init();
 8000516:	f001 fd13 	bl	8001f40 <MX_FATFS_Init>
	ticks_timer(48);
 800051a:	2030      	movs	r0, #48	; 0x30
 800051c:	f002 fe08 	bl	8003130 <ticks_timer>

	print("\n\r==========Running==========\r\n");
 8000520:	4b56      	ldr	r3, [pc, #344]	; (800067c <main+0x184>)
 8000522:	0018      	movs	r0, r3
 8000524:	f002 fc9e 	bl	8002e64 <print>

//	delay_ms(1000); //a short delay is important to let the SD card settle
	ticks_reset();
 8000528:	f002 fe3c 	bl	80031a4 <ticks_reset>
	while (ticks_val() < 1000)
 800052c:	46c0      	nop			; (mov r8, r8)
 800052e:	f002 fe2f 	bl	8003190 <ticks_val>
 8000532:	0003      	movs	r3, r0
 8000534:	001a      	movs	r2, r3
 8000536:	23fa      	movs	r3, #250	; 0xfa
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	429a      	cmp	r2, r3
 800053c:	d3f7      	bcc.n	800052e <main+0x36>
		;

	sd_mount();
 800053e:	f003 f83b 	bl	80035b8 <sd_mount>
	sd_space();
 8000542:	f003 f863 	bl	800360c <sd_space>
	sd_readFile("test.txt");
 8000546:	4b4e      	ldr	r3, [pc, #312]	; (8000680 <main+0x188>)
 8000548:	0018      	movs	r0, r3
 800054a:	f003 f97b 	bl	8003844 <sd_readFile>
	getBMPImageData("wifi.bmp");
 800054e:	4b4d      	ldr	r3, [pc, #308]	; (8000684 <main+0x18c>)
 8000550:	0018      	movs	r0, r3
 8000552:	f003 f9c1 	bl	80038d8 <getBMPImageData>

	LCD_Begin();
 8000556:	f006 fe15 	bl	8007184 <LCD_Begin>
	LCD_SetRotation(0);
 800055a:	2000      	movs	r0, #0
 800055c:	f007 fc72 	bl	8007e44 <LCD_SetRotation>
	LCD_FillScreen(BLACK);
 8000560:	2000      	movs	r0, #0
 8000562:	f007 f933 	bl	80077cc <LCD_FillScreen>

//	displayPicGen("QRCodeH.bmp", 100, 60);
//	displayPicGen("wifis.bmp", 100, 60);
	dispWifi(50, 50);
 8000566:	2132      	movs	r1, #50	; 0x32
 8000568:	2032      	movs	r0, #50	; 0x32
 800056a:	f7ff ff8b 	bl	8000484 <dispWifi>

	Touch_Begin();
 800056e:	f007 fe55 	bl	800821c <Touch_Begin>
	LCD_DrawPixel(0, 0, BLACK);
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	2000      	movs	r0, #0
 8000578:	f006 fe88 	bl	800728c <LCD_DrawPixel>
	button_len Button1;
	Button1.x = 130;
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2282      	movs	r2, #130	; 0x82
 8000580:	801a      	strh	r2, [r3, #0]
	Button1.y = 10;
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	220a      	movs	r2, #10
 8000586:	805a      	strh	r2, [r3, #2]
	Button1.w = 100;
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2264      	movs	r2, #100	; 0x64
 800058c:	80da      	strh	r2, [r3, #6]
	Button1.h = 50;
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2232      	movs	r2, #50	; 0x32
 8000592:	809a      	strh	r2, [r3, #4]
	Button1.r = 7;
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2207      	movs	r2, #7
 8000598:	811a      	strh	r2, [r3, #8]

	Button1.ts_x1 = 750;
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	4a3a      	ldr	r2, [pc, #232]	; (8000688 <main+0x190>)
 800059e:	815a      	strh	r2, [r3, #10]
	Button1.ts_x2 = 1000;
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	22fa      	movs	r2, #250	; 0xfa
 80005a4:	0092      	lsls	r2, r2, #2
 80005a6:	81da      	strh	r2, [r3, #14]

	Button1.ts_y1 = 350;
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	22af      	movs	r2, #175	; 0xaf
 80005ac:	0052      	lsls	r2, r2, #1
 80005ae:	819a      	strh	r2, [r3, #12]
	Button1.ts_y2 = 500;
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	22fa      	movs	r2, #250	; 0xfa
 80005b4:	0052      	lsls	r2, r2, #1
 80005b6:	821a      	strh	r2, [r3, #16]

//	LCD_DrawButton1("Hello", 20, 20, 70, 50, 5, YELLOW, BLACK, 1);
	delay_ms(500);
 80005b8:	23fa      	movs	r3, #250	; 0xfa
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	0018      	movs	r0, r3
 80005be:	f002 fe11 	bl	80031e4 <delay_ms>
	uint8_t flag = 0;
 80005c2:	2317      	movs	r3, #23
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
	sd_deMount();
 80005ca:	f003 f977 	bl	80038bc <sd_deMount>
//	printnewtstr(139, 200, RED, BLACK, &mono12x7, 3, "0");
//	printnewtstr(152, 200, RED, BLACK, &mono12x7, 3, "3");

	while (1) {
//		print_touch();
		x = TOUCH_VAL('x');
 80005ce:	2078      	movs	r0, #120	; 0x78
 80005d0:	f007 ff3a 	bl	8008448 <TOUCH_VAL>
 80005d4:	0003      	movs	r3, r0
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	4b2c      	ldr	r3, [pc, #176]	; (800068c <main+0x194>)
 80005da:	801a      	strh	r2, [r3, #0]
		y = TOUCH_VAL('y');
 80005dc:	2079      	movs	r0, #121	; 0x79
 80005de:	f007 ff33 	bl	8008448 <TOUCH_VAL>
 80005e2:	0003      	movs	r3, r0
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <main+0x198>)
 80005e8:	801a      	strh	r2, [r3, #0]
		print("Pos: %d, %d\n\r", x, y);
 80005ea:	4b28      	ldr	r3, [pc, #160]	; (800068c <main+0x194>)
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	0019      	movs	r1, r3
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <main+0x198>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	001a      	movs	r2, r3
 80005f6:	4b27      	ldr	r3, [pc, #156]	; (8000694 <main+0x19c>)
 80005f8:	0018      	movs	r0, r3
 80005fa:	f002 fc33 	bl	8002e64 <print>
		if (checkButtonPressed(Button1.ts_x1, Button1.ts_y1, Button1.ts_x2,
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	8958      	ldrh	r0, [r3, #10]
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	8999      	ldrh	r1, [r3, #12]
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	89da      	ldrh	r2, [r3, #14]
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	8a1b      	ldrh	r3, [r3, #16]
 800060e:	f7ff ff03 	bl	8000418 <checkButtonPressed>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d018      	beq.n	8000648 <main+0x150>
				Button1.ts_y2)) {
//			LCD_FillRect(20, 20, 90, 90, PINK);
//			LCD_DrawButton1("Hello", 30, 30, 70, 50, 10, YELLOW, BLACK, 0);
			LCD_SetTextSize(2);
 8000616:	2002      	movs	r0, #2
 8000618:	f007 fbe4 	bl	8007de4 <LCD_SetTextSize>
			LCD_SetCursor(50, 100);
 800061c:	2164      	movs	r1, #100	; 0x64
 800061e:	2032      	movs	r0, #50	; 0x32
 8000620:	f007 fbca 	bl	8007db8 <LCD_SetCursor>
			LCD_SetTextColor(YELLOW, BLACK);
 8000624:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <main+0x1a0>)
 8000626:	2100      	movs	r1, #0
 8000628:	0018      	movs	r0, r3
 800062a:	f007 fbf1 	bl	8007e10 <LCD_SetTextColor>
			LCD_Printf("LIGHT");
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <main+0x1a4>)
 8000630:	0018      	movs	r0, r3
 8000632:	f007 fac5 	bl	8007bc0 <LCD_Printf>
			print("Pressed\n");
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <main+0x1a8>)
 8000638:	0018      	movs	r0, r3
 800063a:	f002 fc13 	bl	8002e64 <print>
			flag = 1;
 800063e:	2317      	movs	r3, #23
 8000640:	18fb      	adds	r3, r7, r3
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
 8000646:	e7c2      	b.n	80005ce <main+0xd6>
		} else if (flag == 1) {
 8000648:	2417      	movs	r4, #23
 800064a:	193b      	adds	r3, r7, r4
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d1bd      	bne.n	80005ce <main+0xd6>
//			LCD_FillRect(30, 30, 90, 90, PINK);
//			LCD_DrawButton1("Hello", 20, 20, 70, 50, 10, YELLOW, BLACK, 1);
			LCD_SetTextSize(2);
 8000652:	2002      	movs	r0, #2
 8000654:	f007 fbc6 	bl	8007de4 <LCD_SetTextSize>
			LCD_SetCursor(50, 100);
 8000658:	2164      	movs	r1, #100	; 0x64
 800065a:	2032      	movs	r0, #50	; 0x32
 800065c:	f007 fbac 	bl	8007db8 <LCD_SetCursor>
			LCD_SetTextColor(GREEN, BLACK);
 8000660:	23fc      	movs	r3, #252	; 0xfc
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	2100      	movs	r1, #0
 8000666:	0018      	movs	r0, r3
 8000668:	f007 fbd2 	bl	8007e10 <LCD_SetTextColor>
			LCD_Printf("LIGHT");
 800066c:	4b0b      	ldr	r3, [pc, #44]	; (800069c <main+0x1a4>)
 800066e:	0018      	movs	r0, r3
 8000670:	f007 faa6 	bl	8007bc0 <LCD_Printf>
			flag = 0;
 8000674:	193b      	adds	r3, r7, r4
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
	while (1) {
 800067a:	e7a8      	b.n	80005ce <main+0xd6>
 800067c:	08008ec8 	.word	0x08008ec8
 8000680:	08008ee8 	.word	0x08008ee8
 8000684:	08008ef4 	.word	0x08008ef4
 8000688:	000002ee 	.word	0x000002ee
 800068c:	200000e4 	.word	0x200000e4
 8000690:	200000e6 	.word	0x200000e6
 8000694:	08008f00 	.word	0x08008f00
 8000698:	0000ffe0 	.word	0x0000ffe0
 800069c:	08008f10 	.word	0x08008f10
 80006a0:	08008f18 	.word	0x08008f18

080006a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b091      	sub	sp, #68	; 0x44
 80006a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006aa:	2410      	movs	r4, #16
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	0018      	movs	r0, r3
 80006b0:	2330      	movs	r3, #48	; 0x30
 80006b2:	001a      	movs	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	f007 ff6f 	bl	8008598 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006ba:	003b      	movs	r3, r7
 80006bc:	0018      	movs	r0, r3
 80006be:	2310      	movs	r3, #16
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f007 ff68 	bl	8008598 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	0021      	movs	r1, r4
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2202      	movs	r2, #2
 80006ce:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2201      	movs	r2, #1
 80006d4:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2210      	movs	r2, #16
 80006da:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2202      	movs	r2, #2
 80006e0:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0212      	lsls	r2, r2, #8
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2280      	movs	r2, #128	; 0x80
 80006ee:	0352      	lsls	r2, r2, #13
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 fbce 	bl	8000e9c <HAL_RCC_OscConfig>
 8000700:	1e03      	subs	r3, r0, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x64>
		Error_Handler();
 8000704:	f000 f886 	bl	8000814 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000708:	003b      	movs	r3, r7
 800070a:	2207      	movs	r2, #7
 800070c:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	003b      	movs	r3, r7
 8000710:	2202      	movs	r2, #2
 8000712:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	003b      	movs	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071a:	003b      	movs	r3, r7
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000720:	003b      	movs	r3, r7
 8000722:	2101      	movs	r1, #1
 8000724:	0018      	movs	r0, r3
 8000726:	f000 fed7 	bl	80014d8 <HAL_RCC_ClockConfig>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x8e>
		Error_Handler();
 800072e:	f000 f871 	bl	8000814 <Error_Handler>
	}
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b011      	add	sp, #68	; 0x44
 8000738:	bd90      	pop	{r4, r7, pc}
	...

0800073c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <MX_SPI1_Init+0x78>)
 8000744:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000748:	2282      	movs	r2, #130	; 0x82
 800074a:	0052      	lsls	r2, r2, #1
 800074c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000756:	22e0      	movs	r2, #224	; 0xe0
 8000758:	00d2      	lsls	r2, r2, #3
 800075a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_SPI1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_SPI1_Init+0x74>)
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	0092      	lsls	r2, r2, #2
 800076e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000772:	2230      	movs	r2, #48	; 0x30
 8000774:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_SPI1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_SPI1_Init+0x74>)
 800078a:	2207      	movs	r2, #7
 800078c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_SPI1_Init+0x74>)
 8000796:	2208      	movs	r2, #8
 8000798:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <MX_SPI1_Init+0x74>)
 800079c:	0018      	movs	r0, r3
 800079e:	f000 ffcf 	bl	8001740 <HAL_SPI_Init>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_SPI1_Init+0x6e>
		Error_Handler();
 80007a6:	f000 f835 	bl	8000814 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000059c 	.word	0x2000059c
 80007b4:	40013000 	.word	0x40013000

080007b8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af02      	add	r7, sp, #8

	/* GPIO Ports Clock Enable */
	gpio_clk_en(PORTA);
 80007be:	2390      	movs	r3, #144	; 0x90
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	0018      	movs	r0, r3
 80007c4:	f002 f9fe 	bl	8002bc4 <gpio_clk_en>
	gpio_clk_en(PORTB);
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_GPIO_Init+0x50>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f002 f9fa 	bl	8002bc4 <gpio_clk_en>
	gpio_clk_en(PORTF);
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_GPIO_Init+0x54>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f002 f9f6 	bl	8002bc4 <gpio_clk_en>
	gpio_clk_en(PORTC);
 80007d8:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <MX_GPIO_Init+0x58>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f002 f9f2 	bl	8002bc4 <gpio_clk_en>

	gpio_write(SD_CS_GPIO_Port, SD_CS_Pin, LOW);
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_GPIO_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	2106      	movs	r1, #6
 80007e6:	0018      	movs	r0, r3
 80007e8:	f002 fb1c 	bl	8002e24 <gpio_write>
	gpio_config(SD_CS_GPIO_Port, SD_CS_Pin, OUTPUT_MODE, LOW_SPEED, DI_PUPD,
 80007ec:	4806      	ldr	r0, [pc, #24]	; (8000808 <MX_GPIO_Init+0x50>)
 80007ee:	2300      	movs	r3, #0
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	2300      	movs	r3, #0
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	2300      	movs	r3, #0
 80007f8:	2201      	movs	r2, #1
 80007fa:	2106      	movs	r1, #6
 80007fc:	f002 fa2a 	bl	8002c54 <gpio_config>
	PHPL);

}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	48000400 	.word	0x48000400
 800080c:	48001400 	.word	0x48001400
 8000810:	48000800 	.word	0x48000800

08000814 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b08b      	sub	sp, #44	; 0x2c
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	2414      	movs	r4, #20
 800082a:	193b      	adds	r3, r7, r4
 800082c:	0018      	movs	r0, r3
 800082e:	2314      	movs	r3, #20
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f007 feb0 	bl	8008598 <memset>
  if(hspi->Instance==SPI1)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <HAL_SPI_MspInit+0x90>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d132      	bne.n	80008a8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000842:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <HAL_SPI_MspInit+0x94>)
 8000844:	699a      	ldr	r2, [r3, #24]
 8000846:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <HAL_SPI_MspInit+0x94>)
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	0149      	lsls	r1, r1, #5
 800084c:	430a      	orrs	r2, r1
 800084e:	619a      	str	r2, [r3, #24]
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <HAL_SPI_MspInit+0x94>)
 8000852:	699a      	ldr	r2, [r3, #24]
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	015b      	lsls	r3, r3, #5
 8000858:	4013      	ands	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <HAL_SPI_MspInit+0x94>)
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_SPI_MspInit+0x94>)
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	0289      	lsls	r1, r1, #10
 8000868:	430a      	orrs	r2, r1
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_SPI_MspInit+0x94>)
 800086e:	695a      	ldr	r2, [r3, #20]
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	029b      	lsls	r3, r3, #10
 8000874:	4013      	ands	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800087a:	0021      	movs	r1, r4
 800087c:	187b      	adds	r3, r7, r1
 800087e:	22e0      	movs	r2, #224	; 0xe0
 8000880:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2202      	movs	r2, #2
 8000886:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2203      	movs	r2, #3
 8000892:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	187a      	adds	r2, r7, r1
 800089c:	2390      	movs	r3, #144	; 0x90
 800089e:	05db      	lsls	r3, r3, #23
 80008a0:	0011      	movs	r1, r2
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 f98a 	bl	8000bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b00b      	add	sp, #44	; 0x2c
 80008ae:	bd90      	pop	{r4, r7, pc}
 80008b0:	40013000 	.word	0x40013000
 80008b4:	40021000 	.word	0x40021000

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008dc:	f000 f89e 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f0:	4a14      	ldr	r2, [pc, #80]	; (8000944 <_sbrk+0x5c>)
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <_sbrk+0x60>)
 80008f4:	1ad3      	subs	r3, r2, r3
 80008f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <_sbrk+0x64>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d102      	bne.n	800090a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <_sbrk+0x64>)
 8000906:	4a12      	ldr	r2, [pc, #72]	; (8000950 <_sbrk+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <_sbrk+0x64>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	18d3      	adds	r3, r2, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	429a      	cmp	r2, r3
 8000916:	d207      	bcs.n	8000928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000918:	f007 fe14 	bl	8008544 <__errno>
 800091c:	0003      	movs	r3, r0
 800091e:	220c      	movs	r2, #12
 8000920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000922:	2301      	movs	r3, #1
 8000924:	425b      	negs	r3, r3
 8000926:	e009      	b.n	800093c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <_sbrk+0x64>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	18d2      	adds	r2, r2, r3
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <_sbrk+0x64>)
 8000938:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800093a:	68fb      	ldr	r3, [r7, #12]
}
 800093c:	0018      	movs	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	b006      	add	sp, #24
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20004000 	.word	0x20004000
 8000948:	00000400 	.word	0x00000400
 800094c:	200000e8 	.word	0x200000e8
 8000950:	20000d18 	.word	0x20000d18

08000954 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000962:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <LoopForever+0x6>)
  ldr r1, =_edata
 8000966:	490e      	ldr	r1, [pc, #56]	; (80009a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <LoopForever+0xe>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800097c:	4c0b      	ldr	r4, [pc, #44]	; (80009ac <LoopForever+0x16>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800098a:	f7ff ffe3 	bl	8000954 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800098e:	f007 fddf 	bl	8008550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000992:	f7ff fdb1 	bl	80004f8 <main>

08000996 <LoopForever>:

LoopForever:
    b LoopForever
 8000996:	e7fe      	b.n	8000996 <LoopForever>
  ldr   r0, =_estack
 8000998:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80009a4:	08009c84 	.word	0x08009c84
  ldr r2, =_sbss
 80009a8:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80009ac:	20000d14 	.word	0x20000d14

080009b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC1_IRQHandler>
	...

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <HAL_InitTick+0x5c>)
 80009be:	681c      	ldr	r4, [r3, #0]
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_InitTick+0x60>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	0019      	movs	r1, r3
 80009c6:	23fa      	movs	r3, #250	; 0xfa
 80009c8:	0098      	lsls	r0, r3, #2
 80009ca:	f7ff fbaf 	bl	800012c <__udivsi3>
 80009ce:	0003      	movs	r3, r0
 80009d0:	0019      	movs	r1, r3
 80009d2:	0020      	movs	r0, r4
 80009d4:	f7ff fbaa 	bl	800012c <__udivsi3>
 80009d8:	0003      	movs	r3, r0
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 f8e1 	bl	8000ba2 <HAL_SYSTICK_Config>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e00f      	b.n	8000a08 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d80b      	bhi.n	8000a06 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	2301      	movs	r3, #1
 80009f2:	425b      	negs	r3, r3
 80009f4:	2200      	movs	r2, #0
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 f8be 	bl	8000b78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_InitTick+0x64>)
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	0018      	movs	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b003      	add	sp, #12
 8000a0e:	bd90      	pop	{r4, r7, pc}
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000004 	.word	0x20000004

08000a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_IncTick+0x1c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	001a      	movs	r2, r3
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <HAL_IncTick+0x20>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	18d2      	adds	r2, r2, r3
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <HAL_IncTick+0x20>)
 8000a2e:	601a      	str	r2, [r3, #0]
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000894 	.word	0x20000894

08000a40 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <HAL_GetTick+0x10>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	0018      	movs	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	20000894 	.word	0x20000894

08000a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	0002      	movs	r2, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b7f      	cmp	r3, #127	; 0x7f
 8000a68:	d828      	bhi.n	8000abc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a6a:	4a2f      	ldr	r2, [pc, #188]	; (8000b28 <__NVIC_SetPriority+0xd4>)
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b25b      	sxtb	r3, r3
 8000a72:	089b      	lsrs	r3, r3, #2
 8000a74:	33c0      	adds	r3, #192	; 0xc0
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	589b      	ldr	r3, [r3, r2]
 8000a7a:	1dfa      	adds	r2, r7, #7
 8000a7c:	7812      	ldrb	r2, [r2, #0]
 8000a7e:	0011      	movs	r1, r2
 8000a80:	2203      	movs	r2, #3
 8000a82:	400a      	ands	r2, r1
 8000a84:	00d2      	lsls	r2, r2, #3
 8000a86:	21ff      	movs	r1, #255	; 0xff
 8000a88:	4091      	lsls	r1, r2
 8000a8a:	000a      	movs	r2, r1
 8000a8c:	43d2      	mvns	r2, r2
 8000a8e:	401a      	ands	r2, r3
 8000a90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	019b      	lsls	r3, r3, #6
 8000a96:	22ff      	movs	r2, #255	; 0xff
 8000a98:	401a      	ands	r2, r3
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	4003      	ands	r3, r0
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa8:	481f      	ldr	r0, [pc, #124]	; (8000b28 <__NVIC_SetPriority+0xd4>)
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	33c0      	adds	r3, #192	; 0xc0
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aba:	e031      	b.n	8000b20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000abc:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <__NVIC_SetPriority+0xd8>)
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	400b      	ands	r3, r1
 8000ac8:	3b08      	subs	r3, #8
 8000aca:	089b      	lsrs	r3, r3, #2
 8000acc:	3306      	adds	r3, #6
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	18d3      	adds	r3, r2, r3
 8000ad2:	3304      	adds	r3, #4
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	1dfa      	adds	r2, r7, #7
 8000ad8:	7812      	ldrb	r2, [r2, #0]
 8000ada:	0011      	movs	r1, r2
 8000adc:	2203      	movs	r2, #3
 8000ade:	400a      	ands	r2, r1
 8000ae0:	00d2      	lsls	r2, r2, #3
 8000ae2:	21ff      	movs	r1, #255	; 0xff
 8000ae4:	4091      	lsls	r1, r2
 8000ae6:	000a      	movs	r2, r1
 8000ae8:	43d2      	mvns	r2, r2
 8000aea:	401a      	ands	r2, r3
 8000aec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	019b      	lsls	r3, r3, #6
 8000af2:	22ff      	movs	r2, #255	; 0xff
 8000af4:	401a      	ands	r2, r3
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	0018      	movs	r0, r3
 8000afc:	2303      	movs	r3, #3
 8000afe:	4003      	ands	r3, r0
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b04:	4809      	ldr	r0, [pc, #36]	; (8000b2c <__NVIC_SetPriority+0xd8>)
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	001c      	movs	r4, r3
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	4023      	ands	r3, r4
 8000b10:	3b08      	subs	r3, #8
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	430a      	orrs	r2, r1
 8000b16:	3306      	adds	r3, #6
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	18c3      	adds	r3, r0, r3
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	601a      	str	r2, [r3, #0]
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b003      	add	sp, #12
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	1e5a      	subs	r2, r3, #1
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	045b      	lsls	r3, r3, #17
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d301      	bcc.n	8000b48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b44:	2301      	movs	r3, #1
 8000b46:	e010      	b.n	8000b6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <SysTick_Config+0x44>)
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	3a01      	subs	r2, #1
 8000b4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b50:	2301      	movs	r3, #1
 8000b52:	425b      	negs	r3, r3
 8000b54:	2103      	movs	r1, #3
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff ff7c 	bl	8000a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <SysTick_Config+0x44>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b62:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <SysTick_Config+0x44>)
 8000b64:	2207      	movs	r2, #7
 8000b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b002      	add	sp, #8
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	e000e010 	.word	0xe000e010

08000b78 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	210f      	movs	r1, #15
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	1c02      	adds	r2, r0, #0
 8000b88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	0011      	movs	r1, r2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff ff5d 	bl	8000a54 <__NVIC_SetPriority>
}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b004      	add	sp, #16
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff ffbf 	bl	8000b30 <SysTick_Config>
 8000bb2:	0003      	movs	r3, r0
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bca:	e14f      	b.n	8000e6c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	000a      	movs	r2, r1
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d100      	bne.n	8000be4 <HAL_GPIO_Init+0x28>
 8000be2:	e140      	b.n	8000e66 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	2203      	movs	r2, #3
 8000bea:	4013      	ands	r3, r2
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d005      	beq.n	8000bfc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d130      	bne.n	8000c5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	2203      	movs	r2, #3
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	0013      	movs	r3, r2
 8000c0c:	43da      	mvns	r2, r3
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	409a      	lsls	r2, r3
 8000c1e:	0013      	movs	r3, r2
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c32:	2201      	movs	r2, #1
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	091b      	lsrs	r3, r3, #4
 8000c48:	2201      	movs	r2, #1
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
 8000c50:	0013      	movs	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2203      	movs	r2, #3
 8000c64:	4013      	ands	r3, r2
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d017      	beq.n	8000c9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	409a      	lsls	r2, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	0013      	movs	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d123      	bne.n	8000cee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	08da      	lsrs	r2, r3, #3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3208      	adds	r2, #8
 8000cae:	0092      	lsls	r2, r2, #2
 8000cb0:	58d3      	ldr	r3, [r2, r3]
 8000cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	2207      	movs	r2, #7
 8000cb8:	4013      	ands	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	220f      	movs	r2, #15
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	691a      	ldr	r2, [r3, #16]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	2107      	movs	r1, #7
 8000cd2:	400b      	ands	r3, r1
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	0013      	movs	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	08da      	lsrs	r2, r3, #3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3208      	adds	r2, #8
 8000ce8:	0092      	lsls	r2, r2, #2
 8000cea:	6939      	ldr	r1, [r7, #16]
 8000cec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	409a      	lsls	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	23c0      	movs	r3, #192	; 0xc0
 8000d28:	029b      	lsls	r3, r3, #10
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d100      	bne.n	8000d30 <HAL_GPIO_Init+0x174>
 8000d2e:	e09a      	b.n	8000e66 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d30:	4b54      	ldr	r3, [pc, #336]	; (8000e84 <HAL_GPIO_Init+0x2c8>)
 8000d32:	699a      	ldr	r2, [r3, #24]
 8000d34:	4b53      	ldr	r3, [pc, #332]	; (8000e84 <HAL_GPIO_Init+0x2c8>)
 8000d36:	2101      	movs	r1, #1
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	619a      	str	r2, [r3, #24]
 8000d3c:	4b51      	ldr	r3, [pc, #324]	; (8000e84 <HAL_GPIO_Init+0x2c8>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	2201      	movs	r2, #1
 8000d42:	4013      	ands	r3, r2
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d48:	4a4f      	ldr	r2, [pc, #316]	; (8000e88 <HAL_GPIO_Init+0x2cc>)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	089b      	lsrs	r3, r3, #2
 8000d4e:	3302      	adds	r3, #2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	589b      	ldr	r3, [r3, r2]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	2203      	movs	r2, #3
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	220f      	movs	r2, #15
 8000d60:	409a      	lsls	r2, r3
 8000d62:	0013      	movs	r3, r2
 8000d64:	43da      	mvns	r2, r3
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	2390      	movs	r3, #144	; 0x90
 8000d70:	05db      	lsls	r3, r3, #23
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d013      	beq.n	8000d9e <HAL_GPIO_Init+0x1e2>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a44      	ldr	r2, [pc, #272]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d00d      	beq.n	8000d9a <HAL_GPIO_Init+0x1de>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a43      	ldr	r2, [pc, #268]	; (8000e90 <HAL_GPIO_Init+0x2d4>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d007      	beq.n	8000d96 <HAL_GPIO_Init+0x1da>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a42      	ldr	r2, [pc, #264]	; (8000e94 <HAL_GPIO_Init+0x2d8>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d101      	bne.n	8000d92 <HAL_GPIO_Init+0x1d6>
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e006      	b.n	8000da0 <HAL_GPIO_Init+0x1e4>
 8000d92:	2305      	movs	r3, #5
 8000d94:	e004      	b.n	8000da0 <HAL_GPIO_Init+0x1e4>
 8000d96:	2302      	movs	r3, #2
 8000d98:	e002      	b.n	8000da0 <HAL_GPIO_Init+0x1e4>
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e000      	b.n	8000da0 <HAL_GPIO_Init+0x1e4>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	2103      	movs	r1, #3
 8000da4:	400a      	ands	r2, r1
 8000da6:	0092      	lsls	r2, r2, #2
 8000da8:	4093      	lsls	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000db0:	4935      	ldr	r1, [pc, #212]	; (8000e88 <HAL_GPIO_Init+0x2cc>)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	089b      	lsrs	r3, r3, #2
 8000db6:	3302      	adds	r3, #2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dbe:	4b36      	ldr	r3, [pc, #216]	; (8000e98 <HAL_GPIO_Init+0x2dc>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	025b      	lsls	r3, r3, #9
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000de2:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <HAL_GPIO_Init+0x2dc>)
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <HAL_GPIO_Init+0x2dc>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43da      	mvns	r2, r3
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	029b      	lsls	r3, r3, #10
 8000e00:	4013      	ands	r3, r2
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e0c:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <HAL_GPIO_Init+0x2dc>)
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e12:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <HAL_GPIO_Init+0x2dc>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	035b      	lsls	r3, r3, #13
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <HAL_GPIO_Init+0x2dc>)
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e3c:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_GPIO_Init+0x2dc>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43da      	mvns	r2, r3
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	039b      	lsls	r3, r3, #14
 8000e54:	4013      	ands	r3, r2
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_GPIO_Init+0x2dc>)
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	40da      	lsrs	r2, r3
 8000e74:	1e13      	subs	r3, r2, #0
 8000e76:	d000      	beq.n	8000e7a <HAL_GPIO_Init+0x2be>
 8000e78:	e6a8      	b.n	8000bcc <HAL_GPIO_Init+0x10>
  } 
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b006      	add	sp, #24
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010000 	.word	0x40010000
 8000e8c:	48000400 	.word	0x48000400
 8000e90:	48000800 	.word	0x48000800
 8000e94:	48000c00 	.word	0x48000c00
 8000e98:	40010400 	.word	0x40010400

08000e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e305      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	d100      	bne.n	8000eba <HAL_RCC_OscConfig+0x1e>
 8000eb8:	e08d      	b.n	8000fd6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000eba:	4bc5      	ldr	r3, [pc, #788]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	d00e      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ec6:	4bc2      	ldr	r3, [pc, #776]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	220c      	movs	r2, #12
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2b08      	cmp	r3, #8
 8000ed0:	d116      	bne.n	8000f00 <HAL_RCC_OscConfig+0x64>
 8000ed2:	4bbf      	ldr	r3, [pc, #764]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	23c0      	movs	r3, #192	; 0xc0
 8000ed8:	025b      	lsls	r3, r3, #9
 8000eda:	401a      	ands	r2, r3
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	025b      	lsls	r3, r3, #9
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d10d      	bne.n	8000f00 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee4:	4bba      	ldr	r3, [pc, #744]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	029b      	lsls	r3, r3, #10
 8000eec:	4013      	ands	r3, r2
 8000eee:	d100      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x56>
 8000ef0:	e070      	b.n	8000fd4 <HAL_RCC_OscConfig+0x138>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d000      	beq.n	8000efc <HAL_RCC_OscConfig+0x60>
 8000efa:	e06b      	b.n	8000fd4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e2dc      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d107      	bne.n	8000f18 <HAL_RCC_OscConfig+0x7c>
 8000f08:	4bb1      	ldr	r3, [pc, #708]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4bb0      	ldr	r3, [pc, #704]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	0249      	lsls	r1, r1, #9
 8000f12:	430a      	orrs	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e02f      	b.n	8000f78 <HAL_RCC_OscConfig+0xdc>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10c      	bne.n	8000f3a <HAL_RCC_OscConfig+0x9e>
 8000f20:	4bab      	ldr	r3, [pc, #684]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4baa      	ldr	r3, [pc, #680]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000f26:	49ab      	ldr	r1, [pc, #684]	; (80011d4 <HAL_RCC_OscConfig+0x338>)
 8000f28:	400a      	ands	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	4ba8      	ldr	r3, [pc, #672]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4ba7      	ldr	r3, [pc, #668]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000f32:	49a9      	ldr	r1, [pc, #676]	; (80011d8 <HAL_RCC_OscConfig+0x33c>)
 8000f34:	400a      	ands	r2, r1
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	e01e      	b.n	8000f78 <HAL_RCC_OscConfig+0xdc>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b05      	cmp	r3, #5
 8000f40:	d10e      	bne.n	8000f60 <HAL_RCC_OscConfig+0xc4>
 8000f42:	4ba3      	ldr	r3, [pc, #652]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4ba2      	ldr	r3, [pc, #648]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000f48:	2180      	movs	r1, #128	; 0x80
 8000f4a:	02c9      	lsls	r1, r1, #11
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	4b9f      	ldr	r3, [pc, #636]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b9e      	ldr	r3, [pc, #632]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000f56:	2180      	movs	r1, #128	; 0x80
 8000f58:	0249      	lsls	r1, r1, #9
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	e00b      	b.n	8000f78 <HAL_RCC_OscConfig+0xdc>
 8000f60:	4b9b      	ldr	r3, [pc, #620]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b9a      	ldr	r3, [pc, #616]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000f66:	499b      	ldr	r1, [pc, #620]	; (80011d4 <HAL_RCC_OscConfig+0x338>)
 8000f68:	400a      	ands	r2, r1
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	4b98      	ldr	r3, [pc, #608]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b97      	ldr	r3, [pc, #604]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000f72:	4999      	ldr	r1, [pc, #612]	; (80011d8 <HAL_RCC_OscConfig+0x33c>)
 8000f74:	400a      	ands	r2, r1
 8000f76:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d014      	beq.n	8000faa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f80:	f7ff fd5e 	bl	8000a40 <HAL_GetTick>
 8000f84:	0003      	movs	r3, r0
 8000f86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f8a:	f7ff fd59 	bl	8000a40 <HAL_GetTick>
 8000f8e:	0002      	movs	r2, r0
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b64      	cmp	r3, #100	; 0x64
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e28e      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9c:	4b8c      	ldr	r3, [pc, #560]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	029b      	lsls	r3, r3, #10
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d0f0      	beq.n	8000f8a <HAL_RCC_OscConfig+0xee>
 8000fa8:	e015      	b.n	8000fd6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000faa:	f7ff fd49 	bl	8000a40 <HAL_GetTick>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb4:	f7ff fd44 	bl	8000a40 <HAL_GetTick>
 8000fb8:	0002      	movs	r2, r0
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b64      	cmp	r3, #100	; 0x64
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e279      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc6:	4b82      	ldr	r3, [pc, #520]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	029b      	lsls	r3, r3, #10
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d1f0      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x118>
 8000fd2:	e000      	b.n	8000fd6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2202      	movs	r2, #2
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d100      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x146>
 8000fe0:	e06c      	b.n	80010bc <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fe2:	4b7b      	ldr	r3, [pc, #492]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d00e      	beq.n	800100a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fec:	4b78      	ldr	r3, [pc, #480]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	220c      	movs	r2, #12
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	2b08      	cmp	r3, #8
 8000ff6:	d11f      	bne.n	8001038 <HAL_RCC_OscConfig+0x19c>
 8000ff8:	4b75      	ldr	r3, [pc, #468]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	23c0      	movs	r3, #192	; 0xc0
 8000ffe:	025b      	lsls	r3, r3, #9
 8001000:	401a      	ands	r2, r3
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	429a      	cmp	r2, r3
 8001008:	d116      	bne.n	8001038 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100a:	4b71      	ldr	r3, [pc, #452]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2202      	movs	r2, #2
 8001010:	4013      	ands	r3, r2
 8001012:	d005      	beq.n	8001020 <HAL_RCC_OscConfig+0x184>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d001      	beq.n	8001020 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e24c      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001020:	4b6b      	ldr	r3, [pc, #428]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	22f8      	movs	r2, #248	; 0xf8
 8001026:	4393      	bics	r3, r2
 8001028:	0019      	movs	r1, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	691b      	ldr	r3, [r3, #16]
 800102e:	00da      	lsls	r2, r3, #3
 8001030:	4b67      	ldr	r3, [pc, #412]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8001032:	430a      	orrs	r2, r1
 8001034:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001036:	e041      	b.n	80010bc <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d024      	beq.n	800108a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001040:	4b63      	ldr	r3, [pc, #396]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b62      	ldr	r3, [pc, #392]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8001046:	2101      	movs	r1, #1
 8001048:	430a      	orrs	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fcf8 	bl	8000a40 <HAL_GetTick>
 8001050:	0003      	movs	r3, r0
 8001052:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001054:	e008      	b.n	8001068 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001056:	f7ff fcf3 	bl	8000a40 <HAL_GetTick>
 800105a:	0002      	movs	r2, r0
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e228      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001068:	4b59      	ldr	r3, [pc, #356]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2202      	movs	r2, #2
 800106e:	4013      	ands	r3, r2
 8001070:	d0f1      	beq.n	8001056 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001072:	4b57      	ldr	r3, [pc, #348]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	22f8      	movs	r2, #248	; 0xf8
 8001078:	4393      	bics	r3, r2
 800107a:	0019      	movs	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	00da      	lsls	r2, r3, #3
 8001082:	4b53      	ldr	r3, [pc, #332]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8001084:	430a      	orrs	r2, r1
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	e018      	b.n	80010bc <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800108a:	4b51      	ldr	r3, [pc, #324]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4b50      	ldr	r3, [pc, #320]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8001090:	2101      	movs	r1, #1
 8001092:	438a      	bics	r2, r1
 8001094:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001096:	f7ff fcd3 	bl	8000a40 <HAL_GetTick>
 800109a:	0003      	movs	r3, r0
 800109c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a0:	f7ff fcce 	bl	8000a40 <HAL_GetTick>
 80010a4:	0002      	movs	r2, r0
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e203      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b2:	4b47      	ldr	r3, [pc, #284]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2202      	movs	r2, #2
 80010b8:	4013      	ands	r3, r2
 80010ba:	d1f1      	bne.n	80010a0 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2208      	movs	r2, #8
 80010c2:	4013      	ands	r3, r2
 80010c4:	d036      	beq.n	8001134 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d019      	beq.n	8001102 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ce:	4b40      	ldr	r3, [pc, #256]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 80010d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010d2:	4b3f      	ldr	r3, [pc, #252]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 80010d4:	2101      	movs	r1, #1
 80010d6:	430a      	orrs	r2, r1
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010da:	f7ff fcb1 	bl	8000a40 <HAL_GetTick>
 80010de:	0003      	movs	r3, r0
 80010e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e4:	f7ff fcac 	bl	8000a40 <HAL_GetTick>
 80010e8:	0002      	movs	r2, r0
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e1e1      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f6:	4b36      	ldr	r3, [pc, #216]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	2202      	movs	r2, #2
 80010fc:	4013      	ands	r3, r2
 80010fe:	d0f1      	beq.n	80010e4 <HAL_RCC_OscConfig+0x248>
 8001100:	e018      	b.n	8001134 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001102:	4b33      	ldr	r3, [pc, #204]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8001104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001106:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8001108:	2101      	movs	r1, #1
 800110a:	438a      	bics	r2, r1
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110e:	f7ff fc97 	bl	8000a40 <HAL_GetTick>
 8001112:	0003      	movs	r3, r0
 8001114:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001118:	f7ff fc92 	bl	8000a40 <HAL_GetTick>
 800111c:	0002      	movs	r2, r0
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e1c7      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800112a:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	2202      	movs	r2, #2
 8001130:	4013      	ands	r3, r2
 8001132:	d1f1      	bne.n	8001118 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2204      	movs	r2, #4
 800113a:	4013      	ands	r3, r2
 800113c:	d100      	bne.n	8001140 <HAL_RCC_OscConfig+0x2a4>
 800113e:	e0b5      	b.n	80012ac <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001140:	201f      	movs	r0, #31
 8001142:	183b      	adds	r3, r7, r0
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001148:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 800114a:	69da      	ldr	r2, [r3, #28]
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	055b      	lsls	r3, r3, #21
 8001150:	4013      	ands	r3, r2
 8001152:	d110      	bne.n	8001176 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8001156:	69da      	ldr	r2, [r3, #28]
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 800115a:	2180      	movs	r1, #128	; 0x80
 800115c:	0549      	lsls	r1, r1, #21
 800115e:	430a      	orrs	r2, r1
 8001160:	61da      	str	r2, [r3, #28]
 8001162:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 8001164:	69da      	ldr	r2, [r3, #28]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	055b      	lsls	r3, r3, #21
 800116a:	4013      	ands	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001170:	183b      	adds	r3, r7, r0
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_RCC_OscConfig+0x340>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4013      	ands	r3, r2
 8001180:	d11a      	bne.n	80011b8 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <HAL_RCC_OscConfig+0x340>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_RCC_OscConfig+0x340>)
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	0049      	lsls	r1, r1, #1
 800118c:	430a      	orrs	r2, r1
 800118e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001190:	f7ff fc56 	bl	8000a40 <HAL_GetTick>
 8001194:	0003      	movs	r3, r0
 8001196:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800119a:	f7ff fc51 	bl	8000a40 <HAL_GetTick>
 800119e:	0002      	movs	r2, r0
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b64      	cmp	r3, #100	; 0x64
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e186      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_RCC_OscConfig+0x340>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	4013      	ands	r3, r2
 80011b6:	d0f0      	beq.n	800119a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d10f      	bne.n	80011e0 <HAL_RCC_OscConfig+0x344>
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 80011c2:	6a1a      	ldr	r2, [r3, #32]
 80011c4:	4b02      	ldr	r3, [pc, #8]	; (80011d0 <HAL_RCC_OscConfig+0x334>)
 80011c6:	2101      	movs	r1, #1
 80011c8:	430a      	orrs	r2, r1
 80011ca:	621a      	str	r2, [r3, #32]
 80011cc:	e036      	b.n	800123c <HAL_RCC_OscConfig+0x3a0>
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	40021000 	.word	0x40021000
 80011d4:	fffeffff 	.word	0xfffeffff
 80011d8:	fffbffff 	.word	0xfffbffff
 80011dc:	40007000 	.word	0x40007000
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10c      	bne.n	8001202 <HAL_RCC_OscConfig+0x366>
 80011e8:	4bb6      	ldr	r3, [pc, #728]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80011ea:	6a1a      	ldr	r2, [r3, #32]
 80011ec:	4bb5      	ldr	r3, [pc, #724]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	438a      	bics	r2, r1
 80011f2:	621a      	str	r2, [r3, #32]
 80011f4:	4bb3      	ldr	r3, [pc, #716]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80011f6:	6a1a      	ldr	r2, [r3, #32]
 80011f8:	4bb2      	ldr	r3, [pc, #712]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80011fa:	2104      	movs	r1, #4
 80011fc:	438a      	bics	r2, r1
 80011fe:	621a      	str	r2, [r3, #32]
 8001200:	e01c      	b.n	800123c <HAL_RCC_OscConfig+0x3a0>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2b05      	cmp	r3, #5
 8001208:	d10c      	bne.n	8001224 <HAL_RCC_OscConfig+0x388>
 800120a:	4bae      	ldr	r3, [pc, #696]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 800120c:	6a1a      	ldr	r2, [r3, #32]
 800120e:	4bad      	ldr	r3, [pc, #692]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 8001210:	2104      	movs	r1, #4
 8001212:	430a      	orrs	r2, r1
 8001214:	621a      	str	r2, [r3, #32]
 8001216:	4bab      	ldr	r3, [pc, #684]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 8001218:	6a1a      	ldr	r2, [r3, #32]
 800121a:	4baa      	ldr	r3, [pc, #680]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 800121c:	2101      	movs	r1, #1
 800121e:	430a      	orrs	r2, r1
 8001220:	621a      	str	r2, [r3, #32]
 8001222:	e00b      	b.n	800123c <HAL_RCC_OscConfig+0x3a0>
 8001224:	4ba7      	ldr	r3, [pc, #668]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 8001226:	6a1a      	ldr	r2, [r3, #32]
 8001228:	4ba6      	ldr	r3, [pc, #664]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 800122a:	2101      	movs	r1, #1
 800122c:	438a      	bics	r2, r1
 800122e:	621a      	str	r2, [r3, #32]
 8001230:	4ba4      	ldr	r3, [pc, #656]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 8001232:	6a1a      	ldr	r2, [r3, #32]
 8001234:	4ba3      	ldr	r3, [pc, #652]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 8001236:	2104      	movs	r1, #4
 8001238:	438a      	bics	r2, r1
 800123a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d014      	beq.n	800126e <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001244:	f7ff fbfc 	bl	8000a40 <HAL_GetTick>
 8001248:	0003      	movs	r3, r0
 800124a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800124c:	e009      	b.n	8001262 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800124e:	f7ff fbf7 	bl	8000a40 <HAL_GetTick>
 8001252:	0002      	movs	r2, r0
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	4a9b      	ldr	r2, [pc, #620]	; (80014c8 <HAL_RCC_OscConfig+0x62c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e12b      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001262:	4b98      	ldr	r3, [pc, #608]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	2202      	movs	r2, #2
 8001268:	4013      	ands	r3, r2
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x3b2>
 800126c:	e013      	b.n	8001296 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126e:	f7ff fbe7 	bl	8000a40 <HAL_GetTick>
 8001272:	0003      	movs	r3, r0
 8001274:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001276:	e009      	b.n	800128c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001278:	f7ff fbe2 	bl	8000a40 <HAL_GetTick>
 800127c:	0002      	movs	r2, r0
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	4a91      	ldr	r2, [pc, #580]	; (80014c8 <HAL_RCC_OscConfig+0x62c>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e116      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800128c:	4b8d      	ldr	r3, [pc, #564]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	2202      	movs	r2, #2
 8001292:	4013      	ands	r3, r2
 8001294:	d1f0      	bne.n	8001278 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001296:	231f      	movs	r3, #31
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d105      	bne.n	80012ac <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012a0:	4b88      	ldr	r3, [pc, #544]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80012a2:	69da      	ldr	r2, [r3, #28]
 80012a4:	4b87      	ldr	r3, [pc, #540]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80012a6:	4989      	ldr	r1, [pc, #548]	; (80014cc <HAL_RCC_OscConfig+0x630>)
 80012a8:	400a      	ands	r2, r1
 80012aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2210      	movs	r2, #16
 80012b2:	4013      	ands	r3, r2
 80012b4:	d063      	beq.n	800137e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d12a      	bne.n	8001314 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012be:	4b81      	ldr	r3, [pc, #516]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80012c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012c2:	4b80      	ldr	r3, [pc, #512]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80012c4:	2104      	movs	r1, #4
 80012c6:	430a      	orrs	r2, r1
 80012c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80012ca:	4b7e      	ldr	r3, [pc, #504]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80012cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012ce:	4b7d      	ldr	r3, [pc, #500]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80012d0:	2101      	movs	r1, #1
 80012d2:	430a      	orrs	r2, r1
 80012d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d6:	f7ff fbb3 	bl	8000a40 <HAL_GetTick>
 80012da:	0003      	movs	r3, r0
 80012dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012e0:	f7ff fbae 	bl	8000a40 <HAL_GetTick>
 80012e4:	0002      	movs	r2, r0
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e0e3      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012f2:	4b74      	ldr	r3, [pc, #464]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80012f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f6:	2202      	movs	r2, #2
 80012f8:	4013      	ands	r3, r2
 80012fa:	d0f1      	beq.n	80012e0 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012fc:	4b71      	ldr	r3, [pc, #452]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80012fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001300:	22f8      	movs	r2, #248	; 0xf8
 8001302:	4393      	bics	r3, r2
 8001304:	0019      	movs	r1, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	00da      	lsls	r2, r3, #3
 800130c:	4b6d      	ldr	r3, [pc, #436]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 800130e:	430a      	orrs	r2, r1
 8001310:	635a      	str	r2, [r3, #52]	; 0x34
 8001312:	e034      	b.n	800137e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	3305      	adds	r3, #5
 800131a:	d111      	bne.n	8001340 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800131c:	4b69      	ldr	r3, [pc, #420]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 800131e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001320:	4b68      	ldr	r3, [pc, #416]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 8001322:	2104      	movs	r1, #4
 8001324:	438a      	bics	r2, r1
 8001326:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001328:	4b66      	ldr	r3, [pc, #408]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 800132a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132c:	22f8      	movs	r2, #248	; 0xf8
 800132e:	4393      	bics	r3, r2
 8001330:	0019      	movs	r1, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	00da      	lsls	r2, r3, #3
 8001338:	4b62      	ldr	r3, [pc, #392]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 800133a:	430a      	orrs	r2, r1
 800133c:	635a      	str	r2, [r3, #52]	; 0x34
 800133e:	e01e      	b.n	800137e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001340:	4b60      	ldr	r3, [pc, #384]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 8001342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001344:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 8001346:	2104      	movs	r1, #4
 8001348:	430a      	orrs	r2, r1
 800134a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800134c:	4b5d      	ldr	r3, [pc, #372]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 800134e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001350:	4b5c      	ldr	r3, [pc, #368]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 8001352:	2101      	movs	r1, #1
 8001354:	438a      	bics	r2, r1
 8001356:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001358:	f7ff fb72 	bl	8000a40 <HAL_GetTick>
 800135c:	0003      	movs	r3, r0
 800135e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001362:	f7ff fb6d 	bl	8000a40 <HAL_GetTick>
 8001366:	0002      	movs	r2, r0
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e0a2      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001374:	4b53      	ldr	r3, [pc, #332]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 8001376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001378:	2202      	movs	r2, #2
 800137a:	4013      	ands	r3, r2
 800137c:	d1f1      	bne.n	8001362 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d100      	bne.n	8001388 <HAL_RCC_OscConfig+0x4ec>
 8001386:	e097      	b.n	80014b8 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001388:	4b4e      	ldr	r3, [pc, #312]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	220c      	movs	r2, #12
 800138e:	4013      	ands	r3, r2
 8001390:	2b08      	cmp	r3, #8
 8001392:	d100      	bne.n	8001396 <HAL_RCC_OscConfig+0x4fa>
 8001394:	e06b      	b.n	800146e <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d14c      	bne.n	8001438 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139e:	4b49      	ldr	r3, [pc, #292]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80013a4:	494a      	ldr	r1, [pc, #296]	; (80014d0 <HAL_RCC_OscConfig+0x634>)
 80013a6:	400a      	ands	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013aa:	f7ff fb49 	bl	8000a40 <HAL_GetTick>
 80013ae:	0003      	movs	r3, r0
 80013b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b4:	f7ff fb44 	bl	8000a40 <HAL_GetTick>
 80013b8:	0002      	movs	r2, r0
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e079      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c6:	4b3f      	ldr	r3, [pc, #252]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	049b      	lsls	r3, r3, #18
 80013ce:	4013      	ands	r3, r2
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d2:	4b3c      	ldr	r3, [pc, #240]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80013d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d6:	220f      	movs	r2, #15
 80013d8:	4393      	bics	r3, r2
 80013da:	0019      	movs	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e0:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80013e2:	430a      	orrs	r2, r1
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80013e6:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4a3a      	ldr	r2, [pc, #232]	; (80014d4 <HAL_RCC_OscConfig+0x638>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	0019      	movs	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	431a      	orrs	r2, r3
 80013fa:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 80013fc:	430a      	orrs	r2, r1
 80013fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001400:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	0449      	lsls	r1, r1, #17
 800140a:	430a      	orrs	r2, r1
 800140c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff fb17 	bl	8000a40 <HAL_GetTick>
 8001412:	0003      	movs	r3, r0
 8001414:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001418:	f7ff fb12 	bl	8000a40 <HAL_GetTick>
 800141c:	0002      	movs	r2, r0
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e047      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	049b      	lsls	r3, r3, #18
 8001432:	4013      	ands	r3, r2
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0x57c>
 8001436:	e03f      	b.n	80014b8 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 800143e:	4924      	ldr	r1, [pc, #144]	; (80014d0 <HAL_RCC_OscConfig+0x634>)
 8001440:	400a      	ands	r2, r1
 8001442:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fafc 	bl	8000a40 <HAL_GetTick>
 8001448:	0003      	movs	r3, r0
 800144a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144e:	f7ff faf7 	bl	8000a40 <HAL_GetTick>
 8001452:	0002      	movs	r2, r0
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e02c      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	049b      	lsls	r3, r3, #18
 8001468:	4013      	ands	r3, r2
 800146a:	d1f0      	bne.n	800144e <HAL_RCC_OscConfig+0x5b2>
 800146c:	e024      	b.n	80014b8 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d101      	bne.n	800147a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e01f      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_RCC_OscConfig+0x628>)
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	23c0      	movs	r3, #192	; 0xc0
 800148a:	025b      	lsls	r3, r3, #9
 800148c:	401a      	ands	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	429a      	cmp	r2, r3
 8001494:	d10e      	bne.n	80014b4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	220f      	movs	r2, #15
 800149a:	401a      	ands	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d107      	bne.n	80014b4 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	23f0      	movs	r3, #240	; 0xf0
 80014a8:	039b      	lsls	r3, r3, #14
 80014aa:	401a      	ands	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	0018      	movs	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	b008      	add	sp, #32
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	40021000 	.word	0x40021000
 80014c8:	00001388 	.word	0x00001388
 80014cc:	efffffff 	.word	0xefffffff
 80014d0:	feffffff 	.word	0xfeffffff
 80014d4:	ffc27fff 	.word	0xffc27fff

080014d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e0b3      	b.n	8001654 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014ec:	4b5b      	ldr	r3, [pc, #364]	; (800165c <HAL_RCC_ClockConfig+0x184>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4013      	ands	r3, r2
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d911      	bls.n	800151e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fa:	4b58      	ldr	r3, [pc, #352]	; (800165c <HAL_RCC_ClockConfig+0x184>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2201      	movs	r2, #1
 8001500:	4393      	bics	r3, r2
 8001502:	0019      	movs	r1, r3
 8001504:	4b55      	ldr	r3, [pc, #340]	; (800165c <HAL_RCC_ClockConfig+0x184>)
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150c:	4b53      	ldr	r3, [pc, #332]	; (800165c <HAL_RCC_ClockConfig+0x184>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2201      	movs	r2, #1
 8001512:	4013      	ands	r3, r2
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d001      	beq.n	800151e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e09a      	b.n	8001654 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	d015      	beq.n	8001554 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2204      	movs	r2, #4
 800152e:	4013      	ands	r3, r2
 8001530:	d006      	beq.n	8001540 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001532:	4b4b      	ldr	r3, [pc, #300]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	4b4a      	ldr	r3, [pc, #296]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 8001538:	21e0      	movs	r1, #224	; 0xe0
 800153a:	00c9      	lsls	r1, r1, #3
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001540:	4b47      	ldr	r3, [pc, #284]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	22f0      	movs	r2, #240	; 0xf0
 8001546:	4393      	bics	r3, r2
 8001548:	0019      	movs	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	4b44      	ldr	r3, [pc, #272]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 8001550:	430a      	orrs	r2, r1
 8001552:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2201      	movs	r2, #1
 800155a:	4013      	ands	r3, r2
 800155c:	d040      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d107      	bne.n	8001576 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	4b3e      	ldr	r3, [pc, #248]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	029b      	lsls	r3, r3, #10
 800156e:	4013      	ands	r3, r2
 8001570:	d114      	bne.n	800159c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e06e      	b.n	8001654 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d107      	bne.n	800158e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800157e:	4b38      	ldr	r3, [pc, #224]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	049b      	lsls	r3, r3, #18
 8001586:	4013      	ands	r3, r2
 8001588:	d108      	bne.n	800159c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e062      	b.n	8001654 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158e:	4b34      	ldr	r3, [pc, #208]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2202      	movs	r2, #2
 8001594:	4013      	ands	r3, r2
 8001596:	d101      	bne.n	800159c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e05b      	b.n	8001654 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800159c:	4b30      	ldr	r3, [pc, #192]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2203      	movs	r2, #3
 80015a2:	4393      	bics	r3, r2
 80015a4:	0019      	movs	r1, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 80015ac:	430a      	orrs	r2, r1
 80015ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015b0:	f7ff fa46 	bl	8000a40 <HAL_GetTick>
 80015b4:	0003      	movs	r3, r0
 80015b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b8:	e009      	b.n	80015ce <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ba:	f7ff fa41 	bl	8000a40 <HAL_GetTick>
 80015be:	0002      	movs	r2, r0
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	4a27      	ldr	r2, [pc, #156]	; (8001664 <HAL_RCC_ClockConfig+0x18c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e042      	b.n	8001654 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	220c      	movs	r2, #12
 80015d4:	401a      	ands	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	429a      	cmp	r2, r3
 80015de:	d1ec      	bne.n	80015ba <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <HAL_RCC_ClockConfig+0x184>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2201      	movs	r2, #1
 80015e6:	4013      	ands	r3, r2
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d211      	bcs.n	8001612 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_RCC_ClockConfig+0x184>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2201      	movs	r2, #1
 80015f4:	4393      	bics	r3, r2
 80015f6:	0019      	movs	r1, r3
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_RCC_ClockConfig+0x184>)
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <HAL_RCC_ClockConfig+0x184>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2201      	movs	r2, #1
 8001606:	4013      	ands	r3, r2
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d001      	beq.n	8001612 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e020      	b.n	8001654 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2204      	movs	r2, #4
 8001618:	4013      	ands	r3, r2
 800161a:	d009      	beq.n	8001630 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_RCC_ClockConfig+0x190>)
 8001622:	4013      	ands	r3, r2
 8001624:	0019      	movs	r1, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 800162c:	430a      	orrs	r2, r1
 800162e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001630:	f000 f820 	bl	8001674 <HAL_RCC_GetSysClockFreq>
 8001634:	0001      	movs	r1, r0
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_RCC_ClockConfig+0x188>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	220f      	movs	r2, #15
 800163e:	4013      	ands	r3, r2
 8001640:	4a0a      	ldr	r2, [pc, #40]	; (800166c <HAL_RCC_ClockConfig+0x194>)
 8001642:	5cd3      	ldrb	r3, [r2, r3]
 8001644:	000a      	movs	r2, r1
 8001646:	40da      	lsrs	r2, r3
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_RCC_ClockConfig+0x198>)
 800164a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800164c:	2000      	movs	r0, #0
 800164e:	f7ff f9b1 	bl	80009b4 <HAL_InitTick>
  
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	b004      	add	sp, #16
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40022000 	.word	0x40022000
 8001660:	40021000 	.word	0x40021000
 8001664:	00001388 	.word	0x00001388
 8001668:	fffff8ff 	.word	0xfffff8ff
 800166c:	080097f0 	.word	0x080097f0
 8001670:	20000000 	.word	0x20000000

08001674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b08f      	sub	sp, #60	; 0x3c
 8001678:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800167a:	2314      	movs	r3, #20
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	4a2c      	ldr	r2, [pc, #176]	; (8001730 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001680:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001682:	c313      	stmia	r3!, {r0, r1, r4}
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	4a2a      	ldr	r2, [pc, #168]	; (8001734 <HAL_RCC_GetSysClockFreq+0xc0>)
 800168c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800168e:	c313      	stmia	r3!, {r0, r1, r4}
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001698:	2300      	movs	r3, #0
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
 800169c:	2300      	movs	r3, #0
 800169e:	637b      	str	r3, [r7, #52]	; 0x34
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80016a8:	4b23      	ldr	r3, [pc, #140]	; (8001738 <HAL_RCC_GetSysClockFreq+0xc4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b0:	220c      	movs	r2, #12
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d002      	beq.n	80016be <HAL_RCC_GetSysClockFreq+0x4a>
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d003      	beq.n	80016c4 <HAL_RCC_GetSysClockFreq+0x50>
 80016bc:	e02f      	b.n	800171e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016be:	4b1f      	ldr	r3, [pc, #124]	; (800173c <HAL_RCC_GetSysClockFreq+0xc8>)
 80016c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80016c2:	e02f      	b.n	8001724 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80016c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c6:	0c9b      	lsrs	r3, r3, #18
 80016c8:	220f      	movs	r2, #15
 80016ca:	4013      	ands	r3, r2
 80016cc:	2214      	movs	r2, #20
 80016ce:	18ba      	adds	r2, r7, r2
 80016d0:	5cd3      	ldrb	r3, [r2, r3]
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_RCC_GetSysClockFreq+0xc4>)
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d8:	220f      	movs	r2, #15
 80016da:	4013      	ands	r3, r2
 80016dc:	1d3a      	adds	r2, r7, #4
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016e4:	23c0      	movs	r3, #192	; 0xc0
 80016e6:	025b      	lsls	r3, r3, #9
 80016e8:	401a      	ands	r2, r3
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	025b      	lsls	r3, r3, #9
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d109      	bne.n	8001706 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016f4:	4811      	ldr	r0, [pc, #68]	; (800173c <HAL_RCC_GetSysClockFreq+0xc8>)
 80016f6:	f7fe fd19 	bl	800012c <__udivsi3>
 80016fa:	0003      	movs	r3, r0
 80016fc:	001a      	movs	r2, r3
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	4353      	muls	r3, r2
 8001702:	637b      	str	r3, [r7, #52]	; 0x34
 8001704:	e008      	b.n	8001718 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <HAL_RCC_GetSysClockFreq+0xc8>)
 800170a:	f7fe fd0f 	bl	800012c <__udivsi3>
 800170e:	0003      	movs	r3, r0
 8001710:	001a      	movs	r2, r3
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	4353      	muls	r3, r2
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800171c:	e002      	b.n	8001724 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001720:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001722:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001726:	0018      	movs	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	b00f      	add	sp, #60	; 0x3c
 800172c:	bd90      	pop	{r4, r7, pc}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	08008f24 	.word	0x08008f24
 8001734:	08008f34 	.word	0x08008f34
 8001738:	40021000 	.word	0x40021000
 800173c:	007a1200 	.word	0x007a1200

08001740 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e0a8      	b.n	80018a4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	2382      	movs	r3, #130	; 0x82
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	429a      	cmp	r2, r3
 8001764:	d009      	beq.n	800177a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	61da      	str	r2, [r3, #28]
 800176c:	e005      	b.n	800177a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	225d      	movs	r2, #93	; 0x5d
 8001784:	5c9b      	ldrb	r3, [r3, r2]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d107      	bne.n	800179c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	225c      	movs	r2, #92	; 0x5c
 8001790:	2100      	movs	r1, #0
 8001792:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	0018      	movs	r0, r3
 8001798:	f7ff f842 	bl	8000820 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	225d      	movs	r2, #93	; 0x5d
 80017a0:	2102      	movs	r1, #2
 80017a2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2140      	movs	r1, #64	; 0x40
 80017b0:	438a      	bics	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	23e0      	movs	r3, #224	; 0xe0
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	429a      	cmp	r2, r3
 80017be:	d902      	bls.n	80017c6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	e002      	b.n	80017cc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	015b      	lsls	r3, r3, #5
 80017ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	23f0      	movs	r3, #240	; 0xf0
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d008      	beq.n	80017ea <HAL_SPI_Init+0xaa>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	23e0      	movs	r3, #224	; 0xe0
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d002      	beq.n	80017ea <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	2382      	movs	r3, #130	; 0x82
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	401a      	ands	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6899      	ldr	r1, [r3, #8]
 80017f8:	2384      	movs	r3, #132	; 0x84
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	400b      	ands	r3, r1
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	2102      	movs	r1, #2
 8001806:	400b      	ands	r3, r1
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	2101      	movs	r1, #1
 8001810:	400b      	ands	r3, r1
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6999      	ldr	r1, [r3, #24]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	400b      	ands	r3, r1
 800181e:	431a      	orrs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	2138      	movs	r1, #56	; 0x38
 8001826:	400b      	ands	r3, r1
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	2180      	movs	r1, #128	; 0x80
 8001830:	400b      	ands	r3, r1
 8001832:	431a      	orrs	r2, r3
 8001834:	0011      	movs	r1, r2
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	019b      	lsls	r3, r3, #6
 800183e:	401a      	ands	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	0c1b      	lsrs	r3, r3, #16
 800184e:	2204      	movs	r2, #4
 8001850:	401a      	ands	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	2110      	movs	r1, #16
 8001858:	400b      	ands	r3, r1
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001860:	2108      	movs	r1, #8
 8001862:	400b      	ands	r3, r1
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68d9      	ldr	r1, [r3, #12]
 800186a:	23f0      	movs	r3, #240	; 0xf0
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	400b      	ands	r3, r1
 8001870:	431a      	orrs	r2, r3
 8001872:	0011      	movs	r1, r2
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	015b      	lsls	r3, r3, #5
 800187a:	401a      	ands	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	69da      	ldr	r2, [r3, #28]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4907      	ldr	r1, [pc, #28]	; (80018ac <HAL_SPI_Init+0x16c>)
 8001890:	400a      	ands	r2, r1
 8001892:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	225d      	movs	r2, #93	; 0x5d
 800189e:	2101      	movs	r1, #1
 80018a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	0018      	movs	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b004      	add	sp, #16
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	fffff7ff 	.word	0xfffff7ff

080018b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	001a      	movs	r2, r3
 80018be:	1cbb      	adds	r3, r7, #2
 80018c0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80018c2:	2301      	movs	r3, #1
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80018c6:	2323      	movs	r3, #35	; 0x23
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	225c      	movs	r2, #92	; 0x5c
 80018d2:	5c9b      	ldrb	r3, [r3, r2]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_SPI_TransmitReceive+0x2c>
 80018d8:	2302      	movs	r3, #2
 80018da:	e1b5      	b.n	8001c48 <HAL_SPI_TransmitReceive+0x398>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	225c      	movs	r2, #92	; 0x5c
 80018e0:	2101      	movs	r1, #1
 80018e2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80018e4:	f7ff f8ac 	bl	8000a40 <HAL_GetTick>
 80018e8:	0003      	movs	r3, r0
 80018ea:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80018ec:	201b      	movs	r0, #27
 80018ee:	183b      	adds	r3, r7, r0
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	215d      	movs	r1, #93	; 0x5d
 80018f4:	5c52      	ldrb	r2, [r2, r1]
 80018f6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80018fe:	2312      	movs	r3, #18
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	1cba      	adds	r2, r7, #2
 8001904:	8812      	ldrh	r2, [r2, #0]
 8001906:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001908:	183b      	adds	r3, r7, r0
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d011      	beq.n	8001934 <HAL_SPI_TransmitReceive+0x84>
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	2382      	movs	r3, #130	; 0x82
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	429a      	cmp	r2, r3
 8001918:	d107      	bne.n	800192a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d103      	bne.n	800192a <HAL_SPI_TransmitReceive+0x7a>
 8001922:	183b      	adds	r3, r7, r0
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b04      	cmp	r3, #4
 8001928:	d004      	beq.n	8001934 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800192a:	2323      	movs	r3, #35	; 0x23
 800192c:	18fb      	adds	r3, r7, r3
 800192e:	2202      	movs	r2, #2
 8001930:	701a      	strb	r2, [r3, #0]
    goto error;
 8001932:	e17e      	b.n	8001c32 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d006      	beq.n	8001948 <HAL_SPI_TransmitReceive+0x98>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_SPI_TransmitReceive+0x98>
 8001940:	1cbb      	adds	r3, r7, #2
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d104      	bne.n	8001952 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001948:	2323      	movs	r3, #35	; 0x23
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001950:	e16f      	b.n	8001c32 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	225d      	movs	r2, #93	; 0x5d
 8001956:	5c9b      	ldrb	r3, [r3, r2]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b04      	cmp	r3, #4
 800195c:	d003      	beq.n	8001966 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	225d      	movs	r2, #93	; 0x5d
 8001962:	2105      	movs	r1, #5
 8001964:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1cba      	adds	r2, r7, #2
 8001976:	2146      	movs	r1, #70	; 0x46
 8001978:	8812      	ldrh	r2, [r2, #0]
 800197a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1cba      	adds	r2, r7, #2
 8001980:	2144      	movs	r1, #68	; 0x44
 8001982:	8812      	ldrh	r2, [r2, #0]
 8001984:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1cba      	adds	r2, r7, #2
 8001990:	8812      	ldrh	r2, [r2, #0]
 8001992:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1cba      	adds	r2, r7, #2
 8001998:	8812      	ldrh	r2, [r2, #0]
 800199a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	23e0      	movs	r3, #224	; 0xe0
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d908      	bls.n	80019c6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	49a4      	ldr	r1, [pc, #656]	; (8001c50 <HAL_SPI_TransmitReceive+0x3a0>)
 80019c0:	400a      	ands	r2, r1
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	e008      	b.n	80019d8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2180      	movs	r1, #128	; 0x80
 80019d2:	0149      	lsls	r1, r1, #5
 80019d4:	430a      	orrs	r2, r1
 80019d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2240      	movs	r2, #64	; 0x40
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b40      	cmp	r3, #64	; 0x40
 80019e4:	d007      	beq.n	80019f6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2140      	movs	r1, #64	; 0x40
 80019f2:	430a      	orrs	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	23e0      	movs	r3, #224	; 0xe0
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d800      	bhi.n	8001a04 <HAL_SPI_TransmitReceive+0x154>
 8001a02:	e07f      	b.n	8001b04 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_SPI_TransmitReceive+0x168>
 8001a0c:	2312      	movs	r3, #18
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d000      	beq.n	8001a18 <HAL_SPI_TransmitReceive+0x168>
 8001a16:	e069      	b.n	8001aec <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1c:	881a      	ldrh	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a28:	1c9a      	adds	r2, r3, #2
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a3c:	e056      	b.n	8001aec <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2202      	movs	r2, #2
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d11b      	bne.n	8001a84 <HAL_SPI_TransmitReceive+0x1d4>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d016      	beq.n	8001a84 <HAL_SPI_TransmitReceive+0x1d4>
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d113      	bne.n	8001a84 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a60:	881a      	ldrh	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6c:	1c9a      	adds	r2, r3, #2
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d11c      	bne.n	8001acc <HAL_SPI_TransmitReceive+0x21c>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2246      	movs	r2, #70	; 0x46
 8001a96:	5a9b      	ldrh	r3, [r3, r2]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d016      	beq.n	8001acc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	b292      	uxth	r2, r2
 8001aaa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	1c9a      	adds	r2, r3, #2
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2246      	movs	r2, #70	; 0x46
 8001aba:	5a9b      	ldrh	r3, [r3, r2]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b299      	uxth	r1, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2246      	movs	r2, #70	; 0x46
 8001ac6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001acc:	f7fe ffb8 	bl	8000a40 <HAL_GetTick>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d807      	bhi.n	8001aec <HAL_SPI_TransmitReceive+0x23c>
 8001adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ade:	3301      	adds	r3, #1
 8001ae0:	d004      	beq.n	8001aec <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8001ae2:	2323      	movs	r3, #35	; 0x23
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	701a      	strb	r2, [r3, #0]
        goto error;
 8001aea:	e0a2      	b.n	8001c32 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1a3      	bne.n	8001a3e <HAL_SPI_TransmitReceive+0x18e>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2246      	movs	r2, #70	; 0x46
 8001afa:	5a9b      	ldrh	r3, [r3, r2]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d19d      	bne.n	8001a3e <HAL_SPI_TransmitReceive+0x18e>
 8001b02:	e085      	b.n	8001c10 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_SPI_TransmitReceive+0x268>
 8001b0c:	2312      	movs	r3, #18
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d000      	beq.n	8001b18 <HAL_SPI_TransmitReceive+0x268>
 8001b16:	e070      	b.n	8001bfa <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	330c      	adds	r3, #12
 8001b22:	7812      	ldrb	r2, [r2, #0]
 8001b24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b3e:	e05c      	b.n	8001bfa <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2202      	movs	r2, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d11c      	bne.n	8001b88 <HAL_SPI_TransmitReceive+0x2d8>
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d017      	beq.n	8001b88 <HAL_SPI_TransmitReceive+0x2d8>
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d114      	bne.n	8001b88 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	330c      	adds	r3, #12
 8001b68:	7812      	ldrb	r2, [r2, #0]
 8001b6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d11e      	bne.n	8001bd4 <HAL_SPI_TransmitReceive+0x324>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2246      	movs	r2, #70	; 0x46
 8001b9a:	5a9b      	ldrh	r3, [r3, r2]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d018      	beq.n	8001bd4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	330c      	adds	r3, #12
 8001ba8:	001a      	movs	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	7812      	ldrb	r2, [r2, #0]
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2246      	movs	r2, #70	; 0x46
 8001bc2:	5a9b      	ldrh	r3, [r3, r2]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b299      	uxth	r1, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2246      	movs	r2, #70	; 0x46
 8001bce:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001bd4:	f7fe ff34 	bl	8000a40 <HAL_GetTick>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d802      	bhi.n	8001bea <HAL_SPI_TransmitReceive+0x33a>
 8001be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be6:	3301      	adds	r3, #1
 8001be8:	d102      	bne.n	8001bf0 <HAL_SPI_TransmitReceive+0x340>
 8001bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d104      	bne.n	8001bfa <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8001bf0:	2323      	movs	r3, #35	; 0x23
 8001bf2:	18fb      	adds	r3, r7, r3
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	701a      	strb	r2, [r3, #0]
        goto error;
 8001bf8:	e01b      	b.n	8001c32 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d19d      	bne.n	8001b40 <HAL_SPI_TransmitReceive+0x290>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2246      	movs	r2, #70	; 0x46
 8001c08:	5a9b      	ldrh	r3, [r3, r2]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d197      	bne.n	8001b40 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	0018      	movs	r0, r3
 8001c18:	f000 f94c 	bl	8001eb4 <SPI_EndRxTxTransaction>
 8001c1c:	1e03      	subs	r3, r0, #0
 8001c1e:	d007      	beq.n	8001c30 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8001c20:	2323      	movs	r3, #35	; 0x23
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	661a      	str	r2, [r3, #96]	; 0x60
 8001c2e:	e000      	b.n	8001c32 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8001c30:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	225d      	movs	r2, #93	; 0x5d
 8001c36:	2101      	movs	r1, #1
 8001c38:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	225c      	movs	r2, #92	; 0x5c
 8001c3e:	2100      	movs	r1, #0
 8001c40:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001c42:	2323      	movs	r3, #35	; 0x23
 8001c44:	18fb      	adds	r3, r7, r3
 8001c46:	781b      	ldrb	r3, [r3, #0]
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b00a      	add	sp, #40	; 0x28
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	ffffefff 	.word	0xffffefff

08001c54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	1dfb      	adds	r3, r7, #7
 8001c62:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001c64:	f7fe feec 	bl	8000a40 <HAL_GetTick>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	18d3      	adds	r3, r2, r3
 8001c72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001c74:	f7fe fee4 	bl	8000a40 <HAL_GetTick>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c7c:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	015b      	lsls	r3, r3, #5
 8001c82:	0d1b      	lsrs	r3, r3, #20
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	4353      	muls	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c8a:	e058      	b.n	8001d3e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	d055      	beq.n	8001d3e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001c92:	f7fe fed5 	bl	8000a40 <HAL_GetTick>
 8001c96:	0002      	movs	r2, r0
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d902      	bls.n	8001ca8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d142      	bne.n	8001d2e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	21e0      	movs	r1, #224	; 0xe0
 8001cb4:	438a      	bics	r2, r1
 8001cb6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	2382      	movs	r3, #130	; 0x82
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d113      	bne.n	8001cec <SPI_WaitFlagStateUntilTimeout+0x98>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d005      	beq.n	8001cdc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d107      	bne.n	8001cec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2140      	movs	r1, #64	; 0x40
 8001ce8:	438a      	bics	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	019b      	lsls	r3, r3, #6
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d110      	bne.n	8001d1a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	491a      	ldr	r1, [pc, #104]	; (8001d6c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001d04:	400a      	ands	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2180      	movs	r1, #128	; 0x80
 8001d14:	0189      	lsls	r1, r1, #6
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	225d      	movs	r2, #93	; 0x5d
 8001d1e:	2101      	movs	r1, #1
 8001d20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	225c      	movs	r2, #92	; 0x5c
 8001d26:	2100      	movs	r1, #0
 8001d28:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e017      	b.n	8001d5e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	4013      	ands	r3, r2
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	425a      	negs	r2, r3
 8001d4e:	4153      	adcs	r3, r2
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	001a      	movs	r2, r3
 8001d54:	1dfb      	adds	r3, r7, #7
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d197      	bne.n	8001c8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b008      	add	sp, #32
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	ffffdfff 	.word	0xffffdfff

08001d70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	; 0x28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001d7e:	2317      	movs	r3, #23
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001d86:	f7fe fe5b 	bl	8000a40 <HAL_GetTick>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8e:	1a9b      	subs	r3, r3, r2
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	18d3      	adds	r3, r2, r3
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8001d96:	f7fe fe53 	bl	8000a40 <HAL_GetTick>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	330c      	adds	r3, #12
 8001da4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001da6:	4b41      	ldr	r3, [pc, #260]	; (8001eac <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	0013      	movs	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	189b      	adds	r3, r3, r2
 8001db0:	00da      	lsls	r2, r3, #3
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	0d1b      	lsrs	r3, r3, #20
 8001db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db8:	4353      	muls	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001dbc:	e068      	b.n	8001e90 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	23c0      	movs	r3, #192	; 0xc0
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d10a      	bne.n	8001dde <SPI_WaitFifoStateUntilTimeout+0x6e>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d107      	bne.n	8001dde <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	2117      	movs	r1, #23
 8001dd6:	187b      	adds	r3, r7, r1
 8001dd8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001dda:	187b      	adds	r3, r7, r1
 8001ddc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	3301      	adds	r3, #1
 8001de2:	d055      	beq.n	8001e90 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001de4:	f7fe fe2c 	bl	8000a40 <HAL_GetTick>
 8001de8:	0002      	movs	r2, r0
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d902      	bls.n	8001dfa <SPI_WaitFifoStateUntilTimeout+0x8a>
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d142      	bne.n	8001e80 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	21e0      	movs	r1, #224	; 0xe0
 8001e06:	438a      	bics	r2, r1
 8001e08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	2382      	movs	r3, #130	; 0x82
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d113      	bne.n	8001e3e <SPI_WaitFifoStateUntilTimeout+0xce>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d005      	beq.n	8001e2e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d107      	bne.n	8001e3e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2140      	movs	r1, #64	; 0x40
 8001e3a:	438a      	bics	r2, r1
 8001e3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	019b      	lsls	r3, r3, #6
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d110      	bne.n	8001e6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4916      	ldr	r1, [pc, #88]	; (8001eb0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8001e56:	400a      	ands	r2, r1
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	0189      	lsls	r1, r1, #6
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	225d      	movs	r2, #93	; 0x5d
 8001e70:	2101      	movs	r1, #1
 8001e72:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	225c      	movs	r2, #92	; 0x5c
 8001e78:	2100      	movs	r1, #0
 8001e7a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e010      	b.n	8001ea2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d18e      	bne.n	8001dbe <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	b00a      	add	sp, #40	; 0x28
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	ffffdfff 	.word	0xffffdfff

08001eb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	23c0      	movs	r3, #192	; 0xc0
 8001ec4:	0159      	lsls	r1, r3, #5
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	0013      	movs	r3, r2
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f7ff ff4e 	bl	8001d70 <SPI_WaitFifoStateUntilTimeout>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d007      	beq.n	8001ee8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001edc:	2220      	movs	r2, #32
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e027      	b.n	8001f38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	0013      	movs	r3, r2
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2180      	movs	r1, #128	; 0x80
 8001ef6:	f7ff fead 	bl	8001c54 <SPI_WaitFlagStateUntilTimeout>
 8001efa:	1e03      	subs	r3, r0, #0
 8001efc:	d007      	beq.n	8001f0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f02:	2220      	movs	r2, #32
 8001f04:	431a      	orrs	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e014      	b.n	8001f38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	23c0      	movs	r3, #192	; 0xc0
 8001f12:	00d9      	lsls	r1, r3, #3
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	0013      	movs	r3, r2
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f7ff ff27 	bl	8001d70 <SPI_WaitFifoStateUntilTimeout>
 8001f22:	1e03      	subs	r3, r0, #0
 8001f24:	d007      	beq.n	8001f36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e000      	b.n	8001f38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	0018      	movs	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b004      	add	sp, #16
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8001f44:	4a06      	ldr	r2, [pc, #24]	; (8001f60 <MX_FATFS_Init+0x20>)
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <MX_FATFS_Init+0x24>)
 8001f48:	0011      	movs	r1, r2
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f005 f870 	bl	8007030 <FATFS_LinkDriver>
 8001f50:	0003      	movs	r3, r0
 8001f52:	001a      	movs	r2, r3
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <MX_FATFS_Init+0x28>)
 8001f56:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	20000898 	.word	0x20000898
 8001f64:	2000000c 	.word	0x2000000c
 8001f68:	2000089c 	.word	0x2000089c

08001f6c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8001f70:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8001f72:	0018      	movs	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	0002      	movs	r2, r0
 8001f80:	1dfb      	adds	r3, r7, #7
 8001f82:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv);
 8001f84:	1dfb      	adds	r3, r7, #7
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f000 fa21 	bl	80023d0 <USER_SPI_initialize>
 8001f8e:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 8001f90:	0018      	movs	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b002      	add	sp, #8
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	1dfb      	adds	r3, r7, #7
 8001fa2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 8001fa4:	1dfb      	adds	r3, r7, #7
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f000 fb29 	bl	8002600 <USER_SPI_status>
 8001fae:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b002      	add	sp, #8
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8001fb8:	b5b0      	push	{r4, r5, r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	250f      	movs	r5, #15
 8001fc6:	197b      	adds	r3, r7, r5
 8001fc8:	1c02      	adds	r2, r0, #0
 8001fca:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 8001fcc:	683c      	ldr	r4, [r7, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	197b      	adds	r3, r7, r5
 8001fd4:	7818      	ldrb	r0, [r3, #0]
 8001fd6:	0023      	movs	r3, r4
 8001fd8:	f000 fb28 	bl	800262c <USER_SPI_read>
 8001fdc:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b004      	add	sp, #16
 8001fe4:	bdb0      	pop	{r4, r5, r7, pc}

08001fe6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8001fe6:	b5b0      	push	{r4, r5, r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
 8001ff2:	250f      	movs	r5, #15
 8001ff4:	197b      	adds	r3, r7, r5
 8001ff6:	1c02      	adds	r2, r0, #0
 8001ff8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 8001ffa:	683c      	ldr	r4, [r7, #0]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	68b9      	ldr	r1, [r7, #8]
 8002000:	197b      	adds	r3, r7, r5
 8002002:	7818      	ldrb	r0, [r3, #0]
 8002004:	0023      	movs	r3, r4
 8002006:	f000 fb7d 	bl	8002704 <USER_SPI_write>
 800200a:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	b004      	add	sp, #16
 8002012:	bdb0      	pop	{r4, r5, r7, pc}

08002014 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	603a      	str	r2, [r7, #0]
 800201c:	1dfb      	adds	r3, r7, #7
 800201e:	1c02      	adds	r2, r0, #0
 8002020:	701a      	strb	r2, [r3, #0]
 8002022:	1dbb      	adds	r3, r7, #6
 8002024:	1c0a      	adds	r2, r1, #0
 8002026:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	1dbb      	adds	r3, r7, #6
 800202c:	7819      	ldrb	r1, [r3, #0]
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	0018      	movs	r0, r3
 8002034:	f000 fbe6 	bl	8002804 <USER_SPI_ioctl>
 8002038:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b002      	add	sp, #8
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <SPI_Timer_On>:
static BYTE CardType; /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	spiTimerTickStart = HAL_GetTick();
 800204c:	f7fe fcf8 	bl	8000a40 <HAL_GetTick>
 8002050:	0002      	movs	r2, r0
 8002052:	4b04      	ldr	r3, [pc, #16]	; (8002064 <SPI_Timer_On+0x20>)
 8002054:	601a      	str	r2, [r3, #0]
	spiTimerTickDelay = waitTicks;
 8002056:	4b04      	ldr	r3, [pc, #16]	; (8002068 <SPI_Timer_On+0x24>)
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	601a      	str	r2, [r3, #0]
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b002      	add	sp, #8
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000cfc 	.word	0x20000cfc
 8002068:	20000d00 	.word	0x20000d00

0800206c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002070:	f7fe fce6 	bl	8000a40 <HAL_GetTick>
 8002074:	0002      	movs	r2, r0
 8002076:	4b06      	ldr	r3, [pc, #24]	; (8002090 <SPI_Timer_Status+0x24>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	1ad2      	subs	r2, r2, r3
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <SPI_Timer_Status+0x28>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	419b      	sbcs	r3, r3
 8002084:	425b      	negs	r3, r3
 8002086:	b2db      	uxtb	r3, r3
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	20000cfc 	.word	0x20000cfc
 8002094:	20000d00 	.word	0x20000d00

08002098 <xchg_spi>:
/* SPI controls (Platform dependent)                                     */
/*-----------------------------------------------------------------------*/

/* Exchange a byte */
static BYTE xchg_spi(BYTE dat /* Data to send */
) {
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b087      	sub	sp, #28
 800209c:	af02      	add	r7, sp, #8
 800209e:	0002      	movs	r2, r0
 80020a0:	1dfb      	adds	r3, r7, #7
 80020a2:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
	HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80020a4:	240f      	movs	r4, #15
 80020a6:	193a      	adds	r2, r7, r4
 80020a8:	1df9      	adds	r1, r7, #7
 80020aa:	4806      	ldr	r0, [pc, #24]	; (80020c4 <xchg_spi+0x2c>)
 80020ac:	2332      	movs	r3, #50	; 0x32
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2301      	movs	r3, #1
 80020b2:	f7ff fbfd 	bl	80018b0 <HAL_SPI_TransmitReceive>
	return rxDat;
 80020b6:	193b      	adds	r3, r7, r4
 80020b8:	781b      	ldrb	r3, [r3, #0]
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b005      	add	sp, #20
 80020c0:	bd90      	pop	{r4, r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	2000059c 	.word	0x2000059c

080020c8 <rcvr_spi_multi>:

/* Receive multiple byte */
static
void rcvr_spi_multi(BYTE *buff, /* Pointer to data buffer */
UINT btr /* Number of bytes to receive (even number) */
) {
 80020c8:	b590      	push	{r4, r7, lr}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
	for (UINT i = 0; i < btr; i++) {
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	e00a      	b.n	80020ee <rcvr_spi_multi+0x26>
		*(buff + i) = xchg_spi(0xFF);
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	18d4      	adds	r4, r2, r3
 80020de:	20ff      	movs	r0, #255	; 0xff
 80020e0:	f7ff ffda 	bl	8002098 <xchg_spi>
 80020e4:	0003      	movs	r3, r0
 80020e6:	7023      	strb	r3, [r4, #0]
	for (UINT i = 0; i < btr; i++) {
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	3301      	adds	r3, #1
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d3f0      	bcc.n	80020d8 <rcvr_spi_multi+0x10>
	}
}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	46c0      	nop			; (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b005      	add	sp, #20
 80020fe:	bd90      	pop	{r4, r7, pc}

08002100 <xmit_spi_multi>:
#if _USE_WRITE
/* Send multiple byte */
static
void xmit_spi_multi(const BYTE *buff, /* Pointer to the data */
UINT btx /* Number of bytes to send (even number) */
) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
	for (UINT i = 0; i < btx; i++) {
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	e009      	b.n	8002124 <xmit_spi_multi+0x24>
		xchg_spi(*(buff + i));
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	18d3      	adds	r3, r2, r3
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	0018      	movs	r0, r3
 800211a:	f7ff ffbd 	bl	8002098 <xchg_spi>
	for (UINT i = 0; i < btx; i++) {
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	3301      	adds	r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d3f1      	bcc.n	8002110 <xmit_spi_multi+0x10>
	}
}
 800212c:	46c0      	nop			; (mov r8, r8)
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	46bd      	mov	sp, r7
 8002132:	b004      	add	sp, #16
 8002134:	bd80      	pop	{r7, pc}

08002136 <wait_ready>:
/*-----------------------------------------------------------------------*/

static
int wait_ready( /* 1:Ready, 0:Timeout */
UINT wt /* Timeout [ms] */
) {
 8002136:	b5b0      	push	{r4, r5, r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800213e:	f7fe fc7f 	bl	8000a40 <HAL_GetTick>
 8002142:	0003      	movs	r3, r0
 8002144:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t) wt;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800214a:	250f      	movs	r5, #15
 800214c:	197c      	adds	r4, r7, r5
 800214e:	20ff      	movs	r0, #255	; 0xff
 8002150:	f7ff ffa2 	bl	8002098 <xchg_spi>
 8002154:	0003      	movs	r3, r0
 8002156:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF
			&& ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay)); /* Wait for card goes ready or timeout */
 8002158:	197b      	adds	r3, r7, r5
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2bff      	cmp	r3, #255	; 0xff
 800215e:	d007      	beq.n	8002170 <wait_ready+0x3a>
 8002160:	f7fe fc6e 	bl	8000a40 <HAL_GetTick>
 8002164:	0002      	movs	r2, r0
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	429a      	cmp	r2, r3
 800216e:	d8ec      	bhi.n	800214a <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 8002170:	230f      	movs	r3, #15
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	3bff      	subs	r3, #255	; 0xff
 8002178:	425a      	negs	r2, r3
 800217a:	4153      	adcs	r3, r2
 800217c:	b2db      	uxtb	r3, r3
}
 800217e:	0018      	movs	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	b006      	add	sp, #24
 8002184:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002188 <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect(void) {
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
	CS_HIGH(); /* Set CS# high */
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <despiselect+0x1c>)
 800218e:	2201      	movs	r2, #1
 8002190:	2106      	movs	r1, #6
 8002192:	0018      	movs	r0, r3
 8002194:	f000 fe46 	bl	8002e24 <gpio_write>
	xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002198:	20ff      	movs	r0, #255	; 0xff
 800219a:	f7ff ff7d 	bl	8002098 <xchg_spi>

}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	48000400 	.word	0x48000400

080021a8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect(void) /* 1:OK, 0:Timeout */
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
	CS_LOW(); /* Set CS# low */
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <spiselect+0x34>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	2106      	movs	r1, #6
 80021b2:	0018      	movs	r0, r3
 80021b4:	f000 fe36 	bl	8002e24 <gpio_write>
	xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 80021b8:	20ff      	movs	r0, #255	; 0xff
 80021ba:	f7ff ff6d 	bl	8002098 <xchg_spi>
	if (wait_ready(500))
 80021be:	23fa      	movs	r3, #250	; 0xfa
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	0018      	movs	r0, r3
 80021c4:	f7ff ffb7 	bl	8002136 <wait_ready>
 80021c8:	1e03      	subs	r3, r0, #0
 80021ca:	d001      	beq.n	80021d0 <spiselect+0x28>
		return 1; /* Wait for card ready */
 80021cc:	2301      	movs	r3, #1
 80021ce:	e002      	b.n	80021d6 <spiselect+0x2e>

	despiselect();
 80021d0:	f7ff ffda 	bl	8002188 <despiselect>
	return 0; /* Timeout */
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	0018      	movs	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	48000400 	.word	0x48000400

080021e0 <rcvr_datablock>:

static
int rcvr_datablock( /* 1:OK, 0:Error */
BYTE *buff, /* Data buffer */
UINT btr /* Data block length (byte) */
) {
 80021e0:	b5b0      	push	{r4, r5, r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
	BYTE token;

	SPI_Timer_On(200);
 80021ea:	20c8      	movs	r0, #200	; 0xc8
 80021ec:	f7ff ff2a 	bl	8002044 <SPI_Timer_On>
	do { /* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80021f0:	250f      	movs	r5, #15
 80021f2:	197c      	adds	r4, r7, r5
 80021f4:	20ff      	movs	r0, #255	; 0xff
 80021f6:	f7ff ff4f 	bl	8002098 <xchg_spi>
 80021fa:	0003      	movs	r3, r0
 80021fc:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80021fe:	197b      	adds	r3, r7, r5
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2bff      	cmp	r3, #255	; 0xff
 8002204:	d103      	bne.n	800220e <rcvr_datablock+0x2e>
 8002206:	f7ff ff31 	bl	800206c <SPI_Timer_Status>
 800220a:	1e03      	subs	r3, r0, #0
 800220c:	d1f0      	bne.n	80021f0 <rcvr_datablock+0x10>
	if (token != 0xFE)
 800220e:	230f      	movs	r3, #15
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2bfe      	cmp	r3, #254	; 0xfe
 8002216:	d001      	beq.n	800221c <rcvr_datablock+0x3c>
		return 0; /* Function fails if invalid DataStart token or timeout */
 8002218:	2300      	movs	r3, #0
 800221a:	e00c      	b.n	8002236 <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr); /* Store trailing data to the buffer */
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	0011      	movs	r1, r2
 8002222:	0018      	movs	r0, r3
 8002224:	f7ff ff50 	bl	80020c8 <rcvr_spi_multi>
	xchg_spi(0xFF);
 8002228:	20ff      	movs	r0, #255	; 0xff
 800222a:	f7ff ff35 	bl	8002098 <xchg_spi>
	xchg_spi(0xFF); /* Discard CRC */
 800222e:	20ff      	movs	r0, #255	; 0xff
 8002230:	f7ff ff32 	bl	8002098 <xchg_spi>

	return 1; /* Function succeeded */
 8002234:	2301      	movs	r3, #1
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b004      	add	sp, #16
 800223c:	bdb0      	pop	{r4, r5, r7, pc}

0800223e <xmit_datablock>:
#if _USE_WRITE
static
int xmit_datablock( /* 1:OK, 0:Failed */
const BYTE *buff, /* Ponter to 512 byte data to be sent */
BYTE token /* Token */
) {
 800223e:	b5b0      	push	{r4, r5, r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	000a      	movs	r2, r1
 8002248:	1cfb      	adds	r3, r7, #3
 800224a:	701a      	strb	r2, [r3, #0]
	BYTE resp;

	if (!wait_ready(500))
 800224c:	23fa      	movs	r3, #250	; 0xfa
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	0018      	movs	r0, r3
 8002252:	f7ff ff70 	bl	8002136 <wait_ready>
 8002256:	1e03      	subs	r3, r0, #0
 8002258:	d101      	bne.n	800225e <xmit_datablock+0x20>
		return 0; /* Wait for card ready */
 800225a:	2300      	movs	r3, #0
 800225c:	e025      	b.n	80022aa <xmit_datablock+0x6c>

	xchg_spi(token); /* Send token */
 800225e:	1cfb      	adds	r3, r7, #3
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	0018      	movs	r0, r3
 8002264:	f7ff ff18 	bl	8002098 <xchg_spi>
	if (token != 0xFD) { /* Send data if token is other than StopTran */
 8002268:	1cfb      	adds	r3, r7, #3
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2bfd      	cmp	r3, #253	; 0xfd
 800226e:	d01b      	beq.n	80022a8 <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512); /* Data */
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	009a      	lsls	r2, r3, #2
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	0011      	movs	r1, r2
 8002278:	0018      	movs	r0, r3
 800227a:	f7ff ff41 	bl	8002100 <xmit_spi_multi>
		xchg_spi(0xFF);
 800227e:	20ff      	movs	r0, #255	; 0xff
 8002280:	f7ff ff0a 	bl	8002098 <xchg_spi>
		xchg_spi(0xFF); /* Dummy CRC */
 8002284:	20ff      	movs	r0, #255	; 0xff
 8002286:	f7ff ff07 	bl	8002098 <xchg_spi>

		resp = xchg_spi(0xFF); /* Receive data resp */
 800228a:	250f      	movs	r5, #15
 800228c:	197c      	adds	r4, r7, r5
 800228e:	20ff      	movs	r0, #255	; 0xff
 8002290:	f7ff ff02 	bl	8002098 <xchg_spi>
 8002294:	0003      	movs	r3, r0
 8002296:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05)
 8002298:	197b      	adds	r3, r7, r5
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	221f      	movs	r2, #31
 800229e:	4013      	ands	r3, r2
 80022a0:	2b05      	cmp	r3, #5
 80022a2:	d001      	beq.n	80022a8 <xmit_datablock+0x6a>
			return 0; /* Function fails if the data packet was not accepted */
 80022a4:	2300      	movs	r3, #0
 80022a6:	e000      	b.n	80022aa <xmit_datablock+0x6c>
	}
	return 1;
 80022a8:	2301      	movs	r3, #1
}
 80022aa:	0018      	movs	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b004      	add	sp, #16
 80022b0:	bdb0      	pop	{r4, r5, r7, pc}

080022b2 <send_cmd>:
/*-----------------------------------------------------------------------*/

static BYTE send_cmd( /* Return value: R1 resp (bit7==1:Failed to send) */
BYTE cmd, /* Command index */
DWORD arg /* Argument */
) {
 80022b2:	b5b0      	push	{r4, r5, r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	0002      	movs	r2, r0
 80022ba:	6039      	str	r1, [r7, #0]
 80022bc:	1dfb      	adds	r3, r7, #7
 80022be:	701a      	strb	r2, [r3, #0]
	BYTE n, res;

	if (cmd & 0x80) { /* Send a CMD55 prior to ACMD<n> */
 80022c0:	1dfb      	adds	r3, r7, #7
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	b25b      	sxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	da15      	bge.n	80022f6 <send_cmd+0x44>
		cmd &= 0x7F;
 80022ca:	1dfb      	adds	r3, r7, #7
 80022cc:	1dfa      	adds	r2, r7, #7
 80022ce:	7812      	ldrb	r2, [r2, #0]
 80022d0:	217f      	movs	r1, #127	; 0x7f
 80022d2:	400a      	ands	r2, r1
 80022d4:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 80022d6:	250e      	movs	r5, #14
 80022d8:	197c      	adds	r4, r7, r5
 80022da:	2100      	movs	r1, #0
 80022dc:	2037      	movs	r0, #55	; 0x37
 80022de:	f7ff ffe8 	bl	80022b2 <send_cmd>
 80022e2:	0003      	movs	r3, r0
 80022e4:	7023      	strb	r3, [r4, #0]
		if (res > 1)
 80022e6:	002a      	movs	r2, r5
 80022e8:	18bb      	adds	r3, r7, r2
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d902      	bls.n	80022f6 <send_cmd+0x44>
			return res;
 80022f0:	18bb      	adds	r3, r7, r2
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	e067      	b.n	80023c6 <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80022f6:	1dfb      	adds	r3, r7, #7
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b0c      	cmp	r3, #12
 80022fc:	d007      	beq.n	800230e <send_cmd+0x5c>
		despiselect();
 80022fe:	f7ff ff43 	bl	8002188 <despiselect>
		if (!spiselect())
 8002302:	f7ff ff51 	bl	80021a8 <spiselect>
 8002306:	1e03      	subs	r3, r0, #0
 8002308:	d101      	bne.n	800230e <send_cmd+0x5c>
			return 0xFF;
 800230a:	23ff      	movs	r3, #255	; 0xff
 800230c:	e05b      	b.n	80023c6 <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd); /* Start + command index */
 800230e:	1dfb      	adds	r3, r7, #7
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2240      	movs	r2, #64	; 0x40
 8002314:	4313      	orrs	r3, r2
 8002316:	b2db      	uxtb	r3, r3
 8002318:	0018      	movs	r0, r3
 800231a:	f7ff febd 	bl	8002098 <xchg_spi>
	xchg_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	0e1b      	lsrs	r3, r3, #24
 8002322:	b2db      	uxtb	r3, r3
 8002324:	0018      	movs	r0, r3
 8002326:	f7ff feb7 	bl	8002098 <xchg_spi>
	xchg_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	b2db      	uxtb	r3, r3
 8002330:	0018      	movs	r0, r3
 8002332:	f7ff feb1 	bl	8002098 <xchg_spi>
	xchg_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	b2db      	uxtb	r3, r3
 800233c:	0018      	movs	r0, r3
 800233e:	f7ff feab 	bl	8002098 <xchg_spi>
	xchg_spi((BYTE) arg); /* Argument[7..0] */
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	0018      	movs	r0, r3
 8002348:	f7ff fea6 	bl	8002098 <xchg_spi>
	n = 0x01; /* Dummy CRC + Stop */
 800234c:	210f      	movs	r1, #15
 800234e:	187b      	adds	r3, r7, r1
 8002350:	2201      	movs	r2, #1
 8002352:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0)
 8002354:	1dfb      	adds	r3, r7, #7
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <send_cmd+0xb0>
		n = 0x95; /* Valid CRC for CMD0(0) */
 800235c:	187b      	adds	r3, r7, r1
 800235e:	2295      	movs	r2, #149	; 0x95
 8002360:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8)
 8002362:	1dfb      	adds	r3, r7, #7
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b08      	cmp	r3, #8
 8002368:	d103      	bne.n	8002372 <send_cmd+0xc0>
		n = 0x87; /* Valid CRC for CMD8(0x1AA) */
 800236a:	230f      	movs	r3, #15
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	2287      	movs	r2, #135	; 0x87
 8002370:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 8002372:	230f      	movs	r3, #15
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	0018      	movs	r0, r3
 800237a:	f7ff fe8d 	bl	8002098 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12)
 800237e:	1dfb      	adds	r3, r7, #7
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b0c      	cmp	r3, #12
 8002384:	d102      	bne.n	800238c <send_cmd+0xda>
		xchg_spi(0xFF); /* Diacard following one byte when CMD12 */
 8002386:	20ff      	movs	r0, #255	; 0xff
 8002388:	f7ff fe86 	bl	8002098 <xchg_spi>
	n = 10; /* Wait for response (10 bytes max) */
 800238c:	230f      	movs	r3, #15
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	220a      	movs	r2, #10
 8002392:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 8002394:	250e      	movs	r5, #14
 8002396:	197c      	adds	r4, r7, r5
 8002398:	20ff      	movs	r0, #255	; 0xff
 800239a:	f7ff fe7d 	bl	8002098 <xchg_spi>
 800239e:	0003      	movs	r3, r0
 80023a0:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 80023a2:	197b      	adds	r3, r7, r5
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b25b      	sxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	da09      	bge.n	80023c0 <send_cmd+0x10e>
 80023ac:	210f      	movs	r1, #15
 80023ae:	187b      	adds	r3, r7, r1
 80023b0:	187a      	adds	r2, r7, r1
 80023b2:	7812      	ldrb	r2, [r2, #0]
 80023b4:	3a01      	subs	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]
 80023b8:	187b      	adds	r3, r7, r1
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1e9      	bne.n	8002394 <send_cmd+0xe2>

	return res; /* Return received response */
 80023c0:	230e      	movs	r3, #14
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	781b      	ldrb	r3, [r3, #0]
}
 80023c6:	0018      	movs	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	b004      	add	sp, #16
 80023cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080023d0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize(BYTE drv /* Physical drive number (0) */
) {
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	0002      	movs	r2, r0
 80023d8:	1dfb      	adds	r3, r7, #7
 80023da:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0)
 80023dc:	1dfb      	adds	r3, r7, #7
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <USER_SPI_initialize+0x18>
		return STA_NOINIT; /* Supports only drive 0 */
 80023e4:	2301      	movs	r3, #1
 80023e6:	e100      	b.n	80025ea <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK)
 80023e8:	4b82      	ldr	r3, [pc, #520]	; (80025f4 <USER_SPI_initialize+0x224>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	001a      	movs	r2, r3
 80023f0:	2302      	movs	r3, #2
 80023f2:	4013      	ands	r3, r2
 80023f4:	d003      	beq.n	80023fe <USER_SPI_initialize+0x2e>
		return Stat; /* Is card existing in the soket? */
 80023f6:	4b7f      	ldr	r3, [pc, #508]	; (80025f4 <USER_SPI_initialize+0x224>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	e0f5      	b.n	80025ea <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 80023fe:	4b7e      	ldr	r3, [pc, #504]	; (80025f8 <USER_SPI_initialize+0x228>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2238      	movs	r2, #56	; 0x38
 8002406:	4393      	bics	r3, r2
 8002408:	001a      	movs	r2, r3
 800240a:	4b7b      	ldr	r3, [pc, #492]	; (80025f8 <USER_SPI_initialize+0x228>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2130      	movs	r1, #48	; 0x30
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--)
 8002414:	230f      	movs	r3, #15
 8002416:	18fb      	adds	r3, r7, r3
 8002418:	220a      	movs	r2, #10
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	e008      	b.n	8002430 <USER_SPI_initialize+0x60>
		xchg_spi(0xFF); /* Send 80 dummy clocks */
 800241e:	20ff      	movs	r0, #255	; 0xff
 8002420:	f7ff fe3a 	bl	8002098 <xchg_spi>
	for (n = 10; n; n--)
 8002424:	210f      	movs	r1, #15
 8002426:	187b      	adds	r3, r7, r1
 8002428:	781a      	ldrb	r2, [r3, #0]
 800242a:	187b      	adds	r3, r7, r1
 800242c:	3a01      	subs	r2, #1
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	240f      	movs	r4, #15
 8002432:	193b      	adds	r3, r7, r4
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f1      	bne.n	800241e <USER_SPI_initialize+0x4e>

	ty = 0;
 800243a:	230d      	movs	r3, #13
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) { /* Put the card SPI/Idle state */
 8002442:	2100      	movs	r1, #0
 8002444:	2000      	movs	r0, #0
 8002446:	f7ff ff34 	bl	80022b2 <send_cmd>
 800244a:	0003      	movs	r3, r0
 800244c:	2b01      	cmp	r3, #1
 800244e:	d000      	beq.n	8002452 <USER_SPI_initialize+0x82>
 8002450:	e0a6      	b.n	80025a0 <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000); /* Initialization timeout = 1 sec */
 8002452:	23fa      	movs	r3, #250	; 0xfa
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	0018      	movs	r0, r3
 8002458:	f7ff fdf4 	bl	8002044 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2? */
 800245c:	23d5      	movs	r3, #213	; 0xd5
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	0019      	movs	r1, r3
 8002462:	2008      	movs	r0, #8
 8002464:	f7ff ff25 	bl	80022b2 <send_cmd>
 8002468:	0003      	movs	r3, r0
 800246a:	2b01      	cmp	r3, #1
 800246c:	d162      	bne.n	8002534 <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++)
 800246e:	193b      	adds	r3, r7, r4
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
 8002474:	e00f      	b.n	8002496 <USER_SPI_initialize+0xc6>
				ocr[n] = xchg_spi(0xFF); /* Get 32 bit return value of R7 resp */
 8002476:	250f      	movs	r5, #15
 8002478:	197b      	adds	r3, r7, r5
 800247a:	781c      	ldrb	r4, [r3, #0]
 800247c:	20ff      	movs	r0, #255	; 0xff
 800247e:	f7ff fe0b 	bl	8002098 <xchg_spi>
 8002482:	0003      	movs	r3, r0
 8002484:	001a      	movs	r2, r3
 8002486:	2308      	movs	r3, #8
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	551a      	strb	r2, [r3, r4]
			for (n = 0; n < 4; n++)
 800248c:	197b      	adds	r3, r7, r5
 800248e:	781a      	ldrb	r2, [r3, #0]
 8002490:	197b      	adds	r3, r7, r5
 8002492:	3201      	adds	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	230f      	movs	r3, #15
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d9ea      	bls.n	8002476 <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* Is the card supports vcc of 2.7-3.6V? */
 80024a0:	2208      	movs	r2, #8
 80024a2:	18bb      	adds	r3, r7, r2
 80024a4:	789b      	ldrb	r3, [r3, #2]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d000      	beq.n	80024ac <USER_SPI_initialize+0xdc>
 80024aa:	e079      	b.n	80025a0 <USER_SPI_initialize+0x1d0>
 80024ac:	18bb      	adds	r3, r7, r2
 80024ae:	78db      	ldrb	r3, [r3, #3]
 80024b0:	2baa      	cmp	r3, #170	; 0xaa
 80024b2:	d000      	beq.n	80024b6 <USER_SPI_initialize+0xe6>
 80024b4:	e074      	b.n	80025a0 <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30))
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	f7ff fdd8 	bl	800206c <SPI_Timer_Status>
 80024bc:	1e03      	subs	r3, r0, #0
 80024be:	d007      	beq.n	80024d0 <USER_SPI_initialize+0x100>
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	05db      	lsls	r3, r3, #23
 80024c4:	0019      	movs	r1, r3
 80024c6:	20a9      	movs	r0, #169	; 0xa9
 80024c8:	f7ff fef3 	bl	80022b2 <send_cmd>
 80024cc:	1e03      	subs	r3, r0, #0
 80024ce:	d1f3      	bne.n	80024b8 <USER_SPI_initialize+0xe8>
					; /* Wait for end of initialization with ACMD41(HCS) */
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
 80024d0:	f7ff fdcc 	bl	800206c <SPI_Timer_Status>
 80024d4:	1e03      	subs	r3, r0, #0
 80024d6:	d063      	beq.n	80025a0 <USER_SPI_initialize+0x1d0>
 80024d8:	2100      	movs	r1, #0
 80024da:	203a      	movs	r0, #58	; 0x3a
 80024dc:	f7ff fee9 	bl	80022b2 <send_cmd>
 80024e0:	1e03      	subs	r3, r0, #0
 80024e2:	d15d      	bne.n	80025a0 <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++)
 80024e4:	230f      	movs	r3, #15
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	e00f      	b.n	800250e <USER_SPI_initialize+0x13e>
						ocr[n] = xchg_spi(0xFF);
 80024ee:	250f      	movs	r5, #15
 80024f0:	197b      	adds	r3, r7, r5
 80024f2:	781c      	ldrb	r4, [r3, #0]
 80024f4:	20ff      	movs	r0, #255	; 0xff
 80024f6:	f7ff fdcf 	bl	8002098 <xchg_spi>
 80024fa:	0003      	movs	r3, r0
 80024fc:	001a      	movs	r2, r3
 80024fe:	2308      	movs	r3, #8
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	551a      	strb	r2, [r3, r4]
					for (n = 0; n < 4; n++)
 8002504:	197b      	adds	r3, r7, r5
 8002506:	781a      	ldrb	r2, [r3, #0]
 8002508:	197b      	adds	r3, r7, r5
 800250a:	3201      	adds	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
 800250e:	230f      	movs	r3, #15
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b03      	cmp	r3, #3
 8002516:	d9ea      	bls.n	80024ee <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* Card id SDv2 */
 8002518:	2308      	movs	r3, #8
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	001a      	movs	r2, r3
 8002520:	2340      	movs	r3, #64	; 0x40
 8002522:	4013      	ands	r3, r2
 8002524:	d001      	beq.n	800252a <USER_SPI_initialize+0x15a>
 8002526:	220c      	movs	r2, #12
 8002528:	e000      	b.n	800252c <USER_SPI_initialize+0x15c>
 800252a:	2204      	movs	r2, #4
 800252c:	230d      	movs	r3, #13
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	701a      	strb	r2, [r3, #0]
 8002532:	e035      	b.n	80025a0 <USER_SPI_initialize+0x1d0>
				}
			}
		} else { /* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) { /* SDv1 or MMC? */
 8002534:	2100      	movs	r1, #0
 8002536:	20a9      	movs	r0, #169	; 0xa9
 8002538:	f7ff febb 	bl	80022b2 <send_cmd>
 800253c:	0003      	movs	r3, r0
 800253e:	2b01      	cmp	r3, #1
 8002540:	d808      	bhi.n	8002554 <USER_SPI_initialize+0x184>
				ty = CT_SD1;
 8002542:	230d      	movs	r3, #13
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	2202      	movs	r2, #2
 8002548:	701a      	strb	r2, [r3, #0]
				cmd = ACMD41; /* SDv1 (ACMD41(0)) */
 800254a:	230e      	movs	r3, #14
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	22a9      	movs	r2, #169	; 0xa9
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	e007      	b.n	8002564 <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC;
 8002554:	230d      	movs	r3, #13
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
				cmd = CMD1; /* MMCv3 (CMD1(0)) */
 800255c:	230e      	movs	r3, #14
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	2201      	movs	r2, #1
 8002562:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0))
 8002564:	46c0      	nop			; (mov r8, r8)
 8002566:	f7ff fd81 	bl	800206c <SPI_Timer_Status>
 800256a:	1e03      	subs	r3, r0, #0
 800256c:	d008      	beq.n	8002580 <USER_SPI_initialize+0x1b0>
 800256e:	230e      	movs	r3, #14
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2100      	movs	r1, #0
 8002576:	0018      	movs	r0, r3
 8002578:	f7ff fe9b 	bl	80022b2 <send_cmd>
 800257c:	1e03      	subs	r3, r0, #0
 800257e:	d1f2      	bne.n	8002566 <USER_SPI_initialize+0x196>
				; /* Wait for end of initialization */
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0) /* Set block length: 512 */
 8002580:	f7ff fd74 	bl	800206c <SPI_Timer_Status>
 8002584:	1e03      	subs	r3, r0, #0
 8002586:	d007      	beq.n	8002598 <USER_SPI_initialize+0x1c8>
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	0019      	movs	r1, r3
 800258e:	2010      	movs	r0, #16
 8002590:	f7ff fe8f 	bl	80022b2 <send_cmd>
 8002594:	1e03      	subs	r3, r0, #0
 8002596:	d003      	beq.n	80025a0 <USER_SPI_initialize+0x1d0>
				ty = 0;
 8002598:	230d      	movs	r3, #13
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty; /* Card type */
 80025a0:	4b16      	ldr	r3, [pc, #88]	; (80025fc <USER_SPI_initialize+0x22c>)
 80025a2:	240d      	movs	r4, #13
 80025a4:	193a      	adds	r2, r7, r4
 80025a6:	7812      	ldrb	r2, [r2, #0]
 80025a8:	701a      	strb	r2, [r3, #0]
	despiselect();
 80025aa:	f7ff fded 	bl	8002188 <despiselect>

	if (ty) { /* OK */
 80025ae:	193b      	adds	r3, r7, r4
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d013      	beq.n	80025de <USER_SPI_initialize+0x20e>
		FCLK_FAST(); /* Set fast clock */
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <USER_SPI_initialize+0x228>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2238      	movs	r2, #56	; 0x38
 80025be:	4393      	bics	r3, r2
 80025c0:	001a      	movs	r2, r3
 80025c2:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <USER_SPI_initialize+0x228>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2118      	movs	r1, #24
 80025c8:	430a      	orrs	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT flag */
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <USER_SPI_initialize+0x224>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2201      	movs	r2, #1
 80025d4:	4393      	bics	r3, r2
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <USER_SPI_initialize+0x224>)
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	e002      	b.n	80025e4 <USER_SPI_initialize+0x214>
	} else { /* Failed */
		Stat = STA_NOINIT;
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <USER_SPI_initialize+0x224>)
 80025e0:	2201      	movs	r2, #1
 80025e2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80025e4:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <USER_SPI_initialize+0x224>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b2db      	uxtb	r3, r3
}
 80025ea:	0018      	movs	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b004      	add	sp, #16
 80025f0:	bdb0      	pop	{r4, r5, r7, pc}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	20000020 	.word	0x20000020
 80025f8:	2000059c 	.word	0x2000059c
 80025fc:	200000ec 	.word	0x200000ec

08002600 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/
/* Get disk status                                                       */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status(BYTE drv /* Physical drive number (0) */
) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	0002      	movs	r2, r0
 8002608:	1dfb      	adds	r3, r7, #7
 800260a:	701a      	strb	r2, [r3, #0]
	if (drv)
 800260c:	1dfb      	adds	r3, r7, #7
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <USER_SPI_status+0x18>
		return STA_NOINIT; /* Supports only drive 0 */
 8002614:	2301      	movs	r3, #1
 8002616:	e002      	b.n	800261e <USER_SPI_status+0x1e>

	return Stat; /* Return disk status */
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <USER_SPI_status+0x28>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	b2db      	uxtb	r3, r3
}
 800261e:	0018      	movs	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	b002      	add	sp, #8
 8002624:	bd80      	pop	{r7, pc}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	20000020 	.word	0x20000020

0800262c <USER_SPI_read>:

inline DRESULT USER_SPI_read(BYTE drv, /* Physical drive number (0) */
BYTE *buff, /* Pointer to the data buffer to store read data */
DWORD sector, /* Start sector number (LBA) */
UINT count /* Number of sectors to read (1..128) */
) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	603b      	str	r3, [r7, #0]
 8002638:	210f      	movs	r1, #15
 800263a:	187b      	adds	r3, r7, r1
 800263c:	1c02      	adds	r2, r0, #0
 800263e:	701a      	strb	r2, [r3, #0]
	if (drv || !count)
 8002640:	187b      	adds	r3, r7, r1
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <USER_SPI_read+0x22>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <USER_SPI_read+0x26>
		return RES_PARERR; /* Check parameter */
 800264e:	2304      	movs	r3, #4
 8002650:	e04f      	b.n	80026f2 <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT)
 8002652:	4b2a      	ldr	r3, [pc, #168]	; (80026fc <USER_SPI_read+0xd0>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	001a      	movs	r2, r3
 800265a:	2301      	movs	r3, #1
 800265c:	4013      	ands	r3, r2
 800265e:	d001      	beq.n	8002664 <USER_SPI_read+0x38>
		return RES_NOTRDY; /* Check if drive is ready */
 8002660:	2303      	movs	r3, #3
 8002662:	e046      	b.n	80026f2 <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK))
 8002664:	4b26      	ldr	r3, [pc, #152]	; (8002700 <USER_SPI_read+0xd4>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	001a      	movs	r2, r3
 800266a:	2308      	movs	r3, #8
 800266c:	4013      	ands	r3, r2
 800266e:	d102      	bne.n	8002676 <USER_SPI_read+0x4a>
		sector *= 512; /* LBA ot BA conversion (byte addressing cards) */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	025b      	lsls	r3, r3, #9
 8002674:	607b      	str	r3, [r7, #4]

	if (count == 1) { /* Single sector read */
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d112      	bne.n	80026a2 <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	0019      	movs	r1, r3
 8002680:	2011      	movs	r0, #17
 8002682:	f7ff fe16 	bl	80022b2 <send_cmd>
 8002686:	1e03      	subs	r3, r0, #0
 8002688:	d12d      	bne.n	80026e6 <USER_SPI_read+0xba>
		&& rcvr_datablock(buff, 512)) {
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	009a      	lsls	r2, r3, #2
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	0011      	movs	r1, r2
 8002692:	0018      	movs	r0, r3
 8002694:	f7ff fda4 	bl	80021e0 <rcvr_datablock>
 8002698:	1e03      	subs	r3, r0, #0
 800269a:	d024      	beq.n	80026e6 <USER_SPI_read+0xba>
			count = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	e021      	b.n	80026e6 <USER_SPI_read+0xba>
		}
	} else { /* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	0019      	movs	r1, r3
 80026a6:	2012      	movs	r0, #18
 80026a8:	f7ff fe03 	bl	80022b2 <send_cmd>
 80026ac:	1e03      	subs	r3, r0, #0
 80026ae:	d11a      	bne.n	80026e6 <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512))
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	009a      	lsls	r2, r3, #2
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	0011      	movs	r1, r2
 80026b8:	0018      	movs	r0, r3
 80026ba:	f7ff fd91 	bl	80021e0 <rcvr_datablock>
 80026be:	1e03      	subs	r3, r0, #0
 80026c0:	d00c      	beq.n	80026dc <USER_SPI_read+0xb0>
					break;
				buff += 512;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	0092      	lsls	r2, r2, #2
 80026c8:	4694      	mov	ip, r2
 80026ca:	4463      	add	r3, ip
 80026cc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1ea      	bne.n	80026b0 <USER_SPI_read+0x84>
 80026da:	e000      	b.n	80026de <USER_SPI_read+0xb2>
					break;
 80026dc:	46c0      	nop			; (mov r8, r8)
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 80026de:	2100      	movs	r1, #0
 80026e0:	200c      	movs	r0, #12
 80026e2:	f7ff fde6 	bl	80022b2 <send_cmd>
		}
	}
	despiselect();
 80026e6:	f7ff fd4f 	bl	8002188 <despiselect>

	return count ? RES_ERROR : RES_OK; /* Return result */
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	1e5a      	subs	r2, r3, #1
 80026ee:	4193      	sbcs	r3, r2
 80026f0:	b2db      	uxtb	r3, r3
}
 80026f2:	0018      	movs	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b004      	add	sp, #16
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	20000020 	.word	0x20000020
 8002700:	200000ec 	.word	0x200000ec

08002704 <USER_SPI_write>:
#if _USE_WRITE
inline DRESULT USER_SPI_write(BYTE drv, /* Physical drive number (0) */
const BYTE *buff, /* Ponter to the data to write */
DWORD sector, /* Start sector number (LBA) */
UINT count /* Number of sectors to write (1..128) */
) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	210f      	movs	r1, #15
 8002712:	187b      	adds	r3, r7, r1
 8002714:	1c02      	adds	r2, r0, #0
 8002716:	701a      	strb	r2, [r3, #0]
	if (drv || !count)
 8002718:	187b      	adds	r3, r7, r1
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d102      	bne.n	8002726 <USER_SPI_write+0x22>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <USER_SPI_write+0x26>
		return RES_PARERR; /* Check parameter */
 8002726:	2304      	movs	r3, #4
 8002728:	e063      	b.n	80027f2 <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT)
 800272a:	4b34      	ldr	r3, [pc, #208]	; (80027fc <USER_SPI_write+0xf8>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	b2db      	uxtb	r3, r3
 8002730:	001a      	movs	r2, r3
 8002732:	2301      	movs	r3, #1
 8002734:	4013      	ands	r3, r2
 8002736:	d001      	beq.n	800273c <USER_SPI_write+0x38>
		return RES_NOTRDY; /* Check drive status */
 8002738:	2303      	movs	r3, #3
 800273a:	e05a      	b.n	80027f2 <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT)
 800273c:	4b2f      	ldr	r3, [pc, #188]	; (80027fc <USER_SPI_write+0xf8>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	001a      	movs	r2, r3
 8002744:	2304      	movs	r3, #4
 8002746:	4013      	ands	r3, r2
 8002748:	d001      	beq.n	800274e <USER_SPI_write+0x4a>
		return RES_WRPRT; /* Check write protect */
 800274a:	2302      	movs	r3, #2
 800274c:	e051      	b.n	80027f2 <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK))
 800274e:	4b2c      	ldr	r3, [pc, #176]	; (8002800 <USER_SPI_write+0xfc>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	001a      	movs	r2, r3
 8002754:	2308      	movs	r3, #8
 8002756:	4013      	ands	r3, r2
 8002758:	d102      	bne.n	8002760 <USER_SPI_write+0x5c>
		sector *= 512; /* LBA ==> BA conversion (byte addressing cards) */
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	025b      	lsls	r3, r3, #9
 800275e:	607b      	str	r3, [r7, #4]

	if (count == 1) { /* Single sector write */
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d110      	bne.n	8002788 <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0019      	movs	r1, r3
 800276a:	2018      	movs	r0, #24
 800276c:	f7ff fda1 	bl	80022b2 <send_cmd>
 8002770:	1e03      	subs	r3, r0, #0
 8002772:	d138      	bne.n	80027e6 <USER_SPI_write+0xe2>
		&& xmit_datablock(buff, 0xFE)) {
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	21fe      	movs	r1, #254	; 0xfe
 8002778:	0018      	movs	r0, r3
 800277a:	f7ff fd60 	bl	800223e <xmit_datablock>
 800277e:	1e03      	subs	r3, r0, #0
 8002780:	d031      	beq.n	80027e6 <USER_SPI_write+0xe2>
			count = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	e02e      	b.n	80027e6 <USER_SPI_write+0xe2>
		}
	} else { /* Multiple sector write */
		if (CardType & CT_SDC)
 8002788:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <USER_SPI_write+0xfc>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	001a      	movs	r2, r3
 800278e:	2306      	movs	r3, #6
 8002790:	4013      	ands	r3, r2
 8002792:	d004      	beq.n	800279e <USER_SPI_write+0x9a>
			send_cmd(ACMD23, count); /* Predefine number of sectors */
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	0019      	movs	r1, r3
 8002798:	2097      	movs	r0, #151	; 0x97
 800279a:	f7ff fd8a 	bl	80022b2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	0019      	movs	r1, r3
 80027a2:	2019      	movs	r0, #25
 80027a4:	f7ff fd85 	bl	80022b2 <send_cmd>
 80027a8:	1e03      	subs	r3, r0, #0
 80027aa:	d11c      	bne.n	80027e6 <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	21fc      	movs	r1, #252	; 0xfc
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7ff fd44 	bl	800223e <xmit_datablock>
 80027b6:	1e03      	subs	r3, r0, #0
 80027b8:	d00c      	beq.n	80027d4 <USER_SPI_write+0xd0>
					break;
				buff += 512;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2280      	movs	r2, #128	; 0x80
 80027be:	0092      	lsls	r2, r2, #2
 80027c0:	4694      	mov	ip, r2
 80027c2:	4463      	add	r3, ip
 80027c4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1ec      	bne.n	80027ac <USER_SPI_write+0xa8>
 80027d2:	e000      	b.n	80027d6 <USER_SPI_write+0xd2>
					break;
 80027d4:	46c0      	nop			; (mov r8, r8)
			if (!xmit_datablock(0, 0xFD))
 80027d6:	21fd      	movs	r1, #253	; 0xfd
 80027d8:	2000      	movs	r0, #0
 80027da:	f7ff fd30 	bl	800223e <xmit_datablock>
 80027de:	1e03      	subs	r3, r0, #0
 80027e0:	d101      	bne.n	80027e6 <USER_SPI_write+0xe2>
				count = 1; /* STOP_TRAN token */
 80027e2:	2301      	movs	r3, #1
 80027e4:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80027e6:	f7ff fccf 	bl	8002188 <despiselect>

	return count ? RES_ERROR : RES_OK; /* Return result */
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	1e5a      	subs	r2, r3, #1
 80027ee:	4193      	sbcs	r3, r2
 80027f0:	b2db      	uxtb	r3, r3
}
 80027f2:	0018      	movs	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b004      	add	sp, #16
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	20000020 	.word	0x20000020
 8002800:	200000ec 	.word	0x200000ec

08002804 <USER_SPI_ioctl>:

#if _USE_IOCTL
inline DRESULT USER_SPI_ioctl(BYTE drv, /* Physical drive number (0) */
BYTE cmd, /* Control command code */
void *buff /* Pointer to the conrtol data */
) {
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b08d      	sub	sp, #52	; 0x34
 8002808:	af00      	add	r7, sp, #0
 800280a:	603a      	str	r2, [r7, #0]
 800280c:	1dfb      	adds	r3, r7, #7
 800280e:	1c02      	adds	r2, r0, #0
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	1dbb      	adds	r3, r7, #6
 8002814:	1c0a      	adds	r2, r1, #0
 8002816:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;

	if (drv)
 8002818:	1dfb      	adds	r3, r7, #7
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <USER_SPI_ioctl+0x20>
		return RES_PARERR; /* Check parameter */
 8002820:	2304      	movs	r3, #4
 8002822:	e178      	b.n	8002b16 <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT)
 8002824:	4bbe      	ldr	r3, [pc, #760]	; (8002b20 <USER_SPI_ioctl+0x31c>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	001a      	movs	r2, r3
 800282c:	2301      	movs	r3, #1
 800282e:	4013      	ands	r3, r2
 8002830:	d001      	beq.n	8002836 <USER_SPI_ioctl+0x32>
		return RES_NOTRDY; /* Check if drive is ready */
 8002832:	2303      	movs	r3, #3
 8002834:	e16f      	b.n	8002b16 <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 8002836:	232f      	movs	r3, #47	; 0x2f
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	2201      	movs	r2, #1
 800283c:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 800283e:	1dbb      	adds	r3, r7, #6
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b04      	cmp	r3, #4
 8002844:	d100      	bne.n	8002848 <USER_SPI_ioctl+0x44>
 8002846:	e100      	b.n	8002a4a <USER_SPI_ioctl+0x246>
 8002848:	dd00      	ble.n	800284c <USER_SPI_ioctl+0x48>
 800284a:	e14d      	b.n	8002ae8 <USER_SPI_ioctl+0x2e4>
 800284c:	2b03      	cmp	r3, #3
 800284e:	d100      	bne.n	8002852 <USER_SPI_ioctl+0x4e>
 8002850:	e074      	b.n	800293c <USER_SPI_ioctl+0x138>
 8002852:	dd00      	ble.n	8002856 <USER_SPI_ioctl+0x52>
 8002854:	e148      	b.n	8002ae8 <USER_SPI_ioctl+0x2e4>
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <USER_SPI_ioctl+0x5c>
 800285a:	2b01      	cmp	r3, #1
 800285c:	d00a      	beq.n	8002874 <USER_SPI_ioctl+0x70>
 800285e:	e143      	b.n	8002ae8 <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC: /* Wait for end of internal write process of the drive */
		if (spiselect())
 8002860:	f7ff fca2 	bl	80021a8 <spiselect>
 8002864:	1e03      	subs	r3, r0, #0
 8002866:	d100      	bne.n	800286a <USER_SPI_ioctl+0x66>
 8002868:	e143      	b.n	8002af2 <USER_SPI_ioctl+0x2ee>
			res = RES_OK;
 800286a:	232f      	movs	r3, #47	; 0x2f
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
		break;
 8002872:	e13e      	b.n	8002af2 <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT: /* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002874:	2100      	movs	r1, #0
 8002876:	2009      	movs	r0, #9
 8002878:	f7ff fd1b 	bl	80022b2 <send_cmd>
 800287c:	1e03      	subs	r3, r0, #0
 800287e:	d000      	beq.n	8002882 <USER_SPI_ioctl+0x7e>
 8002880:	e139      	b.n	8002af6 <USER_SPI_ioctl+0x2f2>
 8002882:	240c      	movs	r4, #12
 8002884:	193b      	adds	r3, r7, r4
 8002886:	2110      	movs	r1, #16
 8002888:	0018      	movs	r0, r3
 800288a:	f7ff fca9 	bl	80021e0 <rcvr_datablock>
 800288e:	1e03      	subs	r3, r0, #0
 8002890:	d100      	bne.n	8002894 <USER_SPI_ioctl+0x90>
 8002892:	e130      	b.n	8002af6 <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8002894:	0020      	movs	r0, r4
 8002896:	183b      	adds	r3, r7, r0
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	099b      	lsrs	r3, r3, #6
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d115      	bne.n	80028ce <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD) csd[8] << 8)
 80028a2:	183b      	adds	r3, r7, r0
 80028a4:	7a5b      	ldrb	r3, [r3, #9]
 80028a6:	001a      	movs	r2, r3
 80028a8:	183b      	adds	r3, r7, r0
 80028aa:	7a1b      	ldrb	r3, [r3, #8]
 80028ac:	021b      	lsls	r3, r3, #8
 80028ae:	18d3      	adds	r3, r2, r3
 80028b0:	0019      	movs	r1, r3
						+ ((DWORD) (csd[7] & 63) << 16) + 1;
 80028b2:	183b      	adds	r3, r7, r0
 80028b4:	79db      	ldrb	r3, [r3, #7]
 80028b6:	041a      	lsls	r2, r3, #16
 80028b8:	23fc      	movs	r3, #252	; 0xfc
 80028ba:	039b      	lsls	r3, r3, #14
 80028bc:	4013      	ands	r3, r2
 80028be:	18cb      	adds	r3, r1, r3
				csize = csd[9] + ((WORD) csd[8] << 8)
 80028c0:	3301      	adds	r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
				*(DWORD*) buff = csize << 10;
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	029a      	lsls	r2, r3, #10
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e031      	b.n	8002932 <USER_SPI_ioctl+0x12e>
			} else { /* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1)
 80028ce:	200c      	movs	r0, #12
 80028d0:	183b      	adds	r3, r7, r0
 80028d2:	795b      	ldrb	r3, [r3, #5]
 80028d4:	220f      	movs	r2, #15
 80028d6:	4013      	ands	r3, r2
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	183b      	adds	r3, r7, r0
 80028dc:	7a9b      	ldrb	r3, [r3, #10]
 80028de:	09db      	lsrs	r3, r3, #7
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	18d3      	adds	r3, r2, r3
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	183b      	adds	r3, r7, r0
 80028e8:	7a5b      	ldrb	r3, [r3, #9]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2106      	movs	r1, #6
 80028f0:	400b      	ands	r3, r1
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	18d3      	adds	r3, r2, r3
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	242e      	movs	r4, #46	; 0x2e
 80028fa:	193b      	adds	r3, r7, r4
 80028fc:	3202      	adds	r2, #2
 80028fe:	701a      	strb	r2, [r3, #0]
						+ 2;
				csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8002900:	183b      	adds	r3, r7, r0
 8002902:	7a1b      	ldrb	r3, [r3, #8]
 8002904:	099b      	lsrs	r3, r3, #6
 8002906:	b2db      	uxtb	r3, r3
 8002908:	001a      	movs	r2, r3
 800290a:	183b      	adds	r3, r7, r0
 800290c:	79db      	ldrb	r3, [r3, #7]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	18d2      	adds	r2, r2, r3
						+ ((WORD) (csd[6] & 3) << 10) + 1;
 8002912:	183b      	adds	r3, r7, r0
 8002914:	799b      	ldrb	r3, [r3, #6]
 8002916:	0299      	lsls	r1, r3, #10
 8002918:	23c0      	movs	r3, #192	; 0xc0
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	400b      	ands	r3, r1
 800291e:	18d3      	adds	r3, r2, r3
 8002920:	3301      	adds	r3, #1
				csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8002922:	61fb      	str	r3, [r7, #28]
				*(DWORD*) buff = csize << (n - 9);
 8002924:	193b      	adds	r3, r7, r4
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	3b09      	subs	r3, #9
 800292a:	69fa      	ldr	r2, [r7, #28]
 800292c:	409a      	lsls	r2, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002932:	232f      	movs	r3, #47	; 0x2f
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
		}
		break;
 800293a:	e0dc      	b.n	8002af6 <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE: /* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) { /* SDC ver 2.00 */
 800293c:	4b79      	ldr	r3, [pc, #484]	; (8002b24 <USER_SPI_ioctl+0x320>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	001a      	movs	r2, r3
 8002942:	2304      	movs	r3, #4
 8002944:	4013      	ands	r3, r2
 8002946:	d035      	beq.n	80029b4 <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 8002948:	2100      	movs	r1, #0
 800294a:	208d      	movs	r0, #141	; 0x8d
 800294c:	f7ff fcb1 	bl	80022b2 <send_cmd>
 8002950:	1e03      	subs	r3, r0, #0
 8002952:	d000      	beq.n	8002956 <USER_SPI_ioctl+0x152>
 8002954:	e0d1      	b.n	8002afa <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 8002956:	20ff      	movs	r0, #255	; 0xff
 8002958:	f7ff fb9e 	bl	8002098 <xchg_spi>
				if (rcvr_datablock(csd, 16)) { /* Read partial block */
 800295c:	230c      	movs	r3, #12
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	2110      	movs	r1, #16
 8002962:	0018      	movs	r0, r3
 8002964:	f7ff fc3c 	bl	80021e0 <rcvr_datablock>
 8002968:	1e03      	subs	r3, r0, #0
 800296a:	d100      	bne.n	800296e <USER_SPI_ioctl+0x16a>
 800296c:	e0c5      	b.n	8002afa <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--)
 800296e:	232e      	movs	r3, #46	; 0x2e
 8002970:	18fb      	adds	r3, r7, r3
 8002972:	2230      	movs	r2, #48	; 0x30
 8002974:	701a      	strb	r2, [r3, #0]
 8002976:	e008      	b.n	800298a <USER_SPI_ioctl+0x186>
						xchg_spi(0xFF); /* Purge trailing data */
 8002978:	20ff      	movs	r0, #255	; 0xff
 800297a:	f7ff fb8d 	bl	8002098 <xchg_spi>
					for (n = 64 - 16; n; n--)
 800297e:	212e      	movs	r1, #46	; 0x2e
 8002980:	187b      	adds	r3, r7, r1
 8002982:	781a      	ldrb	r2, [r3, #0]
 8002984:	187b      	adds	r3, r7, r1
 8002986:	3a01      	subs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	232e      	movs	r3, #46	; 0x2e
 800298c:	18fb      	adds	r3, r7, r3
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f1      	bne.n	8002978 <USER_SPI_ioctl+0x174>
					*(DWORD*) buff = 16UL << (csd[10] >> 4);
 8002994:	230c      	movs	r3, #12
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	7a9b      	ldrb	r3, [r3, #10]
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	b2db      	uxtb	r3, r3
 800299e:	001a      	movs	r2, r3
 80029a0:	2310      	movs	r3, #16
 80029a2:	4093      	lsls	r3, r2
 80029a4:	001a      	movs	r2, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80029aa:	232f      	movs	r3, #47	; 0x2f
 80029ac:	18fb      	adds	r3, r7, r3
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
											+ ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80029b2:	e0a2      	b.n	8002afa <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) { /* Read CSD */
 80029b4:	2100      	movs	r1, #0
 80029b6:	2009      	movs	r0, #9
 80029b8:	f7ff fc7b 	bl	80022b2 <send_cmd>
 80029bc:	1e03      	subs	r3, r0, #0
 80029be:	d000      	beq.n	80029c2 <USER_SPI_ioctl+0x1be>
 80029c0:	e09b      	b.n	8002afa <USER_SPI_ioctl+0x2f6>
 80029c2:	240c      	movs	r4, #12
 80029c4:	193b      	adds	r3, r7, r4
 80029c6:	2110      	movs	r1, #16
 80029c8:	0018      	movs	r0, r3
 80029ca:	f7ff fc09 	bl	80021e0 <rcvr_datablock>
 80029ce:	1e03      	subs	r3, r0, #0
 80029d0:	d100      	bne.n	80029d4 <USER_SPI_ioctl+0x1d0>
 80029d2:	e092      	b.n	8002afa <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) { /* SDC ver 1.XX */
 80029d4:	4b53      	ldr	r3, [pc, #332]	; (8002b24 <USER_SPI_ioctl+0x320>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	001a      	movs	r2, r3
 80029da:	2302      	movs	r3, #2
 80029dc:	4013      	ands	r3, r2
 80029de:	d016      	beq.n	8002a0e <USER_SPI_ioctl+0x20a>
					*(DWORD*) buff = (((csd[10] & 63) << 1)
 80029e0:	0021      	movs	r1, r4
 80029e2:	187b      	adds	r3, r7, r1
 80029e4:	7a9b      	ldrb	r3, [r3, #10]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	227e      	movs	r2, #126	; 0x7e
 80029ea:	4013      	ands	r3, r2
							+ ((WORD) (csd[11] & 128) >> 7) + 1)
 80029ec:	187a      	adds	r2, r7, r1
 80029ee:	7ad2      	ldrb	r2, [r2, #11]
 80029f0:	09d2      	lsrs	r2, r2, #7
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	189b      	adds	r3, r3, r2
 80029f6:	1c5a      	adds	r2, r3, #1
							<< ((csd[13] >> 6) - 1);
 80029f8:	187b      	adds	r3, r7, r1
 80029fa:	7b5b      	ldrb	r3, [r3, #13]
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	3b01      	subs	r3, #1
 8002a02:	409a      	lsls	r2, r3
 8002a04:	0013      	movs	r3, r2
 8002a06:	001a      	movs	r2, r3
					*(DWORD*) buff = (((csd[10] & 63) << 1)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	e018      	b.n	8002a40 <USER_SPI_ioctl+0x23c>
							((WORD) ((csd[10] & 124) >> 2) + 1)
 8002a0e:	210c      	movs	r1, #12
 8002a10:	187b      	adds	r3, r7, r1
 8002a12:	7a9b      	ldrb	r3, [r3, #10]
 8002a14:	109b      	asrs	r3, r3, #2
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	001a      	movs	r2, r3
 8002a1a:	231f      	movs	r3, #31
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	3301      	adds	r3, #1
									* (((csd[11] & 3) << 3)
 8002a20:	0008      	movs	r0, r1
 8002a22:	187a      	adds	r2, r7, r1
 8002a24:	7ad2      	ldrb	r2, [r2, #11]
 8002a26:	00d2      	lsls	r2, r2, #3
 8002a28:	2118      	movs	r1, #24
 8002a2a:	400a      	ands	r2, r1
											+ ((csd[11] & 224) >> 5) + 1);
 8002a2c:	1839      	adds	r1, r7, r0
 8002a2e:	7ac9      	ldrb	r1, [r1, #11]
 8002a30:	0949      	lsrs	r1, r1, #5
 8002a32:	b2c9      	uxtb	r1, r1
 8002a34:	1852      	adds	r2, r2, r1
 8002a36:	3201      	adds	r2, #1
									* (((csd[11] & 3) << 3)
 8002a38:	4353      	muls	r3, r2
 8002a3a:	001a      	movs	r2, r3
					*(DWORD*) buff =
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002a40:	232f      	movs	r3, #47	; 0x2f
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
		break;
 8002a48:	e057      	b.n	8002afa <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM: /* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC))
 8002a4a:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <USER_SPI_ioctl+0x320>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	001a      	movs	r2, r3
 8002a50:	2306      	movs	r3, #6
 8002a52:	4013      	ands	r3, r2
 8002a54:	d053      	beq.n	8002afe <USER_SPI_ioctl+0x2fa>
			break; /* Check if the card is SDC */
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd))
 8002a56:	240c      	movs	r4, #12
 8002a58:	193a      	adds	r2, r7, r4
 8002a5a:	1dfb      	adds	r3, r7, #7
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	210b      	movs	r1, #11
 8002a60:	0018      	movs	r0, r3
 8002a62:	f7ff fecf 	bl	8002804 <USER_SPI_ioctl>
 8002a66:	1e03      	subs	r3, r0, #0
 8002a68:	d14b      	bne.n	8002b02 <USER_SPI_ioctl+0x2fe>
			break; /* Get CSD */
		if (!(csd[0] >> 6) && !(csd[10] & 0x40))
 8002a6a:	193b      	adds	r3, r7, r4
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	099b      	lsrs	r3, r3, #6
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <USER_SPI_ioctl+0x27e>
 8002a76:	193b      	adds	r3, r7, r4
 8002a78:	7a9b      	ldrb	r3, [r3, #10]
 8002a7a:	001a      	movs	r2, r3
 8002a7c:	2340      	movs	r3, #64	; 0x40
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d041      	beq.n	8002b06 <USER_SPI_ioctl+0x302>
			break; /* Check if sector erase can be applied to the card */
		dp = buff;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	623b      	str	r3, [r7, #32]
		st = dp[0];
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
		ed = dp[1]; /* Load sector block */
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8002a92:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <USER_SPI_ioctl+0x320>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	001a      	movs	r2, r3
 8002a98:	2308      	movs	r3, #8
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d105      	bne.n	8002aaa <USER_SPI_ioctl+0x2a6>
			st *= 512;
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa0:	025b      	lsls	r3, r3, #9
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
			ed *= 512;
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	025b      	lsls	r3, r3, #9
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0
 8002aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aac:	0019      	movs	r1, r3
 8002aae:	2020      	movs	r0, #32
 8002ab0:	f7ff fbff 	bl	80022b2 <send_cmd>
 8002ab4:	1e03      	subs	r3, r0, #0
 8002ab6:	d128      	bne.n	8002b0a <USER_SPI_ioctl+0x306>
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	0019      	movs	r1, r3
 8002abc:	2021      	movs	r0, #33	; 0x21
 8002abe:	f7ff fbf8 	bl	80022b2 <send_cmd>
 8002ac2:	1e03      	subs	r3, r0, #0
 8002ac4:	d121      	bne.n	8002b0a <USER_SPI_ioctl+0x306>
				&& send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	2026      	movs	r0, #38	; 0x26
 8002aca:	f7ff fbf2 	bl	80022b2 <send_cmd>
 8002ace:	1e03      	subs	r3, r0, #0
 8002ad0:	d11b      	bne.n	8002b0a <USER_SPI_ioctl+0x306>
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <USER_SPI_ioctl+0x324>)
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7ff fb2e 	bl	8002136 <wait_ready>
 8002ada:	1e03      	subs	r3, r0, #0
 8002adc:	d015      	beq.n	8002b0a <USER_SPI_ioctl+0x306>
			res = RES_OK; /* FatFs does not check result of this command */
 8002ade:	232f      	movs	r3, #47	; 0x2f
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002ae6:	e010      	b.n	8002b0a <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 8002ae8:	232f      	movs	r3, #47	; 0x2f
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2204      	movs	r2, #4
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e00c      	b.n	8002b0c <USER_SPI_ioctl+0x308>
		break;
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	e00a      	b.n	8002b0c <USER_SPI_ioctl+0x308>
		break;
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	e008      	b.n	8002b0c <USER_SPI_ioctl+0x308>
		break;
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	e006      	b.n	8002b0c <USER_SPI_ioctl+0x308>
			break; /* Check if the card is SDC */
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	e004      	b.n	8002b0c <USER_SPI_ioctl+0x308>
			break; /* Get CSD */
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	e002      	b.n	8002b0c <USER_SPI_ioctl+0x308>
			break; /* Check if sector erase can be applied to the card */
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	e000      	b.n	8002b0c <USER_SPI_ioctl+0x308>
		break;
 8002b0a:	46c0      	nop			; (mov r8, r8)
	}

	despiselect();
 8002b0c:	f7ff fb3c 	bl	8002188 <despiselect>

	return res;
 8002b10:	232f      	movs	r3, #47	; 0x2f
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	781b      	ldrb	r3, [r3, #0]
}
 8002b16:	0018      	movs	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b00d      	add	sp, #52	; 0x34
 8002b1c:	bd90      	pop	{r4, r7, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	20000020 	.word	0x20000020
 8002b24:	200000ec 	.word	0x200000ec
 8002b28:	00007530 	.word	0x00007530

08002b2c <__NVIC_EnableIRQ>:
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	0002      	movs	r2, r0
 8002b34:	1dfb      	adds	r3, r7, #7
 8002b36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b38:	1dfb      	adds	r3, r7, #7
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8002b3e:	d809      	bhi.n	8002b54 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b40:	1dfb      	adds	r3, r7, #7
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	001a      	movs	r2, r3
 8002b46:	231f      	movs	r3, #31
 8002b48:	401a      	ands	r2, r3
 8002b4a:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <__NVIC_EnableIRQ+0x30>)
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4091      	lsls	r1, r2
 8002b50:	000a      	movs	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b002      	add	sp, #8
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	e000e100 	.word	0xe000e100

08002b60 <map>:
uint32_t AF[8] = { (0x00), (0x01), (0x02), (0x03), (0x04), (0x05), (0x06),
		(0x07) };

uint16_t ticks = 0;

uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 8002b60:	b5b0      	push	{r4, r5, r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	0005      	movs	r5, r0
 8002b68:	000c      	movs	r4, r1
 8002b6a:	0010      	movs	r0, r2
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	1dbb      	adds	r3, r7, #6
 8002b70:	1c2a      	adds	r2, r5, #0
 8002b72:	801a      	strh	r2, [r3, #0]
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	1c22      	adds	r2, r4, #0
 8002b78:	801a      	strh	r2, [r3, #0]
 8002b7a:	1cbb      	adds	r3, r7, #2
 8002b7c:	1c02      	adds	r2, r0, #0
 8002b7e:	801a      	strh	r2, [r3, #0]
 8002b80:	003b      	movs	r3, r7
 8002b82:	1c0a      	adds	r2, r1, #0
 8002b84:	801a      	strh	r2, [r3, #0]
  return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
 8002b86:	1dbb      	adds	r3, r7, #6
 8002b88:	881a      	ldrh	r2, [r3, #0]
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	1ad2      	subs	r2, r2, r3
 8002b90:	2318      	movs	r3, #24
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	8819      	ldrh	r1, [r3, #0]
 8002b96:	003b      	movs	r3, r7
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	1acb      	subs	r3, r1, r3
 8002b9c:	4353      	muls	r3, r2
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	1cbb      	adds	r3, r7, #2
 8002ba2:	881a      	ldrh	r2, [r3, #0]
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	1ad2      	subs	r2, r2, r3
 8002baa:	003b      	movs	r3, r7
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	18d3      	adds	r3, r2, r3
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	f7fd fb45 	bl	8000240 <__divsi3>
 8002bb6:	0003      	movs	r3, r0
 8002bb8:	b29b      	uxth	r3, r3
}
 8002bba:	0018      	movs	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	b002      	add	sp, #8
 8002bc0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002bc4 <gpio_clk_en>:

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	2390      	movs	r3, #144	; 0x90
 8002bd0:	05db      	lsls	r3, r3, #23
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d107      	bne.n	8002be6 <gpio_clk_en+0x22>
		GPIOA_CLK_EN;
 8002bd6:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <gpio_clk_en+0x80>)
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <gpio_clk_en+0x80>)
 8002bdc:	2180      	movs	r1, #128	; 0x80
 8002bde:	0289      	lsls	r1, r1, #10
 8002be0:	430a      	orrs	r2, r1
 8002be2:	615a      	str	r2, [r3, #20]
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOF_CLK_EN;
	}
}
 8002be4:	e02a      	b.n	8002c3c <gpio_clk_en+0x78>
	} else if (port == GPIOB) {
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a17      	ldr	r2, [pc, #92]	; (8002c48 <gpio_clk_en+0x84>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d107      	bne.n	8002bfe <gpio_clk_en+0x3a>
		GPIOB_CLK_EN;
 8002bee:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <gpio_clk_en+0x80>)
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <gpio_clk_en+0x80>)
 8002bf4:	2180      	movs	r1, #128	; 0x80
 8002bf6:	02c9      	lsls	r1, r1, #11
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	615a      	str	r2, [r3, #20]
}
 8002bfc:	e01e      	b.n	8002c3c <gpio_clk_en+0x78>
	} else if (port == GPIOC) {
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <gpio_clk_en+0x88>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d107      	bne.n	8002c16 <gpio_clk_en+0x52>
		GPIOC_CLK_EN;
 8002c06:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <gpio_clk_en+0x80>)
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <gpio_clk_en+0x80>)
 8002c0c:	2180      	movs	r1, #128	; 0x80
 8002c0e:	0309      	lsls	r1, r1, #12
 8002c10:	430a      	orrs	r2, r1
 8002c12:	615a      	str	r2, [r3, #20]
}
 8002c14:	e012      	b.n	8002c3c <gpio_clk_en+0x78>
	} else if (port == GPIOD) {
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a0d      	ldr	r2, [pc, #52]	; (8002c50 <gpio_clk_en+0x8c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d107      	bne.n	8002c2e <gpio_clk_en+0x6a>
		GPIOD_CLK_EN;
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <gpio_clk_en+0x80>)
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <gpio_clk_en+0x80>)
 8002c24:	2180      	movs	r1, #128	; 0x80
 8002c26:	0349      	lsls	r1, r1, #13
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	615a      	str	r2, [r3, #20]
}
 8002c2c:	e006      	b.n	8002c3c <gpio_clk_en+0x78>
		GPIOF_CLK_EN;
 8002c2e:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <gpio_clk_en+0x80>)
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <gpio_clk_en+0x80>)
 8002c34:	2180      	movs	r1, #128	; 0x80
 8002c36:	03c9      	lsls	r1, r1, #15
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	615a      	str	r2, [r3, #20]
}
 8002c3c:	46c0      	nop			; (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b002      	add	sp, #8
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000
 8002c48:	48000400 	.word	0x48000400
 8002c4c:	48000800 	.word	0x48000800
 8002c50:	48000c00 	.word	0x48000c00

08002c54 <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d11c      	bne.n	8002ca2 <gpio_config+0x4e>
		gpio_clk_en(port);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f7ff ffaa 	bl	8002bc4 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	68b9      	ldr	r1, [r7, #8]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	0018      	movs	r0, r3
 8002c78:	f000 f856 	bl	8002d28 <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	0018      	movs	r0, r3
 8002c84:	f000 f868 	bl	8002d58 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 f87a 	bl	8002d88 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	68b9      	ldr	r1, [r7, #8]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f000 f88c 	bl	8002db8 <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
		adc_chsel(pinNumber);
	}
}
 8002ca0:	e03e      	b.n	8002d20 <gpio_config+0xcc>
	} else if (pinMode == INPUT_MODE) {
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d110      	bne.n	8002cca <gpio_config+0x76>
		gpio_clk_en(port);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	0018      	movs	r0, r3
 8002cac:	f7ff ff8a 	bl	8002bc4 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f000 f836 	bl	8002d28 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f000 f860 	bl	8002d88 <gpio_PUPD>
}
 8002cc8:	e02a      	b.n	8002d20 <gpio_config+0xcc>
	} else if (pinMode == ALT_MODE) {
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d116      	bne.n	8002cfe <gpio_config+0xaa>
		gpio_clk_en(port);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f7ff ff76 	bl	8002bc4 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f000 f822 	bl	8002d28 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	68b9      	ldr	r1, [r7, #8]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	0018      	movs	r0, r3
 8002cec:	f000 f84c 	bl	8002d88 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f000 f85e 	bl	8002db8 <gpio_PHPL_OD>
}
 8002cfc:	e010      	b.n	8002d20 <gpio_config+0xcc>
	} else if (pinMode == ANALOG_MODE) {
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d10d      	bne.n	8002d20 <gpio_config+0xcc>
		gpio_clk_en(port);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	0018      	movs	r0, r3
 8002d08:	f7ff ff5c 	bl	8002bc4 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	68b9      	ldr	r1, [r7, #8]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 f808 	bl	8002d28 <gpio_moder>
		adc_chsel(pinNumber);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f000 fb5c 	bl	80033d8 <adc_chsel>
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b004      	add	sp, #16
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));// IN/OP/Alternate/ANALOG
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <gpio_moder+0x2c>)
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	0089      	lsls	r1, r1, #2
 8002d3e:	58cb      	ldr	r3, [r1, r3]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4099      	lsls	r1, r3
 8002d44:	000b      	movs	r3, r1
 8002d46:	431a      	orrs	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	601a      	str	r2, [r3, #0]
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b004      	add	sp, #16
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000024 	.word	0x20000024

08002d58 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <gpio_speed+0x2c>)
 8002d6a:	68b9      	ldr	r1, [r7, #8]
 8002d6c:	0089      	lsls	r1, r1, #2
 8002d6e:	58cb      	ldr	r3, [r1, r3]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4099      	lsls	r1, r3
 8002d74:	000b      	movs	r3, r1
 8002d76:	431a      	orrs	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	609a      	str	r2, [r3, #8]
}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b004      	add	sp, #16
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000024 	.word	0x20000024

08002d88 <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <gpio_PUPD+0x2c>)
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	0089      	lsls	r1, r1, #2
 8002d9e:	58cb      	ldr	r3, [r1, r3]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4099      	lsls	r1, r3
 8002da4:	000b      	movs	r3, r1
 8002da6:	431a      	orrs	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	60da      	str	r2, [r3, #12]
}
 8002dac:	46c0      	nop			; (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b004      	add	sp, #16
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000024 	.word	0x20000024

08002db8 <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	4099      	lsls	r1, r3
 8002dce:	000b      	movs	r3, r1
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	605a      	str	r2, [r3, #4]
}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b004      	add	sp, #16
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b07      	cmp	r3, #7
 8002dee:	d80a      	bhi.n	8002e06 <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6a1a      	ldr	r2, [r3, #32]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4099      	lsls	r1, r3
 8002dfc:	000b      	movs	r3, r1
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 8002e04:	e00a      	b.n	8002e1c <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	3b08      	subs	r3, #8
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4099      	lsls	r1, r3
 8002e14:	000b      	movs	r3, r1
 8002e16:	431a      	orrs	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b004      	add	sp, #16
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <gpio_write>:

/************************************************************************************/

/************************GPIO OPERATION FUNCTION*************************************/
void gpio_write(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t state) {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	1dfb      	adds	r3, r7, #7
 8002e30:	701a      	strb	r2, [r3, #0]
	if (state) {
 8002e32:	1dfb      	adds	r3, r7, #7
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <gpio_write+0x26>
		port->BSRR = (1 << pinNumber);
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	0013      	movs	r3, r2
 8002e42:	001a      	movs	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	619a      	str	r2, [r3, #24]
	} else {
		port->BSRR = (1 << (pinNumber + 16));
	}
}
 8002e48:	e007      	b.n	8002e5a <gpio_write+0x36>
		port->BSRR = (1 << (pinNumber + 16));
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	3310      	adds	r3, #16
 8002e4e:	2201      	movs	r2, #1
 8002e50:	409a      	lsls	r2, r3
 8002e52:	0013      	movs	r3, r2
 8002e54:	001a      	movs	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	619a      	str	r2, [r3, #24]
}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b004      	add	sp, #16
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <print>:

//*******************************************************************************************//

//************************** UART SERIAL PRINTING *******************************************//

void print(const char *fmt, ...) {
 8002e64:	b40f      	push	{r0, r1, r2, r3}
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8002e6c:	231c      	movs	r3, #28
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	2180      	movs	r1, #128	; 0x80
 8002e78:	0049      	lsls	r1, r1, #1
 8002e7a:	4818      	ldr	r0, [pc, #96]	; (8002edc <print+0x78>)
 8002e7c:	f005 fbd4 	bl	8008628 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 8002e80:	4b16      	ldr	r3, [pc, #88]	; (8002edc <print+0x78>)
 8002e82:	0018      	movs	r0, r3
 8002e84:	f7fd f940 	bl	8000108 <strlen>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	60bb      	str	r3, [r7, #8]
	for (uint8_t i = 0; i < len; i++) {
 8002e8c:	230f      	movs	r3, #15
 8002e8e:	18fb      	adds	r3, r7, r3
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	e013      	b.n	8002ebe <print+0x5a>
		USART2->TDR = buffer[i];
 8002e96:	230f      	movs	r3, #15
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	4a0f      	ldr	r2, [pc, #60]	; (8002edc <print+0x78>)
 8002e9e:	5cd2      	ldrb	r2, [r2, r3]
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <print+0x7c>)
 8002ea2:	b292      	uxth	r2, r2
 8002ea4:	851a      	strh	r2, [r3, #40]	; 0x28
		while (!(USART2->ISR & USART_ISR_TXE))
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <print+0x7c>)
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	2280      	movs	r2, #128	; 0x80
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d0fa      	beq.n	8002ea8 <print+0x44>
	for (uint8_t i = 0; i < len; i++) {
 8002eb2:	210f      	movs	r1, #15
 8002eb4:	187b      	adds	r3, r7, r1
 8002eb6:	781a      	ldrb	r2, [r3, #0]
 8002eb8:	187b      	adds	r3, r7, r1
 8002eba:	3201      	adds	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
 8002ebe:	230f      	movs	r3, #15
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	68ba      	ldr	r2, [r7, #8]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	dce5      	bgt.n	8002e96 <print+0x32>
			;
	}

}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b004      	add	sp, #16
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	bc08      	pop	{r3}
 8002ed6:	b004      	add	sp, #16
 8002ed8:	4718      	bx	r3
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	200000f0 	.word	0x200000f0
 8002ee0:	40004400 	.word	0x40004400

08002ee4 <uart_print_config>:

void uart_print_config(uint32_t baudRate, uint8_t clkSpeed) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	000a      	movs	r2, r1
 8002eee:	1cfb      	adds	r3, r7, #3
 8002ef0:	701a      	strb	r2, [r3, #0]

	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8002ef2:	4b30      	ldr	r3, [pc, #192]	; (8002fb4 <uart_print_config+0xd0>)
 8002ef4:	69da      	ldr	r2, [r3, #28]
 8002ef6:	4b2f      	ldr	r3, [pc, #188]	; (8002fb4 <uart_print_config+0xd0>)
 8002ef8:	2180      	movs	r1, #128	; 0x80
 8002efa:	0289      	lsls	r1, r1, #10
 8002efc:	430a      	orrs	r2, r1
 8002efe:	61da      	str	r2, [r3, #28]
	gpio_config(GPIOA, 2, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8002f00:	2390      	movs	r3, #144	; 0x90
 8002f02:	05d8      	lsls	r0, r3, #23
 8002f04:	2300      	movs	r3, #0
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	2202      	movs	r2, #2
 8002f10:	2102      	movs	r1, #2
 8002f12:	f7ff fe9f 	bl	8002c54 <gpio_config>
	gpio_config(GPIOA, 3, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8002f16:	2390      	movs	r3, #144	; 0x90
 8002f18:	05d8      	lsls	r0, r3, #23
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	9301      	str	r3, [sp, #4]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2302      	movs	r3, #2
 8002f24:	2202      	movs	r2, #2
 8002f26:	2103      	movs	r1, #3
 8002f28:	f7ff fe94 	bl	8002c54 <gpio_config>

	gpio_altfn(GPIOA, 2, USART2_TX_PA2);
 8002f2c:	2390      	movs	r3, #144	; 0x90
 8002f2e:	05db      	lsls	r3, r3, #23
 8002f30:	2201      	movs	r2, #1
 8002f32:	2102      	movs	r1, #2
 8002f34:	0018      	movs	r0, r3
 8002f36:	f7ff ff52 	bl	8002dde <gpio_altfn>
	gpio_altfn(GPIOA, 3, USART2_RX_PA3);
 8002f3a:	2390      	movs	r3, #144	; 0x90
 8002f3c:	05db      	lsls	r3, r3, #23
 8002f3e:	2201      	movs	r2, #1
 8002f40:	2103      	movs	r1, #3
 8002f42:	0018      	movs	r0, r3
 8002f44:	f7ff ff4b 	bl	8002dde <gpio_altfn>

//clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388

	if (clkSpeed == 8) {
 8002f48:	1cfb      	adds	r3, r7, #3
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d108      	bne.n	8002f62 <uart_print_config+0x7e>
		if (baudRate == 9600)
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	2396      	movs	r3, #150	; 0x96
 8002f54:	019b      	lsls	r3, r3, #6
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d121      	bne.n	8002f9e <uart_print_config+0xba>
			USART2->BRR = 0x341;
 8002f5a:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <uart_print_config+0xd4>)
 8002f5c:	4a17      	ldr	r2, [pc, #92]	; (8002fbc <uart_print_config+0xd8>)
 8002f5e:	60da      	str	r2, [r3, #12]
 8002f60:	e01d      	b.n	8002f9e <uart_print_config+0xba>

	} else if (clkSpeed == 48) {
 8002f62:	1cfb      	adds	r3, r7, #3
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b30      	cmp	r3, #48	; 0x30
 8002f68:	d119      	bne.n	8002f9e <uart_print_config+0xba>
		if (baudRate == 4800)
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	2396      	movs	r3, #150	; 0x96
 8002f6e:	015b      	lsls	r3, r3, #5
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d103      	bne.n	8002f7c <uart_print_config+0x98>
			USART2->BRR = 0x271;
 8002f74:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <uart_print_config+0xd4>)
 8002f76:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <uart_print_config+0xdc>)
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	e010      	b.n	8002f9e <uart_print_config+0xba>
		else if (baudRate == 9600)
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	2396      	movs	r3, #150	; 0x96
 8002f80:	019b      	lsls	r3, r3, #6
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d103      	bne.n	8002f8e <uart_print_config+0xaa>
			USART2->BRR = 0x1388;
 8002f86:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <uart_print_config+0xd4>)
 8002f88:	4a0e      	ldr	r2, [pc, #56]	; (8002fc4 <uart_print_config+0xe0>)
 8002f8a:	60da      	str	r2, [r3, #12]
 8002f8c:	e007      	b.n	8002f9e <uart_print_config+0xba>
		else if (baudRate == 19200)
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	2396      	movs	r3, #150	; 0x96
 8002f92:	01db      	lsls	r3, r3, #7
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d102      	bne.n	8002f9e <uart_print_config+0xba>
			USART2->BRR = 0x9c4;
 8002f98:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <uart_print_config+0xd4>)
 8002f9a:	4a0b      	ldr	r2, [pc, #44]	; (8002fc8 <uart_print_config+0xe4>)
 8002f9c:	60da      	str	r2, [r3, #12]
	}

	USART2->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <uart_print_config+0xd4>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <uart_print_config+0xd4>)
 8002fa4:	210d      	movs	r1, #13
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]
}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b002      	add	sp, #8
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40004400 	.word	0x40004400
 8002fbc:	00000341 	.word	0x00000341
 8002fc0:	00000271 	.word	0x00000271
 8002fc4:	00001388 	.word	0x00001388
 8002fc8:	000009c4 	.word	0x000009c4

08002fcc <timer_config>:

//************************** TIMER FUNCTIONS ************************************************//

//************************** Basic TIMER FUNCTIONS *******************************//
void timer_config(TIM_TypeDef *tim, uint16_t prescaler_val,
		uint16_t auto_reload_val) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	0008      	movs	r0, r1
 8002fd6:	0011      	movs	r1, r2
 8002fd8:	1cbb      	adds	r3, r7, #2
 8002fda:	1c02      	adds	r2, r0, #0
 8002fdc:	801a      	strh	r2, [r3, #0]
 8002fde:	003b      	movs	r3, r7
 8002fe0:	1c0a      	adds	r2, r1, #0
 8002fe2:	801a      	strh	r2, [r3, #0]

	if (tim == TIM1) {						// ENable clock for particular timer
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a33      	ldr	r2, [pc, #204]	; (80030b4 <timer_config+0xe8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d107      	bne.n	8002ffc <timer_config+0x30>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8002fec:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <timer_config+0xec>)
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	4b31      	ldr	r3, [pc, #196]	; (80030b8 <timer_config+0xec>)
 8002ff2:	2180      	movs	r1, #128	; 0x80
 8002ff4:	0109      	lsls	r1, r1, #4
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	619a      	str	r2, [r3, #24]
 8002ffa:	e04f      	b.n	800309c <timer_config+0xd0>
	} else if (tim == TIM3) {
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a2f      	ldr	r2, [pc, #188]	; (80030bc <timer_config+0xf0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d106      	bne.n	8003012 <timer_config+0x46>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8003004:	4b2c      	ldr	r3, [pc, #176]	; (80030b8 <timer_config+0xec>)
 8003006:	69da      	ldr	r2, [r3, #28]
 8003008:	4b2b      	ldr	r3, [pc, #172]	; (80030b8 <timer_config+0xec>)
 800300a:	2102      	movs	r1, #2
 800300c:	430a      	orrs	r2, r1
 800300e:	61da      	str	r2, [r3, #28]
 8003010:	e044      	b.n	800309c <timer_config+0xd0>
	} else if (tim == TIM6) {
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a2a      	ldr	r2, [pc, #168]	; (80030c0 <timer_config+0xf4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d106      	bne.n	8003028 <timer_config+0x5c>
		RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 800301a:	4b27      	ldr	r3, [pc, #156]	; (80030b8 <timer_config+0xec>)
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	4b26      	ldr	r3, [pc, #152]	; (80030b8 <timer_config+0xec>)
 8003020:	2110      	movs	r1, #16
 8003022:	430a      	orrs	r2, r1
 8003024:	61da      	str	r2, [r3, #28]
 8003026:	e039      	b.n	800309c <timer_config+0xd0>
	} else if (tim == TIM7) {
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a26      	ldr	r2, [pc, #152]	; (80030c4 <timer_config+0xf8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d106      	bne.n	800303e <timer_config+0x72>
		RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 8003030:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <timer_config+0xec>)
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <timer_config+0xec>)
 8003036:	2120      	movs	r1, #32
 8003038:	430a      	orrs	r2, r1
 800303a:	61da      	str	r2, [r3, #28]
 800303c:	e02e      	b.n	800309c <timer_config+0xd0>
	} else if (tim == TIM14) {
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a21      	ldr	r2, [pc, #132]	; (80030c8 <timer_config+0xfc>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d107      	bne.n	8003056 <timer_config+0x8a>
		RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 8003046:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <timer_config+0xec>)
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	4b1b      	ldr	r3, [pc, #108]	; (80030b8 <timer_config+0xec>)
 800304c:	2180      	movs	r1, #128	; 0x80
 800304e:	0049      	lsls	r1, r1, #1
 8003050:	430a      	orrs	r2, r1
 8003052:	61da      	str	r2, [r3, #28]
 8003054:	e022      	b.n	800309c <timer_config+0xd0>
	} else if (tim == TIM15) {
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a1c      	ldr	r2, [pc, #112]	; (80030cc <timer_config+0x100>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d107      	bne.n	800306e <timer_config+0xa2>
		RCC->APB2ENR |= RCC_APB2ENR_TIM15EN;
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <timer_config+0xec>)
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <timer_config+0xec>)
 8003064:	2180      	movs	r1, #128	; 0x80
 8003066:	0249      	lsls	r1, r1, #9
 8003068:	430a      	orrs	r2, r1
 800306a:	619a      	str	r2, [r3, #24]
 800306c:	e016      	b.n	800309c <timer_config+0xd0>
	} else if (tim == TIM16) {
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a17      	ldr	r2, [pc, #92]	; (80030d0 <timer_config+0x104>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d107      	bne.n	8003086 <timer_config+0xba>
		RCC->APB2ENR |= RCC_APB2ENR_TIM16EN;
 8003076:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <timer_config+0xec>)
 8003078:	699a      	ldr	r2, [r3, #24]
 800307a:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <timer_config+0xec>)
 800307c:	2180      	movs	r1, #128	; 0x80
 800307e:	0289      	lsls	r1, r1, #10
 8003080:	430a      	orrs	r2, r1
 8003082:	619a      	str	r2, [r3, #24]
 8003084:	e00a      	b.n	800309c <timer_config+0xd0>
	} else if (tim == TIM17) {
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a12      	ldr	r2, [pc, #72]	; (80030d4 <timer_config+0x108>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d106      	bne.n	800309c <timer_config+0xd0>
		RCC->APB2ENR |= RCC_APB2ENR_TIM17EN;
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <timer_config+0xec>)
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <timer_config+0xec>)
 8003094:	2180      	movs	r1, #128	; 0x80
 8003096:	02c9      	lsls	r1, r1, #11
 8003098:	430a      	orrs	r2, r1
 800309a:	619a      	str	r2, [r3, #24]
	}

	// Peripheral clock/Desired clk = PSC x ARR = Value

	tim->ARR = auto_reload_val;	// fill auto-reload register with value: auto_reload_val
 800309c:	003b      	movs	r3, r7
 800309e:	881a      	ldrh	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	62da      	str	r2, [r3, #44]	; 0x2c
	tim->PSC = prescaler_val;// fill prescale value register with value: prescaler_val
 80030a4:	1cbb      	adds	r3, r7, #2
 80030a6:	881a      	ldrh	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28

}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b002      	add	sp, #8
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40012c00 	.word	0x40012c00
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40000400 	.word	0x40000400
 80030c0:	40001000 	.word	0x40001000
 80030c4:	40001400 	.word	0x40001400
 80030c8:	40002000 	.word	0x40002000
 80030cc:	40014000 	.word	0x40014000
 80030d0:	40014400 	.word	0x40014400
 80030d4:	40014800 	.word	0x40014800

080030d8 <timer_EN>:

void timer_EN(TIM_TypeDef *tim) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
	tim->CR1 |= TIM_CR1_CEN;		// Enable counter to count the value
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2201      	movs	r2, #1
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	601a      	str	r2, [r3, #0]
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <timer_DI>:

void timer_DI(TIM_TypeDef *tim) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	tim->CR1 &= ~TIM_CR1_CEN;		// Disable counter to count the value
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2201      	movs	r2, #1
 8003102:	4393      	bics	r3, r2
 8003104:	001a      	movs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	601a      	str	r2, [r3, #0]
}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	46bd      	mov	sp, r7
 800310e:	b002      	add	sp, #8
 8003110:	bd80      	pop	{r7, pc}

08003112 <timer_IT_EN>:
uint16_t timer_cnt_val(TIM_TypeDef *tim) {
	uint16_t val = tim->CNT;		// counter register value
	return val;
}

void timer_IT_EN(TIM_TypeDef *tim) {
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
	tim->DIER |= TIM_DIER_UIE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	60da      	str	r2, [r3, #12]
}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	46bd      	mov	sp, r7
 800312a:	b002      	add	sp, #8
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <ticks_timer>:

void ticks_timer(uint8_t clkSpeed) {			// similar to millis
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	0002      	movs	r2, r0
 8003138:	1dfb      	adds	r3, r7, #7
 800313a:	701a      	strb	r2, [r3, #0]
	if (clkSpeed == 8) {
 800313c:	1dfb      	adds	r3, r7, #7
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d106      	bne.n	8003152 <ticks_timer+0x22>
		timer_config(TIM6, 0, 7499);//Initialize timer with configuration to 1 milli second
 8003144:	4a0f      	ldr	r2, [pc, #60]	; (8003184 <ticks_timer+0x54>)
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <ticks_timer+0x58>)
 8003148:	2100      	movs	r1, #0
 800314a:	0018      	movs	r0, r3
 800314c:	f7ff ff3e 	bl	8002fcc <timer_config>
 8003150:	e009      	b.n	8003166 <ticks_timer+0x36>
	} else if (clkSpeed == 48) {
 8003152:	1dfb      	adds	r3, r7, #7
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b30      	cmp	r3, #48	; 0x30
 8003158:	d105      	bne.n	8003166 <ticks_timer+0x36>
		timer_config(TIM6, 45, 999);//Initialize timer with configuration to 1 milli second
 800315a:	4a0c      	ldr	r2, [pc, #48]	; (800318c <ticks_timer+0x5c>)
 800315c:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <ticks_timer+0x58>)
 800315e:	212d      	movs	r1, #45	; 0x2d
 8003160:	0018      	movs	r0, r3
 8003162:	f7ff ff33 	bl	8002fcc <timer_config>
	}
	timer_IT_EN(TIM6);
 8003166:	4b08      	ldr	r3, [pc, #32]	; (8003188 <ticks_timer+0x58>)
 8003168:	0018      	movs	r0, r3
 800316a:	f7ff ffd2 	bl	8003112 <timer_IT_EN>
	NVIC_EnableIRQ(TIM6_IRQn);
 800316e:	2011      	movs	r0, #17
 8003170:	f7ff fcdc 	bl	8002b2c <__NVIC_EnableIRQ>
	timer_EN(TIM6);
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <ticks_timer+0x58>)
 8003176:	0018      	movs	r0, r3
 8003178:	f7ff ffae 	bl	80030d8 <timer_EN>
}
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b002      	add	sp, #8
 8003182:	bd80      	pop	{r7, pc}
 8003184:	00001d4b 	.word	0x00001d4b
 8003188:	40001000 	.word	0x40001000
 800318c:	000003e7 	.word	0x000003e7

08003190 <ticks_val>:
uint16_t ticks_val() {
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
	return ticks;
 8003194:	4b02      	ldr	r3, [pc, #8]	; (80031a0 <ticks_val+0x10>)
 8003196:	881b      	ldrh	r3, [r3, #0]
}
 8003198:	0018      	movs	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	200000ee 	.word	0x200000ee

080031a4 <ticks_reset>:
void ticks_reset() {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
	ticks = 0;
 80031a8:	4b02      	ldr	r3, [pc, #8]	; (80031b4 <ticks_reset+0x10>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	801a      	strh	r2, [r3, #0]
}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	200000ee 	.word	0x200000ee

080031b8 <TIM6_IRQHandler>:
void TIM6_IRQHandler(void) {		// Timer Interrupt helping in delay
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
	ticks++;
 80031bc:	4b07      	ldr	r3, [pc, #28]	; (80031dc <TIM6_IRQHandler+0x24>)
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	3301      	adds	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <TIM6_IRQHandler+0x24>)
 80031c6:	801a      	strh	r2, [r3, #0]
	TIM6->SR &= ~TIM_SR_UIF;
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <TIM6_IRQHandler+0x28>)
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <TIM6_IRQHandler+0x28>)
 80031ce:	2101      	movs	r1, #1
 80031d0:	438a      	bics	r2, r1
 80031d2:	611a      	str	r2, [r3, #16]
}
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	200000ee 	.word	0x200000ee
 80031e0:	40001000 	.word	0x40001000

080031e4 <delay_ms>:

void delay_ms(uint32_t ms) {		// blocking mode delay function
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
//	timer_config(TIM6, 0, 7499);
	timer_config(TIM6, 0, 47899);
 80031ec:	4a11      	ldr	r2, [pc, #68]	; (8003234 <delay_ms+0x50>)
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <delay_ms+0x54>)
 80031f0:	2100      	movs	r1, #0
 80031f2:	0018      	movs	r0, r3
 80031f4:	f7ff feea 	bl	8002fcc <timer_config>
//	timer_config(TIM6, 0, 208);
//	timer_config(TIM6, 23, 65534);
	timer_IT_EN(TIM6);
 80031f8:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <delay_ms+0x54>)
 80031fa:	0018      	movs	r0, r3
 80031fc:	f7ff ff89 	bl	8003112 <timer_IT_EN>
	NVIC_EnableIRQ(TIM6_IRQn);
 8003200:	2011      	movs	r0, #17
 8003202:	f7ff fc93 	bl	8002b2c <__NVIC_EnableIRQ>

	timer_EN(TIM6);	// good for turning timer off when not in need to save power
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <delay_ms+0x54>)
 8003208:	0018      	movs	r0, r3
 800320a:	f7ff ff65 	bl	80030d8 <timer_EN>
	ticks = 0;
 800320e:	4b0b      	ldr	r3, [pc, #44]	; (800323c <delay_ms+0x58>)
 8003210:	2200      	movs	r2, #0
 8003212:	801a      	strh	r2, [r3, #0]
	while (ticks < ms)
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <delay_ms+0x58>)
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	001a      	movs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4293      	cmp	r3, r2
 8003220:	d8f9      	bhi.n	8003216 <delay_ms+0x32>
		;
	timer_DI(TIM6);
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <delay_ms+0x54>)
 8003224:	0018      	movs	r0, r3
 8003226:	f7ff ff65 	bl	80030f4 <timer_DI>
}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	46bd      	mov	sp, r7
 800322e:	b002      	add	sp, #8
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	0000bb1b 	.word	0x0000bb1b
 8003238:	40001000 	.word	0x40001000
 800323c:	200000ee 	.word	0x200000ee

08003240 <adc_calib>:
//************************** General Purpose TIMER FUNCTIONS ********************//

//*******************************************************************************//

//********************************| ADC FUNCTIONS |******************************//
void adc_calib() {
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
	// Calibrate ADC
	if ((ADC1->CR & ADC_CR_ADEN) != 0) /* (1) */
 8003244:	4b13      	ldr	r3, [pc, #76]	; (8003294 <adc_calib+0x54>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2201      	movs	r2, #1
 800324a:	4013      	ands	r3, r2
 800324c:	d005      	beq.n	800325a <adc_calib+0x1a>
	{
		ADC1->CR |= ADC_CR_ADDIS; /* (2) */
 800324e:	4b11      	ldr	r3, [pc, #68]	; (8003294 <adc_calib+0x54>)
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <adc_calib+0x54>)
 8003254:	2102      	movs	r1, #2
 8003256:	430a      	orrs	r2, r1
 8003258:	609a      	str	r2, [r3, #8]
	}
	while ((ADC1->CR & ADC_CR_ADEN) != 0) {
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <adc_calib+0x54>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2201      	movs	r2, #1
 8003262:	4013      	ands	r3, r2
 8003264:	d1fa      	bne.n	800325c <adc_calib+0x1c>
		/* For robust implementation, add here time-out management */
	}
	ADC1->CFGR1 &= ~ADC_CFGR1_DMAEN; /* (3) */
 8003266:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <adc_calib+0x54>)
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <adc_calib+0x54>)
 800326c:	2101      	movs	r1, #1
 800326e:	438a      	bics	r2, r1
 8003270:	60da      	str	r2, [r3, #12]
	ADC1->CR |= ADC_CR_ADCAL; /* (4) */
 8003272:	4b08      	ldr	r3, [pc, #32]	; (8003294 <adc_calib+0x54>)
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	4b07      	ldr	r3, [pc, #28]	; (8003294 <adc_calib+0x54>)
 8003278:	2180      	movs	r1, #128	; 0x80
 800327a:	0609      	lsls	r1, r1, #24
 800327c:	430a      	orrs	r2, r1
 800327e:	609a      	str	r2, [r3, #8]
	while ((ADC1->CR & ADC_CR_ADCAL) != 0) /* (5) */
 8003280:	46c0      	nop			; (mov r8, r8)
 8003282:	4b04      	ldr	r3, [pc, #16]	; (8003294 <adc_calib+0x54>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	dbfb      	blt.n	8003282 <adc_calib+0x42>
	{
	}
}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	40012400 	.word	0x40012400

08003298 <adc_ready>:
void adc_ready() {
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
	// ADC ENABLE
	if ((ADC1->ISR & ADC_ISR_ADRDY) != 0) /* (1) */
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <adc_ready+0x4c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2201      	movs	r2, #1
 80032a2:	4013      	ands	r3, r2
 80032a4:	d005      	beq.n	80032b2 <adc_ready+0x1a>
	{
		ADC1->ISR |= ADC_ISR_ADRDY; /* (2) */
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <adc_ready+0x4c>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <adc_ready+0x4c>)
 80032ac:	2101      	movs	r1, #1
 80032ae:	430a      	orrs	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]
	}
	ADC1->CR |= ADC_CR_ADEN; /* (3) */
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <adc_ready+0x4c>)
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <adc_ready+0x4c>)
 80032b8:	2101      	movs	r1, #1
 80032ba:	430a      	orrs	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]
	ticks_reset();
 80032be:	f7ff ff71 	bl	80031a4 <ticks_reset>
	while (ticks_val() < 50)
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	f7ff ff64 	bl	8003190 <ticks_val>
 80032c8:	0003      	movs	r3, r0
 80032ca:	2b31      	cmp	r3, #49	; 0x31
 80032cc:	d9fa      	bls.n	80032c4 <adc_ready+0x2c>
		;
	while ((ADC1->ISR & ADC_ISR_ADRDY) == 0) /* (4) */
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <adc_ready+0x4c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2201      	movs	r2, #1
 80032d6:	4013      	ands	r3, r2
 80032d8:	d0fa      	beq.n	80032d0 <adc_ready+0x38>
	{
		/* For robust implementation, add here time-out management */
	}
}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	40012400 	.word	0x40012400

080032e8 <adc_clk_config>:
void adc_clk_config() {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; /* (1) */
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <adc_clk_config+0x34>)
 80032ee:	699a      	ldr	r2, [r3, #24]
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <adc_clk_config+0x34>)
 80032f2:	2180      	movs	r1, #128	; 0x80
 80032f4:	0089      	lsls	r1, r1, #2
 80032f6:	430a      	orrs	r2, r1
 80032f8:	619a      	str	r2, [r3, #24]
	RCC->CR2 |= RCC_CR2_HSI14ON; /* (2) */
 80032fa:	4b08      	ldr	r3, [pc, #32]	; (800331c <adc_clk_config+0x34>)
 80032fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032fe:	4b07      	ldr	r3, [pc, #28]	; (800331c <adc_clk_config+0x34>)
 8003300:	2101      	movs	r1, #1
 8003302:	430a      	orrs	r2, r1
 8003304:	635a      	str	r2, [r3, #52]	; 0x34
	while ((RCC->CR2 & RCC_CR2_HSI14RDY) == 0) /* (3) */
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <adc_clk_config+0x34>)
 800330a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330c:	2202      	movs	r2, #2
 800330e:	4013      	ands	r3, r2
 8003310:	d0fa      	beq.n	8003308 <adc_clk_config+0x20>
	{
		/* For robust implementation, add here time-out management */
	}
}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	40021000 	.word	0x40021000

08003320 <adc_sample_time>:
void adc_sample_time(uint8_t sample_time) {
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	0002      	movs	r2, r0
 8003328:	1dfb      	adds	r3, r7, #7
 800332a:	701a      	strb	r2, [r3, #0]
	ADC1->SMPR |= sample_time;
 800332c:	4b05      	ldr	r3, [pc, #20]	; (8003344 <adc_sample_time+0x24>)
 800332e:	6959      	ldr	r1, [r3, #20]
 8003330:	1dfb      	adds	r3, r7, #7
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	4b03      	ldr	r3, [pc, #12]	; (8003344 <adc_sample_time+0x24>)
 8003336:	430a      	orrs	r2, r1
 8003338:	615a      	str	r2, [r3, #20]
}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	46bd      	mov	sp, r7
 800333e:	b002      	add	sp, #8
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	40012400 	.word	0x40012400

08003348 <adc_en>:
void adc_en() {
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
	adc_clk_config();
 800334c:	f7ff ffcc 	bl	80032e8 <adc_clk_config>
	adc_calib();
 8003350:	f7ff ff76 	bl	8003240 <adc_calib>
	adc_ready();
 8003354:	f7ff ffa0 	bl	8003298 <adc_ready>
}
 8003358:	46c0      	nop			; (mov r8, r8)
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <adc_read>:
void adc_read(uint16_t *arr, uint8_t arr_len) {
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	000a      	movs	r2, r1
 800336a:	1cfb      	adds	r3, r7, #3
 800336c:	701a      	strb	r2, [r3, #0]
	ADC1->CR |= ADC_CR_ADSTART;
 800336e:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <adc_read+0x58>)
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <adc_read+0x58>)
 8003374:	2104      	movs	r1, #4
 8003376:	430a      	orrs	r2, r1
 8003378:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < arr_len; i++) {
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	e010      	b.n	80033a2 <adc_read+0x42>
		while ((ADC1->ISR & ADC_ISR_EOC) == 0)
 8003380:	46c0      	nop			; (mov r8, r8)
 8003382:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <adc_read+0x58>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2204      	movs	r2, #4
 8003388:	4013      	ands	r3, r2
 800338a:	d0fa      	beq.n	8003382 <adc_read+0x22>
			;
		*(arr + i) = ADC1->DR;
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <adc_read+0x58>)
 800338e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	18d3      	adds	r3, r2, r3
 8003398:	b28a      	uxth	r2, r1
 800339a:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < arr_len; i++) {
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3301      	adds	r3, #1
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	1cfb      	adds	r3, r7, #3
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	dbe9      	blt.n	8003380 <adc_read+0x20>
	}
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b004      	add	sp, #16
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	40012400 	.word	0x40012400

080033bc <adc_stop>:

void adc_start() {
	ADC1->CR |= ADC_CR_ADSTART;
}
void adc_stop() {
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
	ADC1->CR |= ADC_CR_ADSTP;
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <adc_stop+0x18>)
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <adc_stop+0x18>)
 80033c6:	2110      	movs	r1, #16
 80033c8:	430a      	orrs	r2, r1
 80033ca:	609a      	str	r2, [r3, #8]
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	40012400 	.word	0x40012400

080033d8 <adc_chsel>:
	while ((ADC1->CR & ADC_CR_ADEN) != 0) /* (4) */
	{
		/* For robust implementation, add here time-out management */
	}
}
void adc_chsel(uint32_t pin) {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b0f      	cmp	r3, #15
 80033e4:	d900      	bls.n	80033e8 <adc_chsel+0x10>
 80033e6:	e07d      	b.n	80034e4 <adc_chsel+0x10c>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	009a      	lsls	r2, r3, #2
 80033ec:	4b3f      	ldr	r3, [pc, #252]	; (80034ec <adc_chsel+0x114>)
 80033ee:	18d3      	adds	r3, r2, r3
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	469f      	mov	pc, r3
	switch (pin) {
	case 0:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL0;
 80033f4:	4b3e      	ldr	r3, [pc, #248]	; (80034f0 <adc_chsel+0x118>)
 80033f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033f8:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <adc_chsel+0x118>)
 80033fa:	2101      	movs	r1, #1
 80033fc:	430a      	orrs	r2, r1
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8003400:	e070      	b.n	80034e4 <adc_chsel+0x10c>
	case 1:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL1;
 8003402:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <adc_chsel+0x118>)
 8003404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003406:	4b3a      	ldr	r3, [pc, #232]	; (80034f0 <adc_chsel+0x118>)
 8003408:	2102      	movs	r1, #2
 800340a:	430a      	orrs	r2, r1
 800340c:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 800340e:	e069      	b.n	80034e4 <adc_chsel+0x10c>
	case 2:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL2;
 8003410:	4b37      	ldr	r3, [pc, #220]	; (80034f0 <adc_chsel+0x118>)
 8003412:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003414:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <adc_chsel+0x118>)
 8003416:	2104      	movs	r1, #4
 8003418:	430a      	orrs	r2, r1
 800341a:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 800341c:	e062      	b.n	80034e4 <adc_chsel+0x10c>
	case 3:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL3;
 800341e:	4b34      	ldr	r3, [pc, #208]	; (80034f0 <adc_chsel+0x118>)
 8003420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003422:	4b33      	ldr	r3, [pc, #204]	; (80034f0 <adc_chsel+0x118>)
 8003424:	2108      	movs	r1, #8
 8003426:	430a      	orrs	r2, r1
 8003428:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 800342a:	e05b      	b.n	80034e4 <adc_chsel+0x10c>
	case 4:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL4;
 800342c:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <adc_chsel+0x118>)
 800342e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003430:	4b2f      	ldr	r3, [pc, #188]	; (80034f0 <adc_chsel+0x118>)
 8003432:	2110      	movs	r1, #16
 8003434:	430a      	orrs	r2, r1
 8003436:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8003438:	e054      	b.n	80034e4 <adc_chsel+0x10c>
	case 5:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL5;
 800343a:	4b2d      	ldr	r3, [pc, #180]	; (80034f0 <adc_chsel+0x118>)
 800343c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800343e:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <adc_chsel+0x118>)
 8003440:	2120      	movs	r1, #32
 8003442:	430a      	orrs	r2, r1
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8003446:	e04d      	b.n	80034e4 <adc_chsel+0x10c>
	case 6:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL6;
 8003448:	4b29      	ldr	r3, [pc, #164]	; (80034f0 <adc_chsel+0x118>)
 800344a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800344c:	4b28      	ldr	r3, [pc, #160]	; (80034f0 <adc_chsel+0x118>)
 800344e:	2140      	movs	r1, #64	; 0x40
 8003450:	430a      	orrs	r2, r1
 8003452:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8003454:	e046      	b.n	80034e4 <adc_chsel+0x10c>
	case 7:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL7;
 8003456:	4b26      	ldr	r3, [pc, #152]	; (80034f0 <adc_chsel+0x118>)
 8003458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800345a:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <adc_chsel+0x118>)
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	430a      	orrs	r2, r1
 8003460:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8003462:	e03f      	b.n	80034e4 <adc_chsel+0x10c>
	case 8:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL8;
 8003464:	4b22      	ldr	r3, [pc, #136]	; (80034f0 <adc_chsel+0x118>)
 8003466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003468:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <adc_chsel+0x118>)
 800346a:	2180      	movs	r1, #128	; 0x80
 800346c:	0049      	lsls	r1, r1, #1
 800346e:	430a      	orrs	r2, r1
 8003470:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8003472:	e037      	b.n	80034e4 <adc_chsel+0x10c>
	case 9:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL9;
 8003474:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <adc_chsel+0x118>)
 8003476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <adc_chsel+0x118>)
 800347a:	2180      	movs	r1, #128	; 0x80
 800347c:	0089      	lsls	r1, r1, #2
 800347e:	430a      	orrs	r2, r1
 8003480:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8003482:	e02f      	b.n	80034e4 <adc_chsel+0x10c>
	case 10:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL10;
 8003484:	4b1a      	ldr	r3, [pc, #104]	; (80034f0 <adc_chsel+0x118>)
 8003486:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <adc_chsel+0x118>)
 800348a:	2180      	movs	r1, #128	; 0x80
 800348c:	00c9      	lsls	r1, r1, #3
 800348e:	430a      	orrs	r2, r1
 8003490:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8003492:	e027      	b.n	80034e4 <adc_chsel+0x10c>
	case 11:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL11;
 8003494:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <adc_chsel+0x118>)
 8003496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003498:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <adc_chsel+0x118>)
 800349a:	2180      	movs	r1, #128	; 0x80
 800349c:	0109      	lsls	r1, r1, #4
 800349e:	430a      	orrs	r2, r1
 80034a0:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80034a2:	e01f      	b.n	80034e4 <adc_chsel+0x10c>
	case 12:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL12;
 80034a4:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <adc_chsel+0x118>)
 80034a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034a8:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <adc_chsel+0x118>)
 80034aa:	2180      	movs	r1, #128	; 0x80
 80034ac:	0149      	lsls	r1, r1, #5
 80034ae:	430a      	orrs	r2, r1
 80034b0:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80034b2:	e017      	b.n	80034e4 <adc_chsel+0x10c>
	case 13:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL13;
 80034b4:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <adc_chsel+0x118>)
 80034b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034b8:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <adc_chsel+0x118>)
 80034ba:	2180      	movs	r1, #128	; 0x80
 80034bc:	0189      	lsls	r1, r1, #6
 80034be:	430a      	orrs	r2, r1
 80034c0:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80034c2:	e00f      	b.n	80034e4 <adc_chsel+0x10c>
	case 14:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL14;
 80034c4:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <adc_chsel+0x118>)
 80034c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <adc_chsel+0x118>)
 80034ca:	2180      	movs	r1, #128	; 0x80
 80034cc:	01c9      	lsls	r1, r1, #7
 80034ce:	430a      	orrs	r2, r1
 80034d0:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80034d2:	e007      	b.n	80034e4 <adc_chsel+0x10c>
	case 15:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL15;
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <adc_chsel+0x118>)
 80034d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <adc_chsel+0x118>)
 80034da:	2180      	movs	r1, #128	; 0x80
 80034dc:	0209      	lsls	r1, r1, #8
 80034de:	430a      	orrs	r2, r1
 80034e0:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80034e2:	46c0      	nop			; (mov r8, r8)
	}
}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b002      	add	sp, #8
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	08009800 	.word	0x08009800
 80034f0:	40012400 	.word	0x40012400

080034f4 <adc_config>:
void adc_config(uint8_t sample_time, uint8_t CONT, uint8_t SCANDIR,
		uint8_t AUTOFF, uint8_t WAIT, uint8_t DISCEN, uint8_t OVRMOD) {
 80034f4:	b5b0      	push	{r4, r5, r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	0005      	movs	r5, r0
 80034fc:	000c      	movs	r4, r1
 80034fe:	0010      	movs	r0, r2
 8003500:	0019      	movs	r1, r3
 8003502:	1dfb      	adds	r3, r7, #7
 8003504:	1c2a      	adds	r2, r5, #0
 8003506:	701a      	strb	r2, [r3, #0]
 8003508:	1dbb      	adds	r3, r7, #6
 800350a:	1c22      	adds	r2, r4, #0
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	1d7b      	adds	r3, r7, #5
 8003510:	1c02      	adds	r2, r0, #0
 8003512:	701a      	strb	r2, [r3, #0]
 8003514:	1d3b      	adds	r3, r7, #4
 8003516:	1c0a      	adds	r2, r1, #0
 8003518:	701a      	strb	r2, [r3, #0]
	adc_sample_time(sample_time);
 800351a:	1dfb      	adds	r3, r7, #7
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	0018      	movs	r0, r3
 8003520:	f7ff fefe 	bl	8003320 <adc_sample_time>
	if (DISCEN) {
 8003524:	231c      	movs	r3, #28
 8003526:	18fb      	adds	r3, r7, r3
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d006      	beq.n	800353c <adc_config+0x48>
		ADC1->CFGR1 |= ADC_CFGR1_DISCEN;
 800352e:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <adc_config+0xc0>)
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <adc_config+0xc0>)
 8003534:	2180      	movs	r1, #128	; 0x80
 8003536:	0249      	lsls	r1, r1, #9
 8003538:	430a      	orrs	r2, r1
 800353a:	60da      	str	r2, [r3, #12]
	}
	if (AUTOFF) {
 800353c:	1d3b      	adds	r3, r7, #4
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d006      	beq.n	8003552 <adc_config+0x5e>
		ADC1->CFGR1 |= ADC_CFGR1_AUTOFF;
 8003544:	4b1b      	ldr	r3, [pc, #108]	; (80035b4 <adc_config+0xc0>)
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <adc_config+0xc0>)
 800354a:	2180      	movs	r1, #128	; 0x80
 800354c:	0209      	lsls	r1, r1, #8
 800354e:	430a      	orrs	r2, r1
 8003550:	60da      	str	r2, [r3, #12]
	}
	if (WAIT) {
 8003552:	2318      	movs	r3, #24
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d006      	beq.n	800356a <adc_config+0x76>
		ADC1->CFGR1 |= ADC_CFGR1_WAIT;
 800355c:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <adc_config+0xc0>)
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <adc_config+0xc0>)
 8003562:	2180      	movs	r1, #128	; 0x80
 8003564:	01c9      	lsls	r1, r1, #7
 8003566:	430a      	orrs	r2, r1
 8003568:	60da      	str	r2, [r3, #12]
	}
	if (CONT) {
 800356a:	1dbb      	adds	r3, r7, #6
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d006      	beq.n	8003580 <adc_config+0x8c>
		ADC1->CFGR1 |= ADC_CFGR1_CONT;
 8003572:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <adc_config+0xc0>)
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <adc_config+0xc0>)
 8003578:	2180      	movs	r1, #128	; 0x80
 800357a:	0189      	lsls	r1, r1, #6
 800357c:	430a      	orrs	r2, r1
 800357e:	60da      	str	r2, [r3, #12]
	}
	if (OVRMOD) {
 8003580:	2320      	movs	r3, #32
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d006      	beq.n	8003598 <adc_config+0xa4>
		ADC1->CFGR1 |= ADC_CFGR1_OVRMOD;
 800358a:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <adc_config+0xc0>)
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <adc_config+0xc0>)
 8003590:	2180      	movs	r1, #128	; 0x80
 8003592:	0149      	lsls	r1, r1, #5
 8003594:	430a      	orrs	r2, r1
 8003596:	60da      	str	r2, [r3, #12]
	}
	if (SCANDIR) {
 8003598:	1d7b      	adds	r3, r7, #5
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <adc_config+0xb8>
		ADC1->CFGR1 |= ADC_CFGR1_SCANDIR;
 80035a0:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <adc_config+0xc0>)
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <adc_config+0xc0>)
 80035a6:	2104      	movs	r1, #4
 80035a8:	430a      	orrs	r2, r1
 80035aa:	60da      	str	r2, [r3, #12]
	}
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b002      	add	sp, #8
 80035b2:	bdb0      	pop	{r4, r5, r7, pc}
 80035b4:	40012400 	.word	0x40012400

080035b8 <sd_mount>:
 */

#include "SDCard.h"
#include "st7783.h"

void sd_mount() {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 80035bc:	490e      	ldr	r1, [pc, #56]	; (80035f8 <sd_mount+0x40>)
 80035be:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <sd_mount+0x44>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	0018      	movs	r0, r3
 80035c4:	f002 fb6c 	bl	8005ca0 <f_mount>
 80035c8:	0003      	movs	r3, r0
 80035ca:	001a      	movs	r2, r3
 80035cc:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <sd_mount+0x48>)
 80035ce:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <sd_mount+0x48>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00b      	beq.n	80035f0 <sd_mount+0x38>
		print("Error in Mounting --- ");
 80035d8:	4b0a      	ldr	r3, [pc, #40]	; (8003604 <sd_mount+0x4c>)
 80035da:	0018      	movs	r0, r3
 80035dc:	f7ff fc42 	bl	8002e64 <print>
		print("f_mount error (%i)\r\n", fres);
 80035e0:	4b07      	ldr	r3, [pc, #28]	; (8003600 <sd_mount+0x48>)
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	001a      	movs	r2, r3
 80035e6:	4b08      	ldr	r3, [pc, #32]	; (8003608 <sd_mount+0x50>)
 80035e8:	0011      	movs	r1, r2
 80035ea:	0018      	movs	r0, r3
 80035ec:	f7ff fc3a 	bl	8002e64 <print>
//		while (1)
//			;
	}
}
 80035f0:	46c0      	nop			; (mov r8, r8)
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	08008f44 	.word	0x08008f44
 80035fc:	20000338 	.word	0x20000338
 8003600:	20000600 	.word	0x20000600
 8003604:	08008f48 	.word	0x08008f48
 8003608:	08008f60 	.word	0x08008f60

0800360c <sd_space>:

void sd_space() {
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;

	FATFS *getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 8003612:	003a      	movs	r2, r7
 8003614:	1d39      	adds	r1, r7, #4
 8003616:	4b1a      	ldr	r3, [pc, #104]	; (8003680 <sd_space+0x74>)
 8003618:	0018      	movs	r0, r3
 800361a:	f003 fb8d 	bl	8006d38 <f_getfree>
 800361e:	0003      	movs	r3, r0
 8003620:	001a      	movs	r2, r3
 8003622:	4b18      	ldr	r3, [pc, #96]	; (8003684 <sd_space+0x78>)
 8003624:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8003626:	4b17      	ldr	r3, [pc, #92]	; (8003684 <sd_space+0x78>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <sd_space+0x3a>
		print("Error in fetching space data --- ");
 800362e:	4b16      	ldr	r3, [pc, #88]	; (8003688 <sd_space+0x7c>)
 8003630:	0018      	movs	r0, r3
 8003632:	f7ff fc17 	bl	8002e64 <print>
		print("f_getfree error (%i)\r\n", fres);
 8003636:	4b13      	ldr	r3, [pc, #76]	; (8003684 <sd_space+0x78>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	001a      	movs	r2, r3
 800363c:	4b13      	ldr	r3, [pc, #76]	; (800368c <sd_space+0x80>)
 800363e:	0011      	movs	r1, r2
 8003640:	0018      	movs	r0, r3
 8003642:	f7ff fc0f 	bl	8002e64 <print>
//		while (1)
//			;
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	2385      	movs	r3, #133	; 0x85
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	58d3      	ldr	r3, [r2, r3]
 800364e:	3b02      	subs	r3, #2
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	490f      	ldr	r1, [pc, #60]	; (8003690 <sd_space+0x84>)
 8003654:	5c52      	ldrb	r2, [r2, r1]
 8003656:	4353      	muls	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
	free_sectors = free_clusters * getFreeFs->csize;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	4a0c      	ldr	r2, [pc, #48]	; (8003690 <sd_space+0x84>)
 800365e:	5c9b      	ldrb	r3, [r3, r2]
 8003660:	001a      	movs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4353      	muls	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]

	print(
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	0859      	lsrs	r1, r3, #1
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	085a      	lsrs	r2, r3, #1
 8003670:	4b08      	ldr	r3, [pc, #32]	; (8003694 <sd_space+0x88>)
 8003672:	0018      	movs	r0, r3
 8003674:	f7ff fbf6 	bl	8002e64 <print>
			"SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n",
			total_sectors / 2, free_sectors / 2);
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b004      	add	sp, #16
 800367e:	bd80      	pop	{r7, pc}
 8003680:	08008f44 	.word	0x08008f44
 8003684:	20000600 	.word	0x20000600
 8003688:	08008f78 	.word	0x08008f78
 800368c:	08008f9c 	.word	0x08008f9c
 8003690:	00000202 	.word	0x00000202
 8003694:	08008fb4 	.word	0x08008fb4

08003698 <sd_openFile>:

int sd_openFile(char *c) {
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b08b      	sub	sp, #44	; 0x2c
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	BYTE fileName[30];
	strncpy((char*) fileName, c, 30);
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	2408      	movs	r4, #8
 80036a4:	193b      	adds	r3, r7, r4
 80036a6:	221e      	movs	r2, #30
 80036a8:	0018      	movs	r0, r3
 80036aa:	f004 ff7d 	bl	80085a8 <strncpy>
	fres = f_open(&fil, c, FA_READ);
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <sd_openFile+0x5c>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	0018      	movs	r0, r3
 80036b6:	f002 fb43 	bl	8005d40 <f_open>
 80036ba:	0003      	movs	r3, r0
 80036bc:	001a      	movs	r2, r3
 80036be:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <sd_openFile+0x60>)
 80036c0:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 80036c2:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <sd_openFile+0x60>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00f      	beq.n	80036ea <sd_openFile+0x52>
		print("Could not open '%s'", fileName);
 80036ca:	193a      	adds	r2, r7, r4
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <sd_openFile+0x64>)
 80036ce:	0011      	movs	r1, r2
 80036d0:	0018      	movs	r0, r3
 80036d2:	f7ff fbc7 	bl	8002e64 <print>
		print("f_open error (%i)\r\n", fres);
 80036d6:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <sd_openFile+0x60>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	001a      	movs	r2, r3
 80036dc:	4b08      	ldr	r3, [pc, #32]	; (8003700 <sd_openFile+0x68>)
 80036de:	0011      	movs	r1, r2
 80036e0:	0018      	movs	r0, r3
 80036e2:	f7ff fbbf 	bl	8002e64 <print>
		return 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	e000      	b.n	80036ec <sd_openFile+0x54>
	}
	return 1;
 80036ea:	2301      	movs	r3, #1
//	print("I was able to open '%s' for reading!\r\n", fileName);
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b00b      	add	sp, #44	; 0x2c
 80036f2:	bd90      	pop	{r4, r7, pc}
 80036f4:	20000604 	.word	0x20000604
 80036f8:	20000600 	.word	0x20000600
 80036fc:	08008ffc 	.word	0x08008ffc
 8003700:	08009010 	.word	0x08009010

08003704 <sd_closeFile>:
		print("f_open error (%i)\r\n", fres);
		return 0;
	}
}

void sd_closeFile() {
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
	f_close(&fil);
 8003708:	4b03      	ldr	r3, [pc, #12]	; (8003718 <sd_closeFile+0x14>)
 800370a:	0018      	movs	r0, r3
 800370c:	f003 f830 	bl	8006770 <f_close>
}
 8003710:	46c0      	nop			; (mov r8, r8)
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	20000604 	.word	0x20000604

0800371c <sd_read8bits>:

void sd_fileOffset(int n) {
	fres = f_lseek(&fil, n);
}

char sd_read8bits(char *c, int offset) {
 800371c:	b590      	push	{r4, r7, lr}
 800371e:	b08d      	sub	sp, #52	; 0x34
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
	BYTE fileName[30];
	strncpy((char*) fileName, c, 30);
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	230c      	movs	r3, #12
 800372a:	18fb      	adds	r3, r7, r3
 800372c:	221e      	movs	r2, #30
 800372e:	0018      	movs	r0, r3
 8003730:	f004 ff3a 	bl	80085a8 <strncpy>
	char data_buf[2];
	fres = f_lseek(&fil, offset);
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	4b14      	ldr	r3, [pc, #80]	; (8003788 <sd_read8bits+0x6c>)
 8003738:	0011      	movs	r1, r2
 800373a:	0018      	movs	r0, r3
 800373c:	f003 f850 	bl	80067e0 <f_lseek>
 8003740:	0003      	movs	r3, r0
 8003742:	001a      	movs	r2, r3
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <sd_read8bits+0x70>)
 8003746:	701a      	strb	r2, [r3, #0]

	TCHAR *rres = f_gets(data_buf, 2, &fil);
 8003748:	4a0f      	ldr	r2, [pc, #60]	; (8003788 <sd_read8bits+0x6c>)
 800374a:	2408      	movs	r4, #8
 800374c:	193b      	adds	r3, r7, r4
 800374e:	2102      	movs	r1, #2
 8003750:	0018      	movs	r0, r3
 8003752:	f003 fbd5 	bl	8006f00 <f_gets>
 8003756:	0003      	movs	r3, r0
 8003758:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (rres != 0) {
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <sd_read8bits+0x4a>
//		print("Read string from '%s' contents: %c\r\n", fileName, data_buf[0]);
//		print("Read string from '%s' contents: %c\r\n", fileName, data_buf[1]);
		return data_buf[0];
 8003760:	193b      	adds	r3, r7, r4
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	e00c      	b.n	8003780 <sd_read8bits+0x64>
	} else {
		print("Error in read8 --- ");
 8003766:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <sd_read8bits+0x74>)
 8003768:	0018      	movs	r0, r3
 800376a:	f7ff fb7b 	bl	8002e64 <print>
		print("f_gets error (%i)\r\n", fres);
 800376e:	4b07      	ldr	r3, [pc, #28]	; (800378c <sd_read8bits+0x70>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	001a      	movs	r2, r3
 8003774:	4b07      	ldr	r3, [pc, #28]	; (8003794 <sd_read8bits+0x78>)
 8003776:	0011      	movs	r1, r2
 8003778:	0018      	movs	r0, r3
 800377a:	f7ff fb73 	bl	8002e64 <print>
		return '\0';
 800377e:	2300      	movs	r3, #0
	}
}
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	b00d      	add	sp, #52	; 0x34
 8003786:	bd90      	pop	{r4, r7, pc}
 8003788:	20000604 	.word	0x20000604
 800378c:	20000600 	.word	0x20000600
 8003790:	08009024 	.word	0x08009024
 8003794:	08009038 	.word	0x08009038

08003798 <sd_read16bits>:
	data_buf = sd_read8bits(c, offset);
	sd_closeFile();
	return data_buf;
}

uint16_t sd_read16bits(char *c, int offset) {
 8003798:	b5b0      	push	{r4, r5, r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
	uint16_t result;
	((uint8_t*) &result)[0] = sd_read8bits(c, offset);
 80037a2:	250e      	movs	r5, #14
 80037a4:	197c      	adds	r4, r7, r5
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	0011      	movs	r1, r2
 80037ac:	0018      	movs	r0, r3
 80037ae:	f7ff ffb5 	bl	800371c <sd_read8bits>
 80037b2:	0003      	movs	r3, r0
 80037b4:	7023      	strb	r3, [r4, #0]
	((uint8_t*) &result)[1] = sd_read8bits(c, offset + 1);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	197c      	adds	r4, r7, r5
 80037bc:	3401      	adds	r4, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	0011      	movs	r1, r2
 80037c2:	0018      	movs	r0, r3
 80037c4:	f7ff ffaa 	bl	800371c <sd_read8bits>
 80037c8:	0003      	movs	r3, r0
 80037ca:	7023      	strb	r3, [r4, #0]
	return result;
 80037cc:	197b      	adds	r3, r7, r5
 80037ce:	881b      	ldrh	r3, [r3, #0]
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b004      	add	sp, #16
 80037d6:	bdb0      	pop	{r4, r5, r7, pc}

080037d8 <sd_read32bits>:
	result = sd_read24bits(c, offset);
	sd_closeFile();
	return result;
}

uint32_t sd_read32bits(char *c, int offset) {
 80037d8:	b5b0      	push	{r4, r5, r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
	uint32_t result;
	((uint8_t*) &result)[0] = sd_read8bits(c, offset);
 80037e2:	250c      	movs	r5, #12
 80037e4:	197c      	adds	r4, r7, r5
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	0011      	movs	r1, r2
 80037ec:	0018      	movs	r0, r3
 80037ee:	f7ff ff95 	bl	800371c <sd_read8bits>
 80037f2:	0003      	movs	r3, r0
 80037f4:	7023      	strb	r3, [r4, #0]
	((uint8_t*) &result)[1] = sd_read8bits(c, offset + 1);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	197c      	adds	r4, r7, r5
 80037fc:	3401      	adds	r4, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	0011      	movs	r1, r2
 8003802:	0018      	movs	r0, r3
 8003804:	f7ff ff8a 	bl	800371c <sd_read8bits>
 8003808:	0003      	movs	r3, r0
 800380a:	7023      	strb	r3, [r4, #0]
	((uint8_t*) &result)[2] = sd_read8bits(c, offset + 2);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	1c9a      	adds	r2, r3, #2
 8003810:	197c      	adds	r4, r7, r5
 8003812:	3402      	adds	r4, #2
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	0011      	movs	r1, r2
 8003818:	0018      	movs	r0, r3
 800381a:	f7ff ff7f 	bl	800371c <sd_read8bits>
 800381e:	0003      	movs	r3, r0
 8003820:	7023      	strb	r3, [r4, #0]
	((uint8_t*) &result)[3] = sd_read8bits(c, offset + 3);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	1cda      	adds	r2, r3, #3
 8003826:	197c      	adds	r4, r7, r5
 8003828:	3403      	adds	r4, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	0011      	movs	r1, r2
 800382e:	0018      	movs	r0, r3
 8003830:	f7ff ff74 	bl	800371c <sd_read8bits>
 8003834:	0003      	movs	r3, r0
 8003836:	7023      	strb	r3, [r4, #0]
	return result;
 8003838:	68fb      	ldr	r3, [r7, #12]
}
 800383a:	0018      	movs	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	b004      	add	sp, #16
 8003840:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003844 <sd_readFile>:

	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
}

void sd_readFile(char *c) {
 8003844:	b590      	push	{r4, r7, lr}
 8003846:	b08d      	sub	sp, #52	; 0x34
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
	//Now let's try to open file "test.txt"
	sd_openFile(c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	0018      	movs	r0, r3
 8003850:	f7ff ff22 	bl	8003698 <sd_openFile>
	BYTE fileName[30];
	strncpy((char*) fileName, c, 30);
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	240c      	movs	r4, #12
 8003858:	193b      	adds	r3, r7, r4
 800385a:	221e      	movs	r2, #30
 800385c:	0018      	movs	r0, r3
 800385e:	f004 fea3 	bl	80085a8 <strncpy>
	//We can either use f_read OR f_gets to get data out of files
	//f_gets is a wrapper on f_read that does some string formatting for us
	TCHAR *rres = f_gets((TCHAR*) readBuf, sizeof(readBuf), &fil);
 8003862:	4a11      	ldr	r2, [pc, #68]	; (80038a8 <sd_readFile+0x64>)
 8003864:	4b11      	ldr	r3, [pc, #68]	; (80038ac <sd_readFile+0x68>)
 8003866:	2164      	movs	r1, #100	; 0x64
 8003868:	0018      	movs	r0, r3
 800386a:	f003 fb49 	bl	8006f00 <f_gets>
 800386e:	0003      	movs	r3, r0
 8003870:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (rres != 0) {
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d006      	beq.n	8003886 <sd_readFile+0x42>
		print("Read string from '%s' contents: %s\r\n", fileName, readBuf);
 8003878:	4a0c      	ldr	r2, [pc, #48]	; (80038ac <sd_readFile+0x68>)
 800387a:	1939      	adds	r1, r7, r4
 800387c:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <sd_readFile+0x6c>)
 800387e:	0018      	movs	r0, r3
 8003880:	f7ff faf0 	bl	8002e64 <print>
 8003884:	e007      	b.n	8003896 <sd_readFile+0x52>
	} else {
		print("f_gets error (%i)\r\n", fres);
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <sd_readFile+0x70>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	001a      	movs	r2, r3
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <sd_readFile+0x74>)
 800388e:	0011      	movs	r1, r2
 8003890:	0018      	movs	r0, r3
 8003892:	f7ff fae7 	bl	8002e64 <print>
	}

	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 8003896:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <sd_readFile+0x64>)
 8003898:	0018      	movs	r0, r3
 800389a:	f002 ff69 	bl	8006770 <f_close>
}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b00d      	add	sp, #52	; 0x34
 80038a4:	bd90      	pop	{r4, r7, pc}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	20000604 	.word	0x20000604
 80038ac:	20000830 	.word	0x20000830
 80038b0:	08009084 	.word	0x08009084
 80038b4:	20000600 	.word	0x20000600
 80038b8:	08009038 	.word	0x08009038

080038bc <sd_deMount>:

	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
}

void sd_deMount() {
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
	//We're done, so de-mount the drive
	f_mount(NULL, "", 0);
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <sd_deMount+0x18>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	0019      	movs	r1, r3
 80038c6:	2000      	movs	r0, #0
 80038c8:	f002 f9ea 	bl	8005ca0 <f_mount>
}
 80038cc:	46c0      	nop			; (mov r8, r8)
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	08008f44 	.word	0x08008f44

080038d8 <getBMPImageData>:
	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);

}

void getBMPImageData(char *file) {
 80038d8:	b5b0      	push	{r4, r5, r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	uint16_t result16;
	uint32_t result32;
	int offset = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
//	char file[] = "miniwoof.bmp";
	sd_openFile(file);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	0018      	movs	r0, r3
 80038e8:	f7ff fed6 	bl	8003698 <sd_openFile>
	result16 = sd_read16bits(file, offset);
 80038ec:	2512      	movs	r5, #18
 80038ee:	197c      	adds	r4, r7, r5
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	0011      	movs	r1, r2
 80038f6:	0018      	movs	r0, r3
 80038f8:	f7ff ff4e 	bl	8003798 <sd_read16bits>
 80038fc:	0003      	movs	r3, r0
 80038fe:	8023      	strh	r3, [r4, #0]
	print("Identifier: %x\n", result16);
 8003900:	002c      	movs	r4, r5
 8003902:	193b      	adds	r3, r7, r4
 8003904:	881a      	ldrh	r2, [r3, #0]
 8003906:	4b8c      	ldr	r3, [pc, #560]	; (8003b38 <getBMPImageData+0x260>)
 8003908:	0011      	movs	r1, r2
 800390a:	0018      	movs	r0, r3
 800390c:	f7ff faaa 	bl	8002e64 <print>
	offset += 2;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	3302      	adds	r3, #2
 8003914:	617b      	str	r3, [r7, #20]
	result32 = sd_read32bits(file, offset);
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	0011      	movs	r1, r2
 800391c:	0018      	movs	r0, r3
 800391e:	f7ff ff5b 	bl	80037d8 <sd_read32bits>
 8003922:	0003      	movs	r3, r0
 8003924:	60fb      	str	r3, [r7, #12]
	print("Size: %x\n", result32);
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4b84      	ldr	r3, [pc, #528]	; (8003b3c <getBMPImageData+0x264>)
 800392a:	0011      	movs	r1, r2
 800392c:	0018      	movs	r0, r3
 800392e:	f7ff fa99 	bl	8002e64 <print>
	offset += 4;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	3304      	adds	r3, #4
 8003936:	617b      	str	r3, [r7, #20]
	result16 = sd_read16bits(file, offset);
 8003938:	0025      	movs	r5, r4
 800393a:	197c      	adds	r4, r7, r5
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	0011      	movs	r1, r2
 8003942:	0018      	movs	r0, r3
 8003944:	f7ff ff28 	bl	8003798 <sd_read16bits>
 8003948:	0003      	movs	r3, r0
 800394a:	8023      	strh	r3, [r4, #0]
	print("reserverd: %x\n", result16);
 800394c:	197b      	adds	r3, r7, r5
 800394e:	881a      	ldrh	r2, [r3, #0]
 8003950:	4b7b      	ldr	r3, [pc, #492]	; (8003b40 <getBMPImageData+0x268>)
 8003952:	0011      	movs	r1, r2
 8003954:	0018      	movs	r0, r3
 8003956:	f7ff fa85 	bl	8002e64 <print>
	offset += 2;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	3302      	adds	r3, #2
 800395e:	617b      	str	r3, [r7, #20]
	result16 = sd_read16bits(file, offset);
 8003960:	197c      	adds	r4, r7, r5
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	0011      	movs	r1, r2
 8003968:	0018      	movs	r0, r3
 800396a:	f7ff ff15 	bl	8003798 <sd_read16bits>
 800396e:	0003      	movs	r3, r0
 8003970:	8023      	strh	r3, [r4, #0]
	print("reserved: %x\n", result16);
 8003972:	002c      	movs	r4, r5
 8003974:	193b      	adds	r3, r7, r4
 8003976:	881a      	ldrh	r2, [r3, #0]
 8003978:	4b72      	ldr	r3, [pc, #456]	; (8003b44 <getBMPImageData+0x26c>)
 800397a:	0011      	movs	r1, r2
 800397c:	0018      	movs	r0, r3
 800397e:	f7ff fa71 	bl	8002e64 <print>
	offset += 2;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	3302      	adds	r3, #2
 8003986:	617b      	str	r3, [r7, #20]
	result32 = sd_read32bits(file, offset);
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	0011      	movs	r1, r2
 800398e:	0018      	movs	r0, r3
 8003990:	f7ff ff22 	bl	80037d8 <sd_read32bits>
 8003994:	0003      	movs	r3, r0
 8003996:	60fb      	str	r3, [r7, #12]
	print("Offset: %x\n", result32);
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4b6b      	ldr	r3, [pc, #428]	; (8003b48 <getBMPImageData+0x270>)
 800399c:	0011      	movs	r1, r2
 800399e:	0018      	movs	r0, r3
 80039a0:	f7ff fa60 	bl	8002e64 <print>
	offset += 4;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	3304      	adds	r3, #4
 80039a8:	617b      	str	r3, [r7, #20]
	result32 = sd_read32bits(file, offset);
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	0011      	movs	r1, r2
 80039b0:	0018      	movs	r0, r3
 80039b2:	f7ff ff11 	bl	80037d8 <sd_read32bits>
 80039b6:	0003      	movs	r3, r0
 80039b8:	60fb      	str	r3, [r7, #12]
	print("Header Size: %x\n", result32);
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4b63      	ldr	r3, [pc, #396]	; (8003b4c <getBMPImageData+0x274>)
 80039be:	0011      	movs	r1, r2
 80039c0:	0018      	movs	r0, r3
 80039c2:	f7ff fa4f 	bl	8002e64 <print>
	offset += 4;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	3304      	adds	r3, #4
 80039ca:	617b      	str	r3, [r7, #20]
	result32 = sd_read32bits(file, offset);
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	0011      	movs	r1, r2
 80039d2:	0018      	movs	r0, r3
 80039d4:	f7ff ff00 	bl	80037d8 <sd_read32bits>
 80039d8:	0003      	movs	r3, r0
 80039da:	60fb      	str	r3, [r7, #12]
	print("Width_px: %x\n", result32);
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4b5c      	ldr	r3, [pc, #368]	; (8003b50 <getBMPImageData+0x278>)
 80039e0:	0011      	movs	r1, r2
 80039e2:	0018      	movs	r0, r3
 80039e4:	f7ff fa3e 	bl	8002e64 <print>
	offset += 4;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	3304      	adds	r3, #4
 80039ec:	617b      	str	r3, [r7, #20]
	result32 = sd_read32bits(file, offset);
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	0011      	movs	r1, r2
 80039f4:	0018      	movs	r0, r3
 80039f6:	f7ff feef 	bl	80037d8 <sd_read32bits>
 80039fa:	0003      	movs	r3, r0
 80039fc:	60fb      	str	r3, [r7, #12]
	print("Height_px: %x\n", result32);
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4b54      	ldr	r3, [pc, #336]	; (8003b54 <getBMPImageData+0x27c>)
 8003a02:	0011      	movs	r1, r2
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7ff fa2d 	bl	8002e64 <print>
	offset += 4;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	617b      	str	r3, [r7, #20]
	result16 = sd_read16bits(file, offset);
 8003a10:	0025      	movs	r5, r4
 8003a12:	197c      	adds	r4, r7, r5
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	0011      	movs	r1, r2
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f7ff febc 	bl	8003798 <sd_read16bits>
 8003a20:	0003      	movs	r3, r0
 8003a22:	8023      	strh	r3, [r4, #0]
	print("No. of Color Planes: %x\n", result16);
 8003a24:	197b      	adds	r3, r7, r5
 8003a26:	881a      	ldrh	r2, [r3, #0]
 8003a28:	4b4b      	ldr	r3, [pc, #300]	; (8003b58 <getBMPImageData+0x280>)
 8003a2a:	0011      	movs	r1, r2
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f7ff fa19 	bl	8002e64 <print>
	offset += 2;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	3302      	adds	r3, #2
 8003a36:	617b      	str	r3, [r7, #20]
	result16 = sd_read16bits(file, offset);
 8003a38:	197c      	adds	r4, r7, r5
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	0011      	movs	r1, r2
 8003a40:	0018      	movs	r0, r3
 8003a42:	f7ff fea9 	bl	8003798 <sd_read16bits>
 8003a46:	0003      	movs	r3, r0
 8003a48:	8023      	strh	r3, [r4, #0]
	print("Bits per pixel: %x\n", result16);
 8003a4a:	197b      	adds	r3, r7, r5
 8003a4c:	881a      	ldrh	r2, [r3, #0]
 8003a4e:	4b43      	ldr	r3, [pc, #268]	; (8003b5c <getBMPImageData+0x284>)
 8003a50:	0011      	movs	r1, r2
 8003a52:	0018      	movs	r0, r3
 8003a54:	f7ff fa06 	bl	8002e64 <print>
	offset += 2;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	617b      	str	r3, [r7, #20]
	result32 = sd_read32bits(file, offset);
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	0011      	movs	r1, r2
 8003a64:	0018      	movs	r0, r3
 8003a66:	f7ff feb7 	bl	80037d8 <sd_read32bits>
 8003a6a:	0003      	movs	r3, r0
 8003a6c:	60fb      	str	r3, [r7, #12]
	print("Compression: %x\n", result32);
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4b3b      	ldr	r3, [pc, #236]	; (8003b60 <getBMPImageData+0x288>)
 8003a72:	0011      	movs	r1, r2
 8003a74:	0018      	movs	r0, r3
 8003a76:	f7ff f9f5 	bl	8002e64 <print>
	offset += 4;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	617b      	str	r3, [r7, #20]
	result32 = sd_read32bits(file, offset);
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	0011      	movs	r1, r2
 8003a86:	0018      	movs	r0, r3
 8003a88:	f7ff fea6 	bl	80037d8 <sd_read32bits>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	60fb      	str	r3, [r7, #12]
	print("Image size(bytes): %x\n", result32);
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4b34      	ldr	r3, [pc, #208]	; (8003b64 <getBMPImageData+0x28c>)
 8003a94:	0011      	movs	r1, r2
 8003a96:	0018      	movs	r0, r3
 8003a98:	f7ff f9e4 	bl	8002e64 <print>
	offset += 4;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	617b      	str	r3, [r7, #20]
	result32 = sd_read32bits(file, offset);
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	0011      	movs	r1, r2
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f7ff fe95 	bl	80037d8 <sd_read32bits>
 8003aae:	0003      	movs	r3, r0
 8003ab0:	60fb      	str	r3, [r7, #12]
	print("X resolution(PPM): %x\n", result32);
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4b2c      	ldr	r3, [pc, #176]	; (8003b68 <getBMPImageData+0x290>)
 8003ab6:	0011      	movs	r1, r2
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f7ff f9d3 	bl	8002e64 <print>
	offset += 4;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	617b      	str	r3, [r7, #20]
	result32 = sd_read32bits(file, offset);
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	0011      	movs	r1, r2
 8003aca:	0018      	movs	r0, r3
 8003acc:	f7ff fe84 	bl	80037d8 <sd_read32bits>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	60fb      	str	r3, [r7, #12]
	print("Y resolution(PPM): %x\n", result32);
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <getBMPImageData+0x294>)
 8003ad8:	0011      	movs	r1, r2
 8003ada:	0018      	movs	r0, r3
 8003adc:	f7ff f9c2 	bl	8002e64 <print>
	offset += 4;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	617b      	str	r3, [r7, #20]
	result32 = sd_read32bits(file, offset);
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	0011      	movs	r1, r2
 8003aec:	0018      	movs	r0, r3
 8003aee:	f7ff fe73 	bl	80037d8 <sd_read32bits>
 8003af2:	0003      	movs	r3, r0
 8003af4:	60fb      	str	r3, [r7, #12]
	print("No. of colors: %x\n", result32);
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <getBMPImageData+0x298>)
 8003afa:	0011      	movs	r1, r2
 8003afc:	0018      	movs	r0, r3
 8003afe:	f7ff f9b1 	bl	8002e64 <print>
	offset += 4;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	3304      	adds	r3, #4
 8003b06:	617b      	str	r3, [r7, #20]
	result32 = sd_read32bits(file, offset);
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	0011      	movs	r1, r2
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f7ff fe62 	bl	80037d8 <sd_read32bits>
 8003b14:	0003      	movs	r3, r0
 8003b16:	60fb      	str	r3, [r7, #12]
	print("Important colors: %x\n", result32);
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4b16      	ldr	r3, [pc, #88]	; (8003b74 <getBMPImageData+0x29c>)
 8003b1c:	0011      	movs	r1, r2
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f7ff f9a0 	bl	8002e64 <print>
	offset += 4;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	3304      	adds	r3, #4
 8003b28:	617b      	str	r3, [r7, #20]
	sd_closeFile();
 8003b2a:	f7ff fdeb 	bl	8003704 <sd_closeFile>
}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	46bd      	mov	sp, r7
 8003b32:	b006      	add	sp, #24
 8003b34:	bdb0      	pop	{r4, r5, r7, pc}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	08009170 	.word	0x08009170
 8003b3c:	08009180 	.word	0x08009180
 8003b40:	0800918c 	.word	0x0800918c
 8003b44:	0800919c 	.word	0x0800919c
 8003b48:	080091ac 	.word	0x080091ac
 8003b4c:	080091b8 	.word	0x080091b8
 8003b50:	080091cc 	.word	0x080091cc
 8003b54:	080091dc 	.word	0x080091dc
 8003b58:	080091ec 	.word	0x080091ec
 8003b5c:	08009208 	.word	0x08009208
 8003b60:	0800921c 	.word	0x0800921c
 8003b64:	08009230 	.word	0x08009230
 8003b68:	08009248 	.word	0x08009248
 8003b6c:	08009260 	.word	0x08009260
 8003b70:	08009278 	.word	0x08009278
 8003b74:	0800928c 	.word	0x0800928c

08003b78 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003b78:	b5b0      	push	{r4, r5, r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	0002      	movs	r2, r0
 8003b80:	1dfb      	adds	r3, r7, #7
 8003b82:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003b84:	1dfb      	adds	r3, r7, #7
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	4a0b      	ldr	r2, [pc, #44]	; (8003bb8 <disk_status+0x40>)
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	18d3      	adds	r3, r2, r3
 8003b8e:	3304      	adds	r3, #4
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	1dfa      	adds	r2, r7, #7
 8003b96:	7812      	ldrb	r2, [r2, #0]
 8003b98:	4907      	ldr	r1, [pc, #28]	; (8003bb8 <disk_status+0x40>)
 8003b9a:	188a      	adds	r2, r1, r2
 8003b9c:	7a12      	ldrb	r2, [r2, #8]
 8003b9e:	250f      	movs	r5, #15
 8003ba0:	197c      	adds	r4, r7, r5
 8003ba2:	0010      	movs	r0, r2
 8003ba4:	4798      	blx	r3
 8003ba6:	0003      	movs	r3, r0
 8003ba8:	7023      	strb	r3, [r4, #0]
  return stat;
 8003baa:	197b      	adds	r3, r7, r5
 8003bac:	781b      	ldrb	r3, [r3, #0]
}
 8003bae:	0018      	movs	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	b004      	add	sp, #16
 8003bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	20000210 	.word	0x20000210

08003bbc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003bbc:	b590      	push	{r4, r7, lr}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	0002      	movs	r2, r0
 8003bc4:	1dfb      	adds	r3, r7, #7
 8003bc6:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8003bc8:	200f      	movs	r0, #15
 8003bca:	183b      	adds	r3, r7, r0
 8003bcc:	2200      	movs	r2, #0
 8003bce:	701a      	strb	r2, [r3, #0]
  
  if(disk.is_initialized[pdrv] == 0)
 8003bd0:	1dfb      	adds	r3, r7, #7
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	4a10      	ldr	r2, [pc, #64]	; (8003c18 <disk_initialize+0x5c>)
 8003bd6:	5cd3      	ldrb	r3, [r2, r3]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d116      	bne.n	8003c0a <disk_initialize+0x4e>
  { 
    disk.is_initialized[pdrv] = 1;
 8003bdc:	1dfb      	adds	r3, r7, #7
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	4a0d      	ldr	r2, [pc, #52]	; (8003c18 <disk_initialize+0x5c>)
 8003be2:	2101      	movs	r1, #1
 8003be4:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003be6:	1dfb      	adds	r3, r7, #7
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	4a0b      	ldr	r2, [pc, #44]	; (8003c18 <disk_initialize+0x5c>)
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	18d3      	adds	r3, r2, r3
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	1dfa      	adds	r2, r7, #7
 8003bf8:	7812      	ldrb	r2, [r2, #0]
 8003bfa:	4907      	ldr	r1, [pc, #28]	; (8003c18 <disk_initialize+0x5c>)
 8003bfc:	188a      	adds	r2, r1, r2
 8003bfe:	7a12      	ldrb	r2, [r2, #8]
 8003c00:	183c      	adds	r4, r7, r0
 8003c02:	0010      	movs	r0, r2
 8003c04:	4798      	blx	r3
 8003c06:	0003      	movs	r3, r0
 8003c08:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8003c0a:	230f      	movs	r3, #15
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	781b      	ldrb	r3, [r3, #0]
}
 8003c10:	0018      	movs	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b005      	add	sp, #20
 8003c16:	bd90      	pop	{r4, r7, pc}
 8003c18:	20000210 	.word	0x20000210

08003c1c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	607a      	str	r2, [r7, #4]
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	210f      	movs	r1, #15
 8003c2a:	187b      	adds	r3, r7, r1
 8003c2c:	1c02      	adds	r2, r0, #0
 8003c2e:	701a      	strb	r2, [r3, #0]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003c30:	187b      	adds	r3, r7, r1
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <disk_read+0x4c>)
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	18d3      	adds	r3, r2, r3
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689d      	ldr	r5, [r3, #8]
 8003c40:	187b      	adds	r3, r7, r1
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	4a08      	ldr	r2, [pc, #32]	; (8003c68 <disk_read+0x4c>)
 8003c46:	18d3      	adds	r3, r2, r3
 8003c48:	7a18      	ldrb	r0, [r3, #8]
 8003c4a:	2617      	movs	r6, #23
 8003c4c:	19bc      	adds	r4, r7, r6
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	47a8      	blx	r5
 8003c56:	0003      	movs	r3, r0
 8003c58:	7023      	strb	r3, [r4, #0]
  return res;
 8003c5a:	19bb      	adds	r3, r7, r6
 8003c5c:	781b      	ldrb	r3, [r3, #0]
}
 8003c5e:	0018      	movs	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b007      	add	sp, #28
 8003c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	20000210 	.word	0x20000210

08003c6c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	210f      	movs	r1, #15
 8003c7a:	187b      	adds	r3, r7, r1
 8003c7c:	1c02      	adds	r2, r0, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003c80:	187b      	adds	r3, r7, r1
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	4a0c      	ldr	r2, [pc, #48]	; (8003cb8 <disk_write+0x4c>)
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	18d3      	adds	r3, r2, r3
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68dd      	ldr	r5, [r3, #12]
 8003c90:	187b      	adds	r3, r7, r1
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	4a08      	ldr	r2, [pc, #32]	; (8003cb8 <disk_write+0x4c>)
 8003c96:	18d3      	adds	r3, r2, r3
 8003c98:	7a18      	ldrb	r0, [r3, #8]
 8003c9a:	2617      	movs	r6, #23
 8003c9c:	19bc      	adds	r4, r7, r6
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	47a8      	blx	r5
 8003ca6:	0003      	movs	r3, r0
 8003ca8:	7023      	strb	r3, [r4, #0]
  return res;
 8003caa:	19bb      	adds	r3, r7, r6
 8003cac:	781b      	ldrb	r3, [r3, #0]
}
 8003cae:	0018      	movs	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b007      	add	sp, #28
 8003cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	20000210 	.word	0x20000210

08003cbc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	603a      	str	r2, [r7, #0]
 8003cc4:	1dfb      	adds	r3, r7, #7
 8003cc6:	1c02      	adds	r2, r0, #0
 8003cc8:	701a      	strb	r2, [r3, #0]
 8003cca:	1dbb      	adds	r3, r7, #6
 8003ccc:	1c0a      	adds	r2, r1, #0
 8003cce:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003cd0:	1dfb      	adds	r3, r7, #7
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	4a0c      	ldr	r2, [pc, #48]	; (8003d08 <disk_ioctl+0x4c>)
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	18d3      	adds	r3, r2, r3
 8003cda:	3304      	adds	r3, #4
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	1dfa      	adds	r2, r7, #7
 8003ce2:	7812      	ldrb	r2, [r2, #0]
 8003ce4:	4908      	ldr	r1, [pc, #32]	; (8003d08 <disk_ioctl+0x4c>)
 8003ce6:	188a      	adds	r2, r1, r2
 8003ce8:	7a10      	ldrb	r0, [r2, #8]
 8003cea:	260f      	movs	r6, #15
 8003cec:	19bc      	adds	r4, r7, r6
 8003cee:	683d      	ldr	r5, [r7, #0]
 8003cf0:	1dba      	adds	r2, r7, #6
 8003cf2:	7811      	ldrb	r1, [r2, #0]
 8003cf4:	002a      	movs	r2, r5
 8003cf6:	4798      	blx	r3
 8003cf8:	0003      	movs	r3, r0
 8003cfa:	7023      	strb	r3, [r4, #0]
  return res;
 8003cfc:	19bb      	adds	r3, r7, r6
 8003cfe:	781b      	ldrb	r3, [r3, #0]
}
 8003d00:	0018      	movs	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b005      	add	sp, #20
 8003d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d08:	20000210 	.word	0x20000210

08003d0c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003d20:	e007      	b.n	8003d32 <mem_cpy+0x26>
		*d++ = *s++;
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	1c53      	adds	r3, r2, #1
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	1c59      	adds	r1, r3, #1
 8003d2c:	6179      	str	r1, [r7, #20]
 8003d2e:	7812      	ldrb	r2, [r2, #0]
 8003d30:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	1e5a      	subs	r2, r3, #1
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f2      	bne.n	8003d22 <mem_cpy+0x16>
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b006      	add	sp, #24
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b086      	sub	sp, #24
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003d56:	e005      	b.n	8003d64 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	617a      	str	r2, [r7, #20]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	1e5a      	subs	r2, r3, #1
 8003d68:	607a      	str	r2, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f4      	bne.n	8003d58 <mem_set+0x12>
}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	46c0      	nop			; (mov r8, r8)
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b006      	add	sp, #24
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	61fb      	str	r3, [r7, #28]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003d90:	46c0      	nop			; (mov r8, r8)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	1e5a      	subs	r2, r3, #1
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00d      	beq.n	8003db8 <mem_cmp+0x40>
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	61fa      	str	r2, [r7, #28]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	0019      	movs	r1, r3
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	61ba      	str	r2, [r7, #24]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	1acb      	subs	r3, r1, r3
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0ec      	beq.n	8003d92 <mem_cmp+0x1a>
	return r;
 8003db8:	697b      	ldr	r3, [r7, #20]
}
 8003dba:	0018      	movs	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b008      	add	sp, #32
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003dcc:	e002      	b.n	8003dd4 <chk_chr+0x12>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	607b      	str	r3, [r7, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <chk_chr+0x26>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	001a      	movs	r2, r3
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d1f2      	bne.n	8003dce <chk_chr+0xc>
	return *str;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	781b      	ldrb	r3, [r3, #0]
}
 8003dec:	0018      	movs	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b002      	add	sp, #8
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	e038      	b.n	8003e7a <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8003e08:	492f      	ldr	r1, [pc, #188]	; (8003ec8 <chk_lock+0xd4>)
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	0013      	movs	r3, r2
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	189b      	adds	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	585b      	ldr	r3, [r3, r1]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d02a      	beq.n	8003e70 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003e1a:	492b      	ldr	r1, [pc, #172]	; (8003ec8 <chk_lock+0xd4>)
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	0013      	movs	r3, r2
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	189b      	adds	r3, r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	585a      	ldr	r2, [r3, r1]
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	2380      	movs	r3, #128	; 0x80
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	58cb      	ldr	r3, [r1, r3]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d11f      	bne.n	8003e74 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8003e34:	4924      	ldr	r1, [pc, #144]	; (8003ec8 <chk_lock+0xd4>)
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	0013      	movs	r3, r2
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	189b      	adds	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	18cb      	adds	r3, r1, r3
 8003e42:	3304      	adds	r3, #4
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	2382      	movs	r3, #130	; 0x82
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	58cb      	ldr	r3, [r1, r3]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d110      	bne.n	8003e74 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8003e52:	491d      	ldr	r1, [pc, #116]	; (8003ec8 <chk_lock+0xd4>)
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	0013      	movs	r3, r2
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	189b      	adds	r3, r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	18cb      	adds	r3, r1, r3
 8003e60:	3308      	adds	r3, #8
 8003e62:	881a      	ldrh	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4919      	ldr	r1, [pc, #100]	; (8003ecc <chk_lock+0xd8>)
 8003e68:	5a5b      	ldrh	r3, [r3, r1]
				Files[i].clu == dp->sclust &&
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d102      	bne.n	8003e74 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8003e6e:	e007      	b.n	8003e80 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8003e70:	2301      	movs	r3, #1
 8003e72:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3301      	adds	r3, #1
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d9c3      	bls.n	8003e08 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d109      	bne.n	8003e9a <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d102      	bne.n	8003e92 <chk_lock+0x9e>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d101      	bne.n	8003e96 <chk_lock+0xa2>
 8003e92:	2300      	movs	r3, #0
 8003e94:	e014      	b.n	8003ec0 <chk_lock+0xcc>
 8003e96:	2312      	movs	r3, #18
 8003e98:	e012      	b.n	8003ec0 <chk_lock+0xcc>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10c      	bne.n	8003eba <chk_lock+0xc6>
 8003ea0:	4909      	ldr	r1, [pc, #36]	; (8003ec8 <chk_lock+0xd4>)
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	0013      	movs	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	189b      	adds	r3, r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	18cb      	adds	r3, r1, r3
 8003eae:	330a      	adds	r3, #10
 8003eb0:	881a      	ldrh	r2, [r3, #0]
 8003eb2:	2380      	movs	r3, #128	; 0x80
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d101      	bne.n	8003ebe <chk_lock+0xca>
 8003eba:	2310      	movs	r3, #16
 8003ebc:	e000      	b.n	8003ec0 <chk_lock+0xcc>
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b004      	add	sp, #16
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	200001f8 	.word	0x200001f8
 8003ecc:	00000206 	.word	0x00000206

08003ed0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	607b      	str	r3, [r7, #4]
 8003eda:	e002      	b.n	8003ee2 <enq_lock+0x12>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	607b      	str	r3, [r7, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d808      	bhi.n	8003efa <enq_lock+0x2a>
 8003ee8:	4908      	ldr	r1, [pc, #32]	; (8003f0c <enq_lock+0x3c>)
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	0013      	movs	r3, r2
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	189b      	adds	r3, r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	585b      	ldr	r3, [r3, r1]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3b02      	subs	r3, #2
 8003efe:	1e5a      	subs	r2, r3, #1
 8003f00:	4193      	sbcs	r3, r2
 8003f02:	b2db      	uxtb	r3, r3
}
 8003f04:	0018      	movs	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b002      	add	sp, #8
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	200001f8 	.word	0x200001f8

08003f10 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	e02c      	b.n	8003f7a <inc_lock+0x6a>
		if (Files[i].fs == dp->fs &&
 8003f20:	4955      	ldr	r1, [pc, #340]	; (8004078 <inc_lock+0x168>)
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	0013      	movs	r3, r2
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	189b      	adds	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	585a      	ldr	r2, [r3, r1]
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	2380      	movs	r3, #128	; 0x80
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	58cb      	ldr	r3, [r1, r3]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d11c      	bne.n	8003f74 <inc_lock+0x64>
			Files[i].clu == dp->sclust &&
 8003f3a:	494f      	ldr	r1, [pc, #316]	; (8004078 <inc_lock+0x168>)
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	0013      	movs	r3, r2
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	189b      	adds	r3, r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	18cb      	adds	r3, r1, r3
 8003f48:	3304      	adds	r3, #4
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	2382      	movs	r3, #130	; 0x82
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	58cb      	ldr	r3, [r1, r3]
		if (Files[i].fs == dp->fs &&
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d10d      	bne.n	8003f74 <inc_lock+0x64>
			Files[i].idx == dp->index) break;
 8003f58:	4947      	ldr	r1, [pc, #284]	; (8004078 <inc_lock+0x168>)
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	0013      	movs	r3, r2
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	189b      	adds	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	18cb      	adds	r3, r1, r3
 8003f66:	3308      	adds	r3, #8
 8003f68:	881a      	ldrh	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4943      	ldr	r1, [pc, #268]	; (800407c <inc_lock+0x16c>)
 8003f6e:	5a5b      	ldrh	r3, [r3, r1]
			Files[i].clu == dp->sclust &&
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d006      	beq.n	8003f82 <inc_lock+0x72>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3301      	adds	r3, #1
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d9cf      	bls.n	8003f20 <inc_lock+0x10>
 8003f80:	e000      	b.n	8003f84 <inc_lock+0x74>
			Files[i].idx == dp->index) break;
 8003f82:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d145      	bne.n	8004016 <inc_lock+0x106>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	e002      	b.n	8003f96 <inc_lock+0x86>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3301      	adds	r3, #1
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d808      	bhi.n	8003fae <inc_lock+0x9e>
 8003f9c:	4936      	ldr	r1, [pc, #216]	; (8004078 <inc_lock+0x168>)
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	0013      	movs	r3, r2
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	189b      	adds	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	585b      	ldr	r3, [r3, r1]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <inc_lock+0x80>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d101      	bne.n	8003fb8 <inc_lock+0xa8>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e05a      	b.n	800406e <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	2380      	movs	r3, #128	; 0x80
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	58d0      	ldr	r0, [r2, r3]
 8003fc0:	492d      	ldr	r1, [pc, #180]	; (8004078 <inc_lock+0x168>)
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	0013      	movs	r3, r2
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	189b      	adds	r3, r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	5058      	str	r0, [r3, r1]
		Files[i].clu = dp->sclust;
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	2382      	movs	r3, #130	; 0x82
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	58d1      	ldr	r1, [r2, r3]
 8003fd6:	4828      	ldr	r0, [pc, #160]	; (8004078 <inc_lock+0x168>)
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	0013      	movs	r3, r2
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	189b      	adds	r3, r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	18c3      	adds	r3, r0, r3
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a24      	ldr	r2, [pc, #144]	; (800407c <inc_lock+0x16c>)
 8003fec:	5a98      	ldrh	r0, [r3, r2]
 8003fee:	4922      	ldr	r1, [pc, #136]	; (8004078 <inc_lock+0x168>)
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	0013      	movs	r3, r2
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	189b      	adds	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	18cb      	adds	r3, r1, r3
 8003ffc:	3308      	adds	r3, #8
 8003ffe:	1c02      	adds	r2, r0, #0
 8004000:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8004002:	491d      	ldr	r1, [pc, #116]	; (8004078 <inc_lock+0x168>)
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	0013      	movs	r3, r2
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	189b      	adds	r3, r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	18cb      	adds	r3, r1, r3
 8004010:	330a      	adds	r3, #10
 8004012:	2200      	movs	r2, #0
 8004014:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00c      	beq.n	8004036 <inc_lock+0x126>
 800401c:	4916      	ldr	r1, [pc, #88]	; (8004078 <inc_lock+0x168>)
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	0013      	movs	r3, r2
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	189b      	adds	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	18cb      	adds	r3, r1, r3
 800402a:	330a      	adds	r3, #10
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <inc_lock+0x126>
 8004032:	2300      	movs	r3, #0
 8004034:	e01b      	b.n	800406e <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10b      	bne.n	8004054 <inc_lock+0x144>
 800403c:	490e      	ldr	r1, [pc, #56]	; (8004078 <inc_lock+0x168>)
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	0013      	movs	r3, r2
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	189b      	adds	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	18cb      	adds	r3, r1, r3
 800404a:	330a      	adds	r3, #10
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	3301      	adds	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	e001      	b.n	8004058 <inc_lock+0x148>
 8004054:	2380      	movs	r3, #128	; 0x80
 8004056:	005a      	lsls	r2, r3, #1
 8004058:	4807      	ldr	r0, [pc, #28]	; (8004078 <inc_lock+0x168>)
 800405a:	68f9      	ldr	r1, [r7, #12]
 800405c:	000b      	movs	r3, r1
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	185b      	adds	r3, r3, r1
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	18c3      	adds	r3, r0, r3
 8004066:	330a      	adds	r3, #10
 8004068:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3301      	adds	r3, #1
}
 800406e:	0018      	movs	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	b004      	add	sp, #16
 8004074:	bd80      	pop	{r7, pc}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	200001f8 	.word	0x200001f8
 800407c:	00000206 	.word	0x00000206

08004080 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3b01      	subs	r3, #1
 800408c:	607b      	str	r3, [r7, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d83b      	bhi.n	800410c <dec_lock+0x8c>
		n = Files[i].ctr;
 8004094:	240e      	movs	r4, #14
 8004096:	1939      	adds	r1, r7, r4
 8004098:	4822      	ldr	r0, [pc, #136]	; (8004124 <dec_lock+0xa4>)
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	0013      	movs	r3, r2
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	189b      	adds	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	18c3      	adds	r3, r0, r3
 80040a6:	330a      	adds	r3, #10
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	800b      	strh	r3, [r1, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80040ac:	193b      	adds	r3, r7, r4
 80040ae:	881a      	ldrh	r2, [r3, #0]
 80040b0:	2380      	movs	r3, #128	; 0x80
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d102      	bne.n	80040be <dec_lock+0x3e>
 80040b8:	193b      	adds	r3, r7, r4
 80040ba:	2200      	movs	r2, #0
 80040bc:	801a      	strh	r2, [r3, #0]
		if (n) n--;					/* Decrement read mode open count */
 80040be:	210e      	movs	r1, #14
 80040c0:	187b      	adds	r3, r7, r1
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d004      	beq.n	80040d2 <dec_lock+0x52>
 80040c8:	187b      	adds	r3, r7, r1
 80040ca:	881a      	ldrh	r2, [r3, #0]
 80040cc:	187b      	adds	r3, r7, r1
 80040ce:	3a01      	subs	r2, #1
 80040d0:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 80040d2:	4914      	ldr	r1, [pc, #80]	; (8004124 <dec_lock+0xa4>)
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	0013      	movs	r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	189b      	adds	r3, r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	18cb      	adds	r3, r1, r3
 80040e0:	330a      	adds	r3, #10
 80040e2:	210e      	movs	r1, #14
 80040e4:	187a      	adds	r2, r7, r1
 80040e6:	8812      	ldrh	r2, [r2, #0]
 80040e8:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80040ea:	187b      	adds	r3, r7, r1
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d107      	bne.n	8004102 <dec_lock+0x82>
 80040f2:	490c      	ldr	r1, [pc, #48]	; (8004124 <dec_lock+0xa4>)
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	0013      	movs	r3, r2
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	189b      	adds	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	2200      	movs	r2, #0
 8004100:	505a      	str	r2, [r3, r1]
		res = FR_OK;
 8004102:	230d      	movs	r3, #13
 8004104:	18fb      	adds	r3, r7, r3
 8004106:	2200      	movs	r2, #0
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	e003      	b.n	8004114 <dec_lock+0x94>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800410c:	230d      	movs	r3, #13
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	2202      	movs	r2, #2
 8004112:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8004114:	230d      	movs	r3, #13
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	781b      	ldrb	r3, [r3, #0]
}
 800411a:	0018      	movs	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	b005      	add	sp, #20
 8004120:	bd90      	pop	{r4, r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	200001f8 	.word	0x200001f8

08004128 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	e014      	b.n	8004160 <clear_lock+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004136:	490e      	ldr	r1, [pc, #56]	; (8004170 <clear_lock+0x48>)
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	0013      	movs	r3, r2
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	189b      	adds	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	585b      	ldr	r3, [r3, r1]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	429a      	cmp	r2, r3
 8004148:	d107      	bne.n	800415a <clear_lock+0x32>
 800414a:	4909      	ldr	r1, [pc, #36]	; (8004170 <clear_lock+0x48>)
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	0013      	movs	r3, r2
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	189b      	adds	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	2200      	movs	r2, #0
 8004158:	505a      	str	r2, [r3, r1]
	for (i = 0; i < _FS_LOCK; i++) {
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3301      	adds	r3, #1
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d9e7      	bls.n	8004136 <clear_lock+0xe>
	}
}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	46c0      	nop			; (mov r8, r8)
 800416a:	46bd      	mov	sp, r7
 800416c:	b004      	add	sp, #16
 800416e:	bd80      	pop	{r7, pc}
 8004170:	200001f8 	.word	0x200001f8

08004174 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8004174:	b590      	push	{r4, r7, lr}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800417c:	240f      	movs	r4, #15
 800417e:	193b      	adds	r3, r7, r4
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	2381      	movs	r3, #129	; 0x81
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	5cd3      	ldrb	r3, [r2, r3]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d03d      	beq.n	800420c <sync_window+0x98>
		wsect = fs->winsect;	/* Current sector number */
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	238b      	movs	r3, #139	; 0x8b
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	58d3      	ldr	r3, [r2, r3]
 8004198:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a1f      	ldr	r2, [pc, #124]	; (800421c <sync_window+0xa8>)
 800419e:	5c98      	ldrb	r0, [r3, r2]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	2301      	movs	r3, #1
 80041a6:	f7ff fd61 	bl	8003c6c <disk_write>
 80041aa:	1e03      	subs	r3, r0, #0
 80041ac:	d003      	beq.n	80041b6 <sync_window+0x42>
			res = FR_DISK_ERR;
 80041ae:	193b      	adds	r3, r7, r4
 80041b0:	2201      	movs	r2, #1
 80041b2:	701a      	strb	r2, [r3, #0]
 80041b4:	e02a      	b.n	800420c <sync_window+0x98>
		} else {
			fs->wflag = 0;
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	2381      	movs	r3, #129	; 0x81
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	2100      	movs	r1, #0
 80041be:	54d1      	strb	r1, [r2, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	2388      	movs	r3, #136	; 0x88
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	58d3      	ldr	r3, [r2, r3]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	1ad2      	subs	r2, r2, r3
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	2386      	movs	r3, #134	; 0x86
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	58cb      	ldr	r3, [r1, r3]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d219      	bcs.n	800420c <sync_window+0x98>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a11      	ldr	r2, [pc, #68]	; (8004220 <sync_window+0xac>)
 80041dc:	5c9b      	ldrb	r3, [r3, r2]
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	e011      	b.n	8004206 <sync_window+0x92>
					wsect += fs->fsize;
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	2386      	movs	r3, #134	; 0x86
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	58d3      	ldr	r3, [r2, r3]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	18d3      	adds	r3, r2, r3
 80041ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a0a      	ldr	r2, [pc, #40]	; (800421c <sync_window+0xa8>)
 80041f4:	5c98      	ldrb	r0, [r3, r2]
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	2301      	movs	r3, #1
 80041fc:	f7ff fd36 	bl	8003c6c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	3b01      	subs	r3, #1
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d8ea      	bhi.n	80041e2 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 800420c:	230f      	movs	r3, #15
 800420e:	18fb      	adds	r3, r7, r3
 8004210:	781b      	ldrb	r3, [r3, #0]
}
 8004212:	0018      	movs	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	b007      	add	sp, #28
 8004218:	bd90      	pop	{r4, r7, pc}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	00000201 	.word	0x00000201
 8004220:	00000203 	.word	0x00000203

08004224 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8004224:	b5b0      	push	{r4, r5, r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800422e:	240f      	movs	r4, #15
 8004230:	193b      	adds	r3, r7, r4
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	238b      	movs	r3, #139	; 0x8b
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	58d3      	ldr	r3, [r2, r3]
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d021      	beq.n	8004288 <move_window+0x64>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004244:	0025      	movs	r5, r4
 8004246:	193c      	adds	r4, r7, r4
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	0018      	movs	r0, r3
 800424c:	f7ff ff92 	bl	8004174 <sync_window>
 8004250:	0003      	movs	r3, r0
 8004252:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004254:	002c      	movs	r4, r5
 8004256:	193b      	adds	r3, r7, r4
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d114      	bne.n	8004288 <move_window+0x64>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a0d      	ldr	r2, [pc, #52]	; (8004298 <move_window+0x74>)
 8004262:	5c98      	ldrb	r0, [r3, r2]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	2301      	movs	r3, #1
 800426a:	f7ff fcd7 	bl	8003c1c <disk_read>
 800426e:	1e03      	subs	r3, r0, #0
 8004270:	d005      	beq.n	800427e <move_window+0x5a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004272:	2301      	movs	r3, #1
 8004274:	425b      	negs	r3, r3
 8004276:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004278:	193b      	adds	r3, r7, r4
 800427a:	2201      	movs	r2, #1
 800427c:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	238b      	movs	r3, #139	; 0x8b
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	6839      	ldr	r1, [r7, #0]
 8004286:	50d1      	str	r1, [r2, r3]
		}
	}
	return res;
 8004288:	230f      	movs	r3, #15
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	781b      	ldrb	r3, [r3, #0]
}
 800428e:	0018      	movs	r0, r3
 8004290:	46bd      	mov	sp, r7
 8004292:	b004      	add	sp, #16
 8004294:	bdb0      	pop	{r4, r5, r7, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	00000201 	.word	0x00000201

0800429c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800429c:	b5b0      	push	{r4, r5, r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80042a4:	250f      	movs	r5, #15
 80042a6:	197c      	adds	r4, r7, r5
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	0018      	movs	r0, r3
 80042ac:	f7ff ff62 	bl	8004174 <sync_window>
 80042b0:	0003      	movs	r3, r0
 80042b2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80042b4:	197b      	adds	r3, r7, r5
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d000      	beq.n	80042be <sync_fs+0x22>
 80042bc:	e0b4      	b.n	8004428 <sync_fs+0x18c>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	2380      	movs	r3, #128	; 0x80
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	5cd3      	ldrb	r3, [r2, r3]
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d000      	beq.n	80042cc <sync_fs+0x30>
 80042ca:	e09f      	b.n	800440c <sync_fs+0x170>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a5a      	ldr	r2, [pc, #360]	; (8004438 <sync_fs+0x19c>)
 80042d0:	5c9b      	ldrb	r3, [r3, r2]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d000      	beq.n	80042d8 <sync_fs+0x3c>
 80042d6:	e099      	b.n	800440c <sync_fs+0x170>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2280      	movs	r2, #128	; 0x80
 80042dc:	0092      	lsls	r2, r2, #2
 80042de:	2100      	movs	r1, #0
 80042e0:	0018      	movs	r0, r3
 80042e2:	f7ff fd30 	bl	8003d46 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	23ff      	movs	r3, #255	; 0xff
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	2155      	movs	r1, #85	; 0x55
 80042ee:	54d1      	strb	r1, [r2, r3]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a52      	ldr	r2, [pc, #328]	; (800443c <sync_fs+0x1a0>)
 80042f4:	21aa      	movs	r1, #170	; 0xaa
 80042f6:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2252      	movs	r2, #82	; 0x52
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2252      	movs	r2, #82	; 0x52
 8004302:	705a      	strb	r2, [r3, #1]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2261      	movs	r2, #97	; 0x61
 8004308:	709a      	strb	r2, [r3, #2]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2241      	movs	r2, #65	; 0x41
 800430e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	23f2      	movs	r3, #242	; 0xf2
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	2172      	movs	r1, #114	; 0x72
 8004318:	54d1      	strb	r1, [r2, r3]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	23e6      	movs	r3, #230	; 0xe6
 800431e:	33ff      	adds	r3, #255	; 0xff
 8004320:	2172      	movs	r1, #114	; 0x72
 8004322:	54d1      	strb	r1, [r2, r3]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	23f3      	movs	r3, #243	; 0xf3
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	2141      	movs	r1, #65	; 0x41
 800432c:	54d1      	strb	r1, [r2, r3]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	23e8      	movs	r3, #232	; 0xe8
 8004332:	33ff      	adds	r3, #255	; 0xff
 8004334:	2161      	movs	r1, #97	; 0x61
 8004336:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	2384      	movs	r3, #132	; 0x84
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	58d3      	ldr	r3, [r2, r3]
 8004340:	b2d9      	uxtb	r1, r3
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	23f4      	movs	r3, #244	; 0xf4
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	54d1      	strb	r1, [r2, r3]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	2384      	movs	r3, #132	; 0x84
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	58d3      	ldr	r3, [r2, r3]
 8004352:	b29b      	uxth	r3, r3
 8004354:	0a1b      	lsrs	r3, r3, #8
 8004356:	b29b      	uxth	r3, r3
 8004358:	b2d9      	uxtb	r1, r3
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	23ea      	movs	r3, #234	; 0xea
 800435e:	33ff      	adds	r3, #255	; 0xff
 8004360:	54d1      	strb	r1, [r2, r3]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	2384      	movs	r3, #132	; 0x84
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	58d3      	ldr	r3, [r2, r3]
 800436a:	0c1b      	lsrs	r3, r3, #16
 800436c:	b2d9      	uxtb	r1, r3
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	23f5      	movs	r3, #245	; 0xf5
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	54d1      	strb	r1, [r2, r3]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	2384      	movs	r3, #132	; 0x84
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	58d3      	ldr	r3, [r2, r3]
 800437e:	0e1b      	lsrs	r3, r3, #24
 8004380:	b2d9      	uxtb	r1, r3
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	23ec      	movs	r3, #236	; 0xec
 8004386:	33ff      	adds	r3, #255	; 0xff
 8004388:	54d1      	strb	r1, [r2, r3]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	2383      	movs	r3, #131	; 0x83
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	58d3      	ldr	r3, [r2, r3]
 8004392:	b2d9      	uxtb	r1, r3
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	23f6      	movs	r3, #246	; 0xf6
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	54d1      	strb	r1, [r2, r3]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	2383      	movs	r3, #131	; 0x83
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	58d3      	ldr	r3, [r2, r3]
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2d9      	uxtb	r1, r3
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	23ee      	movs	r3, #238	; 0xee
 80043b0:	33ff      	adds	r3, #255	; 0xff
 80043b2:	54d1      	strb	r1, [r2, r3]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	2383      	movs	r3, #131	; 0x83
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	58d3      	ldr	r3, [r2, r3]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	b2d9      	uxtb	r1, r3
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	23f7      	movs	r3, #247	; 0xf7
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	54d1      	strb	r1, [r2, r3]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	2383      	movs	r3, #131	; 0x83
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	58d3      	ldr	r3, [r2, r3]
 80043d0:	0e1b      	lsrs	r3, r3, #24
 80043d2:	b2d9      	uxtb	r1, r3
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	23f0      	movs	r3, #240	; 0xf0
 80043d8:	33ff      	adds	r3, #255	; 0xff
 80043da:	54d1      	strb	r1, [r2, r3]
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	2387      	movs	r3, #135	; 0x87
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	58d3      	ldr	r3, [r2, r3]
 80043e4:	1c59      	adds	r1, r3, #1
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	238b      	movs	r3, #139	; 0x8b
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	50d1      	str	r1, [r2, r3]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a13      	ldr	r2, [pc, #76]	; (8004440 <sync_fs+0x1a4>)
 80043f2:	5c98      	ldrb	r0, [r3, r2]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	238b      	movs	r3, #139	; 0x8b
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	58d2      	ldr	r2, [r2, r3]
 80043fe:	2301      	movs	r3, #1
 8004400:	f7ff fc34 	bl	8003c6c <disk_write>
			fs->fsi_flag = 0;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a0c      	ldr	r2, [pc, #48]	; (8004438 <sync_fs+0x19c>)
 8004408:	2100      	movs	r1, #0
 800440a:	5499      	strb	r1, [r3, r2]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a0c      	ldr	r2, [pc, #48]	; (8004440 <sync_fs+0x1a4>)
 8004410:	5c9b      	ldrb	r3, [r3, r2]
 8004412:	2200      	movs	r2, #0
 8004414:	2100      	movs	r1, #0
 8004416:	0018      	movs	r0, r3
 8004418:	f7ff fc50 	bl	8003cbc <disk_ioctl>
 800441c:	1e03      	subs	r3, r0, #0
 800441e:	d003      	beq.n	8004428 <sync_fs+0x18c>
			res = FR_DISK_ERR;
 8004420:	230f      	movs	r3, #15
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	2201      	movs	r2, #1
 8004426:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8004428:	230f      	movs	r3, #15
 800442a:	18fb      	adds	r3, r7, r3
 800442c:	781b      	ldrb	r3, [r3, #0]
}
 800442e:	0018      	movs	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	b004      	add	sp, #16
 8004434:	bdb0      	pop	{r4, r5, r7, pc}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	00000205 	.word	0x00000205
 800443c:	000001ff 	.word	0x000001ff
 8004440:	00000201 	.word	0x00000201

08004444 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	3b02      	subs	r3, #2
 8004452:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	2385      	movs	r3, #133	; 0x85
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	58d3      	ldr	r3, [r2, r3]
 800445c:	3b02      	subs	r3, #2
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d301      	bcc.n	8004468 <clust2sect+0x24>
 8004464:	2300      	movs	r3, #0
 8004466:	e00a      	b.n	800447e <clust2sect+0x3a>
	return clst * fs->csize + fs->database;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a07      	ldr	r2, [pc, #28]	; (8004488 <clust2sect+0x44>)
 800446c:	5c9b      	ldrb	r3, [r3, r2]
 800446e:	001a      	movs	r2, r3
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	435a      	muls	r2, r3
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	238a      	movs	r3, #138	; 0x8a
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	58cb      	ldr	r3, [r1, r3]
 800447c:	18d3      	adds	r3, r2, r3
}
 800447e:	0018      	movs	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	b002      	add	sp, #8
 8004484:	bd80      	pop	{r7, pc}
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	00000202 	.word	0x00000202

0800448c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d906      	bls.n	80044aa <get_fat+0x1e>
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	2385      	movs	r3, #133	; 0x85
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	58d3      	ldr	r3, [r2, r3]
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d302      	bcc.n	80044b0 <get_fat+0x24>
		val = 1;	/* Internal error */
 80044aa:	2301      	movs	r3, #1
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	e0aa      	b.n	8004606 <get_fat+0x17a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80044b0:	2301      	movs	r3, #1
 80044b2:	425b      	negs	r3, r3
 80044b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	2380      	movs	r3, #128	; 0x80
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	5cd3      	ldrb	r3, [r2, r3]
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d100      	bne.n	80044c4 <get_fat+0x38>
 80044c2:	e06b      	b.n	800459c <get_fat+0x110>
 80044c4:	dd00      	ble.n	80044c8 <get_fat+0x3c>
 80044c6:	e094      	b.n	80045f2 <get_fat+0x166>
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d002      	beq.n	80044d2 <get_fat+0x46>
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d042      	beq.n	8004556 <get_fat+0xca>
 80044d0:	e08f      	b.n	80045f2 <get_fat+0x166>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	085b      	lsrs	r3, r3, #1
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	18d3      	adds	r3, r2, r3
 80044de:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	2388      	movs	r3, #136	; 0x88
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	58d2      	ldr	r2, [r2, r3]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	0a5b      	lsrs	r3, r3, #9
 80044ec:	18d2      	adds	r2, r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	0011      	movs	r1, r2
 80044f2:	0018      	movs	r0, r3
 80044f4:	f7ff fe96 	bl	8004224 <move_window>
 80044f8:	1e03      	subs	r3, r0, #0
 80044fa:	d000      	beq.n	80044fe <get_fat+0x72>
 80044fc:	e07c      	b.n	80045f8 <get_fat+0x16c>
			wc = fs->win.d8[bc++ % SS(fs)];
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	60fa      	str	r2, [r7, #12]
 8004504:	05db      	lsls	r3, r3, #23
 8004506:	0ddb      	lsrs	r3, r3, #23
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	5cd3      	ldrb	r3, [r2, r3]
 800450c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	2388      	movs	r3, #136	; 0x88
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	58d2      	ldr	r2, [r2, r3]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	0a5b      	lsrs	r3, r3, #9
 800451a:	18d2      	adds	r2, r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	0011      	movs	r1, r2
 8004520:	0018      	movs	r0, r3
 8004522:	f7ff fe7f 	bl	8004224 <move_window>
 8004526:	1e03      	subs	r3, r0, #0
 8004528:	d168      	bne.n	80045fc <get_fat+0x170>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	05db      	lsls	r3, r3, #23
 800452e:	0ddb      	lsrs	r3, r3, #23
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	5cd3      	ldrb	r3, [r2, r3]
 8004534:	021b      	lsls	r3, r3, #8
 8004536:	001a      	movs	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4313      	orrs	r3, r2
 800453c:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2201      	movs	r2, #1
 8004542:	4013      	ands	r3, r2
 8004544:	d002      	beq.n	800454c <get_fat+0xc0>
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	e002      	b.n	8004552 <get_fat+0xc6>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	051b      	lsls	r3, r3, #20
 8004550:	0d1b      	lsrs	r3, r3, #20
 8004552:	617b      	str	r3, [r7, #20]
			break;
 8004554:	e057      	b.n	8004606 <get_fat+0x17a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	2388      	movs	r3, #136	; 0x88
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	58d2      	ldr	r2, [r2, r3]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	0a1b      	lsrs	r3, r3, #8
 8004562:	18d2      	adds	r2, r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	0011      	movs	r1, r2
 8004568:	0018      	movs	r0, r3
 800456a:	f7ff fe5b 	bl	8004224 <move_window>
 800456e:	1e03      	subs	r3, r0, #0
 8004570:	d146      	bne.n	8004600 <get_fat+0x174>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	005a      	lsls	r2, r3, #1
 8004576:	23ff      	movs	r3, #255	; 0xff
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	4013      	ands	r3, r2
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	18d3      	adds	r3, r2, r3
 8004580:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	3301      	adds	r3, #1
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	b21a      	sxth	r2, r3
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	b21b      	sxth	r3, r3
 8004592:	4313      	orrs	r3, r2
 8004594:	b21b      	sxth	r3, r3
 8004596:	b29b      	uxth	r3, r3
 8004598:	617b      	str	r3, [r7, #20]
			break;
 800459a:	e034      	b.n	8004606 <get_fat+0x17a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	2388      	movs	r3, #136	; 0x88
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	58d2      	ldr	r2, [r2, r3]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	09db      	lsrs	r3, r3, #7
 80045a8:	18d2      	adds	r2, r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	0011      	movs	r1, r2
 80045ae:	0018      	movs	r0, r3
 80045b0:	f7ff fe38 	bl	8004224 <move_window>
 80045b4:	1e03      	subs	r3, r0, #0
 80045b6:	d125      	bne.n	8004604 <get_fat+0x178>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	009a      	lsls	r2, r3, #2
 80045bc:	23fe      	movs	r3, #254	; 0xfe
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	4013      	ands	r3, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	18d3      	adds	r3, r2, r3
 80045c6:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	3303      	adds	r3, #3
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	061a      	lsls	r2, r3, #24
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	3302      	adds	r3, #2
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	041b      	lsls	r3, r3, #16
 80045d8:	4313      	orrs	r3, r2
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	3201      	adds	r2, #1
 80045de:	7812      	ldrb	r2, [r2, #0]
 80045e0:	0212      	lsls	r2, r2, #8
 80045e2:	4313      	orrs	r3, r2
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	7812      	ldrb	r2, [r2, #0]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	617b      	str	r3, [r7, #20]
			break;
 80045f0:	e009      	b.n	8004606 <get_fat+0x17a>

		default:
			val = 1;	/* Internal error */
 80045f2:	2301      	movs	r3, #1
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	e006      	b.n	8004606 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045f8:	46c0      	nop			; (mov r8, r8)
 80045fa:	e004      	b.n	8004606 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80045fc:	46c0      	nop			; (mov r8, r8)
 80045fe:	e002      	b.n	8004606 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004600:	46c0      	nop			; (mov r8, r8)
 8004602:	e000      	b.n	8004606 <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004604:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8004606:	697b      	ldr	r3, [r7, #20]
}
 8004608:	0018      	movs	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	b006      	add	sp, #24
 800460e:	bd80      	pop	{r7, pc}

08004610 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004610:	b5b0      	push	{r4, r5, r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d906      	bls.n	8004630 <put_fat+0x20>
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	2385      	movs	r3, #133	; 0x85
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	58d3      	ldr	r3, [r2, r3]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	429a      	cmp	r2, r3
 800462e:	d304      	bcc.n	800463a <put_fat+0x2a>
		res = FR_INT_ERR;
 8004630:	231f      	movs	r3, #31
 8004632:	18fb      	adds	r3, r7, r3
 8004634:	2202      	movs	r2, #2
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	e111      	b.n	800485e <put_fat+0x24e>

	} else {
		switch (fs->fs_type) {
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	2380      	movs	r3, #128	; 0x80
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	5cd3      	ldrb	r3, [r2, r3]
 8004642:	2b03      	cmp	r3, #3
 8004644:	d100      	bne.n	8004648 <put_fat+0x38>
 8004646:	e0ae      	b.n	80047a6 <put_fat+0x196>
 8004648:	dd00      	ble.n	800464c <put_fat+0x3c>
 800464a:	e0fc      	b.n	8004846 <put_fat+0x236>
 800464c:	2b01      	cmp	r3, #1
 800464e:	d003      	beq.n	8004658 <put_fat+0x48>
 8004650:	2b02      	cmp	r3, #2
 8004652:	d100      	bne.n	8004656 <put_fat+0x46>
 8004654:	e079      	b.n	800474a <put_fat+0x13a>
 8004656:	e0f6      	b.n	8004846 <put_fat+0x236>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	085b      	lsrs	r3, r3, #1
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	18d3      	adds	r3, r2, r3
 8004664:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	2388      	movs	r3, #136	; 0x88
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	58d2      	ldr	r2, [r2, r3]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	0a5b      	lsrs	r3, r3, #9
 8004672:	18d2      	adds	r2, r2, r3
 8004674:	251f      	movs	r5, #31
 8004676:	197c      	adds	r4, r7, r5
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	0011      	movs	r1, r2
 800467c:	0018      	movs	r0, r3
 800467e:	f7ff fdd1 	bl	8004224 <move_window>
 8004682:	0003      	movs	r3, r0
 8004684:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004686:	197b      	adds	r3, r7, r5
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d000      	beq.n	8004690 <put_fat+0x80>
 800468e:	e0df      	b.n	8004850 <put_fat+0x240>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	617a      	str	r2, [r7, #20]
 8004696:	05db      	lsls	r3, r3, #23
 8004698:	0ddb      	lsrs	r3, r3, #23
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	18d3      	adds	r3, r2, r3
 800469e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2201      	movs	r2, #1
 80046a4:	4013      	ands	r3, r2
 80046a6:	d00d      	beq.n	80046c4 <put_fat+0xb4>
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	b25b      	sxtb	r3, r3
 80046ae:	220f      	movs	r2, #15
 80046b0:	4013      	ands	r3, r2
 80046b2:	b25a      	sxtb	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	b25b      	sxtb	r3, r3
 80046bc:	4313      	orrs	r3, r2
 80046be:	b25b      	sxtb	r3, r3
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e001      	b.n	80046c8 <put_fat+0xb8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	2381      	movs	r3, #129	; 0x81
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	2101      	movs	r1, #1
 80046d4:	54d1      	strb	r1, [r2, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	2388      	movs	r3, #136	; 0x88
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	58d2      	ldr	r2, [r2, r3]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	0a5b      	lsrs	r3, r3, #9
 80046e2:	18d2      	adds	r2, r2, r3
 80046e4:	251f      	movs	r5, #31
 80046e6:	197c      	adds	r4, r7, r5
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	0011      	movs	r1, r2
 80046ec:	0018      	movs	r0, r3
 80046ee:	f7ff fd99 	bl	8004224 <move_window>
 80046f2:	0003      	movs	r3, r0
 80046f4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80046f6:	197b      	adds	r3, r7, r5
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d000      	beq.n	8004700 <put_fat+0xf0>
 80046fe:	e0a9      	b.n	8004854 <put_fat+0x244>
			p = &fs->win.d8[bc % SS(fs)];
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	05db      	lsls	r3, r3, #23
 8004704:	0ddb      	lsrs	r3, r3, #23
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	18d3      	adds	r3, r2, r3
 800470a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2201      	movs	r2, #1
 8004710:	4013      	ands	r3, r2
 8004712:	d003      	beq.n	800471c <put_fat+0x10c>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	091b      	lsrs	r3, r3, #4
 8004718:	b2db      	uxtb	r3, r3
 800471a:	e00e      	b.n	800473a <put_fat+0x12a>
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	b25b      	sxtb	r3, r3
 8004722:	220f      	movs	r2, #15
 8004724:	4393      	bics	r3, r2
 8004726:	b25a      	sxtb	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	0a1b      	lsrs	r3, r3, #8
 800472c:	b25b      	sxtb	r3, r3
 800472e:	210f      	movs	r1, #15
 8004730:	400b      	ands	r3, r1
 8004732:	b25b      	sxtb	r3, r3
 8004734:	4313      	orrs	r3, r2
 8004736:	b25b      	sxtb	r3, r3
 8004738:	b2db      	uxtb	r3, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	2381      	movs	r3, #129	; 0x81
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	2101      	movs	r1, #1
 8004746:	54d1      	strb	r1, [r2, r3]
			break;
 8004748:	e089      	b.n	800485e <put_fat+0x24e>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	2388      	movs	r3, #136	; 0x88
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	58d2      	ldr	r2, [r2, r3]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	0a1b      	lsrs	r3, r3, #8
 8004756:	18d2      	adds	r2, r2, r3
 8004758:	251f      	movs	r5, #31
 800475a:	197c      	adds	r4, r7, r5
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	0011      	movs	r1, r2
 8004760:	0018      	movs	r0, r3
 8004762:	f7ff fd5f 	bl	8004224 <move_window>
 8004766:	0003      	movs	r3, r0
 8004768:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800476a:	197b      	adds	r3, r7, r5
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d172      	bne.n	8004858 <put_fat+0x248>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	005a      	lsls	r2, r3, #1
 8004776:	23ff      	movs	r3, #255	; 0xff
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	4013      	ands	r3, r2
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	18d3      	adds	r3, r2, r3
 8004780:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	b2da      	uxtb	r2, r3
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	701a      	strb	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	b29b      	uxth	r3, r3
 800478e:	0a1b      	lsrs	r3, r3, #8
 8004790:	b29a      	uxth	r2, r3
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	3301      	adds	r3, #1
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	2381      	movs	r3, #129	; 0x81
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	2101      	movs	r1, #1
 80047a2:	54d1      	strb	r1, [r2, r3]
			break;
 80047a4:	e05b      	b.n	800485e <put_fat+0x24e>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	2388      	movs	r3, #136	; 0x88
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	58d2      	ldr	r2, [r2, r3]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	09db      	lsrs	r3, r3, #7
 80047b2:	18d2      	adds	r2, r2, r3
 80047b4:	251f      	movs	r5, #31
 80047b6:	197c      	adds	r4, r7, r5
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	0011      	movs	r1, r2
 80047bc:	0018      	movs	r0, r3
 80047be:	f7ff fd31 	bl	8004224 <move_window>
 80047c2:	0003      	movs	r3, r0
 80047c4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80047c6:	197b      	adds	r3, r7, r5
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d146      	bne.n	800485c <put_fat+0x24c>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	009a      	lsls	r2, r3, #2
 80047d2:	23fe      	movs	r3, #254	; 0xfe
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	4013      	ands	r3, r2
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	18d3      	adds	r3, r2, r3
 80047dc:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	3303      	adds	r3, #3
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	061a      	lsls	r2, r3, #24
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	3302      	adds	r3, #2
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	041b      	lsls	r3, r3, #16
 80047ee:	4313      	orrs	r3, r2
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	3201      	adds	r2, #1
 80047f4:	7812      	ldrb	r2, [r2, #0]
 80047f6:	0212      	lsls	r2, r2, #8
 80047f8:	4313      	orrs	r3, r2
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	7812      	ldrb	r2, [r2, #0]
 80047fe:	4313      	orrs	r3, r2
 8004800:	0f1b      	lsrs	r3, r3, #28
 8004802:	071b      	lsls	r3, r3, #28
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	4313      	orrs	r3, r2
 8004808:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	b2da      	uxtb	r2, r3
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	b29b      	uxth	r3, r3
 8004816:	0a1b      	lsrs	r3, r3, #8
 8004818:	b29a      	uxth	r2, r3
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	3301      	adds	r3, #1
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	0c1a      	lsrs	r2, r3, #16
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	3302      	adds	r3, #2
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	0e1a      	lsrs	r2, r3, #24
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	3303      	adds	r3, #3
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	2381      	movs	r3, #129	; 0x81
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	2101      	movs	r1, #1
 8004842:	54d1      	strb	r1, [r2, r3]
			break;
 8004844:	e00b      	b.n	800485e <put_fat+0x24e>

		default :
			res = FR_INT_ERR;
 8004846:	231f      	movs	r3, #31
 8004848:	18fb      	adds	r3, r7, r3
 800484a:	2202      	movs	r2, #2
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	e006      	b.n	800485e <put_fat+0x24e>
			if (res != FR_OK) break;
 8004850:	46c0      	nop			; (mov r8, r8)
 8004852:	e004      	b.n	800485e <put_fat+0x24e>
			if (res != FR_OK) break;
 8004854:	46c0      	nop			; (mov r8, r8)
 8004856:	e002      	b.n	800485e <put_fat+0x24e>
			if (res != FR_OK) break;
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	e000      	b.n	800485e <put_fat+0x24e>
			if (res != FR_OK) break;
 800485c:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 800485e:	231f      	movs	r3, #31
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	781b      	ldrb	r3, [r3, #0]
}
 8004864:	0018      	movs	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	b008      	add	sp, #32
 800486a:	bdb0      	pop	{r4, r5, r7, pc}

0800486c <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800486c:	b5b0      	push	{r4, r5, r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d906      	bls.n	800488a <remove_chain+0x1e>
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	2385      	movs	r3, #133	; 0x85
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	58d3      	ldr	r3, [r2, r3]
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d304      	bcc.n	8004894 <remove_chain+0x28>
		res = FR_INT_ERR;
 800488a:	230f      	movs	r3, #15
 800488c:	18fb      	adds	r3, r7, r3
 800488e:	2202      	movs	r2, #2
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	e052      	b.n	800493a <remove_chain+0xce>

	} else {
		res = FR_OK;
 8004894:	230f      	movs	r3, #15
 8004896:	18fb      	adds	r3, r7, r3
 8004898:	2200      	movs	r2, #0
 800489a:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800489c:	e042      	b.n	8004924 <remove_chain+0xb8>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	0011      	movs	r1, r2
 80048a4:	0018      	movs	r0, r3
 80048a6:	f7ff fdf1 	bl	800448c <get_fat>
 80048aa:	0003      	movs	r3, r0
 80048ac:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d03f      	beq.n	8004934 <remove_chain+0xc8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d104      	bne.n	80048c4 <remove_chain+0x58>
 80048ba:	230f      	movs	r3, #15
 80048bc:	18fb      	adds	r3, r7, r3
 80048be:	2202      	movs	r2, #2
 80048c0:	701a      	strb	r2, [r3, #0]
 80048c2:	e03a      	b.n	800493a <remove_chain+0xce>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	3301      	adds	r3, #1
 80048c8:	d104      	bne.n	80048d4 <remove_chain+0x68>
 80048ca:	230f      	movs	r3, #15
 80048cc:	18fb      	adds	r3, r7, r3
 80048ce:	2201      	movs	r2, #1
 80048d0:	701a      	strb	r2, [r3, #0]
 80048d2:	e032      	b.n	800493a <remove_chain+0xce>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80048d4:	250f      	movs	r5, #15
 80048d6:	197c      	adds	r4, r7, r5
 80048d8:	6839      	ldr	r1, [r7, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	0018      	movs	r0, r3
 80048e0:	f7ff fe96 	bl	8004610 <put_fat>
 80048e4:	0003      	movs	r3, r0
 80048e6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80048e8:	197b      	adds	r3, r7, r5
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d123      	bne.n	8004938 <remove_chain+0xcc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	2384      	movs	r3, #132	; 0x84
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	58d3      	ldr	r3, [r2, r3]
 80048f8:	3301      	adds	r3, #1
 80048fa:	d011      	beq.n	8004920 <remove_chain+0xb4>
				fs->free_clust++;
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	2384      	movs	r3, #132	; 0x84
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	58d3      	ldr	r3, [r2, r3]
 8004904:	1c59      	adds	r1, r3, #1
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	2384      	movs	r3, #132	; 0x84
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	50d1      	str	r1, [r2, r3]
				fs->fsi_flag |= 1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a0d      	ldr	r2, [pc, #52]	; (8004948 <remove_chain+0xdc>)
 8004912:	5c9b      	ldrb	r3, [r3, r2]
 8004914:	2201      	movs	r2, #1
 8004916:	4313      	orrs	r3, r2
 8004918:	b2d9      	uxtb	r1, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <remove_chain+0xdc>)
 800491e:	5499      	strb	r1, [r3, r2]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	2385      	movs	r3, #133	; 0x85
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	58d3      	ldr	r3, [r2, r3]
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d3b5      	bcc.n	800489e <remove_chain+0x32>
 8004932:	e002      	b.n	800493a <remove_chain+0xce>
			if (nxt == 0) break;				/* Empty cluster? */
 8004934:	46c0      	nop			; (mov r8, r8)
 8004936:	e000      	b.n	800493a <remove_chain+0xce>
			if (res != FR_OK) break;
 8004938:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 800493a:	230f      	movs	r3, #15
 800493c:	18fb      	adds	r3, r7, r3
 800493e:	781b      	ldrb	r3, [r3, #0]
}
 8004940:	0018      	movs	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	b004      	add	sp, #16
 8004946:	bdb0      	pop	{r4, r5, r7, pc}
 8004948:	00000205 	.word	0x00000205

0800494c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800494c:	b5b0      	push	{r4, r5, r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d111      	bne.n	8004980 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	2383      	movs	r3, #131	; 0x83
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	58d3      	ldr	r3, [r2, r3]
 8004964:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d006      	beq.n	800497a <create_chain+0x2e>
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	2385      	movs	r3, #133	; 0x85
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	58d3      	ldr	r3, [r2, r3]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	429a      	cmp	r2, r3
 8004978:	d31f      	bcc.n	80049ba <create_chain+0x6e>
 800497a:	2301      	movs	r3, #1
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	e01c      	b.n	80049ba <create_chain+0x6e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	0011      	movs	r1, r2
 8004986:	0018      	movs	r0, r3
 8004988:	f7ff fd80 	bl	800448c <get_fat>
 800498c:	0003      	movs	r3, r0
 800498e:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d801      	bhi.n	800499a <create_chain+0x4e>
 8004996:	2301      	movs	r3, #1
 8004998:	e085      	b.n	8004aa6 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	3301      	adds	r3, #1
 800499e:	d101      	bne.n	80049a4 <create_chain+0x58>
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	e080      	b.n	8004aa6 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	2385      	movs	r3, #133	; 0x85
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	58d3      	ldr	r3, [r2, r3]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d201      	bcs.n	80049b6 <create_chain+0x6a>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	e077      	b.n	8004aa6 <create_chain+0x15a>
		scl = clst;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	3301      	adds	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	2385      	movs	r3, #133	; 0x85
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	58d3      	ldr	r3, [r2, r3]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d307      	bcc.n	80049e2 <create_chain+0x96>
			ncl = 2;
 80049d2:	2302      	movs	r3, #2
 80049d4:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d901      	bls.n	80049e2 <create_chain+0x96>
 80049de:	2300      	movs	r3, #0
 80049e0:	e061      	b.n	8004aa6 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	0011      	movs	r1, r2
 80049e8:	0018      	movs	r0, r3
 80049ea:	f7ff fd4f 	bl	800448c <get_fat>
 80049ee:	0003      	movs	r3, r0
 80049f0:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00d      	beq.n	8004a14 <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	3301      	adds	r3, #1
 80049fc:	d002      	beq.n	8004a04 <create_chain+0xb8>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <create_chain+0xbc>
			return cs;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	e04e      	b.n	8004aa6 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d1d6      	bne.n	80049be <create_chain+0x72>
 8004a10:	2300      	movs	r3, #0
 8004a12:	e048      	b.n	8004aa6 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 8004a14:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004a16:	250f      	movs	r5, #15
 8004a18:	197c      	adds	r4, r7, r5
 8004a1a:	4a25      	ldr	r2, [pc, #148]	; (8004ab0 <create_chain+0x164>)
 8004a1c:	6979      	ldr	r1, [r7, #20]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	0018      	movs	r0, r3
 8004a22:	f7ff fdf5 	bl	8004610 <put_fat>
 8004a26:	0003      	movs	r3, r0
 8004a28:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
 8004a2a:	197b      	adds	r3, r7, r5
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10b      	bne.n	8004a4a <create_chain+0xfe>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <create_chain+0xfe>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004a38:	197c      	adds	r4, r7, r5
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	6839      	ldr	r1, [r7, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	0018      	movs	r0, r3
 8004a42:	f7ff fde5 	bl	8004610 <put_fat>
 8004a46:	0003      	movs	r3, r0
 8004a48:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
 8004a4a:	230f      	movs	r3, #15
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d11d      	bne.n	8004a90 <create_chain+0x144>
		fs->last_clust = ncl;			/* Update FSINFO */
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	2383      	movs	r3, #131	; 0x83
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	6979      	ldr	r1, [r7, #20]
 8004a5c:	50d1      	str	r1, [r2, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	2384      	movs	r3, #132	; 0x84
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	58d3      	ldr	r3, [r2, r3]
 8004a66:	3301      	adds	r3, #1
 8004a68:	d01c      	beq.n	8004aa4 <create_chain+0x158>
			fs->free_clust--;
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	2384      	movs	r3, #132	; 0x84
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	58d3      	ldr	r3, [r2, r3]
 8004a72:	1e59      	subs	r1, r3, #1
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	2384      	movs	r3, #132	; 0x84
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a0d      	ldr	r2, [pc, #52]	; (8004ab4 <create_chain+0x168>)
 8004a80:	5c9b      	ldrb	r3, [r3, r2]
 8004a82:	2201      	movs	r2, #1
 8004a84:	4313      	orrs	r3, r2
 8004a86:	b2d9      	uxtb	r1, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a0a      	ldr	r2, [pc, #40]	; (8004ab4 <create_chain+0x168>)
 8004a8c:	5499      	strb	r1, [r3, r2]
 8004a8e:	e009      	b.n	8004aa4 <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8004a90:	230f      	movs	r3, #15
 8004a92:	18fb      	adds	r3, r7, r3
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d102      	bne.n	8004aa0 <create_chain+0x154>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	425b      	negs	r3, r3
 8004a9e:	e000      	b.n	8004aa2 <create_chain+0x156>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8004aa4:	697b      	ldr	r3, [r7, #20]
}
 8004aa6:	0018      	movs	r0, r3
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b006      	add	sp, #24
 8004aac:	bdb0      	pop	{r4, r5, r7, pc}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	0fffffff 	.word	0x0fffffff
 8004ab4:	00000205 	.word	0x00000205

08004ab8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	2389      	movs	r3, #137	; 0x89
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	58d3      	ldr	r3, [r2, r3]
 8004aca:	3304      	adds	r3, #4
 8004acc:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	0a58      	lsrs	r0, r3, #9
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	2380      	movs	r3, #128	; 0x80
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	58d3      	ldr	r3, [r2, r3]
 8004ada:	4a13      	ldr	r2, [pc, #76]	; (8004b28 <clmt_clust+0x70>)
 8004adc:	5c9b      	ldrb	r3, [r3, r2]
 8004ade:	0019      	movs	r1, r3
 8004ae0:	f7fb fb24 	bl	800012c <__udivsi3>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1d1a      	adds	r2, r3, #4
 8004aec:	613a      	str	r2, [r7, #16]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <clmt_clust+0x44>
 8004af8:	2300      	movs	r3, #0
 8004afa:	e010      	b.n	8004b1e <clmt_clust+0x66>
		if (cl < ncl) break;	/* In this fragment? */
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d307      	bcc.n	8004b14 <clmt_clust+0x5c>
		cl -= ncl; tbl++;		/* Next fragment */
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004b12:	e7e9      	b.n	8004ae8 <clmt_clust+0x30>
		if (cl < ncl) break;	/* In this fragment? */
 8004b14:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	18d3      	adds	r3, r2, r3
}
 8004b1e:	0018      	movs	r0, r3
 8004b20:	46bd      	mov	sp, r7
 8004b22:	b006      	add	sp, #24
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	00000202 	.word	0x00000202

08004b2c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	b299      	uxth	r1, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a51      	ldr	r2, [pc, #324]	; (8004c84 <dir_sdi+0x158>)
 8004b3e:	5299      	strh	r1, [r3, r2]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	2382      	movs	r3, #130	; 0x82
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	58d3      	ldr	r3, [r2, r3]
 8004b48:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d009      	beq.n	8004b64 <dir_sdi+0x38>
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	2380      	movs	r3, #128	; 0x80
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	58d2      	ldr	r2, [r2, r3]
 8004b58:	2385      	movs	r3, #133	; 0x85
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	58d3      	ldr	r3, [r2, r3]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d301      	bcc.n	8004b68 <dir_sdi+0x3c>
		return FR_INT_ERR;
 8004b64:	2302      	movs	r3, #2
 8004b66:	e088      	b.n	8004c7a <dir_sdi+0x14e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d110      	bne.n	8004b90 <dir_sdi+0x64>
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	2380      	movs	r3, #128	; 0x80
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	58d2      	ldr	r2, [r2, r3]
 8004b76:	2380      	movs	r3, #128	; 0x80
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	5cd3      	ldrb	r3, [r2, r3]
 8004b7c:	2b03      	cmp	r3, #3
 8004b7e:	d107      	bne.n	8004b90 <dir_sdi+0x64>
		clst = dp->fs->dirbase;
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	58d2      	ldr	r2, [r2, r3]
 8004b88:	2389      	movs	r3, #137	; 0x89
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	58d3      	ldr	r3, [r2, r3]
 8004b8e:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d115      	bne.n	8004bc2 <dir_sdi+0x96>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	2380      	movs	r3, #128	; 0x80
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	58d2      	ldr	r2, [r2, r3]
 8004b9e:	2382      	movs	r3, #130	; 0x82
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	5ad3      	ldrh	r3, [r2, r3]
 8004ba4:	001a      	movs	r2, r3
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d301      	bcc.n	8004bb0 <dir_sdi+0x84>
			return FR_INT_ERR;
 8004bac:	2302      	movs	r3, #2
 8004bae:	e064      	b.n	8004c7a <dir_sdi+0x14e>
		sect = dp->fs->dirbase;
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	2380      	movs	r3, #128	; 0x80
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	58d2      	ldr	r2, [r2, r3]
 8004bb8:	2389      	movs	r3, #137	; 0x89
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	58d3      	ldr	r3, [r2, r3]
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	e03a      	b.n	8004c38 <dir_sdi+0x10c>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	2380      	movs	r3, #128	; 0x80
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	58d3      	ldr	r3, [r2, r3]
 8004bca:	4a2f      	ldr	r2, [pc, #188]	; (8004c88 <dir_sdi+0x15c>)
 8004bcc:	5c9b      	ldrb	r3, [r3, r2]
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8004bd2:	e022      	b.n	8004c1a <dir_sdi+0xee>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	2380      	movs	r3, #128	; 0x80
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	58d3      	ldr	r3, [r2, r3]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	0011      	movs	r1, r2
 8004be0:	0018      	movs	r0, r3
 8004be2:	f7ff fc53 	bl	800448c <get_fat>
 8004be6:	0003      	movs	r3, r0
 8004be8:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	3301      	adds	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <dir_sdi+0xc8>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e042      	b.n	8004c7a <dir_sdi+0x14e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d909      	bls.n	8004c0e <dir_sdi+0xe2>
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	2380      	movs	r3, #128	; 0x80
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	58d2      	ldr	r2, [r2, r3]
 8004c02:	2385      	movs	r3, #133	; 0x85
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	58d3      	ldr	r3, [r2, r3]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d301      	bcc.n	8004c12 <dir_sdi+0xe6>
				return FR_INT_ERR;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e033      	b.n	8004c7a <dir_sdi+0x14e>
			idx -= ic;
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d2d8      	bcs.n	8004bd4 <dir_sdi+0xa8>
		}
		sect = clust2sect(dp->fs, clst);
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	2380      	movs	r3, #128	; 0x80
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	58d3      	ldr	r3, [r2, r3]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	0011      	movs	r1, r2
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f7ff fc08 	bl	8004444 <clust2sect>
 8004c34:	0003      	movs	r3, r0
 8004c36:	613b      	str	r3, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	2383      	movs	r3, #131	; 0x83
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	6979      	ldr	r1, [r7, #20]
 8004c40:	50d1      	str	r1, [r2, r3]
	if (!sect) return FR_INT_ERR;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <dir_sdi+0x120>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e016      	b.n	8004c7a <dir_sdi+0x14e>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	091a      	lsrs	r2, r3, #4
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	18d1      	adds	r1, r2, r3
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	2384      	movs	r3, #132	; 0x84
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	50d1      	str	r1, [r2, r3]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	2380      	movs	r3, #128	; 0x80
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	58d3      	ldr	r3, [r2, r3]
 8004c64:	0019      	movs	r1, r3
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	220f      	movs	r2, #15
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	015b      	lsls	r3, r3, #5
 8004c6e:	18c9      	adds	r1, r1, r3
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	2385      	movs	r3, #133	; 0x85
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b006      	add	sp, #24
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	00000206 	.word	0x00000206
 8004c88:	00000202 	.word	0x00000202

08004c8c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004c8c:	b590      	push	{r4, r7, lr}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a87      	ldr	r2, [pc, #540]	; (8004eb8 <dir_next+0x22c>)
 8004c9a:	5a9b      	ldrh	r3, [r3, r2]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	041b      	lsls	r3, r3, #16
 8004ca4:	0c1b      	lsrs	r3, r3, #16
 8004ca6:	d005      	beq.n	8004cb4 <dir_next+0x28>
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	2384      	movs	r3, #132	; 0x84
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	58d3      	ldr	r3, [r2, r3]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <dir_next+0x2c>
		return FR_NO_FILE;
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	e0fb      	b.n	8004eb0 <dir_next+0x224>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	220f      	movs	r2, #15
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d000      	beq.n	8004cc2 <dir_next+0x36>
 8004cc0:	e0e2      	b.n	8004e88 <dir_next+0x1fc>
		dp->sect++;					/* Next sector */
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	2384      	movs	r3, #132	; 0x84
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	58d3      	ldr	r3, [r2, r3]
 8004cca:	1c59      	adds	r1, r3, #1
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	2384      	movs	r3, #132	; 0x84
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	50d1      	str	r1, [r2, r3]

		if (!dp->clust) {		/* Static table */
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	2383      	movs	r3, #131	; 0x83
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	58d3      	ldr	r3, [r2, r3]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10d      	bne.n	8004cfc <dir_next+0x70>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	2380      	movs	r3, #128	; 0x80
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	58d2      	ldr	r2, [r2, r3]
 8004ce8:	2382      	movs	r3, #130	; 0x82
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	5ad3      	ldrh	r3, [r2, r3]
 8004cee:	001a      	movs	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d200      	bcs.n	8004cf8 <dir_next+0x6c>
 8004cf6:	e0c7      	b.n	8004e88 <dir_next+0x1fc>
				return FR_NO_FILE;
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	e0d9      	b.n	8004eb0 <dir_next+0x224>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	091b      	lsrs	r3, r3, #4
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	2280      	movs	r2, #128	; 0x80
 8004d04:	0092      	lsls	r2, r2, #2
 8004d06:	588a      	ldr	r2, [r1, r2]
 8004d08:	496c      	ldr	r1, [pc, #432]	; (8004ebc <dir_next+0x230>)
 8004d0a:	5c52      	ldrb	r2, [r2, r1]
 8004d0c:	3a01      	subs	r2, #1
 8004d0e:	4013      	ands	r3, r2
 8004d10:	d000      	beq.n	8004d14 <dir_next+0x88>
 8004d12:	e0b9      	b.n	8004e88 <dir_next+0x1fc>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	2380      	movs	r3, #128	; 0x80
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	58d0      	ldr	r0, [r2, r3]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	2383      	movs	r3, #131	; 0x83
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	58d3      	ldr	r3, [r2, r3]
 8004d24:	0019      	movs	r1, r3
 8004d26:	f7ff fbb1 	bl	800448c <get_fat>
 8004d2a:	0003      	movs	r3, r0
 8004d2c:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d801      	bhi.n	8004d38 <dir_next+0xac>
 8004d34:	2302      	movs	r3, #2
 8004d36:	e0bb      	b.n	8004eb0 <dir_next+0x224>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	d101      	bne.n	8004d42 <dir_next+0xb6>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e0b6      	b.n	8004eb0 <dir_next+0x224>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	2380      	movs	r3, #128	; 0x80
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	58d2      	ldr	r2, [r2, r3]
 8004d4a:	2385      	movs	r3, #133	; 0x85
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	58d3      	ldr	r3, [r2, r3]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d200      	bcs.n	8004d58 <dir_next+0xcc>
 8004d56:	e084      	b.n	8004e62 <dir_next+0x1d6>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <dir_next+0xd6>
 8004d5e:	2304      	movs	r3, #4
 8004d60:	e0a6      	b.n	8004eb0 <dir_next+0x224>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	2380      	movs	r3, #128	; 0x80
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	58d0      	ldr	r0, [r2, r3]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	2383      	movs	r3, #131	; 0x83
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	58d3      	ldr	r3, [r2, r3]
 8004d72:	0019      	movs	r1, r3
 8004d74:	f7ff fdea 	bl	800494c <create_chain>
 8004d78:	0003      	movs	r3, r0
 8004d7a:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <dir_next+0xfa>
 8004d82:	2307      	movs	r3, #7
 8004d84:	e094      	b.n	8004eb0 <dir_next+0x224>
					if (clst == 1) return FR_INT_ERR;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <dir_next+0x104>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e08f      	b.n	8004eb0 <dir_next+0x224>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	3301      	adds	r3, #1
 8004d94:	d101      	bne.n	8004d9a <dir_next+0x10e>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e08a      	b.n	8004eb0 <dir_next+0x224>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	2380      	movs	r3, #128	; 0x80
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	58d3      	ldr	r3, [r2, r3]
 8004da2:	0018      	movs	r0, r3
 8004da4:	f7ff f9e6 	bl	8004174 <sync_window>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d001      	beq.n	8004db0 <dir_next+0x124>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e07f      	b.n	8004eb0 <dir_next+0x224>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	2380      	movs	r3, #128	; 0x80
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	58d3      	ldr	r3, [r2, r3]
 8004db8:	0018      	movs	r0, r3
 8004dba:	2380      	movs	r3, #128	; 0x80
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	001a      	movs	r2, r3
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	f7fe ffc0 	bl	8003d46 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	2380      	movs	r3, #128	; 0x80
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	58d0      	ldr	r0, [r2, r3]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	2380      	movs	r3, #128	; 0x80
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	58d4      	ldr	r4, [r2, r3]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	0019      	movs	r1, r3
 8004dda:	f7ff fb33 	bl	8004444 <clust2sect>
 8004dde:	0002      	movs	r2, r0
 8004de0:	238b      	movs	r3, #139	; 0x8b
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	50e2      	str	r2, [r4, r3]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004de6:	2300      	movs	r3, #0
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	e020      	b.n	8004e2e <dir_next+0x1a2>
						dp->fs->wflag = 1;
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	2380      	movs	r3, #128	; 0x80
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	58d2      	ldr	r2, [r2, r3]
 8004df4:	2381      	movs	r3, #129	; 0x81
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	2101      	movs	r1, #1
 8004dfa:	54d1      	strb	r1, [r2, r3]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	2380      	movs	r3, #128	; 0x80
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	58d3      	ldr	r3, [r2, r3]
 8004e04:	0018      	movs	r0, r3
 8004e06:	f7ff f9b5 	bl	8004174 <sync_window>
 8004e0a:	1e03      	subs	r3, r0, #0
 8004e0c:	d001      	beq.n	8004e12 <dir_next+0x186>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e04e      	b.n	8004eb0 <dir_next+0x224>
						dp->fs->winsect++;
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	2380      	movs	r3, #128	; 0x80
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	58d3      	ldr	r3, [r2, r3]
 8004e1a:	228b      	movs	r2, #139	; 0x8b
 8004e1c:	0092      	lsls	r2, r2, #2
 8004e1e:	589a      	ldr	r2, [r3, r2]
 8004e20:	1c51      	adds	r1, r2, #1
 8004e22:	228b      	movs	r2, #139	; 0x8b
 8004e24:	0092      	lsls	r2, r2, #2
 8004e26:	5099      	str	r1, [r3, r2]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	2380      	movs	r3, #128	; 0x80
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	58d3      	ldr	r3, [r2, r3]
 8004e36:	4a21      	ldr	r2, [pc, #132]	; (8004ebc <dir_next+0x230>)
 8004e38:	5c9b      	ldrb	r3, [r3, r2]
 8004e3a:	001a      	movs	r2, r3
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d3d4      	bcc.n	8004dec <dir_next+0x160>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	2380      	movs	r3, #128	; 0x80
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	58d2      	ldr	r2, [r2, r3]
 8004e4a:	238b      	movs	r3, #139	; 0x8b
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	58d1      	ldr	r1, [r2, r3]
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	58d2      	ldr	r2, [r2, r3]
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ac9      	subs	r1, r1, r3
 8004e5c:	238b      	movs	r3, #139	; 0x8b
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	50d1      	str	r1, [r2, r3]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	2383      	movs	r3, #131	; 0x83
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	6979      	ldr	r1, [r7, #20]
 8004e6a:	50d1      	str	r1, [r2, r3]
				dp->sect = clust2sect(dp->fs, clst);
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	2380      	movs	r3, #128	; 0x80
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	58d3      	ldr	r3, [r2, r3]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	0011      	movs	r1, r2
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f7ff fae3 	bl	8004444 <clust2sect>
 8004e7e:	0001      	movs	r1, r0
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	2384      	movs	r3, #132	; 0x84
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	50d1      	str	r1, [r2, r3]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	b299      	uxth	r1, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a0a      	ldr	r2, [pc, #40]	; (8004eb8 <dir_next+0x22c>)
 8004e90:	5299      	strh	r1, [r3, r2]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	2380      	movs	r3, #128	; 0x80
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	58d3      	ldr	r3, [r2, r3]
 8004e9a:	0019      	movs	r1, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	220f      	movs	r2, #15
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	015b      	lsls	r3, r3, #5
 8004ea4:	18c9      	adds	r1, r1, r3
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	2385      	movs	r3, #133	; 0x85
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	50d1      	str	r1, [r2, r3]

	return FR_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b007      	add	sp, #28
 8004eb6:	bd90      	pop	{r4, r7, pc}
 8004eb8:	00000206 	.word	0x00000206
 8004ebc:	00000202 	.word	0x00000202

08004ec0 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004ec0:	b5b0      	push	{r4, r5, r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004eca:	250f      	movs	r5, #15
 8004ecc:	197c      	adds	r4, r7, r5
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	f7ff fe2a 	bl	8004b2c <dir_sdi>
 8004ed8:	0003      	movs	r3, r0
 8004eda:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8004edc:	197b      	adds	r3, r7, r5
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d13b      	bne.n	8004f5c <dir_alloc+0x9c>
		n = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	2380      	movs	r3, #128	; 0x80
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	58d0      	ldr	r0, [r2, r3]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	2384      	movs	r3, #132	; 0x84
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	58d3      	ldr	r3, [r2, r3]
 8004ef8:	250f      	movs	r5, #15
 8004efa:	197c      	adds	r4, r7, r5
 8004efc:	0019      	movs	r1, r3
 8004efe:	f7ff f991 	bl	8004224 <move_window>
 8004f02:	0003      	movs	r3, r0
 8004f04:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004f06:	197b      	adds	r3, r7, r5
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d125      	bne.n	8004f5a <dir_alloc+0x9a>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	2385      	movs	r3, #133	; 0x85
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	58d3      	ldr	r3, [r2, r3]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2be5      	cmp	r3, #229	; 0xe5
 8004f1a:	d006      	beq.n	8004f2a <dir_alloc+0x6a>
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	2385      	movs	r3, #133	; 0x85
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	58d3      	ldr	r3, [r2, r3]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d107      	bne.n	8004f3a <dir_alloc+0x7a>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	60bb      	str	r3, [r7, #8]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d102      	bne.n	8004f3e <dir_alloc+0x7e>
 8004f38:	e010      	b.n	8004f5c <dir_alloc+0x9c>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004f3e:	250f      	movs	r5, #15
 8004f40:	197c      	adds	r4, r7, r5
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2101      	movs	r1, #1
 8004f46:	0018      	movs	r0, r3
 8004f48:	f7ff fea0 	bl	8004c8c <dir_next>
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
 8004f50:	197b      	adds	r3, r7, r5
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0c7      	beq.n	8004ee8 <dir_alloc+0x28>
 8004f58:	e000      	b.n	8004f5c <dir_alloc+0x9c>
			if (res != FR_OK) break;
 8004f5a:	46c0      	nop			; (mov r8, r8)
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004f5c:	220f      	movs	r2, #15
 8004f5e:	18bb      	adds	r3, r7, r2
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d102      	bne.n	8004f6c <dir_alloc+0xac>
 8004f66:	18bb      	adds	r3, r7, r2
 8004f68:	2207      	movs	r2, #7
 8004f6a:	701a      	strb	r2, [r3, #0]
	return res;
 8004f6c:	230f      	movs	r3, #15
 8004f6e:	18fb      	adds	r3, r7, r3
 8004f70:	781b      	ldrb	r3, [r3, #0]
}
 8004f72:	0018      	movs	r0, r3
 8004f74:	46bd      	mov	sp, r7
 8004f76:	b004      	add	sp, #16
 8004f78:	bdb0      	pop	{r4, r5, r7, pc}

08004f7a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b084      	sub	sp, #16
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	331b      	adds	r3, #27
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	021b      	lsls	r3, r3, #8
 8004f8c:	b21a      	sxth	r2, r3
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	331a      	adds	r3, #26
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	b21b      	sxth	r3, r3
 8004f96:	4313      	orrs	r3, r2
 8004f98:	b21b      	sxth	r3, r3
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	2380      	movs	r3, #128	; 0x80
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	5cd3      	ldrb	r3, [r2, r3]
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d10f      	bne.n	8004fca <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	3315      	adds	r3, #21
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	021b      	lsls	r3, r3, #8
 8004fb2:	b21a      	sxth	r2, r3
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	3314      	adds	r3, #20
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	b21b      	sxth	r3, r3
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	b21b      	sxth	r3, r3
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	041b      	lsls	r3, r3, #16
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

	return cl;
 8004fca:	68fb      	ldr	r3, [r7, #12]
}
 8004fcc:	0018      	movs	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	b004      	add	sp, #16
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	331a      	adds	r3, #26
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	701a      	strb	r2, [r3, #0]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	0a1b      	lsrs	r3, r3, #8
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	331b      	adds	r3, #27
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	0c1a      	lsrs	r2, r3, #16
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3314      	adds	r3, #20
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	0c1b      	lsrs	r3, r3, #16
 8005008:	b29b      	uxth	r3, r3
 800500a:	0a1b      	lsrs	r3, r3, #8
 800500c:	b29a      	uxth	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3315      	adds	r3, #21
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]
}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	46bd      	mov	sp, r7
 800501a:	b002      	add	sp, #8
 800501c:	bd80      	pop	{r7, pc}

0800501e <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800501e:	b5b0      	push	{r4, r5, r7, lr}
 8005020:	b086      	sub	sp, #24
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005026:	2517      	movs	r5, #23
 8005028:	197c      	adds	r4, r7, r5
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2100      	movs	r1, #0
 800502e:	0018      	movs	r0, r3
 8005030:	f7ff fd7c 	bl	8004b2c <dir_sdi>
 8005034:	0003      	movs	r3, r0
 8005036:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8005038:	197b      	adds	r3, r7, r5
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <dir_find+0x28>
 8005040:	197b      	adds	r3, r7, r5
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	e04b      	b.n	80050de <dir_find+0xc0>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	58d0      	ldr	r0, [r2, r3]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	2384      	movs	r3, #132	; 0x84
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	58d3      	ldr	r3, [r2, r3]
 8005056:	2517      	movs	r5, #23
 8005058:	197c      	adds	r4, r7, r5
 800505a:	0019      	movs	r1, r3
 800505c:	f7ff f8e2 	bl	8004224 <move_window>
 8005060:	0003      	movs	r3, r0
 8005062:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8005064:	0029      	movs	r1, r5
 8005066:	187b      	adds	r3, r7, r1
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d131      	bne.n	80050d2 <dir_find+0xb4>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	2385      	movs	r3, #133	; 0x85
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	58d3      	ldr	r3, [r2, r3]
 8005076:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8005078:	200f      	movs	r0, #15
 800507a:	183b      	adds	r3, r7, r0
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	7812      	ldrb	r2, [r2, #0]
 8005080:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005082:	183b      	adds	r3, r7, r0
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d103      	bne.n	8005092 <dir_find+0x74>
 800508a:	187b      	adds	r3, r7, r1
 800508c:	2204      	movs	r2, #4
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	e022      	b.n	80050d8 <dir_find+0xba>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	330b      	adds	r3, #11
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	001a      	movs	r2, r3
 800509a:	2308      	movs	r3, #8
 800509c:	4013      	ands	r3, r2
 800509e:	d10a      	bne.n	80050b6 <dir_find+0x98>
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	2386      	movs	r3, #134	; 0x86
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	58d1      	ldr	r1, [r2, r3]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	220b      	movs	r2, #11
 80050ac:	0018      	movs	r0, r3
 80050ae:	f7fe fe63 	bl	8003d78 <mem_cmp>
 80050b2:	1e03      	subs	r3, r0, #0
 80050b4:	d00f      	beq.n	80050d6 <dir_find+0xb8>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80050b6:	2517      	movs	r5, #23
 80050b8:	197c      	adds	r4, r7, r5
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2100      	movs	r1, #0
 80050be:	0018      	movs	r0, r3
 80050c0:	f7ff fde4 	bl	8004c8c <dir_next>
 80050c4:	0003      	movs	r3, r0
 80050c6:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 80050c8:	197b      	adds	r3, r7, r5
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0ba      	beq.n	8005046 <dir_find+0x28>
 80050d0:	e002      	b.n	80050d8 <dir_find+0xba>
		if (res != FR_OK) break;
 80050d2:	46c0      	nop			; (mov r8, r8)
 80050d4:	e000      	b.n	80050d8 <dir_find+0xba>
			break;
 80050d6:	46c0      	nop			; (mov r8, r8)

	return res;
 80050d8:	2317      	movs	r3, #23
 80050da:	18fb      	adds	r3, r7, r3
 80050dc:	781b      	ldrb	r3, [r3, #0]
}
 80050de:	0018      	movs	r0, r3
 80050e0:	46bd      	mov	sp, r7
 80050e2:	b006      	add	sp, #24
 80050e4:	bdb0      	pop	{r4, r5, r7, pc}

080050e6 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80050e6:	b5b0      	push	{r4, r5, r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80050ee:	250f      	movs	r5, #15
 80050f0:	197c      	adds	r4, r7, r5
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2101      	movs	r1, #1
 80050f6:	0018      	movs	r0, r3
 80050f8:	f7ff fee2 	bl	8004ec0 <dir_alloc>
 80050fc:	0003      	movs	r3, r0
 80050fe:	7023      	strb	r3, [r4, #0]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8005100:	0029      	movs	r1, r5
 8005102:	187b      	adds	r3, r7, r1
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d12f      	bne.n	800516a <dir_register+0x84>
		res = move_window(dp->fs, dp->sect);
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	2380      	movs	r3, #128	; 0x80
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	58d0      	ldr	r0, [r2, r3]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	2384      	movs	r3, #132	; 0x84
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	58d3      	ldr	r3, [r2, r3]
 800511a:	000d      	movs	r5, r1
 800511c:	187c      	adds	r4, r7, r1
 800511e:	0019      	movs	r1, r3
 8005120:	f7ff f880 	bl	8004224 <move_window>
 8005124:	0003      	movs	r3, r0
 8005126:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8005128:	197b      	adds	r3, r7, r5
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d11c      	bne.n	800516a <dir_register+0x84>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	2385      	movs	r3, #133	; 0x85
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	58d3      	ldr	r3, [r2, r3]
 8005138:	2220      	movs	r2, #32
 800513a:	2100      	movs	r1, #0
 800513c:	0018      	movs	r0, r3
 800513e:	f7fe fe02 	bl	8003d46 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	2385      	movs	r3, #133	; 0x85
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	58d0      	ldr	r0, [r2, r3]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	2386      	movs	r3, #134	; 0x86
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	58d3      	ldr	r3, [r2, r3]
 8005152:	220b      	movs	r2, #11
 8005154:	0019      	movs	r1, r3
 8005156:	f7fe fdd9 	bl	8003d0c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	2380      	movs	r3, #128	; 0x80
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	58d2      	ldr	r2, [r2, r3]
 8005162:	2381      	movs	r3, #129	; 0x81
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	2101      	movs	r1, #1
 8005168:	54d1      	strb	r1, [r2, r3]
		}
	}

	return res;
 800516a:	230f      	movs	r3, #15
 800516c:	18fb      	adds	r3, r7, r3
 800516e:	781b      	ldrb	r3, [r3, #0]
}
 8005170:	0018      	movs	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	b004      	add	sp, #16
 8005176:	bdb0      	pop	{r4, r5, r7, pc}

08005178 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b088      	sub	sp, #32
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	e002      	b.n	8005190 <create_name+0x18>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3301      	adds	r3, #1
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b2f      	cmp	r3, #47	; 0x2f
 8005196:	d0f8      	beq.n	800518a <create_name+0x12>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b5c      	cmp	r3, #92	; 0x5c
 800519e:	d0f4      	beq.n	800518a <create_name+0x12>
	sfn = dp->fn;
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	2386      	movs	r3, #134	; 0x86
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	58d3      	ldr	r3, [r2, r3]
 80051a8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	220b      	movs	r2, #11
 80051ae:	2120      	movs	r1, #32
 80051b0:	0018      	movs	r0, r3
 80051b2:	f7fe fdc8 	bl	8003d46 <mem_set>
	si = i = b = 0; ni = 8;
 80051b6:	231f      	movs	r3, #31
 80051b8:	18fb      	adds	r3, r7, r3
 80051ba:	2200      	movs	r2, #0
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	2300      	movs	r3, #0
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	2308      	movs	r3, #8
 80051c8:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	617a      	str	r2, [r7, #20]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	18d2      	adds	r2, r2, r3
 80051d4:	211e      	movs	r1, #30
 80051d6:	187b      	adds	r3, r7, r1
 80051d8:	7812      	ldrb	r2, [r2, #0]
 80051da:	701a      	strb	r2, [r3, #0]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80051dc:	000a      	movs	r2, r1
 80051de:	18bb      	adds	r3, r7, r2
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	d800      	bhi.n	80051e8 <create_name+0x70>
 80051e6:	e077      	b.n	80052d8 <create_name+0x160>
 80051e8:	18bb      	adds	r3, r7, r2
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b2f      	cmp	r3, #47	; 0x2f
 80051ee:	d100      	bne.n	80051f2 <create_name+0x7a>
 80051f0:	e072      	b.n	80052d8 <create_name+0x160>
 80051f2:	18bb      	adds	r3, r7, r2
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b5c      	cmp	r3, #92	; 0x5c
 80051f8:	d100      	bne.n	80051fc <create_name+0x84>
 80051fa:	e06d      	b.n	80052d8 <create_name+0x160>
		if (c == '.' || i >= ni) {
 80051fc:	18bb      	adds	r3, r7, r2
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b2e      	cmp	r3, #46	; 0x2e
 8005202:	d003      	beq.n	800520c <create_name+0x94>
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	429a      	cmp	r2, r3
 800520a:	d314      	bcc.n	8005236 <create_name+0xbe>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2b08      	cmp	r3, #8
 8005210:	d104      	bne.n	800521c <create_name+0xa4>
 8005212:	231e      	movs	r3, #30
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b2e      	cmp	r3, #46	; 0x2e
 800521a:	d001      	beq.n	8005220 <create_name+0xa8>
 800521c:	2306      	movs	r3, #6
 800521e:	e0a3      	b.n	8005368 <create_name+0x1f0>
			i = 8; ni = 11;
 8005220:	2308      	movs	r3, #8
 8005222:	613b      	str	r3, [r7, #16]
 8005224:	230b      	movs	r3, #11
 8005226:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8005228:	221f      	movs	r2, #31
 800522a:	18bb      	adds	r3, r7, r2
 800522c:	18ba      	adds	r2, r7, r2
 800522e:	7812      	ldrb	r2, [r2, #0]
 8005230:	0092      	lsls	r2, r2, #2
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	e04f      	b.n	80052d6 <create_name+0x15e>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005236:	201e      	movs	r0, #30
 8005238:	183b      	adds	r3, r7, r0
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	b25b      	sxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	da0e      	bge.n	8005260 <create_name+0xe8>
			b |= 3;						/* Eliminate NT flag */
 8005242:	221f      	movs	r2, #31
 8005244:	18bb      	adds	r3, r7, r2
 8005246:	18ba      	adds	r2, r7, r2
 8005248:	7812      	ldrb	r2, [r2, #0]
 800524a:	2103      	movs	r1, #3
 800524c:	430a      	orrs	r2, r1
 800524e:	701a      	strb	r2, [r3, #0]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005250:	183b      	adds	r3, r7, r0
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	3b80      	subs	r3, #128	; 0x80
 8005256:	001a      	movs	r2, r3
 8005258:	183b      	adds	r3, r7, r0
 800525a:	4945      	ldr	r1, [pc, #276]	; (8005370 <create_name+0x1f8>)
 800525c:	5c8a      	ldrb	r2, [r1, r2]
 800525e:	701a      	strb	r2, [r3, #0]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8005260:	231e      	movs	r3, #30
 8005262:	18fb      	adds	r3, r7, r3
 8005264:	781a      	ldrb	r2, [r3, #0]
 8005266:	4b43      	ldr	r3, [pc, #268]	; (8005374 <create_name+0x1fc>)
 8005268:	0011      	movs	r1, r2
 800526a:	0018      	movs	r0, r3
 800526c:	f7fe fda9 	bl	8003dc2 <chk_chr>
 8005270:	1e03      	subs	r3, r0, #0
 8005272:	d001      	beq.n	8005278 <create_name+0x100>
				return FR_INVALID_NAME;
 8005274:	2306      	movs	r3, #6
 8005276:	e077      	b.n	8005368 <create_name+0x1f0>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8005278:	221e      	movs	r2, #30
 800527a:	18bb      	adds	r3, r7, r2
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b40      	cmp	r3, #64	; 0x40
 8005280:	d90b      	bls.n	800529a <create_name+0x122>
 8005282:	18bb      	adds	r3, r7, r2
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b5a      	cmp	r3, #90	; 0x5a
 8005288:	d807      	bhi.n	800529a <create_name+0x122>
				b |= 2;
 800528a:	221f      	movs	r2, #31
 800528c:	18bb      	adds	r3, r7, r2
 800528e:	18ba      	adds	r2, r7, r2
 8005290:	7812      	ldrb	r2, [r2, #0]
 8005292:	2102      	movs	r1, #2
 8005294:	430a      	orrs	r2, r1
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	e014      	b.n	80052c4 <create_name+0x14c>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800529a:	201e      	movs	r0, #30
 800529c:	183b      	adds	r3, r7, r0
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b60      	cmp	r3, #96	; 0x60
 80052a2:	d90f      	bls.n	80052c4 <create_name+0x14c>
 80052a4:	183b      	adds	r3, r7, r0
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b7a      	cmp	r3, #122	; 0x7a
 80052aa:	d80b      	bhi.n	80052c4 <create_name+0x14c>
					b |= 1; c -= 0x20;
 80052ac:	221f      	movs	r2, #31
 80052ae:	18bb      	adds	r3, r7, r2
 80052b0:	18ba      	adds	r2, r7, r2
 80052b2:	7812      	ldrb	r2, [r2, #0]
 80052b4:	2101      	movs	r1, #1
 80052b6:	430a      	orrs	r2, r1
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	183b      	adds	r3, r7, r0
 80052bc:	183a      	adds	r2, r7, r0
 80052be:	7812      	ldrb	r2, [r2, #0]
 80052c0:	3a20      	subs	r2, #32
 80052c2:	701a      	strb	r2, [r3, #0]
				}
			}
			sfn[i++] = c;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	613a      	str	r2, [r7, #16]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	18d3      	adds	r3, r2, r3
 80052ce:	221e      	movs	r2, #30
 80052d0:	18ba      	adds	r2, r7, r2
 80052d2:	7812      	ldrb	r2, [r2, #0]
 80052d4:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80052d6:	e778      	b.n	80051ca <create_name+0x52>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	18d2      	adds	r2, r2, r3
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80052e2:	231e      	movs	r3, #30
 80052e4:	18fb      	adds	r3, r7, r3
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	d801      	bhi.n	80052f0 <create_name+0x178>
 80052ec:	2204      	movs	r2, #4
 80052ee:	e000      	b.n	80052f2 <create_name+0x17a>
 80052f0:	2200      	movs	r2, #0
 80052f2:	231e      	movs	r3, #30
 80052f4:	18fb      	adds	r3, r7, r3
 80052f6:	701a      	strb	r2, [r3, #0]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <create_name+0x18a>
 80052fe:	2306      	movs	r3, #6
 8005300:	e032      	b.n	8005368 <create_name+0x1f0>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2be5      	cmp	r3, #229	; 0xe5
 8005308:	d102      	bne.n	8005310 <create_name+0x198>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2205      	movs	r2, #5
 800530e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	2b08      	cmp	r3, #8
 8005314:	d105      	bne.n	8005322 <create_name+0x1aa>
 8005316:	221f      	movs	r2, #31
 8005318:	18bb      	adds	r3, r7, r2
 800531a:	18ba      	adds	r2, r7, r2
 800531c:	7812      	ldrb	r2, [r2, #0]
 800531e:	0092      	lsls	r2, r2, #2
 8005320:	701a      	strb	r2, [r3, #0]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8005322:	231f      	movs	r3, #31
 8005324:	18fb      	adds	r3, r7, r3
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2203      	movs	r2, #3
 800532a:	4013      	ands	r3, r2
 800532c:	2b01      	cmp	r3, #1
 800532e:	d106      	bne.n	800533e <create_name+0x1c6>
 8005330:	221e      	movs	r2, #30
 8005332:	18bb      	adds	r3, r7, r2
 8005334:	18ba      	adds	r2, r7, r2
 8005336:	7812      	ldrb	r2, [r2, #0]
 8005338:	2110      	movs	r1, #16
 800533a:	430a      	orrs	r2, r1
 800533c:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800533e:	231f      	movs	r3, #31
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	220c      	movs	r2, #12
 8005346:	4013      	ands	r3, r2
 8005348:	2b04      	cmp	r3, #4
 800534a:	d106      	bne.n	800535a <create_name+0x1e2>
 800534c:	221e      	movs	r2, #30
 800534e:	18bb      	adds	r3, r7, r2
 8005350:	18ba      	adds	r2, r7, r2
 8005352:	7812      	ldrb	r2, [r2, #0]
 8005354:	2108      	movs	r1, #8
 8005356:	430a      	orrs	r2, r1
 8005358:	701a      	strb	r2, [r3, #0]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	330b      	adds	r3, #11
 800535e:	221e      	movs	r2, #30
 8005360:	18ba      	adds	r2, r7, r2
 8005362:	7812      	ldrb	r2, [r2, #0]
 8005364:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005366:	2300      	movs	r3, #0
#endif
}
 8005368:	0018      	movs	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	b008      	add	sp, #32
 800536e:	bd80      	pop	{r7, pc}
 8005370:	08009840 	.word	0x08009840
 8005374:	080092c8 	.word	0x080092c8

08005378 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005378:	b5b0      	push	{r4, r5, r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b2f      	cmp	r3, #47	; 0x2f
 8005388:	d003      	beq.n	8005392 <follow_path+0x1a>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b5c      	cmp	r3, #92	; 0x5c
 8005390:	d102      	bne.n	8005398 <follow_path+0x20>
		path++;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	3301      	adds	r3, #1
 8005396:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	2382      	movs	r3, #130	; 0x82
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	2100      	movs	r1, #0
 80053a0:	50d1      	str	r1, [r2, r3]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b1f      	cmp	r3, #31
 80053a8:	d80e      	bhi.n	80053c8 <follow_path+0x50>
		res = dir_sdi(dp, 0);
 80053aa:	230f      	movs	r3, #15
 80053ac:	18fc      	adds	r4, r7, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2100      	movs	r1, #0
 80053b2:	0018      	movs	r0, r3
 80053b4:	f7ff fbba 	bl	8004b2c <dir_sdi>
 80053b8:	0003      	movs	r3, r0
 80053ba:	7023      	strb	r3, [r4, #0]
		dp->dir = 0;
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	2385      	movs	r3, #133	; 0x85
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	2100      	movs	r1, #0
 80053c4:	50d1      	str	r1, [r2, r3]
 80053c6:	e058      	b.n	800547a <follow_path+0x102>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80053c8:	250f      	movs	r5, #15
 80053ca:	197c      	adds	r4, r7, r5
 80053cc:	003a      	movs	r2, r7
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	0011      	movs	r1, r2
 80053d2:	0018      	movs	r0, r3
 80053d4:	f7ff fed0 	bl	8005178 <create_name>
 80053d8:	0003      	movs	r3, r0
 80053da:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80053dc:	197b      	adds	r3, r7, r5
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d145      	bne.n	8005470 <follow_path+0xf8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80053e4:	197c      	adds	r4, r7, r5
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	0018      	movs	r0, r3
 80053ea:	f7ff fe18 	bl	800501e <dir_find>
 80053ee:	0003      	movs	r3, r0
 80053f0:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	2386      	movs	r3, #134	; 0x86
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	58d2      	ldr	r2, [r2, r3]
 80053fa:	210e      	movs	r1, #14
 80053fc:	187b      	adds	r3, r7, r1
 80053fe:	7ad2      	ldrb	r2, [r2, #11]
 8005400:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8005402:	197b      	adds	r3, r7, r5
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00c      	beq.n	8005424 <follow_path+0xac>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800540a:	197b      	adds	r3, r7, r5
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	2b04      	cmp	r3, #4
 8005410:	d130      	bne.n	8005474 <follow_path+0xfc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005412:	187b      	adds	r3, r7, r1
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	2204      	movs	r2, #4
 8005418:	4013      	ands	r3, r2
 800541a:	d12b      	bne.n	8005474 <follow_path+0xfc>
 800541c:	197b      	adds	r3, r7, r5
 800541e:	2205      	movs	r2, #5
 8005420:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8005422:	e027      	b.n	8005474 <follow_path+0xfc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005424:	230e      	movs	r3, #14
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2204      	movs	r2, #4
 800542c:	4013      	ands	r3, r2
 800542e:	d123      	bne.n	8005478 <follow_path+0x100>
			dir = dp->dir;						/* Follow the sub-directory */
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	2385      	movs	r3, #133	; 0x85
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	58d3      	ldr	r3, [r2, r3]
 8005438:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	330b      	adds	r3, #11
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	001a      	movs	r2, r3
 8005442:	2310      	movs	r3, #16
 8005444:	4013      	ands	r3, r2
 8005446:	d104      	bne.n	8005452 <follow_path+0xda>
				res = FR_NO_PATH; break;
 8005448:	230f      	movs	r3, #15
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	2205      	movs	r2, #5
 800544e:	701a      	strb	r2, [r3, #0]
 8005450:	e013      	b.n	800547a <follow_path+0x102>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	2380      	movs	r3, #128	; 0x80
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	58d3      	ldr	r3, [r2, r3]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	0011      	movs	r1, r2
 800545e:	0018      	movs	r0, r3
 8005460:	f7ff fd8b 	bl	8004f7a <ld_clust>
 8005464:	0001      	movs	r1, r0
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	2382      	movs	r3, #130	; 0x82
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	50d1      	str	r1, [r2, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800546e:	e7ab      	b.n	80053c8 <follow_path+0x50>
			if (res != FR_OK) break;
 8005470:	46c0      	nop			; (mov r8, r8)
 8005472:	e002      	b.n	800547a <follow_path+0x102>
				break;
 8005474:	46c0      	nop			; (mov r8, r8)
 8005476:	e000      	b.n	800547a <follow_path+0x102>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005478:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
 800547a:	230f      	movs	r3, #15
 800547c:	18fb      	adds	r3, r7, r3
 800547e:	781b      	ldrb	r3, [r3, #0]
}
 8005480:	0018      	movs	r0, r3
 8005482:	46bd      	mov	sp, r7
 8005484:	b004      	add	sp, #16
 8005486:	bdb0      	pop	{r4, r5, r7, pc}

08005488 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005490:	2301      	movs	r3, #1
 8005492:	425b      	negs	r3, r3
 8005494:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d031      	beq.n	8005502 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	e002      	b.n	80054ac <get_ldnumber+0x24>
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	3301      	adds	r3, #1
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b20      	cmp	r3, #32
 80054b2:	d903      	bls.n	80054bc <get_ldnumber+0x34>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b3a      	cmp	r3, #58	; 0x3a
 80054ba:	d1f4      	bne.n	80054a6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b3a      	cmp	r3, #58	; 0x3a
 80054c2:	d11c      	bne.n	80054fe <get_ldnumber+0x76>
			tp = *path;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	60fa      	str	r2, [r7, #12]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	3b30      	subs	r3, #48	; 0x30
 80054d4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b09      	cmp	r3, #9
 80054da:	d80e      	bhi.n	80054fa <get_ldnumber+0x72>
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d10a      	bne.n	80054fa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d107      	bne.n	80054fa <get_ldnumber+0x72>
					vol = (int)i;
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	3301      	adds	r3, #1
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	e002      	b.n	8005504 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80054fe:	2300      	movs	r3, #0
 8005500:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005502:	693b      	ldr	r3, [r7, #16]
}
 8005504:	0018      	movs	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	b006      	add	sp, #24
 800550a:	bd80      	pop	{r7, pc}

0800550c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	2381      	movs	r3, #129	; 0x81
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	2100      	movs	r1, #0
 800551e:	54d1      	strb	r1, [r2, r3]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	238b      	movs	r3, #139	; 0x8b
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	2101      	movs	r1, #1
 8005528:	4249      	negs	r1, r1
 800552a:	50d1      	str	r1, [r2, r3]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	0011      	movs	r1, r2
 8005532:	0018      	movs	r0, r3
 8005534:	f7fe fe76 	bl	8004224 <move_window>
 8005538:	1e03      	subs	r3, r0, #0
 800553a:	d001      	beq.n	8005540 <check_fs+0x34>
		return 3;
 800553c:	2303      	movs	r3, #3
 800553e:	e04b      	b.n	80055d8 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	33ff      	adds	r3, #255	; 0xff
 8005544:	33ff      	adds	r3, #255	; 0xff
 8005546:	3301      	adds	r3, #1
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	021b      	lsls	r3, r3, #8
 800554c:	b21a      	sxth	r2, r3
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	23ff      	movs	r3, #255	; 0xff
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	5ccb      	ldrb	r3, [r1, r3]
 8005556:	b21b      	sxth	r3, r3
 8005558:	4313      	orrs	r3, r2
 800555a:	b21b      	sxth	r3, r3
 800555c:	4a20      	ldr	r2, [pc, #128]	; (80055e0 <check_fs+0xd4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d001      	beq.n	8005566 <check_fs+0x5a>
		return 2;
 8005562:	2302      	movs	r3, #2
 8005564:	e038      	b.n	80055d8 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3336      	adds	r3, #54	; 0x36
 800556a:	3303      	adds	r3, #3
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	061a      	lsls	r2, r3, #24
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3336      	adds	r3, #54	; 0x36
 8005574:	3302      	adds	r3, #2
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	041b      	lsls	r3, r3, #16
 800557a:	4313      	orrs	r3, r2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	3236      	adds	r2, #54	; 0x36
 8005580:	3201      	adds	r2, #1
 8005582:	7812      	ldrb	r2, [r2, #0]
 8005584:	0212      	lsls	r2, r2, #8
 8005586:	4313      	orrs	r3, r2
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	2136      	movs	r1, #54	; 0x36
 800558c:	5c52      	ldrb	r2, [r2, r1]
 800558e:	4313      	orrs	r3, r2
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	0a1b      	lsrs	r3, r3, #8
 8005594:	4a13      	ldr	r2, [pc, #76]	; (80055e4 <check_fs+0xd8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d101      	bne.n	800559e <check_fs+0x92>
		return 0;
 800559a:	2300      	movs	r3, #0
 800559c:	e01c      	b.n	80055d8 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	3352      	adds	r3, #82	; 0x52
 80055a2:	3303      	adds	r3, #3
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	061a      	lsls	r2, r3, #24
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3352      	adds	r3, #82	; 0x52
 80055ac:	3302      	adds	r3, #2
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	041b      	lsls	r3, r3, #16
 80055b2:	4313      	orrs	r3, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	3252      	adds	r2, #82	; 0x52
 80055b8:	3201      	adds	r2, #1
 80055ba:	7812      	ldrb	r2, [r2, #0]
 80055bc:	0212      	lsls	r2, r2, #8
 80055be:	4313      	orrs	r3, r2
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	2152      	movs	r1, #82	; 0x52
 80055c4:	5c52      	ldrb	r2, [r2, r1]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	021b      	lsls	r3, r3, #8
 80055ca:	0a1b      	lsrs	r3, r3, #8
 80055cc:	4a05      	ldr	r2, [pc, #20]	; (80055e4 <check_fs+0xd8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d101      	bne.n	80055d6 <check_fs+0xca>
		return 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	e000      	b.n	80055d8 <check_fs+0xcc>

	return 1;
 80055d6:	2301      	movs	r3, #1
}
 80055d8:	0018      	movs	r0, r3
 80055da:	46bd      	mov	sp, r7
 80055dc:	b002      	add	sp, #8
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	ffffaa55 	.word	0xffffaa55
 80055e4:	00544146 	.word	0x00544146

080055e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80055e8:	b5b0      	push	{r4, r5, r7, lr}
 80055ea:	b096      	sub	sp, #88	; 0x58
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	1dfb      	adds	r3, r7, #7
 80055f4:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	0018      	movs	r0, r3
 8005600:	f7ff ff42 	bl	8005488 <get_ldnumber>
 8005604:	0003      	movs	r3, r0
 8005606:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560a:	2b00      	cmp	r3, #0
 800560c:	da01      	bge.n	8005612 <find_volume+0x2a>
 800560e:	230b      	movs	r3, #11
 8005610:	e2f2      	b.n	8005bf8 <find_volume+0x610>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005612:	4bcf      	ldr	r3, [pc, #828]	; (8005950 <find_volume+0x368>)
 8005614:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005616:	0092      	lsls	r2, r2, #2
 8005618:	58d3      	ldr	r3, [r2, r3]
 800561a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800561c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <find_volume+0x3e>
 8005622:	230c      	movs	r3, #12
 8005624:	e2e8      	b.n	8005bf8 <find_volume+0x610>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800562a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800562c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800562e:	2380      	movs	r3, #128	; 0x80
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	5cd3      	ldrb	r3, [r2, r3]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d01c      	beq.n	8005672 <find_volume+0x8a>
		stat = disk_status(fs->drv);
 8005638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563a:	4ac6      	ldr	r2, [pc, #792]	; (8005954 <find_volume+0x36c>)
 800563c:	5c9b      	ldrb	r3, [r3, r2]
 800563e:	2537      	movs	r5, #55	; 0x37
 8005640:	197c      	adds	r4, r7, r5
 8005642:	0018      	movs	r0, r3
 8005644:	f7fe fa98 	bl	8003b78 <disk_status>
 8005648:	0003      	movs	r3, r0
 800564a:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800564c:	0029      	movs	r1, r5
 800564e:	187b      	adds	r3, r7, r1
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2201      	movs	r2, #1
 8005654:	4013      	ands	r3, r2
 8005656:	d10c      	bne.n	8005672 <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8005658:	1dfb      	adds	r3, r7, #7
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d006      	beq.n	800566e <find_volume+0x86>
 8005660:	187b      	adds	r3, r7, r1
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2204      	movs	r2, #4
 8005666:	4013      	ands	r3, r2
 8005668:	d001      	beq.n	800566e <find_volume+0x86>
				return FR_WRITE_PROTECTED;
 800566a:	230a      	movs	r3, #10
 800566c:	e2c4      	b.n	8005bf8 <find_volume+0x610>
			return FR_OK;				/* The file system object is valid */
 800566e:	2300      	movs	r3, #0
 8005670:	e2c2      	b.n	8005bf8 <find_volume+0x610>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005674:	2380      	movs	r3, #128	; 0x80
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	2100      	movs	r1, #0
 800567a:	54d1      	strb	r1, [r2, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800567c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800567e:	b2d9      	uxtb	r1, r3
 8005680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005682:	4ab4      	ldr	r2, [pc, #720]	; (8005954 <find_volume+0x36c>)
 8005684:	5499      	strb	r1, [r3, r2]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	4ab2      	ldr	r2, [pc, #712]	; (8005954 <find_volume+0x36c>)
 800568a:	5c9b      	ldrb	r3, [r3, r2]
 800568c:	2537      	movs	r5, #55	; 0x37
 800568e:	197c      	adds	r4, r7, r5
 8005690:	0018      	movs	r0, r3
 8005692:	f7fe fa93 	bl	8003bbc <disk_initialize>
 8005696:	0003      	movs	r3, r0
 8005698:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800569a:	197b      	adds	r3, r7, r5
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2201      	movs	r2, #1
 80056a0:	4013      	ands	r3, r2
 80056a2:	d001      	beq.n	80056a8 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80056a4:	2303      	movs	r3, #3
 80056a6:	e2a7      	b.n	8005bf8 <find_volume+0x610>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80056a8:	1dfb      	adds	r3, r7, #7
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d007      	beq.n	80056c0 <find_volume+0xd8>
 80056b0:	2337      	movs	r3, #55	; 0x37
 80056b2:	18fb      	adds	r3, r7, r3
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2204      	movs	r2, #4
 80056b8:	4013      	ands	r3, r2
 80056ba:	d001      	beq.n	80056c0 <find_volume+0xd8>
		return FR_WRITE_PROTECTED;
 80056bc:	230a      	movs	r3, #10
 80056be:	e29b      	b.n	8005bf8 <find_volume+0x610>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80056c4:	2557      	movs	r5, #87	; 0x57
 80056c6:	197c      	adds	r4, r7, r5
 80056c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	0011      	movs	r1, r2
 80056ce:	0018      	movs	r0, r3
 80056d0:	f7ff ff1c 	bl	800550c <check_fs>
 80056d4:	0003      	movs	r3, r0
 80056d6:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80056d8:	197b      	adds	r3, r7, r5
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d155      	bne.n	800578c <find_volume+0x1a4>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80056e0:	2300      	movs	r3, #0
 80056e2:	643b      	str	r3, [r7, #64]	; 0x40
 80056e4:	e027      	b.n	8005736 <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80056e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	33bf      	adds	r3, #191	; 0xbf
 80056ee:	33ff      	adds	r3, #255	; 0xff
 80056f0:	18d3      	adds	r3, r2, r3
 80056f2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	3304      	adds	r3, #4
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d012      	beq.n	8005724 <find_volume+0x13c>
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	330b      	adds	r3, #11
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	061a      	lsls	r2, r3, #24
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	330a      	adds	r3, #10
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	041b      	lsls	r3, r3, #16
 800570e:	4313      	orrs	r3, r2
 8005710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005712:	3209      	adds	r2, #9
 8005714:	7812      	ldrb	r2, [r2, #0]
 8005716:	0212      	lsls	r2, r2, #8
 8005718:	4313      	orrs	r3, r2
 800571a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571c:	3208      	adds	r2, #8
 800571e:	7812      	ldrb	r2, [r2, #0]
 8005720:	4313      	orrs	r3, r2
 8005722:	e000      	b.n	8005726 <find_volume+0x13e>
 8005724:	2300      	movs	r3, #0
 8005726:	2214      	movs	r2, #20
 8005728:	18ba      	adds	r2, r7, r2
 800572a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800572c:	0089      	lsls	r1, r1, #2
 800572e:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005732:	3301      	adds	r3, #1
 8005734:	643b      	str	r3, [r7, #64]	; 0x40
 8005736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005738:	2b03      	cmp	r3, #3
 800573a:	d9d4      	bls.n	80056e6 <find_volume+0xfe>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800573c:	2300      	movs	r3, #0
 800573e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <find_volume+0x164>
 8005746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005748:	3b01      	subs	r3, #1
 800574a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800574c:	2314      	movs	r3, #20
 800574e:	18fb      	adds	r3, r7, r3
 8005750:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005752:	0092      	lsls	r2, r2, #2
 8005754:	58d3      	ldr	r3, [r2, r3]
 8005756:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8005758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800575a:	2b00      	cmp	r3, #0
 800575c:	d008      	beq.n	8005770 <find_volume+0x188>
 800575e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005762:	0011      	movs	r1, r2
 8005764:	0018      	movs	r0, r3
 8005766:	f7ff fed1 	bl	800550c <check_fs>
 800576a:	0003      	movs	r3, r0
 800576c:	001a      	movs	r2, r3
 800576e:	e000      	b.n	8005772 <find_volume+0x18a>
 8005770:	2202      	movs	r2, #2
 8005772:	2157      	movs	r1, #87	; 0x57
 8005774:	187b      	adds	r3, r7, r1
 8005776:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005778:	187b      	adds	r3, r7, r1
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d005      	beq.n	800578c <find_volume+0x1a4>
 8005780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005782:	3301      	adds	r3, #1
 8005784:	643b      	str	r3, [r7, #64]	; 0x40
 8005786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005788:	2b03      	cmp	r3, #3
 800578a:	d9df      	bls.n	800574c <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800578c:	2357      	movs	r3, #87	; 0x57
 800578e:	18fb      	adds	r3, r7, r3
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	2b03      	cmp	r3, #3
 8005794:	d101      	bne.n	800579a <find_volume+0x1b2>
 8005796:	2301      	movs	r3, #1
 8005798:	e22e      	b.n	8005bf8 <find_volume+0x610>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800579a:	2357      	movs	r3, #87	; 0x57
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <find_volume+0x1c0>
 80057a4:	230d      	movs	r3, #13
 80057a6:	e227      	b.n	8005bf8 <find_volume+0x610>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80057a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057aa:	7b1b      	ldrb	r3, [r3, #12]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	b21a      	sxth	r2, r3
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	7adb      	ldrb	r3, [r3, #11]
 80057b4:	b21b      	sxth	r3, r3
 80057b6:	4313      	orrs	r3, r2
 80057b8:	b21a      	sxth	r2, r3
 80057ba:	2380      	movs	r3, #128	; 0x80
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	429a      	cmp	r2, r3
 80057c0:	d001      	beq.n	80057c6 <find_volume+0x1de>
		return FR_NO_FILESYSTEM;
 80057c2:	230d      	movs	r3, #13
 80057c4:	e218      	b.n	8005bf8 <find_volume+0x610>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80057c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c8:	7ddb      	ldrb	r3, [r3, #23]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	b21a      	sxth	r2, r3
 80057ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d0:	7d9b      	ldrb	r3, [r3, #22]
 80057d2:	b21b      	sxth	r3, r3
 80057d4:	4313      	orrs	r3, r2
 80057d6:	b21b      	sxth	r3, r3
 80057d8:	b29b      	uxth	r3, r3
 80057da:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80057dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d112      	bne.n	8005808 <find_volume+0x220>
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	2227      	movs	r2, #39	; 0x27
 80057e6:	5c9b      	ldrb	r3, [r3, r2]
 80057e8:	061a      	lsls	r2, r3, #24
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	2126      	movs	r1, #38	; 0x26
 80057ee:	5c5b      	ldrb	r3, [r3, r1]
 80057f0:	041b      	lsls	r3, r3, #16
 80057f2:	4313      	orrs	r3, r2
 80057f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057f6:	2125      	movs	r1, #37	; 0x25
 80057f8:	5c52      	ldrb	r2, [r2, r1]
 80057fa:	0212      	lsls	r2, r2, #8
 80057fc:	4313      	orrs	r3, r2
 80057fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005800:	2124      	movs	r1, #36	; 0x24
 8005802:	5c52      	ldrb	r2, [r2, r1]
 8005804:	4313      	orrs	r3, r2
 8005806:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8005808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800580a:	2386      	movs	r3, #134	; 0x86
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005810:	50d1      	str	r1, [r2, r3]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8005812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005814:	7c19      	ldrb	r1, [r3, #16]
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	4a4f      	ldr	r2, [pc, #316]	; (8005958 <find_volume+0x370>)
 800581a:	5499      	strb	r1, [r3, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	4a4e      	ldr	r2, [pc, #312]	; (8005958 <find_volume+0x370>)
 8005820:	5c9b      	ldrb	r3, [r3, r2]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d006      	beq.n	8005834 <find_volume+0x24c>
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	4a4b      	ldr	r2, [pc, #300]	; (8005958 <find_volume+0x370>)
 800582a:	5c9b      	ldrb	r3, [r3, r2]
 800582c:	2b02      	cmp	r3, #2
 800582e:	d001      	beq.n	8005834 <find_volume+0x24c>
		return FR_NO_FILESYSTEM;
 8005830:	230d      	movs	r3, #13
 8005832:	e1e1      	b.n	8005bf8 <find_volume+0x610>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	4a48      	ldr	r2, [pc, #288]	; (8005958 <find_volume+0x370>)
 8005838:	5c9b      	ldrb	r3, [r3, r2]
 800583a:	001a      	movs	r2, r3
 800583c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800583e:	4353      	muls	r3, r2
 8005840:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005844:	7b59      	ldrb	r1, [r3, #13]
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	4a44      	ldr	r2, [pc, #272]	; (800595c <find_volume+0x374>)
 800584a:	5499      	strb	r1, [r3, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	4a43      	ldr	r2, [pc, #268]	; (800595c <find_volume+0x374>)
 8005850:	5c9b      	ldrb	r3, [r3, r2]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d009      	beq.n	800586a <find_volume+0x282>
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	4a40      	ldr	r2, [pc, #256]	; (800595c <find_volume+0x374>)
 800585a:	5c9b      	ldrb	r3, [r3, r2]
 800585c:	0019      	movs	r1, r3
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	4a3e      	ldr	r2, [pc, #248]	; (800595c <find_volume+0x374>)
 8005862:	5c9b      	ldrb	r3, [r3, r2]
 8005864:	3b01      	subs	r3, #1
 8005866:	400b      	ands	r3, r1
 8005868:	d001      	beq.n	800586e <find_volume+0x286>
		return FR_NO_FILESYSTEM;
 800586a:	230d      	movs	r3, #13
 800586c:	e1c4      	b.n	8005bf8 <find_volume+0x610>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800586e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005870:	7c9b      	ldrb	r3, [r3, #18]
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	b21a      	sxth	r2, r3
 8005876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005878:	7c5b      	ldrb	r3, [r3, #17]
 800587a:	b21b      	sxth	r3, r3
 800587c:	4313      	orrs	r3, r2
 800587e:	b21b      	sxth	r3, r3
 8005880:	b299      	uxth	r1, r3
 8005882:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005884:	2382      	movs	r3, #130	; 0x82
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	52d1      	strh	r1, [r2, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800588a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800588c:	2382      	movs	r3, #130	; 0x82
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	5ad3      	ldrh	r3, [r2, r3]
 8005892:	220f      	movs	r2, #15
 8005894:	4013      	ands	r3, r2
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <find_volume+0x2b8>
		return FR_NO_FILESYSTEM;
 800589c:	230d      	movs	r3, #13
 800589e:	e1ab      	b.n	8005bf8 <find_volume+0x610>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80058a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a2:	7d1b      	ldrb	r3, [r3, #20]
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	b21a      	sxth	r2, r3
 80058a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058aa:	7cdb      	ldrb	r3, [r3, #19]
 80058ac:	b21b      	sxth	r3, r3
 80058ae:	4313      	orrs	r3, r2
 80058b0:	b21b      	sxth	r3, r3
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80058b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d112      	bne.n	80058e2 <find_volume+0x2fa>
 80058bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058be:	2223      	movs	r2, #35	; 0x23
 80058c0:	5c9b      	ldrb	r3, [r3, r2]
 80058c2:	061a      	lsls	r2, r3, #24
 80058c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c6:	2122      	movs	r1, #34	; 0x22
 80058c8:	5c5b      	ldrb	r3, [r3, r1]
 80058ca:	041b      	lsls	r3, r3, #16
 80058cc:	4313      	orrs	r3, r2
 80058ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058d0:	2121      	movs	r1, #33	; 0x21
 80058d2:	5c52      	ldrb	r2, [r2, r1]
 80058d4:	0212      	lsls	r2, r2, #8
 80058d6:	4313      	orrs	r3, r2
 80058d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058da:	2120      	movs	r1, #32
 80058dc:	5c52      	ldrb	r2, [r2, r1]
 80058de:	4313      	orrs	r3, r2
 80058e0:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80058e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e4:	7bdb      	ldrb	r3, [r3, #15]
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	b21a      	sxth	r2, r3
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	7b9b      	ldrb	r3, [r3, #14]
 80058ee:	b21b      	sxth	r3, r3
 80058f0:	4313      	orrs	r3, r2
 80058f2:	b21a      	sxth	r2, r3
 80058f4:	212e      	movs	r1, #46	; 0x2e
 80058f6:	187b      	adds	r3, r7, r1
 80058f8:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80058fa:	187b      	adds	r3, r7, r1
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <find_volume+0x31e>
 8005902:	230d      	movs	r3, #13
 8005904:	e178      	b.n	8005bf8 <find_volume+0x610>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005906:	232e      	movs	r3, #46	; 0x2e
 8005908:	18fb      	adds	r3, r7, r3
 800590a:	881a      	ldrh	r2, [r3, #0]
 800590c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800590e:	18d3      	adds	r3, r2, r3
 8005910:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005912:	2282      	movs	r2, #130	; 0x82
 8005914:	0092      	lsls	r2, r2, #2
 8005916:	5a8a      	ldrh	r2, [r1, r2]
 8005918:	0912      	lsrs	r2, r2, #4
 800591a:	b292      	uxth	r2, r2
 800591c:	189b      	adds	r3, r3, r2
 800591e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005920:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	429a      	cmp	r2, r3
 8005926:	d201      	bcs.n	800592c <find_volume+0x344>
 8005928:	230d      	movs	r3, #13
 800592a:	e165      	b.n	8005bf8 <find_volume+0x610>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800592c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	1ad2      	subs	r2, r2, r3
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	4909      	ldr	r1, [pc, #36]	; (800595c <find_volume+0x374>)
 8005936:	5c5b      	ldrb	r3, [r3, r1]
 8005938:	0019      	movs	r1, r3
 800593a:	0010      	movs	r0, r2
 800593c:	f7fa fbf6 	bl	800012c <__udivsi3>
 8005940:	0003      	movs	r3, r0
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10a      	bne.n	8005960 <find_volume+0x378>
 800594a:	230d      	movs	r3, #13
 800594c:	e154      	b.n	8005bf8 <find_volume+0x610>
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	200001f0 	.word	0x200001f0
 8005954:	00000201 	.word	0x00000201
 8005958:	00000203 	.word	0x00000203
 800595c:	00000202 	.word	0x00000202
	fmt = FS_FAT12;
 8005960:	2157      	movs	r1, #87	; 0x57
 8005962:	187b      	adds	r3, r7, r1
 8005964:	2201      	movs	r2, #1
 8005966:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	4aa5      	ldr	r2, [pc, #660]	; (8005c00 <find_volume+0x618>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d902      	bls.n	8005976 <find_volume+0x38e>
 8005970:	187b      	adds	r3, r7, r1
 8005972:	2202      	movs	r2, #2
 8005974:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	4aa2      	ldr	r2, [pc, #648]	; (8005c04 <find_volume+0x61c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d903      	bls.n	8005986 <find_volume+0x39e>
 800597e:	2357      	movs	r3, #87	; 0x57
 8005980:	18fb      	adds	r3, r7, r3
 8005982:	2203      	movs	r2, #3
 8005984:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	1c99      	adds	r1, r3, #2
 800598a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800598c:	2385      	movs	r3, #133	; 0x85
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	50d1      	str	r1, [r2, r3]
	fs->volbase = bsect;								/* Volume start sector */
 8005992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005994:	2387      	movs	r3, #135	; 0x87
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800599a:	50d1      	str	r1, [r2, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800599c:	232e      	movs	r3, #46	; 0x2e
 800599e:	18fb      	adds	r3, r7, r3
 80059a0:	881a      	ldrh	r2, [r3, #0]
 80059a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059a4:	18d1      	adds	r1, r2, r3
 80059a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059a8:	2388      	movs	r3, #136	; 0x88
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	50d1      	str	r1, [r2, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 80059ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	18d1      	adds	r1, r2, r3
 80059b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059b6:	238a      	movs	r3, #138	; 0x8a
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	50d1      	str	r1, [r2, r3]
	if (fmt == FS_FAT32) {
 80059bc:	2357      	movs	r3, #87	; 0x57
 80059be:	18fb      	adds	r3, r7, r3
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	d125      	bne.n	8005a12 <find_volume+0x42a>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80059c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059c8:	2382      	movs	r3, #130	; 0x82
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	5ad3      	ldrh	r3, [r2, r3]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <find_volume+0x3ee>
 80059d2:	230d      	movs	r3, #13
 80059d4:	e110      	b.n	8005bf8 <find_volume+0x610>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80059d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d8:	222f      	movs	r2, #47	; 0x2f
 80059da:	5c9b      	ldrb	r3, [r3, r2]
 80059dc:	061a      	lsls	r2, r3, #24
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	212e      	movs	r1, #46	; 0x2e
 80059e2:	5c5b      	ldrb	r3, [r3, r1]
 80059e4:	041b      	lsls	r3, r3, #16
 80059e6:	4313      	orrs	r3, r2
 80059e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059ea:	212d      	movs	r1, #45	; 0x2d
 80059ec:	5c52      	ldrb	r2, [r2, r1]
 80059ee:	0212      	lsls	r2, r2, #8
 80059f0:	4313      	orrs	r3, r2
 80059f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059f4:	212c      	movs	r1, #44	; 0x2c
 80059f6:	5c52      	ldrb	r2, [r2, r1]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	0019      	movs	r1, r3
 80059fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059fe:	2389      	movs	r3, #137	; 0x89
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	50d1      	str	r1, [r2, r3]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005a04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a06:	2385      	movs	r3, #133	; 0x85
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	58d3      	ldr	r3, [r2, r3]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a10:	e02c      	b.n	8005a6c <find_volume+0x484>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a14:	2382      	movs	r3, #130	; 0x82
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	5ad3      	ldrh	r3, [r2, r3]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <find_volume+0x43a>
 8005a1e:	230d      	movs	r3, #13
 8005a20:	e0ea      	b.n	8005bf8 <find_volume+0x610>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005a22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a24:	2388      	movs	r3, #136	; 0x88
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	58d2      	ldr	r2, [r2, r3]
 8005a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a2c:	18d1      	adds	r1, r2, r3
 8005a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a30:	2389      	movs	r3, #137	; 0x89
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	50d1      	str	r1, [r2, r3]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005a36:	2357      	movs	r3, #87	; 0x57
 8005a38:	18fb      	adds	r3, r7, r3
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d105      	bne.n	8005a4c <find_volume+0x464>
 8005a40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a42:	2385      	movs	r3, #133	; 0x85
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	58d3      	ldr	r3, [r2, r3]
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	e00e      	b.n	8005a6a <find_volume+0x482>
 8005a4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a4e:	2385      	movs	r3, #133	; 0x85
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	58d2      	ldr	r2, [r2, r3]
 8005a54:	0013      	movs	r3, r2
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	189b      	adds	r3, r3, r2
 8005a5a:	085a      	lsrs	r2, r3, #1
 8005a5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a5e:	2385      	movs	r3, #133	; 0x85
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	58cb      	ldr	r3, [r1, r3]
 8005a64:	2101      	movs	r1, #1
 8005a66:	400b      	ands	r3, r1
 8005a68:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005a6a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005a6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a6e:	2386      	movs	r3, #134	; 0x86
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	58d2      	ldr	r2, [r2, r3]
 8005a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a76:	4964      	ldr	r1, [pc, #400]	; (8005c08 <find_volume+0x620>)
 8005a78:	468c      	mov	ip, r1
 8005a7a:	4463      	add	r3, ip
 8005a7c:	0a5b      	lsrs	r3, r3, #9
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d201      	bcs.n	8005a86 <find_volume+0x49e>
		return FR_NO_FILESYSTEM;
 8005a82:	230d      	movs	r3, #13
 8005a84:	e0b8      	b.n	8005bf8 <find_volume+0x610>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005a86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a88:	2384      	movs	r3, #132	; 0x84
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	4249      	negs	r1, r1
 8005a90:	50d1      	str	r1, [r2, r3]
 8005a92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a94:	2384      	movs	r3, #132	; 0x84
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	58d1      	ldr	r1, [r2, r3]
 8005a9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a9c:	2383      	movs	r3, #131	; 0x83
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	50d1      	str	r1, [r2, r3]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	4a59      	ldr	r2, [pc, #356]	; (8005c0c <find_volume+0x624>)
 8005aa6:	2180      	movs	r1, #128	; 0x80
 8005aa8:	5499      	strb	r1, [r3, r2]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005aaa:	2357      	movs	r3, #87	; 0x57
 8005aac:	18fb      	adds	r3, r7, r3
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d000      	beq.n	8005ab6 <find_volume+0x4ce>
 8005ab4:	e089      	b.n	8005bca <find_volume+0x5e2>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab8:	2231      	movs	r2, #49	; 0x31
 8005aba:	5c9b      	ldrb	r3, [r3, r2]
 8005abc:	021b      	lsls	r3, r3, #8
 8005abe:	b21a      	sxth	r2, r3
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	2130      	movs	r1, #48	; 0x30
 8005ac4:	5c5b      	ldrb	r3, [r3, r1]
 8005ac6:	b21b      	sxth	r3, r3
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	b21b      	sxth	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d000      	beq.n	8005ad2 <find_volume+0x4ea>
 8005ad0:	e07b      	b.n	8005bca <find_volume+0x5e2>
		&& move_window(fs, bsect + 1) == FR_OK)
 8005ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad8:	0011      	movs	r1, r2
 8005ada:	0018      	movs	r0, r3
 8005adc:	f7fe fba2 	bl	8004224 <move_window>
 8005ae0:	1e03      	subs	r3, r0, #0
 8005ae2:	d172      	bne.n	8005bca <find_volume+0x5e2>
	{
		fs->fsi_flag = 0;
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae6:	4a49      	ldr	r2, [pc, #292]	; (8005c0c <find_volume+0x624>)
 8005ae8:	2100      	movs	r1, #0
 8005aea:	5499      	strb	r1, [r3, r2]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aee:	4a46      	ldr	r2, [pc, #280]	; (8005c08 <find_volume+0x620>)
 8005af0:	5c9b      	ldrb	r3, [r3, r2]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	b21a      	sxth	r2, r3
 8005af6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005af8:	23ff      	movs	r3, #255	; 0xff
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	5ccb      	ldrb	r3, [r1, r3]
 8005afe:	b21b      	sxth	r3, r3
 8005b00:	4313      	orrs	r3, r2
 8005b02:	b21b      	sxth	r3, r3
 8005b04:	4a42      	ldr	r2, [pc, #264]	; (8005c10 <find_volume+0x628>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d15f      	bne.n	8005bca <find_volume+0x5e2>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	78db      	ldrb	r3, [r3, #3]
 8005b0e:	061a      	lsls	r2, r3, #24
 8005b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b12:	789b      	ldrb	r3, [r3, #2]
 8005b14:	041b      	lsls	r3, r3, #16
 8005b16:	4313      	orrs	r3, r2
 8005b18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b1a:	7852      	ldrb	r2, [r2, #1]
 8005b1c:	0212      	lsls	r2, r2, #8
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b22:	7812      	ldrb	r2, [r2, #0]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	4a3b      	ldr	r2, [pc, #236]	; (8005c14 <find_volume+0x62c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d14e      	bne.n	8005bca <find_volume+0x5e2>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005b2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b2e:	23e8      	movs	r3, #232	; 0xe8
 8005b30:	33ff      	adds	r3, #255	; 0xff
 8005b32:	5cd3      	ldrb	r3, [r2, r3]
 8005b34:	061a      	lsls	r2, r3, #24
 8005b36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b38:	23f3      	movs	r3, #243	; 0xf3
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	5ccb      	ldrb	r3, [r1, r3]
 8005b3e:	041b      	lsls	r3, r3, #16
 8005b40:	4313      	orrs	r3, r2
 8005b42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b44:	22e6      	movs	r2, #230	; 0xe6
 8005b46:	32ff      	adds	r2, #255	; 0xff
 8005b48:	5c8a      	ldrb	r2, [r1, r2]
 8005b4a:	0212      	lsls	r2, r2, #8
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b50:	22f2      	movs	r2, #242	; 0xf2
 8005b52:	0052      	lsls	r2, r2, #1
 8005b54:	5c8a      	ldrb	r2, [r1, r2]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	4a2f      	ldr	r2, [pc, #188]	; (8005c18 <find_volume+0x630>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d135      	bne.n	8005bca <find_volume+0x5e2>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8005b5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b60:	23ec      	movs	r3, #236	; 0xec
 8005b62:	33ff      	adds	r3, #255	; 0xff
 8005b64:	5cd3      	ldrb	r3, [r2, r3]
 8005b66:	061a      	lsls	r2, r3, #24
 8005b68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b6a:	23f5      	movs	r3, #245	; 0xf5
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	5ccb      	ldrb	r3, [r1, r3]
 8005b70:	041b      	lsls	r3, r3, #16
 8005b72:	4313      	orrs	r3, r2
 8005b74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b76:	22ea      	movs	r2, #234	; 0xea
 8005b78:	32ff      	adds	r2, #255	; 0xff
 8005b7a:	5c8a      	ldrb	r2, [r1, r2]
 8005b7c:	0212      	lsls	r2, r2, #8
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b82:	22f4      	movs	r2, #244	; 0xf4
 8005b84:	0052      	lsls	r2, r2, #1
 8005b86:	5c8a      	ldrb	r2, [r1, r2]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	0019      	movs	r1, r3
 8005b8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b8e:	2384      	movs	r3, #132	; 0x84
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	50d1      	str	r1, [r2, r3]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b96:	23f0      	movs	r3, #240	; 0xf0
 8005b98:	33ff      	adds	r3, #255	; 0xff
 8005b9a:	5cd3      	ldrb	r3, [r2, r3]
 8005b9c:	061a      	lsls	r2, r3, #24
 8005b9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ba0:	23f7      	movs	r3, #247	; 0xf7
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	5ccb      	ldrb	r3, [r1, r3]
 8005ba6:	041b      	lsls	r3, r3, #16
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bac:	22ee      	movs	r2, #238	; 0xee
 8005bae:	32ff      	adds	r2, #255	; 0xff
 8005bb0:	5c8a      	ldrb	r2, [r1, r2]
 8005bb2:	0212      	lsls	r2, r2, #8
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bb8:	22f6      	movs	r2, #246	; 0xf6
 8005bba:	0052      	lsls	r2, r2, #1
 8005bbc:	5c8a      	ldrb	r2, [r1, r2]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	0019      	movs	r1, r3
 8005bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bc4:	2383      	movs	r3, #131	; 0x83
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	50d1      	str	r1, [r2, r3]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8005bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bcc:	2357      	movs	r3, #87	; 0x57
 8005bce:	18f9      	adds	r1, r7, r3
 8005bd0:	2380      	movs	r3, #128	; 0x80
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	7809      	ldrb	r1, [r1, #0]
 8005bd6:	54d1      	strb	r1, [r2, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 8005bd8:	4b10      	ldr	r3, [pc, #64]	; (8005c1c <find_volume+0x634>)
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	4b0e      	ldr	r3, [pc, #56]	; (8005c1c <find_volume+0x634>)
 8005be2:	801a      	strh	r2, [r3, #0]
 8005be4:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <find_volume+0x634>)
 8005be6:	8819      	ldrh	r1, [r3, #0]
 8005be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bea:	4a0d      	ldr	r2, [pc, #52]	; (8005c20 <find_volume+0x638>)
 8005bec:	5299      	strh	r1, [r3, r2]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8005bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f7fe fa99 	bl	8004128 <clear_lock>
#endif

	return FR_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	b016      	add	sp, #88	; 0x58
 8005bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8005c00:	00000ff5 	.word	0x00000ff5
 8005c04:	0000fff5 	.word	0x0000fff5
 8005c08:	000001ff 	.word	0x000001ff
 8005c0c:	00000205 	.word	0x00000205
 8005c10:	ffffaa55 	.word	0xffffaa55
 8005c14:	41615252 	.word	0x41615252
 8005c18:	61417272 	.word	0x61417272
 8005c1c:	200001f4 	.word	0x200001f4
 8005c20:	00000206 	.word	0x00000206

08005c24 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d028      	beq.n	8005c88 <validate+0x64>
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	2380      	movs	r3, #128	; 0x80
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	58d3      	ldr	r3, [r2, r3]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d022      	beq.n	8005c88 <validate+0x64>
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	2380      	movs	r3, #128	; 0x80
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	58d2      	ldr	r2, [r2, r3]
 8005c4a:	2380      	movs	r3, #128	; 0x80
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	5cd3      	ldrb	r3, [r2, r3]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d019      	beq.n	8005c88 <validate+0x64>
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	2380      	movs	r3, #128	; 0x80
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	58d3      	ldr	r3, [r2, r3]
 8005c5c:	4a0e      	ldr	r2, [pc, #56]	; (8005c98 <validate+0x74>)
 8005c5e:	5a9a      	ldrh	r2, [r3, r2]
 8005c60:	68f9      	ldr	r1, [r7, #12]
 8005c62:	2381      	movs	r3, #129	; 0x81
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	5acb      	ldrh	r3, [r1, r3]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d10d      	bne.n	8005c88 <validate+0x64>
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	2380      	movs	r3, #128	; 0x80
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	58d3      	ldr	r3, [r2, r3]
 8005c74:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <validate+0x78>)
 8005c76:	5c9b      	ldrb	r3, [r3, r2]
 8005c78:	0018      	movs	r0, r3
 8005c7a:	f7fd ff7d 	bl	8003b78 <disk_status>
 8005c7e:	0003      	movs	r3, r0
 8005c80:	001a      	movs	r2, r3
 8005c82:	2301      	movs	r3, #1
 8005c84:	4013      	ands	r3, r2
 8005c86:	d001      	beq.n	8005c8c <validate+0x68>
		return FR_INVALID_OBJECT;
 8005c88:	2309      	movs	r3, #9
 8005c8a:	e000      	b.n	8005c8e <validate+0x6a>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	0018      	movs	r0, r3
 8005c90:	46bd      	mov	sp, r7
 8005c92:	b004      	add	sp, #16
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	00000206 	.word	0x00000206
 8005c9c:	00000201 	.word	0x00000201

08005ca0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005ca0:	b5b0      	push	{r4, r5, r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	1dfb      	adds	r3, r7, #7
 8005cac:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005cb2:	2310      	movs	r3, #16
 8005cb4:	18fb      	adds	r3, r7, r3
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	f7ff fbe6 	bl	8005488 <get_ldnumber>
 8005cbc:	0003      	movs	r3, r0
 8005cbe:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	da01      	bge.n	8005cca <f_mount+0x2a>
 8005cc6:	230b      	movs	r3, #11
 8005cc8:	e034      	b.n	8005d34 <f_mount+0x94>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005cca:	4b1c      	ldr	r3, [pc, #112]	; (8005d3c <f_mount+0x9c>)
 8005ccc:	69fa      	ldr	r2, [r7, #28]
 8005cce:	0092      	lsls	r2, r2, #2
 8005cd0:	58d3      	ldr	r3, [r2, r3]
 8005cd2:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d008      	beq.n	8005cec <f_mount+0x4c>
#if _FS_LOCK
		clear_lock(cfs);
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f7fe fa23 	bl	8004128 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	2380      	movs	r3, #128	; 0x80
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	2100      	movs	r1, #0
 8005cea:	54d1      	strb	r1, [r2, r3]
	}

	if (fs) {
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d004      	beq.n	8005cfc <f_mount+0x5c>
		fs->fs_type = 0;				/* Clear new fs object */
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	2380      	movs	r3, #128	; 0x80
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	54d1      	strb	r1, [r2, r3]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005cfc:	68f9      	ldr	r1, [r7, #12]
 8005cfe:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <f_mount+0x9c>)
 8005d00:	69fa      	ldr	r2, [r7, #28]
 8005d02:	0092      	lsls	r2, r2, #2
 8005d04:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d003      	beq.n	8005d14 <f_mount+0x74>
 8005d0c:	1dfb      	adds	r3, r7, #7
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d001      	beq.n	8005d18 <f_mount+0x78>
 8005d14:	2300      	movs	r3, #0
 8005d16:	e00d      	b.n	8005d34 <f_mount+0x94>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005d18:	2517      	movs	r5, #23
 8005d1a:	197c      	adds	r4, r7, r5
 8005d1c:	2308      	movs	r3, #8
 8005d1e:	18f9      	adds	r1, r7, r3
 8005d20:	230c      	movs	r3, #12
 8005d22:	18fb      	adds	r3, r7, r3
 8005d24:	2200      	movs	r2, #0
 8005d26:	0018      	movs	r0, r3
 8005d28:	f7ff fc5e 	bl	80055e8 <find_volume>
 8005d2c:	0003      	movs	r3, r0
 8005d2e:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8005d30:	197b      	adds	r3, r7, r5
 8005d32:	781b      	ldrb	r3, [r3, #0]
}
 8005d34:	0018      	movs	r0, r3
 8005d36:	46bd      	mov	sp, r7
 8005d38:	b008      	add	sp, #32
 8005d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8005d3c:	200001f0 	.word	0x200001f0

08005d40 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d42:	4cda      	ldr	r4, [pc, #872]	; (80060ac <f_open+0x36c>)
 8005d44:	44a5      	add	sp, r4
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	4bd8      	ldr	r3, [pc, #864]	; (80060b0 <f_open+0x370>)
 8005d4e:	2194      	movs	r1, #148	; 0x94
 8005d50:	0089      	lsls	r1, r1, #2
 8005d52:	468c      	mov	ip, r1
 8005d54:	44bc      	add	ip, r7
 8005d56:	4463      	add	r3, ip
 8005d58:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <f_open+0x24>
 8005d60:	2309      	movs	r3, #9
 8005d62:	e285      	b.n	8006270 <f_open+0x530>
	fp->fs = 0;			/* Clear file object */
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	2380      	movs	r3, #128	; 0x80
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	50d1      	str	r1, [r2, r3]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005d6e:	4bd0      	ldr	r3, [pc, #832]	; (80060b0 <f_open+0x370>)
 8005d70:	2294      	movs	r2, #148	; 0x94
 8005d72:	0092      	lsls	r2, r2, #2
 8005d74:	4694      	mov	ip, r2
 8005d76:	44bc      	add	ip, r7
 8005d78:	4463      	add	r3, ip
 8005d7a:	4acd      	ldr	r2, [pc, #820]	; (80060b0 <f_open+0x370>)
 8005d7c:	2194      	movs	r1, #148	; 0x94
 8005d7e:	0089      	lsls	r1, r1, #2
 8005d80:	468c      	mov	ip, r1
 8005d82:	44bc      	add	ip, r7
 8005d84:	4462      	add	r2, ip
 8005d86:	7812      	ldrb	r2, [r2, #0]
 8005d88:	211f      	movs	r1, #31
 8005d8a:	400a      	ands	r2, r1
 8005d8c:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005d8e:	4bc8      	ldr	r3, [pc, #800]	; (80060b0 <f_open+0x370>)
 8005d90:	2294      	movs	r2, #148	; 0x94
 8005d92:	0092      	lsls	r2, r2, #2
 8005d94:	4694      	mov	ip, r2
 8005d96:	44bc      	add	ip, r7
 8005d98:	4463      	add	r3, ip
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	4393      	bics	r3, r2
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	4dc4      	ldr	r5, [pc, #784]	; (80060b4 <f_open+0x374>)
 8005da4:	197c      	adds	r4, r7, r5
 8005da6:	2308      	movs	r3, #8
 8005da8:	18f9      	adds	r1, r7, r3
 8005daa:	2620      	movs	r6, #32
 8005dac:	19bb      	adds	r3, r7, r6
 8005dae:	2080      	movs	r0, #128	; 0x80
 8005db0:	0080      	lsls	r0, r0, #2
 8005db2:	4684      	mov	ip, r0
 8005db4:	4463      	add	r3, ip
 8005db6:	0018      	movs	r0, r3
 8005db8:	f7ff fc16 	bl	80055e8 <find_volume>
 8005dbc:	0003      	movs	r3, r0
 8005dbe:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005dc0:	197b      	adds	r3, r7, r5
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d000      	beq.n	8005dca <f_open+0x8a>
 8005dc8:	e24f      	b.n	800626a <f_open+0x52a>
		INIT_BUF(dj);
 8005dca:	4bbb      	ldr	r3, [pc, #748]	; (80060b8 <f_open+0x378>)
 8005dcc:	2294      	movs	r2, #148	; 0x94
 8005dce:	0092      	lsls	r2, r2, #2
 8005dd0:	18b9      	adds	r1, r7, r2
 8005dd2:	18ca      	adds	r2, r1, r3
 8005dd4:	2386      	movs	r3, #134	; 0x86
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	2114      	movs	r1, #20
 8005dda:	1879      	adds	r1, r7, r1
 8005ddc:	50d1      	str	r1, [r2, r3]
		res = follow_path(&dj, path);	/* Follow the file path */
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	197c      	adds	r4, r7, r5
 8005de2:	19bb      	adds	r3, r7, r6
 8005de4:	0011      	movs	r1, r2
 8005de6:	0018      	movs	r0, r3
 8005de8:	f7ff fac6 	bl	8005378 <follow_path>
 8005dec:	0003      	movs	r3, r0
 8005dee:	7023      	strb	r3, [r4, #0]
		dir = dj.dir;
 8005df0:	4bb1      	ldr	r3, [pc, #708]	; (80060b8 <f_open+0x378>)
 8005df2:	2294      	movs	r2, #148	; 0x94
 8005df4:	0092      	lsls	r2, r2, #2
 8005df6:	18ba      	adds	r2, r7, r2
 8005df8:	18d2      	adds	r2, r2, r3
 8005dfa:	2385      	movs	r3, #133	; 0x85
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	58d3      	ldr	r3, [r2, r3]
 8005e00:	2292      	movs	r2, #146	; 0x92
 8005e02:	0092      	lsls	r2, r2, #2
 8005e04:	18b9      	adds	r1, r7, r2
 8005e06:	600b      	str	r3, [r1, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005e08:	197b      	adds	r3, r7, r5
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d11e      	bne.n	8005e4e <f_open+0x10e>
			if (!dir)	/* Default directory itself */
 8005e10:	18bb      	adds	r3, r7, r2
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d103      	bne.n	8005e20 <f_open+0xe0>
				res = FR_INVALID_NAME;
 8005e18:	197b      	adds	r3, r7, r5
 8005e1a:	2206      	movs	r2, #6
 8005e1c:	701a      	strb	r2, [r3, #0]
 8005e1e:	e016      	b.n	8005e4e <f_open+0x10e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005e20:	4ba3      	ldr	r3, [pc, #652]	; (80060b0 <f_open+0x370>)
 8005e22:	2294      	movs	r2, #148	; 0x94
 8005e24:	0092      	lsls	r2, r2, #2
 8005e26:	4694      	mov	ip, r2
 8005e28:	44bc      	add	ip, r7
 8005e2a:	4463      	add	r3, ip
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	4393      	bics	r3, r2
 8005e32:	1e5a      	subs	r2, r3, #1
 8005e34:	4193      	sbcs	r3, r2
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	001a      	movs	r2, r3
 8005e3a:	4b9e      	ldr	r3, [pc, #632]	; (80060b4 <f_open+0x374>)
 8005e3c:	18fc      	adds	r4, r7, r3
 8005e3e:	2320      	movs	r3, #32
 8005e40:	18fb      	adds	r3, r7, r3
 8005e42:	0011      	movs	r1, r2
 8005e44:	0018      	movs	r0, r3
 8005e46:	f7fd ffd5 	bl	8003df4 <chk_lock>
 8005e4a:	0003      	movs	r3, r0
 8005e4c:	7023      	strb	r3, [r4, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005e4e:	4b98      	ldr	r3, [pc, #608]	; (80060b0 <f_open+0x370>)
 8005e50:	2294      	movs	r2, #148	; 0x94
 8005e52:	0092      	lsls	r2, r2, #2
 8005e54:	4694      	mov	ip, r2
 8005e56:	44bc      	add	ip, r7
 8005e58:	4463      	add	r3, ip
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	221c      	movs	r2, #28
 8005e5e:	4013      	ands	r3, r2
 8005e60:	d100      	bne.n	8005e64 <f_open+0x124>
 8005e62:	e10f      	b.n	8006084 <f_open+0x344>
			if (res != FR_OK) {					/* No file, create new */
 8005e64:	4a93      	ldr	r2, [pc, #588]	; (80060b4 <f_open+0x374>)
 8005e66:	18bb      	adds	r3, r7, r2
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d030      	beq.n	8005ed0 <f_open+0x190>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005e6e:	18bb      	adds	r3, r7, r2
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d10f      	bne.n	8005e96 <f_open+0x156>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005e76:	f7fe f82b 	bl	8003ed0 <enq_lock>
 8005e7a:	1e03      	subs	r3, r0, #0
 8005e7c:	d007      	beq.n	8005e8e <f_open+0x14e>
 8005e7e:	2320      	movs	r3, #32
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	0018      	movs	r0, r3
 8005e84:	f7ff f92f 	bl	80050e6 <dir_register>
 8005e88:	0003      	movs	r3, r0
 8005e8a:	001a      	movs	r2, r3
 8005e8c:	e000      	b.n	8005e90 <f_open+0x150>
 8005e8e:	2212      	movs	r2, #18
 8005e90:	4b88      	ldr	r3, [pc, #544]	; (80060b4 <f_open+0x374>)
 8005e92:	18fb      	adds	r3, r7, r3
 8005e94:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005e96:	4b86      	ldr	r3, [pc, #536]	; (80060b0 <f_open+0x370>)
 8005e98:	2294      	movs	r2, #148	; 0x94
 8005e9a:	0092      	lsls	r2, r2, #2
 8005e9c:	4694      	mov	ip, r2
 8005e9e:	44bc      	add	ip, r7
 8005ea0:	4463      	add	r3, ip
 8005ea2:	4a83      	ldr	r2, [pc, #524]	; (80060b0 <f_open+0x370>)
 8005ea4:	2194      	movs	r1, #148	; 0x94
 8005ea6:	0089      	lsls	r1, r1, #2
 8005ea8:	468c      	mov	ip, r1
 8005eaa:	44bc      	add	ip, r7
 8005eac:	4462      	add	r2, ip
 8005eae:	7812      	ldrb	r2, [r2, #0]
 8005eb0:	2108      	movs	r1, #8
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8005eb6:	4b80      	ldr	r3, [pc, #512]	; (80060b8 <f_open+0x378>)
 8005eb8:	2294      	movs	r2, #148	; 0x94
 8005eba:	0092      	lsls	r2, r2, #2
 8005ebc:	18ba      	adds	r2, r7, r2
 8005ebe:	18d2      	adds	r2, r2, r3
 8005ec0:	2385      	movs	r3, #133	; 0x85
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	58d3      	ldr	r3, [r2, r3]
 8005ec6:	2292      	movs	r2, #146	; 0x92
 8005ec8:	0092      	lsls	r2, r2, #2
 8005eca:	18ba      	adds	r2, r7, r2
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	e01c      	b.n	8005f0a <f_open+0x1ca>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005ed0:	2392      	movs	r3, #146	; 0x92
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	18fb      	adds	r3, r7, r3
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	330b      	adds	r3, #11
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	001a      	movs	r2, r3
 8005ede:	2311      	movs	r3, #17
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d004      	beq.n	8005eee <f_open+0x1ae>
					res = FR_DENIED;
 8005ee4:	4b73      	ldr	r3, [pc, #460]	; (80060b4 <f_open+0x374>)
 8005ee6:	18fb      	adds	r3, r7, r3
 8005ee8:	2207      	movs	r2, #7
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	e00d      	b.n	8005f0a <f_open+0x1ca>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005eee:	4b70      	ldr	r3, [pc, #448]	; (80060b0 <f_open+0x370>)
 8005ef0:	2294      	movs	r2, #148	; 0x94
 8005ef2:	0092      	lsls	r2, r2, #2
 8005ef4:	4694      	mov	ip, r2
 8005ef6:	44bc      	add	ip, r7
 8005ef8:	4463      	add	r3, ip
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2204      	movs	r2, #4
 8005efe:	4013      	ands	r3, r2
 8005f00:	d003      	beq.n	8005f0a <f_open+0x1ca>
						res = FR_EXIST;
 8005f02:	4b6c      	ldr	r3, [pc, #432]	; (80060b4 <f_open+0x374>)
 8005f04:	18fb      	adds	r3, r7, r3
 8005f06:	2208      	movs	r2, #8
 8005f08:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005f0a:	486a      	ldr	r0, [pc, #424]	; (80060b4 <f_open+0x374>)
 8005f0c:	183b      	adds	r3, r7, r0
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d000      	beq.n	8005f16 <f_open+0x1d6>
 8005f14:	e0ea      	b.n	80060ec <f_open+0x3ac>
 8005f16:	4b66      	ldr	r3, [pc, #408]	; (80060b0 <f_open+0x370>)
 8005f18:	2294      	movs	r2, #148	; 0x94
 8005f1a:	0092      	lsls	r2, r2, #2
 8005f1c:	4694      	mov	ip, r2
 8005f1e:	44bc      	add	ip, r7
 8005f20:	4463      	add	r3, ip
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2208      	movs	r2, #8
 8005f26:	4013      	ands	r3, r2
 8005f28:	d100      	bne.n	8005f2c <f_open+0x1ec>
 8005f2a:	e0df      	b.n	80060ec <f_open+0x3ac>
				dw = GET_FATTIME();				/* Created time */
 8005f2c:	f7fc f81e 	bl	8001f6c <get_fattime>
 8005f30:	0003      	movs	r3, r0
 8005f32:	2591      	movs	r5, #145	; 0x91
 8005f34:	00ad      	lsls	r5, r5, #2
 8005f36:	197a      	adds	r2, r7, r5
 8005f38:	6013      	str	r3, [r2, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005f3a:	2192      	movs	r1, #146	; 0x92
 8005f3c:	0089      	lsls	r1, r1, #2
 8005f3e:	187b      	adds	r3, r7, r1
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	330e      	adds	r3, #14
 8005f44:	197a      	adds	r2, r7, r5
 8005f46:	6812      	ldr	r2, [r2, #0]
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	197b      	adds	r3, r7, r5
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	0a1b      	lsrs	r3, r3, #8
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	187b      	adds	r3, r7, r1
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	330f      	adds	r3, #15
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	701a      	strb	r2, [r3, #0]
 8005f60:	197b      	adds	r3, r7, r5
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	0c1a      	lsrs	r2, r3, #16
 8005f66:	187b      	adds	r3, r7, r1
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3310      	adds	r3, #16
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	197b      	adds	r3, r7, r5
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	0e1a      	lsrs	r2, r3, #24
 8005f76:	187b      	adds	r3, r7, r1
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3311      	adds	r3, #17
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005f80:	187b      	adds	r3, r7, r1
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330b      	adds	r3, #11
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005f8a:	187b      	adds	r3, r7, r1
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	331c      	adds	r3, #28
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	187b      	adds	r3, r7, r1
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	331d      	adds	r3, #29
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	187b      	adds	r3, r7, r1
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	331e      	adds	r3, #30
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	701a      	strb	r2, [r3, #0]
 8005fa8:	187b      	adds	r3, r7, r1
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	331f      	adds	r3, #31
 8005fae:	2200      	movs	r2, #0
 8005fb0:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005fb2:	4b41      	ldr	r3, [pc, #260]	; (80060b8 <f_open+0x378>)
 8005fb4:	2694      	movs	r6, #148	; 0x94
 8005fb6:	00b6      	lsls	r6, r6, #2
 8005fb8:	19ba      	adds	r2, r7, r6
 8005fba:	18d2      	adds	r2, r2, r3
 8005fbc:	2380      	movs	r3, #128	; 0x80
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	58d3      	ldr	r3, [r2, r3]
 8005fc2:	000c      	movs	r4, r1
 8005fc4:	187a      	adds	r2, r7, r1
 8005fc6:	6812      	ldr	r2, [r2, #0]
 8005fc8:	0011      	movs	r1, r2
 8005fca:	0018      	movs	r0, r3
 8005fcc:	f7fe ffd5 	bl	8004f7a <ld_clust>
 8005fd0:	0003      	movs	r3, r0
 8005fd2:	2190      	movs	r1, #144	; 0x90
 8005fd4:	0089      	lsls	r1, r1, #2
 8005fd6:	187a      	adds	r2, r7, r1
 8005fd8:	6013      	str	r3, [r2, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8005fda:	193b      	adds	r3, r7, r4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2100      	movs	r1, #0
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	f7fe fff7 	bl	8004fd4 <st_clust>
				dj.fs->wflag = 1;
 8005fe6:	4b34      	ldr	r3, [pc, #208]	; (80060b8 <f_open+0x378>)
 8005fe8:	19ba      	adds	r2, r7, r6
 8005fea:	18d2      	adds	r2, r2, r3
 8005fec:	2380      	movs	r3, #128	; 0x80
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	58d2      	ldr	r2, [r2, r3]
 8005ff2:	2381      	movs	r3, #129	; 0x81
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	54d1      	strb	r1, [r2, r3]
				if (cl) {						/* Remove the cluster chain if exist */
 8005ffa:	2190      	movs	r1, #144	; 0x90
 8005ffc:	0089      	lsls	r1, r1, #2
 8005ffe:	187b      	adds	r3, r7, r1
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d100      	bne.n	8006008 <f_open+0x2c8>
 8006006:	e071      	b.n	80060ec <f_open+0x3ac>
					dw = dj.fs->winsect;
 8006008:	4b2b      	ldr	r3, [pc, #172]	; (80060b8 <f_open+0x378>)
 800600a:	19ba      	adds	r2, r7, r6
 800600c:	18d2      	adds	r2, r2, r3
 800600e:	2380      	movs	r3, #128	; 0x80
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	58d2      	ldr	r2, [r2, r3]
 8006014:	238b      	movs	r3, #139	; 0x8b
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	58d3      	ldr	r3, [r2, r3]
 800601a:	197a      	adds	r2, r7, r5
 800601c:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800601e:	4b26      	ldr	r3, [pc, #152]	; (80060b8 <f_open+0x378>)
 8006020:	19ba      	adds	r2, r7, r6
 8006022:	18d2      	adds	r2, r2, r3
 8006024:	2380      	movs	r3, #128	; 0x80
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	58d3      	ldr	r3, [r2, r3]
 800602a:	4822      	ldr	r0, [pc, #136]	; (80060b4 <f_open+0x374>)
 800602c:	183c      	adds	r4, r7, r0
 800602e:	187a      	adds	r2, r7, r1
 8006030:	6812      	ldr	r2, [r2, #0]
 8006032:	0011      	movs	r1, r2
 8006034:	0018      	movs	r0, r3
 8006036:	f7fe fc19 	bl	800486c <remove_chain>
 800603a:	0003      	movs	r3, r0
 800603c:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
 800603e:	481d      	ldr	r0, [pc, #116]	; (80060b4 <f_open+0x374>)
 8006040:	183b      	adds	r3, r7, r0
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d151      	bne.n	80060ec <f_open+0x3ac>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8006048:	4b1b      	ldr	r3, [pc, #108]	; (80060b8 <f_open+0x378>)
 800604a:	19ba      	adds	r2, r7, r6
 800604c:	18d2      	adds	r2, r2, r3
 800604e:	2380      	movs	r3, #128	; 0x80
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	58d2      	ldr	r2, [r2, r3]
 8006054:	2190      	movs	r1, #144	; 0x90
 8006056:	0089      	lsls	r1, r1, #2
 8006058:	187b      	adds	r3, r7, r1
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	1e59      	subs	r1, r3, #1
 800605e:	2383      	movs	r3, #131	; 0x83
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	50d1      	str	r1, [r2, r3]
						res = move_window(dj.fs, dw);
 8006064:	4b14      	ldr	r3, [pc, #80]	; (80060b8 <f_open+0x378>)
 8006066:	19ba      	adds	r2, r7, r6
 8006068:	18d2      	adds	r2, r2, r3
 800606a:	2380      	movs	r3, #128	; 0x80
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	58d3      	ldr	r3, [r2, r3]
 8006070:	183c      	adds	r4, r7, r0
 8006072:	197a      	adds	r2, r7, r5
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	0011      	movs	r1, r2
 8006078:	0018      	movs	r0, r3
 800607a:	f7fe f8d3 	bl	8004224 <move_window>
 800607e:	0003      	movs	r3, r0
 8006080:	7023      	strb	r3, [r4, #0]
 8006082:	e033      	b.n	80060ec <f_open+0x3ac>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8006084:	490b      	ldr	r1, [pc, #44]	; (80060b4 <f_open+0x374>)
 8006086:	187b      	adds	r3, r7, r1
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d12e      	bne.n	80060ec <f_open+0x3ac>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800608e:	2392      	movs	r3, #146	; 0x92
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	18fb      	adds	r3, r7, r3
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	330b      	adds	r3, #11
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	001a      	movs	r2, r3
 800609c:	2310      	movs	r3, #16
 800609e:	4013      	ands	r3, r2
 80060a0:	d00c      	beq.n	80060bc <f_open+0x37c>
					res = FR_NO_FILE;
 80060a2:	187b      	adds	r3, r7, r1
 80060a4:	2204      	movs	r2, #4
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	e020      	b.n	80060ec <f_open+0x3ac>
 80060aa:	46c0      	nop			; (mov r8, r8)
 80060ac:	fffffdac 	.word	0xfffffdac
 80060b0:	fffffdb7 	.word	0xfffffdb7
 80060b4:	0000024f 	.word	0x0000024f
 80060b8:	fffffdd0 	.word	0xfffffdd0
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80060bc:	4b6f      	ldr	r3, [pc, #444]	; (800627c <f_open+0x53c>)
 80060be:	2294      	movs	r2, #148	; 0x94
 80060c0:	0092      	lsls	r2, r2, #2
 80060c2:	4694      	mov	ip, r2
 80060c4:	44bc      	add	ip, r7
 80060c6:	4463      	add	r3, ip
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2202      	movs	r2, #2
 80060cc:	4013      	ands	r3, r2
 80060ce:	d00d      	beq.n	80060ec <f_open+0x3ac>
 80060d0:	2392      	movs	r3, #146	; 0x92
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	18fb      	adds	r3, r7, r3
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	330b      	adds	r3, #11
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	001a      	movs	r2, r3
 80060de:	2301      	movs	r3, #1
 80060e0:	4013      	ands	r3, r2
 80060e2:	d003      	beq.n	80060ec <f_open+0x3ac>
						res = FR_DENIED;
 80060e4:	4b66      	ldr	r3, [pc, #408]	; (8006280 <f_open+0x540>)
 80060e6:	18fb      	adds	r3, r7, r3
 80060e8:	2207      	movs	r2, #7
 80060ea:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (res == FR_OK) {
 80060ec:	4b64      	ldr	r3, [pc, #400]	; (8006280 <f_open+0x540>)
 80060ee:	18fb      	adds	r3, r7, r3
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d152      	bne.n	800619c <f_open+0x45c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80060f6:	4b61      	ldr	r3, [pc, #388]	; (800627c <f_open+0x53c>)
 80060f8:	2294      	movs	r2, #148	; 0x94
 80060fa:	0092      	lsls	r2, r2, #2
 80060fc:	4694      	mov	ip, r2
 80060fe:	44bc      	add	ip, r7
 8006100:	4463      	add	r3, ip
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2208      	movs	r2, #8
 8006106:	4013      	ands	r3, r2
 8006108:	d00f      	beq.n	800612a <f_open+0x3ea>
				mode |= FA__WRITTEN;
 800610a:	4b5c      	ldr	r3, [pc, #368]	; (800627c <f_open+0x53c>)
 800610c:	2294      	movs	r2, #148	; 0x94
 800610e:	0092      	lsls	r2, r2, #2
 8006110:	4694      	mov	ip, r2
 8006112:	44bc      	add	ip, r7
 8006114:	4463      	add	r3, ip
 8006116:	4a59      	ldr	r2, [pc, #356]	; (800627c <f_open+0x53c>)
 8006118:	2194      	movs	r1, #148	; 0x94
 800611a:	0089      	lsls	r1, r1, #2
 800611c:	468c      	mov	ip, r1
 800611e:	44bc      	add	ip, r7
 8006120:	4462      	add	r2, ip
 8006122:	7812      	ldrb	r2, [r2, #0]
 8006124:	2120      	movs	r1, #32
 8006126:	430a      	orrs	r2, r1
 8006128:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800612a:	4b56      	ldr	r3, [pc, #344]	; (8006284 <f_open+0x544>)
 800612c:	2294      	movs	r2, #148	; 0x94
 800612e:	0092      	lsls	r2, r2, #2
 8006130:	18ba      	adds	r2, r7, r2
 8006132:	18d2      	adds	r2, r2, r3
 8006134:	2380      	movs	r3, #128	; 0x80
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	58d2      	ldr	r2, [r2, r3]
 800613a:	238b      	movs	r3, #139	; 0x8b
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	58d1      	ldr	r1, [r2, r3]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	2387      	movs	r3, #135	; 0x87
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	50d1      	str	r1, [r2, r3]
			fp->dir_ptr = dir;
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	2388      	movs	r3, #136	; 0x88
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	2192      	movs	r1, #146	; 0x92
 8006150:	0089      	lsls	r1, r1, #2
 8006152:	1879      	adds	r1, r7, r1
 8006154:	6809      	ldr	r1, [r1, #0]
 8006156:	50d1      	str	r1, [r2, r3]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006158:	4b48      	ldr	r3, [pc, #288]	; (800627c <f_open+0x53c>)
 800615a:	2294      	movs	r2, #148	; 0x94
 800615c:	0092      	lsls	r2, r2, #2
 800615e:	4694      	mov	ip, r2
 8006160:	44bc      	add	ip, r7
 8006162:	4463      	add	r3, ip
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2201      	movs	r2, #1
 8006168:	4393      	bics	r3, r2
 800616a:	1e5a      	subs	r2, r3, #1
 800616c:	4193      	sbcs	r3, r2
 800616e:	b2db      	uxtb	r3, r3
 8006170:	001a      	movs	r2, r3
 8006172:	2320      	movs	r3, #32
 8006174:	18fb      	adds	r3, r7, r3
 8006176:	0011      	movs	r1, r2
 8006178:	0018      	movs	r0, r3
 800617a:	f7fd fec9 	bl	8003f10 <inc_lock>
 800617e:	0001      	movs	r1, r0
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	238a      	movs	r3, #138	; 0x8a
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	50d1      	str	r1, [r2, r3]
			if (!fp->lockid) res = FR_INT_ERR;
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	238a      	movs	r3, #138	; 0x8a
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	58d3      	ldr	r3, [r2, r3]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d103      	bne.n	800619c <f_open+0x45c>
 8006194:	4b3a      	ldr	r3, [pc, #232]	; (8006280 <f_open+0x540>)
 8006196:	18fb      	adds	r3, r7, r3
 8006198:	2202      	movs	r2, #2
 800619a:	701a      	strb	r2, [r3, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800619c:	4b38      	ldr	r3, [pc, #224]	; (8006280 <f_open+0x540>)
 800619e:	18fb      	adds	r3, r7, r3
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d161      	bne.n	800626a <f_open+0x52a>
			fp->flag = mode;					/* File access mode */
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4a34      	ldr	r2, [pc, #208]	; (800627c <f_open+0x53c>)
 80061aa:	2194      	movs	r1, #148	; 0x94
 80061ac:	0089      	lsls	r1, r1, #2
 80061ae:	468c      	mov	ip, r1
 80061b0:	44bc      	add	ip, r7
 80061b2:	4462      	add	r2, ip
 80061b4:	4934      	ldr	r1, [pc, #208]	; (8006288 <f_open+0x548>)
 80061b6:	7812      	ldrb	r2, [r2, #0]
 80061b8:	545a      	strb	r2, [r3, r1]
			fp->err = 0;						/* Clear error flag */
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4a33      	ldr	r2, [pc, #204]	; (800628c <f_open+0x54c>)
 80061be:	2100      	movs	r1, #0
 80061c0:	5499      	strb	r1, [r3, r2]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80061c2:	4b30      	ldr	r3, [pc, #192]	; (8006284 <f_open+0x544>)
 80061c4:	2594      	movs	r5, #148	; 0x94
 80061c6:	00ad      	lsls	r5, r5, #2
 80061c8:	197a      	adds	r2, r7, r5
 80061ca:	18d2      	adds	r2, r2, r3
 80061cc:	2380      	movs	r3, #128	; 0x80
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	58d3      	ldr	r3, [r2, r3]
 80061d2:	2492      	movs	r4, #146	; 0x92
 80061d4:	00a4      	lsls	r4, r4, #2
 80061d6:	193a      	adds	r2, r7, r4
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	0011      	movs	r1, r2
 80061dc:	0018      	movs	r0, r3
 80061de:	f7fe fecc 	bl	8004f7a <ld_clust>
 80061e2:	0001      	movs	r1, r0
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	2384      	movs	r3, #132	; 0x84
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	50d1      	str	r1, [r2, r3]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80061ec:	0021      	movs	r1, r4
 80061ee:	187b      	adds	r3, r7, r1
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	331f      	adds	r3, #31
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	061a      	lsls	r2, r3, #24
 80061f8:	187b      	adds	r3, r7, r1
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	331e      	adds	r3, #30
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	041b      	lsls	r3, r3, #16
 8006202:	4313      	orrs	r3, r2
 8006204:	187a      	adds	r2, r7, r1
 8006206:	6812      	ldr	r2, [r2, #0]
 8006208:	321d      	adds	r2, #29
 800620a:	7812      	ldrb	r2, [r2, #0]
 800620c:	0212      	lsls	r2, r2, #8
 800620e:	4313      	orrs	r3, r2
 8006210:	187a      	adds	r2, r7, r1
 8006212:	6812      	ldr	r2, [r2, #0]
 8006214:	321c      	adds	r2, #28
 8006216:	7812      	ldrb	r2, [r2, #0]
 8006218:	4313      	orrs	r3, r2
 800621a:	0019      	movs	r1, r3
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	2383      	movs	r3, #131	; 0x83
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	50d1      	str	r1, [r2, r3]
			fp->fptr = 0;						/* File pointer */
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	2382      	movs	r3, #130	; 0x82
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	2100      	movs	r1, #0
 800622c:	50d1      	str	r1, [r2, r3]
			fp->dsect = 0;
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	2386      	movs	r3, #134	; 0x86
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	2100      	movs	r1, #0
 8006236:	50d1      	str	r1, [r2, r3]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	2389      	movs	r3, #137	; 0x89
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	2100      	movs	r1, #0
 8006240:	50d1      	str	r1, [r2, r3]
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8006242:	4b10      	ldr	r3, [pc, #64]	; (8006284 <f_open+0x544>)
 8006244:	197a      	adds	r2, r7, r5
 8006246:	18d2      	adds	r2, r2, r3
 8006248:	2380      	movs	r3, #128	; 0x80
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	58d1      	ldr	r1, [r2, r3]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	2380      	movs	r3, #128	; 0x80
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	50d1      	str	r1, [r2, r3]
			fp->id = fp->fs->id;
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	2380      	movs	r3, #128	; 0x80
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	58d3      	ldr	r3, [r2, r3]
 800625e:	4a0a      	ldr	r2, [pc, #40]	; (8006288 <f_open+0x548>)
 8006260:	5a99      	ldrh	r1, [r3, r2]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	2381      	movs	r3, #129	; 0x81
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	52d1      	strh	r1, [r2, r3]
		}
	}

	LEAVE_FF(dj.fs, res);
 800626a:	4b05      	ldr	r3, [pc, #20]	; (8006280 <f_open+0x540>)
 800626c:	18fb      	adds	r3, r7, r3
 800626e:	781b      	ldrb	r3, [r3, #0]
}
 8006270:	0018      	movs	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	2395      	movs	r3, #149	; 0x95
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	449d      	add	sp, r3
 800627a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800627c:	fffffdb7 	.word	0xfffffdb7
 8006280:	0000024f 	.word	0x0000024f
 8006284:	fffffdd0 	.word	0xfffffdd0
 8006288:	00000206 	.word	0x00000206
 800628c:	00000207 	.word	0x00000207

08006290 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8006290:	b5b0      	push	{r4, r5, r7, lr}
 8006292:	b08c      	sub	sp, #48	; 0x30
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2200      	movs	r2, #0
 80062a6:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80062a8:	251f      	movs	r5, #31
 80062aa:	197c      	adds	r4, r7, r5
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	0018      	movs	r0, r3
 80062b0:	f7ff fcb8 	bl	8005c24 <validate>
 80062b4:	0003      	movs	r3, r0
 80062b6:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80062b8:	197b      	adds	r3, r7, r5
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <f_read+0x36>
 80062c0:	197b      	adds	r3, r7, r5
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	e171      	b.n	80065aa <f_read+0x31a>
	if (fp->err)								/* Check error */
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4aba      	ldr	r2, [pc, #744]	; (80065b4 <f_read+0x324>)
 80062ca:	5c9b      	ldrb	r3, [r3, r2]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d003      	beq.n	80062d8 <f_read+0x48>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4ab8      	ldr	r2, [pc, #736]	; (80065b4 <f_read+0x324>)
 80062d4:	5c9b      	ldrb	r3, [r3, r2]
 80062d6:	e168      	b.n	80065aa <f_read+0x31a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4ab7      	ldr	r2, [pc, #732]	; (80065b8 <f_read+0x328>)
 80062dc:	5c9b      	ldrb	r3, [r3, r2]
 80062de:	001a      	movs	r2, r3
 80062e0:	2301      	movs	r3, #1
 80062e2:	4013      	ands	r3, r2
 80062e4:	d101      	bne.n	80062ea <f_read+0x5a>
		LEAVE_FF(fp->fs, FR_DENIED);
 80062e6:	2307      	movs	r3, #7
 80062e8:	e15f      	b.n	80065aa <f_read+0x31a>
	remain = fp->fsize - fp->fptr;
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	2383      	movs	r3, #131	; 0x83
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	58d2      	ldr	r2, [r2, r3]
 80062f2:	68f9      	ldr	r1, [r7, #12]
 80062f4:	2382      	movs	r3, #130	; 0x82
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	58cb      	ldr	r3, [r1, r3]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	429a      	cmp	r2, r3
 8006304:	d800      	bhi.n	8006308 <f_read+0x78>
 8006306:	e14b      	b.n	80065a0 <f_read+0x310>
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800630c:	e148      	b.n	80065a0 <f_read+0x310>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	2382      	movs	r3, #130	; 0x82
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	58d3      	ldr	r3, [r2, r3]
 8006316:	05db      	lsls	r3, r3, #23
 8006318:	0ddb      	lsrs	r3, r3, #23
 800631a:	d000      	beq.n	800631e <f_read+0x8e>
 800631c:	e10b      	b.n	8006536 <f_read+0x2a6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	2382      	movs	r3, #130	; 0x82
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	58d3      	ldr	r3, [r2, r3]
 8006326:	0a5b      	lsrs	r3, r3, #9
 8006328:	b2da      	uxtb	r2, r3
 800632a:	68f9      	ldr	r1, [r7, #12]
 800632c:	2380      	movs	r3, #128	; 0x80
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	58cb      	ldr	r3, [r1, r3]
 8006332:	49a2      	ldr	r1, [pc, #648]	; (80065bc <f_read+0x32c>)
 8006334:	5c5b      	ldrb	r3, [r3, r1]
 8006336:	3b01      	subs	r3, #1
 8006338:	b2d9      	uxtb	r1, r3
 800633a:	2017      	movs	r0, #23
 800633c:	183b      	adds	r3, r7, r0
 800633e:	400a      	ands	r2, r1
 8006340:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
 8006342:	183b      	adds	r3, r7, r0
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d141      	bne.n	80063ce <f_read+0x13e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	2382      	movs	r3, #130	; 0x82
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	58d3      	ldr	r3, [r2, r3]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d105      	bne.n	8006362 <f_read+0xd2>
					clst = fp->sclust;			/* Follow from the origin */
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	2384      	movs	r3, #132	; 0x84
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	58d3      	ldr	r3, [r2, r3]
 800635e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006360:	e01e      	b.n	80063a0 <f_read+0x110>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	2389      	movs	r3, #137	; 0x89
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	58d3      	ldr	r3, [r2, r3]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00b      	beq.n	8006386 <f_read+0xf6>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	2382      	movs	r3, #130	; 0x82
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	58d2      	ldr	r2, [r2, r3]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	0011      	movs	r1, r2
 800637a:	0018      	movs	r0, r3
 800637c:	f7fe fb9c 	bl	8004ab8 <clmt_clust>
 8006380:	0003      	movs	r3, r0
 8006382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006384:	e00c      	b.n	80063a0 <f_read+0x110>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	2380      	movs	r3, #128	; 0x80
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	58d0      	ldr	r0, [r2, r3]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	2385      	movs	r3, #133	; 0x85
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	58d3      	ldr	r3, [r2, r3]
 8006396:	0019      	movs	r1, r3
 8006398:	f7fe f878 	bl	800448c <get_fat>
 800639c:	0003      	movs	r3, r0
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d805      	bhi.n	80063b2 <f_read+0x122>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4a82      	ldr	r2, [pc, #520]	; (80065b4 <f_read+0x324>)
 80063aa:	2102      	movs	r1, #2
 80063ac:	5499      	strb	r1, [r3, r2]
 80063ae:	2302      	movs	r3, #2
 80063b0:	e0fb      	b.n	80065aa <f_read+0x31a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	3301      	adds	r3, #1
 80063b6:	d105      	bne.n	80063c4 <f_read+0x134>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4a7e      	ldr	r2, [pc, #504]	; (80065b4 <f_read+0x324>)
 80063bc:	2101      	movs	r1, #1
 80063be:	5499      	strb	r1, [r3, r2]
 80063c0:	2301      	movs	r3, #1
 80063c2:	e0f2      	b.n	80065aa <f_read+0x31a>
				fp->clust = clst;				/* Update current cluster */
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	2385      	movs	r3, #133	; 0x85
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063cc:	50d1      	str	r1, [r2, r3]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	2380      	movs	r3, #128	; 0x80
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	58d0      	ldr	r0, [r2, r3]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	2385      	movs	r3, #133	; 0x85
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	58d3      	ldr	r3, [r2, r3]
 80063de:	0019      	movs	r1, r3
 80063e0:	f7fe f830 	bl	8004444 <clust2sect>
 80063e4:	0003      	movs	r3, r0
 80063e6:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d105      	bne.n	80063fa <f_read+0x16a>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4a70      	ldr	r2, [pc, #448]	; (80065b4 <f_read+0x324>)
 80063f2:	2102      	movs	r1, #2
 80063f4:	5499      	strb	r1, [r3, r2]
 80063f6:	2302      	movs	r3, #2
 80063f8:	e0d7      	b.n	80065aa <f_read+0x31a>
			sect += csect;
 80063fa:	2017      	movs	r0, #23
 80063fc:	183b      	adds	r3, r7, r0
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	18d3      	adds	r3, r2, r3
 8006404:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	0a5b      	lsrs	r3, r3, #9
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	2b00      	cmp	r3, #0
 8006410:	d04c      	beq.n	80064ac <f_read+0x21c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006412:	183b      	adds	r3, r7, r0
 8006414:	781a      	ldrb	r2, [r3, #0]
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	18d3      	adds	r3, r2, r3
 800641a:	68f9      	ldr	r1, [r7, #12]
 800641c:	2280      	movs	r2, #128	; 0x80
 800641e:	0092      	lsls	r2, r2, #2
 8006420:	588a      	ldr	r2, [r1, r2]
 8006422:	4966      	ldr	r1, [pc, #408]	; (80065bc <f_read+0x32c>)
 8006424:	5c52      	ldrb	r2, [r2, r1]
 8006426:	4293      	cmp	r3, r2
 8006428:	d90a      	bls.n	8006440 <f_read+0x1b0>
					cc = fp->fs->csize - csect;
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	2380      	movs	r3, #128	; 0x80
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	58d3      	ldr	r3, [r2, r3]
 8006432:	4a62      	ldr	r2, [pc, #392]	; (80065bc <f_read+0x32c>)
 8006434:	5c9b      	ldrb	r3, [r3, r2]
 8006436:	001a      	movs	r2, r3
 8006438:	183b      	adds	r3, r7, r0
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	2380      	movs	r3, #128	; 0x80
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	58d3      	ldr	r3, [r2, r3]
 8006448:	4a5d      	ldr	r2, [pc, #372]	; (80065c0 <f_read+0x330>)
 800644a:	5c98      	ldrb	r0, [r3, r2]
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	6a39      	ldr	r1, [r7, #32]
 8006452:	f7fd fbe3 	bl	8003c1c <disk_read>
 8006456:	1e03      	subs	r3, r0, #0
 8006458:	d005      	beq.n	8006466 <f_read+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4a55      	ldr	r2, [pc, #340]	; (80065b4 <f_read+0x324>)
 800645e:	2101      	movs	r1, #1
 8006460:	5499      	strb	r1, [r3, r2]
 8006462:	2301      	movs	r3, #1
 8006464:	e0a1      	b.n	80065aa <f_read+0x31a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4a53      	ldr	r2, [pc, #332]	; (80065b8 <f_read+0x328>)
 800646a:	5c9b      	ldrb	r3, [r3, r2]
 800646c:	001a      	movs	r2, r3
 800646e:	2340      	movs	r3, #64	; 0x40
 8006470:	4013      	ands	r3, r2
 8006472:	d017      	beq.n	80064a4 <f_read+0x214>
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	2386      	movs	r3, #134	; 0x86
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	58d2      	ldr	r2, [r2, r3]
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006482:	429a      	cmp	r2, r3
 8006484:	d90e      	bls.n	80064a4 <f_read+0x214>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	2386      	movs	r3, #134	; 0x86
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	58d2      	ldr	r2, [r2, r3]
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	025b      	lsls	r3, r3, #9
 8006494:	6a3a      	ldr	r2, [r7, #32]
 8006496:	18d3      	adds	r3, r2, r3
 8006498:	68f9      	ldr	r1, [r7, #12]
 800649a:	2280      	movs	r2, #128	; 0x80
 800649c:	0092      	lsls	r2, r2, #2
 800649e:	0018      	movs	r0, r3
 80064a0:	f7fd fc34 	bl	8003d0c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	025b      	lsls	r3, r3, #9
 80064a8:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 80064aa:	e061      	b.n	8006570 <f_read+0x2e0>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	2386      	movs	r3, #134	; 0x86
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	58d3      	ldr	r3, [r2, r3]
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d038      	beq.n	800652c <f_read+0x29c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4a3e      	ldr	r2, [pc, #248]	; (80065b8 <f_read+0x328>)
 80064be:	5c9b      	ldrb	r3, [r3, r2]
 80064c0:	001a      	movs	r2, r3
 80064c2:	2340      	movs	r3, #64	; 0x40
 80064c4:	4013      	ands	r3, r2
 80064c6:	d01e      	beq.n	8006506 <f_read+0x276>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	2380      	movs	r3, #128	; 0x80
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	58d3      	ldr	r3, [r2, r3]
 80064d0:	4a3b      	ldr	r2, [pc, #236]	; (80065c0 <f_read+0x330>)
 80064d2:	5c98      	ldrb	r0, [r3, r2]
 80064d4:	68f9      	ldr	r1, [r7, #12]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	2386      	movs	r3, #134	; 0x86
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	58d2      	ldr	r2, [r2, r3]
 80064de:	2301      	movs	r3, #1
 80064e0:	f7fd fbc4 	bl	8003c6c <disk_write>
 80064e4:	1e03      	subs	r3, r0, #0
 80064e6:	d005      	beq.n	80064f4 <f_read+0x264>
						ABORT(fp->fs, FR_DISK_ERR);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4a32      	ldr	r2, [pc, #200]	; (80065b4 <f_read+0x324>)
 80064ec:	2101      	movs	r1, #1
 80064ee:	5499      	strb	r1, [r3, r2]
 80064f0:	2301      	movs	r3, #1
 80064f2:	e05a      	b.n	80065aa <f_read+0x31a>
					fp->flag &= ~FA__DIRTY;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4a30      	ldr	r2, [pc, #192]	; (80065b8 <f_read+0x328>)
 80064f8:	5c9b      	ldrb	r3, [r3, r2]
 80064fa:	2240      	movs	r2, #64	; 0x40
 80064fc:	4393      	bics	r3, r2
 80064fe:	b2d9      	uxtb	r1, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4a2d      	ldr	r2, [pc, #180]	; (80065b8 <f_read+0x328>)
 8006504:	5499      	strb	r1, [r3, r2]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	2380      	movs	r3, #128	; 0x80
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	58d3      	ldr	r3, [r2, r3]
 800650e:	4a2c      	ldr	r2, [pc, #176]	; (80065c0 <f_read+0x330>)
 8006510:	5c98      	ldrb	r0, [r3, r2]
 8006512:	68f9      	ldr	r1, [r7, #12]
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	2301      	movs	r3, #1
 8006518:	f7fd fb80 	bl	8003c1c <disk_read>
 800651c:	1e03      	subs	r3, r0, #0
 800651e:	d005      	beq.n	800652c <f_read+0x29c>
					ABORT(fp->fs, FR_DISK_ERR);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4a24      	ldr	r2, [pc, #144]	; (80065b4 <f_read+0x324>)
 8006524:	2101      	movs	r1, #1
 8006526:	5499      	strb	r1, [r3, r2]
 8006528:	2301      	movs	r3, #1
 800652a:	e03e      	b.n	80065aa <f_read+0x31a>
			}
#endif
			fp->dsect = sect;
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	2386      	movs	r3, #134	; 0x86
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	6939      	ldr	r1, [r7, #16]
 8006534:	50d1      	str	r1, [r2, r3]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	2382      	movs	r3, #130	; 0x82
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	58d3      	ldr	r3, [r2, r3]
 800653e:	05db      	lsls	r3, r3, #23
 8006540:	0ddb      	lsrs	r3, r3, #23
 8006542:	2280      	movs	r2, #128	; 0x80
 8006544:	0092      	lsls	r2, r2, #2
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800654a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	429a      	cmp	r2, r3
 8006550:	d901      	bls.n	8006556 <f_read+0x2c6>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	2382      	movs	r3, #130	; 0x82
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	58d3      	ldr	r3, [r2, r3]
 800655e:	05db      	lsls	r3, r3, #23
 8006560:	0ddb      	lsrs	r3, r3, #23
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	18d1      	adds	r1, r2, r3
 8006566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	0018      	movs	r0, r3
 800656c:	f7fd fbce 	bl	8003d0c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006570:	6a3a      	ldr	r2, [r7, #32]
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006574:	18d3      	adds	r3, r2, r3
 8006576:	623b      	str	r3, [r7, #32]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	2382      	movs	r3, #130	; 0x82
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	58d2      	ldr	r2, [r2, r3]
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	18d1      	adds	r1, r2, r3
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	2382      	movs	r3, #130	; 0x82
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	50d1      	str	r1, [r2, r3]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006592:	18d2      	adds	r2, r2, r3
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d000      	beq.n	80065a8 <f_read+0x318>
 80065a6:	e6b2      	b.n	800630e <f_read+0x7e>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	0018      	movs	r0, r3
 80065ac:	46bd      	mov	sp, r7
 80065ae:	b00c      	add	sp, #48	; 0x30
 80065b0:	bdb0      	pop	{r4, r5, r7, pc}
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	00000207 	.word	0x00000207
 80065b8:	00000206 	.word	0x00000206
 80065bc:	00000202 	.word	0x00000202
 80065c0:	00000201 	.word	0x00000201

080065c4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80065c4:	b5b0      	push	{r4, r5, r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80065cc:	2517      	movs	r5, #23
 80065ce:	197c      	adds	r4, r7, r5
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	0018      	movs	r0, r3
 80065d4:	f7ff fb26 	bl	8005c24 <validate>
 80065d8:	0003      	movs	r3, r0
 80065da:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80065dc:	197b      	adds	r3, r7, r5
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d000      	beq.n	80065e6 <f_sync+0x22>
 80065e4:	e0b9      	b.n	800675a <f_sync+0x196>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a5f      	ldr	r2, [pc, #380]	; (8006768 <f_sync+0x1a4>)
 80065ea:	5c9b      	ldrb	r3, [r3, r2]
 80065ec:	001a      	movs	r2, r3
 80065ee:	2320      	movs	r3, #32
 80065f0:	4013      	ands	r3, r2
 80065f2:	d100      	bne.n	80065f6 <f_sync+0x32>
 80065f4:	e0b1      	b.n	800675a <f_sync+0x196>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a5b      	ldr	r2, [pc, #364]	; (8006768 <f_sync+0x1a4>)
 80065fa:	5c9b      	ldrb	r3, [r3, r2]
 80065fc:	001a      	movs	r2, r3
 80065fe:	2340      	movs	r3, #64	; 0x40
 8006600:	4013      	ands	r3, r2
 8006602:	d01a      	beq.n	800663a <f_sync+0x76>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	2380      	movs	r3, #128	; 0x80
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	58d3      	ldr	r3, [r2, r3]
 800660c:	4a57      	ldr	r2, [pc, #348]	; (800676c <f_sync+0x1a8>)
 800660e:	5c98      	ldrb	r0, [r3, r2]
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	2386      	movs	r3, #134	; 0x86
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	58d2      	ldr	r2, [r2, r3]
 800661a:	2301      	movs	r3, #1
 800661c:	f7fd fb26 	bl	8003c6c <disk_write>
 8006620:	1e03      	subs	r3, r0, #0
 8006622:	d001      	beq.n	8006628 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8006624:	2301      	movs	r3, #1
 8006626:	e09b      	b.n	8006760 <f_sync+0x19c>
				fp->flag &= ~FA__DIRTY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a4f      	ldr	r2, [pc, #316]	; (8006768 <f_sync+0x1a4>)
 800662c:	5c9b      	ldrb	r3, [r3, r2]
 800662e:	2240      	movs	r2, #64	; 0x40
 8006630:	4393      	bics	r3, r2
 8006632:	b2d9      	uxtb	r1, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a4c      	ldr	r2, [pc, #304]	; (8006768 <f_sync+0x1a4>)
 8006638:	5499      	strb	r1, [r3, r2]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	2380      	movs	r3, #128	; 0x80
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	58d0      	ldr	r0, [r2, r3]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	2387      	movs	r3, #135	; 0x87
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	58d3      	ldr	r3, [r2, r3]
 800664a:	2517      	movs	r5, #23
 800664c:	197c      	adds	r4, r7, r5
 800664e:	0019      	movs	r1, r3
 8006650:	f7fd fde8 	bl	8004224 <move_window>
 8006654:	0003      	movs	r3, r0
 8006656:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
 8006658:	002c      	movs	r4, r5
 800665a:	193b      	adds	r3, r7, r4
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d17b      	bne.n	800675a <f_sync+0x196>
				dir = fp->dir_ptr;
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	2388      	movs	r3, #136	; 0x88
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	58d3      	ldr	r3, [r2, r3]
 800666a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	330b      	adds	r3, #11
 8006670:	781a      	ldrb	r2, [r3, #0]
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	330b      	adds	r3, #11
 8006676:	2120      	movs	r1, #32
 8006678:	430a      	orrs	r2, r1
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	2383      	movs	r3, #131	; 0x83
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	58d2      	ldr	r2, [r2, r3]
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	331c      	adds	r3, #28
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	701a      	strb	r2, [r3, #0]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	2383      	movs	r3, #131	; 0x83
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	58d3      	ldr	r3, [r2, r3]
 8006696:	b29b      	uxth	r3, r3
 8006698:	0a1b      	lsrs	r3, r3, #8
 800669a:	b29a      	uxth	r2, r3
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	331d      	adds	r3, #29
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	701a      	strb	r2, [r3, #0]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	2383      	movs	r3, #131	; 0x83
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	58d3      	ldr	r3, [r2, r3]
 80066ac:	0c1a      	lsrs	r2, r3, #16
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	331e      	adds	r3, #30
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	2383      	movs	r3, #131	; 0x83
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	58d3      	ldr	r3, [r2, r3]
 80066be:	0e1a      	lsrs	r2, r3, #24
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	331f      	adds	r3, #31
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	2384      	movs	r3, #132	; 0x84
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	58d2      	ldr	r2, [r2, r3]
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	0011      	movs	r1, r2
 80066d4:	0018      	movs	r0, r3
 80066d6:	f7fe fc7d 	bl	8004fd4 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80066da:	f7fb fc47 	bl	8001f6c <get_fattime>
 80066de:	0003      	movs	r3, r0
 80066e0:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	3316      	adds	r3, #22
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	b2d2      	uxtb	r2, r2
 80066ea:	701a      	strb	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	0a1b      	lsrs	r3, r3, #8
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	3317      	adds	r3, #23
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	701a      	strb	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	0c1a      	lsrs	r2, r3, #16
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	3318      	adds	r3, #24
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	0e1a      	lsrs	r2, r3, #24
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	3319      	adds	r3, #25
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	3312      	adds	r3, #18
 8006718:	2200      	movs	r2, #0
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	3313      	adds	r3, #19
 8006720:	2200      	movs	r2, #0
 8006722:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a10      	ldr	r2, [pc, #64]	; (8006768 <f_sync+0x1a4>)
 8006728:	5c9b      	ldrb	r3, [r3, r2]
 800672a:	2220      	movs	r2, #32
 800672c:	4393      	bics	r3, r2
 800672e:	b2d9      	uxtb	r1, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a0d      	ldr	r2, [pc, #52]	; (8006768 <f_sync+0x1a4>)
 8006734:	5499      	strb	r1, [r3, r2]
				fp->fs->wflag = 1;
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	2380      	movs	r3, #128	; 0x80
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	58d2      	ldr	r2, [r2, r3]
 800673e:	2381      	movs	r3, #129	; 0x81
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	2101      	movs	r1, #1
 8006744:	54d1      	strb	r1, [r2, r3]
				res = sync_fs(fp->fs);
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	2380      	movs	r3, #128	; 0x80
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	58d3      	ldr	r3, [r2, r3]
 800674e:	193c      	adds	r4, r7, r4
 8006750:	0018      	movs	r0, r3
 8006752:	f7fd fda3 	bl	800429c <sync_fs>
 8006756:	0003      	movs	r3, r0
 8006758:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800675a:	2317      	movs	r3, #23
 800675c:	18fb      	adds	r3, r7, r3
 800675e:	781b      	ldrb	r3, [r3, #0]
}
 8006760:	0018      	movs	r0, r3
 8006762:	46bd      	mov	sp, r7
 8006764:	b006      	add	sp, #24
 8006766:	bdb0      	pop	{r4, r5, r7, pc}
 8006768:	00000206 	.word	0x00000206
 800676c:	00000201 	.word	0x00000201

08006770 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8006770:	b5b0      	push	{r4, r5, r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006778:	250f      	movs	r5, #15
 800677a:	197c      	adds	r4, r7, r5
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	0018      	movs	r0, r3
 8006780:	f7ff ff20 	bl	80065c4 <f_sync>
 8006784:	0003      	movs	r3, r0
 8006786:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8006788:	197b      	adds	r3, r7, r5
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d11f      	bne.n	80067d0 <f_close+0x60>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8006790:	197c      	adds	r4, r7, r5
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	0018      	movs	r0, r3
 8006796:	f7ff fa45 	bl	8005c24 <validate>
 800679a:	0003      	movs	r3, r0
 800679c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800679e:	0029      	movs	r1, r5
 80067a0:	187b      	adds	r3, r7, r1
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d113      	bne.n	80067d0 <f_close+0x60>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	238a      	movs	r3, #138	; 0x8a
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	58d3      	ldr	r3, [r2, r3]
 80067b0:	000d      	movs	r5, r1
 80067b2:	187c      	adds	r4, r7, r1
 80067b4:	0018      	movs	r0, r3
 80067b6:	f7fd fc63 	bl	8004080 <dec_lock>
 80067ba:	0003      	movs	r3, r0
 80067bc:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 80067be:	197b      	adds	r3, r7, r5
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d104      	bne.n	80067d0 <f_close+0x60>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	2380      	movs	r3, #128	; 0x80
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	2100      	movs	r1, #0
 80067ce:	50d1      	str	r1, [r2, r3]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80067d0:	230f      	movs	r3, #15
 80067d2:	18fb      	adds	r3, r7, r3
 80067d4:	781b      	ldrb	r3, [r3, #0]
}
 80067d6:	0018      	movs	r0, r3
 80067d8:	46bd      	mov	sp, r7
 80067da:	b004      	add	sp, #16
 80067dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080067e0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80067e0:	b5b0      	push	{r4, r5, r7, lr}
 80067e2:	b090      	sub	sp, #64	; 0x40
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80067ea:	253f      	movs	r5, #63	; 0x3f
 80067ec:	197c      	adds	r4, r7, r5
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	0018      	movs	r0, r3
 80067f2:	f7ff fa17 	bl	8005c24 <validate>
 80067f6:	0003      	movs	r3, r0
 80067f8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80067fa:	197b      	adds	r3, r7, r5
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <f_lseek+0x28>
 8006802:	197b      	adds	r3, r7, r5
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	e28c      	b.n	8006d22 <f_lseek+0x542>
	if (fp->err)						/* Check error */
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4ada      	ldr	r2, [pc, #872]	; (8006b74 <f_lseek+0x394>)
 800680c:	5c9b      	ldrb	r3, [r3, r2]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4ad7      	ldr	r2, [pc, #860]	; (8006b74 <f_lseek+0x394>)
 8006816:	5c9b      	ldrb	r3, [r3, r2]
 8006818:	e283      	b.n	8006d22 <f_lseek+0x542>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	2389      	movs	r3, #137	; 0x89
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	58d3      	ldr	r3, [r2, r3]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d100      	bne.n	8006828 <f_lseek+0x48>
 8006826:	e103      	b.n	8006a30 <f_lseek+0x250>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	3301      	adds	r3, #1
 800682c:	d16c      	bne.n	8006908 <f_lseek+0x128>
			tbl = fp->cltbl;
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	2389      	movs	r3, #137	; 0x89
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	58d3      	ldr	r3, [r2, r3]
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	1d1a      	adds	r2, r3, #4
 800683c:	627a      	str	r2, [r7, #36]	; 0x24
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	2302      	movs	r3, #2
 8006844:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	2384      	movs	r3, #132	; 0x84
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	58d3      	ldr	r3, [r2, r3]
 800684e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	2b00      	cmp	r3, #0
 8006854:	d045      	beq.n	80068e2 <f_lseek+0x102>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	613b      	str	r3, [r7, #16]
 800685a:	2300      	movs	r3, #0
 800685c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006860:	3302      	adds	r3, #2
 8006862:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	3301      	adds	r3, #1
 800686c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	2380      	movs	r3, #128	; 0x80
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	58d3      	ldr	r3, [r2, r3]
 8006876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006878:	0011      	movs	r1, r2
 800687a:	0018      	movs	r0, r3
 800687c:	f7fd fe06 	bl	800448c <get_fat>
 8006880:	0003      	movs	r3, r0
 8006882:	633b      	str	r3, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	2b01      	cmp	r3, #1
 8006888:	d805      	bhi.n	8006896 <f_lseek+0xb6>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4ab9      	ldr	r2, [pc, #740]	; (8006b74 <f_lseek+0x394>)
 800688e:	2102      	movs	r1, #2
 8006890:	5499      	strb	r1, [r3, r2]
 8006892:	2302      	movs	r3, #2
 8006894:	e245      	b.n	8006d22 <f_lseek+0x542>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	3301      	adds	r3, #1
 800689a:	d105      	bne.n	80068a8 <f_lseek+0xc8>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4ab5      	ldr	r2, [pc, #724]	; (8006b74 <f_lseek+0x394>)
 80068a0:	2101      	movs	r1, #1
 80068a2:	5499      	strb	r1, [r3, r2]
 80068a4:	2301      	movs	r3, #1
 80068a6:	e23c      	b.n	8006d22 <f_lseek+0x542>
					} while (cl == pcl + 1);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3301      	adds	r3, #1
 80068ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d0d8      	beq.n	8006864 <f_lseek+0x84>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80068b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d809      	bhi.n	80068ce <f_lseek+0xee>
						*tbl++ = ncl; *tbl++ = tcl;
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	1d1a      	adds	r2, r3, #4
 80068be:	627a      	str	r2, [r7, #36]	; 0x24
 80068c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	1d1a      	adds	r2, r3, #4
 80068c8:	627a      	str	r2, [r7, #36]	; 0x24
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	2380      	movs	r3, #128	; 0x80
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	58d2      	ldr	r2, [r2, r3]
 80068d6:	2385      	movs	r3, #133	; 0x85
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	58d3      	ldr	r3, [r2, r3]
 80068dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068de:	429a      	cmp	r2, r3
 80068e0:	d3b9      	bcc.n	8006856 <f_lseek+0x76>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	2389      	movs	r3, #137	; 0x89
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	58d3      	ldr	r3, [r2, r3]
 80068ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ec:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80068ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d803      	bhi.n	80068fe <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80068f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	e20e      	b.n	8006d1c <f_lseek+0x53c>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80068fe:	233f      	movs	r3, #63	; 0x3f
 8006900:	18fb      	adds	r3, r7, r3
 8006902:	2211      	movs	r2, #17
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	e209      	b.n	8006d1c <f_lseek+0x53c>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	2383      	movs	r3, #131	; 0x83
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	58d3      	ldr	r3, [r2, r3]
 8006910:	683a      	ldr	r2, [r7, #0]
 8006912:	429a      	cmp	r2, r3
 8006914:	d904      	bls.n	8006920 <f_lseek+0x140>
				ofs = fp->fsize;
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	2383      	movs	r3, #131	; 0x83
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	58d3      	ldr	r3, [r2, r3]
 800691e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	2382      	movs	r3, #130	; 0x82
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	50d1      	str	r1, [r2, r3]
			if (ofs) {
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d100      	bne.n	8006932 <f_lseek+0x152>
 8006930:	e1f4      	b.n	8006d1c <f_lseek+0x53c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	1e5a      	subs	r2, r3, #1
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	0011      	movs	r1, r2
 800693a:	0018      	movs	r0, r3
 800693c:	f7fe f8bc 	bl	8004ab8 <clmt_clust>
 8006940:	0001      	movs	r1, r0
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	2385      	movs	r3, #133	; 0x85
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	50d1      	str	r1, [r2, r3]
				dsc = clust2sect(fp->fs, fp->clust);
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	2380      	movs	r3, #128	; 0x80
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	58d0      	ldr	r0, [r2, r3]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	2385      	movs	r3, #133	; 0x85
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	58d3      	ldr	r3, [r2, r3]
 800695a:	0019      	movs	r1, r3
 800695c:	f7fd fd72 	bl	8004444 <clust2sect>
 8006960:	0003      	movs	r3, r0
 8006962:	61bb      	str	r3, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d105      	bne.n	8006976 <f_lseek+0x196>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a81      	ldr	r2, [pc, #516]	; (8006b74 <f_lseek+0x394>)
 800696e:	2102      	movs	r1, #2
 8006970:	5499      	strb	r1, [r3, r2]
 8006972:	2302      	movs	r3, #2
 8006974:	e1d5      	b.n	8006d22 <f_lseek+0x542>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	3b01      	subs	r3, #1
 800697a:	0a5b      	lsrs	r3, r3, #9
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	2280      	movs	r2, #128	; 0x80
 8006980:	0092      	lsls	r2, r2, #2
 8006982:	588a      	ldr	r2, [r1, r2]
 8006984:	497c      	ldr	r1, [pc, #496]	; (8006b78 <f_lseek+0x398>)
 8006986:	5c52      	ldrb	r2, [r2, r1]
 8006988:	3a01      	subs	r2, #1
 800698a:	4013      	ands	r3, r2
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	18d3      	adds	r3, r2, r3
 8006990:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	2382      	movs	r3, #130	; 0x82
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	58d3      	ldr	r3, [r2, r3]
 800699a:	05db      	lsls	r3, r3, #23
 800699c:	0ddb      	lsrs	r3, r3, #23
 800699e:	d100      	bne.n	80069a2 <f_lseek+0x1c2>
 80069a0:	e1bc      	b.n	8006d1c <f_lseek+0x53c>
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	2386      	movs	r3, #134	; 0x86
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	58d3      	ldr	r3, [r2, r3]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d100      	bne.n	80069b2 <f_lseek+0x1d2>
 80069b0:	e1b4      	b.n	8006d1c <f_lseek+0x53c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a71      	ldr	r2, [pc, #452]	; (8006b7c <f_lseek+0x39c>)
 80069b6:	5c9b      	ldrb	r3, [r3, r2]
 80069b8:	001a      	movs	r2, r3
 80069ba:	2340      	movs	r3, #64	; 0x40
 80069bc:	4013      	ands	r3, r2
 80069be:	d01e      	beq.n	80069fe <f_lseek+0x21e>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	2380      	movs	r3, #128	; 0x80
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	58d3      	ldr	r3, [r2, r3]
 80069c8:	4a6d      	ldr	r2, [pc, #436]	; (8006b80 <f_lseek+0x3a0>)
 80069ca:	5c98      	ldrb	r0, [r3, r2]
 80069cc:	6879      	ldr	r1, [r7, #4]
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	2386      	movs	r3, #134	; 0x86
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	58d2      	ldr	r2, [r2, r3]
 80069d6:	2301      	movs	r3, #1
 80069d8:	f7fd f948 	bl	8003c6c <disk_write>
 80069dc:	1e03      	subs	r3, r0, #0
 80069de:	d005      	beq.n	80069ec <f_lseek+0x20c>
							ABORT(fp->fs, FR_DISK_ERR);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a64      	ldr	r2, [pc, #400]	; (8006b74 <f_lseek+0x394>)
 80069e4:	2101      	movs	r1, #1
 80069e6:	5499      	strb	r1, [r3, r2]
 80069e8:	2301      	movs	r3, #1
 80069ea:	e19a      	b.n	8006d22 <f_lseek+0x542>
						fp->flag &= ~FA__DIRTY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a63      	ldr	r2, [pc, #396]	; (8006b7c <f_lseek+0x39c>)
 80069f0:	5c9b      	ldrb	r3, [r3, r2]
 80069f2:	2240      	movs	r2, #64	; 0x40
 80069f4:	4393      	bics	r3, r2
 80069f6:	b2d9      	uxtb	r1, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a60      	ldr	r2, [pc, #384]	; (8006b7c <f_lseek+0x39c>)
 80069fc:	5499      	strb	r1, [r3, r2]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	2380      	movs	r3, #128	; 0x80
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	58d3      	ldr	r3, [r2, r3]
 8006a06:	4a5e      	ldr	r2, [pc, #376]	; (8006b80 <f_lseek+0x3a0>)
 8006a08:	5c98      	ldrb	r0, [r3, r2]
 8006a0a:	6879      	ldr	r1, [r7, #4]
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	2301      	movs	r3, #1
 8006a10:	f7fd f904 	bl	8003c1c <disk_read>
 8006a14:	1e03      	subs	r3, r0, #0
 8006a16:	d005      	beq.n	8006a24 <f_lseek+0x244>
						ABORT(fp->fs, FR_DISK_ERR);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a56      	ldr	r2, [pc, #344]	; (8006b74 <f_lseek+0x394>)
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	5499      	strb	r1, [r3, r2]
 8006a20:	2301      	movs	r3, #1
 8006a22:	e17e      	b.n	8006d22 <f_lseek+0x542>
#endif
					fp->dsect = dsc;
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	2386      	movs	r3, #134	; 0x86
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	69b9      	ldr	r1, [r7, #24]
 8006a2c:	50d1      	str	r1, [r2, r3]
 8006a2e:	e175      	b.n	8006d1c <f_lseek+0x53c>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	2383      	movs	r3, #131	; 0x83
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	58d3      	ldr	r3, [r2, r3]
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d90b      	bls.n	8006a56 <f_lseek+0x276>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a4e      	ldr	r2, [pc, #312]	; (8006b7c <f_lseek+0x39c>)
 8006a42:	5c9b      	ldrb	r3, [r3, r2]
 8006a44:	001a      	movs	r2, r3
 8006a46:	2302      	movs	r3, #2
 8006a48:	4013      	ands	r3, r2
 8006a4a:	d104      	bne.n	8006a56 <f_lseek+0x276>
#endif
			) ofs = fp->fsize;
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	2383      	movs	r3, #131	; 0x83
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	58d3      	ldr	r3, [r2, r3]
 8006a54:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	2382      	movs	r3, #130	; 0x82
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	58d3      	ldr	r3, [r2, r3]
 8006a5e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	637b      	str	r3, [r7, #52]	; 0x34
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	2382      	movs	r3, #130	; 0x82
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006a6c:	50d1      	str	r1, [r2, r3]
		if (ofs) {
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d100      	bne.n	8006a76 <f_lseek+0x296>
 8006a74:	e0eb      	b.n	8006c4e <f_lseek+0x46e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	2380      	movs	r3, #128	; 0x80
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	58d3      	ldr	r3, [r2, r3]
 8006a7e:	4a3e      	ldr	r2, [pc, #248]	; (8006b78 <f_lseek+0x398>)
 8006a80:	5c9b      	ldrb	r3, [r3, r2]
 8006a82:	025b      	lsls	r3, r3, #9
 8006a84:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d027      	beq.n	8006adc <f_lseek+0x2fc>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	69f9      	ldr	r1, [r7, #28]
 8006a92:	0018      	movs	r0, r3
 8006a94:	f7f9 fb4a 	bl	800012c <__udivsi3>
 8006a98:	0003      	movs	r3, r0
 8006a9a:	001c      	movs	r4, r3
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	69f9      	ldr	r1, [r7, #28]
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	f7f9 fb42 	bl	800012c <__udivsi3>
 8006aa8:	0003      	movs	r3, r0
			if (ifptr > 0 &&
 8006aaa:	429c      	cmp	r4, r3
 8006aac:	d316      	bcc.n	8006adc <f_lseek+0x2fc>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	69fa      	ldr	r2, [r7, #28]
 8006ab4:	4252      	negs	r2, r2
 8006ab6:	401a      	ands	r2, r3
 8006ab8:	0011      	movs	r1, r2
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	2382      	movs	r3, #130	; 0x82
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	50d1      	str	r1, [r2, r3]
				ofs -= fp->fptr;
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	2382      	movs	r3, #130	; 0x82
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	58d3      	ldr	r3, [r2, r3]
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	2385      	movs	r3, #133	; 0x85
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	58d3      	ldr	r3, [r2, r3]
 8006ad8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ada:	e02d      	b.n	8006b38 <f_lseek+0x358>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	2384      	movs	r3, #132	; 0x84
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	58d3      	ldr	r3, [r2, r3]
 8006ae4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d120      	bne.n	8006b2e <f_lseek+0x34e>
					clst = create_chain(fp->fs, 0);
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	2380      	movs	r3, #128	; 0x80
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	58d3      	ldr	r3, [r2, r3]
 8006af4:	2100      	movs	r1, #0
 8006af6:	0018      	movs	r0, r3
 8006af8:	f7fd ff28 	bl	800494c <create_chain>
 8006afc:	0003      	movs	r3, r0
 8006afe:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d105      	bne.n	8006b12 <f_lseek+0x332>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a1a      	ldr	r2, [pc, #104]	; (8006b74 <f_lseek+0x394>)
 8006b0a:	2102      	movs	r1, #2
 8006b0c:	5499      	strb	r1, [r3, r2]
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e107      	b.n	8006d22 <f_lseek+0x542>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b14:	3301      	adds	r3, #1
 8006b16:	d105      	bne.n	8006b24 <f_lseek+0x344>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a16      	ldr	r2, [pc, #88]	; (8006b74 <f_lseek+0x394>)
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	5499      	strb	r1, [r3, r2]
 8006b20:	2301      	movs	r3, #1
 8006b22:	e0fe      	b.n	8006d22 <f_lseek+0x542>
					fp->sclust = clst;
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	2384      	movs	r3, #132	; 0x84
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b2c:	50d1      	str	r1, [r2, r3]
				}
#endif
				fp->clust = clst;
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	2385      	movs	r3, #133	; 0x85
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b36:	50d1      	str	r1, [r2, r3]
			}
			if (clst != 0) {
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d100      	bne.n	8006b40 <f_lseek+0x360>
 8006b3e:	e086      	b.n	8006c4e <f_lseek+0x46e>
				while (ofs > bcs) {						/* Cluster following loop */
 8006b40:	e05a      	b.n	8006bf8 <f_lseek+0x418>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a0d      	ldr	r2, [pc, #52]	; (8006b7c <f_lseek+0x39c>)
 8006b46:	5c9b      	ldrb	r3, [r3, r2]
 8006b48:	001a      	movs	r2, r3
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	d019      	beq.n	8006b84 <f_lseek+0x3a4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	2380      	movs	r3, #128	; 0x80
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	58d3      	ldr	r3, [r2, r3]
 8006b58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b5a:	0011      	movs	r1, r2
 8006b5c:	0018      	movs	r0, r3
 8006b5e:	f7fd fef5 	bl	800494c <create_chain>
 8006b62:	0003      	movs	r3, r0
 8006b64:	63bb      	str	r3, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d116      	bne.n	8006b9a <f_lseek+0x3ba>
							ofs = bcs; break;
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	603b      	str	r3, [r7, #0]
 8006b70:	e046      	b.n	8006c00 <f_lseek+0x420>
 8006b72:	46c0      	nop			; (mov r8, r8)
 8006b74:	00000207 	.word	0x00000207
 8006b78:	00000202 	.word	0x00000202
 8006b7c:	00000206 	.word	0x00000206
 8006b80:	00000201 	.word	0x00000201
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	2380      	movs	r3, #128	; 0x80
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	58d3      	ldr	r3, [r2, r3]
 8006b8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b8e:	0011      	movs	r1, r2
 8006b90:	0018      	movs	r0, r3
 8006b92:	f7fd fc7b 	bl	800448c <get_fat>
 8006b96:	0003      	movs	r3, r0
 8006b98:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	d105      	bne.n	8006bac <f_lseek+0x3cc>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a62      	ldr	r2, [pc, #392]	; (8006d2c <f_lseek+0x54c>)
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	5499      	strb	r1, [r3, r2]
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e0ba      	b.n	8006d22 <f_lseek+0x542>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8006bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d909      	bls.n	8006bc6 <f_lseek+0x3e6>
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	2380      	movs	r3, #128	; 0x80
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	58d2      	ldr	r2, [r2, r3]
 8006bba:	2385      	movs	r3, #133	; 0x85
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	58d3      	ldr	r3, [r2, r3]
 8006bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d305      	bcc.n	8006bd2 <f_lseek+0x3f2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a58      	ldr	r2, [pc, #352]	; (8006d2c <f_lseek+0x54c>)
 8006bca:	2102      	movs	r1, #2
 8006bcc:	5499      	strb	r1, [r3, r2]
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e0a7      	b.n	8006d22 <f_lseek+0x542>
					fp->clust = clst;
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	2385      	movs	r3, #133	; 0x85
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bda:	50d1      	str	r1, [r2, r3]
					fp->fptr += bcs;
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	2382      	movs	r3, #130	; 0x82
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	58d2      	ldr	r2, [r2, r3]
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	18d1      	adds	r1, r2, r3
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	2382      	movs	r3, #130	; 0x82
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	50d1      	str	r1, [r2, r3]
					ofs -= bcs;
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d8a0      	bhi.n	8006b42 <f_lseek+0x362>
				}
				fp->fptr += ofs;
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	2382      	movs	r3, #130	; 0x82
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	58d2      	ldr	r2, [r2, r3]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	18d1      	adds	r1, r2, r3
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	2382      	movs	r3, #130	; 0x82
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	50d1      	str	r1, [r2, r3]
				if (ofs % SS(fp->fs)) {
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	05db      	lsls	r3, r3, #23
 8006c18:	0ddb      	lsrs	r3, r3, #23
 8006c1a:	d018      	beq.n	8006c4e <f_lseek+0x46e>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	2380      	movs	r3, #128	; 0x80
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	58d3      	ldr	r3, [r2, r3]
 8006c24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c26:	0011      	movs	r1, r2
 8006c28:	0018      	movs	r0, r3
 8006c2a:	f7fd fc0b 	bl	8004444 <clust2sect>
 8006c2e:	0003      	movs	r3, r0
 8006c30:	637b      	str	r3, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8006c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d105      	bne.n	8006c44 <f_lseek+0x464>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a3c      	ldr	r2, [pc, #240]	; (8006d2c <f_lseek+0x54c>)
 8006c3c:	2102      	movs	r1, #2
 8006c3e:	5499      	strb	r1, [r3, r2]
 8006c40:	2302      	movs	r3, #2
 8006c42:	e06e      	b.n	8006d22 <f_lseek+0x542>
					nsect += ofs / SS(fp->fs);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	0a5b      	lsrs	r3, r3, #9
 8006c48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c4a:	18d3      	adds	r3, r2, r3
 8006c4c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	2382      	movs	r3, #130	; 0x82
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	58d3      	ldr	r3, [r2, r3]
 8006c56:	05db      	lsls	r3, r3, #23
 8006c58:	0ddb      	lsrs	r3, r3, #23
 8006c5a:	d044      	beq.n	8006ce6 <f_lseek+0x506>
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	2386      	movs	r3, #134	; 0x86
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	58d3      	ldr	r3, [r2, r3]
 8006c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d03d      	beq.n	8006ce6 <f_lseek+0x506>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a30      	ldr	r2, [pc, #192]	; (8006d30 <f_lseek+0x550>)
 8006c6e:	5c9b      	ldrb	r3, [r3, r2]
 8006c70:	001a      	movs	r2, r3
 8006c72:	2340      	movs	r3, #64	; 0x40
 8006c74:	4013      	ands	r3, r2
 8006c76:	d01e      	beq.n	8006cb6 <f_lseek+0x4d6>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	2380      	movs	r3, #128	; 0x80
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	58d3      	ldr	r3, [r2, r3]
 8006c80:	4a2c      	ldr	r2, [pc, #176]	; (8006d34 <f_lseek+0x554>)
 8006c82:	5c98      	ldrb	r0, [r3, r2]
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	2386      	movs	r3, #134	; 0x86
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	58d2      	ldr	r2, [r2, r3]
 8006c8e:	2301      	movs	r3, #1
 8006c90:	f7fc ffec 	bl	8003c6c <disk_write>
 8006c94:	1e03      	subs	r3, r0, #0
 8006c96:	d005      	beq.n	8006ca4 <f_lseek+0x4c4>
					ABORT(fp->fs, FR_DISK_ERR);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a24      	ldr	r2, [pc, #144]	; (8006d2c <f_lseek+0x54c>)
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	5499      	strb	r1, [r3, r2]
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e03e      	b.n	8006d22 <f_lseek+0x542>
				fp->flag &= ~FA__DIRTY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a22      	ldr	r2, [pc, #136]	; (8006d30 <f_lseek+0x550>)
 8006ca8:	5c9b      	ldrb	r3, [r3, r2]
 8006caa:	2240      	movs	r2, #64	; 0x40
 8006cac:	4393      	bics	r3, r2
 8006cae:	b2d9      	uxtb	r1, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a1f      	ldr	r2, [pc, #124]	; (8006d30 <f_lseek+0x550>)
 8006cb4:	5499      	strb	r1, [r3, r2]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	2380      	movs	r3, #128	; 0x80
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	58d3      	ldr	r3, [r2, r3]
 8006cbe:	4a1d      	ldr	r2, [pc, #116]	; (8006d34 <f_lseek+0x554>)
 8006cc0:	5c98      	ldrb	r0, [r3, r2]
 8006cc2:	6879      	ldr	r1, [r7, #4]
 8006cc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	f7fc ffa8 	bl	8003c1c <disk_read>
 8006ccc:	1e03      	subs	r3, r0, #0
 8006cce:	d005      	beq.n	8006cdc <f_lseek+0x4fc>
				ABORT(fp->fs, FR_DISK_ERR);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a16      	ldr	r2, [pc, #88]	; (8006d2c <f_lseek+0x54c>)
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	5499      	strb	r1, [r3, r2]
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e022      	b.n	8006d22 <f_lseek+0x542>
#endif
			fp->dsect = nsect;
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	2386      	movs	r3, #134	; 0x86
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ce4:	50d1      	str	r1, [r2, r3]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	2382      	movs	r3, #130	; 0x82
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	58d2      	ldr	r2, [r2, r3]
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	2383      	movs	r3, #131	; 0x83
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	58cb      	ldr	r3, [r1, r3]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d910      	bls.n	8006d1c <f_lseek+0x53c>
			fp->fsize = fp->fptr;
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	2382      	movs	r3, #130	; 0x82
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	58d1      	ldr	r1, [r2, r3]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	2383      	movs	r3, #131	; 0x83
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	50d1      	str	r1, [r2, r3]
			fp->flag |= FA__WRITTEN;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a08      	ldr	r2, [pc, #32]	; (8006d30 <f_lseek+0x550>)
 8006d0e:	5c9b      	ldrb	r3, [r3, r2]
 8006d10:	2220      	movs	r2, #32
 8006d12:	4313      	orrs	r3, r2
 8006d14:	b2d9      	uxtb	r1, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a05      	ldr	r2, [pc, #20]	; (8006d30 <f_lseek+0x550>)
 8006d1a:	5499      	strb	r1, [r3, r2]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8006d1c:	233f      	movs	r3, #63	; 0x3f
 8006d1e:	18fb      	adds	r3, r7, r3
 8006d20:	781b      	ldrb	r3, [r3, #0]
}
 8006d22:	0018      	movs	r0, r3
 8006d24:	46bd      	mov	sp, r7
 8006d26:	b010      	add	sp, #64	; 0x40
 8006d28:	bdb0      	pop	{r4, r5, r7, pc}
 8006d2a:	46c0      	nop			; (mov r8, r8)
 8006d2c:	00000207 	.word	0x00000207
 8006d30:	00000206 	.word	0x00000206
 8006d34:	00000201 	.word	0x00000201

08006d38 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006d38:	b5b0      	push	{r4, r5, r7, lr}
 8006d3a:	b08e      	sub	sp, #56	; 0x38
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8006d44:	2537      	movs	r5, #55	; 0x37
 8006d46:	197c      	adds	r4, r7, r5
 8006d48:	230c      	movs	r3, #12
 8006d4a:	18f9      	adds	r1, r7, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	0018      	movs	r0, r3
 8006d52:	f7fe fc49 	bl	80055e8 <find_volume>
 8006d56:	0003      	movs	r3, r0
 8006d58:	7023      	strb	r3, [r4, #0]
	fs = *fatfs;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8006d60:	197b      	adds	r3, r7, r5
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d000      	beq.n	8006d6a <f_getfree+0x32>
 8006d68:	e0c0      	b.n	8006eec <f_getfree+0x1b4>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	2384      	movs	r3, #132	; 0x84
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	58d2      	ldr	r2, [r2, r3]
 8006d72:	69f9      	ldr	r1, [r7, #28]
 8006d74:	2385      	movs	r3, #133	; 0x85
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	58cb      	ldr	r3, [r1, r3]
 8006d7a:	3b02      	subs	r3, #2
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d806      	bhi.n	8006d8e <f_getfree+0x56>
			*nclst = fs->free_clust;
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	2384      	movs	r3, #132	; 0x84
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	58d2      	ldr	r2, [r2, r3]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	e0ae      	b.n	8006eec <f_getfree+0x1b4>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8006d8e:	201b      	movs	r0, #27
 8006d90:	183b      	adds	r3, r7, r0
 8006d92:	69f9      	ldr	r1, [r7, #28]
 8006d94:	2280      	movs	r2, #128	; 0x80
 8006d96:	0092      	lsls	r2, r2, #2
 8006d98:	5c8a      	ldrb	r2, [r1, r2]
 8006d9a:	701a      	strb	r2, [r3, #0]
			n = 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 8006da0:	183b      	adds	r3, r7, r0
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d12a      	bne.n	8006dfe <f_getfree+0xc6>
				clst = 2;
 8006da8:	2302      	movs	r3, #2
 8006daa:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8006dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	0011      	movs	r1, r2
 8006db2:	0018      	movs	r0, r3
 8006db4:	f7fd fb6a 	bl	800448c <get_fat>
 8006db8:	0003      	movs	r3, r0
 8006dba:	617b      	str	r3, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	d104      	bne.n	8006dcc <f_getfree+0x94>
 8006dc2:	2337      	movs	r3, #55	; 0x37
 8006dc4:	18fb      	adds	r3, r7, r3
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	e07e      	b.n	8006eca <f_getfree+0x192>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d104      	bne.n	8006ddc <f_getfree+0xa4>
 8006dd2:	2337      	movs	r3, #55	; 0x37
 8006dd4:	18fb      	adds	r3, r7, r3
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	701a      	strb	r2, [r3, #0]
 8006dda:	e076      	b.n	8006eca <f_getfree+0x192>
					if (stat == 0) n++;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d102      	bne.n	8006de8 <f_getfree+0xb0>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	3301      	adds	r3, #1
 8006de6:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	3301      	adds	r3, #1
 8006dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dee:	69fa      	ldr	r2, [r7, #28]
 8006df0:	2385      	movs	r3, #133	; 0x85
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	58d3      	ldr	r3, [r2, r3]
 8006df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d3d7      	bcc.n	8006dac <f_getfree+0x74>
 8006dfc:	e065      	b.n	8006eca <f_getfree+0x192>
			} else {
				clst = fs->n_fatent;
 8006dfe:	69fa      	ldr	r2, [r7, #28]
 8006e00:	2385      	movs	r3, #133	; 0x85
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	58d3      	ldr	r3, [r2, r3]
 8006e06:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	2388      	movs	r3, #136	; 0x88
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	58d3      	ldr	r3, [r2, r3]
 8006e10:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
 8006e16:	2300      	movs	r3, #0
 8006e18:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d114      	bne.n	8006e4a <f_getfree+0x112>
						res = move_window(fs, sect++);
 8006e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	62ba      	str	r2, [r7, #40]	; 0x28
 8006e26:	2537      	movs	r5, #55	; 0x37
 8006e28:	197c      	adds	r4, r7, r5
 8006e2a:	69fa      	ldr	r2, [r7, #28]
 8006e2c:	0019      	movs	r1, r3
 8006e2e:	0010      	movs	r0, r2
 8006e30:	f7fd f9f8 	bl	8004224 <move_window>
 8006e34:	0003      	movs	r3, r0
 8006e36:	7023      	strb	r3, [r4, #0]
						if (res != FR_OK) break;
 8006e38:	197b      	adds	r3, r7, r5
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d143      	bne.n	8006ec8 <f_getfree+0x190>
						p = fs->win.d8;
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8006e44:	2380      	movs	r3, #128	; 0x80
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8006e4a:	231b      	movs	r3, #27
 8006e4c:	18fb      	adds	r3, r7, r3
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d115      	bne.n	8006e80 <f_getfree+0x148>
						if (LD_WORD(p) == 0) n++;
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	3301      	adds	r3, #1
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	021b      	lsls	r3, r3, #8
 8006e5c:	b21a      	sxth	r2, r3
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	b21b      	sxth	r3, r3
 8006e64:	4313      	orrs	r3, r2
 8006e66:	b21b      	sxth	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d102      	bne.n	8006e72 <f_getfree+0x13a>
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	3301      	adds	r3, #1
 8006e70:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	3302      	adds	r3, #2
 8006e76:	623b      	str	r3, [r7, #32]
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	3b02      	subs	r3, #2
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e7e:	e01c      	b.n	8006eba <f_getfree+0x182>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	3303      	adds	r3, #3
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	061a      	lsls	r2, r3, #24
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	3302      	adds	r3, #2
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	041b      	lsls	r3, r3, #16
 8006e90:	4313      	orrs	r3, r2
 8006e92:	6a3a      	ldr	r2, [r7, #32]
 8006e94:	3201      	adds	r2, #1
 8006e96:	7812      	ldrb	r2, [r2, #0]
 8006e98:	0212      	lsls	r2, r2, #8
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	6a3a      	ldr	r2, [r7, #32]
 8006e9e:	7812      	ldrb	r2, [r2, #0]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	011b      	lsls	r3, r3, #4
 8006ea4:	091b      	lsrs	r3, r3, #4
 8006ea6:	d102      	bne.n	8006eae <f_getfree+0x176>
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eaa:	3301      	adds	r3, #1
 8006eac:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	623b      	str	r3, [r7, #32]
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	3b04      	subs	r3, #4
 8006eb8:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8006eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1a9      	bne.n	8006e1a <f_getfree+0xe2>
 8006ec6:	e000      	b.n	8006eca <f_getfree+0x192>
						if (res != FR_OK) break;
 8006ec8:	46c0      	nop			; (mov r8, r8)
			}
			fs->free_clust = n;
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	2384      	movs	r3, #132	; 0x84
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ed2:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	4a09      	ldr	r2, [pc, #36]	; (8006efc <f_getfree+0x1c4>)
 8006ed8:	5c9b      	ldrb	r3, [r3, r2]
 8006eda:	2201      	movs	r2, #1
 8006edc:	4313      	orrs	r3, r2
 8006ede:	b2d9      	uxtb	r1, r3
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	4a06      	ldr	r2, [pc, #24]	; (8006efc <f_getfree+0x1c4>)
 8006ee4:	5499      	strb	r1, [r3, r2]
			*nclst = n;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eea:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8006eec:	2337      	movs	r3, #55	; 0x37
 8006eee:	18fb      	adds	r3, r7, r3
 8006ef0:	781b      	ldrb	r3, [r3, #0]
}
 8006ef2:	0018      	movs	r0, r3
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	b00e      	add	sp, #56	; 0x38
 8006ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8006efa:	46c0      	nop			; (mov r8, r8)
 8006efc:	00000205 	.word	0x00000205

08006f00 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006f00:	b590      	push	{r4, r7, lr}
 8006f02:	b089      	sub	sp, #36	; 0x24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006f14:	e022      	b.n	8006f5c <f_gets+0x5c>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006f16:	2310      	movs	r3, #16
 8006f18:	18fb      	adds	r3, r7, r3
 8006f1a:	2414      	movs	r4, #20
 8006f1c:	1939      	adds	r1, r7, r4
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f7ff f9b5 	bl	8006290 <f_read>
		if (rc != 1) break;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d11d      	bne.n	8006f68 <f_gets+0x68>
		c = s[0];
 8006f2c:	2117      	movs	r1, #23
 8006f2e:	187b      	adds	r3, r7, r1
 8006f30:	193a      	adds	r2, r7, r4
 8006f32:	7812      	ldrb	r2, [r2, #0]
 8006f34:	701a      	strb	r2, [r3, #0]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006f36:	187b      	adds	r3, r7, r1
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b0d      	cmp	r3, #13
 8006f3c:	d100      	bne.n	8006f40 <f_gets+0x40>
 8006f3e:	e00d      	b.n	8006f5c <f_gets+0x5c>
		*p++ = c;
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	61ba      	str	r2, [r7, #24]
 8006f46:	2117      	movs	r1, #23
 8006f48:	187a      	adds	r2, r7, r1
 8006f4a:	7812      	ldrb	r2, [r2, #0]
 8006f4c:	701a      	strb	r2, [r3, #0]
		n++;
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	3301      	adds	r3, #1
 8006f52:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006f54:	187b      	adds	r3, r7, r1
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b0a      	cmp	r3, #10
 8006f5a:	d007      	beq.n	8006f6c <f_gets+0x6c>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	69fa      	ldr	r2, [r7, #28]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	dbd7      	blt.n	8006f16 <f_gets+0x16>
 8006f66:	e002      	b.n	8006f6e <f_gets+0x6e>
		if (rc != 1) break;
 8006f68:	46c0      	nop			; (mov r8, r8)
 8006f6a:	e000      	b.n	8006f6e <f_gets+0x6e>
		if (c == '\n') break;		/* Break on EOL */
 8006f6c:	46c0      	nop			; (mov r8, r8)
	}
	*p = 0;
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	2200      	movs	r2, #0
 8006f72:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <f_gets+0x7e>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	e000      	b.n	8006f80 <f_gets+0x80>
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	0018      	movs	r0, r3
 8006f82:	46bd      	mov	sp, r7
 8006f84:	b009      	add	sp, #36	; 0x24
 8006f86:	bd90      	pop	{r4, r7, pc}

08006f88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006f88:	b590      	push	{r4, r7, lr}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	1dfb      	adds	r3, r7, #7
 8006f94:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8006f96:	2417      	movs	r4, #23
 8006f98:	193b      	adds	r3, r7, r4
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8006f9e:	2016      	movs	r0, #22
 8006fa0:	183b      	adds	r3, r7, r0
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 8006fa6:	4b21      	ldr	r3, [pc, #132]	; (800702c <FATFS_LinkDriverEx+0xa4>)
 8006fa8:	7a5b      	ldrb	r3, [r3, #9]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d836      	bhi.n	800701e <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006fb0:	4b1e      	ldr	r3, [pc, #120]	; (800702c <FATFS_LinkDriverEx+0xa4>)
 8006fb2:	7a5b      	ldrb	r3, [r3, #9]
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	001a      	movs	r2, r3
 8006fb8:	4b1c      	ldr	r3, [pc, #112]	; (800702c <FATFS_LinkDriverEx+0xa4>)
 8006fba:	2100      	movs	r1, #0
 8006fbc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006fbe:	4b1b      	ldr	r3, [pc, #108]	; (800702c <FATFS_LinkDriverEx+0xa4>)
 8006fc0:	7a5b      	ldrb	r3, [r3, #9]
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	4a19      	ldr	r2, [pc, #100]	; (800702c <FATFS_LinkDriverEx+0xa4>)
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	18d3      	adds	r3, r2, r3
 8006fca:	3304      	adds	r3, #4
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 8006fd0:	4b16      	ldr	r3, [pc, #88]	; (800702c <FATFS_LinkDriverEx+0xa4>)
 8006fd2:	7a5b      	ldrb	r3, [r3, #9]
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	001a      	movs	r2, r3
 8006fd8:	4b14      	ldr	r3, [pc, #80]	; (800702c <FATFS_LinkDriverEx+0xa4>)
 8006fda:	189b      	adds	r3, r3, r2
 8006fdc:	1dfa      	adds	r2, r7, #7
 8006fde:	7812      	ldrb	r2, [r2, #0]
 8006fe0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006fe2:	4b12      	ldr	r3, [pc, #72]	; (800702c <FATFS_LinkDriverEx+0xa4>)
 8006fe4:	7a5b      	ldrb	r3, [r3, #9]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	b2d1      	uxtb	r1, r2
 8006fec:	4a0f      	ldr	r2, [pc, #60]	; (800702c <FATFS_LinkDriverEx+0xa4>)
 8006fee:	7251      	strb	r1, [r2, #9]
 8006ff0:	183a      	adds	r2, r7, r0
 8006ff2:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8006ff4:	183b      	adds	r3, r7, r0
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	3330      	adds	r3, #48	; 0x30
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	3301      	adds	r3, #1
 8007004:	223a      	movs	r2, #58	; 0x3a
 8007006:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	3302      	adds	r3, #2
 800700c:	222f      	movs	r2, #47	; 0x2f
 800700e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	3303      	adds	r3, #3
 8007014:	2200      	movs	r2, #0
 8007016:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007018:	193b      	adds	r3, r7, r4
 800701a:	2200      	movs	r2, #0
 800701c:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800701e:	2317      	movs	r3, #23
 8007020:	18fb      	adds	r3, r7, r3
 8007022:	781b      	ldrb	r3, [r3, #0]
}
 8007024:	0018      	movs	r0, r3
 8007026:	46bd      	mov	sp, r7
 8007028:	b007      	add	sp, #28
 800702a:	bd90      	pop	{r4, r7, pc}
 800702c:	20000210 	.word	0x20000210

08007030 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800703a:	6839      	ldr	r1, [r7, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	0018      	movs	r0, r3
 8007042:	f7ff ffa1 	bl	8006f88 <FATFS_LinkDriverEx>
 8007046:	0003      	movs	r3, r0
}
 8007048:	0018      	movs	r0, r3
 800704a:	46bd      	mov	sp, r7
 800704c:	b002      	add	sp, #8
 800704e:	bd80      	pop	{r7, pc}

08007050 <delay>:
		//-----FRAME RATE SETTING-------//
		0x0060, 0xA700, 0x0061, 0x0001, 0x0090, 0x0033, //RTNI setting
		//-------DISPLAY ON------//
		0x0007, 0x0133, };

void delay(unsigned int t) {
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
	for (; t > 0; t--) {
 8007058:	e003      	b.n	8007062 <delay+0x12>
		__asm("nop");
 800705a:	46c0      	nop			; (mov r8, r8)
	for (; t > 0; t--) {
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	3b01      	subs	r3, #1
 8007060:	607b      	str	r3, [r7, #4]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1f8      	bne.n	800705a <delay+0xa>
	}
}
 8007068:	46c0      	nop			; (mov r8, r8)
 800706a:	46c0      	nop			; (mov r8, r8)
 800706c:	46bd      	mov	sp, r7
 800706e:	b002      	add	sp, #8
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <GPIO_Init>:
 * 
 * \param 
 * 
 * \return void
 */
static void GPIO_Init(void) {
 8007074:	b590      	push	{r4, r7, lr}
 8007076:	b08b      	sub	sp, #44	; 0x2c
 8007078:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOC_CLK_ENABLE()
 800707a:	4b3d      	ldr	r3, [pc, #244]	; (8007170 <GPIO_Init+0xfc>)
 800707c:	695a      	ldr	r2, [r3, #20]
 800707e:	4b3c      	ldr	r3, [pc, #240]	; (8007170 <GPIO_Init+0xfc>)
 8007080:	2180      	movs	r1, #128	; 0x80
 8007082:	0309      	lsls	r1, r1, #12
 8007084:	430a      	orrs	r2, r1
 8007086:	615a      	str	r2, [r3, #20]
 8007088:	4b39      	ldr	r3, [pc, #228]	; (8007170 <GPIO_Init+0xfc>)
 800708a:	695a      	ldr	r2, [r3, #20]
 800708c:	2380      	movs	r3, #128	; 0x80
 800708e:	031b      	lsls	r3, r3, #12
 8007090:	4013      	ands	r3, r2
 8007092:	60bb      	str	r3, [r7, #8]
 8007094:	68bb      	ldr	r3, [r7, #8]
	;
	__GPIOA_CLK_ENABLE()
 8007096:	4b36      	ldr	r3, [pc, #216]	; (8007170 <GPIO_Init+0xfc>)
 8007098:	695a      	ldr	r2, [r3, #20]
 800709a:	4b35      	ldr	r3, [pc, #212]	; (8007170 <GPIO_Init+0xfc>)
 800709c:	2180      	movs	r1, #128	; 0x80
 800709e:	0289      	lsls	r1, r1, #10
 80070a0:	430a      	orrs	r2, r1
 80070a2:	615a      	str	r2, [r3, #20]
 80070a4:	4b32      	ldr	r3, [pc, #200]	; (8007170 <GPIO_Init+0xfc>)
 80070a6:	695a      	ldr	r2, [r3, #20]
 80070a8:	2380      	movs	r3, #128	; 0x80
 80070aa:	029b      	lsls	r3, r3, #10
 80070ac:	4013      	ands	r3, r2
 80070ae:	607b      	str	r3, [r7, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
	;
	__GPIOB_CLK_ENABLE()
 80070b2:	4b2f      	ldr	r3, [pc, #188]	; (8007170 <GPIO_Init+0xfc>)
 80070b4:	695a      	ldr	r2, [r3, #20]
 80070b6:	4b2e      	ldr	r3, [pc, #184]	; (8007170 <GPIO_Init+0xfc>)
 80070b8:	2180      	movs	r1, #128	; 0x80
 80070ba:	02c9      	lsls	r1, r1, #11
 80070bc:	430a      	orrs	r2, r1
 80070be:	615a      	str	r2, [r3, #20]
 80070c0:	4b2b      	ldr	r3, [pc, #172]	; (8007170 <GPIO_Init+0xfc>)
 80070c2:	695a      	ldr	r2, [r3, #20]
 80070c4:	2380      	movs	r3, #128	; 0x80
 80070c6:	02db      	lsls	r3, r3, #11
 80070c8:	4013      	ands	r3, r2
 80070ca:	603b      	str	r3, [r7, #0]
 80070cc:	683b      	ldr	r3, [r7, #0]
	;

	/*Configure GPIO pins : PC1 PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_7;
 80070ce:	240c      	movs	r4, #12
 80070d0:	193b      	adds	r3, r7, r4
 80070d2:	2282      	movs	r2, #130	; 0x82
 80070d4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070d6:	193b      	adds	r3, r7, r4
 80070d8:	2201      	movs	r2, #1
 80070da:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070dc:	193b      	adds	r3, r7, r4
 80070de:	2200      	movs	r2, #0
 80070e0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80070e2:	193b      	adds	r3, r7, r4
 80070e4:	2203      	movs	r2, #3
 80070e6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070e8:	193b      	adds	r3, r7, r4
 80070ea:	4a22      	ldr	r2, [pc, #136]	; (8007174 <GPIO_Init+0x100>)
 80070ec:	0019      	movs	r1, r3
 80070ee:	0010      	movs	r0, r2
 80070f0:	f7f9 fd64 	bl	8000bbc <HAL_GPIO_Init>

	gpio_config(PORTC, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 80070f4:	481f      	ldr	r0, [pc, #124]	; (8007174 <GPIO_Init+0x100>)
 80070f6:	2300      	movs	r3, #0
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	2300      	movs	r3, #0
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	2302      	movs	r3, #2
 8007100:	2201      	movs	r2, #1
 8007102:	2101      	movs	r1, #1
 8007104:	f7fb fda6 	bl	8002c54 <gpio_config>
	gpio_config(PORTC, 7, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8007108:	481a      	ldr	r0, [pc, #104]	; (8007174 <GPIO_Init+0x100>)
 800710a:	2300      	movs	r3, #0
 800710c:	9301      	str	r3, [sp, #4]
 800710e:	2300      	movs	r3, #0
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	2302      	movs	r3, #2
 8007114:	2201      	movs	r2, #1
 8007116:	2107      	movs	r1, #7
 8007118:	f7fb fd9c 	bl	8002c54 <gpio_config>

	/*Configure GPIO pins : PA0 PA2 PA5 PA8
	 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10
 800711c:	193b      	adds	r3, r7, r4
 800711e:	4a16      	ldr	r2, [pc, #88]	; (8007178 <GPIO_Init+0x104>)
 8007120:	601a      	str	r2, [r3, #0]
			| GPIO_PIN_1 | GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007122:	193b      	adds	r3, r7, r4
 8007124:	2201      	movs	r2, #1
 8007126:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007128:	193b      	adds	r3, r7, r4
 800712a:	2200      	movs	r2, #0
 800712c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800712e:	193b      	adds	r3, r7, r4
 8007130:	2203      	movs	r2, #3
 8007132:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007134:	193a      	adds	r2, r7, r4
 8007136:	2390      	movs	r3, #144	; 0x90
 8007138:	05db      	lsls	r3, r3, #23
 800713a:	0011      	movs	r1, r2
 800713c:	0018      	movs	r0, r3
 800713e:	f7f9 fd3d 	bl	8000bbc <HAL_GPIO_Init>
//	gpio_config(PORTA, 8, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTA, 9, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTA, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);

	/*Configure GPIO pins : PB0 PB10 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_3 | GPIO_PIN_10 | GPIO_PIN_4
 8007142:	0021      	movs	r1, r4
 8007144:	187b      	adds	r3, r7, r1
 8007146:	4a0d      	ldr	r2, [pc, #52]	; (800717c <GPIO_Init+0x108>)
 8007148:	601a      	str	r2, [r3, #0]
			| GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800714a:	187b      	adds	r3, r7, r1
 800714c:	2201      	movs	r2, #1
 800714e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007150:	187b      	adds	r3, r7, r1
 8007152:	2200      	movs	r2, #0
 8007154:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8007156:	187b      	adds	r3, r7, r1
 8007158:	2203      	movs	r2, #3
 800715a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800715c:	187b      	adds	r3, r7, r1
 800715e:	4a08      	ldr	r2, [pc, #32]	; (8007180 <GPIO_Init+0x10c>)
 8007160:	0019      	movs	r1, r3
 8007162:	0010      	movs	r0, r2
 8007164:	f7f9 fd2a 	bl	8000bbc <HAL_GPIO_Init>

//	gpio_config(PORTB, 0, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 4, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 5, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
}
 8007168:	46c0      	nop			; (mov r8, r8)
 800716a:	46bd      	mov	sp, r7
 800716c:	b009      	add	sp, #36	; 0x24
 800716e:	bd90      	pop	{r4, r7, pc}
 8007170:	40021000 	.word	0x40021000
 8007174:	48000800 	.word	0x48000800
 8007178:	00000713 	.word	0x00000713
 800717c:	00000439 	.word	0x00000439
 8007180:	48000400 	.word	0x48000400

08007184 <LCD_Begin>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Begin(void) {
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 800718a:	4b35      	ldr	r3, [pc, #212]	; (8007260 <LCD_Begin+0xdc>)
 800718c:	22f0      	movs	r2, #240	; 0xf0
 800718e:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8007190:	4b34      	ldr	r3, [pc, #208]	; (8007264 <LCD_Begin+0xe0>)
 8007192:	22a0      	movs	r2, #160	; 0xa0
 8007194:	0052      	lsls	r2, r2, #1
 8007196:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8007198:	4b33      	ldr	r3, [pc, #204]	; (8007268 <LCD_Begin+0xe4>)
 800719a:	2200      	movs	r2, #0
 800719c:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 800719e:	4b33      	ldr	r3, [pc, #204]	; (800726c <LCD_Begin+0xe8>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	801a      	strh	r2, [r3, #0]
 80071a4:	4b31      	ldr	r3, [pc, #196]	; (800726c <LCD_Begin+0xe8>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	5e9a      	ldrsh	r2, [r3, r2]
 80071aa:	4b31      	ldr	r3, [pc, #196]	; (8007270 <LCD_Begin+0xec>)
 80071ac:	801a      	strh	r2, [r3, #0]
	m_textsize = 4;
 80071ae:	4b31      	ldr	r3, [pc, #196]	; (8007274 <LCD_Begin+0xf0>)
 80071b0:	2204      	movs	r2, #4
 80071b2:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 80071b4:	4b30      	ldr	r3, [pc, #192]	; (8007278 <LCD_Begin+0xf4>)
 80071b6:	2201      	movs	r2, #1
 80071b8:	4252      	negs	r2, r2
 80071ba:	801a      	strh	r2, [r3, #0]
 80071bc:	4b2e      	ldr	r3, [pc, #184]	; (8007278 <LCD_Begin+0xf4>)
 80071be:	881a      	ldrh	r2, [r3, #0]
 80071c0:	4b2e      	ldr	r3, [pc, #184]	; (800727c <LCD_Begin+0xf8>)
 80071c2:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 80071c4:	4b2e      	ldr	r3, [pc, #184]	; (8007280 <LCD_Begin+0xfc>)
 80071c6:	2201      	movs	r2, #1
 80071c8:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 80071ca:	1dfb      	adds	r3, r7, #7
 80071cc:	2200      	movs	r2, #0
 80071ce:	701a      	strb	r2, [r3, #0]
	uint16_t a, d;

	GPIO_Init();
 80071d0:	f7ff ff50 	bl	8007074 <GPIO_Init>

	LCD_Reset();
 80071d4:	f000 fd8a 	bl	8007cec <LCD_Reset>

	LCD_CS_LOW();
 80071d8:	4b2a      	ldr	r3, [pc, #168]	; (8007284 <LCD_Begin+0x100>)
 80071da:	2200      	movs	r2, #0
 80071dc:	2100      	movs	r1, #0
 80071de:	0018      	movs	r0, r3
 80071e0:	f7fb fe20 	bl	8002e24 <gpio_write>

	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 80071e4:	e027      	b.n	8007236 <LCD_Begin+0xb2>
		a = ST7781_regValues[i++];
 80071e6:	1dfb      	adds	r3, r7, #7
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	1dfa      	adds	r2, r7, #7
 80071ec:	1c59      	adds	r1, r3, #1
 80071ee:	7011      	strb	r1, [r2, #0]
 80071f0:	0019      	movs	r1, r3
 80071f2:	1d3b      	adds	r3, r7, #4
 80071f4:	4a24      	ldr	r2, [pc, #144]	; (8007288 <LCD_Begin+0x104>)
 80071f6:	0049      	lsls	r1, r1, #1
 80071f8:	5a8a      	ldrh	r2, [r1, r2]
 80071fa:	801a      	strh	r2, [r3, #0]
		d = ST7781_regValues[i++];
 80071fc:	1dfb      	adds	r3, r7, #7
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	1dfa      	adds	r2, r7, #7
 8007202:	1c59      	adds	r1, r3, #1
 8007204:	7011      	strb	r1, [r2, #0]
 8007206:	0019      	movs	r1, r3
 8007208:	1cbb      	adds	r3, r7, #2
 800720a:	4a1f      	ldr	r2, [pc, #124]	; (8007288 <LCD_Begin+0x104>)
 800720c:	0049      	lsls	r1, r1, #1
 800720e:	5a8a      	ldrh	r2, [r1, r2]
 8007210:	801a      	strh	r2, [r3, #0]
		if (a == TFTLCD_DELAY) {
 8007212:	1d3b      	adds	r3, r7, #4
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	2bff      	cmp	r3, #255	; 0xff
 8007218:	d105      	bne.n	8007226 <LCD_Begin+0xa2>
			delay(d);
 800721a:	1cbb      	adds	r3, r7, #2
 800721c:	881b      	ldrh	r3, [r3, #0]
 800721e:	0018      	movs	r0, r3
 8007220:	f7ff ff16 	bl	8007050 <delay>
 8007224:	e007      	b.n	8007236 <LCD_Begin+0xb2>
		} else {
			LCD_WriteRegister16(a, d);
 8007226:	1cbb      	adds	r3, r7, #2
 8007228:	881a      	ldrh	r2, [r3, #0]
 800722a:	1d3b      	adds	r3, r7, #4
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	0011      	movs	r1, r2
 8007230:	0018      	movs	r0, r3
 8007232:	f000 ff45 	bl	80080c0 <LCD_WriteRegister16>
	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8007236:	1dfb      	adds	r3, r7, #7
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	2b83      	cmp	r3, #131	; 0x83
 800723c:	d9d3      	bls.n	80071e6 <LCD_Begin+0x62>
		}
	}

	LCD_SetRotation(m_rotation);
 800723e:	4b0a      	ldr	r3, [pc, #40]	; (8007268 <LCD_Begin+0xe4>)
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	0018      	movs	r0, r3
 8007244:	f000 fdfe 	bl	8007e44 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
 8007248:	2340      	movs	r3, #64	; 0x40
 800724a:	33ff      	adds	r3, #255	; 0xff
 800724c:	22ef      	movs	r2, #239	; 0xef
 800724e:	2100      	movs	r1, #0
 8007250:	2000      	movs	r0, #0
 8007252:	f000 fe2b 	bl	8007eac <LCD_SetAddrWindow>
}
 8007256:	46c0      	nop			; (mov r8, r8)
 8007258:	46bd      	mov	sp, r7
 800725a:	b002      	add	sp, #8
 800725c:	bd80      	pop	{r7, pc}
 800725e:	46c0      	nop			; (mov r8, r8)
 8007260:	2000021c 	.word	0x2000021c
 8007264:	2000021e 	.word	0x2000021e
 8007268:	20000229 	.word	0x20000229
 800726c:	20000220 	.word	0x20000220
 8007270:	20000222 	.word	0x20000222
 8007274:	20000228 	.word	0x20000228
 8007278:	20000226 	.word	0x20000226
 800727c:	20000224 	.word	0x20000224
 8007280:	2000022a 	.word	0x2000022a
 8007284:	48000400 	.word	0x48000400
 8007288:	08009b40 	.word	0x08009b40

0800728c <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 800728c:	b590      	push	{r4, r7, lr}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	0004      	movs	r4, r0
 8007294:	0008      	movs	r0, r1
 8007296:	0011      	movs	r1, r2
 8007298:	1dbb      	adds	r3, r7, #6
 800729a:	1c22      	adds	r2, r4, #0
 800729c:	801a      	strh	r2, [r3, #0]
 800729e:	1d3b      	adds	r3, r7, #4
 80072a0:	1c02      	adds	r2, r0, #0
 80072a2:	801a      	strh	r2, [r3, #0]
 80072a4:	1cbb      	adds	r3, r7, #2
 80072a6:	1c0a      	adds	r2, r1, #0
 80072a8:	801a      	strh	r2, [r3, #0]
	// Clip
	if ((x < 0) || (y < 0) || (x >= TFTWIDTH) || (y >= TFTHEIGHT))
 80072aa:	1dbb      	adds	r3, r7, #6
 80072ac:	2200      	movs	r2, #0
 80072ae:	5e9b      	ldrsh	r3, [r3, r2]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	da00      	bge.n	80072b6 <LCD_DrawPixel+0x2a>
 80072b4:	e06d      	b.n	8007392 <LCD_DrawPixel+0x106>
 80072b6:	1d3b      	adds	r3, r7, #4
 80072b8:	2200      	movs	r2, #0
 80072ba:	5e9b      	ldrsh	r3, [r3, r2]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	da00      	bge.n	80072c2 <LCD_DrawPixel+0x36>
 80072c0:	e067      	b.n	8007392 <LCD_DrawPixel+0x106>
 80072c2:	1dbb      	adds	r3, r7, #6
 80072c4:	2200      	movs	r2, #0
 80072c6:	5e9b      	ldrsh	r3, [r3, r2]
 80072c8:	2bef      	cmp	r3, #239	; 0xef
 80072ca:	dc62      	bgt.n	8007392 <LCD_DrawPixel+0x106>
 80072cc:	1d3b      	adds	r3, r7, #4
 80072ce:	2200      	movs	r2, #0
 80072d0:	5e9a      	ldrsh	r2, [r3, r2]
 80072d2:	23a0      	movs	r3, #160	; 0xa0
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	429a      	cmp	r2, r3
 80072d8:	da5b      	bge.n	8007392 <LCD_DrawPixel+0x106>
		return;

	LCD_CS_LOW();
 80072da:	4b30      	ldr	r3, [pc, #192]	; (800739c <LCD_DrawPixel+0x110>)
 80072dc:	2200      	movs	r2, #0
 80072de:	2100      	movs	r1, #0
 80072e0:	0018      	movs	r0, r3
 80072e2:	f7fb fd9f 	bl	8002e24 <gpio_write>

	int16_t t;
	switch (m_rotation) {
 80072e6:	4b2e      	ldr	r3, [pc, #184]	; (80073a0 <LCD_DrawPixel+0x114>)
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	d026      	beq.n	800733c <LCD_DrawPixel+0xb0>
 80072ee:	dc37      	bgt.n	8007360 <LCD_DrawPixel+0xd4>
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d002      	beq.n	80072fa <LCD_DrawPixel+0x6e>
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d011      	beq.n	800731c <LCD_DrawPixel+0x90>
 80072f8:	e032      	b.n	8007360 <LCD_DrawPixel+0xd4>
	case 1:
		t = x;
 80072fa:	210e      	movs	r1, #14
 80072fc:	187b      	adds	r3, r7, r1
 80072fe:	1dba      	adds	r2, r7, #6
 8007300:	8812      	ldrh	r2, [r2, #0]
 8007302:	801a      	strh	r2, [r3, #0]
		x = TFTWIDTH - 1 - y;
 8007304:	1d3b      	adds	r3, r7, #4
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	22ef      	movs	r2, #239	; 0xef
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	b29a      	uxth	r2, r3
 800730e:	1dbb      	adds	r3, r7, #6
 8007310:	801a      	strh	r2, [r3, #0]
		y = t;
 8007312:	1d3b      	adds	r3, r7, #4
 8007314:	187a      	adds	r2, r7, r1
 8007316:	8812      	ldrh	r2, [r2, #0]
 8007318:	801a      	strh	r2, [r3, #0]
		break;
 800731a:	e021      	b.n	8007360 <LCD_DrawPixel+0xd4>
	case 2:
		x = TFTWIDTH - 1 - x;
 800731c:	1dbb      	adds	r3, r7, #6
 800731e:	881b      	ldrh	r3, [r3, #0]
 8007320:	22ef      	movs	r2, #239	; 0xef
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	b29a      	uxth	r2, r3
 8007326:	1dbb      	adds	r3, r7, #6
 8007328:	801a      	strh	r2, [r3, #0]
		y = TFTHEIGHT - 1 - y;
 800732a:	1d3b      	adds	r3, r7, #4
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	2240      	movs	r2, #64	; 0x40
 8007330:	32ff      	adds	r2, #255	; 0xff
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	b29a      	uxth	r2, r3
 8007336:	1d3b      	adds	r3, r7, #4
 8007338:	801a      	strh	r2, [r3, #0]
		break;
 800733a:	e011      	b.n	8007360 <LCD_DrawPixel+0xd4>
	case 3:
		t = x;
 800733c:	210e      	movs	r1, #14
 800733e:	187b      	adds	r3, r7, r1
 8007340:	1dba      	adds	r2, r7, #6
 8007342:	8812      	ldrh	r2, [r2, #0]
 8007344:	801a      	strh	r2, [r3, #0]
		x = y;
 8007346:	1dbb      	adds	r3, r7, #6
 8007348:	1d3a      	adds	r2, r7, #4
 800734a:	8812      	ldrh	r2, [r2, #0]
 800734c:	801a      	strh	r2, [r3, #0]
		y = TFTHEIGHT - 1 - t;
 800734e:	187b      	adds	r3, r7, r1
 8007350:	881b      	ldrh	r3, [r3, #0]
 8007352:	2240      	movs	r2, #64	; 0x40
 8007354:	32ff      	adds	r2, #255	; 0xff
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	b29a      	uxth	r2, r3
 800735a:	1d3b      	adds	r3, r7, #4
 800735c:	801a      	strh	r2, [r3, #0]
		break;
 800735e:	46c0      	nop			; (mov r8, r8)
	}

	LCD_WriteRegister16(0x0020, x);
 8007360:	1dbb      	adds	r3, r7, #6
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	0019      	movs	r1, r3
 8007366:	2020      	movs	r0, #32
 8007368:	f000 feaa 	bl	80080c0 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 800736c:	1d3b      	adds	r3, r7, #4
 800736e:	881b      	ldrh	r3, [r3, #0]
 8007370:	0019      	movs	r1, r3
 8007372:	2021      	movs	r0, #33	; 0x21
 8007374:	f000 fea4 	bl	80080c0 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0022, color);
 8007378:	1cbb      	adds	r3, r7, #2
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	0019      	movs	r1, r3
 800737e:	2022      	movs	r0, #34	; 0x22
 8007380:	f000 fe9e 	bl	80080c0 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8007384:	4b05      	ldr	r3, [pc, #20]	; (800739c <LCD_DrawPixel+0x110>)
 8007386:	2201      	movs	r2, #1
 8007388:	2100      	movs	r1, #0
 800738a:	0018      	movs	r0, r3
 800738c:	f7fb fd4a 	bl	8002e24 <gpio_write>
 8007390:	e000      	b.n	8007394 <LCD_DrawPixel+0x108>
		return;
 8007392:	46c0      	nop			; (mov r8, r8)
}
 8007394:	46bd      	mov	sp, r7
 8007396:	b005      	add	sp, #20
 8007398:	bd90      	pop	{r4, r7, pc}
 800739a:	46c0      	nop			; (mov r8, r8)
 800739c:	48000400 	.word	0x48000400
 80073a0:	20000229 	.word	0x20000229

080073a4 <LCD_DrawChar>:
 * \param size		Character Size
 * 
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
		uint16_t bg, uint8_t size) {
 80073a4:	b5b0      	push	{r4, r5, r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af02      	add	r7, sp, #8
 80073aa:	0005      	movs	r5, r0
 80073ac:	000c      	movs	r4, r1
 80073ae:	0010      	movs	r0, r2
 80073b0:	0019      	movs	r1, r3
 80073b2:	1dbb      	adds	r3, r7, #6
 80073b4:	1c2a      	adds	r2, r5, #0
 80073b6:	801a      	strh	r2, [r3, #0]
 80073b8:	1d3b      	adds	r3, r7, #4
 80073ba:	1c22      	adds	r2, r4, #0
 80073bc:	801a      	strh	r2, [r3, #0]
 80073be:	1cfb      	adds	r3, r7, #3
 80073c0:	1c02      	adds	r2, r0, #0
 80073c2:	701a      	strb	r2, [r3, #0]
 80073c4:	003b      	movs	r3, r7
 80073c6:	1c0a      	adds	r2, r1, #0
 80073c8:	801a      	strh	r2, [r3, #0]
	if ((x >= m_width) || // Clip right
 80073ca:	4b8f      	ldr	r3, [pc, #572]	; (8007608 <LCD_DrawChar+0x264>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	5e9b      	ldrsh	r3, [r3, r2]
 80073d0:	1dba      	adds	r2, r7, #6
 80073d2:	2100      	movs	r1, #0
 80073d4:	5e52      	ldrsh	r2, [r2, r1]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	db00      	blt.n	80073dc <LCD_DrawChar+0x38>
 80073da:	e110      	b.n	80075fe <LCD_DrawChar+0x25a>
			(y >= m_height) || // Clip bottom
 80073dc:	4b8b      	ldr	r3, [pc, #556]	; (800760c <LCD_DrawChar+0x268>)
 80073de:	2200      	movs	r2, #0
 80073e0:	5e9b      	ldrsh	r3, [r3, r2]
	if ((x >= m_width) || // Clip right
 80073e2:	1d3a      	adds	r2, r7, #4
 80073e4:	2100      	movs	r1, #0
 80073e6:	5e52      	ldrsh	r2, [r2, r1]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	db00      	blt.n	80073ee <LCD_DrawChar+0x4a>
 80073ec:	e107      	b.n	80075fe <LCD_DrawChar+0x25a>
			((x + 6 * size - 1) < 0) || // Clip left
 80073ee:	1dbb      	adds	r3, r7, #6
 80073f0:	2100      	movs	r1, #0
 80073f2:	5e59      	ldrsh	r1, [r3, r1]
 80073f4:	2024      	movs	r0, #36	; 0x24
 80073f6:	183b      	adds	r3, r7, r0
 80073f8:	781a      	ldrb	r2, [r3, #0]
 80073fa:	0013      	movs	r3, r2
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	189b      	adds	r3, r3, r2
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	18cb      	adds	r3, r1, r3
			(y >= m_height) || // Clip bottom
 8007404:	2b00      	cmp	r3, #0
 8007406:	dc00      	bgt.n	800740a <LCD_DrawChar+0x66>
 8007408:	e0f9      	b.n	80075fe <LCD_DrawChar+0x25a>
			((y + 8 * size - 1) < 0))   // Clip top
 800740a:	1d3b      	adds	r3, r7, #4
 800740c:	2200      	movs	r2, #0
 800740e:	5e9a      	ldrsh	r2, [r3, r2]
 8007410:	183b      	adds	r3, r7, r0
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	18d3      	adds	r3, r2, r3
			((x + 6 * size - 1) < 0) || // Clip left
 8007418:	2b00      	cmp	r3, #0
 800741a:	dc00      	bgt.n	800741e <LCD_DrawChar+0x7a>
 800741c:	e0ef      	b.n	80075fe <LCD_DrawChar+0x25a>
		return;

	for (int8_t i = 0; i < 6; i++) {
 800741e:	230f      	movs	r3, #15
 8007420:	18fb      	adds	r3, r7, r3
 8007422:	2200      	movs	r2, #0
 8007424:	701a      	strb	r2, [r3, #0]
 8007426:	e0e2      	b.n	80075ee <LCD_DrawChar+0x24a>
		uint8_t line;
		if (i == 5) {
 8007428:	230f      	movs	r3, #15
 800742a:	18fb      	adds	r3, r7, r3
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	b25b      	sxtb	r3, r3
 8007430:	2b05      	cmp	r3, #5
 8007432:	d104      	bne.n	800743e <LCD_DrawChar+0x9a>
			line = 0x0;
 8007434:	230e      	movs	r3, #14
 8007436:	18fb      	adds	r3, r7, r3
 8007438:	2200      	movs	r2, #0
 800743a:	701a      	strb	r2, [r3, #0]
 800743c:	e0ce      	b.n	80075dc <LCD_DrawChar+0x238>
		} else {
			line = font[c * 5 + i];   //pgm_read_byte(font+(c*5)+i);
 800743e:	1cfb      	adds	r3, r7, #3
 8007440:	781a      	ldrb	r2, [r3, #0]
 8007442:	0013      	movs	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	189a      	adds	r2, r3, r2
 8007448:	230f      	movs	r3, #15
 800744a:	18fb      	adds	r3, r7, r3
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	b25b      	sxtb	r3, r3
 8007450:	18d2      	adds	r2, r2, r3
 8007452:	230e      	movs	r3, #14
 8007454:	18fb      	adds	r3, r7, r3
 8007456:	496e      	ldr	r1, [pc, #440]	; (8007610 <LCD_DrawChar+0x26c>)
 8007458:	5c8a      	ldrb	r2, [r1, r2]
 800745a:	701a      	strb	r2, [r3, #0]
			for (int8_t j = 0; j < 8; j++) {
 800745c:	230d      	movs	r3, #13
 800745e:	18fb      	adds	r3, r7, r3
 8007460:	2200      	movs	r2, #0
 8007462:	701a      	strb	r2, [r3, #0]
 8007464:	e0b3      	b.n	80075ce <LCD_DrawChar+0x22a>
				if (line & 0x1) {
 8007466:	230e      	movs	r3, #14
 8007468:	18fb      	adds	r3, r7, r3
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	2201      	movs	r2, #1
 800746e:	4013      	ands	r3, r2
 8007470:	d04b      	beq.n	800750a <LCD_DrawChar+0x166>
					if (size == 1) { // default size
 8007472:	2324      	movs	r3, #36	; 0x24
 8007474:	18fb      	adds	r3, r7, r3
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d119      	bne.n	80074b0 <LCD_DrawChar+0x10c>
						LCD_DrawPixel(x + i, y + j, color);
 800747c:	230f      	movs	r3, #15
 800747e:	18fb      	adds	r3, r7, r3
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	b25b      	sxtb	r3, r3
 8007484:	b29a      	uxth	r2, r3
 8007486:	1dbb      	adds	r3, r7, #6
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	18d3      	adds	r3, r2, r3
 800748c:	b29b      	uxth	r3, r3
 800748e:	b218      	sxth	r0, r3
 8007490:	230d      	movs	r3, #13
 8007492:	18fb      	adds	r3, r7, r3
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	b25b      	sxtb	r3, r3
 8007498:	b29a      	uxth	r2, r3
 800749a:	1d3b      	adds	r3, r7, #4
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	18d3      	adds	r3, r2, r3
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	b219      	sxth	r1, r3
 80074a4:	003b      	movs	r3, r7
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	001a      	movs	r2, r3
 80074aa:	f7ff feef 	bl	800728c <LCD_DrawPixel>
 80074ae:	e07f      	b.n	80075b0 <LCD_DrawChar+0x20c>
					} else {  // big size
						LCD_FillRect(x + (i * size), y + (j * size), size, size,
 80074b0:	230f      	movs	r3, #15
 80074b2:	18fb      	adds	r3, r7, r3
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	b25b      	sxtb	r3, r3
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2124      	movs	r1, #36	; 0x24
 80074bc:	187a      	adds	r2, r7, r1
 80074be:	7812      	ldrb	r2, [r2, #0]
 80074c0:	b292      	uxth	r2, r2
 80074c2:	4353      	muls	r3, r2
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	1dbb      	adds	r3, r7, #6
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	18d3      	adds	r3, r2, r3
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	b218      	sxth	r0, r3
 80074d0:	230d      	movs	r3, #13
 80074d2:	18fb      	adds	r3, r7, r3
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	b25b      	sxtb	r3, r3
 80074d8:	b29b      	uxth	r3, r3
 80074da:	000c      	movs	r4, r1
 80074dc:	187a      	adds	r2, r7, r1
 80074de:	7812      	ldrb	r2, [r2, #0]
 80074e0:	b292      	uxth	r2, r2
 80074e2:	4353      	muls	r3, r2
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	1d3b      	adds	r3, r7, #4
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	18d3      	adds	r3, r2, r3
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	b219      	sxth	r1, r3
 80074f0:	193b      	adds	r3, r7, r4
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	b21a      	sxth	r2, r3
 80074f6:	193b      	adds	r3, r7, r4
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	b21c      	sxth	r4, r3
 80074fc:	003b      	movs	r3, r7
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	0023      	movs	r3, r4
 8007504:	f000 f886 	bl	8007614 <LCD_FillRect>
 8007508:	e052      	b.n	80075b0 <LCD_DrawChar+0x20c>
								color);
					}
				} else if (bg != color) {
 800750a:	2420      	movs	r4, #32
 800750c:	193b      	adds	r3, r7, r4
 800750e:	0039      	movs	r1, r7
 8007510:	881a      	ldrh	r2, [r3, #0]
 8007512:	880b      	ldrh	r3, [r1, #0]
 8007514:	429a      	cmp	r2, r3
 8007516:	d04b      	beq.n	80075b0 <LCD_DrawChar+0x20c>
					if (size == 1) { // default size
 8007518:	2324      	movs	r3, #36	; 0x24
 800751a:	18fb      	adds	r3, r7, r3
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d119      	bne.n	8007556 <LCD_DrawChar+0x1b2>
						LCD_DrawPixel(x + i, y + j, bg);
 8007522:	230f      	movs	r3, #15
 8007524:	18fb      	adds	r3, r7, r3
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	b25b      	sxtb	r3, r3
 800752a:	b29a      	uxth	r2, r3
 800752c:	1dbb      	adds	r3, r7, #6
 800752e:	881b      	ldrh	r3, [r3, #0]
 8007530:	18d3      	adds	r3, r2, r3
 8007532:	b29b      	uxth	r3, r3
 8007534:	b218      	sxth	r0, r3
 8007536:	230d      	movs	r3, #13
 8007538:	18fb      	adds	r3, r7, r3
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	b25b      	sxtb	r3, r3
 800753e:	b29a      	uxth	r2, r3
 8007540:	1d3b      	adds	r3, r7, #4
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	18d3      	adds	r3, r2, r3
 8007546:	b29b      	uxth	r3, r3
 8007548:	b219      	sxth	r1, r3
 800754a:	193b      	adds	r3, r7, r4
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	001a      	movs	r2, r3
 8007550:	f7ff fe9c 	bl	800728c <LCD_DrawPixel>
 8007554:	e02c      	b.n	80075b0 <LCD_DrawChar+0x20c>
					} else {  // big size
						LCD_FillRect(x + i * size, y + j * size, size, size,
 8007556:	230f      	movs	r3, #15
 8007558:	18fb      	adds	r3, r7, r3
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	b25b      	sxtb	r3, r3
 800755e:	b29b      	uxth	r3, r3
 8007560:	2124      	movs	r1, #36	; 0x24
 8007562:	187a      	adds	r2, r7, r1
 8007564:	7812      	ldrb	r2, [r2, #0]
 8007566:	b292      	uxth	r2, r2
 8007568:	4353      	muls	r3, r2
 800756a:	b29a      	uxth	r2, r3
 800756c:	1dbb      	adds	r3, r7, #6
 800756e:	881b      	ldrh	r3, [r3, #0]
 8007570:	18d3      	adds	r3, r2, r3
 8007572:	b29b      	uxth	r3, r3
 8007574:	b218      	sxth	r0, r3
 8007576:	230d      	movs	r3, #13
 8007578:	18fb      	adds	r3, r7, r3
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	b25b      	sxtb	r3, r3
 800757e:	b29b      	uxth	r3, r3
 8007580:	000c      	movs	r4, r1
 8007582:	187a      	adds	r2, r7, r1
 8007584:	7812      	ldrb	r2, [r2, #0]
 8007586:	b292      	uxth	r2, r2
 8007588:	4353      	muls	r3, r2
 800758a:	b29a      	uxth	r2, r3
 800758c:	1d3b      	adds	r3, r7, #4
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	18d3      	adds	r3, r2, r3
 8007592:	b29b      	uxth	r3, r3
 8007594:	b219      	sxth	r1, r3
 8007596:	193b      	adds	r3, r7, r4
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	b21a      	sxth	r2, r3
 800759c:	193b      	adds	r3, r7, r4
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	b21c      	sxth	r4, r3
 80075a2:	2320      	movs	r3, #32
 80075a4:	18fb      	adds	r3, r7, r3
 80075a6:	881b      	ldrh	r3, [r3, #0]
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	0023      	movs	r3, r4
 80075ac:	f000 f832 	bl	8007614 <LCD_FillRect>
								bg);
					}
				}
				line >>= 1;
 80075b0:	220e      	movs	r2, #14
 80075b2:	18bb      	adds	r3, r7, r2
 80075b4:	18ba      	adds	r2, r7, r2
 80075b6:	7812      	ldrb	r2, [r2, #0]
 80075b8:	0852      	lsrs	r2, r2, #1
 80075ba:	701a      	strb	r2, [r3, #0]
			for (int8_t j = 0; j < 8; j++) {
 80075bc:	210d      	movs	r1, #13
 80075be:	187b      	adds	r3, r7, r1
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	b25b      	sxtb	r3, r3
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	3301      	adds	r3, #1
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	187b      	adds	r3, r7, r1
 80075cc:	701a      	strb	r2, [r3, #0]
 80075ce:	230d      	movs	r3, #13
 80075d0:	18fb      	adds	r3, r7, r3
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	b25b      	sxtb	r3, r3
 80075d6:	2b07      	cmp	r3, #7
 80075d8:	dc00      	bgt.n	80075dc <LCD_DrawChar+0x238>
 80075da:	e744      	b.n	8007466 <LCD_DrawChar+0xc2>
	for (int8_t i = 0; i < 6; i++) {
 80075dc:	210f      	movs	r1, #15
 80075de:	187b      	adds	r3, r7, r1
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	b25b      	sxtb	r3, r3
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	3301      	adds	r3, #1
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	187b      	adds	r3, r7, r1
 80075ec:	701a      	strb	r2, [r3, #0]
 80075ee:	230f      	movs	r3, #15
 80075f0:	18fb      	adds	r3, r7, r3
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	b25b      	sxtb	r3, r3
 80075f6:	2b05      	cmp	r3, #5
 80075f8:	dc00      	bgt.n	80075fc <LCD_DrawChar+0x258>
 80075fa:	e715      	b.n	8007428 <LCD_DrawChar+0x84>
 80075fc:	e000      	b.n	8007600 <LCD_DrawChar+0x25c>
		return;
 80075fe:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
}
 8007600:	46bd      	mov	sp, r7
 8007602:	b004      	add	sp, #16
 8007604:	bdb0      	pop	{r4, r5, r7, pc}
 8007606:	46c0      	nop			; (mov r8, r8)
 8007608:	2000021c 	.word	0x2000021c
 800760c:	2000021e 	.word	0x2000021e
 8007610:	080098c0 	.word	0x080098c0

08007614 <LCD_FillRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRect(int16_t x, int16_t y1, int16_t w, int16_t h,
		uint16_t fillcolor) {
 8007614:	b5b0      	push	{r4, r5, r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	0005      	movs	r5, r0
 800761c:	000c      	movs	r4, r1
 800761e:	0010      	movs	r0, r2
 8007620:	0019      	movs	r1, r3
 8007622:	1dbb      	adds	r3, r7, #6
 8007624:	1c2a      	adds	r2, r5, #0
 8007626:	801a      	strh	r2, [r3, #0]
 8007628:	1d3b      	adds	r3, r7, #4
 800762a:	1c22      	adds	r2, r4, #0
 800762c:	801a      	strh	r2, [r3, #0]
 800762e:	1cbb      	adds	r3, r7, #2
 8007630:	1c02      	adds	r2, r0, #0
 8007632:	801a      	strh	r2, [r3, #0]
 8007634:	003b      	movs	r3, r7
 8007636:	1c0a      	adds	r2, r1, #0
 8007638:	801a      	strh	r2, [r3, #0]
	int16_t x2, y2;

	// Initial off-screen clipping
	if ((w <= 0) || (h <= 0) || (x >= m_width) || (y1 >= m_height)
 800763a:	1cbb      	adds	r3, r7, #2
 800763c:	2200      	movs	r2, #0
 800763e:	5e9b      	ldrsh	r3, [r3, r2]
 8007640:	2b00      	cmp	r3, #0
 8007642:	dc00      	bgt.n	8007646 <LCD_FillRect+0x32>
 8007644:	e0ba      	b.n	80077bc <LCD_FillRect+0x1a8>
 8007646:	003b      	movs	r3, r7
 8007648:	2200      	movs	r2, #0
 800764a:	5e9b      	ldrsh	r3, [r3, r2]
 800764c:	2b00      	cmp	r3, #0
 800764e:	dc00      	bgt.n	8007652 <LCD_FillRect+0x3e>
 8007650:	e0b4      	b.n	80077bc <LCD_FillRect+0x1a8>
 8007652:	4b5c      	ldr	r3, [pc, #368]	; (80077c4 <LCD_FillRect+0x1b0>)
 8007654:	2200      	movs	r2, #0
 8007656:	5e9b      	ldrsh	r3, [r3, r2]
 8007658:	1dba      	adds	r2, r7, #6
 800765a:	2100      	movs	r1, #0
 800765c:	5e52      	ldrsh	r2, [r2, r1]
 800765e:	429a      	cmp	r2, r3
 8007660:	db00      	blt.n	8007664 <LCD_FillRect+0x50>
 8007662:	e0ab      	b.n	80077bc <LCD_FillRect+0x1a8>
 8007664:	4b58      	ldr	r3, [pc, #352]	; (80077c8 <LCD_FillRect+0x1b4>)
 8007666:	2200      	movs	r2, #0
 8007668:	5e9b      	ldrsh	r3, [r3, r2]
 800766a:	1d3a      	adds	r2, r7, #4
 800766c:	2100      	movs	r1, #0
 800766e:	5e52      	ldrsh	r2, [r2, r1]
 8007670:	429a      	cmp	r2, r3
 8007672:	db00      	blt.n	8007676 <LCD_FillRect+0x62>
 8007674:	e0a2      	b.n	80077bc <LCD_FillRect+0x1a8>
			|| ((x2 = x + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8007676:	1dbb      	adds	r3, r7, #6
 8007678:	881a      	ldrh	r2, [r3, #0]
 800767a:	1cbb      	adds	r3, r7, #2
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	18d3      	adds	r3, r2, r3
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	210e      	movs	r1, #14
 8007688:	187b      	adds	r3, r7, r1
 800768a:	801a      	strh	r2, [r3, #0]
 800768c:	187b      	adds	r3, r7, r1
 800768e:	2200      	movs	r2, #0
 8007690:	5e9b      	ldrsh	r3, [r3, r2]
 8007692:	2b00      	cmp	r3, #0
 8007694:	da00      	bge.n	8007698 <LCD_FillRect+0x84>
 8007696:	e091      	b.n	80077bc <LCD_FillRect+0x1a8>
 8007698:	1d3b      	adds	r3, r7, #4
 800769a:	881a      	ldrh	r2, [r3, #0]
 800769c:	003b      	movs	r3, r7
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	18d3      	adds	r3, r2, r3
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	210c      	movs	r1, #12
 80076aa:	187b      	adds	r3, r7, r1
 80076ac:	801a      	strh	r2, [r3, #0]
 80076ae:	187b      	adds	r3, r7, r1
 80076b0:	2200      	movs	r2, #0
 80076b2:	5e9b      	ldrsh	r3, [r3, r2]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	da00      	bge.n	80076ba <LCD_FillRect+0xa6>
 80076b8:	e080      	b.n	80077bc <LCD_FillRect+0x1a8>
		return;
	if (x < 0) { // Clip left
 80076ba:	1dbb      	adds	r3, r7, #6
 80076bc:	2200      	movs	r2, #0
 80076be:	5e9b      	ldrsh	r3, [r3, r2]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	da0a      	bge.n	80076da <LCD_FillRect+0xc6>
		w += x;
 80076c4:	1cbb      	adds	r3, r7, #2
 80076c6:	881a      	ldrh	r2, [r3, #0]
 80076c8:	1dbb      	adds	r3, r7, #6
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	18d3      	adds	r3, r2, r3
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	1cbb      	adds	r3, r7, #2
 80076d2:	801a      	strh	r2, [r3, #0]
		x = 0;
 80076d4:	1dbb      	adds	r3, r7, #6
 80076d6:	2200      	movs	r2, #0
 80076d8:	801a      	strh	r2, [r3, #0]
	}
	if (y1 < 0) { // Clip top
 80076da:	1d3b      	adds	r3, r7, #4
 80076dc:	2200      	movs	r2, #0
 80076de:	5e9b      	ldrsh	r3, [r3, r2]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	da0a      	bge.n	80076fa <LCD_FillRect+0xe6>
		h += y1;
 80076e4:	003b      	movs	r3, r7
 80076e6:	881a      	ldrh	r2, [r3, #0]
 80076e8:	1d3b      	adds	r3, r7, #4
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	18d3      	adds	r3, r2, r3
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	003b      	movs	r3, r7
 80076f2:	801a      	strh	r2, [r3, #0]
		y1 = 0;
 80076f4:	1d3b      	adds	r3, r7, #4
 80076f6:	2200      	movs	r2, #0
 80076f8:	801a      	strh	r2, [r3, #0]
	}
	if (x2 >= m_width) { // Clip right
 80076fa:	4b32      	ldr	r3, [pc, #200]	; (80077c4 <LCD_FillRect+0x1b0>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	5e9b      	ldrsh	r3, [r3, r2]
 8007700:	210e      	movs	r1, #14
 8007702:	187a      	adds	r2, r7, r1
 8007704:	2000      	movs	r0, #0
 8007706:	5e12      	ldrsh	r2, [r2, r0]
 8007708:	429a      	cmp	r2, r3
 800770a:	db11      	blt.n	8007730 <LCD_FillRect+0x11c>
		x2 = m_width - 1;
 800770c:	4b2d      	ldr	r3, [pc, #180]	; (80077c4 <LCD_FillRect+0x1b0>)
 800770e:	2200      	movs	r2, #0
 8007710:	5e9b      	ldrsh	r3, [r3, r2]
 8007712:	b29b      	uxth	r3, r3
 8007714:	3b01      	subs	r3, #1
 8007716:	b29a      	uxth	r2, r3
 8007718:	187b      	adds	r3, r7, r1
 800771a:	801a      	strh	r2, [r3, #0]
		w = x2 - x + 1;
 800771c:	187b      	adds	r3, r7, r1
 800771e:	881a      	ldrh	r2, [r3, #0]
 8007720:	1dbb      	adds	r3, r7, #6
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	b29b      	uxth	r3, r3
 8007728:	3301      	adds	r3, #1
 800772a:	b29a      	uxth	r2, r3
 800772c:	1cbb      	adds	r3, r7, #2
 800772e:	801a      	strh	r2, [r3, #0]
	}
	if (y2 >= m_height) { // Clip bottom
 8007730:	4b25      	ldr	r3, [pc, #148]	; (80077c8 <LCD_FillRect+0x1b4>)
 8007732:	2200      	movs	r2, #0
 8007734:	5e9b      	ldrsh	r3, [r3, r2]
 8007736:	210c      	movs	r1, #12
 8007738:	187a      	adds	r2, r7, r1
 800773a:	2000      	movs	r0, #0
 800773c:	5e12      	ldrsh	r2, [r2, r0]
 800773e:	429a      	cmp	r2, r3
 8007740:	db11      	blt.n	8007766 <LCD_FillRect+0x152>
		y2 = m_height - 1;
 8007742:	4b21      	ldr	r3, [pc, #132]	; (80077c8 <LCD_FillRect+0x1b4>)
 8007744:	2200      	movs	r2, #0
 8007746:	5e9b      	ldrsh	r3, [r3, r2]
 8007748:	b29b      	uxth	r3, r3
 800774a:	3b01      	subs	r3, #1
 800774c:	b29a      	uxth	r2, r3
 800774e:	187b      	adds	r3, r7, r1
 8007750:	801a      	strh	r2, [r3, #0]
		h = y2 - y1 + 1;
 8007752:	187b      	adds	r3, r7, r1
 8007754:	881a      	ldrh	r2, [r3, #0]
 8007756:	1d3b      	adds	r3, r7, #4
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	b29b      	uxth	r3, r3
 800775e:	3301      	adds	r3, #1
 8007760:	b29a      	uxth	r2, r3
 8007762:	003b      	movs	r3, r7
 8007764:	801a      	strh	r2, [r3, #0]
	}

	LCD_SetAddrWindow(x, y1, x2, y2);
 8007766:	1dbb      	adds	r3, r7, #6
 8007768:	2000      	movs	r0, #0
 800776a:	5e18      	ldrsh	r0, [r3, r0]
 800776c:	1d3b      	adds	r3, r7, #4
 800776e:	2100      	movs	r1, #0
 8007770:	5e59      	ldrsh	r1, [r3, r1]
 8007772:	230e      	movs	r3, #14
 8007774:	18fb      	adds	r3, r7, r3
 8007776:	2200      	movs	r2, #0
 8007778:	5e9a      	ldrsh	r2, [r3, r2]
 800777a:	230c      	movs	r3, #12
 800777c:	18fb      	adds	r3, r7, r3
 800777e:	2400      	movs	r4, #0
 8007780:	5f1b      	ldrsh	r3, [r3, r4]
 8007782:	f000 fb93 	bl	8007eac <LCD_SetAddrWindow>
	LCD_Flood(fillcolor, (uint32_t) w * (uint32_t) h);
 8007786:	1cbb      	adds	r3, r7, #2
 8007788:	2200      	movs	r2, #0
 800778a:	5e9b      	ldrsh	r3, [r3, r2]
 800778c:	003a      	movs	r2, r7
 800778e:	2100      	movs	r1, #0
 8007790:	5e52      	ldrsh	r2, [r2, r1]
 8007792:	435a      	muls	r2, r3
 8007794:	2320      	movs	r3, #32
 8007796:	18fb      	adds	r3, r7, r3
 8007798:	881b      	ldrh	r3, [r3, #0]
 800779a:	0011      	movs	r1, r2
 800779c:	0018      	movs	r0, r3
 800779e:	f000 f86f 	bl	8007880 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 80077a2:	4b08      	ldr	r3, [pc, #32]	; (80077c4 <LCD_FillRect+0x1b0>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	5e9b      	ldrsh	r3, [r3, r2]
 80077a8:	1e5a      	subs	r2, r3, #1
 80077aa:	4b07      	ldr	r3, [pc, #28]	; (80077c8 <LCD_FillRect+0x1b4>)
 80077ac:	2100      	movs	r1, #0
 80077ae:	5e5b      	ldrsh	r3, [r3, r1]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	2100      	movs	r1, #0
 80077b4:	2000      	movs	r0, #0
 80077b6:	f000 fb79 	bl	8007eac <LCD_SetAddrWindow>
 80077ba:	e000      	b.n	80077be <LCD_FillRect+0x1aa>
		return;
 80077bc:	46c0      	nop			; (mov r8, r8)
}
 80077be:	46bd      	mov	sp, r7
 80077c0:	b004      	add	sp, #16
 80077c2:	bdb0      	pop	{r4, r5, r7, pc}
 80077c4:	2000021c 	.word	0x2000021c
 80077c8:	2000021e 	.word	0x2000021e

080077cc <LCD_FillScreen>:
 * 
 * \param color	Color
 * 
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	0002      	movs	r2, r0
 80077d4:	1dbb      	adds	r3, r7, #6
 80077d6:	801a      	strh	r2, [r3, #0]
	// state, just need to set the address pointer to the top-left corner.
	// Although we could fill in any direction, the code uses the current
	// screen rotation because some users find it disconcerting when a
	// fill does not occur top-to-bottom.
	uint16_t x, y;
	switch (m_rotation) {
 80077d8:	4b27      	ldr	r3, [pc, #156]	; (8007878 <LCD_FillScreen+0xac>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d020      	beq.n	8007822 <LCD_FillScreen+0x56>
 80077e0:	dc03      	bgt.n	80077ea <LCD_FillScreen+0x1e>
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d00a      	beq.n	80077fc <LCD_FillScreen+0x30>
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d011      	beq.n	800780e <LCD_FillScreen+0x42>
	default:
		x = 0;
 80077ea:	230e      	movs	r3, #14
 80077ec:	18fb      	adds	r3, r7, r3
 80077ee:	2200      	movs	r2, #0
 80077f0:	801a      	strh	r2, [r3, #0]
		y = 0;
 80077f2:	230c      	movs	r3, #12
 80077f4:	18fb      	adds	r3, r7, r3
 80077f6:	2200      	movs	r2, #0
 80077f8:	801a      	strh	r2, [r3, #0]
		break;
 80077fa:	e01c      	b.n	8007836 <LCD_FillScreen+0x6a>
	case 1:
		x = TFTWIDTH - 1;
 80077fc:	230e      	movs	r3, #14
 80077fe:	18fb      	adds	r3, r7, r3
 8007800:	22ef      	movs	r2, #239	; 0xef
 8007802:	801a      	strh	r2, [r3, #0]
		y = 0;
 8007804:	230c      	movs	r3, #12
 8007806:	18fb      	adds	r3, r7, r3
 8007808:	2200      	movs	r2, #0
 800780a:	801a      	strh	r2, [r3, #0]
		break;
 800780c:	e013      	b.n	8007836 <LCD_FillScreen+0x6a>
	case 2:
		x = TFTWIDTH - 1;
 800780e:	230e      	movs	r3, #14
 8007810:	18fb      	adds	r3, r7, r3
 8007812:	22ef      	movs	r2, #239	; 0xef
 8007814:	801a      	strh	r2, [r3, #0]
		y = TFTHEIGHT - 1;
 8007816:	230c      	movs	r3, #12
 8007818:	18fb      	adds	r3, r7, r3
 800781a:	2240      	movs	r2, #64	; 0x40
 800781c:	32ff      	adds	r2, #255	; 0xff
 800781e:	801a      	strh	r2, [r3, #0]
		break;
 8007820:	e009      	b.n	8007836 <LCD_FillScreen+0x6a>
	case 3:
		x = 0;
 8007822:	230e      	movs	r3, #14
 8007824:	18fb      	adds	r3, r7, r3
 8007826:	2200      	movs	r2, #0
 8007828:	801a      	strh	r2, [r3, #0]
		y = TFTHEIGHT - 1;
 800782a:	230c      	movs	r3, #12
 800782c:	18fb      	adds	r3, r7, r3
 800782e:	2240      	movs	r2, #64	; 0x40
 8007830:	32ff      	adds	r2, #255	; 0xff
 8007832:	801a      	strh	r2, [r3, #0]
		break;
 8007834:	46c0      	nop			; (mov r8, r8)
	}
	LCD_CS_LOW();
 8007836:	4b11      	ldr	r3, [pc, #68]	; (800787c <LCD_FillScreen+0xb0>)
 8007838:	2200      	movs	r2, #0
 800783a:	2100      	movs	r1, #0
 800783c:	0018      	movs	r0, r3
 800783e:	f7fb faf1 	bl	8002e24 <gpio_write>
	LCD_WriteRegister16(0x0020, x);
 8007842:	230e      	movs	r3, #14
 8007844:	18fb      	adds	r3, r7, r3
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	0019      	movs	r1, r3
 800784a:	2020      	movs	r0, #32
 800784c:	f000 fc38 	bl	80080c0 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8007850:	230c      	movs	r3, #12
 8007852:	18fb      	adds	r3, r7, r3
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	0019      	movs	r1, r3
 8007858:	2021      	movs	r0, #33	; 0x21
 800785a:	f000 fc31 	bl	80080c0 <LCD_WriteRegister16>

	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 800785e:	2396      	movs	r3, #150	; 0x96
 8007860:	025a      	lsls	r2, r3, #9
 8007862:	1dbb      	adds	r3, r7, #6
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	0011      	movs	r1, r2
 8007868:	0018      	movs	r0, r3
 800786a:	f000 f809 	bl	8007880 <LCD_Flood>
}
 800786e:	46c0      	nop			; (mov r8, r8)
 8007870:	46bd      	mov	sp, r7
 8007872:	b004      	add	sp, #16
 8007874:	bd80      	pop	{r7, pc}
 8007876:	46c0      	nop			; (mov r8, r8)
 8007878:	20000229 	.word	0x20000229
 800787c:	48000400 	.word	0x48000400

08007880 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 * 
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 8007880:	b5b0      	push	{r4, r5, r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	0002      	movs	r2, r0
 8007888:	6039      	str	r1, [r7, #0]
 800788a:	1dbb      	adds	r3, r7, #6
 800788c:	801a      	strh	r2, [r3, #0]
	uint16_t blocks;
	uint8_t i, hi = color >> 8, lo = color;
 800788e:	1dbb      	adds	r3, r7, #6
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	0a1b      	lsrs	r3, r3, #8
 8007894:	b29a      	uxth	r2, r3
 8007896:	240c      	movs	r4, #12
 8007898:	193b      	adds	r3, r7, r4
 800789a:	701a      	strb	r2, [r3, #0]
 800789c:	250b      	movs	r5, #11
 800789e:	197b      	adds	r3, r7, r5
 80078a0:	1dba      	adds	r2, r7, #6
 80078a2:	8812      	ldrh	r2, [r2, #0]
 80078a4:	701a      	strb	r2, [r3, #0]

	LCD_CS_LOW();
 80078a6:	4bc5      	ldr	r3, [pc, #788]	; (8007bbc <LCD_Flood+0x33c>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	2100      	movs	r1, #0
 80078ac:	0018      	movs	r0, r3
 80078ae:	f7fb fab9 	bl	8002e24 <gpio_write>
	LCD_CD_LOW();
 80078b2:	2390      	movs	r3, #144	; 0x90
 80078b4:	05db      	lsls	r3, r3, #23
 80078b6:	2200      	movs	r2, #0
 80078b8:	2104      	movs	r1, #4
 80078ba:	0018      	movs	r0, r3
 80078bc:	f7fb fab2 	bl	8002e24 <gpio_write>
	LCD_Write8(0x00); // High byte of GRAM register...
 80078c0:	2000      	movs	r0, #0
 80078c2:	f000 fb83 	bl	8007fcc <LCD_Write8>
	LCD_Write8(0x22); // Write data to GRAM
 80078c6:	2022      	movs	r0, #34	; 0x22
 80078c8:	f000 fb80 	bl	8007fcc <LCD_Write8>

	// Write first pixel normally, decrement counter by 1
	LCD_CD_HIGH();
 80078cc:	2390      	movs	r3, #144	; 0x90
 80078ce:	05db      	lsls	r3, r3, #23
 80078d0:	2201      	movs	r2, #1
 80078d2:	2104      	movs	r1, #4
 80078d4:	0018      	movs	r0, r3
 80078d6:	f7fb faa5 	bl	8002e24 <gpio_write>
	LCD_Write8(hi);
 80078da:	193b      	adds	r3, r7, r4
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	0018      	movs	r0, r3
 80078e0:	f000 fb74 	bl	8007fcc <LCD_Write8>
	LCD_Write8(lo);
 80078e4:	197b      	adds	r3, r7, r5
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	0018      	movs	r0, r3
 80078ea:	f000 fb6f 	bl	8007fcc <LCD_Write8>
	len--;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	603b      	str	r3, [r7, #0]

	blocks = (uint16_t) (len / 64); // 64 pixels/block
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	099a      	lsrs	r2, r3, #6
 80078f8:	230e      	movs	r3, #14
 80078fa:	18fb      	adds	r3, r7, r3
 80078fc:	801a      	strh	r2, [r3, #0]
	if (hi == lo) {
 80078fe:	193a      	adds	r2, r7, r4
 8007900:	197b      	adds	r3, r7, r5
 8007902:	7812      	ldrb	r2, [r2, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	d000      	beq.n	800790c <LCD_Flood+0x8c>
 800790a:	e129      	b.n	8007b60 <LCD_Flood+0x2e0>
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (blocks--) {
 800790c:	e0ae      	b.n	8007a6c <LCD_Flood+0x1ec>
			i = 16; // 64 pixels/block / 4 pixels/pass
 800790e:	230d      	movs	r3, #13
 8007910:	18fb      	adds	r3, r7, r3
 8007912:	2210      	movs	r2, #16
 8007914:	701a      	strb	r2, [r3, #0]
			do {
				LCD_WR_STROBE();
 8007916:	2390      	movs	r3, #144	; 0x90
 8007918:	05db      	lsls	r3, r3, #23
 800791a:	2200      	movs	r2, #0
 800791c:	2101      	movs	r1, #1
 800791e:	0018      	movs	r0, r3
 8007920:	f7fb fa80 	bl	8002e24 <gpio_write>
 8007924:	2001      	movs	r0, #1
 8007926:	f7ff fb93 	bl	8007050 <delay>
 800792a:	2390      	movs	r3, #144	; 0x90
 800792c:	05db      	lsls	r3, r3, #23
 800792e:	2201      	movs	r2, #1
 8007930:	2101      	movs	r1, #1
 8007932:	0018      	movs	r0, r3
 8007934:	f7fb fa76 	bl	8002e24 <gpio_write>
 8007938:	2001      	movs	r0, #1
 800793a:	f7ff fb89 	bl	8007050 <delay>
				LCD_WR_STROBE();
 800793e:	2390      	movs	r3, #144	; 0x90
 8007940:	05db      	lsls	r3, r3, #23
 8007942:	2200      	movs	r2, #0
 8007944:	2101      	movs	r1, #1
 8007946:	0018      	movs	r0, r3
 8007948:	f7fb fa6c 	bl	8002e24 <gpio_write>
 800794c:	2001      	movs	r0, #1
 800794e:	f7ff fb7f 	bl	8007050 <delay>
 8007952:	2390      	movs	r3, #144	; 0x90
 8007954:	05db      	lsls	r3, r3, #23
 8007956:	2201      	movs	r2, #1
 8007958:	2101      	movs	r1, #1
 800795a:	0018      	movs	r0, r3
 800795c:	f7fb fa62 	bl	8002e24 <gpio_write>
 8007960:	2001      	movs	r0, #1
 8007962:	f7ff fb75 	bl	8007050 <delay>
				LCD_WR_STROBE();
 8007966:	2390      	movs	r3, #144	; 0x90
 8007968:	05db      	lsls	r3, r3, #23
 800796a:	2200      	movs	r2, #0
 800796c:	2101      	movs	r1, #1
 800796e:	0018      	movs	r0, r3
 8007970:	f7fb fa58 	bl	8002e24 <gpio_write>
 8007974:	2001      	movs	r0, #1
 8007976:	f7ff fb6b 	bl	8007050 <delay>
 800797a:	2390      	movs	r3, #144	; 0x90
 800797c:	05db      	lsls	r3, r3, #23
 800797e:	2201      	movs	r2, #1
 8007980:	2101      	movs	r1, #1
 8007982:	0018      	movs	r0, r3
 8007984:	f7fb fa4e 	bl	8002e24 <gpio_write>
 8007988:	2001      	movs	r0, #1
 800798a:	f7ff fb61 	bl	8007050 <delay>
				LCD_WR_STROBE(); // 2 bytes/pixel
 800798e:	2390      	movs	r3, #144	; 0x90
 8007990:	05db      	lsls	r3, r3, #23
 8007992:	2200      	movs	r2, #0
 8007994:	2101      	movs	r1, #1
 8007996:	0018      	movs	r0, r3
 8007998:	f7fb fa44 	bl	8002e24 <gpio_write>
 800799c:	2001      	movs	r0, #1
 800799e:	f7ff fb57 	bl	8007050 <delay>
 80079a2:	2390      	movs	r3, #144	; 0x90
 80079a4:	05db      	lsls	r3, r3, #23
 80079a6:	2201      	movs	r2, #1
 80079a8:	2101      	movs	r1, #1
 80079aa:	0018      	movs	r0, r3
 80079ac:	f7fb fa3a 	bl	8002e24 <gpio_write>
 80079b0:	2001      	movs	r0, #1
 80079b2:	f7ff fb4d 	bl	8007050 <delay>
				LCD_WR_STROBE();
 80079b6:	2390      	movs	r3, #144	; 0x90
 80079b8:	05db      	lsls	r3, r3, #23
 80079ba:	2200      	movs	r2, #0
 80079bc:	2101      	movs	r1, #1
 80079be:	0018      	movs	r0, r3
 80079c0:	f7fb fa30 	bl	8002e24 <gpio_write>
 80079c4:	2001      	movs	r0, #1
 80079c6:	f7ff fb43 	bl	8007050 <delay>
 80079ca:	2390      	movs	r3, #144	; 0x90
 80079cc:	05db      	lsls	r3, r3, #23
 80079ce:	2201      	movs	r2, #1
 80079d0:	2101      	movs	r1, #1
 80079d2:	0018      	movs	r0, r3
 80079d4:	f7fb fa26 	bl	8002e24 <gpio_write>
 80079d8:	2001      	movs	r0, #1
 80079da:	f7ff fb39 	bl	8007050 <delay>
				LCD_WR_STROBE();
 80079de:	2390      	movs	r3, #144	; 0x90
 80079e0:	05db      	lsls	r3, r3, #23
 80079e2:	2200      	movs	r2, #0
 80079e4:	2101      	movs	r1, #1
 80079e6:	0018      	movs	r0, r3
 80079e8:	f7fb fa1c 	bl	8002e24 <gpio_write>
 80079ec:	2001      	movs	r0, #1
 80079ee:	f7ff fb2f 	bl	8007050 <delay>
 80079f2:	2390      	movs	r3, #144	; 0x90
 80079f4:	05db      	lsls	r3, r3, #23
 80079f6:	2201      	movs	r2, #1
 80079f8:	2101      	movs	r1, #1
 80079fa:	0018      	movs	r0, r3
 80079fc:	f7fb fa12 	bl	8002e24 <gpio_write>
 8007a00:	2001      	movs	r0, #1
 8007a02:	f7ff fb25 	bl	8007050 <delay>
				LCD_WR_STROBE();
 8007a06:	2390      	movs	r3, #144	; 0x90
 8007a08:	05db      	lsls	r3, r3, #23
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	0018      	movs	r0, r3
 8007a10:	f7fb fa08 	bl	8002e24 <gpio_write>
 8007a14:	2001      	movs	r0, #1
 8007a16:	f7ff fb1b 	bl	8007050 <delay>
 8007a1a:	2390      	movs	r3, #144	; 0x90
 8007a1c:	05db      	lsls	r3, r3, #23
 8007a1e:	2201      	movs	r2, #1
 8007a20:	2101      	movs	r1, #1
 8007a22:	0018      	movs	r0, r3
 8007a24:	f7fb f9fe 	bl	8002e24 <gpio_write>
 8007a28:	2001      	movs	r0, #1
 8007a2a:	f7ff fb11 	bl	8007050 <delay>
				LCD_WR_STROBE(); // x 4 pixels
 8007a2e:	2390      	movs	r3, #144	; 0x90
 8007a30:	05db      	lsls	r3, r3, #23
 8007a32:	2200      	movs	r2, #0
 8007a34:	2101      	movs	r1, #1
 8007a36:	0018      	movs	r0, r3
 8007a38:	f7fb f9f4 	bl	8002e24 <gpio_write>
 8007a3c:	2001      	movs	r0, #1
 8007a3e:	f7ff fb07 	bl	8007050 <delay>
 8007a42:	2390      	movs	r3, #144	; 0x90
 8007a44:	05db      	lsls	r3, r3, #23
 8007a46:	2201      	movs	r2, #1
 8007a48:	2101      	movs	r1, #1
 8007a4a:	0018      	movs	r0, r3
 8007a4c:	f7fb f9ea 	bl	8002e24 <gpio_write>
 8007a50:	2001      	movs	r0, #1
 8007a52:	f7ff fafd 	bl	8007050 <delay>
			} while (--i);
 8007a56:	210d      	movs	r1, #13
 8007a58:	187b      	adds	r3, r7, r1
 8007a5a:	187a      	adds	r2, r7, r1
 8007a5c:	7812      	ldrb	r2, [r2, #0]
 8007a5e:	3a01      	subs	r2, #1
 8007a60:	701a      	strb	r2, [r3, #0]
 8007a62:	187b      	adds	r3, r7, r1
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d000      	beq.n	8007a6c <LCD_Flood+0x1ec>
 8007a6a:	e754      	b.n	8007916 <LCD_Flood+0x96>
		while (blocks--) {
 8007a6c:	220e      	movs	r2, #14
 8007a6e:	18bb      	adds	r3, r7, r2
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	18ba      	adds	r2, r7, r2
 8007a74:	1e59      	subs	r1, r3, #1
 8007a76:	8011      	strh	r1, [r2, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d000      	beq.n	8007a7e <LCD_Flood+0x1fe>
 8007a7c:	e747      	b.n	800790e <LCD_Flood+0x8e>
		}
		// Fill any remaining pixels (1 to 64)
		for (i = (uint8_t) len & 63; i--;) {
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	230d      	movs	r3, #13
 8007a84:	18fb      	adds	r3, r7, r3
 8007a86:	213f      	movs	r1, #63	; 0x3f
 8007a88:	400a      	ands	r2, r1
 8007a8a:	701a      	strb	r2, [r3, #0]
 8007a8c:	e027      	b.n	8007ade <LCD_Flood+0x25e>
			LCD_WR_STROBE();
 8007a8e:	2390      	movs	r3, #144	; 0x90
 8007a90:	05db      	lsls	r3, r3, #23
 8007a92:	2200      	movs	r2, #0
 8007a94:	2101      	movs	r1, #1
 8007a96:	0018      	movs	r0, r3
 8007a98:	f7fb f9c4 	bl	8002e24 <gpio_write>
 8007a9c:	2001      	movs	r0, #1
 8007a9e:	f7ff fad7 	bl	8007050 <delay>
 8007aa2:	2390      	movs	r3, #144	; 0x90
 8007aa4:	05db      	lsls	r3, r3, #23
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	0018      	movs	r0, r3
 8007aac:	f7fb f9ba 	bl	8002e24 <gpio_write>
 8007ab0:	2001      	movs	r0, #1
 8007ab2:	f7ff facd 	bl	8007050 <delay>
			LCD_WR_STROBE();
 8007ab6:	2390      	movs	r3, #144	; 0x90
 8007ab8:	05db      	lsls	r3, r3, #23
 8007aba:	2200      	movs	r2, #0
 8007abc:	2101      	movs	r1, #1
 8007abe:	0018      	movs	r0, r3
 8007ac0:	f7fb f9b0 	bl	8002e24 <gpio_write>
 8007ac4:	2001      	movs	r0, #1
 8007ac6:	f7ff fac3 	bl	8007050 <delay>
 8007aca:	2390      	movs	r3, #144	; 0x90
 8007acc:	05db      	lsls	r3, r3, #23
 8007ace:	2201      	movs	r2, #1
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	0018      	movs	r0, r3
 8007ad4:	f7fb f9a6 	bl	8002e24 <gpio_write>
 8007ad8:	2001      	movs	r0, #1
 8007ada:	f7ff fab9 	bl	8007050 <delay>
		for (i = (uint8_t) len & 63; i--;) {
 8007ade:	220d      	movs	r2, #13
 8007ae0:	18bb      	adds	r3, r7, r2
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	18ba      	adds	r2, r7, r2
 8007ae6:	1e59      	subs	r1, r3, #1
 8007ae8:	7011      	strb	r1, [r2, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1cf      	bne.n	8007a8e <LCD_Flood+0x20e>
 8007aee:	e05b      	b.n	8007ba8 <LCD_Flood+0x328>
		}
	} else {
		while (blocks--) {
			i = 16; // 64 pixels/block / 4 pixels/pass
 8007af0:	230d      	movs	r3, #13
 8007af2:	18fb      	adds	r3, r7, r3
 8007af4:	2210      	movs	r2, #16
 8007af6:	701a      	strb	r2, [r3, #0]
			do {
				LCD_Write8(hi);
 8007af8:	240c      	movs	r4, #12
 8007afa:	193b      	adds	r3, r7, r4
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	0018      	movs	r0, r3
 8007b00:	f000 fa64 	bl	8007fcc <LCD_Write8>
				LCD_Write8(lo);
 8007b04:	250b      	movs	r5, #11
 8007b06:	197b      	adds	r3, r7, r5
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	0018      	movs	r0, r3
 8007b0c:	f000 fa5e 	bl	8007fcc <LCD_Write8>
				LCD_Write8(hi);
 8007b10:	193b      	adds	r3, r7, r4
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	0018      	movs	r0, r3
 8007b16:	f000 fa59 	bl	8007fcc <LCD_Write8>
				LCD_Write8(lo);
 8007b1a:	197b      	adds	r3, r7, r5
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	0018      	movs	r0, r3
 8007b20:	f000 fa54 	bl	8007fcc <LCD_Write8>
				LCD_Write8(hi);
 8007b24:	193b      	adds	r3, r7, r4
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	0018      	movs	r0, r3
 8007b2a:	f000 fa4f 	bl	8007fcc <LCD_Write8>
				LCD_Write8(lo);
 8007b2e:	197b      	adds	r3, r7, r5
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	0018      	movs	r0, r3
 8007b34:	f000 fa4a 	bl	8007fcc <LCD_Write8>
				LCD_Write8(hi);
 8007b38:	193b      	adds	r3, r7, r4
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	0018      	movs	r0, r3
 8007b3e:	f000 fa45 	bl	8007fcc <LCD_Write8>
				LCD_Write8(lo);
 8007b42:	197b      	adds	r3, r7, r5
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	0018      	movs	r0, r3
 8007b48:	f000 fa40 	bl	8007fcc <LCD_Write8>
			} while (--i);
 8007b4c:	210d      	movs	r1, #13
 8007b4e:	187b      	adds	r3, r7, r1
 8007b50:	187a      	adds	r2, r7, r1
 8007b52:	7812      	ldrb	r2, [r2, #0]
 8007b54:	3a01      	subs	r2, #1
 8007b56:	701a      	strb	r2, [r3, #0]
 8007b58:	187b      	adds	r3, r7, r1
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1cb      	bne.n	8007af8 <LCD_Flood+0x278>
		while (blocks--) {
 8007b60:	220e      	movs	r2, #14
 8007b62:	18bb      	adds	r3, r7, r2
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	18ba      	adds	r2, r7, r2
 8007b68:	1e59      	subs	r1, r3, #1
 8007b6a:	8011      	strh	r1, [r2, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1bf      	bne.n	8007af0 <LCD_Flood+0x270>
		}
		for (i = (uint8_t) len & 63; i--;) {
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	230d      	movs	r3, #13
 8007b76:	18fb      	adds	r3, r7, r3
 8007b78:	213f      	movs	r1, #63	; 0x3f
 8007b7a:	400a      	ands	r2, r1
 8007b7c:	701a      	strb	r2, [r3, #0]
 8007b7e:	e00b      	b.n	8007b98 <LCD_Flood+0x318>
			LCD_Write8(hi);
 8007b80:	230c      	movs	r3, #12
 8007b82:	18fb      	adds	r3, r7, r3
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	0018      	movs	r0, r3
 8007b88:	f000 fa20 	bl	8007fcc <LCD_Write8>
			LCD_Write8(lo);
 8007b8c:	230b      	movs	r3, #11
 8007b8e:	18fb      	adds	r3, r7, r3
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	0018      	movs	r0, r3
 8007b94:	f000 fa1a 	bl	8007fcc <LCD_Write8>
		for (i = (uint8_t) len & 63; i--;) {
 8007b98:	220d      	movs	r2, #13
 8007b9a:	18bb      	adds	r3, r7, r2
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	18ba      	adds	r2, r7, r2
 8007ba0:	1e59      	subs	r1, r3, #1
 8007ba2:	7011      	strb	r1, [r2, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1eb      	bne.n	8007b80 <LCD_Flood+0x300>
		}
	}
	LCD_CS_HIGH();
 8007ba8:	4b04      	ldr	r3, [pc, #16]	; (8007bbc <LCD_Flood+0x33c>)
 8007baa:	2201      	movs	r2, #1
 8007bac:	2100      	movs	r1, #0
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f7fb f938 	bl	8002e24 <gpio_write>
}
 8007bb4:	46c0      	nop			; (mov r8, r8)
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	b004      	add	sp, #16
 8007bba:	bdb0      	pop	{r4, r5, r7, pc}
 8007bbc:	48000400 	.word	0x48000400

08007bc0 <LCD_Printf>:
 * \param fmt	Format text
 * \param 
 * 
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 8007bc0:	b40f      	push	{r0, r1, r2, r3}
 8007bc2:	b5b0      	push	{r4, r5, r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8007bc8:	231c      	movs	r3, #28
 8007bca:	18fb      	adds	r3, r7, r3
 8007bcc:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	69b9      	ldr	r1, [r7, #24]
 8007bd2:	4b3e      	ldr	r3, [pc, #248]	; (8007ccc <LCD_Printf+0x10c>)
 8007bd4:	0018      	movs	r0, r3
 8007bd6:	f000 fd49 	bl	800866c <vsiprintf>
	va_end(lst);

	p = buf;
 8007bda:	4b3c      	ldr	r3, [pc, #240]	; (8007ccc <LCD_Printf+0x10c>)
 8007bdc:	607b      	str	r3, [r7, #4]
	while (*p) {
 8007bde:	e069      	b.n	8007cb4 <LCD_Printf+0xf4>
		if (*p == '\n') {
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	2b0a      	cmp	r3, #10
 8007be6:	d111      	bne.n	8007c0c <LCD_Printf+0x4c>
			m_cursor_y += m_textsize * 8;
 8007be8:	4b39      	ldr	r3, [pc, #228]	; (8007cd0 <LCD_Printf+0x110>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	00db      	lsls	r3, r3, #3
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	4b38      	ldr	r3, [pc, #224]	; (8007cd4 <LCD_Printf+0x114>)
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	5e5b      	ldrsh	r3, [r3, r1]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	18d3      	adds	r3, r2, r3
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	b21a      	sxth	r2, r3
 8007c00:	4b34      	ldr	r3, [pc, #208]	; (8007cd4 <LCD_Printf+0x114>)
 8007c02:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8007c04:	4b34      	ldr	r3, [pc, #208]	; (8007cd8 <LCD_Printf+0x118>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	801a      	strh	r2, [r3, #0]
 8007c0a:	e050      	b.n	8007cae <LCD_Printf+0xee>
		} else if (*p == '\r') {
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b0d      	cmp	r3, #13
 8007c12:	d04c      	beq.n	8007cae <LCD_Printf+0xee>
			// skip em
		} else {
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor,
 8007c14:	4b30      	ldr	r3, [pc, #192]	; (8007cd8 <LCD_Printf+0x118>)
 8007c16:	2000      	movs	r0, #0
 8007c18:	5e18      	ldrsh	r0, [r3, r0]
 8007c1a:	4b2e      	ldr	r3, [pc, #184]	; (8007cd4 <LCD_Printf+0x114>)
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	5e59      	ldrsh	r1, [r3, r1]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	781c      	ldrb	r4, [r3, #0]
 8007c24:	4b2d      	ldr	r3, [pc, #180]	; (8007cdc <LCD_Printf+0x11c>)
 8007c26:	881d      	ldrh	r5, [r3, #0]
 8007c28:	4b2d      	ldr	r3, [pc, #180]	; (8007ce0 <LCD_Printf+0x120>)
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	4a28      	ldr	r2, [pc, #160]	; (8007cd0 <LCD_Printf+0x110>)
 8007c2e:	7812      	ldrb	r2, [r2, #0]
 8007c30:	9201      	str	r2, [sp, #4]
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	002b      	movs	r3, r5
 8007c36:	0022      	movs	r2, r4
 8007c38:	f7ff fbb4 	bl	80073a4 <LCD_DrawChar>
					m_textsize);
			m_cursor_x += m_textsize * 6;
 8007c3c:	4b24      	ldr	r3, [pc, #144]	; (8007cd0 <LCD_Printf+0x110>)
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	1c1a      	adds	r2, r3, #0
 8007c44:	1c13      	adds	r3, r2, #0
 8007c46:	18db      	adds	r3, r3, r3
 8007c48:	189b      	adds	r3, r3, r2
 8007c4a:	18db      	adds	r3, r3, r3
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	4b22      	ldr	r3, [pc, #136]	; (8007cd8 <LCD_Printf+0x118>)
 8007c50:	2100      	movs	r1, #0
 8007c52:	5e5b      	ldrsh	r3, [r3, r1]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	18d3      	adds	r3, r2, r3
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	b21a      	sxth	r2, r3
 8007c5c:	4b1e      	ldr	r3, [pc, #120]	; (8007cd8 <LCD_Printf+0x118>)
 8007c5e:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - m_textsize * 6))) {
 8007c60:	4b20      	ldr	r3, [pc, #128]	; (8007ce4 <LCD_Printf+0x124>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d022      	beq.n	8007cae <LCD_Printf+0xee>
 8007c68:	4b1b      	ldr	r3, [pc, #108]	; (8007cd8 <LCD_Printf+0x118>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	5e9b      	ldrsh	r3, [r3, r2]
 8007c6e:	0019      	movs	r1, r3
 8007c70:	4b1d      	ldr	r3, [pc, #116]	; (8007ce8 <LCD_Printf+0x128>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	5e9b      	ldrsh	r3, [r3, r2]
 8007c76:	0018      	movs	r0, r3
 8007c78:	4b15      	ldr	r3, [pc, #84]	; (8007cd0 <LCD_Printf+0x110>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	001a      	movs	r2, r3
 8007c7e:	0013      	movs	r3, r2
 8007c80:	0092      	lsls	r2, r2, #2
 8007c82:	1a9b      	subs	r3, r3, r2
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	18c3      	adds	r3, r0, r3
 8007c88:	4299      	cmp	r1, r3
 8007c8a:	dd10      	ble.n	8007cae <LCD_Printf+0xee>
				m_cursor_y += m_textsize * 8;
 8007c8c:	4b10      	ldr	r3, [pc, #64]	; (8007cd0 <LCD_Printf+0x110>)
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	00db      	lsls	r3, r3, #3
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	4b0f      	ldr	r3, [pc, #60]	; (8007cd4 <LCD_Printf+0x114>)
 8007c98:	2100      	movs	r1, #0
 8007c9a:	5e5b      	ldrsh	r3, [r3, r1]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	18d3      	adds	r3, r2, r3
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	b21a      	sxth	r2, r3
 8007ca4:	4b0b      	ldr	r3, [pc, #44]	; (8007cd4 <LCD_Printf+0x114>)
 8007ca6:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 8007ca8:	4b0b      	ldr	r3, [pc, #44]	; (8007cd8 <LCD_Printf+0x118>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	607b      	str	r3, [r7, #4]
	while (*p) {
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d191      	bne.n	8007be0 <LCD_Printf+0x20>
	}
}
 8007cbc:	46c0      	nop			; (mov r8, r8)
 8007cbe:	46c0      	nop			; (mov r8, r8)
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	b002      	add	sp, #8
 8007cc4:	bcb0      	pop	{r4, r5, r7}
 8007cc6:	bc08      	pop	{r3}
 8007cc8:	b004      	add	sp, #16
 8007cca:	4718      	bx	r3
 8007ccc:	2000022c 	.word	0x2000022c
 8007cd0:	20000228 	.word	0x20000228
 8007cd4:	20000222 	.word	0x20000222
 8007cd8:	20000220 	.word	0x20000220
 8007cdc:	20000224 	.word	0x20000224
 8007ce0:	20000226 	.word	0x20000226
 8007ce4:	2000022a 	.word	0x2000022a
 8007ce8:	2000021c 	.word	0x2000021c

08007cec <LCD_Reset>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Reset(void) {
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 8007cf2:	4b2f      	ldr	r3, [pc, #188]	; (8007db0 <LCD_Reset+0xc4>)
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	0018      	movs	r0, r3
 8007cfa:	f7fb f893 	bl	8002e24 <gpio_write>
	LCD_WR_HIGH();
 8007cfe:	2390      	movs	r3, #144	; 0x90
 8007d00:	05db      	lsls	r3, r3, #23
 8007d02:	2201      	movs	r2, #1
 8007d04:	2101      	movs	r1, #1
 8007d06:	0018      	movs	r0, r3
 8007d08:	f7fb f88c 	bl	8002e24 <gpio_write>
	LCD_RD_HIGH();
 8007d0c:	2390      	movs	r3, #144	; 0x90
 8007d0e:	05db      	lsls	r3, r3, #23
 8007d10:	2201      	movs	r2, #1
 8007d12:	2100      	movs	r1, #0
 8007d14:	0018      	movs	r0, r3
 8007d16:	f7fb f885 	bl	8002e24 <gpio_write>

	LCD_RST_LOW();
 8007d1a:	4b26      	ldr	r3, [pc, #152]	; (8007db4 <LCD_Reset+0xc8>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	2101      	movs	r1, #1
 8007d20:	0018      	movs	r0, r3
 8007d22:	f7fb f87f 	bl	8002e24 <gpio_write>
	delay(100);
 8007d26:	2064      	movs	r0, #100	; 0x64
 8007d28:	f7ff f992 	bl	8007050 <delay>
	LCD_RST_HIGH();
 8007d2c:	4b21      	ldr	r3, [pc, #132]	; (8007db4 <LCD_Reset+0xc8>)
 8007d2e:	2201      	movs	r2, #1
 8007d30:	2101      	movs	r1, #1
 8007d32:	0018      	movs	r0, r3
 8007d34:	f7fb f876 	bl	8002e24 <gpio_write>

	// Data transfer sync
	LCD_CS_LOW();
 8007d38:	4b1d      	ldr	r3, [pc, #116]	; (8007db0 <LCD_Reset+0xc4>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	0018      	movs	r0, r3
 8007d40:	f7fb f870 	bl	8002e24 <gpio_write>

	LCD_CD_LOW();
 8007d44:	2390      	movs	r3, #144	; 0x90
 8007d46:	05db      	lsls	r3, r3, #23
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2104      	movs	r1, #4
 8007d4c:	0018      	movs	r0, r3
 8007d4e:	f7fb f869 	bl	8002e24 <gpio_write>
	LCD_Write8(0x00);
 8007d52:	2000      	movs	r0, #0
 8007d54:	f000 f93a 	bl	8007fcc <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++)
 8007d58:	1dfb      	adds	r3, r7, #7
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	701a      	strb	r2, [r3, #0]
 8007d5e:	e018      	b.n	8007d92 <LCD_Reset+0xa6>
		LCD_WR_STROBE(); // Three extra 0x00s
 8007d60:	2390      	movs	r3, #144	; 0x90
 8007d62:	05db      	lsls	r3, r3, #23
 8007d64:	2200      	movs	r2, #0
 8007d66:	2101      	movs	r1, #1
 8007d68:	0018      	movs	r0, r3
 8007d6a:	f7fb f85b 	bl	8002e24 <gpio_write>
 8007d6e:	2001      	movs	r0, #1
 8007d70:	f7ff f96e 	bl	8007050 <delay>
 8007d74:	2390      	movs	r3, #144	; 0x90
 8007d76:	05db      	lsls	r3, r3, #23
 8007d78:	2201      	movs	r2, #1
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	0018      	movs	r0, r3
 8007d7e:	f7fb f851 	bl	8002e24 <gpio_write>
 8007d82:	2001      	movs	r0, #1
 8007d84:	f7ff f964 	bl	8007050 <delay>
	for (uint8_t i = 0; i < 3; i++)
 8007d88:	1dfb      	adds	r3, r7, #7
 8007d8a:	781a      	ldrb	r2, [r3, #0]
 8007d8c:	1dfb      	adds	r3, r7, #7
 8007d8e:	3201      	adds	r2, #1
 8007d90:	701a      	strb	r2, [r3, #0]
 8007d92:	1dfb      	adds	r3, r7, #7
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d9e2      	bls.n	8007d60 <LCD_Reset+0x74>
	LCD_CS_HIGH();
 8007d9a:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <LCD_Reset+0xc4>)
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	2100      	movs	r1, #0
 8007da0:	0018      	movs	r0, r3
 8007da2:	f7fb f83f 	bl	8002e24 <gpio_write>
}
 8007da6:	46c0      	nop			; (mov r8, r8)
 8007da8:	46bd      	mov	sp, r7
 8007daa:	b002      	add	sp, #8
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	46c0      	nop			; (mov r8, r8)
 8007db0:	48000400 	.word	0x48000400
 8007db4:	48000800 	.word	0x48000800

08007db8 <LCD_SetCursor>:
 * \param x		The x-coordinate
 * \param y		The y-coordinate
 * 
 * \return void
 */
void LCD_SetCursor(unsigned int x, unsigned int y) {
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
	m_cursor_x = x;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	b21a      	sxth	r2, r3
 8007dc6:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <LCD_SetCursor+0x24>)
 8007dc8:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	b21a      	sxth	r2, r3
 8007dce:	4b04      	ldr	r3, [pc, #16]	; (8007de0 <LCD_SetCursor+0x28>)
 8007dd0:	801a      	strh	r2, [r3, #0]
}
 8007dd2:	46c0      	nop			; (mov r8, r8)
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	b002      	add	sp, #8
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	46c0      	nop			; (mov r8, r8)
 8007ddc:	20000220 	.word	0x20000220
 8007de0:	20000222 	.word	0x20000222

08007de4 <LCD_SetTextSize>:
 * 
 * \param s	Size
 * 
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	0002      	movs	r2, r0
 8007dec:	1dfb      	adds	r3, r7, #7
 8007dee:	701a      	strb	r2, [r3, #0]
	m_textsize = (s > 0) ? s : 1;
 8007df0:	1dfb      	adds	r3, r7, #7
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d002      	beq.n	8007dfe <LCD_SetTextSize+0x1a>
 8007df8:	1dfb      	adds	r3, r7, #7
 8007dfa:	781a      	ldrb	r2, [r3, #0]
 8007dfc:	e000      	b.n	8007e00 <LCD_SetTextSize+0x1c>
 8007dfe:	2201      	movs	r2, #1
 8007e00:	4b02      	ldr	r3, [pc, #8]	; (8007e0c <LCD_SetTextSize+0x28>)
 8007e02:	701a      	strb	r2, [r3, #0]
}
 8007e04:	46c0      	nop			; (mov r8, r8)
 8007e06:	46bd      	mov	sp, r7
 8007e08:	b002      	add	sp, #8
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	20000228 	.word	0x20000228

08007e10 <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 * 
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	0002      	movs	r2, r0
 8007e18:	1dbb      	adds	r3, r7, #6
 8007e1a:	801a      	strh	r2, [r3, #0]
 8007e1c:	1d3b      	adds	r3, r7, #4
 8007e1e:	1c0a      	adds	r2, r1, #0
 8007e20:	801a      	strh	r2, [r3, #0]
	m_textcolor = c;
 8007e22:	4b06      	ldr	r3, [pc, #24]	; (8007e3c <LCD_SetTextColor+0x2c>)
 8007e24:	1dba      	adds	r2, r7, #6
 8007e26:	8812      	ldrh	r2, [r2, #0]
 8007e28:	801a      	strh	r2, [r3, #0]
	m_textbgcolor = b;
 8007e2a:	4b05      	ldr	r3, [pc, #20]	; (8007e40 <LCD_SetTextColor+0x30>)
 8007e2c:	1d3a      	adds	r2, r7, #4
 8007e2e:	8812      	ldrh	r2, [r2, #0]
 8007e30:	801a      	strh	r2, [r3, #0]
}
 8007e32:	46c0      	nop			; (mov r8, r8)
 8007e34:	46bd      	mov	sp, r7
 8007e36:	b002      	add	sp, #8
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	46c0      	nop			; (mov r8, r8)
 8007e3c:	20000224 	.word	0x20000224
 8007e40:	20000226 	.word	0x20000226

08007e44 <LCD_SetRotation>:
 * 
 * \param x	rotation
 * 
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	0002      	movs	r2, r0
 8007e4c:	1dfb      	adds	r3, r7, #7
 8007e4e:	701a      	strb	r2, [r3, #0]
	m_rotation = (x & 3);
 8007e50:	1dfb      	adds	r3, r7, #7
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2203      	movs	r2, #3
 8007e56:	4013      	ands	r3, r2
 8007e58:	b2da      	uxtb	r2, r3
 8007e5a:	4b11      	ldr	r3, [pc, #68]	; (8007ea0 <LCD_SetRotation+0x5c>)
 8007e5c:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 8007e5e:	4b10      	ldr	r3, [pc, #64]	; (8007ea0 <LCD_SetRotation+0x5c>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d010      	beq.n	8007e88 <LCD_SetRotation+0x44>
 8007e66:	dc17      	bgt.n	8007e98 <LCD_SetRotation+0x54>
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d005      	beq.n	8007e78 <LCD_SetRotation+0x34>
 8007e6c:	dc14      	bgt.n	8007e98 <LCD_SetRotation+0x54>
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d002      	beq.n	8007e78 <LCD_SetRotation+0x34>
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d008      	beq.n	8007e88 <LCD_SetRotation+0x44>
	case 3:
		m_width = TFTHEIGHT;
		m_height = TFTWIDTH;
		break;
	}
}
 8007e76:	e00f      	b.n	8007e98 <LCD_SetRotation+0x54>
		m_width = TFTWIDTH;
 8007e78:	4b0a      	ldr	r3, [pc, #40]	; (8007ea4 <LCD_SetRotation+0x60>)
 8007e7a:	22f0      	movs	r2, #240	; 0xf0
 8007e7c:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 8007e7e:	4b0a      	ldr	r3, [pc, #40]	; (8007ea8 <LCD_SetRotation+0x64>)
 8007e80:	22a0      	movs	r2, #160	; 0xa0
 8007e82:	0052      	lsls	r2, r2, #1
 8007e84:	801a      	strh	r2, [r3, #0]
		break;
 8007e86:	e007      	b.n	8007e98 <LCD_SetRotation+0x54>
		m_width = TFTHEIGHT;
 8007e88:	4b06      	ldr	r3, [pc, #24]	; (8007ea4 <LCD_SetRotation+0x60>)
 8007e8a:	22a0      	movs	r2, #160	; 0xa0
 8007e8c:	0052      	lsls	r2, r2, #1
 8007e8e:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 8007e90:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <LCD_SetRotation+0x64>)
 8007e92:	22f0      	movs	r2, #240	; 0xf0
 8007e94:	801a      	strh	r2, [r3, #0]
		break;
 8007e96:	46c0      	nop			; (mov r8, r8)
}
 8007e98:	46c0      	nop			; (mov r8, r8)
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	b002      	add	sp, #8
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	20000229 	.word	0x20000229
 8007ea4:	2000021c 	.word	0x2000021c
 8007ea8:	2000021e 	.word	0x2000021e

08007eac <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 * 
 * \return void
 */
void LCD_SetAddrWindow(int x1, int y1, int x2, int y2) {
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b088      	sub	sp, #32
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]

	LCD_CS_LOW();
 8007eba:	4b42      	ldr	r3, [pc, #264]	; (8007fc4 <LCD_SetAddrWindow+0x118>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	0018      	movs	r0, r3
 8007ec2:	f7fa ffaf 	bl	8002e24 <gpio_write>
	// set to the top-left corner -- although fill operations can be
	// done in any direction, the current screen rotation is applied
	// because some users find it disconcerting when a fill does not
	// occur top-to-bottom.
	int x, y, t;
	switch (m_rotation) {
 8007ec6:	4b40      	ldr	r3, [pc, #256]	; (8007fc8 <LCD_SetAddrWindow+0x11c>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d037      	beq.n	8007f3e <LCD_SetAddrWindow+0x92>
 8007ece:	dc03      	bgt.n	8007ed8 <LCD_SetAddrWindow+0x2c>
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d006      	beq.n	8007ee2 <LCD_SetAddrWindow+0x36>
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d017      	beq.n	8007f08 <LCD_SetAddrWindow+0x5c>
	default:
		x = x1;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	61fb      	str	r3, [r7, #28]
		y = y1;
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	61bb      	str	r3, [r7, #24]
		break;
 8007ee0:	e042      	b.n	8007f68 <LCD_SetAddrWindow+0xbc>
	case 1:
		t = y1;
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	617b      	str	r3, [r7, #20]
		y1 = x1;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	60bb      	str	r3, [r7, #8]
		x1 = TFTWIDTH - 1 - y2;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	22ef      	movs	r2, #239	; 0xef
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	60fb      	str	r3, [r7, #12]
		y2 = x2;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	603b      	str	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	22ef      	movs	r2, #239	; 0xef
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	607b      	str	r3, [r7, #4]
		x = x2;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	61fb      	str	r3, [r7, #28]
		y = y1;
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	61bb      	str	r3, [r7, #24]
		break;
 8007f06:	e02f      	b.n	8007f68 <LCD_SetAddrWindow+0xbc>
	case 2:
		t = x1;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	617b      	str	r3, [r7, #20]
		x1 = TFTWIDTH - 1 - x2;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	22ef      	movs	r2, #239	; 0xef
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	60fb      	str	r3, [r7, #12]
		x2 = TFTWIDTH - 1 - t;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	22ef      	movs	r2, #239	; 0xef
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	607b      	str	r3, [r7, #4]
		t = y1;
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	617b      	str	r3, [r7, #20]
		y1 = TFTHEIGHT - 1 - y2;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	2240      	movs	r2, #64	; 0x40
 8007f24:	32ff      	adds	r2, #255	; 0xff
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	60bb      	str	r3, [r7, #8]
		y2 = TFTHEIGHT - 1 - t;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2240      	movs	r2, #64	; 0x40
 8007f2e:	32ff      	adds	r2, #255	; 0xff
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	603b      	str	r3, [r7, #0]
		x = x2;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	61fb      	str	r3, [r7, #28]
		y = y2;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	61bb      	str	r3, [r7, #24]
		break;
 8007f3c:	e014      	b.n	8007f68 <LCD_SetAddrWindow+0xbc>
	case 3:
		t = x1;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	617b      	str	r3, [r7, #20]
		x1 = y1;
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - x2;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2240      	movs	r2, #64	; 0x40
 8007f4a:	32ff      	adds	r2, #255	; 0xff
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	60bb      	str	r3, [r7, #8]
		x2 = y2;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	607b      	str	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	2240      	movs	r2, #64	; 0x40
 8007f58:	32ff      	adds	r2, #255	; 0xff
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	603b      	str	r3, [r7, #0]
		x = x1;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	61fb      	str	r3, [r7, #28]
		y = y2;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	61bb      	str	r3, [r7, #24]
		break;
 8007f66:	46c0      	nop			; (mov r8, r8)
	}

	LCD_WriteRegister16(0x0050, x1); // Set address window
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	0019      	movs	r1, r3
 8007f6e:	2050      	movs	r0, #80	; 0x50
 8007f70:	f000 f8a6 	bl	80080c0 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0051, x2);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	0019      	movs	r1, r3
 8007f7a:	2051      	movs	r0, #81	; 0x51
 8007f7c:	f000 f8a0 	bl	80080c0 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0052, y1);
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	0019      	movs	r1, r3
 8007f86:	2052      	movs	r0, #82	; 0x52
 8007f88:	f000 f89a 	bl	80080c0 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0053, y2);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	0019      	movs	r1, r3
 8007f92:	2053      	movs	r0, #83	; 0x53
 8007f94:	f000 f894 	bl	80080c0 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0020, x); // Set address counter to top left
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	0019      	movs	r1, r3
 8007f9e:	2020      	movs	r0, #32
 8007fa0:	f000 f88e 	bl	80080c0 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	0019      	movs	r1, r3
 8007faa:	2021      	movs	r0, #33	; 0x21
 8007fac:	f000 f888 	bl	80080c0 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8007fb0:	4b04      	ldr	r3, [pc, #16]	; (8007fc4 <LCD_SetAddrWindow+0x118>)
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	0018      	movs	r0, r3
 8007fb8:	f7fa ff34 	bl	8002e24 <gpio_write>
}
 8007fbc:	46c0      	nop			; (mov r8, r8)
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	b008      	add	sp, #32
 8007fc2:	bd80      	pop	{r7, pc}
 8007fc4:	48000400 	.word	0x48000400
 8007fc8:	20000229 	.word	0x20000229

08007fcc <LCD_Write8>:
 * 
 * \param data	8-Bit Data
 * 
 * \return void
 */
void LCD_Write8(uint8_t data) {
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	0002      	movs	r2, r0
 8007fd4:	1dfb      	adds	r3, r7, #7
 8007fd6:	701a      	strb	r2, [r3, #0]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8007fd8:	2390      	movs	r3, #144	; 0x90
 8007fda:	05db      	lsls	r3, r3, #23
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	4a33      	ldr	r2, [pc, #204]	; (80080ac <LCD_Write8+0xe0>)
 8007fe0:	401a      	ands	r2, r3
 8007fe2:	1dfb      	adds	r3, r7, #7
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	025b      	lsls	r3, r3, #9
 8007fe8:	0019      	movs	r1, r3
 8007fea:	2380      	movs	r3, #128	; 0x80
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	400b      	ands	r3, r1
 8007ff0:	431a      	orrs	r2, r3
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8007ff2:	1dfb      	adds	r3, r7, #7
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	021b      	lsls	r3, r3, #8
 8007ff8:	0019      	movs	r1, r3
 8007ffa:	2380      	movs	r3, #128	; 0x80
 8007ffc:	00db      	lsls	r3, r3, #3
 8007ffe:	400b      	ands	r3, r1
 8008000:	431a      	orrs	r2, r3
 8008002:	0011      	movs	r1, r2
 8008004:	1dfb      	adds	r3, r7, #7
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	005b      	lsls	r3, r3, #1
 800800a:	001a      	movs	r2, r3
 800800c:	2380      	movs	r3, #128	; 0x80
 800800e:	005b      	lsls	r3, r3, #1
 8008010:	401a      	ands	r2, r3
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8008012:	2390      	movs	r3, #144	; 0x90
 8008014:	05db      	lsls	r3, r3, #23
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8008016:	430a      	orrs	r2, r1
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8008018:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 800801a:	4b25      	ldr	r3, [pc, #148]	; (80080b0 <LCD_Write8+0xe4>)
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	4a25      	ldr	r2, [pc, #148]	; (80080b4 <LCD_Write8+0xe8>)
 8008020:	401a      	ands	r2, r3
 8008022:	1dfb      	adds	r3, r7, #7
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	2108      	movs	r1, #8
 8008028:	400b      	ands	r3, r1
 800802a:	431a      	orrs	r2, r3
 800802c:	1dfb      	adds	r3, r7, #7
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	0019      	movs	r1, r3
 8008034:	2320      	movs	r3, #32
 8008036:	400b      	ands	r3, r1
 8008038:	431a      	orrs	r2, r3
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 800803a:	1dfb      	adds	r3, r7, #7
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	105b      	asrs	r3, r3, #1
 8008040:	0019      	movs	r1, r3
 8008042:	2310      	movs	r3, #16
 8008044:	400b      	ands	r3, r1
 8008046:	431a      	orrs	r2, r3
 8008048:	0011      	movs	r1, r2
 800804a:	1dfb      	adds	r3, r7, #7
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	001a      	movs	r2, r3
 8008052:	2380      	movs	r3, #128	; 0x80
 8008054:	00db      	lsls	r3, r3, #3
 8008056:	401a      	ands	r2, r3
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8008058:	4b15      	ldr	r3, [pc, #84]	; (80080b0 <LCD_Write8+0xe4>)
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 800805a:	430a      	orrs	r2, r1
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 800805c:	615a      	str	r2, [r3, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 800805e:	4b16      	ldr	r3, [pc, #88]	; (80080b8 <LCD_Write8+0xec>)
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	4a16      	ldr	r2, [pc, #88]	; (80080bc <LCD_Write8+0xf0>)
 8008064:	4013      	ands	r3, r2
 8008066:	0019      	movs	r1, r3
 8008068:	1dfb      	adds	r3, r7, #7
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	019b      	lsls	r3, r3, #6
 800806e:	001a      	movs	r2, r3
 8008070:	2380      	movs	r3, #128	; 0x80
 8008072:	401a      	ands	r2, r3
 8008074:	4b10      	ldr	r3, [pc, #64]	; (80080b8 <LCD_Write8+0xec>)
 8008076:	430a      	orrs	r2, r1
 8008078:	615a      	str	r2, [r3, #20]

	LCD_WR_STROBE();
 800807a:	2390      	movs	r3, #144	; 0x90
 800807c:	05db      	lsls	r3, r3, #23
 800807e:	2200      	movs	r2, #0
 8008080:	2101      	movs	r1, #1
 8008082:	0018      	movs	r0, r3
 8008084:	f7fa fece 	bl	8002e24 <gpio_write>
 8008088:	2001      	movs	r0, #1
 800808a:	f7fe ffe1 	bl	8007050 <delay>
 800808e:	2390      	movs	r3, #144	; 0x90
 8008090:	05db      	lsls	r3, r3, #23
 8008092:	2201      	movs	r2, #1
 8008094:	2101      	movs	r1, #1
 8008096:	0018      	movs	r0, r3
 8008098:	f7fa fec4 	bl	8002e24 <gpio_write>
 800809c:	2001      	movs	r0, #1
 800809e:	f7fe ffd7 	bl	8007050 <delay>
}
 80080a2:	46c0      	nop			; (mov r8, r8)
 80080a4:	46bd      	mov	sp, r7
 80080a6:	b002      	add	sp, #8
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	46c0      	nop			; (mov r8, r8)
 80080ac:	0000f8ff 	.word	0x0000f8ff
 80080b0:	48000400 	.word	0x48000400
 80080b4:	0000fbc7 	.word	0x0000fbc7
 80080b8:	48000800 	.word	0x48000800
 80080bc:	0000ff7f 	.word	0x0000ff7f

080080c0 <LCD_WriteRegister16>:
 * \param a		Register
 * \param d		Data
 * 
 * \return void
 */
void LCD_WriteRegister16(uint16_t a, uint16_t d) {
 80080c0:	b5b0      	push	{r4, r5, r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	0002      	movs	r2, r0
 80080c8:	1dbb      	adds	r3, r7, #6
 80080ca:	801a      	strh	r2, [r3, #0]
 80080cc:	1d3b      	adds	r3, r7, #4
 80080ce:	1c0a      	adds	r2, r1, #0
 80080d0:	801a      	strh	r2, [r3, #0]
	uint8_t hi, lo;
	hi = (a) >> 8;
 80080d2:	1dbb      	adds	r3, r7, #6
 80080d4:	881b      	ldrh	r3, [r3, #0]
 80080d6:	0a1b      	lsrs	r3, r3, #8
 80080d8:	b29a      	uxth	r2, r3
 80080da:	240f      	movs	r4, #15
 80080dc:	193b      	adds	r3, r7, r4
 80080de:	701a      	strb	r2, [r3, #0]
	lo = (a);
 80080e0:	250e      	movs	r5, #14
 80080e2:	197b      	adds	r3, r7, r5
 80080e4:	1dba      	adds	r2, r7, #6
 80080e6:	8812      	ldrh	r2, [r2, #0]
 80080e8:	701a      	strb	r2, [r3, #0]
	LCD_CD_LOW();
 80080ea:	2390      	movs	r3, #144	; 0x90
 80080ec:	05db      	lsls	r3, r3, #23
 80080ee:	2200      	movs	r2, #0
 80080f0:	2104      	movs	r1, #4
 80080f2:	0018      	movs	r0, r3
 80080f4:	f7fa fe96 	bl	8002e24 <gpio_write>
	LCD_Write8(hi);
 80080f8:	193b      	adds	r3, r7, r4
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	0018      	movs	r0, r3
 80080fe:	f7ff ff65 	bl	8007fcc <LCD_Write8>
	LCD_Write8(lo);
 8008102:	197b      	adds	r3, r7, r5
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	0018      	movs	r0, r3
 8008108:	f7ff ff60 	bl	8007fcc <LCD_Write8>
	hi = (d) >> 8;
 800810c:	1d3b      	adds	r3, r7, #4
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	0a1b      	lsrs	r3, r3, #8
 8008112:	b29a      	uxth	r2, r3
 8008114:	193b      	adds	r3, r7, r4
 8008116:	701a      	strb	r2, [r3, #0]
	lo = (d);
 8008118:	197b      	adds	r3, r7, r5
 800811a:	1d3a      	adds	r2, r7, #4
 800811c:	8812      	ldrh	r2, [r2, #0]
 800811e:	701a      	strb	r2, [r3, #0]
	LCD_CD_HIGH();
 8008120:	2390      	movs	r3, #144	; 0x90
 8008122:	05db      	lsls	r3, r3, #23
 8008124:	2201      	movs	r2, #1
 8008126:	2104      	movs	r1, #4
 8008128:	0018      	movs	r0, r3
 800812a:	f7fa fe7b 	bl	8002e24 <gpio_write>
	LCD_Write8(hi);
 800812e:	193b      	adds	r3, r7, r4
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	0018      	movs	r0, r3
 8008134:	f7ff ff4a 	bl	8007fcc <LCD_Write8>
	LCD_Write8(lo);
 8008138:	197b      	adds	r3, r7, r5
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	0018      	movs	r0, r3
 800813e:	f7ff ff45 	bl	8007fcc <LCD_Write8>
}
 8008142:	46c0      	nop			; (mov r8, r8)
 8008144:	46bd      	mov	sp, r7
 8008146:	b004      	add	sp, #16
 8008148:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800814c <insert_sort>:
 *      Author: hp
 */

#include "touch.h"

void insert_sort(int array[], uint8_t size) {
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	000a      	movs	r2, r1
 8008156:	1cfb      	adds	r3, r7, #3
 8008158:	701a      	strb	r2, [r3, #0]
	uint8_t j;
	int save;

	for (int i = 1; i < size; i++) {
 800815a:	2301      	movs	r3, #1
 800815c:	613b      	str	r3, [r7, #16]
 800815e:	e03c      	b.n	80081da <insert_sort+0x8e>
		save = array[i];
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	18d3      	adds	r3, r2, r3
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60fb      	str	r3, [r7, #12]
		for (j = i; j >= 1 && save < array[j - 1]; j--)
 800816c:	2317      	movs	r3, #23
 800816e:	18fb      	adds	r3, r7, r3
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	701a      	strb	r2, [r3, #0]
 8008174:	e015      	b.n	80081a2 <insert_sort+0x56>
			array[j] = array[j - 1];
 8008176:	2117      	movs	r1, #23
 8008178:	187b      	adds	r3, r7, r1
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	4a1c      	ldr	r2, [pc, #112]	; (80081f0 <insert_sort+0xa4>)
 800817e:	4694      	mov	ip, r2
 8008180:	4463      	add	r3, ip
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	18d2      	adds	r2, r2, r3
 8008188:	0008      	movs	r0, r1
 800818a:	187b      	adds	r3, r7, r1
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	6879      	ldr	r1, [r7, #4]
 8008192:	18cb      	adds	r3, r1, r3
 8008194:	6812      	ldr	r2, [r2, #0]
 8008196:	601a      	str	r2, [r3, #0]
		for (j = i; j >= 1 && save < array[j - 1]; j--)
 8008198:	183b      	adds	r3, r7, r0
 800819a:	781a      	ldrb	r2, [r3, #0]
 800819c:	183b      	adds	r3, r7, r0
 800819e:	3a01      	subs	r2, #1
 80081a0:	701a      	strb	r2, [r3, #0]
 80081a2:	2217      	movs	r2, #23
 80081a4:	18bb      	adds	r3, r7, r2
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00b      	beq.n	80081c4 <insert_sort+0x78>
 80081ac:	18bb      	adds	r3, r7, r2
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	4a0f      	ldr	r2, [pc, #60]	; (80081f0 <insert_sort+0xa4>)
 80081b2:	4694      	mov	ip, r2
 80081b4:	4463      	add	r3, ip
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	18d3      	adds	r3, r2, r3
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	dbd8      	blt.n	8008176 <insert_sort+0x2a>
		array[j] = save;
 80081c4:	2317      	movs	r3, #23
 80081c6:	18fb      	adds	r3, r7, r3
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	18d3      	adds	r3, r2, r3
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	601a      	str	r2, [r3, #0]
	for (int i = 1; i < size; i++) {
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	3301      	adds	r3, #1
 80081d8:	613b      	str	r3, [r7, #16]
 80081da:	1cfb      	adds	r3, r7, #3
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	dbbd      	blt.n	8008160 <insert_sort+0x14>
	}
}
 80081e4:	46c0      	nop			; (mov r8, r8)
 80081e6:	46c0      	nop			; (mov r8, r8)
 80081e8:	46bd      	mov	sp, r7
 80081ea:	b006      	add	sp, #24
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	46c0      	nop			; (mov r8, r8)
 80081f0:	3fffffff 	.word	0x3fffffff

080081f4 <adc_Init>:

void adc_Init(void) {
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af04      	add	r7, sp, #16
	adc_en();
 80081fa:	f7fb f8a5 	bl	8003348 <adc_en>
	adc_config(sample_time_7, CONT_off, SCANDIR_off, AUTOFF_off, WAIT_off,
 80081fe:	2300      	movs	r3, #0
 8008200:	9302      	str	r3, [sp, #8]
 8008202:	2300      	movs	r3, #0
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	2300      	movs	r3, #0
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	2300      	movs	r3, #0
 800820c:	2200      	movs	r2, #0
 800820e:	2100      	movs	r1, #0
 8008210:	2007      	movs	r0, #7
 8008212:	f7fb f96f 	bl	80034f4 <adc_config>
	DISCEN_off, OVRMOD_off);

}
 8008216:	46c0      	nop			; (mov r8, r8)
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <Touch_Begin>:

void Touch_Begin(void) {
 800821c:	b580      	push	{r7, lr}
 800821e:	af00      	add	r7, sp, #0
//	ADCx_MspInit();
	adc_Init();
 8008220:	f7ff ffe8 	bl	80081f4 <adc_Init>
}
 8008224:	46c0      	nop			; (mov r8, r8)
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <GPIO_SetOutput>:

void GPIO_SetOutput(GPIO_TypeDef *GPIOx, uint16_t pin, int val) {
 800822a:	b590      	push	{r4, r7, lr}
 800822c:	b087      	sub	sp, #28
 800822e:	af02      	add	r7, sp, #8
 8008230:	60f8      	str	r0, [r7, #12]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	200a      	movs	r0, #10
 8008236:	183b      	adds	r3, r7, r0
 8008238:	1c0a      	adds	r2, r1, #0
 800823a:	801a      	strh	r2, [r3, #0]
	GPIOx->MODER &= ~(0x03 << (2 * pin));
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	183a      	adds	r2, r7, r0
 8008242:	8812      	ldrh	r2, [r2, #0]
 8008244:	0052      	lsls	r2, r2, #1
 8008246:	2103      	movs	r1, #3
 8008248:	4091      	lsls	r1, r2
 800824a:	000a      	movs	r2, r1
 800824c:	43d2      	mvns	r2, r2
 800824e:	401a      	ands	r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	601a      	str	r2, [r3, #0]
	gpio_config(GPIOx, pin, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8008254:	0004      	movs	r4, r0
 8008256:	183b      	adds	r3, r7, r0
 8008258:	8819      	ldrh	r1, [r3, #0]
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	2300      	movs	r3, #0
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	2300      	movs	r3, #0
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	2302      	movs	r3, #2
 8008266:	2201      	movs	r2, #1
 8008268:	f7fa fcf4 	bl	8002c54 <gpio_config>
	gpio_write(GPIOx, pin, val);
 800826c:	193b      	adds	r3, r7, r4
 800826e:	8819      	ldrh	r1, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	b2da      	uxtb	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	0018      	movs	r0, r3
 8008278:	f7fa fdd4 	bl	8002e24 <gpio_write>
}
 800827c:	46c0      	nop			; (mov r8, r8)
 800827e:	46bd      	mov	sp, r7
 8008280:	b005      	add	sp, #20
 8008282:	bd90      	pop	{r4, r7, pc}

08008284 <GPIO_SetAnalog>:
	GPIOx->MODER &= ~(0x03 << (2 * pin));
	gpio_config(GPIOx, pin, INPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	gpio_write(GPIOx, pin, val);
}

void GPIO_SetAnalog(GPIO_TypeDef *GPIOx, uint16_t pin) {
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	000a      	movs	r2, r1
 800828e:	1cbb      	adds	r3, r7, #2
 8008290:	801a      	strh	r2, [r3, #0]

	GPIOx->MODER &= ~(0x03 << (2 * pin));
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	1cba      	adds	r2, r7, #2
 8008298:	8812      	ldrh	r2, [r2, #0]
 800829a:	0052      	lsls	r2, r2, #1
 800829c:	2103      	movs	r1, #3
 800829e:	4091      	lsls	r1, r2
 80082a0:	000a      	movs	r2, r1
 80082a2:	43d2      	mvns	r2, r2
 80082a4:	401a      	ands	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	601a      	str	r2, [r3, #0]
	gpio_clk_en(GPIOx);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	0018      	movs	r0, r3
 80082ae:	f7fa fc89 	bl	8002bc4 <gpio_clk_en>
	gpio_moder(GPIOx, pin, ANALOG_MODE);
 80082b2:	1cbb      	adds	r3, r7, #2
 80082b4:	8819      	ldrh	r1, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2203      	movs	r2, #3
 80082ba:	0018      	movs	r0, r3
 80082bc:	f7fa fd34 	bl	8002d28 <gpio_moder>

	if ((GPIOx == GPIOA) && (pin == 1)) {
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	2390      	movs	r3, #144	; 0x90
 80082c4:	05db      	lsls	r3, r3, #23
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d10a      	bne.n	80082e0 <GPIO_SetAnalog+0x5c>
 80082ca:	1cbb      	adds	r3, r7, #2
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d106      	bne.n	80082e0 <GPIO_SetAnalog+0x5c>
		ADC1->CHSELR |= ADC_CHSELR_CHSEL1;
 80082d2:	4b25      	ldr	r3, [pc, #148]	; (8008368 <GPIO_SetAnalog+0xe4>)
 80082d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082d6:	4b24      	ldr	r3, [pc, #144]	; (8008368 <GPIO_SetAnalog+0xe4>)
 80082d8:	2102      	movs	r1, #2
 80082da:	430a      	orrs	r2, r1
 80082dc:	629a      	str	r2, [r3, #40]	; 0x28
 80082de:	e03f      	b.n	8008360 <GPIO_SetAnalog+0xdc>
	} else if ((GPIOx == GPIOA) && (pin == 4)) {
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	2390      	movs	r3, #144	; 0x90
 80082e4:	05db      	lsls	r3, r3, #23
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d10a      	bne.n	8008300 <GPIO_SetAnalog+0x7c>
 80082ea:	1cbb      	adds	r3, r7, #2
 80082ec:	881b      	ldrh	r3, [r3, #0]
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d106      	bne.n	8008300 <GPIO_SetAnalog+0x7c>
		ADC1->CHSELR |= ADC_CHSELR_CHSEL4;
 80082f2:	4b1d      	ldr	r3, [pc, #116]	; (8008368 <GPIO_SetAnalog+0xe4>)
 80082f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082f6:	4b1c      	ldr	r3, [pc, #112]	; (8008368 <GPIO_SetAnalog+0xe4>)
 80082f8:	2110      	movs	r1, #16
 80082fa:	430a      	orrs	r2, r1
 80082fc:	629a      	str	r2, [r3, #40]	; 0x28
 80082fe:	e02f      	b.n	8008360 <GPIO_SetAnalog+0xdc>
	} else if ((GPIOx == GPIOB) && (pin == 0)) {
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a1a      	ldr	r2, [pc, #104]	; (800836c <GPIO_SetAnalog+0xe8>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d10b      	bne.n	8008320 <GPIO_SetAnalog+0x9c>
 8008308:	1cbb      	adds	r3, r7, #2
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d107      	bne.n	8008320 <GPIO_SetAnalog+0x9c>
		ADC1->CHSELR |= ADC_CHSELR_CHSEL8;
 8008310:	4b15      	ldr	r3, [pc, #84]	; (8008368 <GPIO_SetAnalog+0xe4>)
 8008312:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008314:	4b14      	ldr	r3, [pc, #80]	; (8008368 <GPIO_SetAnalog+0xe4>)
 8008316:	2180      	movs	r1, #128	; 0x80
 8008318:	0049      	lsls	r1, r1, #1
 800831a:	430a      	orrs	r2, r1
 800831c:	629a      	str	r2, [r3, #40]	; 0x28
 800831e:	e01f      	b.n	8008360 <GPIO_SetAnalog+0xdc>
	} else if ((GPIOx == GPIOC) && (pin == 0)) {
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a13      	ldr	r2, [pc, #76]	; (8008370 <GPIO_SetAnalog+0xec>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d10b      	bne.n	8008340 <GPIO_SetAnalog+0xbc>
 8008328:	1cbb      	adds	r3, r7, #2
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d107      	bne.n	8008340 <GPIO_SetAnalog+0xbc>
		ADC1->CHSELR |= ADC_CHSELR_CHSEL10;
 8008330:	4b0d      	ldr	r3, [pc, #52]	; (8008368 <GPIO_SetAnalog+0xe4>)
 8008332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008334:	4b0c      	ldr	r3, [pc, #48]	; (8008368 <GPIO_SetAnalog+0xe4>)
 8008336:	2180      	movs	r1, #128	; 0x80
 8008338:	00c9      	lsls	r1, r1, #3
 800833a:	430a      	orrs	r2, r1
 800833c:	629a      	str	r2, [r3, #40]	; 0x28
 800833e:	e00f      	b.n	8008360 <GPIO_SetAnalog+0xdc>
	} else if ((GPIOx == GPIOC) && (pin == 1)) {
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a0b      	ldr	r2, [pc, #44]	; (8008370 <GPIO_SetAnalog+0xec>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d10b      	bne.n	8008360 <GPIO_SetAnalog+0xdc>
 8008348:	1cbb      	adds	r3, r7, #2
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d107      	bne.n	8008360 <GPIO_SetAnalog+0xdc>
		ADC1->CHSELR |= ADC_CHSELR_CHSEL11;
 8008350:	4b05      	ldr	r3, [pc, #20]	; (8008368 <GPIO_SetAnalog+0xe4>)
 8008352:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008354:	4b04      	ldr	r3, [pc, #16]	; (8008368 <GPIO_SetAnalog+0xe4>)
 8008356:	2180      	movs	r1, #128	; 0x80
 8008358:	0109      	lsls	r1, r1, #4
 800835a:	430a      	orrs	r2, r1
 800835c:	629a      	str	r2, [r3, #40]	; 0x28
	}

}
 800835e:	e7ff      	b.n	8008360 <GPIO_SetAnalog+0xdc>
 8008360:	46c0      	nop			; (mov r8, r8)
 8008362:	46bd      	mov	sp, r7
 8008364:	b002      	add	sp, #8
 8008366:	bd80      	pop	{r7, pc}
 8008368:	40012400 	.word	0x40012400
 800836c:	48000400 	.word	0x48000400
 8008370:	48000800 	.word	0x48000800

08008374 <Touch_Get>:
//	}

	return (z2[3] - z1[3]);
}

void Touch_Get(uint16_t *arr) {
 8008374:	b590      	push	{r4, r7, lr}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
	GPIO_SetAnalog(TS_PORT_YP, TS_PIN_YP);
 800837c:	4b2e      	ldr	r3, [pc, #184]	; (8008438 <Touch_Get+0xc4>)
 800837e:	2100      	movs	r1, #0
 8008380:	0018      	movs	r0, r3
 8008382:	f7ff ff7f 	bl	8008284 <GPIO_SetAnalog>
	GPIO_SetAnalog(TS_PORT_XM, TS_PIN_XM);
 8008386:	2390      	movs	r3, #144	; 0x90
 8008388:	05db      	lsls	r3, r3, #23
 800838a:	2104      	movs	r1, #4
 800838c:	0018      	movs	r0, r3
 800838e:	f7ff ff79 	bl	8008284 <GPIO_SetAnalog>

	GPIO_SetOutput(TS_PORT_YM, TS_PIN_YM, 1);
 8008392:	4b2a      	ldr	r3, [pc, #168]	; (800843c <Touch_Get+0xc8>)
 8008394:	2201      	movs	r2, #1
 8008396:	2107      	movs	r1, #7
 8008398:	0018      	movs	r0, r3
 800839a:	f7ff ff46 	bl	800822a <GPIO_SetOutput>
	GPIO_SetOutput(TS_PORT_XP, TS_PIN_XP, 1);
 800839e:	2390      	movs	r3, #144	; 0x90
 80083a0:	05db      	lsls	r3, r3, #23
 80083a2:	2201      	movs	r2, #1
 80083a4:	2108      	movs	r1, #8
 80083a6:	0018      	movs	r0, r3
 80083a8:	f7ff ff3f 	bl	800822a <GPIO_SetOutput>

	delay_ms(100);
 80083ac:	2064      	movs	r0, #100	; 0x64
 80083ae:	f7fa ff19 	bl	80031e4 <delay_ms>

	uint16_t ADC_VAL[2];
	for (int i = 0; i < 12; i++) {
 80083b2:	2300      	movs	r3, #0
 80083b4:	60fb      	str	r3, [r7, #12]
 80083b6:	e017      	b.n	80083e8 <Touch_Get+0x74>
		adc_read(&ADC_VAL, 2);
 80083b8:	2408      	movs	r4, #8
 80083ba:	193b      	adds	r3, r7, r4
 80083bc:	2102      	movs	r1, #2
 80083be:	0018      	movs	r0, r3
 80083c0:	f7fa ffce 	bl	8003360 <adc_read>
		adc_stop();
 80083c4:	f7fa fffa 	bl	80033bc <adc_stop>
		arr_X[i] = ADC_VAL[0];
 80083c8:	0020      	movs	r0, r4
 80083ca:	183b      	adds	r3, r7, r0
 80083cc:	8819      	ldrh	r1, [r3, #0]
 80083ce:	4b1c      	ldr	r3, [pc, #112]	; (8008440 <Touch_Get+0xcc>)
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	0052      	lsls	r2, r2, #1
 80083d4:	52d1      	strh	r1, [r2, r3]
		arr_Y[i] = ADC_VAL[1];
 80083d6:	183b      	adds	r3, r7, r0
 80083d8:	8859      	ldrh	r1, [r3, #2]
 80083da:	4b1a      	ldr	r3, [pc, #104]	; (8008444 <Touch_Get+0xd0>)
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	0052      	lsls	r2, r2, #1
 80083e0:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < 12; i++) {
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3301      	adds	r3, #1
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2b0b      	cmp	r3, #11
 80083ec:	dde4      	ble.n	80083b8 <Touch_Get+0x44>
	}
	insert_sort(arr_X, 12);
 80083ee:	4b14      	ldr	r3, [pc, #80]	; (8008440 <Touch_Get+0xcc>)
 80083f0:	210c      	movs	r1, #12
 80083f2:	0018      	movs	r0, r3
 80083f4:	f7ff feaa 	bl	800814c <insert_sort>
	insert_sort(arr_Y, 12);
 80083f8:	4b12      	ldr	r3, [pc, #72]	; (8008444 <Touch_Get+0xd0>)
 80083fa:	210c      	movs	r1, #12
 80083fc:	0018      	movs	r0, r3
 80083fe:	f7ff fea5 	bl	800814c <insert_sort>

	*arr = arr_X[6];
 8008402:	4b0f      	ldr	r3, [pc, #60]	; (8008440 <Touch_Get+0xcc>)
 8008404:	899a      	ldrh	r2, [r3, #12]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	801a      	strh	r2, [r3, #0]
	*(arr + 1) = arr_Y[6];
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	3302      	adds	r3, #2
 800840e:	4a0d      	ldr	r2, [pc, #52]	; (8008444 <Touch_Get+0xd0>)
 8008410:	8992      	ldrh	r2, [r2, #12]
 8008412:	801a      	strh	r2, [r3, #0]

	GPIO_SetOutput(TS_PORT_YP, TS_PIN_YP, 0);
 8008414:	4b08      	ldr	r3, [pc, #32]	; (8008438 <Touch_Get+0xc4>)
 8008416:	2200      	movs	r2, #0
 8008418:	2100      	movs	r1, #0
 800841a:	0018      	movs	r0, r3
 800841c:	f7ff ff05 	bl	800822a <GPIO_SetOutput>
	GPIO_SetOutput(TS_PORT_XM, TS_PIN_XM, 0);
 8008420:	2390      	movs	r3, #144	; 0x90
 8008422:	05db      	lsls	r3, r3, #23
 8008424:	2200      	movs	r2, #0
 8008426:	2104      	movs	r1, #4
 8008428:	0018      	movs	r0, r3
 800842a:	f7ff fefe 	bl	800822a <GPIO_SetOutput>
}
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	46bd      	mov	sp, r7
 8008432:	b005      	add	sp, #20
 8008434:	bd90      	pop	{r4, r7, pc}
 8008436:	46c0      	nop			; (mov r8, r8)
 8008438:	48000400 	.word	0x48000400
 800843c:	48000800 	.word	0x48000800
 8008440:	2000056c 	.word	0x2000056c
 8008444:	20000584 	.word	0x20000584

08008448 <TOUCH_VAL>:



uint16_t TOUCH_VAL(char c) {
 8008448:	b5b0      	push	{r4, r5, r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af02      	add	r7, sp, #8
 800844e:	0002      	movs	r2, r0
 8008450:	1dfb      	adds	r3, r7, #7
 8008452:	701a      	strb	r2, [r3, #0]
	Touch_Get(&adc_arr_val[0]);
 8008454:	4b34      	ldr	r3, [pc, #208]	; (8008528 <TOUCH_VAL+0xe0>)
 8008456:	0018      	movs	r0, r3
 8008458:	f7ff ff8c 	bl	8008374 <Touch_Get>
	uint16_t x = 0, y = 0, z = 0;
 800845c:	230e      	movs	r3, #14
 800845e:	18fb      	adds	r3, r7, r3
 8008460:	2200      	movs	r2, #0
 8008462:	801a      	strh	r2, [r3, #0]
 8008464:	230c      	movs	r3, #12
 8008466:	18fb      	adds	r3, r7, r3
 8008468:	2200      	movs	r2, #0
 800846a:	801a      	strh	r2, [r3, #0]
 800846c:	230a      	movs	r3, #10
 800846e:	18fb      	adds	r3, r7, r3
 8008470:	2200      	movs	r2, #0
 8008472:	801a      	strh	r2, [r3, #0]
	if (c == 'x' || c == 'X') {
 8008474:	1dfb      	adds	r3, r7, #7
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	2b78      	cmp	r3, #120	; 0x78
 800847a:	d003      	beq.n	8008484 <TOUCH_VAL+0x3c>
 800847c:	1dfb      	adds	r3, r7, #7
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	2b58      	cmp	r3, #88	; 0x58
 8008482:	d10f      	bne.n	80084a4 <TOUCH_VAL+0x5c>
//		x = adc_arr_val[0] ;
		x = map(adc_arr_val[0], TS_Xmin, TS_Xmax, 0, 1023);
 8008484:	4b28      	ldr	r3, [pc, #160]	; (8008528 <TOUCH_VAL+0xe0>)
 8008486:	8818      	ldrh	r0, [r3, #0]
 8008488:	250e      	movs	r5, #14
 800848a:	197c      	adds	r4, r7, r5
 800848c:	4a27      	ldr	r2, [pc, #156]	; (800852c <TOUCH_VAL+0xe4>)
 800848e:	4b28      	ldr	r3, [pc, #160]	; (8008530 <TOUCH_VAL+0xe8>)
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	2300      	movs	r3, #0
 8008494:	2100      	movs	r1, #0
 8008496:	f7fa fb63 	bl	8002b60 <map>
 800849a:	0003      	movs	r3, r0
 800849c:	8023      	strh	r3, [r4, #0]
		return x;
 800849e:	197b      	adds	r3, r7, r5
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	e03c      	b.n	800851e <TOUCH_VAL+0xd6>
	} else if (c == 'y' || c == 'Y') {
 80084a4:	1dfb      	adds	r3, r7, #7
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	2b79      	cmp	r3, #121	; 0x79
 80084aa:	d003      	beq.n	80084b4 <TOUCH_VAL+0x6c>
 80084ac:	1dfb      	adds	r3, r7, #7
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	2b59      	cmp	r3, #89	; 0x59
 80084b2:	d10f      	bne.n	80084d4 <TOUCH_VAL+0x8c>
//		y = adc_arr_val[1];
		y = map(adc_arr_val[1], TS_Ymin, TS_Ymax, 0, 1023);
 80084b4:	4b1c      	ldr	r3, [pc, #112]	; (8008528 <TOUCH_VAL+0xe0>)
 80084b6:	8858      	ldrh	r0, [r3, #2]
 80084b8:	250c      	movs	r5, #12
 80084ba:	197c      	adds	r4, r7, r5
 80084bc:	4a1d      	ldr	r2, [pc, #116]	; (8008534 <TOUCH_VAL+0xec>)
 80084be:	491e      	ldr	r1, [pc, #120]	; (8008538 <TOUCH_VAL+0xf0>)
 80084c0:	4b1b      	ldr	r3, [pc, #108]	; (8008530 <TOUCH_VAL+0xe8>)
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	2300      	movs	r3, #0
 80084c6:	f7fa fb4b 	bl	8002b60 <map>
 80084ca:	0003      	movs	r3, r0
 80084cc:	8023      	strh	r3, [r4, #0]
		return y;
 80084ce:	197b      	adds	r3, r7, r5
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	e024      	b.n	800851e <TOUCH_VAL+0xd6>
	} else if (c == 'z' || c == 'Z') {
 80084d4:	1dfb      	adds	r3, r7, #7
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b7a      	cmp	r3, #122	; 0x7a
 80084da:	d003      	beq.n	80084e4 <TOUCH_VAL+0x9c>
 80084dc:	1dfb      	adds	r3, r7, #7
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	2b5a      	cmp	r3, #90	; 0x5a
 80084e2:	d11c      	bne.n	800851e <TOUCH_VAL+0xd6>
		z = adc_arr_val[1] - adc_arr_val[0];
 80084e4:	4b10      	ldr	r3, [pc, #64]	; (8008528 <TOUCH_VAL+0xe0>)
 80084e6:	8859      	ldrh	r1, [r3, #2]
 80084e8:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <TOUCH_VAL+0xe0>)
 80084ea:	881a      	ldrh	r2, [r3, #0]
 80084ec:	240a      	movs	r4, #10
 80084ee:	193b      	adds	r3, r7, r4
 80084f0:	1a8a      	subs	r2, r1, r2
 80084f2:	801a      	strh	r2, [r3, #0]
		z = map(adc_arr_val[1] - adc_arr_val[0], 1700, 3500, 100, 1000);
 80084f4:	4b0c      	ldr	r3, [pc, #48]	; (8008528 <TOUCH_VAL+0xe0>)
 80084f6:	885a      	ldrh	r2, [r3, #2]
 80084f8:	4b0b      	ldr	r3, [pc, #44]	; (8008528 <TOUCH_VAL+0xe0>)
 80084fa:	881b      	ldrh	r3, [r3, #0]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	b298      	uxth	r0, r3
 8008500:	0025      	movs	r5, r4
 8008502:	193c      	adds	r4, r7, r4
 8008504:	4a0d      	ldr	r2, [pc, #52]	; (800853c <TOUCH_VAL+0xf4>)
 8008506:	490e      	ldr	r1, [pc, #56]	; (8008540 <TOUCH_VAL+0xf8>)
 8008508:	23fa      	movs	r3, #250	; 0xfa
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	2364      	movs	r3, #100	; 0x64
 8008510:	f7fa fb26 	bl	8002b60 <map>
 8008514:	0003      	movs	r3, r0
 8008516:	8023      	strh	r3, [r4, #0]
		return z;
 8008518:	197b      	adds	r3, r7, r5
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	e7ff      	b.n	800851e <TOUCH_VAL+0xd6>
	}
}
 800851e:	0018      	movs	r0, r3
 8008520:	46bd      	mov	sp, r7
 8008522:	b004      	add	sp, #16
 8008524:	bdb0      	pop	{r4, r5, r7, pc}
 8008526:	46c0      	nop			; (mov r8, r8)
 8008528:	20000568 	.word	0x20000568
 800852c:	00000514 	.word	0x00000514
 8008530:	000003ff 	.word	0x000003ff
 8008534:	00000fff 	.word	0x00000fff
 8008538:	00000bb8 	.word	0x00000bb8
 800853c:	00000dac 	.word	0x00000dac
 8008540:	000006a4 	.word	0x000006a4

08008544 <__errno>:
 8008544:	4b01      	ldr	r3, [pc, #4]	; (800854c <__errno+0x8>)
 8008546:	6818      	ldr	r0, [r3, #0]
 8008548:	4770      	bx	lr
 800854a:	46c0      	nop			; (mov r8, r8)
 800854c:	20000064 	.word	0x20000064

08008550 <__libc_init_array>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	2600      	movs	r6, #0
 8008554:	4d0c      	ldr	r5, [pc, #48]	; (8008588 <__libc_init_array+0x38>)
 8008556:	4c0d      	ldr	r4, [pc, #52]	; (800858c <__libc_init_array+0x3c>)
 8008558:	1b64      	subs	r4, r4, r5
 800855a:	10a4      	asrs	r4, r4, #2
 800855c:	42a6      	cmp	r6, r4
 800855e:	d109      	bne.n	8008574 <__libc_init_array+0x24>
 8008560:	2600      	movs	r6, #0
 8008562:	f000 fc95 	bl	8008e90 <_init>
 8008566:	4d0a      	ldr	r5, [pc, #40]	; (8008590 <__libc_init_array+0x40>)
 8008568:	4c0a      	ldr	r4, [pc, #40]	; (8008594 <__libc_init_array+0x44>)
 800856a:	1b64      	subs	r4, r4, r5
 800856c:	10a4      	asrs	r4, r4, #2
 800856e:	42a6      	cmp	r6, r4
 8008570:	d105      	bne.n	800857e <__libc_init_array+0x2e>
 8008572:	bd70      	pop	{r4, r5, r6, pc}
 8008574:	00b3      	lsls	r3, r6, #2
 8008576:	58eb      	ldr	r3, [r5, r3]
 8008578:	4798      	blx	r3
 800857a:	3601      	adds	r6, #1
 800857c:	e7ee      	b.n	800855c <__libc_init_array+0xc>
 800857e:	00b3      	lsls	r3, r6, #2
 8008580:	58eb      	ldr	r3, [r5, r3]
 8008582:	4798      	blx	r3
 8008584:	3601      	adds	r6, #1
 8008586:	e7f2      	b.n	800856e <__libc_init_array+0x1e>
 8008588:	08009c7c 	.word	0x08009c7c
 800858c:	08009c7c 	.word	0x08009c7c
 8008590:	08009c7c 	.word	0x08009c7c
 8008594:	08009c80 	.word	0x08009c80

08008598 <memset>:
 8008598:	0003      	movs	r3, r0
 800859a:	1882      	adds	r2, r0, r2
 800859c:	4293      	cmp	r3, r2
 800859e:	d100      	bne.n	80085a2 <memset+0xa>
 80085a0:	4770      	bx	lr
 80085a2:	7019      	strb	r1, [r3, #0]
 80085a4:	3301      	adds	r3, #1
 80085a6:	e7f9      	b.n	800859c <memset+0x4>

080085a8 <strncpy>:
 80085a8:	0003      	movs	r3, r0
 80085aa:	b530      	push	{r4, r5, lr}
 80085ac:	001d      	movs	r5, r3
 80085ae:	2a00      	cmp	r2, #0
 80085b0:	d006      	beq.n	80085c0 <strncpy+0x18>
 80085b2:	780c      	ldrb	r4, [r1, #0]
 80085b4:	3a01      	subs	r2, #1
 80085b6:	3301      	adds	r3, #1
 80085b8:	702c      	strb	r4, [r5, #0]
 80085ba:	3101      	adds	r1, #1
 80085bc:	2c00      	cmp	r4, #0
 80085be:	d1f5      	bne.n	80085ac <strncpy+0x4>
 80085c0:	2100      	movs	r1, #0
 80085c2:	189a      	adds	r2, r3, r2
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d100      	bne.n	80085ca <strncpy+0x22>
 80085c8:	bd30      	pop	{r4, r5, pc}
 80085ca:	7019      	strb	r1, [r3, #0]
 80085cc:	3301      	adds	r3, #1
 80085ce:	e7f9      	b.n	80085c4 <strncpy+0x1c>

080085d0 <_vsniprintf_r>:
 80085d0:	b530      	push	{r4, r5, lr}
 80085d2:	0014      	movs	r4, r2
 80085d4:	0005      	movs	r5, r0
 80085d6:	001a      	movs	r2, r3
 80085d8:	b09b      	sub	sp, #108	; 0x6c
 80085da:	2c00      	cmp	r4, #0
 80085dc:	da05      	bge.n	80085ea <_vsniprintf_r+0x1a>
 80085de:	238b      	movs	r3, #139	; 0x8b
 80085e0:	6003      	str	r3, [r0, #0]
 80085e2:	2001      	movs	r0, #1
 80085e4:	4240      	negs	r0, r0
 80085e6:	b01b      	add	sp, #108	; 0x6c
 80085e8:	bd30      	pop	{r4, r5, pc}
 80085ea:	2382      	movs	r3, #130	; 0x82
 80085ec:	4668      	mov	r0, sp
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	8183      	strh	r3, [r0, #12]
 80085f2:	2300      	movs	r3, #0
 80085f4:	9100      	str	r1, [sp, #0]
 80085f6:	9104      	str	r1, [sp, #16]
 80085f8:	429c      	cmp	r4, r3
 80085fa:	d000      	beq.n	80085fe <_vsniprintf_r+0x2e>
 80085fc:	1e63      	subs	r3, r4, #1
 80085fe:	9302      	str	r3, [sp, #8]
 8008600:	9305      	str	r3, [sp, #20]
 8008602:	2301      	movs	r3, #1
 8008604:	4669      	mov	r1, sp
 8008606:	425b      	negs	r3, r3
 8008608:	81cb      	strh	r3, [r1, #14]
 800860a:	0028      	movs	r0, r5
 800860c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800860e:	f000 f89b 	bl	8008748 <_svfiprintf_r>
 8008612:	1c43      	adds	r3, r0, #1
 8008614:	da01      	bge.n	800861a <_vsniprintf_r+0x4a>
 8008616:	238b      	movs	r3, #139	; 0x8b
 8008618:	602b      	str	r3, [r5, #0]
 800861a:	2c00      	cmp	r4, #0
 800861c:	d0e3      	beq.n	80085e6 <_vsniprintf_r+0x16>
 800861e:	2300      	movs	r3, #0
 8008620:	9a00      	ldr	r2, [sp, #0]
 8008622:	7013      	strb	r3, [r2, #0]
 8008624:	e7df      	b.n	80085e6 <_vsniprintf_r+0x16>
	...

08008628 <vsniprintf>:
 8008628:	b507      	push	{r0, r1, r2, lr}
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	0013      	movs	r3, r2
 800862e:	000a      	movs	r2, r1
 8008630:	0001      	movs	r1, r0
 8008632:	4802      	ldr	r0, [pc, #8]	; (800863c <vsniprintf+0x14>)
 8008634:	6800      	ldr	r0, [r0, #0]
 8008636:	f7ff ffcb 	bl	80085d0 <_vsniprintf_r>
 800863a:	bd0e      	pop	{r1, r2, r3, pc}
 800863c:	20000064 	.word	0x20000064

08008640 <_vsiprintf_r>:
 8008640:	b500      	push	{lr}
 8008642:	b09b      	sub	sp, #108	; 0x6c
 8008644:	9100      	str	r1, [sp, #0]
 8008646:	9104      	str	r1, [sp, #16]
 8008648:	4906      	ldr	r1, [pc, #24]	; (8008664 <_vsiprintf_r+0x24>)
 800864a:	9105      	str	r1, [sp, #20]
 800864c:	9102      	str	r1, [sp, #8]
 800864e:	4906      	ldr	r1, [pc, #24]	; (8008668 <_vsiprintf_r+0x28>)
 8008650:	9103      	str	r1, [sp, #12]
 8008652:	4669      	mov	r1, sp
 8008654:	f000 f878 	bl	8008748 <_svfiprintf_r>
 8008658:	2300      	movs	r3, #0
 800865a:	9a00      	ldr	r2, [sp, #0]
 800865c:	7013      	strb	r3, [r2, #0]
 800865e:	b01b      	add	sp, #108	; 0x6c
 8008660:	bd00      	pop	{pc}
 8008662:	46c0      	nop			; (mov r8, r8)
 8008664:	7fffffff 	.word	0x7fffffff
 8008668:	ffff0208 	.word	0xffff0208

0800866c <vsiprintf>:
 800866c:	b510      	push	{r4, lr}
 800866e:	0013      	movs	r3, r2
 8008670:	000a      	movs	r2, r1
 8008672:	0001      	movs	r1, r0
 8008674:	4802      	ldr	r0, [pc, #8]	; (8008680 <vsiprintf+0x14>)
 8008676:	6800      	ldr	r0, [r0, #0]
 8008678:	f7ff ffe2 	bl	8008640 <_vsiprintf_r>
 800867c:	bd10      	pop	{r4, pc}
 800867e:	46c0      	nop			; (mov r8, r8)
 8008680:	20000064 	.word	0x20000064

08008684 <__ssputs_r>:
 8008684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008686:	688e      	ldr	r6, [r1, #8]
 8008688:	b085      	sub	sp, #20
 800868a:	0007      	movs	r7, r0
 800868c:	000c      	movs	r4, r1
 800868e:	9203      	str	r2, [sp, #12]
 8008690:	9301      	str	r3, [sp, #4]
 8008692:	429e      	cmp	r6, r3
 8008694:	d83c      	bhi.n	8008710 <__ssputs_r+0x8c>
 8008696:	2390      	movs	r3, #144	; 0x90
 8008698:	898a      	ldrh	r2, [r1, #12]
 800869a:	00db      	lsls	r3, r3, #3
 800869c:	421a      	tst	r2, r3
 800869e:	d034      	beq.n	800870a <__ssputs_r+0x86>
 80086a0:	2503      	movs	r5, #3
 80086a2:	6909      	ldr	r1, [r1, #16]
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	1a5b      	subs	r3, r3, r1
 80086a8:	9302      	str	r3, [sp, #8]
 80086aa:	6963      	ldr	r3, [r4, #20]
 80086ac:	9802      	ldr	r0, [sp, #8]
 80086ae:	435d      	muls	r5, r3
 80086b0:	0feb      	lsrs	r3, r5, #31
 80086b2:	195d      	adds	r5, r3, r5
 80086b4:	9b01      	ldr	r3, [sp, #4]
 80086b6:	106d      	asrs	r5, r5, #1
 80086b8:	3301      	adds	r3, #1
 80086ba:	181b      	adds	r3, r3, r0
 80086bc:	42ab      	cmp	r3, r5
 80086be:	d900      	bls.n	80086c2 <__ssputs_r+0x3e>
 80086c0:	001d      	movs	r5, r3
 80086c2:	0553      	lsls	r3, r2, #21
 80086c4:	d532      	bpl.n	800872c <__ssputs_r+0xa8>
 80086c6:	0029      	movs	r1, r5
 80086c8:	0038      	movs	r0, r7
 80086ca:	f000 fb31 	bl	8008d30 <_malloc_r>
 80086ce:	1e06      	subs	r6, r0, #0
 80086d0:	d109      	bne.n	80086e6 <__ssputs_r+0x62>
 80086d2:	230c      	movs	r3, #12
 80086d4:	603b      	str	r3, [r7, #0]
 80086d6:	2340      	movs	r3, #64	; 0x40
 80086d8:	2001      	movs	r0, #1
 80086da:	89a2      	ldrh	r2, [r4, #12]
 80086dc:	4240      	negs	r0, r0
 80086de:	4313      	orrs	r3, r2
 80086e0:	81a3      	strh	r3, [r4, #12]
 80086e2:	b005      	add	sp, #20
 80086e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086e6:	9a02      	ldr	r2, [sp, #8]
 80086e8:	6921      	ldr	r1, [r4, #16]
 80086ea:	f000 faba 	bl	8008c62 <memcpy>
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	4a14      	ldr	r2, [pc, #80]	; (8008744 <__ssputs_r+0xc0>)
 80086f2:	401a      	ands	r2, r3
 80086f4:	2380      	movs	r3, #128	; 0x80
 80086f6:	4313      	orrs	r3, r2
 80086f8:	81a3      	strh	r3, [r4, #12]
 80086fa:	9b02      	ldr	r3, [sp, #8]
 80086fc:	6126      	str	r6, [r4, #16]
 80086fe:	18f6      	adds	r6, r6, r3
 8008700:	6026      	str	r6, [r4, #0]
 8008702:	6165      	str	r5, [r4, #20]
 8008704:	9e01      	ldr	r6, [sp, #4]
 8008706:	1aed      	subs	r5, r5, r3
 8008708:	60a5      	str	r5, [r4, #8]
 800870a:	9b01      	ldr	r3, [sp, #4]
 800870c:	429e      	cmp	r6, r3
 800870e:	d900      	bls.n	8008712 <__ssputs_r+0x8e>
 8008710:	9e01      	ldr	r6, [sp, #4]
 8008712:	0032      	movs	r2, r6
 8008714:	9903      	ldr	r1, [sp, #12]
 8008716:	6820      	ldr	r0, [r4, #0]
 8008718:	f000 faac 	bl	8008c74 <memmove>
 800871c:	68a3      	ldr	r3, [r4, #8]
 800871e:	2000      	movs	r0, #0
 8008720:	1b9b      	subs	r3, r3, r6
 8008722:	60a3      	str	r3, [r4, #8]
 8008724:	6823      	ldr	r3, [r4, #0]
 8008726:	199e      	adds	r6, r3, r6
 8008728:	6026      	str	r6, [r4, #0]
 800872a:	e7da      	b.n	80086e2 <__ssputs_r+0x5e>
 800872c:	002a      	movs	r2, r5
 800872e:	0038      	movs	r0, r7
 8008730:	f000 fb5c 	bl	8008dec <_realloc_r>
 8008734:	1e06      	subs	r6, r0, #0
 8008736:	d1e0      	bne.n	80086fa <__ssputs_r+0x76>
 8008738:	0038      	movs	r0, r7
 800873a:	6921      	ldr	r1, [r4, #16]
 800873c:	f000 faae 	bl	8008c9c <_free_r>
 8008740:	e7c7      	b.n	80086d2 <__ssputs_r+0x4e>
 8008742:	46c0      	nop			; (mov r8, r8)
 8008744:	fffffb7f 	.word	0xfffffb7f

08008748 <_svfiprintf_r>:
 8008748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800874a:	b0a1      	sub	sp, #132	; 0x84
 800874c:	9003      	str	r0, [sp, #12]
 800874e:	001d      	movs	r5, r3
 8008750:	898b      	ldrh	r3, [r1, #12]
 8008752:	000f      	movs	r7, r1
 8008754:	0016      	movs	r6, r2
 8008756:	061b      	lsls	r3, r3, #24
 8008758:	d511      	bpl.n	800877e <_svfiprintf_r+0x36>
 800875a:	690b      	ldr	r3, [r1, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10e      	bne.n	800877e <_svfiprintf_r+0x36>
 8008760:	2140      	movs	r1, #64	; 0x40
 8008762:	f000 fae5 	bl	8008d30 <_malloc_r>
 8008766:	6038      	str	r0, [r7, #0]
 8008768:	6138      	str	r0, [r7, #16]
 800876a:	2800      	cmp	r0, #0
 800876c:	d105      	bne.n	800877a <_svfiprintf_r+0x32>
 800876e:	230c      	movs	r3, #12
 8008770:	9a03      	ldr	r2, [sp, #12]
 8008772:	3801      	subs	r0, #1
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	b021      	add	sp, #132	; 0x84
 8008778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800877a:	2340      	movs	r3, #64	; 0x40
 800877c:	617b      	str	r3, [r7, #20]
 800877e:	2300      	movs	r3, #0
 8008780:	ac08      	add	r4, sp, #32
 8008782:	6163      	str	r3, [r4, #20]
 8008784:	3320      	adds	r3, #32
 8008786:	7663      	strb	r3, [r4, #25]
 8008788:	3310      	adds	r3, #16
 800878a:	76a3      	strb	r3, [r4, #26]
 800878c:	9507      	str	r5, [sp, #28]
 800878e:	0035      	movs	r5, r6
 8008790:	782b      	ldrb	r3, [r5, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <_svfiprintf_r+0x52>
 8008796:	2b25      	cmp	r3, #37	; 0x25
 8008798:	d147      	bne.n	800882a <_svfiprintf_r+0xe2>
 800879a:	1bab      	subs	r3, r5, r6
 800879c:	9305      	str	r3, [sp, #20]
 800879e:	42b5      	cmp	r5, r6
 80087a0:	d00c      	beq.n	80087bc <_svfiprintf_r+0x74>
 80087a2:	0032      	movs	r2, r6
 80087a4:	0039      	movs	r1, r7
 80087a6:	9803      	ldr	r0, [sp, #12]
 80087a8:	f7ff ff6c 	bl	8008684 <__ssputs_r>
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	d100      	bne.n	80087b2 <_svfiprintf_r+0x6a>
 80087b0:	e0ae      	b.n	8008910 <_svfiprintf_r+0x1c8>
 80087b2:	6962      	ldr	r2, [r4, #20]
 80087b4:	9b05      	ldr	r3, [sp, #20]
 80087b6:	4694      	mov	ip, r2
 80087b8:	4463      	add	r3, ip
 80087ba:	6163      	str	r3, [r4, #20]
 80087bc:	782b      	ldrb	r3, [r5, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d100      	bne.n	80087c4 <_svfiprintf_r+0x7c>
 80087c2:	e0a5      	b.n	8008910 <_svfiprintf_r+0x1c8>
 80087c4:	2201      	movs	r2, #1
 80087c6:	2300      	movs	r3, #0
 80087c8:	4252      	negs	r2, r2
 80087ca:	6062      	str	r2, [r4, #4]
 80087cc:	a904      	add	r1, sp, #16
 80087ce:	3254      	adds	r2, #84	; 0x54
 80087d0:	1852      	adds	r2, r2, r1
 80087d2:	1c6e      	adds	r6, r5, #1
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	60e3      	str	r3, [r4, #12]
 80087d8:	60a3      	str	r3, [r4, #8]
 80087da:	7013      	strb	r3, [r2, #0]
 80087dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80087de:	2205      	movs	r2, #5
 80087e0:	7831      	ldrb	r1, [r6, #0]
 80087e2:	4854      	ldr	r0, [pc, #336]	; (8008934 <_svfiprintf_r+0x1ec>)
 80087e4:	f000 fa32 	bl	8008c4c <memchr>
 80087e8:	1c75      	adds	r5, r6, #1
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d11f      	bne.n	800882e <_svfiprintf_r+0xe6>
 80087ee:	6822      	ldr	r2, [r4, #0]
 80087f0:	06d3      	lsls	r3, r2, #27
 80087f2:	d504      	bpl.n	80087fe <_svfiprintf_r+0xb6>
 80087f4:	2353      	movs	r3, #83	; 0x53
 80087f6:	a904      	add	r1, sp, #16
 80087f8:	185b      	adds	r3, r3, r1
 80087fa:	2120      	movs	r1, #32
 80087fc:	7019      	strb	r1, [r3, #0]
 80087fe:	0713      	lsls	r3, r2, #28
 8008800:	d504      	bpl.n	800880c <_svfiprintf_r+0xc4>
 8008802:	2353      	movs	r3, #83	; 0x53
 8008804:	a904      	add	r1, sp, #16
 8008806:	185b      	adds	r3, r3, r1
 8008808:	212b      	movs	r1, #43	; 0x2b
 800880a:	7019      	strb	r1, [r3, #0]
 800880c:	7833      	ldrb	r3, [r6, #0]
 800880e:	2b2a      	cmp	r3, #42	; 0x2a
 8008810:	d016      	beq.n	8008840 <_svfiprintf_r+0xf8>
 8008812:	0035      	movs	r5, r6
 8008814:	2100      	movs	r1, #0
 8008816:	200a      	movs	r0, #10
 8008818:	68e3      	ldr	r3, [r4, #12]
 800881a:	782a      	ldrb	r2, [r5, #0]
 800881c:	1c6e      	adds	r6, r5, #1
 800881e:	3a30      	subs	r2, #48	; 0x30
 8008820:	2a09      	cmp	r2, #9
 8008822:	d94e      	bls.n	80088c2 <_svfiprintf_r+0x17a>
 8008824:	2900      	cmp	r1, #0
 8008826:	d111      	bne.n	800884c <_svfiprintf_r+0x104>
 8008828:	e017      	b.n	800885a <_svfiprintf_r+0x112>
 800882a:	3501      	adds	r5, #1
 800882c:	e7b0      	b.n	8008790 <_svfiprintf_r+0x48>
 800882e:	4b41      	ldr	r3, [pc, #260]	; (8008934 <_svfiprintf_r+0x1ec>)
 8008830:	6822      	ldr	r2, [r4, #0]
 8008832:	1ac0      	subs	r0, r0, r3
 8008834:	2301      	movs	r3, #1
 8008836:	4083      	lsls	r3, r0
 8008838:	4313      	orrs	r3, r2
 800883a:	002e      	movs	r6, r5
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	e7ce      	b.n	80087de <_svfiprintf_r+0x96>
 8008840:	9b07      	ldr	r3, [sp, #28]
 8008842:	1d19      	adds	r1, r3, #4
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	9107      	str	r1, [sp, #28]
 8008848:	2b00      	cmp	r3, #0
 800884a:	db01      	blt.n	8008850 <_svfiprintf_r+0x108>
 800884c:	930b      	str	r3, [sp, #44]	; 0x2c
 800884e:	e004      	b.n	800885a <_svfiprintf_r+0x112>
 8008850:	425b      	negs	r3, r3
 8008852:	60e3      	str	r3, [r4, #12]
 8008854:	2302      	movs	r3, #2
 8008856:	4313      	orrs	r3, r2
 8008858:	6023      	str	r3, [r4, #0]
 800885a:	782b      	ldrb	r3, [r5, #0]
 800885c:	2b2e      	cmp	r3, #46	; 0x2e
 800885e:	d10a      	bne.n	8008876 <_svfiprintf_r+0x12e>
 8008860:	786b      	ldrb	r3, [r5, #1]
 8008862:	2b2a      	cmp	r3, #42	; 0x2a
 8008864:	d135      	bne.n	80088d2 <_svfiprintf_r+0x18a>
 8008866:	9b07      	ldr	r3, [sp, #28]
 8008868:	3502      	adds	r5, #2
 800886a:	1d1a      	adds	r2, r3, #4
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	9207      	str	r2, [sp, #28]
 8008870:	2b00      	cmp	r3, #0
 8008872:	db2b      	blt.n	80088cc <_svfiprintf_r+0x184>
 8008874:	9309      	str	r3, [sp, #36]	; 0x24
 8008876:	4e30      	ldr	r6, [pc, #192]	; (8008938 <_svfiprintf_r+0x1f0>)
 8008878:	2203      	movs	r2, #3
 800887a:	0030      	movs	r0, r6
 800887c:	7829      	ldrb	r1, [r5, #0]
 800887e:	f000 f9e5 	bl	8008c4c <memchr>
 8008882:	2800      	cmp	r0, #0
 8008884:	d006      	beq.n	8008894 <_svfiprintf_r+0x14c>
 8008886:	2340      	movs	r3, #64	; 0x40
 8008888:	1b80      	subs	r0, r0, r6
 800888a:	4083      	lsls	r3, r0
 800888c:	6822      	ldr	r2, [r4, #0]
 800888e:	3501      	adds	r5, #1
 8008890:	4313      	orrs	r3, r2
 8008892:	6023      	str	r3, [r4, #0]
 8008894:	7829      	ldrb	r1, [r5, #0]
 8008896:	2206      	movs	r2, #6
 8008898:	4828      	ldr	r0, [pc, #160]	; (800893c <_svfiprintf_r+0x1f4>)
 800889a:	1c6e      	adds	r6, r5, #1
 800889c:	7621      	strb	r1, [r4, #24]
 800889e:	f000 f9d5 	bl	8008c4c <memchr>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	d03c      	beq.n	8008920 <_svfiprintf_r+0x1d8>
 80088a6:	4b26      	ldr	r3, [pc, #152]	; (8008940 <_svfiprintf_r+0x1f8>)
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d125      	bne.n	80088f8 <_svfiprintf_r+0x1b0>
 80088ac:	2207      	movs	r2, #7
 80088ae:	9b07      	ldr	r3, [sp, #28]
 80088b0:	3307      	adds	r3, #7
 80088b2:	4393      	bics	r3, r2
 80088b4:	3308      	adds	r3, #8
 80088b6:	9307      	str	r3, [sp, #28]
 80088b8:	6963      	ldr	r3, [r4, #20]
 80088ba:	9a04      	ldr	r2, [sp, #16]
 80088bc:	189b      	adds	r3, r3, r2
 80088be:	6163      	str	r3, [r4, #20]
 80088c0:	e765      	b.n	800878e <_svfiprintf_r+0x46>
 80088c2:	4343      	muls	r3, r0
 80088c4:	0035      	movs	r5, r6
 80088c6:	2101      	movs	r1, #1
 80088c8:	189b      	adds	r3, r3, r2
 80088ca:	e7a6      	b.n	800881a <_svfiprintf_r+0xd2>
 80088cc:	2301      	movs	r3, #1
 80088ce:	425b      	negs	r3, r3
 80088d0:	e7d0      	b.n	8008874 <_svfiprintf_r+0x12c>
 80088d2:	2300      	movs	r3, #0
 80088d4:	200a      	movs	r0, #10
 80088d6:	001a      	movs	r2, r3
 80088d8:	3501      	adds	r5, #1
 80088da:	6063      	str	r3, [r4, #4]
 80088dc:	7829      	ldrb	r1, [r5, #0]
 80088de:	1c6e      	adds	r6, r5, #1
 80088e0:	3930      	subs	r1, #48	; 0x30
 80088e2:	2909      	cmp	r1, #9
 80088e4:	d903      	bls.n	80088ee <_svfiprintf_r+0x1a6>
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d0c5      	beq.n	8008876 <_svfiprintf_r+0x12e>
 80088ea:	9209      	str	r2, [sp, #36]	; 0x24
 80088ec:	e7c3      	b.n	8008876 <_svfiprintf_r+0x12e>
 80088ee:	4342      	muls	r2, r0
 80088f0:	0035      	movs	r5, r6
 80088f2:	2301      	movs	r3, #1
 80088f4:	1852      	adds	r2, r2, r1
 80088f6:	e7f1      	b.n	80088dc <_svfiprintf_r+0x194>
 80088f8:	ab07      	add	r3, sp, #28
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	003a      	movs	r2, r7
 80088fe:	0021      	movs	r1, r4
 8008900:	4b10      	ldr	r3, [pc, #64]	; (8008944 <_svfiprintf_r+0x1fc>)
 8008902:	9803      	ldr	r0, [sp, #12]
 8008904:	e000      	b.n	8008908 <_svfiprintf_r+0x1c0>
 8008906:	bf00      	nop
 8008908:	9004      	str	r0, [sp, #16]
 800890a:	9b04      	ldr	r3, [sp, #16]
 800890c:	3301      	adds	r3, #1
 800890e:	d1d3      	bne.n	80088b8 <_svfiprintf_r+0x170>
 8008910:	89bb      	ldrh	r3, [r7, #12]
 8008912:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008914:	065b      	lsls	r3, r3, #25
 8008916:	d400      	bmi.n	800891a <_svfiprintf_r+0x1d2>
 8008918:	e72d      	b.n	8008776 <_svfiprintf_r+0x2e>
 800891a:	2001      	movs	r0, #1
 800891c:	4240      	negs	r0, r0
 800891e:	e72a      	b.n	8008776 <_svfiprintf_r+0x2e>
 8008920:	ab07      	add	r3, sp, #28
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	003a      	movs	r2, r7
 8008926:	0021      	movs	r1, r4
 8008928:	4b06      	ldr	r3, [pc, #24]	; (8008944 <_svfiprintf_r+0x1fc>)
 800892a:	9803      	ldr	r0, [sp, #12]
 800892c:	f000 f87c 	bl	8008a28 <_printf_i>
 8008930:	e7ea      	b.n	8008908 <_svfiprintf_r+0x1c0>
 8008932:	46c0      	nop			; (mov r8, r8)
 8008934:	08009c48 	.word	0x08009c48
 8008938:	08009c4e 	.word	0x08009c4e
 800893c:	08009c52 	.word	0x08009c52
 8008940:	00000000 	.word	0x00000000
 8008944:	08008685 	.word	0x08008685

08008948 <_printf_common>:
 8008948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800894a:	0015      	movs	r5, r2
 800894c:	9301      	str	r3, [sp, #4]
 800894e:	688a      	ldr	r2, [r1, #8]
 8008950:	690b      	ldr	r3, [r1, #16]
 8008952:	000c      	movs	r4, r1
 8008954:	9000      	str	r0, [sp, #0]
 8008956:	4293      	cmp	r3, r2
 8008958:	da00      	bge.n	800895c <_printf_common+0x14>
 800895a:	0013      	movs	r3, r2
 800895c:	0022      	movs	r2, r4
 800895e:	602b      	str	r3, [r5, #0]
 8008960:	3243      	adds	r2, #67	; 0x43
 8008962:	7812      	ldrb	r2, [r2, #0]
 8008964:	2a00      	cmp	r2, #0
 8008966:	d001      	beq.n	800896c <_printf_common+0x24>
 8008968:	3301      	adds	r3, #1
 800896a:	602b      	str	r3, [r5, #0]
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	069b      	lsls	r3, r3, #26
 8008970:	d502      	bpl.n	8008978 <_printf_common+0x30>
 8008972:	682b      	ldr	r3, [r5, #0]
 8008974:	3302      	adds	r3, #2
 8008976:	602b      	str	r3, [r5, #0]
 8008978:	6822      	ldr	r2, [r4, #0]
 800897a:	2306      	movs	r3, #6
 800897c:	0017      	movs	r7, r2
 800897e:	401f      	ands	r7, r3
 8008980:	421a      	tst	r2, r3
 8008982:	d027      	beq.n	80089d4 <_printf_common+0x8c>
 8008984:	0023      	movs	r3, r4
 8008986:	3343      	adds	r3, #67	; 0x43
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	1e5a      	subs	r2, r3, #1
 800898c:	4193      	sbcs	r3, r2
 800898e:	6822      	ldr	r2, [r4, #0]
 8008990:	0692      	lsls	r2, r2, #26
 8008992:	d430      	bmi.n	80089f6 <_printf_common+0xae>
 8008994:	0022      	movs	r2, r4
 8008996:	9901      	ldr	r1, [sp, #4]
 8008998:	9800      	ldr	r0, [sp, #0]
 800899a:	9e08      	ldr	r6, [sp, #32]
 800899c:	3243      	adds	r2, #67	; 0x43
 800899e:	47b0      	blx	r6
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	d025      	beq.n	80089f0 <_printf_common+0xa8>
 80089a4:	2306      	movs	r3, #6
 80089a6:	6820      	ldr	r0, [r4, #0]
 80089a8:	682a      	ldr	r2, [r5, #0]
 80089aa:	68e1      	ldr	r1, [r4, #12]
 80089ac:	2500      	movs	r5, #0
 80089ae:	4003      	ands	r3, r0
 80089b0:	2b04      	cmp	r3, #4
 80089b2:	d103      	bne.n	80089bc <_printf_common+0x74>
 80089b4:	1a8d      	subs	r5, r1, r2
 80089b6:	43eb      	mvns	r3, r5
 80089b8:	17db      	asrs	r3, r3, #31
 80089ba:	401d      	ands	r5, r3
 80089bc:	68a3      	ldr	r3, [r4, #8]
 80089be:	6922      	ldr	r2, [r4, #16]
 80089c0:	4293      	cmp	r3, r2
 80089c2:	dd01      	ble.n	80089c8 <_printf_common+0x80>
 80089c4:	1a9b      	subs	r3, r3, r2
 80089c6:	18ed      	adds	r5, r5, r3
 80089c8:	2700      	movs	r7, #0
 80089ca:	42bd      	cmp	r5, r7
 80089cc:	d120      	bne.n	8008a10 <_printf_common+0xc8>
 80089ce:	2000      	movs	r0, #0
 80089d0:	e010      	b.n	80089f4 <_printf_common+0xac>
 80089d2:	3701      	adds	r7, #1
 80089d4:	68e3      	ldr	r3, [r4, #12]
 80089d6:	682a      	ldr	r2, [r5, #0]
 80089d8:	1a9b      	subs	r3, r3, r2
 80089da:	42bb      	cmp	r3, r7
 80089dc:	ddd2      	ble.n	8008984 <_printf_common+0x3c>
 80089de:	0022      	movs	r2, r4
 80089e0:	2301      	movs	r3, #1
 80089e2:	9901      	ldr	r1, [sp, #4]
 80089e4:	9800      	ldr	r0, [sp, #0]
 80089e6:	9e08      	ldr	r6, [sp, #32]
 80089e8:	3219      	adds	r2, #25
 80089ea:	47b0      	blx	r6
 80089ec:	1c43      	adds	r3, r0, #1
 80089ee:	d1f0      	bne.n	80089d2 <_printf_common+0x8a>
 80089f0:	2001      	movs	r0, #1
 80089f2:	4240      	negs	r0, r0
 80089f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089f6:	2030      	movs	r0, #48	; 0x30
 80089f8:	18e1      	adds	r1, r4, r3
 80089fa:	3143      	adds	r1, #67	; 0x43
 80089fc:	7008      	strb	r0, [r1, #0]
 80089fe:	0021      	movs	r1, r4
 8008a00:	1c5a      	adds	r2, r3, #1
 8008a02:	3145      	adds	r1, #69	; 0x45
 8008a04:	7809      	ldrb	r1, [r1, #0]
 8008a06:	18a2      	adds	r2, r4, r2
 8008a08:	3243      	adds	r2, #67	; 0x43
 8008a0a:	3302      	adds	r3, #2
 8008a0c:	7011      	strb	r1, [r2, #0]
 8008a0e:	e7c1      	b.n	8008994 <_printf_common+0x4c>
 8008a10:	0022      	movs	r2, r4
 8008a12:	2301      	movs	r3, #1
 8008a14:	9901      	ldr	r1, [sp, #4]
 8008a16:	9800      	ldr	r0, [sp, #0]
 8008a18:	9e08      	ldr	r6, [sp, #32]
 8008a1a:	321a      	adds	r2, #26
 8008a1c:	47b0      	blx	r6
 8008a1e:	1c43      	adds	r3, r0, #1
 8008a20:	d0e6      	beq.n	80089f0 <_printf_common+0xa8>
 8008a22:	3701      	adds	r7, #1
 8008a24:	e7d1      	b.n	80089ca <_printf_common+0x82>
	...

08008a28 <_printf_i>:
 8008a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a2a:	b08b      	sub	sp, #44	; 0x2c
 8008a2c:	9206      	str	r2, [sp, #24]
 8008a2e:	000a      	movs	r2, r1
 8008a30:	3243      	adds	r2, #67	; 0x43
 8008a32:	9307      	str	r3, [sp, #28]
 8008a34:	9005      	str	r0, [sp, #20]
 8008a36:	9204      	str	r2, [sp, #16]
 8008a38:	7e0a      	ldrb	r2, [r1, #24]
 8008a3a:	000c      	movs	r4, r1
 8008a3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a3e:	2a78      	cmp	r2, #120	; 0x78
 8008a40:	d806      	bhi.n	8008a50 <_printf_i+0x28>
 8008a42:	2a62      	cmp	r2, #98	; 0x62
 8008a44:	d808      	bhi.n	8008a58 <_printf_i+0x30>
 8008a46:	2a00      	cmp	r2, #0
 8008a48:	d100      	bne.n	8008a4c <_printf_i+0x24>
 8008a4a:	e0c0      	b.n	8008bce <_printf_i+0x1a6>
 8008a4c:	2a58      	cmp	r2, #88	; 0x58
 8008a4e:	d052      	beq.n	8008af6 <_printf_i+0xce>
 8008a50:	0026      	movs	r6, r4
 8008a52:	3642      	adds	r6, #66	; 0x42
 8008a54:	7032      	strb	r2, [r6, #0]
 8008a56:	e022      	b.n	8008a9e <_printf_i+0x76>
 8008a58:	0010      	movs	r0, r2
 8008a5a:	3863      	subs	r0, #99	; 0x63
 8008a5c:	2815      	cmp	r0, #21
 8008a5e:	d8f7      	bhi.n	8008a50 <_printf_i+0x28>
 8008a60:	f7f7 fb5a 	bl	8000118 <__gnu_thumb1_case_shi>
 8008a64:	001f0016 	.word	0x001f0016
 8008a68:	fff6fff6 	.word	0xfff6fff6
 8008a6c:	fff6fff6 	.word	0xfff6fff6
 8008a70:	fff6001f 	.word	0xfff6001f
 8008a74:	fff6fff6 	.word	0xfff6fff6
 8008a78:	00a8fff6 	.word	0x00a8fff6
 8008a7c:	009a0036 	.word	0x009a0036
 8008a80:	fff6fff6 	.word	0xfff6fff6
 8008a84:	fff600b9 	.word	0xfff600b9
 8008a88:	fff60036 	.word	0xfff60036
 8008a8c:	009efff6 	.word	0x009efff6
 8008a90:	0026      	movs	r6, r4
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	3642      	adds	r6, #66	; 0x42
 8008a96:	1d11      	adds	r1, r2, #4
 8008a98:	6019      	str	r1, [r3, #0]
 8008a9a:	6813      	ldr	r3, [r2, #0]
 8008a9c:	7033      	strb	r3, [r6, #0]
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e0a7      	b.n	8008bf2 <_printf_i+0x1ca>
 8008aa2:	6808      	ldr	r0, [r1, #0]
 8008aa4:	6819      	ldr	r1, [r3, #0]
 8008aa6:	1d0a      	adds	r2, r1, #4
 8008aa8:	0605      	lsls	r5, r0, #24
 8008aaa:	d50b      	bpl.n	8008ac4 <_printf_i+0x9c>
 8008aac:	680d      	ldr	r5, [r1, #0]
 8008aae:	601a      	str	r2, [r3, #0]
 8008ab0:	2d00      	cmp	r5, #0
 8008ab2:	da03      	bge.n	8008abc <_printf_i+0x94>
 8008ab4:	232d      	movs	r3, #45	; 0x2d
 8008ab6:	9a04      	ldr	r2, [sp, #16]
 8008ab8:	426d      	negs	r5, r5
 8008aba:	7013      	strb	r3, [r2, #0]
 8008abc:	4b61      	ldr	r3, [pc, #388]	; (8008c44 <_printf_i+0x21c>)
 8008abe:	270a      	movs	r7, #10
 8008ac0:	9303      	str	r3, [sp, #12]
 8008ac2:	e032      	b.n	8008b2a <_printf_i+0x102>
 8008ac4:	680d      	ldr	r5, [r1, #0]
 8008ac6:	601a      	str	r2, [r3, #0]
 8008ac8:	0641      	lsls	r1, r0, #25
 8008aca:	d5f1      	bpl.n	8008ab0 <_printf_i+0x88>
 8008acc:	b22d      	sxth	r5, r5
 8008ace:	e7ef      	b.n	8008ab0 <_printf_i+0x88>
 8008ad0:	680d      	ldr	r5, [r1, #0]
 8008ad2:	6819      	ldr	r1, [r3, #0]
 8008ad4:	1d08      	adds	r0, r1, #4
 8008ad6:	6018      	str	r0, [r3, #0]
 8008ad8:	062e      	lsls	r6, r5, #24
 8008ada:	d501      	bpl.n	8008ae0 <_printf_i+0xb8>
 8008adc:	680d      	ldr	r5, [r1, #0]
 8008ade:	e003      	b.n	8008ae8 <_printf_i+0xc0>
 8008ae0:	066d      	lsls	r5, r5, #25
 8008ae2:	d5fb      	bpl.n	8008adc <_printf_i+0xb4>
 8008ae4:	680d      	ldr	r5, [r1, #0]
 8008ae6:	b2ad      	uxth	r5, r5
 8008ae8:	4b56      	ldr	r3, [pc, #344]	; (8008c44 <_printf_i+0x21c>)
 8008aea:	270a      	movs	r7, #10
 8008aec:	9303      	str	r3, [sp, #12]
 8008aee:	2a6f      	cmp	r2, #111	; 0x6f
 8008af0:	d117      	bne.n	8008b22 <_printf_i+0xfa>
 8008af2:	2708      	movs	r7, #8
 8008af4:	e015      	b.n	8008b22 <_printf_i+0xfa>
 8008af6:	3145      	adds	r1, #69	; 0x45
 8008af8:	700a      	strb	r2, [r1, #0]
 8008afa:	4a52      	ldr	r2, [pc, #328]	; (8008c44 <_printf_i+0x21c>)
 8008afc:	9203      	str	r2, [sp, #12]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	6821      	ldr	r1, [r4, #0]
 8008b02:	ca20      	ldmia	r2!, {r5}
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	0608      	lsls	r0, r1, #24
 8008b08:	d550      	bpl.n	8008bac <_printf_i+0x184>
 8008b0a:	07cb      	lsls	r3, r1, #31
 8008b0c:	d502      	bpl.n	8008b14 <_printf_i+0xec>
 8008b0e:	2320      	movs	r3, #32
 8008b10:	4319      	orrs	r1, r3
 8008b12:	6021      	str	r1, [r4, #0]
 8008b14:	2710      	movs	r7, #16
 8008b16:	2d00      	cmp	r5, #0
 8008b18:	d103      	bne.n	8008b22 <_printf_i+0xfa>
 8008b1a:	2320      	movs	r3, #32
 8008b1c:	6822      	ldr	r2, [r4, #0]
 8008b1e:	439a      	bics	r2, r3
 8008b20:	6022      	str	r2, [r4, #0]
 8008b22:	0023      	movs	r3, r4
 8008b24:	2200      	movs	r2, #0
 8008b26:	3343      	adds	r3, #67	; 0x43
 8008b28:	701a      	strb	r2, [r3, #0]
 8008b2a:	6863      	ldr	r3, [r4, #4]
 8008b2c:	60a3      	str	r3, [r4, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	db03      	blt.n	8008b3a <_printf_i+0x112>
 8008b32:	2204      	movs	r2, #4
 8008b34:	6821      	ldr	r1, [r4, #0]
 8008b36:	4391      	bics	r1, r2
 8008b38:	6021      	str	r1, [r4, #0]
 8008b3a:	2d00      	cmp	r5, #0
 8008b3c:	d102      	bne.n	8008b44 <_printf_i+0x11c>
 8008b3e:	9e04      	ldr	r6, [sp, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00c      	beq.n	8008b5e <_printf_i+0x136>
 8008b44:	9e04      	ldr	r6, [sp, #16]
 8008b46:	0028      	movs	r0, r5
 8008b48:	0039      	movs	r1, r7
 8008b4a:	f7f7 fb75 	bl	8000238 <__aeabi_uidivmod>
 8008b4e:	9b03      	ldr	r3, [sp, #12]
 8008b50:	3e01      	subs	r6, #1
 8008b52:	5c5b      	ldrb	r3, [r3, r1]
 8008b54:	7033      	strb	r3, [r6, #0]
 8008b56:	002b      	movs	r3, r5
 8008b58:	0005      	movs	r5, r0
 8008b5a:	429f      	cmp	r7, r3
 8008b5c:	d9f3      	bls.n	8008b46 <_printf_i+0x11e>
 8008b5e:	2f08      	cmp	r7, #8
 8008b60:	d109      	bne.n	8008b76 <_printf_i+0x14e>
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	07db      	lsls	r3, r3, #31
 8008b66:	d506      	bpl.n	8008b76 <_printf_i+0x14e>
 8008b68:	6863      	ldr	r3, [r4, #4]
 8008b6a:	6922      	ldr	r2, [r4, #16]
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	dc02      	bgt.n	8008b76 <_printf_i+0x14e>
 8008b70:	2330      	movs	r3, #48	; 0x30
 8008b72:	3e01      	subs	r6, #1
 8008b74:	7033      	strb	r3, [r6, #0]
 8008b76:	9b04      	ldr	r3, [sp, #16]
 8008b78:	1b9b      	subs	r3, r3, r6
 8008b7a:	6123      	str	r3, [r4, #16]
 8008b7c:	9b07      	ldr	r3, [sp, #28]
 8008b7e:	0021      	movs	r1, r4
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	9805      	ldr	r0, [sp, #20]
 8008b84:	9b06      	ldr	r3, [sp, #24]
 8008b86:	aa09      	add	r2, sp, #36	; 0x24
 8008b88:	f7ff fede 	bl	8008948 <_printf_common>
 8008b8c:	1c43      	adds	r3, r0, #1
 8008b8e:	d135      	bne.n	8008bfc <_printf_i+0x1d4>
 8008b90:	2001      	movs	r0, #1
 8008b92:	4240      	negs	r0, r0
 8008b94:	b00b      	add	sp, #44	; 0x2c
 8008b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b98:	2220      	movs	r2, #32
 8008b9a:	6809      	ldr	r1, [r1, #0]
 8008b9c:	430a      	orrs	r2, r1
 8008b9e:	6022      	str	r2, [r4, #0]
 8008ba0:	0022      	movs	r2, r4
 8008ba2:	2178      	movs	r1, #120	; 0x78
 8008ba4:	3245      	adds	r2, #69	; 0x45
 8008ba6:	7011      	strb	r1, [r2, #0]
 8008ba8:	4a27      	ldr	r2, [pc, #156]	; (8008c48 <_printf_i+0x220>)
 8008baa:	e7a7      	b.n	8008afc <_printf_i+0xd4>
 8008bac:	0648      	lsls	r0, r1, #25
 8008bae:	d5ac      	bpl.n	8008b0a <_printf_i+0xe2>
 8008bb0:	b2ad      	uxth	r5, r5
 8008bb2:	e7aa      	b.n	8008b0a <_printf_i+0xe2>
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	680d      	ldr	r5, [r1, #0]
 8008bb8:	1d10      	adds	r0, r2, #4
 8008bba:	6949      	ldr	r1, [r1, #20]
 8008bbc:	6018      	str	r0, [r3, #0]
 8008bbe:	6813      	ldr	r3, [r2, #0]
 8008bc0:	062e      	lsls	r6, r5, #24
 8008bc2:	d501      	bpl.n	8008bc8 <_printf_i+0x1a0>
 8008bc4:	6019      	str	r1, [r3, #0]
 8008bc6:	e002      	b.n	8008bce <_printf_i+0x1a6>
 8008bc8:	066d      	lsls	r5, r5, #25
 8008bca:	d5fb      	bpl.n	8008bc4 <_printf_i+0x19c>
 8008bcc:	8019      	strh	r1, [r3, #0]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	9e04      	ldr	r6, [sp, #16]
 8008bd2:	6123      	str	r3, [r4, #16]
 8008bd4:	e7d2      	b.n	8008b7c <_printf_i+0x154>
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	1d11      	adds	r1, r2, #4
 8008bda:	6019      	str	r1, [r3, #0]
 8008bdc:	6816      	ldr	r6, [r2, #0]
 8008bde:	2100      	movs	r1, #0
 8008be0:	0030      	movs	r0, r6
 8008be2:	6862      	ldr	r2, [r4, #4]
 8008be4:	f000 f832 	bl	8008c4c <memchr>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d001      	beq.n	8008bf0 <_printf_i+0x1c8>
 8008bec:	1b80      	subs	r0, r0, r6
 8008bee:	6060      	str	r0, [r4, #4]
 8008bf0:	6863      	ldr	r3, [r4, #4]
 8008bf2:	6123      	str	r3, [r4, #16]
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	9a04      	ldr	r2, [sp, #16]
 8008bf8:	7013      	strb	r3, [r2, #0]
 8008bfa:	e7bf      	b.n	8008b7c <_printf_i+0x154>
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	0032      	movs	r2, r6
 8008c00:	9906      	ldr	r1, [sp, #24]
 8008c02:	9805      	ldr	r0, [sp, #20]
 8008c04:	9d07      	ldr	r5, [sp, #28]
 8008c06:	47a8      	blx	r5
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	d0c1      	beq.n	8008b90 <_printf_i+0x168>
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	079b      	lsls	r3, r3, #30
 8008c10:	d415      	bmi.n	8008c3e <_printf_i+0x216>
 8008c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c14:	68e0      	ldr	r0, [r4, #12]
 8008c16:	4298      	cmp	r0, r3
 8008c18:	dabc      	bge.n	8008b94 <_printf_i+0x16c>
 8008c1a:	0018      	movs	r0, r3
 8008c1c:	e7ba      	b.n	8008b94 <_printf_i+0x16c>
 8008c1e:	0022      	movs	r2, r4
 8008c20:	2301      	movs	r3, #1
 8008c22:	9906      	ldr	r1, [sp, #24]
 8008c24:	9805      	ldr	r0, [sp, #20]
 8008c26:	9e07      	ldr	r6, [sp, #28]
 8008c28:	3219      	adds	r2, #25
 8008c2a:	47b0      	blx	r6
 8008c2c:	1c43      	adds	r3, r0, #1
 8008c2e:	d0af      	beq.n	8008b90 <_printf_i+0x168>
 8008c30:	3501      	adds	r5, #1
 8008c32:	68e3      	ldr	r3, [r4, #12]
 8008c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c36:	1a9b      	subs	r3, r3, r2
 8008c38:	42ab      	cmp	r3, r5
 8008c3a:	dcf0      	bgt.n	8008c1e <_printf_i+0x1f6>
 8008c3c:	e7e9      	b.n	8008c12 <_printf_i+0x1ea>
 8008c3e:	2500      	movs	r5, #0
 8008c40:	e7f7      	b.n	8008c32 <_printf_i+0x20a>
 8008c42:	46c0      	nop			; (mov r8, r8)
 8008c44:	08009c59 	.word	0x08009c59
 8008c48:	08009c6a 	.word	0x08009c6a

08008c4c <memchr>:
 8008c4c:	b2c9      	uxtb	r1, r1
 8008c4e:	1882      	adds	r2, r0, r2
 8008c50:	4290      	cmp	r0, r2
 8008c52:	d101      	bne.n	8008c58 <memchr+0xc>
 8008c54:	2000      	movs	r0, #0
 8008c56:	4770      	bx	lr
 8008c58:	7803      	ldrb	r3, [r0, #0]
 8008c5a:	428b      	cmp	r3, r1
 8008c5c:	d0fb      	beq.n	8008c56 <memchr+0xa>
 8008c5e:	3001      	adds	r0, #1
 8008c60:	e7f6      	b.n	8008c50 <memchr+0x4>

08008c62 <memcpy>:
 8008c62:	2300      	movs	r3, #0
 8008c64:	b510      	push	{r4, lr}
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d100      	bne.n	8008c6c <memcpy+0xa>
 8008c6a:	bd10      	pop	{r4, pc}
 8008c6c:	5ccc      	ldrb	r4, [r1, r3]
 8008c6e:	54c4      	strb	r4, [r0, r3]
 8008c70:	3301      	adds	r3, #1
 8008c72:	e7f8      	b.n	8008c66 <memcpy+0x4>

08008c74 <memmove>:
 8008c74:	b510      	push	{r4, lr}
 8008c76:	4288      	cmp	r0, r1
 8008c78:	d902      	bls.n	8008c80 <memmove+0xc>
 8008c7a:	188b      	adds	r3, r1, r2
 8008c7c:	4298      	cmp	r0, r3
 8008c7e:	d303      	bcc.n	8008c88 <memmove+0x14>
 8008c80:	2300      	movs	r3, #0
 8008c82:	e007      	b.n	8008c94 <memmove+0x20>
 8008c84:	5c8b      	ldrb	r3, [r1, r2]
 8008c86:	5483      	strb	r3, [r0, r2]
 8008c88:	3a01      	subs	r2, #1
 8008c8a:	d2fb      	bcs.n	8008c84 <memmove+0x10>
 8008c8c:	bd10      	pop	{r4, pc}
 8008c8e:	5ccc      	ldrb	r4, [r1, r3]
 8008c90:	54c4      	strb	r4, [r0, r3]
 8008c92:	3301      	adds	r3, #1
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d1fa      	bne.n	8008c8e <memmove+0x1a>
 8008c98:	e7f8      	b.n	8008c8c <memmove+0x18>
	...

08008c9c <_free_r>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	0005      	movs	r5, r0
 8008ca0:	2900      	cmp	r1, #0
 8008ca2:	d010      	beq.n	8008cc6 <_free_r+0x2a>
 8008ca4:	1f0c      	subs	r4, r1, #4
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	da00      	bge.n	8008cae <_free_r+0x12>
 8008cac:	18e4      	adds	r4, r4, r3
 8008cae:	0028      	movs	r0, r5
 8008cb0:	f000 f8d4 	bl	8008e5c <__malloc_lock>
 8008cb4:	4a1d      	ldr	r2, [pc, #116]	; (8008d2c <_free_r+0x90>)
 8008cb6:	6813      	ldr	r3, [r2, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d105      	bne.n	8008cc8 <_free_r+0x2c>
 8008cbc:	6063      	str	r3, [r4, #4]
 8008cbe:	6014      	str	r4, [r2, #0]
 8008cc0:	0028      	movs	r0, r5
 8008cc2:	f000 f8d3 	bl	8008e6c <__malloc_unlock>
 8008cc6:	bd70      	pop	{r4, r5, r6, pc}
 8008cc8:	42a3      	cmp	r3, r4
 8008cca:	d908      	bls.n	8008cde <_free_r+0x42>
 8008ccc:	6821      	ldr	r1, [r4, #0]
 8008cce:	1860      	adds	r0, r4, r1
 8008cd0:	4283      	cmp	r3, r0
 8008cd2:	d1f3      	bne.n	8008cbc <_free_r+0x20>
 8008cd4:	6818      	ldr	r0, [r3, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	1841      	adds	r1, r0, r1
 8008cda:	6021      	str	r1, [r4, #0]
 8008cdc:	e7ee      	b.n	8008cbc <_free_r+0x20>
 8008cde:	001a      	movs	r2, r3
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <_free_r+0x4e>
 8008ce6:	42a3      	cmp	r3, r4
 8008ce8:	d9f9      	bls.n	8008cde <_free_r+0x42>
 8008cea:	6811      	ldr	r1, [r2, #0]
 8008cec:	1850      	adds	r0, r2, r1
 8008cee:	42a0      	cmp	r0, r4
 8008cf0:	d10b      	bne.n	8008d0a <_free_r+0x6e>
 8008cf2:	6820      	ldr	r0, [r4, #0]
 8008cf4:	1809      	adds	r1, r1, r0
 8008cf6:	1850      	adds	r0, r2, r1
 8008cf8:	6011      	str	r1, [r2, #0]
 8008cfa:	4283      	cmp	r3, r0
 8008cfc:	d1e0      	bne.n	8008cc0 <_free_r+0x24>
 8008cfe:	6818      	ldr	r0, [r3, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	1841      	adds	r1, r0, r1
 8008d04:	6011      	str	r1, [r2, #0]
 8008d06:	6053      	str	r3, [r2, #4]
 8008d08:	e7da      	b.n	8008cc0 <_free_r+0x24>
 8008d0a:	42a0      	cmp	r0, r4
 8008d0c:	d902      	bls.n	8008d14 <_free_r+0x78>
 8008d0e:	230c      	movs	r3, #12
 8008d10:	602b      	str	r3, [r5, #0]
 8008d12:	e7d5      	b.n	8008cc0 <_free_r+0x24>
 8008d14:	6821      	ldr	r1, [r4, #0]
 8008d16:	1860      	adds	r0, r4, r1
 8008d18:	4283      	cmp	r3, r0
 8008d1a:	d103      	bne.n	8008d24 <_free_r+0x88>
 8008d1c:	6818      	ldr	r0, [r3, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	1841      	adds	r1, r0, r1
 8008d22:	6021      	str	r1, [r4, #0]
 8008d24:	6063      	str	r3, [r4, #4]
 8008d26:	6054      	str	r4, [r2, #4]
 8008d28:	e7ca      	b.n	8008cc0 <_free_r+0x24>
 8008d2a:	46c0      	nop			; (mov r8, r8)
 8008d2c:	2000032c 	.word	0x2000032c

08008d30 <_malloc_r>:
 8008d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d32:	2303      	movs	r3, #3
 8008d34:	1ccd      	adds	r5, r1, #3
 8008d36:	439d      	bics	r5, r3
 8008d38:	3508      	adds	r5, #8
 8008d3a:	0006      	movs	r6, r0
 8008d3c:	2d0c      	cmp	r5, #12
 8008d3e:	d21f      	bcs.n	8008d80 <_malloc_r+0x50>
 8008d40:	250c      	movs	r5, #12
 8008d42:	42a9      	cmp	r1, r5
 8008d44:	d81e      	bhi.n	8008d84 <_malloc_r+0x54>
 8008d46:	0030      	movs	r0, r6
 8008d48:	f000 f888 	bl	8008e5c <__malloc_lock>
 8008d4c:	4925      	ldr	r1, [pc, #148]	; (8008de4 <_malloc_r+0xb4>)
 8008d4e:	680a      	ldr	r2, [r1, #0]
 8008d50:	0014      	movs	r4, r2
 8008d52:	2c00      	cmp	r4, #0
 8008d54:	d11a      	bne.n	8008d8c <_malloc_r+0x5c>
 8008d56:	4f24      	ldr	r7, [pc, #144]	; (8008de8 <_malloc_r+0xb8>)
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d104      	bne.n	8008d68 <_malloc_r+0x38>
 8008d5e:	0021      	movs	r1, r4
 8008d60:	0030      	movs	r0, r6
 8008d62:	f000 f869 	bl	8008e38 <_sbrk_r>
 8008d66:	6038      	str	r0, [r7, #0]
 8008d68:	0029      	movs	r1, r5
 8008d6a:	0030      	movs	r0, r6
 8008d6c:	f000 f864 	bl	8008e38 <_sbrk_r>
 8008d70:	1c43      	adds	r3, r0, #1
 8008d72:	d12b      	bne.n	8008dcc <_malloc_r+0x9c>
 8008d74:	230c      	movs	r3, #12
 8008d76:	0030      	movs	r0, r6
 8008d78:	6033      	str	r3, [r6, #0]
 8008d7a:	f000 f877 	bl	8008e6c <__malloc_unlock>
 8008d7e:	e003      	b.n	8008d88 <_malloc_r+0x58>
 8008d80:	2d00      	cmp	r5, #0
 8008d82:	dade      	bge.n	8008d42 <_malloc_r+0x12>
 8008d84:	230c      	movs	r3, #12
 8008d86:	6033      	str	r3, [r6, #0]
 8008d88:	2000      	movs	r0, #0
 8008d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	1b5b      	subs	r3, r3, r5
 8008d90:	d419      	bmi.n	8008dc6 <_malloc_r+0x96>
 8008d92:	2b0b      	cmp	r3, #11
 8008d94:	d903      	bls.n	8008d9e <_malloc_r+0x6e>
 8008d96:	6023      	str	r3, [r4, #0]
 8008d98:	18e4      	adds	r4, r4, r3
 8008d9a:	6025      	str	r5, [r4, #0]
 8008d9c:	e003      	b.n	8008da6 <_malloc_r+0x76>
 8008d9e:	6863      	ldr	r3, [r4, #4]
 8008da0:	42a2      	cmp	r2, r4
 8008da2:	d10e      	bne.n	8008dc2 <_malloc_r+0x92>
 8008da4:	600b      	str	r3, [r1, #0]
 8008da6:	0030      	movs	r0, r6
 8008da8:	f000 f860 	bl	8008e6c <__malloc_unlock>
 8008dac:	0020      	movs	r0, r4
 8008dae:	2207      	movs	r2, #7
 8008db0:	300b      	adds	r0, #11
 8008db2:	1d23      	adds	r3, r4, #4
 8008db4:	4390      	bics	r0, r2
 8008db6:	1ac2      	subs	r2, r0, r3
 8008db8:	4298      	cmp	r0, r3
 8008dba:	d0e6      	beq.n	8008d8a <_malloc_r+0x5a>
 8008dbc:	1a1b      	subs	r3, r3, r0
 8008dbe:	50a3      	str	r3, [r4, r2]
 8008dc0:	e7e3      	b.n	8008d8a <_malloc_r+0x5a>
 8008dc2:	6053      	str	r3, [r2, #4]
 8008dc4:	e7ef      	b.n	8008da6 <_malloc_r+0x76>
 8008dc6:	0022      	movs	r2, r4
 8008dc8:	6864      	ldr	r4, [r4, #4]
 8008dca:	e7c2      	b.n	8008d52 <_malloc_r+0x22>
 8008dcc:	2303      	movs	r3, #3
 8008dce:	1cc4      	adds	r4, r0, #3
 8008dd0:	439c      	bics	r4, r3
 8008dd2:	42a0      	cmp	r0, r4
 8008dd4:	d0e1      	beq.n	8008d9a <_malloc_r+0x6a>
 8008dd6:	1a21      	subs	r1, r4, r0
 8008dd8:	0030      	movs	r0, r6
 8008dda:	f000 f82d 	bl	8008e38 <_sbrk_r>
 8008dde:	1c43      	adds	r3, r0, #1
 8008de0:	d1db      	bne.n	8008d9a <_malloc_r+0x6a>
 8008de2:	e7c7      	b.n	8008d74 <_malloc_r+0x44>
 8008de4:	2000032c 	.word	0x2000032c
 8008de8:	20000330 	.word	0x20000330

08008dec <_realloc_r>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	0007      	movs	r7, r0
 8008df0:	000d      	movs	r5, r1
 8008df2:	0016      	movs	r6, r2
 8008df4:	2900      	cmp	r1, #0
 8008df6:	d105      	bne.n	8008e04 <_realloc_r+0x18>
 8008df8:	0011      	movs	r1, r2
 8008dfa:	f7ff ff99 	bl	8008d30 <_malloc_r>
 8008dfe:	0004      	movs	r4, r0
 8008e00:	0020      	movs	r0, r4
 8008e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e04:	2a00      	cmp	r2, #0
 8008e06:	d103      	bne.n	8008e10 <_realloc_r+0x24>
 8008e08:	f7ff ff48 	bl	8008c9c <_free_r>
 8008e0c:	0034      	movs	r4, r6
 8008e0e:	e7f7      	b.n	8008e00 <_realloc_r+0x14>
 8008e10:	f000 f834 	bl	8008e7c <_malloc_usable_size_r>
 8008e14:	002c      	movs	r4, r5
 8008e16:	42b0      	cmp	r0, r6
 8008e18:	d2f2      	bcs.n	8008e00 <_realloc_r+0x14>
 8008e1a:	0031      	movs	r1, r6
 8008e1c:	0038      	movs	r0, r7
 8008e1e:	f7ff ff87 	bl	8008d30 <_malloc_r>
 8008e22:	1e04      	subs	r4, r0, #0
 8008e24:	d0ec      	beq.n	8008e00 <_realloc_r+0x14>
 8008e26:	0029      	movs	r1, r5
 8008e28:	0032      	movs	r2, r6
 8008e2a:	f7ff ff1a 	bl	8008c62 <memcpy>
 8008e2e:	0029      	movs	r1, r5
 8008e30:	0038      	movs	r0, r7
 8008e32:	f7ff ff33 	bl	8008c9c <_free_r>
 8008e36:	e7e3      	b.n	8008e00 <_realloc_r+0x14>

08008e38 <_sbrk_r>:
 8008e38:	2300      	movs	r3, #0
 8008e3a:	b570      	push	{r4, r5, r6, lr}
 8008e3c:	4d06      	ldr	r5, [pc, #24]	; (8008e58 <_sbrk_r+0x20>)
 8008e3e:	0004      	movs	r4, r0
 8008e40:	0008      	movs	r0, r1
 8008e42:	602b      	str	r3, [r5, #0]
 8008e44:	f7f7 fd50 	bl	80008e8 <_sbrk>
 8008e48:	1c43      	adds	r3, r0, #1
 8008e4a:	d103      	bne.n	8008e54 <_sbrk_r+0x1c>
 8008e4c:	682b      	ldr	r3, [r5, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d000      	beq.n	8008e54 <_sbrk_r+0x1c>
 8008e52:	6023      	str	r3, [r4, #0]
 8008e54:	bd70      	pop	{r4, r5, r6, pc}
 8008e56:	46c0      	nop			; (mov r8, r8)
 8008e58:	20000d04 	.word	0x20000d04

08008e5c <__malloc_lock>:
 8008e5c:	b510      	push	{r4, lr}
 8008e5e:	4802      	ldr	r0, [pc, #8]	; (8008e68 <__malloc_lock+0xc>)
 8008e60:	f000 f814 	bl	8008e8c <__retarget_lock_acquire_recursive>
 8008e64:	bd10      	pop	{r4, pc}
 8008e66:	46c0      	nop			; (mov r8, r8)
 8008e68:	20000d0c 	.word	0x20000d0c

08008e6c <__malloc_unlock>:
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	4802      	ldr	r0, [pc, #8]	; (8008e78 <__malloc_unlock+0xc>)
 8008e70:	f000 f80d 	bl	8008e8e <__retarget_lock_release_recursive>
 8008e74:	bd10      	pop	{r4, pc}
 8008e76:	46c0      	nop			; (mov r8, r8)
 8008e78:	20000d0c 	.word	0x20000d0c

08008e7c <_malloc_usable_size_r>:
 8008e7c:	1f0b      	subs	r3, r1, #4
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	1f18      	subs	r0, r3, #4
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	da01      	bge.n	8008e8a <_malloc_usable_size_r+0xe>
 8008e86:	580b      	ldr	r3, [r1, r0]
 8008e88:	18c0      	adds	r0, r0, r3
 8008e8a:	4770      	bx	lr

08008e8c <__retarget_lock_acquire_recursive>:
 8008e8c:	4770      	bx	lr

08008e8e <__retarget_lock_release_recursive>:
 8008e8e:	4770      	bx	lr

08008e90 <_init>:
 8008e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e92:	46c0      	nop			; (mov r8, r8)
 8008e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e96:	bc08      	pop	{r3}
 8008e98:	469e      	mov	lr, r3
 8008e9a:	4770      	bx	lr

08008e9c <_fini>:
 8008e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9e:	46c0      	nop			; (mov r8, r8)
 8008ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ea2:	bc08      	pop	{r3}
 8008ea4:	469e      	mov	lr, r3
 8008ea6:	4770      	bx	lr
