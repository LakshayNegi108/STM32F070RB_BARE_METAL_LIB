
STM_ESP_UART_COMM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abd4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e4  0800ac98  0800ac98  0001ac98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b57c  0800b57c  0002021c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b57c  0800b57c  0002021c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b57c  0800b57c  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b57c  0800b57c  0001b57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b580  0800b580  0001b580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800b584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  2000021c  0800b7a0  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  0800b7a0  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010288  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000262f  00000000  00000000  000304cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  00032b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  000335c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012941  00000000  00000000  00033fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d825  00000000  00000000  000468e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006527b  00000000  00000000  0005410e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b9389  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000376c  00000000  00000000  000b93dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000021c 	.word	0x2000021c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ac7c 	.word	0x0800ac7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000220 	.word	0x20000220
 8000104:	0800ac7c 	.word	0x0800ac7c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff33 	bl	80012a8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fe7d 	bl	800114c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff25 	bl	80012a8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff1b 	bl	80012a8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fe9f 	bl	80011c4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fe95 	bl	80011c4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	46d6      	mov	lr, sl
 80004ae:	4646      	mov	r6, r8
 80004b0:	000d      	movs	r5, r1
 80004b2:	0001      	movs	r1, r0
 80004b4:	0018      	movs	r0, r3
 80004b6:	b5c0      	push	{r6, r7, lr}
 80004b8:	0017      	movs	r7, r2
 80004ba:	032b      	lsls	r3, r5, #12
 80004bc:	0a5a      	lsrs	r2, r3, #9
 80004be:	0f4b      	lsrs	r3, r1, #29
 80004c0:	4313      	orrs	r3, r2
 80004c2:	00ca      	lsls	r2, r1, #3
 80004c4:	4691      	mov	r9, r2
 80004c6:	0302      	lsls	r2, r0, #12
 80004c8:	006e      	lsls	r6, r5, #1
 80004ca:	0041      	lsls	r1, r0, #1
 80004cc:	0a52      	lsrs	r2, r2, #9
 80004ce:	0fec      	lsrs	r4, r5, #31
 80004d0:	0f7d      	lsrs	r5, r7, #29
 80004d2:	4315      	orrs	r5, r2
 80004d4:	0d76      	lsrs	r6, r6, #21
 80004d6:	0d49      	lsrs	r1, r1, #21
 80004d8:	0fc0      	lsrs	r0, r0, #31
 80004da:	4682      	mov	sl, r0
 80004dc:	46ac      	mov	ip, r5
 80004de:	00ff      	lsls	r7, r7, #3
 80004e0:	1a72      	subs	r2, r6, r1
 80004e2:	4284      	cmp	r4, r0
 80004e4:	d100      	bne.n	80004e8 <__aeabi_dadd+0x40>
 80004e6:	e098      	b.n	800061a <__aeabi_dadd+0x172>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	dc00      	bgt.n	80004ee <__aeabi_dadd+0x46>
 80004ec:	e081      	b.n	80005f2 <__aeabi_dadd+0x14a>
 80004ee:	2900      	cmp	r1, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_dadd+0x4c>
 80004f2:	e0b6      	b.n	8000662 <__aeabi_dadd+0x1ba>
 80004f4:	49c9      	ldr	r1, [pc, #804]	; (800081c <__aeabi_dadd+0x374>)
 80004f6:	428e      	cmp	r6, r1
 80004f8:	d100      	bne.n	80004fc <__aeabi_dadd+0x54>
 80004fa:	e172      	b.n	80007e2 <__aeabi_dadd+0x33a>
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	0028      	movs	r0, r5
 8000500:	0409      	lsls	r1, r1, #16
 8000502:	4308      	orrs	r0, r1
 8000504:	4684      	mov	ip, r0
 8000506:	2a38      	cmp	r2, #56	; 0x38
 8000508:	dd00      	ble.n	800050c <__aeabi_dadd+0x64>
 800050a:	e15e      	b.n	80007ca <__aeabi_dadd+0x322>
 800050c:	2a1f      	cmp	r2, #31
 800050e:	dd00      	ble.n	8000512 <__aeabi_dadd+0x6a>
 8000510:	e1ee      	b.n	80008f0 <__aeabi_dadd+0x448>
 8000512:	2020      	movs	r0, #32
 8000514:	0039      	movs	r1, r7
 8000516:	4665      	mov	r5, ip
 8000518:	1a80      	subs	r0, r0, r2
 800051a:	4087      	lsls	r7, r0
 800051c:	40d1      	lsrs	r1, r2
 800051e:	4085      	lsls	r5, r0
 8000520:	430d      	orrs	r5, r1
 8000522:	0039      	movs	r1, r7
 8000524:	1e4f      	subs	r7, r1, #1
 8000526:	41b9      	sbcs	r1, r7
 8000528:	4667      	mov	r7, ip
 800052a:	40d7      	lsrs	r7, r2
 800052c:	4329      	orrs	r1, r5
 800052e:	1bdb      	subs	r3, r3, r7
 8000530:	464a      	mov	r2, r9
 8000532:	1a55      	subs	r5, r2, r1
 8000534:	45a9      	cmp	r9, r5
 8000536:	4189      	sbcs	r1, r1
 8000538:	4249      	negs	r1, r1
 800053a:	1a5b      	subs	r3, r3, r1
 800053c:	4698      	mov	r8, r3
 800053e:	4643      	mov	r3, r8
 8000540:	021b      	lsls	r3, r3, #8
 8000542:	d400      	bmi.n	8000546 <__aeabi_dadd+0x9e>
 8000544:	e0cc      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000546:	4643      	mov	r3, r8
 8000548:	025b      	lsls	r3, r3, #9
 800054a:	0a5b      	lsrs	r3, r3, #9
 800054c:	4698      	mov	r8, r3
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_dadd+0xae>
 8000554:	e12c      	b.n	80007b0 <__aeabi_dadd+0x308>
 8000556:	4640      	mov	r0, r8
 8000558:	f001 fdbe 	bl	80020d8 <__clzsi2>
 800055c:	0001      	movs	r1, r0
 800055e:	3908      	subs	r1, #8
 8000560:	2220      	movs	r2, #32
 8000562:	0028      	movs	r0, r5
 8000564:	4643      	mov	r3, r8
 8000566:	1a52      	subs	r2, r2, r1
 8000568:	408b      	lsls	r3, r1
 800056a:	40d0      	lsrs	r0, r2
 800056c:	408d      	lsls	r5, r1
 800056e:	4303      	orrs	r3, r0
 8000570:	428e      	cmp	r6, r1
 8000572:	dd00      	ble.n	8000576 <__aeabi_dadd+0xce>
 8000574:	e117      	b.n	80007a6 <__aeabi_dadd+0x2fe>
 8000576:	1b8e      	subs	r6, r1, r6
 8000578:	1c72      	adds	r2, r6, #1
 800057a:	2a1f      	cmp	r2, #31
 800057c:	dd00      	ble.n	8000580 <__aeabi_dadd+0xd8>
 800057e:	e1a7      	b.n	80008d0 <__aeabi_dadd+0x428>
 8000580:	2120      	movs	r1, #32
 8000582:	0018      	movs	r0, r3
 8000584:	002e      	movs	r6, r5
 8000586:	1a89      	subs	r1, r1, r2
 8000588:	408d      	lsls	r5, r1
 800058a:	4088      	lsls	r0, r1
 800058c:	40d6      	lsrs	r6, r2
 800058e:	40d3      	lsrs	r3, r2
 8000590:	1e69      	subs	r1, r5, #1
 8000592:	418d      	sbcs	r5, r1
 8000594:	4330      	orrs	r0, r6
 8000596:	4698      	mov	r8, r3
 8000598:	2600      	movs	r6, #0
 800059a:	4305      	orrs	r5, r0
 800059c:	076b      	lsls	r3, r5, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	402b      	ands	r3, r5
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d2b      	adds	r3, r5, #4
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	41ad      	sbcs	r5, r5
 80005ae:	426d      	negs	r5, r5
 80005b0:	44a8      	add	r8, r5
 80005b2:	001d      	movs	r5, r3
 80005b4:	4643      	mov	r3, r8
 80005b6:	021b      	lsls	r3, r3, #8
 80005b8:	d400      	bmi.n	80005bc <__aeabi_dadd+0x114>
 80005ba:	e094      	b.n	80006e6 <__aeabi_dadd+0x23e>
 80005bc:	4b97      	ldr	r3, [pc, #604]	; (800081c <__aeabi_dadd+0x374>)
 80005be:	1c72      	adds	r2, r6, #1
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x11e>
 80005c4:	e09d      	b.n	8000702 <__aeabi_dadd+0x25a>
 80005c6:	4641      	mov	r1, r8
 80005c8:	4b95      	ldr	r3, [pc, #596]	; (8000820 <__aeabi_dadd+0x378>)
 80005ca:	08ed      	lsrs	r5, r5, #3
 80005cc:	4019      	ands	r1, r3
 80005ce:	000b      	movs	r3, r1
 80005d0:	0552      	lsls	r2, r2, #21
 80005d2:	0749      	lsls	r1, r1, #29
 80005d4:	025b      	lsls	r3, r3, #9
 80005d6:	4329      	orrs	r1, r5
 80005d8:	0b1b      	lsrs	r3, r3, #12
 80005da:	0d52      	lsrs	r2, r2, #21
 80005dc:	0512      	lsls	r2, r2, #20
 80005de:	4313      	orrs	r3, r2
 80005e0:	07e4      	lsls	r4, r4, #31
 80005e2:	4323      	orrs	r3, r4
 80005e4:	0008      	movs	r0, r1
 80005e6:	0019      	movs	r1, r3
 80005e8:	bce0      	pop	{r5, r6, r7}
 80005ea:	46ba      	mov	sl, r7
 80005ec:	46b1      	mov	r9, r6
 80005ee:	46a8      	mov	r8, r5
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d043      	beq.n	800067e <__aeabi_dadd+0x1d6>
 80005f6:	1b8a      	subs	r2, r1, r6
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	d000      	beq.n	80005fe <__aeabi_dadd+0x156>
 80005fc:	e12a      	b.n	8000854 <__aeabi_dadd+0x3ac>
 80005fe:	464c      	mov	r4, r9
 8000600:	431c      	orrs	r4, r3
 8000602:	d100      	bne.n	8000606 <__aeabi_dadd+0x15e>
 8000604:	e1d1      	b.n	80009aa <__aeabi_dadd+0x502>
 8000606:	1e54      	subs	r4, r2, #1
 8000608:	2a01      	cmp	r2, #1
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x166>
 800060c:	e21f      	b.n	8000a4e <__aeabi_dadd+0x5a6>
 800060e:	4d83      	ldr	r5, [pc, #524]	; (800081c <__aeabi_dadd+0x374>)
 8000610:	42aa      	cmp	r2, r5
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x16e>
 8000614:	e272      	b.n	8000afc <__aeabi_dadd+0x654>
 8000616:	0022      	movs	r2, r4
 8000618:	e123      	b.n	8000862 <__aeabi_dadd+0x3ba>
 800061a:	2a00      	cmp	r2, #0
 800061c:	dc00      	bgt.n	8000620 <__aeabi_dadd+0x178>
 800061e:	e098      	b.n	8000752 <__aeabi_dadd+0x2aa>
 8000620:	2900      	cmp	r1, #0
 8000622:	d042      	beq.n	80006aa <__aeabi_dadd+0x202>
 8000624:	497d      	ldr	r1, [pc, #500]	; (800081c <__aeabi_dadd+0x374>)
 8000626:	428e      	cmp	r6, r1
 8000628:	d100      	bne.n	800062c <__aeabi_dadd+0x184>
 800062a:	e0da      	b.n	80007e2 <__aeabi_dadd+0x33a>
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	0028      	movs	r0, r5
 8000630:	0409      	lsls	r1, r1, #16
 8000632:	4308      	orrs	r0, r1
 8000634:	4684      	mov	ip, r0
 8000636:	2a38      	cmp	r2, #56	; 0x38
 8000638:	dd00      	ble.n	800063c <__aeabi_dadd+0x194>
 800063a:	e129      	b.n	8000890 <__aeabi_dadd+0x3e8>
 800063c:	2a1f      	cmp	r2, #31
 800063e:	dc00      	bgt.n	8000642 <__aeabi_dadd+0x19a>
 8000640:	e187      	b.n	8000952 <__aeabi_dadd+0x4aa>
 8000642:	0011      	movs	r1, r2
 8000644:	4665      	mov	r5, ip
 8000646:	3920      	subs	r1, #32
 8000648:	40cd      	lsrs	r5, r1
 800064a:	2a20      	cmp	r2, #32
 800064c:	d004      	beq.n	8000658 <__aeabi_dadd+0x1b0>
 800064e:	2040      	movs	r0, #64	; 0x40
 8000650:	4661      	mov	r1, ip
 8000652:	1a82      	subs	r2, r0, r2
 8000654:	4091      	lsls	r1, r2
 8000656:	430f      	orrs	r7, r1
 8000658:	0039      	movs	r1, r7
 800065a:	1e4f      	subs	r7, r1, #1
 800065c:	41b9      	sbcs	r1, r7
 800065e:	430d      	orrs	r5, r1
 8000660:	e11b      	b.n	800089a <__aeabi_dadd+0x3f2>
 8000662:	0029      	movs	r1, r5
 8000664:	4339      	orrs	r1, r7
 8000666:	d100      	bne.n	800066a <__aeabi_dadd+0x1c2>
 8000668:	e0b5      	b.n	80007d6 <__aeabi_dadd+0x32e>
 800066a:	1e51      	subs	r1, r2, #1
 800066c:	2a01      	cmp	r2, #1
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1ca>
 8000670:	e1ab      	b.n	80009ca <__aeabi_dadd+0x522>
 8000672:	486a      	ldr	r0, [pc, #424]	; (800081c <__aeabi_dadd+0x374>)
 8000674:	4282      	cmp	r2, r0
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d2>
 8000678:	e1b2      	b.n	80009e0 <__aeabi_dadd+0x538>
 800067a:	000a      	movs	r2, r1
 800067c:	e743      	b.n	8000506 <__aeabi_dadd+0x5e>
 800067e:	4969      	ldr	r1, [pc, #420]	; (8000824 <__aeabi_dadd+0x37c>)
 8000680:	1c75      	adds	r5, r6, #1
 8000682:	420d      	tst	r5, r1
 8000684:	d000      	beq.n	8000688 <__aeabi_dadd+0x1e0>
 8000686:	e0cf      	b.n	8000828 <__aeabi_dadd+0x380>
 8000688:	2e00      	cmp	r6, #0
 800068a:	d000      	beq.n	800068e <__aeabi_dadd+0x1e6>
 800068c:	e193      	b.n	80009b6 <__aeabi_dadd+0x50e>
 800068e:	4649      	mov	r1, r9
 8000690:	4319      	orrs	r1, r3
 8000692:	d100      	bne.n	8000696 <__aeabi_dadd+0x1ee>
 8000694:	e1d1      	b.n	8000a3a <__aeabi_dadd+0x592>
 8000696:	4661      	mov	r1, ip
 8000698:	4339      	orrs	r1, r7
 800069a:	d000      	beq.n	800069e <__aeabi_dadd+0x1f6>
 800069c:	e1e3      	b.n	8000a66 <__aeabi_dadd+0x5be>
 800069e:	4649      	mov	r1, r9
 80006a0:	0758      	lsls	r0, r3, #29
 80006a2:	08c9      	lsrs	r1, r1, #3
 80006a4:	4301      	orrs	r1, r0
 80006a6:	08db      	lsrs	r3, r3, #3
 80006a8:	e026      	b.n	80006f8 <__aeabi_dadd+0x250>
 80006aa:	0029      	movs	r1, r5
 80006ac:	4339      	orrs	r1, r7
 80006ae:	d100      	bne.n	80006b2 <__aeabi_dadd+0x20a>
 80006b0:	e091      	b.n	80007d6 <__aeabi_dadd+0x32e>
 80006b2:	1e51      	subs	r1, r2, #1
 80006b4:	2a01      	cmp	r2, #1
 80006b6:	d005      	beq.n	80006c4 <__aeabi_dadd+0x21c>
 80006b8:	4858      	ldr	r0, [pc, #352]	; (800081c <__aeabi_dadd+0x374>)
 80006ba:	4282      	cmp	r2, r0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x218>
 80006be:	e18f      	b.n	80009e0 <__aeabi_dadd+0x538>
 80006c0:	000a      	movs	r2, r1
 80006c2:	e7b8      	b.n	8000636 <__aeabi_dadd+0x18e>
 80006c4:	003d      	movs	r5, r7
 80006c6:	444d      	add	r5, r9
 80006c8:	454d      	cmp	r5, r9
 80006ca:	4189      	sbcs	r1, r1
 80006cc:	4463      	add	r3, ip
 80006ce:	4698      	mov	r8, r3
 80006d0:	4249      	negs	r1, r1
 80006d2:	4488      	add	r8, r1
 80006d4:	4643      	mov	r3, r8
 80006d6:	2602      	movs	r6, #2
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	d500      	bpl.n	80006de <__aeabi_dadd+0x236>
 80006dc:	e0eb      	b.n	80008b6 <__aeabi_dadd+0x40e>
 80006de:	3e01      	subs	r6, #1
 80006e0:	076b      	lsls	r3, r5, #29
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x23e>
 80006e4:	e75c      	b.n	80005a0 <__aeabi_dadd+0xf8>
 80006e6:	4643      	mov	r3, r8
 80006e8:	08e9      	lsrs	r1, r5, #3
 80006ea:	075a      	lsls	r2, r3, #29
 80006ec:	4311      	orrs	r1, r2
 80006ee:	0032      	movs	r2, r6
 80006f0:	08db      	lsrs	r3, r3, #3
 80006f2:	484a      	ldr	r0, [pc, #296]	; (800081c <__aeabi_dadd+0x374>)
 80006f4:	4282      	cmp	r2, r0
 80006f6:	d021      	beq.n	800073c <__aeabi_dadd+0x294>
 80006f8:	031b      	lsls	r3, r3, #12
 80006fa:	0552      	lsls	r2, r2, #21
 80006fc:	0b1b      	lsrs	r3, r3, #12
 80006fe:	0d52      	lsrs	r2, r2, #21
 8000700:	e76c      	b.n	80005dc <__aeabi_dadd+0x134>
 8000702:	2300      	movs	r3, #0
 8000704:	2100      	movs	r1, #0
 8000706:	e769      	b.n	80005dc <__aeabi_dadd+0x134>
 8000708:	002a      	movs	r2, r5
 800070a:	433a      	orrs	r2, r7
 800070c:	d069      	beq.n	80007e2 <__aeabi_dadd+0x33a>
 800070e:	464a      	mov	r2, r9
 8000710:	0758      	lsls	r0, r3, #29
 8000712:	08d1      	lsrs	r1, r2, #3
 8000714:	08da      	lsrs	r2, r3, #3
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	031b      	lsls	r3, r3, #12
 800071a:	4308      	orrs	r0, r1
 800071c:	421a      	tst	r2, r3
 800071e:	d007      	beq.n	8000730 <__aeabi_dadd+0x288>
 8000720:	0029      	movs	r1, r5
 8000722:	08ed      	lsrs	r5, r5, #3
 8000724:	421d      	tst	r5, r3
 8000726:	d103      	bne.n	8000730 <__aeabi_dadd+0x288>
 8000728:	002a      	movs	r2, r5
 800072a:	08ff      	lsrs	r7, r7, #3
 800072c:	0748      	lsls	r0, r1, #29
 800072e:	4338      	orrs	r0, r7
 8000730:	0f43      	lsrs	r3, r0, #29
 8000732:	00c1      	lsls	r1, r0, #3
 8000734:	075b      	lsls	r3, r3, #29
 8000736:	08c9      	lsrs	r1, r1, #3
 8000738:	4319      	orrs	r1, r3
 800073a:	0013      	movs	r3, r2
 800073c:	000a      	movs	r2, r1
 800073e:	431a      	orrs	r2, r3
 8000740:	d100      	bne.n	8000744 <__aeabi_dadd+0x29c>
 8000742:	e213      	b.n	8000b6c <__aeabi_dadd+0x6c4>
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0312      	lsls	r2, r2, #12
 8000748:	4313      	orrs	r3, r2
 800074a:	031b      	lsls	r3, r3, #12
 800074c:	4a33      	ldr	r2, [pc, #204]	; (800081c <__aeabi_dadd+0x374>)
 800074e:	0b1b      	lsrs	r3, r3, #12
 8000750:	e744      	b.n	80005dc <__aeabi_dadd+0x134>
 8000752:	2a00      	cmp	r2, #0
 8000754:	d04b      	beq.n	80007ee <__aeabi_dadd+0x346>
 8000756:	1b8a      	subs	r2, r1, r6
 8000758:	2e00      	cmp	r6, #0
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x2b6>
 800075c:	e0e7      	b.n	800092e <__aeabi_dadd+0x486>
 800075e:	482f      	ldr	r0, [pc, #188]	; (800081c <__aeabi_dadd+0x374>)
 8000760:	4281      	cmp	r1, r0
 8000762:	d100      	bne.n	8000766 <__aeabi_dadd+0x2be>
 8000764:	e195      	b.n	8000a92 <__aeabi_dadd+0x5ea>
 8000766:	2080      	movs	r0, #128	; 0x80
 8000768:	0400      	lsls	r0, r0, #16
 800076a:	4303      	orrs	r3, r0
 800076c:	2a38      	cmp	r2, #56	; 0x38
 800076e:	dd00      	ble.n	8000772 <__aeabi_dadd+0x2ca>
 8000770:	e143      	b.n	80009fa <__aeabi_dadd+0x552>
 8000772:	2a1f      	cmp	r2, #31
 8000774:	dd00      	ble.n	8000778 <__aeabi_dadd+0x2d0>
 8000776:	e1db      	b.n	8000b30 <__aeabi_dadd+0x688>
 8000778:	2020      	movs	r0, #32
 800077a:	001d      	movs	r5, r3
 800077c:	464e      	mov	r6, r9
 800077e:	1a80      	subs	r0, r0, r2
 8000780:	4085      	lsls	r5, r0
 8000782:	40d6      	lsrs	r6, r2
 8000784:	4335      	orrs	r5, r6
 8000786:	464e      	mov	r6, r9
 8000788:	4086      	lsls	r6, r0
 800078a:	0030      	movs	r0, r6
 800078c:	40d3      	lsrs	r3, r2
 800078e:	1e46      	subs	r6, r0, #1
 8000790:	41b0      	sbcs	r0, r6
 8000792:	449c      	add	ip, r3
 8000794:	4305      	orrs	r5, r0
 8000796:	19ed      	adds	r5, r5, r7
 8000798:	42bd      	cmp	r5, r7
 800079a:	419b      	sbcs	r3, r3
 800079c:	425b      	negs	r3, r3
 800079e:	4463      	add	r3, ip
 80007a0:	4698      	mov	r8, r3
 80007a2:	000e      	movs	r6, r1
 80007a4:	e07f      	b.n	80008a6 <__aeabi_dadd+0x3fe>
 80007a6:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <__aeabi_dadd+0x378>)
 80007a8:	1a76      	subs	r6, r6, r1
 80007aa:	4013      	ands	r3, r2
 80007ac:	4698      	mov	r8, r3
 80007ae:	e6f5      	b.n	800059c <__aeabi_dadd+0xf4>
 80007b0:	0028      	movs	r0, r5
 80007b2:	f001 fc91 	bl	80020d8 <__clzsi2>
 80007b6:	0001      	movs	r1, r0
 80007b8:	3118      	adds	r1, #24
 80007ba:	291f      	cmp	r1, #31
 80007bc:	dc00      	bgt.n	80007c0 <__aeabi_dadd+0x318>
 80007be:	e6cf      	b.n	8000560 <__aeabi_dadd+0xb8>
 80007c0:	002b      	movs	r3, r5
 80007c2:	3808      	subs	r0, #8
 80007c4:	4083      	lsls	r3, r0
 80007c6:	2500      	movs	r5, #0
 80007c8:	e6d2      	b.n	8000570 <__aeabi_dadd+0xc8>
 80007ca:	4662      	mov	r2, ip
 80007cc:	433a      	orrs	r2, r7
 80007ce:	0011      	movs	r1, r2
 80007d0:	1e4f      	subs	r7, r1, #1
 80007d2:	41b9      	sbcs	r1, r7
 80007d4:	e6ac      	b.n	8000530 <__aeabi_dadd+0x88>
 80007d6:	4649      	mov	r1, r9
 80007d8:	0758      	lsls	r0, r3, #29
 80007da:	08c9      	lsrs	r1, r1, #3
 80007dc:	4301      	orrs	r1, r0
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	e787      	b.n	80006f2 <__aeabi_dadd+0x24a>
 80007e2:	4649      	mov	r1, r9
 80007e4:	075a      	lsls	r2, r3, #29
 80007e6:	08c9      	lsrs	r1, r1, #3
 80007e8:	4311      	orrs	r1, r2
 80007ea:	08db      	lsrs	r3, r3, #3
 80007ec:	e7a6      	b.n	800073c <__aeabi_dadd+0x294>
 80007ee:	490d      	ldr	r1, [pc, #52]	; (8000824 <__aeabi_dadd+0x37c>)
 80007f0:	1c70      	adds	r0, r6, #1
 80007f2:	4208      	tst	r0, r1
 80007f4:	d000      	beq.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e0bb      	b.n	8000970 <__aeabi_dadd+0x4c8>
 80007f8:	2e00      	cmp	r6, #0
 80007fa:	d000      	beq.n	80007fe <__aeabi_dadd+0x356>
 80007fc:	e114      	b.n	8000a28 <__aeabi_dadd+0x580>
 80007fe:	4649      	mov	r1, r9
 8000800:	4319      	orrs	r1, r3
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x35e>
 8000804:	e175      	b.n	8000af2 <__aeabi_dadd+0x64a>
 8000806:	0029      	movs	r1, r5
 8000808:	4339      	orrs	r1, r7
 800080a:	d000      	beq.n	800080e <__aeabi_dadd+0x366>
 800080c:	e17e      	b.n	8000b0c <__aeabi_dadd+0x664>
 800080e:	4649      	mov	r1, r9
 8000810:	0758      	lsls	r0, r3, #29
 8000812:	08c9      	lsrs	r1, r1, #3
 8000814:	4301      	orrs	r1, r0
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	e76e      	b.n	80006f8 <__aeabi_dadd+0x250>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	000007ff 	.word	0x000007ff
 8000820:	ff7fffff 	.word	0xff7fffff
 8000824:	000007fe 	.word	0x000007fe
 8000828:	4649      	mov	r1, r9
 800082a:	1bcd      	subs	r5, r1, r7
 800082c:	4661      	mov	r1, ip
 800082e:	1a58      	subs	r0, r3, r1
 8000830:	45a9      	cmp	r9, r5
 8000832:	4189      	sbcs	r1, r1
 8000834:	4249      	negs	r1, r1
 8000836:	4688      	mov	r8, r1
 8000838:	0001      	movs	r1, r0
 800083a:	4640      	mov	r0, r8
 800083c:	1a09      	subs	r1, r1, r0
 800083e:	4688      	mov	r8, r1
 8000840:	0209      	lsls	r1, r1, #8
 8000842:	d500      	bpl.n	8000846 <__aeabi_dadd+0x39e>
 8000844:	e0a6      	b.n	8000994 <__aeabi_dadd+0x4ec>
 8000846:	4641      	mov	r1, r8
 8000848:	4329      	orrs	r1, r5
 800084a:	d000      	beq.n	800084e <__aeabi_dadd+0x3a6>
 800084c:	e67f      	b.n	800054e <__aeabi_dadd+0xa6>
 800084e:	2300      	movs	r3, #0
 8000850:	2400      	movs	r4, #0
 8000852:	e751      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000854:	4cc7      	ldr	r4, [pc, #796]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000856:	42a1      	cmp	r1, r4
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x3b4>
 800085a:	e0c7      	b.n	80009ec <__aeabi_dadd+0x544>
 800085c:	2480      	movs	r4, #128	; 0x80
 800085e:	0424      	lsls	r4, r4, #16
 8000860:	4323      	orrs	r3, r4
 8000862:	2a38      	cmp	r2, #56	; 0x38
 8000864:	dc54      	bgt.n	8000910 <__aeabi_dadd+0x468>
 8000866:	2a1f      	cmp	r2, #31
 8000868:	dd00      	ble.n	800086c <__aeabi_dadd+0x3c4>
 800086a:	e0cc      	b.n	8000a06 <__aeabi_dadd+0x55e>
 800086c:	2420      	movs	r4, #32
 800086e:	4648      	mov	r0, r9
 8000870:	1aa4      	subs	r4, r4, r2
 8000872:	001d      	movs	r5, r3
 8000874:	464e      	mov	r6, r9
 8000876:	40a0      	lsls	r0, r4
 8000878:	40d6      	lsrs	r6, r2
 800087a:	40a5      	lsls	r5, r4
 800087c:	0004      	movs	r4, r0
 800087e:	40d3      	lsrs	r3, r2
 8000880:	4662      	mov	r2, ip
 8000882:	4335      	orrs	r5, r6
 8000884:	1e66      	subs	r6, r4, #1
 8000886:	41b4      	sbcs	r4, r6
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	469c      	mov	ip, r3
 800088c:	4325      	orrs	r5, r4
 800088e:	e044      	b.n	800091a <__aeabi_dadd+0x472>
 8000890:	4662      	mov	r2, ip
 8000892:	433a      	orrs	r2, r7
 8000894:	0015      	movs	r5, r2
 8000896:	1e6f      	subs	r7, r5, #1
 8000898:	41bd      	sbcs	r5, r7
 800089a:	444d      	add	r5, r9
 800089c:	454d      	cmp	r5, r9
 800089e:	4189      	sbcs	r1, r1
 80008a0:	4249      	negs	r1, r1
 80008a2:	4688      	mov	r8, r1
 80008a4:	4498      	add	r8, r3
 80008a6:	4643      	mov	r3, r8
 80008a8:	021b      	lsls	r3, r3, #8
 80008aa:	d400      	bmi.n	80008ae <__aeabi_dadd+0x406>
 80008ac:	e718      	b.n	80006e0 <__aeabi_dadd+0x238>
 80008ae:	4bb1      	ldr	r3, [pc, #708]	; (8000b74 <__aeabi_dadd+0x6cc>)
 80008b0:	3601      	adds	r6, #1
 80008b2:	429e      	cmp	r6, r3
 80008b4:	d049      	beq.n	800094a <__aeabi_dadd+0x4a2>
 80008b6:	4642      	mov	r2, r8
 80008b8:	4baf      	ldr	r3, [pc, #700]	; (8000b78 <__aeabi_dadd+0x6d0>)
 80008ba:	2101      	movs	r1, #1
 80008bc:	401a      	ands	r2, r3
 80008be:	0013      	movs	r3, r2
 80008c0:	086a      	lsrs	r2, r5, #1
 80008c2:	400d      	ands	r5, r1
 80008c4:	4315      	orrs	r5, r2
 80008c6:	07d9      	lsls	r1, r3, #31
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	4698      	mov	r8, r3
 80008cc:	430d      	orrs	r5, r1
 80008ce:	e665      	b.n	800059c <__aeabi_dadd+0xf4>
 80008d0:	0018      	movs	r0, r3
 80008d2:	3e1f      	subs	r6, #31
 80008d4:	40f0      	lsrs	r0, r6
 80008d6:	2a20      	cmp	r2, #32
 80008d8:	d003      	beq.n	80008e2 <__aeabi_dadd+0x43a>
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	1a8a      	subs	r2, r1, r2
 80008de:	4093      	lsls	r3, r2
 80008e0:	431d      	orrs	r5, r3
 80008e2:	1e69      	subs	r1, r5, #1
 80008e4:	418d      	sbcs	r5, r1
 80008e6:	2300      	movs	r3, #0
 80008e8:	2600      	movs	r6, #0
 80008ea:	4698      	mov	r8, r3
 80008ec:	4305      	orrs	r5, r0
 80008ee:	e6f7      	b.n	80006e0 <__aeabi_dadd+0x238>
 80008f0:	0011      	movs	r1, r2
 80008f2:	4665      	mov	r5, ip
 80008f4:	3920      	subs	r1, #32
 80008f6:	40cd      	lsrs	r5, r1
 80008f8:	2a20      	cmp	r2, #32
 80008fa:	d004      	beq.n	8000906 <__aeabi_dadd+0x45e>
 80008fc:	2040      	movs	r0, #64	; 0x40
 80008fe:	4661      	mov	r1, ip
 8000900:	1a82      	subs	r2, r0, r2
 8000902:	4091      	lsls	r1, r2
 8000904:	430f      	orrs	r7, r1
 8000906:	0039      	movs	r1, r7
 8000908:	1e4f      	subs	r7, r1, #1
 800090a:	41b9      	sbcs	r1, r7
 800090c:	4329      	orrs	r1, r5
 800090e:	e60f      	b.n	8000530 <__aeabi_dadd+0x88>
 8000910:	464a      	mov	r2, r9
 8000912:	4313      	orrs	r3, r2
 8000914:	001d      	movs	r5, r3
 8000916:	1e6b      	subs	r3, r5, #1
 8000918:	419d      	sbcs	r5, r3
 800091a:	1b7d      	subs	r5, r7, r5
 800091c:	42af      	cmp	r7, r5
 800091e:	419b      	sbcs	r3, r3
 8000920:	4662      	mov	r2, ip
 8000922:	425b      	negs	r3, r3
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	4698      	mov	r8, r3
 8000928:	4654      	mov	r4, sl
 800092a:	000e      	movs	r6, r1
 800092c:	e607      	b.n	800053e <__aeabi_dadd+0x96>
 800092e:	4648      	mov	r0, r9
 8000930:	4318      	orrs	r0, r3
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x48e>
 8000934:	e0b3      	b.n	8000a9e <__aeabi_dadd+0x5f6>
 8000936:	1e50      	subs	r0, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x496>
 800093c:	e10d      	b.n	8000b5a <__aeabi_dadd+0x6b2>
 800093e:	4d8d      	ldr	r5, [pc, #564]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000940:	42aa      	cmp	r2, r5
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x49e>
 8000944:	e0a5      	b.n	8000a92 <__aeabi_dadd+0x5ea>
 8000946:	0002      	movs	r2, r0
 8000948:	e710      	b.n	800076c <__aeabi_dadd+0x2c4>
 800094a:	0032      	movs	r2, r6
 800094c:	2300      	movs	r3, #0
 800094e:	2100      	movs	r1, #0
 8000950:	e644      	b.n	80005dc <__aeabi_dadd+0x134>
 8000952:	2120      	movs	r1, #32
 8000954:	0038      	movs	r0, r7
 8000956:	1a89      	subs	r1, r1, r2
 8000958:	4665      	mov	r5, ip
 800095a:	408f      	lsls	r7, r1
 800095c:	408d      	lsls	r5, r1
 800095e:	40d0      	lsrs	r0, r2
 8000960:	1e79      	subs	r1, r7, #1
 8000962:	418f      	sbcs	r7, r1
 8000964:	4305      	orrs	r5, r0
 8000966:	433d      	orrs	r5, r7
 8000968:	4667      	mov	r7, ip
 800096a:	40d7      	lsrs	r7, r2
 800096c:	19db      	adds	r3, r3, r7
 800096e:	e794      	b.n	800089a <__aeabi_dadd+0x3f2>
 8000970:	4a80      	ldr	r2, [pc, #512]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000972:	4290      	cmp	r0, r2
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x4d0>
 8000976:	e0ec      	b.n	8000b52 <__aeabi_dadd+0x6aa>
 8000978:	0039      	movs	r1, r7
 800097a:	4449      	add	r1, r9
 800097c:	4549      	cmp	r1, r9
 800097e:	4192      	sbcs	r2, r2
 8000980:	4463      	add	r3, ip
 8000982:	4252      	negs	r2, r2
 8000984:	189b      	adds	r3, r3, r2
 8000986:	07dd      	lsls	r5, r3, #31
 8000988:	0849      	lsrs	r1, r1, #1
 800098a:	085b      	lsrs	r3, r3, #1
 800098c:	4698      	mov	r8, r3
 800098e:	0006      	movs	r6, r0
 8000990:	430d      	orrs	r5, r1
 8000992:	e6a5      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000994:	464a      	mov	r2, r9
 8000996:	1abd      	subs	r5, r7, r2
 8000998:	42af      	cmp	r7, r5
 800099a:	4189      	sbcs	r1, r1
 800099c:	4662      	mov	r2, ip
 800099e:	4249      	negs	r1, r1
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	1a5b      	subs	r3, r3, r1
 80009a4:	4698      	mov	r8, r3
 80009a6:	4654      	mov	r4, sl
 80009a8:	e5d1      	b.n	800054e <__aeabi_dadd+0xa6>
 80009aa:	076c      	lsls	r4, r5, #29
 80009ac:	08f9      	lsrs	r1, r7, #3
 80009ae:	4321      	orrs	r1, r4
 80009b0:	08eb      	lsrs	r3, r5, #3
 80009b2:	0004      	movs	r4, r0
 80009b4:	e69d      	b.n	80006f2 <__aeabi_dadd+0x24a>
 80009b6:	464a      	mov	r2, r9
 80009b8:	431a      	orrs	r2, r3
 80009ba:	d175      	bne.n	8000aa8 <__aeabi_dadd+0x600>
 80009bc:	4661      	mov	r1, ip
 80009be:	4339      	orrs	r1, r7
 80009c0:	d114      	bne.n	80009ec <__aeabi_dadd+0x544>
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	2400      	movs	r4, #0
 80009c6:	031b      	lsls	r3, r3, #12
 80009c8:	e6bc      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009ca:	464a      	mov	r2, r9
 80009cc:	1bd5      	subs	r5, r2, r7
 80009ce:	45a9      	cmp	r9, r5
 80009d0:	4189      	sbcs	r1, r1
 80009d2:	4662      	mov	r2, ip
 80009d4:	4249      	negs	r1, r1
 80009d6:	1a9b      	subs	r3, r3, r2
 80009d8:	1a5b      	subs	r3, r3, r1
 80009da:	4698      	mov	r8, r3
 80009dc:	2601      	movs	r6, #1
 80009de:	e5ae      	b.n	800053e <__aeabi_dadd+0x96>
 80009e0:	464a      	mov	r2, r9
 80009e2:	08d1      	lsrs	r1, r2, #3
 80009e4:	075a      	lsls	r2, r3, #29
 80009e6:	4311      	orrs	r1, r2
 80009e8:	08db      	lsrs	r3, r3, #3
 80009ea:	e6a7      	b.n	800073c <__aeabi_dadd+0x294>
 80009ec:	4663      	mov	r3, ip
 80009ee:	08f9      	lsrs	r1, r7, #3
 80009f0:	075a      	lsls	r2, r3, #29
 80009f2:	4654      	mov	r4, sl
 80009f4:	4311      	orrs	r1, r2
 80009f6:	08db      	lsrs	r3, r3, #3
 80009f8:	e6a0      	b.n	800073c <__aeabi_dadd+0x294>
 80009fa:	464a      	mov	r2, r9
 80009fc:	4313      	orrs	r3, r2
 80009fe:	001d      	movs	r5, r3
 8000a00:	1e6b      	subs	r3, r5, #1
 8000a02:	419d      	sbcs	r5, r3
 8000a04:	e6c7      	b.n	8000796 <__aeabi_dadd+0x2ee>
 8000a06:	0014      	movs	r4, r2
 8000a08:	001e      	movs	r6, r3
 8000a0a:	3c20      	subs	r4, #32
 8000a0c:	40e6      	lsrs	r6, r4
 8000a0e:	2a20      	cmp	r2, #32
 8000a10:	d005      	beq.n	8000a1e <__aeabi_dadd+0x576>
 8000a12:	2440      	movs	r4, #64	; 0x40
 8000a14:	1aa2      	subs	r2, r4, r2
 8000a16:	4093      	lsls	r3, r2
 8000a18:	464a      	mov	r2, r9
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	4691      	mov	r9, r2
 8000a1e:	464d      	mov	r5, r9
 8000a20:	1e6b      	subs	r3, r5, #1
 8000a22:	419d      	sbcs	r5, r3
 8000a24:	4335      	orrs	r5, r6
 8000a26:	e778      	b.n	800091a <__aeabi_dadd+0x472>
 8000a28:	464a      	mov	r2, r9
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_dadd+0x588>
 8000a2e:	e66b      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a30:	076b      	lsls	r3, r5, #29
 8000a32:	08f9      	lsrs	r1, r7, #3
 8000a34:	4319      	orrs	r1, r3
 8000a36:	08eb      	lsrs	r3, r5, #3
 8000a38:	e680      	b.n	800073c <__aeabi_dadd+0x294>
 8000a3a:	4661      	mov	r1, ip
 8000a3c:	4339      	orrs	r1, r7
 8000a3e:	d054      	beq.n	8000aea <__aeabi_dadd+0x642>
 8000a40:	4663      	mov	r3, ip
 8000a42:	08f9      	lsrs	r1, r7, #3
 8000a44:	075c      	lsls	r4, r3, #29
 8000a46:	4321      	orrs	r1, r4
 8000a48:	08db      	lsrs	r3, r3, #3
 8000a4a:	0004      	movs	r4, r0
 8000a4c:	e654      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000a4e:	464a      	mov	r2, r9
 8000a50:	1abd      	subs	r5, r7, r2
 8000a52:	42af      	cmp	r7, r5
 8000a54:	4189      	sbcs	r1, r1
 8000a56:	4662      	mov	r2, ip
 8000a58:	4249      	negs	r1, r1
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	1a5b      	subs	r3, r3, r1
 8000a5e:	4698      	mov	r8, r3
 8000a60:	0004      	movs	r4, r0
 8000a62:	2601      	movs	r6, #1
 8000a64:	e56b      	b.n	800053e <__aeabi_dadd+0x96>
 8000a66:	464a      	mov	r2, r9
 8000a68:	1bd5      	subs	r5, r2, r7
 8000a6a:	45a9      	cmp	r9, r5
 8000a6c:	4189      	sbcs	r1, r1
 8000a6e:	4662      	mov	r2, ip
 8000a70:	4249      	negs	r1, r1
 8000a72:	1a9a      	subs	r2, r3, r2
 8000a74:	1a52      	subs	r2, r2, r1
 8000a76:	4690      	mov	r8, r2
 8000a78:	0212      	lsls	r2, r2, #8
 8000a7a:	d532      	bpl.n	8000ae2 <__aeabi_dadd+0x63a>
 8000a7c:	464a      	mov	r2, r9
 8000a7e:	1abd      	subs	r5, r7, r2
 8000a80:	42af      	cmp	r7, r5
 8000a82:	4189      	sbcs	r1, r1
 8000a84:	4662      	mov	r2, ip
 8000a86:	4249      	negs	r1, r1
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	1a5b      	subs	r3, r3, r1
 8000a8c:	4698      	mov	r8, r3
 8000a8e:	0004      	movs	r4, r0
 8000a90:	e584      	b.n	800059c <__aeabi_dadd+0xf4>
 8000a92:	4663      	mov	r3, ip
 8000a94:	08f9      	lsrs	r1, r7, #3
 8000a96:	075a      	lsls	r2, r3, #29
 8000a98:	4311      	orrs	r1, r2
 8000a9a:	08db      	lsrs	r3, r3, #3
 8000a9c:	e64e      	b.n	800073c <__aeabi_dadd+0x294>
 8000a9e:	08f9      	lsrs	r1, r7, #3
 8000aa0:	0768      	lsls	r0, r5, #29
 8000aa2:	4301      	orrs	r1, r0
 8000aa4:	08eb      	lsrs	r3, r5, #3
 8000aa6:	e624      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_dadd+0x608>
 8000aae:	e698      	b.n	80007e2 <__aeabi_dadd+0x33a>
 8000ab0:	464a      	mov	r2, r9
 8000ab2:	08d1      	lsrs	r1, r2, #3
 8000ab4:	075a      	lsls	r2, r3, #29
 8000ab6:	4311      	orrs	r1, r2
 8000ab8:	08da      	lsrs	r2, r3, #3
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	031b      	lsls	r3, r3, #12
 8000abe:	421a      	tst	r2, r3
 8000ac0:	d008      	beq.n	8000ad4 <__aeabi_dadd+0x62c>
 8000ac2:	4660      	mov	r0, ip
 8000ac4:	08c5      	lsrs	r5, r0, #3
 8000ac6:	421d      	tst	r5, r3
 8000ac8:	d104      	bne.n	8000ad4 <__aeabi_dadd+0x62c>
 8000aca:	4654      	mov	r4, sl
 8000acc:	002a      	movs	r2, r5
 8000ace:	08f9      	lsrs	r1, r7, #3
 8000ad0:	0743      	lsls	r3, r0, #29
 8000ad2:	4319      	orrs	r1, r3
 8000ad4:	0f4b      	lsrs	r3, r1, #29
 8000ad6:	00c9      	lsls	r1, r1, #3
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	08c9      	lsrs	r1, r1, #3
 8000adc:	4319      	orrs	r1, r3
 8000ade:	0013      	movs	r3, r2
 8000ae0:	e62c      	b.n	800073c <__aeabi_dadd+0x294>
 8000ae2:	4641      	mov	r1, r8
 8000ae4:	4329      	orrs	r1, r5
 8000ae6:	d000      	beq.n	8000aea <__aeabi_dadd+0x642>
 8000ae8:	e5fa      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000aea:	2300      	movs	r3, #0
 8000aec:	000a      	movs	r2, r1
 8000aee:	2400      	movs	r4, #0
 8000af0:	e602      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000af2:	076b      	lsls	r3, r5, #29
 8000af4:	08f9      	lsrs	r1, r7, #3
 8000af6:	4319      	orrs	r1, r3
 8000af8:	08eb      	lsrs	r3, r5, #3
 8000afa:	e5fd      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000afc:	4663      	mov	r3, ip
 8000afe:	08f9      	lsrs	r1, r7, #3
 8000b00:	075b      	lsls	r3, r3, #29
 8000b02:	4319      	orrs	r1, r3
 8000b04:	4663      	mov	r3, ip
 8000b06:	0004      	movs	r4, r0
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	e617      	b.n	800073c <__aeabi_dadd+0x294>
 8000b0c:	003d      	movs	r5, r7
 8000b0e:	444d      	add	r5, r9
 8000b10:	4463      	add	r3, ip
 8000b12:	454d      	cmp	r5, r9
 8000b14:	4189      	sbcs	r1, r1
 8000b16:	4698      	mov	r8, r3
 8000b18:	4249      	negs	r1, r1
 8000b1a:	4488      	add	r8, r1
 8000b1c:	4643      	mov	r3, r8
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	d400      	bmi.n	8000b24 <__aeabi_dadd+0x67c>
 8000b22:	e5dd      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000b24:	4642      	mov	r2, r8
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <__aeabi_dadd+0x6d0>)
 8000b28:	2601      	movs	r6, #1
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	4690      	mov	r8, r2
 8000b2e:	e5d7      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000b30:	0010      	movs	r0, r2
 8000b32:	001e      	movs	r6, r3
 8000b34:	3820      	subs	r0, #32
 8000b36:	40c6      	lsrs	r6, r0
 8000b38:	2a20      	cmp	r2, #32
 8000b3a:	d005      	beq.n	8000b48 <__aeabi_dadd+0x6a0>
 8000b3c:	2040      	movs	r0, #64	; 0x40
 8000b3e:	1a82      	subs	r2, r0, r2
 8000b40:	4093      	lsls	r3, r2
 8000b42:	464a      	mov	r2, r9
 8000b44:	431a      	orrs	r2, r3
 8000b46:	4691      	mov	r9, r2
 8000b48:	464d      	mov	r5, r9
 8000b4a:	1e6b      	subs	r3, r5, #1
 8000b4c:	419d      	sbcs	r5, r3
 8000b4e:	4335      	orrs	r5, r6
 8000b50:	e621      	b.n	8000796 <__aeabi_dadd+0x2ee>
 8000b52:	0002      	movs	r2, r0
 8000b54:	2300      	movs	r3, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	e540      	b.n	80005dc <__aeabi_dadd+0x134>
 8000b5a:	464a      	mov	r2, r9
 8000b5c:	19d5      	adds	r5, r2, r7
 8000b5e:	42bd      	cmp	r5, r7
 8000b60:	4189      	sbcs	r1, r1
 8000b62:	4463      	add	r3, ip
 8000b64:	4698      	mov	r8, r3
 8000b66:	4249      	negs	r1, r1
 8000b68:	4488      	add	r8, r1
 8000b6a:	e5b3      	b.n	80006d4 <__aeabi_dadd+0x22c>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4a01      	ldr	r2, [pc, #4]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000b70:	000b      	movs	r3, r1
 8000b72:	e533      	b.n	80005dc <__aeabi_dadd+0x134>
 8000b74:	000007ff 	.word	0x000007ff
 8000b78:	ff7fffff 	.word	0xff7fffff

08000b7c <__aeabi_ddiv>:
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	4657      	mov	r7, sl
 8000b80:	464e      	mov	r6, r9
 8000b82:	4645      	mov	r5, r8
 8000b84:	46de      	mov	lr, fp
 8000b86:	b5e0      	push	{r5, r6, r7, lr}
 8000b88:	4681      	mov	r9, r0
 8000b8a:	0005      	movs	r5, r0
 8000b8c:	030c      	lsls	r4, r1, #12
 8000b8e:	0048      	lsls	r0, r1, #1
 8000b90:	4692      	mov	sl, r2
 8000b92:	001f      	movs	r7, r3
 8000b94:	b085      	sub	sp, #20
 8000b96:	0b24      	lsrs	r4, r4, #12
 8000b98:	0d40      	lsrs	r0, r0, #21
 8000b9a:	0fce      	lsrs	r6, r1, #31
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	d059      	beq.n	8000c54 <__aeabi_ddiv+0xd8>
 8000ba0:	4b87      	ldr	r3, [pc, #540]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_ddiv+0x2c>
 8000ba6:	e098      	b.n	8000cda <__aeabi_ddiv+0x15e>
 8000ba8:	0f6b      	lsrs	r3, r5, #29
 8000baa:	00e4      	lsls	r4, r4, #3
 8000bac:	431c      	orrs	r4, r3
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	041b      	lsls	r3, r3, #16
 8000bb2:	4323      	orrs	r3, r4
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	4b83      	ldr	r3, [pc, #524]	; (8000dc4 <__aeabi_ddiv+0x248>)
 8000bb8:	00ed      	lsls	r5, r5, #3
 8000bba:	469b      	mov	fp, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	4483      	add	fp, r0
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	033c      	lsls	r4, r7, #12
 8000bc6:	007b      	lsls	r3, r7, #1
 8000bc8:	4650      	mov	r0, sl
 8000bca:	0b24      	lsrs	r4, r4, #12
 8000bcc:	0d5b      	lsrs	r3, r3, #21
 8000bce:	0fff      	lsrs	r7, r7, #31
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d067      	beq.n	8000ca4 <__aeabi_ddiv+0x128>
 8000bd4:	4a7a      	ldr	r2, [pc, #488]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d018      	beq.n	8000c0c <__aeabi_ddiv+0x90>
 8000bda:	497a      	ldr	r1, [pc, #488]	; (8000dc4 <__aeabi_ddiv+0x248>)
 8000bdc:	0f42      	lsrs	r2, r0, #29
 8000bde:	468c      	mov	ip, r1
 8000be0:	00e4      	lsls	r4, r4, #3
 8000be2:	4659      	mov	r1, fp
 8000be4:	4314      	orrs	r4, r2
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	4463      	add	r3, ip
 8000bea:	0412      	lsls	r2, r2, #16
 8000bec:	1acb      	subs	r3, r1, r3
 8000bee:	4314      	orrs	r4, r2
 8000bf0:	469b      	mov	fp, r3
 8000bf2:	00c2      	lsls	r2, r0, #3
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	0033      	movs	r3, r6
 8000bf8:	407b      	eors	r3, r7
 8000bfa:	469a      	mov	sl, r3
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	2b0f      	cmp	r3, #15
 8000c00:	d900      	bls.n	8000c04 <__aeabi_ddiv+0x88>
 8000c02:	e0ef      	b.n	8000de4 <__aeabi_ddiv+0x268>
 8000c04:	4970      	ldr	r1, [pc, #448]	; (8000dc8 <__aeabi_ddiv+0x24c>)
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	58cb      	ldr	r3, [r1, r3]
 8000c0a:	469f      	mov	pc, r3
 8000c0c:	4b6f      	ldr	r3, [pc, #444]	; (8000dcc <__aeabi_ddiv+0x250>)
 8000c0e:	4652      	mov	r2, sl
 8000c10:	469c      	mov	ip, r3
 8000c12:	4322      	orrs	r2, r4
 8000c14:	44e3      	add	fp, ip
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d000      	beq.n	8000c1c <__aeabi_ddiv+0xa0>
 8000c1a:	e095      	b.n	8000d48 <__aeabi_ddiv+0x1cc>
 8000c1c:	4649      	mov	r1, r9
 8000c1e:	2302      	movs	r3, #2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	4689      	mov	r9, r1
 8000c24:	2400      	movs	r4, #0
 8000c26:	2002      	movs	r0, #2
 8000c28:	e7e5      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	2500      	movs	r5, #0
 8000c30:	4652      	mov	r2, sl
 8000c32:	051b      	lsls	r3, r3, #20
 8000c34:	4323      	orrs	r3, r4
 8000c36:	07d2      	lsls	r2, r2, #31
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	0028      	movs	r0, r5
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	b005      	add	sp, #20
 8000c40:	bcf0      	pop	{r4, r5, r6, r7}
 8000c42:	46bb      	mov	fp, r7
 8000c44:	46b2      	mov	sl, r6
 8000c46:	46a9      	mov	r9, r5
 8000c48:	46a0      	mov	r8, r4
 8000c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	2500      	movs	r5, #0
 8000c50:	4b5b      	ldr	r3, [pc, #364]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000c52:	e7ed      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000c54:	464b      	mov	r3, r9
 8000c56:	4323      	orrs	r3, r4
 8000c58:	4698      	mov	r8, r3
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_ddiv+0xe2>
 8000c5c:	e089      	b.n	8000d72 <__aeabi_ddiv+0x1f6>
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d100      	bne.n	8000c64 <__aeabi_ddiv+0xe8>
 8000c62:	e1e0      	b.n	8001026 <__aeabi_ddiv+0x4aa>
 8000c64:	0020      	movs	r0, r4
 8000c66:	f001 fa37 	bl	80020d8 <__clzsi2>
 8000c6a:	0001      	movs	r1, r0
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	390b      	subs	r1, #11
 8000c70:	231d      	movs	r3, #29
 8000c72:	1a5b      	subs	r3, r3, r1
 8000c74:	4649      	mov	r1, r9
 8000c76:	0010      	movs	r0, r2
 8000c78:	40d9      	lsrs	r1, r3
 8000c7a:	3808      	subs	r0, #8
 8000c7c:	4084      	lsls	r4, r0
 8000c7e:	000b      	movs	r3, r1
 8000c80:	464d      	mov	r5, r9
 8000c82:	4323      	orrs	r3, r4
 8000c84:	4698      	mov	r8, r3
 8000c86:	4085      	lsls	r5, r0
 8000c88:	4851      	ldr	r0, [pc, #324]	; (8000dd0 <__aeabi_ddiv+0x254>)
 8000c8a:	033c      	lsls	r4, r7, #12
 8000c8c:	1a83      	subs	r3, r0, r2
 8000c8e:	469b      	mov	fp, r3
 8000c90:	2300      	movs	r3, #0
 8000c92:	4699      	mov	r9, r3
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	007b      	lsls	r3, r7, #1
 8000c98:	4650      	mov	r0, sl
 8000c9a:	0b24      	lsrs	r4, r4, #12
 8000c9c:	0d5b      	lsrs	r3, r3, #21
 8000c9e:	0fff      	lsrs	r7, r7, #31
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d197      	bne.n	8000bd4 <__aeabi_ddiv+0x58>
 8000ca4:	4652      	mov	r2, sl
 8000ca6:	4322      	orrs	r2, r4
 8000ca8:	d055      	beq.n	8000d56 <__aeabi_ddiv+0x1da>
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_ddiv+0x134>
 8000cae:	e1ca      	b.n	8001046 <__aeabi_ddiv+0x4ca>
 8000cb0:	0020      	movs	r0, r4
 8000cb2:	f001 fa11 	bl	80020d8 <__clzsi2>
 8000cb6:	0002      	movs	r2, r0
 8000cb8:	3a0b      	subs	r2, #11
 8000cba:	231d      	movs	r3, #29
 8000cbc:	0001      	movs	r1, r0
 8000cbe:	1a9b      	subs	r3, r3, r2
 8000cc0:	4652      	mov	r2, sl
 8000cc2:	3908      	subs	r1, #8
 8000cc4:	40da      	lsrs	r2, r3
 8000cc6:	408c      	lsls	r4, r1
 8000cc8:	4314      	orrs	r4, r2
 8000cca:	4652      	mov	r2, sl
 8000ccc:	408a      	lsls	r2, r1
 8000cce:	4b41      	ldr	r3, [pc, #260]	; (8000dd4 <__aeabi_ddiv+0x258>)
 8000cd0:	4458      	add	r0, fp
 8000cd2:	469b      	mov	fp, r3
 8000cd4:	4483      	add	fp, r0
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	e78d      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000cda:	464b      	mov	r3, r9
 8000cdc:	4323      	orrs	r3, r4
 8000cde:	4698      	mov	r8, r3
 8000ce0:	d140      	bne.n	8000d64 <__aeabi_ddiv+0x1e8>
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	4699      	mov	r9, r3
 8000ce6:	3b06      	subs	r3, #6
 8000ce8:	2500      	movs	r5, #0
 8000cea:	4683      	mov	fp, r0
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	e769      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000cf0:	46b2      	mov	sl, r6
 8000cf2:	9b00      	ldr	r3, [sp, #0]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0a9      	beq.n	8000c4c <__aeabi_ddiv+0xd0>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_ddiv+0x182>
 8000cfc:	e211      	b.n	8001122 <__aeabi_ddiv+0x5a6>
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d093      	beq.n	8000c2a <__aeabi_ddiv+0xae>
 8000d02:	4a35      	ldr	r2, [pc, #212]	; (8000dd8 <__aeabi_ddiv+0x25c>)
 8000d04:	445a      	add	r2, fp
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	dc00      	bgt.n	8000d0c <__aeabi_ddiv+0x190>
 8000d0a:	e13c      	b.n	8000f86 <__aeabi_ddiv+0x40a>
 8000d0c:	076b      	lsls	r3, r5, #29
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_ddiv+0x196>
 8000d10:	e1a7      	b.n	8001062 <__aeabi_ddiv+0x4e6>
 8000d12:	08ed      	lsrs	r5, r5, #3
 8000d14:	4643      	mov	r3, r8
 8000d16:	01db      	lsls	r3, r3, #7
 8000d18:	d506      	bpl.n	8000d28 <__aeabi_ddiv+0x1ac>
 8000d1a:	4642      	mov	r2, r8
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <__aeabi_ddiv+0x260>)
 8000d1e:	401a      	ands	r2, r3
 8000d20:	4690      	mov	r8, r2
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	00d2      	lsls	r2, r2, #3
 8000d26:	445a      	add	r2, fp
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <__aeabi_ddiv+0x264>)
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dc8e      	bgt.n	8000c4c <__aeabi_ddiv+0xd0>
 8000d2e:	4643      	mov	r3, r8
 8000d30:	0552      	lsls	r2, r2, #21
 8000d32:	0758      	lsls	r0, r3, #29
 8000d34:	025c      	lsls	r4, r3, #9
 8000d36:	4305      	orrs	r5, r0
 8000d38:	0b24      	lsrs	r4, r4, #12
 8000d3a:	0d53      	lsrs	r3, r2, #21
 8000d3c:	e778      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000d3e:	46ba      	mov	sl, r7
 8000d40:	46a0      	mov	r8, r4
 8000d42:	0015      	movs	r5, r2
 8000d44:	9000      	str	r0, [sp, #0]
 8000d46:	e7d4      	b.n	8000cf2 <__aeabi_ddiv+0x176>
 8000d48:	464a      	mov	r2, r9
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	4691      	mov	r9, r2
 8000d50:	2003      	movs	r0, #3
 8000d52:	4652      	mov	r2, sl
 8000d54:	e74f      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000d56:	4649      	mov	r1, r9
 8000d58:	2301      	movs	r3, #1
 8000d5a:	4319      	orrs	r1, r3
 8000d5c:	4689      	mov	r9, r1
 8000d5e:	2400      	movs	r4, #0
 8000d60:	2001      	movs	r0, #1
 8000d62:	e748      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000d64:	230c      	movs	r3, #12
 8000d66:	4699      	mov	r9, r3
 8000d68:	3b09      	subs	r3, #9
 8000d6a:	46a0      	mov	r8, r4
 8000d6c:	4683      	mov	fp, r0
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	e728      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000d72:	2304      	movs	r3, #4
 8000d74:	4699      	mov	r9, r3
 8000d76:	2300      	movs	r3, #0
 8000d78:	469b      	mov	fp, r3
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	2500      	movs	r5, #0
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	e720      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000d82:	2300      	movs	r3, #0
 8000d84:	2480      	movs	r4, #128	; 0x80
 8000d86:	469a      	mov	sl, r3
 8000d88:	2500      	movs	r5, #0
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000d8c:	0324      	lsls	r4, r4, #12
 8000d8e:	e74f      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	4641      	mov	r1, r8
 8000d94:	031b      	lsls	r3, r3, #12
 8000d96:	4219      	tst	r1, r3
 8000d98:	d008      	beq.n	8000dac <__aeabi_ddiv+0x230>
 8000d9a:	421c      	tst	r4, r3
 8000d9c:	d106      	bne.n	8000dac <__aeabi_ddiv+0x230>
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	0324      	lsls	r4, r4, #12
 8000da2:	46ba      	mov	sl, r7
 8000da4:	0015      	movs	r5, r2
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000da8:	0b24      	lsrs	r4, r4, #12
 8000daa:	e741      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000dac:	2480      	movs	r4, #128	; 0x80
 8000dae:	4643      	mov	r3, r8
 8000db0:	0324      	lsls	r4, r4, #12
 8000db2:	431c      	orrs	r4, r3
 8000db4:	0324      	lsls	r4, r4, #12
 8000db6:	46b2      	mov	sl, r6
 8000db8:	4b01      	ldr	r3, [pc, #4]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000dba:	0b24      	lsrs	r4, r4, #12
 8000dbc:	e738      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	000007ff 	.word	0x000007ff
 8000dc4:	fffffc01 	.word	0xfffffc01
 8000dc8:	0800ad38 	.word	0x0800ad38
 8000dcc:	fffff801 	.word	0xfffff801
 8000dd0:	fffffc0d 	.word	0xfffffc0d
 8000dd4:	000003f3 	.word	0x000003f3
 8000dd8:	000003ff 	.word	0x000003ff
 8000ddc:	feffffff 	.word	0xfeffffff
 8000de0:	000007fe 	.word	0x000007fe
 8000de4:	4544      	cmp	r4, r8
 8000de6:	d200      	bcs.n	8000dea <__aeabi_ddiv+0x26e>
 8000de8:	e116      	b.n	8001018 <__aeabi_ddiv+0x49c>
 8000dea:	d100      	bne.n	8000dee <__aeabi_ddiv+0x272>
 8000dec:	e111      	b.n	8001012 <__aeabi_ddiv+0x496>
 8000dee:	2301      	movs	r3, #1
 8000df0:	425b      	negs	r3, r3
 8000df2:	469c      	mov	ip, r3
 8000df4:	002e      	movs	r6, r5
 8000df6:	4640      	mov	r0, r8
 8000df8:	2500      	movs	r5, #0
 8000dfa:	44e3      	add	fp, ip
 8000dfc:	0223      	lsls	r3, r4, #8
 8000dfe:	0e14      	lsrs	r4, r2, #24
 8000e00:	431c      	orrs	r4, r3
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	4699      	mov	r9, r3
 8000e06:	0423      	lsls	r3, r4, #16
 8000e08:	0c1f      	lsrs	r7, r3, #16
 8000e0a:	0212      	lsls	r2, r2, #8
 8000e0c:	4649      	mov	r1, r9
 8000e0e:	9200      	str	r2, [sp, #0]
 8000e10:	9701      	str	r7, [sp, #4]
 8000e12:	f7ff fa1b 	bl	800024c <__aeabi_uidivmod>
 8000e16:	0002      	movs	r2, r0
 8000e18:	437a      	muls	r2, r7
 8000e1a:	040b      	lsls	r3, r1, #16
 8000e1c:	0c31      	lsrs	r1, r6, #16
 8000e1e:	4680      	mov	r8, r0
 8000e20:	4319      	orrs	r1, r3
 8000e22:	428a      	cmp	r2, r1
 8000e24:	d90b      	bls.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e26:	2301      	movs	r3, #1
 8000e28:	425b      	negs	r3, r3
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	1909      	adds	r1, r1, r4
 8000e2e:	44e0      	add	r8, ip
 8000e30:	428c      	cmp	r4, r1
 8000e32:	d804      	bhi.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e34:	428a      	cmp	r2, r1
 8000e36:	d902      	bls.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e38:	1e83      	subs	r3, r0, #2
 8000e3a:	4698      	mov	r8, r3
 8000e3c:	1909      	adds	r1, r1, r4
 8000e3e:	1a88      	subs	r0, r1, r2
 8000e40:	4649      	mov	r1, r9
 8000e42:	f7ff fa03 	bl	800024c <__aeabi_uidivmod>
 8000e46:	0409      	lsls	r1, r1, #16
 8000e48:	468c      	mov	ip, r1
 8000e4a:	0431      	lsls	r1, r6, #16
 8000e4c:	4666      	mov	r6, ip
 8000e4e:	9a01      	ldr	r2, [sp, #4]
 8000e50:	0c09      	lsrs	r1, r1, #16
 8000e52:	4342      	muls	r2, r0
 8000e54:	0003      	movs	r3, r0
 8000e56:	4331      	orrs	r1, r6
 8000e58:	428a      	cmp	r2, r1
 8000e5a:	d904      	bls.n	8000e66 <__aeabi_ddiv+0x2ea>
 8000e5c:	1909      	adds	r1, r1, r4
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	428c      	cmp	r4, r1
 8000e62:	d800      	bhi.n	8000e66 <__aeabi_ddiv+0x2ea>
 8000e64:	e111      	b.n	800108a <__aeabi_ddiv+0x50e>
 8000e66:	1a89      	subs	r1, r1, r2
 8000e68:	4642      	mov	r2, r8
 8000e6a:	9e00      	ldr	r6, [sp, #0]
 8000e6c:	0412      	lsls	r2, r2, #16
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	0c33      	lsrs	r3, r6, #16
 8000e72:	001f      	movs	r7, r3
 8000e74:	0c10      	lsrs	r0, r2, #16
 8000e76:	4690      	mov	r8, r2
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	0413      	lsls	r3, r2, #16
 8000e7c:	0432      	lsls	r2, r6, #16
 8000e7e:	0c16      	lsrs	r6, r2, #16
 8000e80:	0032      	movs	r2, r6
 8000e82:	0c1b      	lsrs	r3, r3, #16
 8000e84:	435a      	muls	r2, r3
 8000e86:	9603      	str	r6, [sp, #12]
 8000e88:	437b      	muls	r3, r7
 8000e8a:	4346      	muls	r6, r0
 8000e8c:	4378      	muls	r0, r7
 8000e8e:	0c17      	lsrs	r7, r2, #16
 8000e90:	46bc      	mov	ip, r7
 8000e92:	199b      	adds	r3, r3, r6
 8000e94:	4463      	add	r3, ip
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d903      	bls.n	8000ea2 <__aeabi_ddiv+0x326>
 8000e9a:	2680      	movs	r6, #128	; 0x80
 8000e9c:	0276      	lsls	r6, r6, #9
 8000e9e:	46b4      	mov	ip, r6
 8000ea0:	4460      	add	r0, ip
 8000ea2:	0c1e      	lsrs	r6, r3, #16
 8000ea4:	1830      	adds	r0, r6, r0
 8000ea6:	0416      	lsls	r6, r2, #16
 8000ea8:	041b      	lsls	r3, r3, #16
 8000eaa:	0c36      	lsrs	r6, r6, #16
 8000eac:	199e      	adds	r6, r3, r6
 8000eae:	4281      	cmp	r1, r0
 8000eb0:	d200      	bcs.n	8000eb4 <__aeabi_ddiv+0x338>
 8000eb2:	e09c      	b.n	8000fee <__aeabi_ddiv+0x472>
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_ddiv+0x33c>
 8000eb6:	e097      	b.n	8000fe8 <__aeabi_ddiv+0x46c>
 8000eb8:	1bae      	subs	r6, r5, r6
 8000eba:	1a09      	subs	r1, r1, r0
 8000ebc:	42b5      	cmp	r5, r6
 8000ebe:	4180      	sbcs	r0, r0
 8000ec0:	4240      	negs	r0, r0
 8000ec2:	1a08      	subs	r0, r1, r0
 8000ec4:	4284      	cmp	r4, r0
 8000ec6:	d100      	bne.n	8000eca <__aeabi_ddiv+0x34e>
 8000ec8:	e111      	b.n	80010ee <__aeabi_ddiv+0x572>
 8000eca:	4649      	mov	r1, r9
 8000ecc:	f7ff f9be 	bl	800024c <__aeabi_uidivmod>
 8000ed0:	9a01      	ldr	r2, [sp, #4]
 8000ed2:	040b      	lsls	r3, r1, #16
 8000ed4:	4342      	muls	r2, r0
 8000ed6:	0c31      	lsrs	r1, r6, #16
 8000ed8:	0005      	movs	r5, r0
 8000eda:	4319      	orrs	r1, r3
 8000edc:	428a      	cmp	r2, r1
 8000ede:	d907      	bls.n	8000ef0 <__aeabi_ddiv+0x374>
 8000ee0:	1909      	adds	r1, r1, r4
 8000ee2:	3d01      	subs	r5, #1
 8000ee4:	428c      	cmp	r4, r1
 8000ee6:	d803      	bhi.n	8000ef0 <__aeabi_ddiv+0x374>
 8000ee8:	428a      	cmp	r2, r1
 8000eea:	d901      	bls.n	8000ef0 <__aeabi_ddiv+0x374>
 8000eec:	1e85      	subs	r5, r0, #2
 8000eee:	1909      	adds	r1, r1, r4
 8000ef0:	1a88      	subs	r0, r1, r2
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	f7ff f9aa 	bl	800024c <__aeabi_uidivmod>
 8000ef8:	0409      	lsls	r1, r1, #16
 8000efa:	468c      	mov	ip, r1
 8000efc:	0431      	lsls	r1, r6, #16
 8000efe:	4666      	mov	r6, ip
 8000f00:	9a01      	ldr	r2, [sp, #4]
 8000f02:	0c09      	lsrs	r1, r1, #16
 8000f04:	4342      	muls	r2, r0
 8000f06:	0003      	movs	r3, r0
 8000f08:	4331      	orrs	r1, r6
 8000f0a:	428a      	cmp	r2, r1
 8000f0c:	d907      	bls.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f0e:	1909      	adds	r1, r1, r4
 8000f10:	3b01      	subs	r3, #1
 8000f12:	428c      	cmp	r4, r1
 8000f14:	d803      	bhi.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f16:	428a      	cmp	r2, r1
 8000f18:	d901      	bls.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f1a:	1e83      	subs	r3, r0, #2
 8000f1c:	1909      	adds	r1, r1, r4
 8000f1e:	9e03      	ldr	r6, [sp, #12]
 8000f20:	1a89      	subs	r1, r1, r2
 8000f22:	0032      	movs	r2, r6
 8000f24:	042d      	lsls	r5, r5, #16
 8000f26:	431d      	orrs	r5, r3
 8000f28:	9f02      	ldr	r7, [sp, #8]
 8000f2a:	042b      	lsls	r3, r5, #16
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	435a      	muls	r2, r3
 8000f30:	437b      	muls	r3, r7
 8000f32:	469c      	mov	ip, r3
 8000f34:	0c28      	lsrs	r0, r5, #16
 8000f36:	4346      	muls	r6, r0
 8000f38:	0c13      	lsrs	r3, r2, #16
 8000f3a:	44b4      	add	ip, r6
 8000f3c:	4463      	add	r3, ip
 8000f3e:	4378      	muls	r0, r7
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d903      	bls.n	8000f4c <__aeabi_ddiv+0x3d0>
 8000f44:	2680      	movs	r6, #128	; 0x80
 8000f46:	0276      	lsls	r6, r6, #9
 8000f48:	46b4      	mov	ip, r6
 8000f4a:	4460      	add	r0, ip
 8000f4c:	0c1e      	lsrs	r6, r3, #16
 8000f4e:	0412      	lsls	r2, r2, #16
 8000f50:	041b      	lsls	r3, r3, #16
 8000f52:	0c12      	lsrs	r2, r2, #16
 8000f54:	1830      	adds	r0, r6, r0
 8000f56:	189b      	adds	r3, r3, r2
 8000f58:	4281      	cmp	r1, r0
 8000f5a:	d306      	bcc.n	8000f6a <__aeabi_ddiv+0x3ee>
 8000f5c:	d002      	beq.n	8000f64 <__aeabi_ddiv+0x3e8>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	431d      	orrs	r5, r3
 8000f62:	e6ce      	b.n	8000d02 <__aeabi_ddiv+0x186>
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_ddiv+0x3ee>
 8000f68:	e6cb      	b.n	8000d02 <__aeabi_ddiv+0x186>
 8000f6a:	1861      	adds	r1, r4, r1
 8000f6c:	1e6e      	subs	r6, r5, #1
 8000f6e:	42a1      	cmp	r1, r4
 8000f70:	d200      	bcs.n	8000f74 <__aeabi_ddiv+0x3f8>
 8000f72:	e0a4      	b.n	80010be <__aeabi_ddiv+0x542>
 8000f74:	4281      	cmp	r1, r0
 8000f76:	d200      	bcs.n	8000f7a <__aeabi_ddiv+0x3fe>
 8000f78:	e0c9      	b.n	800110e <__aeabi_ddiv+0x592>
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_ddiv+0x402>
 8000f7c:	e0d9      	b.n	8001132 <__aeabi_ddiv+0x5b6>
 8000f7e:	0035      	movs	r5, r6
 8000f80:	e7ed      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 8000f82:	2501      	movs	r5, #1
 8000f84:	426d      	negs	r5, r5
 8000f86:	2101      	movs	r1, #1
 8000f88:	1a89      	subs	r1, r1, r2
 8000f8a:	2938      	cmp	r1, #56	; 0x38
 8000f8c:	dd00      	ble.n	8000f90 <__aeabi_ddiv+0x414>
 8000f8e:	e64c      	b.n	8000c2a <__aeabi_ddiv+0xae>
 8000f90:	291f      	cmp	r1, #31
 8000f92:	dc00      	bgt.n	8000f96 <__aeabi_ddiv+0x41a>
 8000f94:	e07f      	b.n	8001096 <__aeabi_ddiv+0x51a>
 8000f96:	231f      	movs	r3, #31
 8000f98:	425b      	negs	r3, r3
 8000f9a:	1a9a      	subs	r2, r3, r2
 8000f9c:	4643      	mov	r3, r8
 8000f9e:	40d3      	lsrs	r3, r2
 8000fa0:	2920      	cmp	r1, #32
 8000fa2:	d004      	beq.n	8000fae <__aeabi_ddiv+0x432>
 8000fa4:	4644      	mov	r4, r8
 8000fa6:	4a65      	ldr	r2, [pc, #404]	; (800113c <__aeabi_ddiv+0x5c0>)
 8000fa8:	445a      	add	r2, fp
 8000faa:	4094      	lsls	r4, r2
 8000fac:	4325      	orrs	r5, r4
 8000fae:	1e6a      	subs	r2, r5, #1
 8000fb0:	4195      	sbcs	r5, r2
 8000fb2:	2207      	movs	r2, #7
 8000fb4:	432b      	orrs	r3, r5
 8000fb6:	0015      	movs	r5, r2
 8000fb8:	2400      	movs	r4, #0
 8000fba:	401d      	ands	r5, r3
 8000fbc:	421a      	tst	r2, r3
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_ddiv+0x446>
 8000fc0:	e0a1      	b.n	8001106 <__aeabi_ddiv+0x58a>
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	2400      	movs	r4, #0
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	2a04      	cmp	r2, #4
 8000fca:	d100      	bne.n	8000fce <__aeabi_ddiv+0x452>
 8000fcc:	e098      	b.n	8001100 <__aeabi_ddiv+0x584>
 8000fce:	1d1a      	adds	r2, r3, #4
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	419b      	sbcs	r3, r3
 8000fd4:	425b      	negs	r3, r3
 8000fd6:	18e4      	adds	r4, r4, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	0222      	lsls	r2, r4, #8
 8000fdc:	d400      	bmi.n	8000fe0 <__aeabi_ddiv+0x464>
 8000fde:	e08f      	b.n	8001100 <__aeabi_ddiv+0x584>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	2500      	movs	r5, #0
 8000fe6:	e623      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000fe8:	42b5      	cmp	r5, r6
 8000fea:	d300      	bcc.n	8000fee <__aeabi_ddiv+0x472>
 8000fec:	e764      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 8000fee:	4643      	mov	r3, r8
 8000ff0:	1e5a      	subs	r2, r3, #1
 8000ff2:	9b00      	ldr	r3, [sp, #0]
 8000ff4:	469c      	mov	ip, r3
 8000ff6:	4465      	add	r5, ip
 8000ff8:	001f      	movs	r7, r3
 8000ffa:	429d      	cmp	r5, r3
 8000ffc:	419b      	sbcs	r3, r3
 8000ffe:	425b      	negs	r3, r3
 8001000:	191b      	adds	r3, r3, r4
 8001002:	18c9      	adds	r1, r1, r3
 8001004:	428c      	cmp	r4, r1
 8001006:	d23a      	bcs.n	800107e <__aeabi_ddiv+0x502>
 8001008:	4288      	cmp	r0, r1
 800100a:	d863      	bhi.n	80010d4 <__aeabi_ddiv+0x558>
 800100c:	d060      	beq.n	80010d0 <__aeabi_ddiv+0x554>
 800100e:	4690      	mov	r8, r2
 8001010:	e752      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 8001012:	42aa      	cmp	r2, r5
 8001014:	d900      	bls.n	8001018 <__aeabi_ddiv+0x49c>
 8001016:	e6ea      	b.n	8000dee <__aeabi_ddiv+0x272>
 8001018:	4643      	mov	r3, r8
 800101a:	07de      	lsls	r6, r3, #31
 800101c:	0858      	lsrs	r0, r3, #1
 800101e:	086b      	lsrs	r3, r5, #1
 8001020:	431e      	orrs	r6, r3
 8001022:	07ed      	lsls	r5, r5, #31
 8001024:	e6ea      	b.n	8000dfc <__aeabi_ddiv+0x280>
 8001026:	4648      	mov	r0, r9
 8001028:	f001 f856 	bl	80020d8 <__clzsi2>
 800102c:	0001      	movs	r1, r0
 800102e:	0002      	movs	r2, r0
 8001030:	3115      	adds	r1, #21
 8001032:	3220      	adds	r2, #32
 8001034:	291c      	cmp	r1, #28
 8001036:	dc00      	bgt.n	800103a <__aeabi_ddiv+0x4be>
 8001038:	e61a      	b.n	8000c70 <__aeabi_ddiv+0xf4>
 800103a:	464b      	mov	r3, r9
 800103c:	3808      	subs	r0, #8
 800103e:	4083      	lsls	r3, r0
 8001040:	2500      	movs	r5, #0
 8001042:	4698      	mov	r8, r3
 8001044:	e620      	b.n	8000c88 <__aeabi_ddiv+0x10c>
 8001046:	f001 f847 	bl	80020d8 <__clzsi2>
 800104a:	0003      	movs	r3, r0
 800104c:	001a      	movs	r2, r3
 800104e:	3215      	adds	r2, #21
 8001050:	3020      	adds	r0, #32
 8001052:	2a1c      	cmp	r2, #28
 8001054:	dc00      	bgt.n	8001058 <__aeabi_ddiv+0x4dc>
 8001056:	e630      	b.n	8000cba <__aeabi_ddiv+0x13e>
 8001058:	4654      	mov	r4, sl
 800105a:	3b08      	subs	r3, #8
 800105c:	2200      	movs	r2, #0
 800105e:	409c      	lsls	r4, r3
 8001060:	e635      	b.n	8000cce <__aeabi_ddiv+0x152>
 8001062:	230f      	movs	r3, #15
 8001064:	402b      	ands	r3, r5
 8001066:	2b04      	cmp	r3, #4
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x4f0>
 800106a:	e652      	b.n	8000d12 <__aeabi_ddiv+0x196>
 800106c:	2305      	movs	r3, #5
 800106e:	425b      	negs	r3, r3
 8001070:	42ab      	cmp	r3, r5
 8001072:	419b      	sbcs	r3, r3
 8001074:	3504      	adds	r5, #4
 8001076:	425b      	negs	r3, r3
 8001078:	08ed      	lsrs	r5, r5, #3
 800107a:	4498      	add	r8, r3
 800107c:	e64a      	b.n	8000d14 <__aeabi_ddiv+0x198>
 800107e:	428c      	cmp	r4, r1
 8001080:	d1c5      	bne.n	800100e <__aeabi_ddiv+0x492>
 8001082:	42af      	cmp	r7, r5
 8001084:	d9c0      	bls.n	8001008 <__aeabi_ddiv+0x48c>
 8001086:	4690      	mov	r8, r2
 8001088:	e716      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 800108a:	428a      	cmp	r2, r1
 800108c:	d800      	bhi.n	8001090 <__aeabi_ddiv+0x514>
 800108e:	e6ea      	b.n	8000e66 <__aeabi_ddiv+0x2ea>
 8001090:	1e83      	subs	r3, r0, #2
 8001092:	1909      	adds	r1, r1, r4
 8001094:	e6e7      	b.n	8000e66 <__aeabi_ddiv+0x2ea>
 8001096:	4a2a      	ldr	r2, [pc, #168]	; (8001140 <__aeabi_ddiv+0x5c4>)
 8001098:	0028      	movs	r0, r5
 800109a:	445a      	add	r2, fp
 800109c:	4643      	mov	r3, r8
 800109e:	4095      	lsls	r5, r2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	40c8      	lsrs	r0, r1
 80010a4:	1e6a      	subs	r2, r5, #1
 80010a6:	4195      	sbcs	r5, r2
 80010a8:	4644      	mov	r4, r8
 80010aa:	4303      	orrs	r3, r0
 80010ac:	432b      	orrs	r3, r5
 80010ae:	40cc      	lsrs	r4, r1
 80010b0:	075a      	lsls	r2, r3, #29
 80010b2:	d092      	beq.n	8000fda <__aeabi_ddiv+0x45e>
 80010b4:	220f      	movs	r2, #15
 80010b6:	401a      	ands	r2, r3
 80010b8:	2a04      	cmp	r2, #4
 80010ba:	d188      	bne.n	8000fce <__aeabi_ddiv+0x452>
 80010bc:	e78d      	b.n	8000fda <__aeabi_ddiv+0x45e>
 80010be:	0035      	movs	r5, r6
 80010c0:	4281      	cmp	r1, r0
 80010c2:	d000      	beq.n	80010c6 <__aeabi_ddiv+0x54a>
 80010c4:	e74b      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 80010c6:	9a00      	ldr	r2, [sp, #0]
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d000      	beq.n	80010ce <__aeabi_ddiv+0x552>
 80010cc:	e747      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 80010ce:	e618      	b.n	8000d02 <__aeabi_ddiv+0x186>
 80010d0:	42ae      	cmp	r6, r5
 80010d2:	d99c      	bls.n	800100e <__aeabi_ddiv+0x492>
 80010d4:	2302      	movs	r3, #2
 80010d6:	425b      	negs	r3, r3
 80010d8:	469c      	mov	ip, r3
 80010da:	9b00      	ldr	r3, [sp, #0]
 80010dc:	44e0      	add	r8, ip
 80010de:	469c      	mov	ip, r3
 80010e0:	4465      	add	r5, ip
 80010e2:	429d      	cmp	r5, r3
 80010e4:	419b      	sbcs	r3, r3
 80010e6:	425b      	negs	r3, r3
 80010e8:	191b      	adds	r3, r3, r4
 80010ea:	18c9      	adds	r1, r1, r3
 80010ec:	e6e4      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <__aeabi_ddiv+0x5c8>)
 80010f0:	445a      	add	r2, fp
 80010f2:	2a00      	cmp	r2, #0
 80010f4:	dc00      	bgt.n	80010f8 <__aeabi_ddiv+0x57c>
 80010f6:	e744      	b.n	8000f82 <__aeabi_ddiv+0x406>
 80010f8:	2301      	movs	r3, #1
 80010fa:	2500      	movs	r5, #0
 80010fc:	4498      	add	r8, r3
 80010fe:	e609      	b.n	8000d14 <__aeabi_ddiv+0x198>
 8001100:	0765      	lsls	r5, r4, #29
 8001102:	0264      	lsls	r4, r4, #9
 8001104:	0b24      	lsrs	r4, r4, #12
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	431d      	orrs	r5, r3
 800110a:	2300      	movs	r3, #0
 800110c:	e590      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 800110e:	9e00      	ldr	r6, [sp, #0]
 8001110:	3d02      	subs	r5, #2
 8001112:	0072      	lsls	r2, r6, #1
 8001114:	42b2      	cmp	r2, r6
 8001116:	41bf      	sbcs	r7, r7
 8001118:	427f      	negs	r7, r7
 800111a:	193c      	adds	r4, r7, r4
 800111c:	1909      	adds	r1, r1, r4
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	e7ce      	b.n	80010c0 <__aeabi_ddiv+0x544>
 8001122:	2480      	movs	r4, #128	; 0x80
 8001124:	4643      	mov	r3, r8
 8001126:	0324      	lsls	r4, r4, #12
 8001128:	431c      	orrs	r4, r3
 800112a:	0324      	lsls	r4, r4, #12
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <__aeabi_ddiv+0x5cc>)
 800112e:	0b24      	lsrs	r4, r4, #12
 8001130:	e57e      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8001132:	9a00      	ldr	r2, [sp, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d3ea      	bcc.n	800110e <__aeabi_ddiv+0x592>
 8001138:	0035      	movs	r5, r6
 800113a:	e7c4      	b.n	80010c6 <__aeabi_ddiv+0x54a>
 800113c:	0000043e 	.word	0x0000043e
 8001140:	0000041e 	.word	0x0000041e
 8001144:	000003ff 	.word	0x000003ff
 8001148:	000007ff 	.word	0x000007ff

0800114c <__eqdf2>:
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114e:	464f      	mov	r7, r9
 8001150:	4646      	mov	r6, r8
 8001152:	46d6      	mov	lr, sl
 8001154:	4694      	mov	ip, r2
 8001156:	4691      	mov	r9, r2
 8001158:	031a      	lsls	r2, r3, #12
 800115a:	0b12      	lsrs	r2, r2, #12
 800115c:	4d18      	ldr	r5, [pc, #96]	; (80011c0 <__eqdf2+0x74>)
 800115e:	b5c0      	push	{r6, r7, lr}
 8001160:	004c      	lsls	r4, r1, #1
 8001162:	030f      	lsls	r7, r1, #12
 8001164:	4692      	mov	sl, r2
 8001166:	005a      	lsls	r2, r3, #1
 8001168:	0006      	movs	r6, r0
 800116a:	4680      	mov	r8, r0
 800116c:	0b3f      	lsrs	r7, r7, #12
 800116e:	2001      	movs	r0, #1
 8001170:	0d64      	lsrs	r4, r4, #21
 8001172:	0fc9      	lsrs	r1, r1, #31
 8001174:	0d52      	lsrs	r2, r2, #21
 8001176:	0fdb      	lsrs	r3, r3, #31
 8001178:	42ac      	cmp	r4, r5
 800117a:	d00a      	beq.n	8001192 <__eqdf2+0x46>
 800117c:	42aa      	cmp	r2, r5
 800117e:	d003      	beq.n	8001188 <__eqdf2+0x3c>
 8001180:	4294      	cmp	r4, r2
 8001182:	d101      	bne.n	8001188 <__eqdf2+0x3c>
 8001184:	4557      	cmp	r7, sl
 8001186:	d00d      	beq.n	80011a4 <__eqdf2+0x58>
 8001188:	bce0      	pop	{r5, r6, r7}
 800118a:	46ba      	mov	sl, r7
 800118c:	46b1      	mov	r9, r6
 800118e:	46a8      	mov	r8, r5
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001192:	003d      	movs	r5, r7
 8001194:	4335      	orrs	r5, r6
 8001196:	d1f7      	bne.n	8001188 <__eqdf2+0x3c>
 8001198:	42a2      	cmp	r2, r4
 800119a:	d1f5      	bne.n	8001188 <__eqdf2+0x3c>
 800119c:	4652      	mov	r2, sl
 800119e:	4665      	mov	r5, ip
 80011a0:	432a      	orrs	r2, r5
 80011a2:	d1f1      	bne.n	8001188 <__eqdf2+0x3c>
 80011a4:	2001      	movs	r0, #1
 80011a6:	45c8      	cmp	r8, r9
 80011a8:	d1ee      	bne.n	8001188 <__eqdf2+0x3c>
 80011aa:	4299      	cmp	r1, r3
 80011ac:	d006      	beq.n	80011bc <__eqdf2+0x70>
 80011ae:	2c00      	cmp	r4, #0
 80011b0:	d1ea      	bne.n	8001188 <__eqdf2+0x3c>
 80011b2:	433e      	orrs	r6, r7
 80011b4:	0030      	movs	r0, r6
 80011b6:	1e46      	subs	r6, r0, #1
 80011b8:	41b0      	sbcs	r0, r6
 80011ba:	e7e5      	b.n	8001188 <__eqdf2+0x3c>
 80011bc:	2000      	movs	r0, #0
 80011be:	e7e3      	b.n	8001188 <__eqdf2+0x3c>
 80011c0:	000007ff 	.word	0x000007ff

080011c4 <__gedf2>:
 80011c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c6:	464e      	mov	r6, r9
 80011c8:	4645      	mov	r5, r8
 80011ca:	4657      	mov	r7, sl
 80011cc:	46de      	mov	lr, fp
 80011ce:	0004      	movs	r4, r0
 80011d0:	0018      	movs	r0, r3
 80011d2:	b5e0      	push	{r5, r6, r7, lr}
 80011d4:	0016      	movs	r6, r2
 80011d6:	031b      	lsls	r3, r3, #12
 80011d8:	0b1b      	lsrs	r3, r3, #12
 80011da:	4d32      	ldr	r5, [pc, #200]	; (80012a4 <__gedf2+0xe0>)
 80011dc:	030f      	lsls	r7, r1, #12
 80011de:	004a      	lsls	r2, r1, #1
 80011e0:	4699      	mov	r9, r3
 80011e2:	0043      	lsls	r3, r0, #1
 80011e4:	46a4      	mov	ip, r4
 80011e6:	46b0      	mov	r8, r6
 80011e8:	0b3f      	lsrs	r7, r7, #12
 80011ea:	0d52      	lsrs	r2, r2, #21
 80011ec:	0fc9      	lsrs	r1, r1, #31
 80011ee:	0d5b      	lsrs	r3, r3, #21
 80011f0:	0fc0      	lsrs	r0, r0, #31
 80011f2:	42aa      	cmp	r2, r5
 80011f4:	d029      	beq.n	800124a <__gedf2+0x86>
 80011f6:	42ab      	cmp	r3, r5
 80011f8:	d018      	beq.n	800122c <__gedf2+0x68>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d12a      	bne.n	8001254 <__gedf2+0x90>
 80011fe:	433c      	orrs	r4, r7
 8001200:	46a3      	mov	fp, r4
 8001202:	4265      	negs	r5, r4
 8001204:	4165      	adcs	r5, r4
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <__gedf2+0x4c>
 800120a:	464c      	mov	r4, r9
 800120c:	4326      	orrs	r6, r4
 800120e:	d027      	beq.n	8001260 <__gedf2+0x9c>
 8001210:	2d00      	cmp	r5, #0
 8001212:	d115      	bne.n	8001240 <__gedf2+0x7c>
 8001214:	4281      	cmp	r1, r0
 8001216:	d028      	beq.n	800126a <__gedf2+0xa6>
 8001218:	2002      	movs	r0, #2
 800121a:	3901      	subs	r1, #1
 800121c:	4008      	ands	r0, r1
 800121e:	3801      	subs	r0, #1
 8001220:	bcf0      	pop	{r4, r5, r6, r7}
 8001222:	46bb      	mov	fp, r7
 8001224:	46b2      	mov	sl, r6
 8001226:	46a9      	mov	r9, r5
 8001228:	46a0      	mov	r8, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	464d      	mov	r5, r9
 800122e:	432e      	orrs	r6, r5
 8001230:	d12f      	bne.n	8001292 <__gedf2+0xce>
 8001232:	2a00      	cmp	r2, #0
 8001234:	d1ee      	bne.n	8001214 <__gedf2+0x50>
 8001236:	433c      	orrs	r4, r7
 8001238:	4265      	negs	r5, r4
 800123a:	4165      	adcs	r5, r4
 800123c:	2d00      	cmp	r5, #0
 800123e:	d0e9      	beq.n	8001214 <__gedf2+0x50>
 8001240:	2800      	cmp	r0, #0
 8001242:	d1ed      	bne.n	8001220 <__gedf2+0x5c>
 8001244:	2001      	movs	r0, #1
 8001246:	4240      	negs	r0, r0
 8001248:	e7ea      	b.n	8001220 <__gedf2+0x5c>
 800124a:	003d      	movs	r5, r7
 800124c:	4325      	orrs	r5, r4
 800124e:	d120      	bne.n	8001292 <__gedf2+0xce>
 8001250:	4293      	cmp	r3, r2
 8001252:	d0eb      	beq.n	800122c <__gedf2+0x68>
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1dd      	bne.n	8001214 <__gedf2+0x50>
 8001258:	464c      	mov	r4, r9
 800125a:	4326      	orrs	r6, r4
 800125c:	d1da      	bne.n	8001214 <__gedf2+0x50>
 800125e:	e7db      	b.n	8001218 <__gedf2+0x54>
 8001260:	465b      	mov	r3, fp
 8001262:	2000      	movs	r0, #0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0db      	beq.n	8001220 <__gedf2+0x5c>
 8001268:	e7d6      	b.n	8001218 <__gedf2+0x54>
 800126a:	429a      	cmp	r2, r3
 800126c:	dc0a      	bgt.n	8001284 <__gedf2+0xc0>
 800126e:	dbe7      	blt.n	8001240 <__gedf2+0x7c>
 8001270:	454f      	cmp	r7, r9
 8001272:	d8d1      	bhi.n	8001218 <__gedf2+0x54>
 8001274:	d010      	beq.n	8001298 <__gedf2+0xd4>
 8001276:	2000      	movs	r0, #0
 8001278:	454f      	cmp	r7, r9
 800127a:	d2d1      	bcs.n	8001220 <__gedf2+0x5c>
 800127c:	2900      	cmp	r1, #0
 800127e:	d0e1      	beq.n	8001244 <__gedf2+0x80>
 8001280:	0008      	movs	r0, r1
 8001282:	e7cd      	b.n	8001220 <__gedf2+0x5c>
 8001284:	4243      	negs	r3, r0
 8001286:	4158      	adcs	r0, r3
 8001288:	2302      	movs	r3, #2
 800128a:	4240      	negs	r0, r0
 800128c:	4018      	ands	r0, r3
 800128e:	3801      	subs	r0, #1
 8001290:	e7c6      	b.n	8001220 <__gedf2+0x5c>
 8001292:	2002      	movs	r0, #2
 8001294:	4240      	negs	r0, r0
 8001296:	e7c3      	b.n	8001220 <__gedf2+0x5c>
 8001298:	45c4      	cmp	ip, r8
 800129a:	d8bd      	bhi.n	8001218 <__gedf2+0x54>
 800129c:	2000      	movs	r0, #0
 800129e:	45c4      	cmp	ip, r8
 80012a0:	d2be      	bcs.n	8001220 <__gedf2+0x5c>
 80012a2:	e7eb      	b.n	800127c <__gedf2+0xb8>
 80012a4:	000007ff 	.word	0x000007ff

080012a8 <__ledf2>:
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	464e      	mov	r6, r9
 80012ac:	4645      	mov	r5, r8
 80012ae:	4657      	mov	r7, sl
 80012b0:	46de      	mov	lr, fp
 80012b2:	0004      	movs	r4, r0
 80012b4:	0018      	movs	r0, r3
 80012b6:	b5e0      	push	{r5, r6, r7, lr}
 80012b8:	0016      	movs	r6, r2
 80012ba:	031b      	lsls	r3, r3, #12
 80012bc:	0b1b      	lsrs	r3, r3, #12
 80012be:	4d31      	ldr	r5, [pc, #196]	; (8001384 <__ledf2+0xdc>)
 80012c0:	030f      	lsls	r7, r1, #12
 80012c2:	004a      	lsls	r2, r1, #1
 80012c4:	4699      	mov	r9, r3
 80012c6:	0043      	lsls	r3, r0, #1
 80012c8:	46a4      	mov	ip, r4
 80012ca:	46b0      	mov	r8, r6
 80012cc:	0b3f      	lsrs	r7, r7, #12
 80012ce:	0d52      	lsrs	r2, r2, #21
 80012d0:	0fc9      	lsrs	r1, r1, #31
 80012d2:	0d5b      	lsrs	r3, r3, #21
 80012d4:	0fc0      	lsrs	r0, r0, #31
 80012d6:	42aa      	cmp	r2, r5
 80012d8:	d011      	beq.n	80012fe <__ledf2+0x56>
 80012da:	42ab      	cmp	r3, r5
 80012dc:	d014      	beq.n	8001308 <__ledf2+0x60>
 80012de:	2a00      	cmp	r2, #0
 80012e0:	d12f      	bne.n	8001342 <__ledf2+0x9a>
 80012e2:	433c      	orrs	r4, r7
 80012e4:	46a3      	mov	fp, r4
 80012e6:	4265      	negs	r5, r4
 80012e8:	4165      	adcs	r5, r4
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d114      	bne.n	8001318 <__ledf2+0x70>
 80012ee:	464c      	mov	r4, r9
 80012f0:	4326      	orrs	r6, r4
 80012f2:	d111      	bne.n	8001318 <__ledf2+0x70>
 80012f4:	465b      	mov	r3, fp
 80012f6:	2000      	movs	r0, #0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d017      	beq.n	800132c <__ledf2+0x84>
 80012fc:	e010      	b.n	8001320 <__ledf2+0x78>
 80012fe:	003d      	movs	r5, r7
 8001300:	4325      	orrs	r5, r4
 8001302:	d112      	bne.n	800132a <__ledf2+0x82>
 8001304:	4293      	cmp	r3, r2
 8001306:	d11c      	bne.n	8001342 <__ledf2+0x9a>
 8001308:	464d      	mov	r5, r9
 800130a:	432e      	orrs	r6, r5
 800130c:	d10d      	bne.n	800132a <__ledf2+0x82>
 800130e:	2a00      	cmp	r2, #0
 8001310:	d104      	bne.n	800131c <__ledf2+0x74>
 8001312:	433c      	orrs	r4, r7
 8001314:	4265      	negs	r5, r4
 8001316:	4165      	adcs	r5, r4
 8001318:	2d00      	cmp	r5, #0
 800131a:	d10d      	bne.n	8001338 <__ledf2+0x90>
 800131c:	4281      	cmp	r1, r0
 800131e:	d016      	beq.n	800134e <__ledf2+0xa6>
 8001320:	2002      	movs	r0, #2
 8001322:	3901      	subs	r1, #1
 8001324:	4008      	ands	r0, r1
 8001326:	3801      	subs	r0, #1
 8001328:	e000      	b.n	800132c <__ledf2+0x84>
 800132a:	2002      	movs	r0, #2
 800132c:	bcf0      	pop	{r4, r5, r6, r7}
 800132e:	46bb      	mov	fp, r7
 8001330:	46b2      	mov	sl, r6
 8001332:	46a9      	mov	r9, r5
 8001334:	46a0      	mov	r8, r4
 8001336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001338:	2800      	cmp	r0, #0
 800133a:	d1f7      	bne.n	800132c <__ledf2+0x84>
 800133c:	2001      	movs	r0, #1
 800133e:	4240      	negs	r0, r0
 8001340:	e7f4      	b.n	800132c <__ledf2+0x84>
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1ea      	bne.n	800131c <__ledf2+0x74>
 8001346:	464c      	mov	r4, r9
 8001348:	4326      	orrs	r6, r4
 800134a:	d1e7      	bne.n	800131c <__ledf2+0x74>
 800134c:	e7e8      	b.n	8001320 <__ledf2+0x78>
 800134e:	429a      	cmp	r2, r3
 8001350:	dd06      	ble.n	8001360 <__ledf2+0xb8>
 8001352:	4243      	negs	r3, r0
 8001354:	4158      	adcs	r0, r3
 8001356:	2302      	movs	r3, #2
 8001358:	4240      	negs	r0, r0
 800135a:	4018      	ands	r0, r3
 800135c:	3801      	subs	r0, #1
 800135e:	e7e5      	b.n	800132c <__ledf2+0x84>
 8001360:	429a      	cmp	r2, r3
 8001362:	dbe9      	blt.n	8001338 <__ledf2+0x90>
 8001364:	454f      	cmp	r7, r9
 8001366:	d8db      	bhi.n	8001320 <__ledf2+0x78>
 8001368:	d006      	beq.n	8001378 <__ledf2+0xd0>
 800136a:	2000      	movs	r0, #0
 800136c:	454f      	cmp	r7, r9
 800136e:	d2dd      	bcs.n	800132c <__ledf2+0x84>
 8001370:	2900      	cmp	r1, #0
 8001372:	d0e3      	beq.n	800133c <__ledf2+0x94>
 8001374:	0008      	movs	r0, r1
 8001376:	e7d9      	b.n	800132c <__ledf2+0x84>
 8001378:	45c4      	cmp	ip, r8
 800137a:	d8d1      	bhi.n	8001320 <__ledf2+0x78>
 800137c:	2000      	movs	r0, #0
 800137e:	45c4      	cmp	ip, r8
 8001380:	d2d4      	bcs.n	800132c <__ledf2+0x84>
 8001382:	e7f5      	b.n	8001370 <__ledf2+0xc8>
 8001384:	000007ff 	.word	0x000007ff

08001388 <__aeabi_dmul>:
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	4657      	mov	r7, sl
 800138c:	464e      	mov	r6, r9
 800138e:	4645      	mov	r5, r8
 8001390:	46de      	mov	lr, fp
 8001392:	b5e0      	push	{r5, r6, r7, lr}
 8001394:	4698      	mov	r8, r3
 8001396:	030c      	lsls	r4, r1, #12
 8001398:	004b      	lsls	r3, r1, #1
 800139a:	0006      	movs	r6, r0
 800139c:	4692      	mov	sl, r2
 800139e:	b087      	sub	sp, #28
 80013a0:	0b24      	lsrs	r4, r4, #12
 80013a2:	0d5b      	lsrs	r3, r3, #21
 80013a4:	0fcf      	lsrs	r7, r1, #31
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d06c      	beq.n	8001484 <__aeabi_dmul+0xfc>
 80013aa:	4add      	ldr	r2, [pc, #884]	; (8001720 <__aeabi_dmul+0x398>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d100      	bne.n	80013b2 <__aeabi_dmul+0x2a>
 80013b0:	e086      	b.n	80014c0 <__aeabi_dmul+0x138>
 80013b2:	0f42      	lsrs	r2, r0, #29
 80013b4:	00e4      	lsls	r4, r4, #3
 80013b6:	4314      	orrs	r4, r2
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	0412      	lsls	r2, r2, #16
 80013bc:	4314      	orrs	r4, r2
 80013be:	4ad9      	ldr	r2, [pc, #868]	; (8001724 <__aeabi_dmul+0x39c>)
 80013c0:	00c5      	lsls	r5, r0, #3
 80013c2:	4694      	mov	ip, r2
 80013c4:	4463      	add	r3, ip
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2300      	movs	r3, #0
 80013ca:	4699      	mov	r9, r3
 80013cc:	469b      	mov	fp, r3
 80013ce:	4643      	mov	r3, r8
 80013d0:	4642      	mov	r2, r8
 80013d2:	031e      	lsls	r6, r3, #12
 80013d4:	0fd2      	lsrs	r2, r2, #31
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4650      	mov	r0, sl
 80013da:	4690      	mov	r8, r2
 80013dc:	0b36      	lsrs	r6, r6, #12
 80013de:	0d5b      	lsrs	r3, r3, #21
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dmul+0x5c>
 80013e2:	e078      	b.n	80014d6 <__aeabi_dmul+0x14e>
 80013e4:	4ace      	ldr	r2, [pc, #824]	; (8001720 <__aeabi_dmul+0x398>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d01d      	beq.n	8001426 <__aeabi_dmul+0x9e>
 80013ea:	49ce      	ldr	r1, [pc, #824]	; (8001724 <__aeabi_dmul+0x39c>)
 80013ec:	0f42      	lsrs	r2, r0, #29
 80013ee:	468c      	mov	ip, r1
 80013f0:	9900      	ldr	r1, [sp, #0]
 80013f2:	4463      	add	r3, ip
 80013f4:	00f6      	lsls	r6, r6, #3
 80013f6:	468c      	mov	ip, r1
 80013f8:	4316      	orrs	r6, r2
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	449c      	add	ip, r3
 80013fe:	0412      	lsls	r2, r2, #16
 8001400:	4663      	mov	r3, ip
 8001402:	4316      	orrs	r6, r2
 8001404:	00c2      	lsls	r2, r0, #3
 8001406:	2000      	movs	r0, #0
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	9900      	ldr	r1, [sp, #0]
 800140c:	4643      	mov	r3, r8
 800140e:	3101      	adds	r1, #1
 8001410:	468c      	mov	ip, r1
 8001412:	4649      	mov	r1, r9
 8001414:	407b      	eors	r3, r7
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	290f      	cmp	r1, #15
 800141a:	d900      	bls.n	800141e <__aeabi_dmul+0x96>
 800141c:	e07e      	b.n	800151c <__aeabi_dmul+0x194>
 800141e:	4bc2      	ldr	r3, [pc, #776]	; (8001728 <__aeabi_dmul+0x3a0>)
 8001420:	0089      	lsls	r1, r1, #2
 8001422:	5859      	ldr	r1, [r3, r1]
 8001424:	468f      	mov	pc, r1
 8001426:	4652      	mov	r2, sl
 8001428:	9b00      	ldr	r3, [sp, #0]
 800142a:	4332      	orrs	r2, r6
 800142c:	d000      	beq.n	8001430 <__aeabi_dmul+0xa8>
 800142e:	e156      	b.n	80016de <__aeabi_dmul+0x356>
 8001430:	49bb      	ldr	r1, [pc, #748]	; (8001720 <__aeabi_dmul+0x398>)
 8001432:	2600      	movs	r6, #0
 8001434:	468c      	mov	ip, r1
 8001436:	4463      	add	r3, ip
 8001438:	4649      	mov	r1, r9
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2302      	movs	r3, #2
 800143e:	4319      	orrs	r1, r3
 8001440:	4689      	mov	r9, r1
 8001442:	2002      	movs	r0, #2
 8001444:	e7e1      	b.n	800140a <__aeabi_dmul+0x82>
 8001446:	4643      	mov	r3, r8
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	0034      	movs	r4, r6
 800144c:	0015      	movs	r5, r2
 800144e:	4683      	mov	fp, r0
 8001450:	465b      	mov	r3, fp
 8001452:	2b02      	cmp	r3, #2
 8001454:	d05e      	beq.n	8001514 <__aeabi_dmul+0x18c>
 8001456:	2b03      	cmp	r3, #3
 8001458:	d100      	bne.n	800145c <__aeabi_dmul+0xd4>
 800145a:	e1f3      	b.n	8001844 <__aeabi_dmul+0x4bc>
 800145c:	2b01      	cmp	r3, #1
 800145e:	d000      	beq.n	8001462 <__aeabi_dmul+0xda>
 8001460:	e118      	b.n	8001694 <__aeabi_dmul+0x30c>
 8001462:	2200      	movs	r2, #0
 8001464:	2400      	movs	r4, #0
 8001466:	2500      	movs	r5, #0
 8001468:	9b01      	ldr	r3, [sp, #4]
 800146a:	0512      	lsls	r2, r2, #20
 800146c:	4322      	orrs	r2, r4
 800146e:	07db      	lsls	r3, r3, #31
 8001470:	431a      	orrs	r2, r3
 8001472:	0028      	movs	r0, r5
 8001474:	0011      	movs	r1, r2
 8001476:	b007      	add	sp, #28
 8001478:	bcf0      	pop	{r4, r5, r6, r7}
 800147a:	46bb      	mov	fp, r7
 800147c:	46b2      	mov	sl, r6
 800147e:	46a9      	mov	r9, r5
 8001480:	46a0      	mov	r8, r4
 8001482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001484:	0025      	movs	r5, r4
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dmul+0x104>
 800148a:	e141      	b.n	8001710 <__aeabi_dmul+0x388>
 800148c:	2c00      	cmp	r4, #0
 800148e:	d100      	bne.n	8001492 <__aeabi_dmul+0x10a>
 8001490:	e1ad      	b.n	80017ee <__aeabi_dmul+0x466>
 8001492:	0020      	movs	r0, r4
 8001494:	f000 fe20 	bl	80020d8 <__clzsi2>
 8001498:	0001      	movs	r1, r0
 800149a:	0002      	movs	r2, r0
 800149c:	390b      	subs	r1, #11
 800149e:	231d      	movs	r3, #29
 80014a0:	0010      	movs	r0, r2
 80014a2:	1a5b      	subs	r3, r3, r1
 80014a4:	0031      	movs	r1, r6
 80014a6:	0035      	movs	r5, r6
 80014a8:	3808      	subs	r0, #8
 80014aa:	4084      	lsls	r4, r0
 80014ac:	40d9      	lsrs	r1, r3
 80014ae:	4085      	lsls	r5, r0
 80014b0:	430c      	orrs	r4, r1
 80014b2:	489e      	ldr	r0, [pc, #632]	; (800172c <__aeabi_dmul+0x3a4>)
 80014b4:	1a83      	subs	r3, r0, r2
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2300      	movs	r3, #0
 80014ba:	4699      	mov	r9, r3
 80014bc:	469b      	mov	fp, r3
 80014be:	e786      	b.n	80013ce <__aeabi_dmul+0x46>
 80014c0:	0005      	movs	r5, r0
 80014c2:	4325      	orrs	r5, r4
 80014c4:	d000      	beq.n	80014c8 <__aeabi_dmul+0x140>
 80014c6:	e11c      	b.n	8001702 <__aeabi_dmul+0x37a>
 80014c8:	2208      	movs	r2, #8
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2302      	movs	r3, #2
 80014ce:	2400      	movs	r4, #0
 80014d0:	4691      	mov	r9, r2
 80014d2:	469b      	mov	fp, r3
 80014d4:	e77b      	b.n	80013ce <__aeabi_dmul+0x46>
 80014d6:	4652      	mov	r2, sl
 80014d8:	4332      	orrs	r2, r6
 80014da:	d100      	bne.n	80014de <__aeabi_dmul+0x156>
 80014dc:	e10a      	b.n	80016f4 <__aeabi_dmul+0x36c>
 80014de:	2e00      	cmp	r6, #0
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dmul+0x15c>
 80014e2:	e176      	b.n	80017d2 <__aeabi_dmul+0x44a>
 80014e4:	0030      	movs	r0, r6
 80014e6:	f000 fdf7 	bl	80020d8 <__clzsi2>
 80014ea:	0002      	movs	r2, r0
 80014ec:	3a0b      	subs	r2, #11
 80014ee:	231d      	movs	r3, #29
 80014f0:	0001      	movs	r1, r0
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	4652      	mov	r2, sl
 80014f6:	3908      	subs	r1, #8
 80014f8:	40da      	lsrs	r2, r3
 80014fa:	408e      	lsls	r6, r1
 80014fc:	4316      	orrs	r6, r2
 80014fe:	4652      	mov	r2, sl
 8001500:	408a      	lsls	r2, r1
 8001502:	9b00      	ldr	r3, [sp, #0]
 8001504:	4989      	ldr	r1, [pc, #548]	; (800172c <__aeabi_dmul+0x3a4>)
 8001506:	1a18      	subs	r0, r3, r0
 8001508:	0003      	movs	r3, r0
 800150a:	468c      	mov	ip, r1
 800150c:	4463      	add	r3, ip
 800150e:	2000      	movs	r0, #0
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	e77a      	b.n	800140a <__aeabi_dmul+0x82>
 8001514:	2400      	movs	r4, #0
 8001516:	2500      	movs	r5, #0
 8001518:	4a81      	ldr	r2, [pc, #516]	; (8001720 <__aeabi_dmul+0x398>)
 800151a:	e7a5      	b.n	8001468 <__aeabi_dmul+0xe0>
 800151c:	0c2f      	lsrs	r7, r5, #16
 800151e:	042d      	lsls	r5, r5, #16
 8001520:	0c2d      	lsrs	r5, r5, #16
 8001522:	002b      	movs	r3, r5
 8001524:	0c11      	lsrs	r1, r2, #16
 8001526:	0412      	lsls	r2, r2, #16
 8001528:	0c12      	lsrs	r2, r2, #16
 800152a:	4353      	muls	r3, r2
 800152c:	4698      	mov	r8, r3
 800152e:	0013      	movs	r3, r2
 8001530:	0028      	movs	r0, r5
 8001532:	437b      	muls	r3, r7
 8001534:	4699      	mov	r9, r3
 8001536:	4348      	muls	r0, r1
 8001538:	4448      	add	r0, r9
 800153a:	4683      	mov	fp, r0
 800153c:	4640      	mov	r0, r8
 800153e:	000b      	movs	r3, r1
 8001540:	0c00      	lsrs	r0, r0, #16
 8001542:	4682      	mov	sl, r0
 8001544:	4658      	mov	r0, fp
 8001546:	437b      	muls	r3, r7
 8001548:	4450      	add	r0, sl
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	4581      	cmp	r9, r0
 800154e:	d906      	bls.n	800155e <__aeabi_dmul+0x1d6>
 8001550:	469a      	mov	sl, r3
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	025b      	lsls	r3, r3, #9
 8001556:	4699      	mov	r9, r3
 8001558:	44ca      	add	sl, r9
 800155a:	4653      	mov	r3, sl
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	0c03      	lsrs	r3, r0, #16
 8001560:	469b      	mov	fp, r3
 8001562:	4643      	mov	r3, r8
 8001564:	041b      	lsls	r3, r3, #16
 8001566:	0400      	lsls	r0, r0, #16
 8001568:	0c1b      	lsrs	r3, r3, #16
 800156a:	4698      	mov	r8, r3
 800156c:	0003      	movs	r3, r0
 800156e:	4443      	add	r3, r8
 8001570:	9304      	str	r3, [sp, #16]
 8001572:	0c33      	lsrs	r3, r6, #16
 8001574:	4699      	mov	r9, r3
 8001576:	002b      	movs	r3, r5
 8001578:	0436      	lsls	r6, r6, #16
 800157a:	0c36      	lsrs	r6, r6, #16
 800157c:	4373      	muls	r3, r6
 800157e:	4698      	mov	r8, r3
 8001580:	0033      	movs	r3, r6
 8001582:	437b      	muls	r3, r7
 8001584:	469a      	mov	sl, r3
 8001586:	464b      	mov	r3, r9
 8001588:	435d      	muls	r5, r3
 800158a:	435f      	muls	r7, r3
 800158c:	4643      	mov	r3, r8
 800158e:	4455      	add	r5, sl
 8001590:	0c18      	lsrs	r0, r3, #16
 8001592:	1940      	adds	r0, r0, r5
 8001594:	4582      	cmp	sl, r0
 8001596:	d903      	bls.n	80015a0 <__aeabi_dmul+0x218>
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	025b      	lsls	r3, r3, #9
 800159c:	469a      	mov	sl, r3
 800159e:	4457      	add	r7, sl
 80015a0:	0c05      	lsrs	r5, r0, #16
 80015a2:	19eb      	adds	r3, r5, r7
 80015a4:	9305      	str	r3, [sp, #20]
 80015a6:	4643      	mov	r3, r8
 80015a8:	041d      	lsls	r5, r3, #16
 80015aa:	0c2d      	lsrs	r5, r5, #16
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	1940      	adds	r0, r0, r5
 80015b0:	0c25      	lsrs	r5, r4, #16
 80015b2:	0424      	lsls	r4, r4, #16
 80015b4:	0c24      	lsrs	r4, r4, #16
 80015b6:	0027      	movs	r7, r4
 80015b8:	4357      	muls	r7, r2
 80015ba:	436a      	muls	r2, r5
 80015bc:	4690      	mov	r8, r2
 80015be:	002a      	movs	r2, r5
 80015c0:	0c3b      	lsrs	r3, r7, #16
 80015c2:	469a      	mov	sl, r3
 80015c4:	434a      	muls	r2, r1
 80015c6:	4361      	muls	r1, r4
 80015c8:	4441      	add	r1, r8
 80015ca:	4451      	add	r1, sl
 80015cc:	4483      	add	fp, r0
 80015ce:	4588      	cmp	r8, r1
 80015d0:	d903      	bls.n	80015da <__aeabi_dmul+0x252>
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	025b      	lsls	r3, r3, #9
 80015d6:	4698      	mov	r8, r3
 80015d8:	4442      	add	r2, r8
 80015da:	043f      	lsls	r7, r7, #16
 80015dc:	0c0b      	lsrs	r3, r1, #16
 80015de:	0c3f      	lsrs	r7, r7, #16
 80015e0:	0409      	lsls	r1, r1, #16
 80015e2:	19c9      	adds	r1, r1, r7
 80015e4:	0027      	movs	r7, r4
 80015e6:	4698      	mov	r8, r3
 80015e8:	464b      	mov	r3, r9
 80015ea:	4377      	muls	r7, r6
 80015ec:	435c      	muls	r4, r3
 80015ee:	436e      	muls	r6, r5
 80015f0:	435d      	muls	r5, r3
 80015f2:	0c3b      	lsrs	r3, r7, #16
 80015f4:	4699      	mov	r9, r3
 80015f6:	19a4      	adds	r4, r4, r6
 80015f8:	444c      	add	r4, r9
 80015fa:	4442      	add	r2, r8
 80015fc:	9503      	str	r5, [sp, #12]
 80015fe:	42a6      	cmp	r6, r4
 8001600:	d904      	bls.n	800160c <__aeabi_dmul+0x284>
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	025b      	lsls	r3, r3, #9
 8001606:	4698      	mov	r8, r3
 8001608:	4445      	add	r5, r8
 800160a:	9503      	str	r5, [sp, #12]
 800160c:	9b02      	ldr	r3, [sp, #8]
 800160e:	043f      	lsls	r7, r7, #16
 8001610:	445b      	add	r3, fp
 8001612:	001e      	movs	r6, r3
 8001614:	4283      	cmp	r3, r0
 8001616:	4180      	sbcs	r0, r0
 8001618:	0423      	lsls	r3, r4, #16
 800161a:	4698      	mov	r8, r3
 800161c:	9b05      	ldr	r3, [sp, #20]
 800161e:	0c3f      	lsrs	r7, r7, #16
 8001620:	4447      	add	r7, r8
 8001622:	4698      	mov	r8, r3
 8001624:	1876      	adds	r6, r6, r1
 8001626:	428e      	cmp	r6, r1
 8001628:	4189      	sbcs	r1, r1
 800162a:	4447      	add	r7, r8
 800162c:	4240      	negs	r0, r0
 800162e:	183d      	adds	r5, r7, r0
 8001630:	46a8      	mov	r8, r5
 8001632:	4693      	mov	fp, r2
 8001634:	4249      	negs	r1, r1
 8001636:	468a      	mov	sl, r1
 8001638:	44c3      	add	fp, r8
 800163a:	429f      	cmp	r7, r3
 800163c:	41bf      	sbcs	r7, r7
 800163e:	4580      	cmp	r8, r0
 8001640:	4180      	sbcs	r0, r0
 8001642:	9b03      	ldr	r3, [sp, #12]
 8001644:	44da      	add	sl, fp
 8001646:	4698      	mov	r8, r3
 8001648:	4653      	mov	r3, sl
 800164a:	4240      	negs	r0, r0
 800164c:	427f      	negs	r7, r7
 800164e:	4307      	orrs	r7, r0
 8001650:	0c24      	lsrs	r4, r4, #16
 8001652:	4593      	cmp	fp, r2
 8001654:	4192      	sbcs	r2, r2
 8001656:	458a      	cmp	sl, r1
 8001658:	4189      	sbcs	r1, r1
 800165a:	193f      	adds	r7, r7, r4
 800165c:	0ddc      	lsrs	r4, r3, #23
 800165e:	9b04      	ldr	r3, [sp, #16]
 8001660:	0275      	lsls	r5, r6, #9
 8001662:	431d      	orrs	r5, r3
 8001664:	1e68      	subs	r0, r5, #1
 8001666:	4185      	sbcs	r5, r0
 8001668:	4653      	mov	r3, sl
 800166a:	4252      	negs	r2, r2
 800166c:	4249      	negs	r1, r1
 800166e:	430a      	orrs	r2, r1
 8001670:	18bf      	adds	r7, r7, r2
 8001672:	4447      	add	r7, r8
 8001674:	0df6      	lsrs	r6, r6, #23
 8001676:	027f      	lsls	r7, r7, #9
 8001678:	4335      	orrs	r5, r6
 800167a:	025a      	lsls	r2, r3, #9
 800167c:	433c      	orrs	r4, r7
 800167e:	4315      	orrs	r5, r2
 8001680:	01fb      	lsls	r3, r7, #7
 8001682:	d400      	bmi.n	8001686 <__aeabi_dmul+0x2fe>
 8001684:	e0c1      	b.n	800180a <__aeabi_dmul+0x482>
 8001686:	2101      	movs	r1, #1
 8001688:	086a      	lsrs	r2, r5, #1
 800168a:	400d      	ands	r5, r1
 800168c:	4315      	orrs	r5, r2
 800168e:	07e2      	lsls	r2, r4, #31
 8001690:	4315      	orrs	r5, r2
 8001692:	0864      	lsrs	r4, r4, #1
 8001694:	4926      	ldr	r1, [pc, #152]	; (8001730 <__aeabi_dmul+0x3a8>)
 8001696:	4461      	add	r1, ip
 8001698:	2900      	cmp	r1, #0
 800169a:	dd56      	ble.n	800174a <__aeabi_dmul+0x3c2>
 800169c:	076b      	lsls	r3, r5, #29
 800169e:	d009      	beq.n	80016b4 <__aeabi_dmul+0x32c>
 80016a0:	220f      	movs	r2, #15
 80016a2:	402a      	ands	r2, r5
 80016a4:	2a04      	cmp	r2, #4
 80016a6:	d005      	beq.n	80016b4 <__aeabi_dmul+0x32c>
 80016a8:	1d2a      	adds	r2, r5, #4
 80016aa:	42aa      	cmp	r2, r5
 80016ac:	41ad      	sbcs	r5, r5
 80016ae:	426d      	negs	r5, r5
 80016b0:	1964      	adds	r4, r4, r5
 80016b2:	0015      	movs	r5, r2
 80016b4:	01e3      	lsls	r3, r4, #7
 80016b6:	d504      	bpl.n	80016c2 <__aeabi_dmul+0x33a>
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <__aeabi_dmul+0x3ac>)
 80016bc:	00c9      	lsls	r1, r1, #3
 80016be:	4014      	ands	r4, r2
 80016c0:	4461      	add	r1, ip
 80016c2:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <__aeabi_dmul+0x3b0>)
 80016c4:	4291      	cmp	r1, r2
 80016c6:	dd00      	ble.n	80016ca <__aeabi_dmul+0x342>
 80016c8:	e724      	b.n	8001514 <__aeabi_dmul+0x18c>
 80016ca:	0762      	lsls	r2, r4, #29
 80016cc:	08ed      	lsrs	r5, r5, #3
 80016ce:	0264      	lsls	r4, r4, #9
 80016d0:	0549      	lsls	r1, r1, #21
 80016d2:	4315      	orrs	r5, r2
 80016d4:	0b24      	lsrs	r4, r4, #12
 80016d6:	0d4a      	lsrs	r2, r1, #21
 80016d8:	e6c6      	b.n	8001468 <__aeabi_dmul+0xe0>
 80016da:	9701      	str	r7, [sp, #4]
 80016dc:	e6b8      	b.n	8001450 <__aeabi_dmul+0xc8>
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <__aeabi_dmul+0x398>)
 80016e0:	2003      	movs	r0, #3
 80016e2:	4694      	mov	ip, r2
 80016e4:	4463      	add	r3, ip
 80016e6:	464a      	mov	r2, r9
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2303      	movs	r3, #3
 80016ec:	431a      	orrs	r2, r3
 80016ee:	4691      	mov	r9, r2
 80016f0:	4652      	mov	r2, sl
 80016f2:	e68a      	b.n	800140a <__aeabi_dmul+0x82>
 80016f4:	4649      	mov	r1, r9
 80016f6:	2301      	movs	r3, #1
 80016f8:	4319      	orrs	r1, r3
 80016fa:	4689      	mov	r9, r1
 80016fc:	2600      	movs	r6, #0
 80016fe:	2001      	movs	r0, #1
 8001700:	e683      	b.n	800140a <__aeabi_dmul+0x82>
 8001702:	220c      	movs	r2, #12
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2303      	movs	r3, #3
 8001708:	0005      	movs	r5, r0
 800170a:	4691      	mov	r9, r2
 800170c:	469b      	mov	fp, r3
 800170e:	e65e      	b.n	80013ce <__aeabi_dmul+0x46>
 8001710:	2304      	movs	r3, #4
 8001712:	4699      	mov	r9, r3
 8001714:	2300      	movs	r3, #0
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	2400      	movs	r4, #0
 800171c:	469b      	mov	fp, r3
 800171e:	e656      	b.n	80013ce <__aeabi_dmul+0x46>
 8001720:	000007ff 	.word	0x000007ff
 8001724:	fffffc01 	.word	0xfffffc01
 8001728:	0800ad78 	.word	0x0800ad78
 800172c:	fffffc0d 	.word	0xfffffc0d
 8001730:	000003ff 	.word	0x000003ff
 8001734:	feffffff 	.word	0xfeffffff
 8001738:	000007fe 	.word	0x000007fe
 800173c:	2300      	movs	r3, #0
 800173e:	2480      	movs	r4, #128	; 0x80
 8001740:	2500      	movs	r5, #0
 8001742:	4a44      	ldr	r2, [pc, #272]	; (8001854 <__aeabi_dmul+0x4cc>)
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	0324      	lsls	r4, r4, #12
 8001748:	e68e      	b.n	8001468 <__aeabi_dmul+0xe0>
 800174a:	2001      	movs	r0, #1
 800174c:	1a40      	subs	r0, r0, r1
 800174e:	2838      	cmp	r0, #56	; 0x38
 8001750:	dd00      	ble.n	8001754 <__aeabi_dmul+0x3cc>
 8001752:	e686      	b.n	8001462 <__aeabi_dmul+0xda>
 8001754:	281f      	cmp	r0, #31
 8001756:	dd5b      	ble.n	8001810 <__aeabi_dmul+0x488>
 8001758:	221f      	movs	r2, #31
 800175a:	0023      	movs	r3, r4
 800175c:	4252      	negs	r2, r2
 800175e:	1a51      	subs	r1, r2, r1
 8001760:	40cb      	lsrs	r3, r1
 8001762:	0019      	movs	r1, r3
 8001764:	2820      	cmp	r0, #32
 8001766:	d003      	beq.n	8001770 <__aeabi_dmul+0x3e8>
 8001768:	4a3b      	ldr	r2, [pc, #236]	; (8001858 <__aeabi_dmul+0x4d0>)
 800176a:	4462      	add	r2, ip
 800176c:	4094      	lsls	r4, r2
 800176e:	4325      	orrs	r5, r4
 8001770:	1e6a      	subs	r2, r5, #1
 8001772:	4195      	sbcs	r5, r2
 8001774:	002a      	movs	r2, r5
 8001776:	430a      	orrs	r2, r1
 8001778:	2107      	movs	r1, #7
 800177a:	000d      	movs	r5, r1
 800177c:	2400      	movs	r4, #0
 800177e:	4015      	ands	r5, r2
 8001780:	4211      	tst	r1, r2
 8001782:	d05b      	beq.n	800183c <__aeabi_dmul+0x4b4>
 8001784:	210f      	movs	r1, #15
 8001786:	2400      	movs	r4, #0
 8001788:	4011      	ands	r1, r2
 800178a:	2904      	cmp	r1, #4
 800178c:	d053      	beq.n	8001836 <__aeabi_dmul+0x4ae>
 800178e:	1d11      	adds	r1, r2, #4
 8001790:	4291      	cmp	r1, r2
 8001792:	4192      	sbcs	r2, r2
 8001794:	4252      	negs	r2, r2
 8001796:	18a4      	adds	r4, r4, r2
 8001798:	000a      	movs	r2, r1
 800179a:	0223      	lsls	r3, r4, #8
 800179c:	d54b      	bpl.n	8001836 <__aeabi_dmul+0x4ae>
 800179e:	2201      	movs	r2, #1
 80017a0:	2400      	movs	r4, #0
 80017a2:	2500      	movs	r5, #0
 80017a4:	e660      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	031b      	lsls	r3, r3, #12
 80017aa:	421c      	tst	r4, r3
 80017ac:	d009      	beq.n	80017c2 <__aeabi_dmul+0x43a>
 80017ae:	421e      	tst	r6, r3
 80017b0:	d107      	bne.n	80017c2 <__aeabi_dmul+0x43a>
 80017b2:	4333      	orrs	r3, r6
 80017b4:	031c      	lsls	r4, r3, #12
 80017b6:	4643      	mov	r3, r8
 80017b8:	0015      	movs	r5, r2
 80017ba:	0b24      	lsrs	r4, r4, #12
 80017bc:	4a25      	ldr	r2, [pc, #148]	; (8001854 <__aeabi_dmul+0x4cc>)
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	e652      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	0312      	lsls	r2, r2, #12
 80017c6:	4314      	orrs	r4, r2
 80017c8:	0324      	lsls	r4, r4, #12
 80017ca:	4a22      	ldr	r2, [pc, #136]	; (8001854 <__aeabi_dmul+0x4cc>)
 80017cc:	0b24      	lsrs	r4, r4, #12
 80017ce:	9701      	str	r7, [sp, #4]
 80017d0:	e64a      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017d2:	f000 fc81 	bl	80020d8 <__clzsi2>
 80017d6:	0003      	movs	r3, r0
 80017d8:	001a      	movs	r2, r3
 80017da:	3215      	adds	r2, #21
 80017dc:	3020      	adds	r0, #32
 80017de:	2a1c      	cmp	r2, #28
 80017e0:	dc00      	bgt.n	80017e4 <__aeabi_dmul+0x45c>
 80017e2:	e684      	b.n	80014ee <__aeabi_dmul+0x166>
 80017e4:	4656      	mov	r6, sl
 80017e6:	3b08      	subs	r3, #8
 80017e8:	2200      	movs	r2, #0
 80017ea:	409e      	lsls	r6, r3
 80017ec:	e689      	b.n	8001502 <__aeabi_dmul+0x17a>
 80017ee:	f000 fc73 	bl	80020d8 <__clzsi2>
 80017f2:	0001      	movs	r1, r0
 80017f4:	0002      	movs	r2, r0
 80017f6:	3115      	adds	r1, #21
 80017f8:	3220      	adds	r2, #32
 80017fa:	291c      	cmp	r1, #28
 80017fc:	dc00      	bgt.n	8001800 <__aeabi_dmul+0x478>
 80017fe:	e64e      	b.n	800149e <__aeabi_dmul+0x116>
 8001800:	0034      	movs	r4, r6
 8001802:	3808      	subs	r0, #8
 8001804:	2500      	movs	r5, #0
 8001806:	4084      	lsls	r4, r0
 8001808:	e653      	b.n	80014b2 <__aeabi_dmul+0x12a>
 800180a:	9b00      	ldr	r3, [sp, #0]
 800180c:	469c      	mov	ip, r3
 800180e:	e741      	b.n	8001694 <__aeabi_dmul+0x30c>
 8001810:	4912      	ldr	r1, [pc, #72]	; (800185c <__aeabi_dmul+0x4d4>)
 8001812:	0022      	movs	r2, r4
 8001814:	4461      	add	r1, ip
 8001816:	002e      	movs	r6, r5
 8001818:	408d      	lsls	r5, r1
 800181a:	408a      	lsls	r2, r1
 800181c:	40c6      	lsrs	r6, r0
 800181e:	1e69      	subs	r1, r5, #1
 8001820:	418d      	sbcs	r5, r1
 8001822:	4332      	orrs	r2, r6
 8001824:	432a      	orrs	r2, r5
 8001826:	40c4      	lsrs	r4, r0
 8001828:	0753      	lsls	r3, r2, #29
 800182a:	d0b6      	beq.n	800179a <__aeabi_dmul+0x412>
 800182c:	210f      	movs	r1, #15
 800182e:	4011      	ands	r1, r2
 8001830:	2904      	cmp	r1, #4
 8001832:	d1ac      	bne.n	800178e <__aeabi_dmul+0x406>
 8001834:	e7b1      	b.n	800179a <__aeabi_dmul+0x412>
 8001836:	0765      	lsls	r5, r4, #29
 8001838:	0264      	lsls	r4, r4, #9
 800183a:	0b24      	lsrs	r4, r4, #12
 800183c:	08d2      	lsrs	r2, r2, #3
 800183e:	4315      	orrs	r5, r2
 8001840:	2200      	movs	r2, #0
 8001842:	e611      	b.n	8001468 <__aeabi_dmul+0xe0>
 8001844:	2280      	movs	r2, #128	; 0x80
 8001846:	0312      	lsls	r2, r2, #12
 8001848:	4314      	orrs	r4, r2
 800184a:	0324      	lsls	r4, r4, #12
 800184c:	4a01      	ldr	r2, [pc, #4]	; (8001854 <__aeabi_dmul+0x4cc>)
 800184e:	0b24      	lsrs	r4, r4, #12
 8001850:	e60a      	b.n	8001468 <__aeabi_dmul+0xe0>
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	000007ff 	.word	0x000007ff
 8001858:	0000043e 	.word	0x0000043e
 800185c:	0000041e 	.word	0x0000041e

08001860 <__aeabi_dsub>:
 8001860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001862:	4657      	mov	r7, sl
 8001864:	464e      	mov	r6, r9
 8001866:	4645      	mov	r5, r8
 8001868:	46de      	mov	lr, fp
 800186a:	0004      	movs	r4, r0
 800186c:	b5e0      	push	{r5, r6, r7, lr}
 800186e:	001f      	movs	r7, r3
 8001870:	0010      	movs	r0, r2
 8001872:	030b      	lsls	r3, r1, #12
 8001874:	0f62      	lsrs	r2, r4, #29
 8001876:	004e      	lsls	r6, r1, #1
 8001878:	0fcd      	lsrs	r5, r1, #31
 800187a:	0a5b      	lsrs	r3, r3, #9
 800187c:	0339      	lsls	r1, r7, #12
 800187e:	4313      	orrs	r3, r2
 8001880:	0a49      	lsrs	r1, r1, #9
 8001882:	00e2      	lsls	r2, r4, #3
 8001884:	0f44      	lsrs	r4, r0, #29
 8001886:	4321      	orrs	r1, r4
 8001888:	4cc2      	ldr	r4, [pc, #776]	; (8001b94 <__aeabi_dsub+0x334>)
 800188a:	4691      	mov	r9, r2
 800188c:	4692      	mov	sl, r2
 800188e:	00c0      	lsls	r0, r0, #3
 8001890:	007a      	lsls	r2, r7, #1
 8001892:	4680      	mov	r8, r0
 8001894:	0d76      	lsrs	r6, r6, #21
 8001896:	0d52      	lsrs	r2, r2, #21
 8001898:	0fff      	lsrs	r7, r7, #31
 800189a:	42a2      	cmp	r2, r4
 800189c:	d100      	bne.n	80018a0 <__aeabi_dsub+0x40>
 800189e:	e0b4      	b.n	8001a0a <__aeabi_dsub+0x1aa>
 80018a0:	2401      	movs	r4, #1
 80018a2:	4067      	eors	r7, r4
 80018a4:	46bb      	mov	fp, r7
 80018a6:	42bd      	cmp	r5, r7
 80018a8:	d100      	bne.n	80018ac <__aeabi_dsub+0x4c>
 80018aa:	e088      	b.n	80019be <__aeabi_dsub+0x15e>
 80018ac:	1ab4      	subs	r4, r6, r2
 80018ae:	46a4      	mov	ip, r4
 80018b0:	2c00      	cmp	r4, #0
 80018b2:	dc00      	bgt.n	80018b6 <__aeabi_dsub+0x56>
 80018b4:	e0b2      	b.n	8001a1c <__aeabi_dsub+0x1bc>
 80018b6:	2a00      	cmp	r2, #0
 80018b8:	d100      	bne.n	80018bc <__aeabi_dsub+0x5c>
 80018ba:	e0c5      	b.n	8001a48 <__aeabi_dsub+0x1e8>
 80018bc:	4ab5      	ldr	r2, [pc, #724]	; (8001b94 <__aeabi_dsub+0x334>)
 80018be:	4296      	cmp	r6, r2
 80018c0:	d100      	bne.n	80018c4 <__aeabi_dsub+0x64>
 80018c2:	e28b      	b.n	8001ddc <__aeabi_dsub+0x57c>
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	0412      	lsls	r2, r2, #16
 80018c8:	4311      	orrs	r1, r2
 80018ca:	4662      	mov	r2, ip
 80018cc:	2a38      	cmp	r2, #56	; 0x38
 80018ce:	dd00      	ble.n	80018d2 <__aeabi_dsub+0x72>
 80018d0:	e1a1      	b.n	8001c16 <__aeabi_dsub+0x3b6>
 80018d2:	2a1f      	cmp	r2, #31
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_dsub+0x78>
 80018d6:	e216      	b.n	8001d06 <__aeabi_dsub+0x4a6>
 80018d8:	2720      	movs	r7, #32
 80018da:	000c      	movs	r4, r1
 80018dc:	1abf      	subs	r7, r7, r2
 80018de:	40bc      	lsls	r4, r7
 80018e0:	0002      	movs	r2, r0
 80018e2:	46a0      	mov	r8, r4
 80018e4:	4664      	mov	r4, ip
 80018e6:	40b8      	lsls	r0, r7
 80018e8:	40e2      	lsrs	r2, r4
 80018ea:	4644      	mov	r4, r8
 80018ec:	4314      	orrs	r4, r2
 80018ee:	0002      	movs	r2, r0
 80018f0:	1e50      	subs	r0, r2, #1
 80018f2:	4182      	sbcs	r2, r0
 80018f4:	4660      	mov	r0, ip
 80018f6:	40c1      	lsrs	r1, r0
 80018f8:	4322      	orrs	r2, r4
 80018fa:	1a5b      	subs	r3, r3, r1
 80018fc:	4649      	mov	r1, r9
 80018fe:	1a8c      	subs	r4, r1, r2
 8001900:	45a1      	cmp	r9, r4
 8001902:	4192      	sbcs	r2, r2
 8001904:	4252      	negs	r2, r2
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	4698      	mov	r8, r3
 800190a:	4643      	mov	r3, r8
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	d400      	bmi.n	8001912 <__aeabi_dsub+0xb2>
 8001910:	e117      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001912:	4643      	mov	r3, r8
 8001914:	025b      	lsls	r3, r3, #9
 8001916:	0a5b      	lsrs	r3, r3, #9
 8001918:	4698      	mov	r8, r3
 800191a:	4643      	mov	r3, r8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d100      	bne.n	8001922 <__aeabi_dsub+0xc2>
 8001920:	e16c      	b.n	8001bfc <__aeabi_dsub+0x39c>
 8001922:	4640      	mov	r0, r8
 8001924:	f000 fbd8 	bl	80020d8 <__clzsi2>
 8001928:	0002      	movs	r2, r0
 800192a:	3a08      	subs	r2, #8
 800192c:	2120      	movs	r1, #32
 800192e:	0020      	movs	r0, r4
 8001930:	4643      	mov	r3, r8
 8001932:	1a89      	subs	r1, r1, r2
 8001934:	4093      	lsls	r3, r2
 8001936:	40c8      	lsrs	r0, r1
 8001938:	4094      	lsls	r4, r2
 800193a:	4303      	orrs	r3, r0
 800193c:	4296      	cmp	r6, r2
 800193e:	dd00      	ble.n	8001942 <__aeabi_dsub+0xe2>
 8001940:	e157      	b.n	8001bf2 <__aeabi_dsub+0x392>
 8001942:	1b96      	subs	r6, r2, r6
 8001944:	1c71      	adds	r1, r6, #1
 8001946:	291f      	cmp	r1, #31
 8001948:	dd00      	ble.n	800194c <__aeabi_dsub+0xec>
 800194a:	e1cb      	b.n	8001ce4 <__aeabi_dsub+0x484>
 800194c:	2220      	movs	r2, #32
 800194e:	0018      	movs	r0, r3
 8001950:	0026      	movs	r6, r4
 8001952:	1a52      	subs	r2, r2, r1
 8001954:	4094      	lsls	r4, r2
 8001956:	4090      	lsls	r0, r2
 8001958:	40ce      	lsrs	r6, r1
 800195a:	40cb      	lsrs	r3, r1
 800195c:	1e62      	subs	r2, r4, #1
 800195e:	4194      	sbcs	r4, r2
 8001960:	4330      	orrs	r0, r6
 8001962:	4698      	mov	r8, r3
 8001964:	2600      	movs	r6, #0
 8001966:	4304      	orrs	r4, r0
 8001968:	0763      	lsls	r3, r4, #29
 800196a:	d009      	beq.n	8001980 <__aeabi_dsub+0x120>
 800196c:	230f      	movs	r3, #15
 800196e:	4023      	ands	r3, r4
 8001970:	2b04      	cmp	r3, #4
 8001972:	d005      	beq.n	8001980 <__aeabi_dsub+0x120>
 8001974:	1d23      	adds	r3, r4, #4
 8001976:	42a3      	cmp	r3, r4
 8001978:	41a4      	sbcs	r4, r4
 800197a:	4264      	negs	r4, r4
 800197c:	44a0      	add	r8, r4
 800197e:	001c      	movs	r4, r3
 8001980:	4643      	mov	r3, r8
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	d400      	bmi.n	8001988 <__aeabi_dsub+0x128>
 8001986:	e0df      	b.n	8001b48 <__aeabi_dsub+0x2e8>
 8001988:	4b82      	ldr	r3, [pc, #520]	; (8001b94 <__aeabi_dsub+0x334>)
 800198a:	3601      	adds	r6, #1
 800198c:	429e      	cmp	r6, r3
 800198e:	d100      	bne.n	8001992 <__aeabi_dsub+0x132>
 8001990:	e0fb      	b.n	8001b8a <__aeabi_dsub+0x32a>
 8001992:	4642      	mov	r2, r8
 8001994:	4b80      	ldr	r3, [pc, #512]	; (8001b98 <__aeabi_dsub+0x338>)
 8001996:	08e4      	lsrs	r4, r4, #3
 8001998:	401a      	ands	r2, r3
 800199a:	0013      	movs	r3, r2
 800199c:	0571      	lsls	r1, r6, #21
 800199e:	0752      	lsls	r2, r2, #29
 80019a0:	025b      	lsls	r3, r3, #9
 80019a2:	4322      	orrs	r2, r4
 80019a4:	0b1b      	lsrs	r3, r3, #12
 80019a6:	0d49      	lsrs	r1, r1, #21
 80019a8:	0509      	lsls	r1, r1, #20
 80019aa:	07ed      	lsls	r5, r5, #31
 80019ac:	4319      	orrs	r1, r3
 80019ae:	4329      	orrs	r1, r5
 80019b0:	0010      	movs	r0, r2
 80019b2:	bcf0      	pop	{r4, r5, r6, r7}
 80019b4:	46bb      	mov	fp, r7
 80019b6:	46b2      	mov	sl, r6
 80019b8:	46a9      	mov	r9, r5
 80019ba:	46a0      	mov	r8, r4
 80019bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019be:	1ab4      	subs	r4, r6, r2
 80019c0:	46a4      	mov	ip, r4
 80019c2:	2c00      	cmp	r4, #0
 80019c4:	dd58      	ble.n	8001a78 <__aeabi_dsub+0x218>
 80019c6:	2a00      	cmp	r2, #0
 80019c8:	d100      	bne.n	80019cc <__aeabi_dsub+0x16c>
 80019ca:	e09e      	b.n	8001b0a <__aeabi_dsub+0x2aa>
 80019cc:	4a71      	ldr	r2, [pc, #452]	; (8001b94 <__aeabi_dsub+0x334>)
 80019ce:	4296      	cmp	r6, r2
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dsub+0x174>
 80019d2:	e13b      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	0412      	lsls	r2, r2, #16
 80019d8:	4311      	orrs	r1, r2
 80019da:	4662      	mov	r2, ip
 80019dc:	2a38      	cmp	r2, #56	; 0x38
 80019de:	dd00      	ble.n	80019e2 <__aeabi_dsub+0x182>
 80019e0:	e0c1      	b.n	8001b66 <__aeabi_dsub+0x306>
 80019e2:	2a1f      	cmp	r2, #31
 80019e4:	dc00      	bgt.n	80019e8 <__aeabi_dsub+0x188>
 80019e6:	e1bb      	b.n	8001d60 <__aeabi_dsub+0x500>
 80019e8:	000c      	movs	r4, r1
 80019ea:	3a20      	subs	r2, #32
 80019ec:	40d4      	lsrs	r4, r2
 80019ee:	0022      	movs	r2, r4
 80019f0:	4664      	mov	r4, ip
 80019f2:	2c20      	cmp	r4, #32
 80019f4:	d004      	beq.n	8001a00 <__aeabi_dsub+0x1a0>
 80019f6:	2740      	movs	r7, #64	; 0x40
 80019f8:	1b3f      	subs	r7, r7, r4
 80019fa:	40b9      	lsls	r1, r7
 80019fc:	4308      	orrs	r0, r1
 80019fe:	4680      	mov	r8, r0
 8001a00:	4644      	mov	r4, r8
 8001a02:	1e61      	subs	r1, r4, #1
 8001a04:	418c      	sbcs	r4, r1
 8001a06:	4314      	orrs	r4, r2
 8001a08:	e0b1      	b.n	8001b6e <__aeabi_dsub+0x30e>
 8001a0a:	000c      	movs	r4, r1
 8001a0c:	4304      	orrs	r4, r0
 8001a0e:	d02a      	beq.n	8001a66 <__aeabi_dsub+0x206>
 8001a10:	46bb      	mov	fp, r7
 8001a12:	42bd      	cmp	r5, r7
 8001a14:	d02d      	beq.n	8001a72 <__aeabi_dsub+0x212>
 8001a16:	4c61      	ldr	r4, [pc, #388]	; (8001b9c <__aeabi_dsub+0x33c>)
 8001a18:	46a4      	mov	ip, r4
 8001a1a:	44b4      	add	ip, r6
 8001a1c:	4664      	mov	r4, ip
 8001a1e:	2c00      	cmp	r4, #0
 8001a20:	d05c      	beq.n	8001adc <__aeabi_dsub+0x27c>
 8001a22:	1b94      	subs	r4, r2, r6
 8001a24:	46a4      	mov	ip, r4
 8001a26:	2e00      	cmp	r6, #0
 8001a28:	d000      	beq.n	8001a2c <__aeabi_dsub+0x1cc>
 8001a2a:	e115      	b.n	8001c58 <__aeabi_dsub+0x3f8>
 8001a2c:	464d      	mov	r5, r9
 8001a2e:	431d      	orrs	r5, r3
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x1d4>
 8001a32:	e1c3      	b.n	8001dbc <__aeabi_dsub+0x55c>
 8001a34:	1e65      	subs	r5, r4, #1
 8001a36:	2c01      	cmp	r4, #1
 8001a38:	d100      	bne.n	8001a3c <__aeabi_dsub+0x1dc>
 8001a3a:	e20c      	b.n	8001e56 <__aeabi_dsub+0x5f6>
 8001a3c:	4e55      	ldr	r6, [pc, #340]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a3e:	42b4      	cmp	r4, r6
 8001a40:	d100      	bne.n	8001a44 <__aeabi_dsub+0x1e4>
 8001a42:	e1f8      	b.n	8001e36 <__aeabi_dsub+0x5d6>
 8001a44:	46ac      	mov	ip, r5
 8001a46:	e10e      	b.n	8001c66 <__aeabi_dsub+0x406>
 8001a48:	000a      	movs	r2, r1
 8001a4a:	4302      	orrs	r2, r0
 8001a4c:	d100      	bne.n	8001a50 <__aeabi_dsub+0x1f0>
 8001a4e:	e136      	b.n	8001cbe <__aeabi_dsub+0x45e>
 8001a50:	0022      	movs	r2, r4
 8001a52:	3a01      	subs	r2, #1
 8001a54:	2c01      	cmp	r4, #1
 8001a56:	d100      	bne.n	8001a5a <__aeabi_dsub+0x1fa>
 8001a58:	e1c6      	b.n	8001de8 <__aeabi_dsub+0x588>
 8001a5a:	4c4e      	ldr	r4, [pc, #312]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a5c:	45a4      	cmp	ip, r4
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x202>
 8001a60:	e0f4      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 8001a62:	4694      	mov	ip, r2
 8001a64:	e731      	b.n	80018ca <__aeabi_dsub+0x6a>
 8001a66:	2401      	movs	r4, #1
 8001a68:	4067      	eors	r7, r4
 8001a6a:	46bb      	mov	fp, r7
 8001a6c:	42bd      	cmp	r5, r7
 8001a6e:	d000      	beq.n	8001a72 <__aeabi_dsub+0x212>
 8001a70:	e71c      	b.n	80018ac <__aeabi_dsub+0x4c>
 8001a72:	4c4a      	ldr	r4, [pc, #296]	; (8001b9c <__aeabi_dsub+0x33c>)
 8001a74:	46a4      	mov	ip, r4
 8001a76:	44b4      	add	ip, r6
 8001a78:	4664      	mov	r4, ip
 8001a7a:	2c00      	cmp	r4, #0
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dsub+0x220>
 8001a7e:	e0cf      	b.n	8001c20 <__aeabi_dsub+0x3c0>
 8001a80:	1b94      	subs	r4, r2, r6
 8001a82:	46a4      	mov	ip, r4
 8001a84:	2e00      	cmp	r6, #0
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dsub+0x22a>
 8001a88:	e15c      	b.n	8001d44 <__aeabi_dsub+0x4e4>
 8001a8a:	4e42      	ldr	r6, [pc, #264]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a8c:	42b2      	cmp	r2, r6
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dsub+0x232>
 8001a90:	e1ec      	b.n	8001e6c <__aeabi_dsub+0x60c>
 8001a92:	2680      	movs	r6, #128	; 0x80
 8001a94:	0436      	lsls	r6, r6, #16
 8001a96:	4333      	orrs	r3, r6
 8001a98:	4664      	mov	r4, ip
 8001a9a:	2c38      	cmp	r4, #56	; 0x38
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dsub+0x240>
 8001a9e:	e1b3      	b.n	8001e08 <__aeabi_dsub+0x5a8>
 8001aa0:	2c1f      	cmp	r4, #31
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x246>
 8001aa4:	e238      	b.n	8001f18 <__aeabi_dsub+0x6b8>
 8001aa6:	2620      	movs	r6, #32
 8001aa8:	1b36      	subs	r6, r6, r4
 8001aaa:	001c      	movs	r4, r3
 8001aac:	40b4      	lsls	r4, r6
 8001aae:	464f      	mov	r7, r9
 8001ab0:	46a0      	mov	r8, r4
 8001ab2:	4664      	mov	r4, ip
 8001ab4:	40e7      	lsrs	r7, r4
 8001ab6:	4644      	mov	r4, r8
 8001ab8:	433c      	orrs	r4, r7
 8001aba:	464f      	mov	r7, r9
 8001abc:	40b7      	lsls	r7, r6
 8001abe:	003e      	movs	r6, r7
 8001ac0:	1e77      	subs	r7, r6, #1
 8001ac2:	41be      	sbcs	r6, r7
 8001ac4:	4334      	orrs	r4, r6
 8001ac6:	4666      	mov	r6, ip
 8001ac8:	40f3      	lsrs	r3, r6
 8001aca:	18c9      	adds	r1, r1, r3
 8001acc:	1824      	adds	r4, r4, r0
 8001ace:	4284      	cmp	r4, r0
 8001ad0:	419b      	sbcs	r3, r3
 8001ad2:	425b      	negs	r3, r3
 8001ad4:	4698      	mov	r8, r3
 8001ad6:	0016      	movs	r6, r2
 8001ad8:	4488      	add	r8, r1
 8001ada:	e04e      	b.n	8001b7a <__aeabi_dsub+0x31a>
 8001adc:	4a30      	ldr	r2, [pc, #192]	; (8001ba0 <__aeabi_dsub+0x340>)
 8001ade:	1c74      	adds	r4, r6, #1
 8001ae0:	4214      	tst	r4, r2
 8001ae2:	d000      	beq.n	8001ae6 <__aeabi_dsub+0x286>
 8001ae4:	e0d6      	b.n	8001c94 <__aeabi_dsub+0x434>
 8001ae6:	464a      	mov	r2, r9
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	2e00      	cmp	r6, #0
 8001aec:	d000      	beq.n	8001af0 <__aeabi_dsub+0x290>
 8001aee:	e15b      	b.n	8001da8 <__aeabi_dsub+0x548>
 8001af0:	2a00      	cmp	r2, #0
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x296>
 8001af4:	e1a5      	b.n	8001e42 <__aeabi_dsub+0x5e2>
 8001af6:	000a      	movs	r2, r1
 8001af8:	4302      	orrs	r2, r0
 8001afa:	d000      	beq.n	8001afe <__aeabi_dsub+0x29e>
 8001afc:	e1bb      	b.n	8001e76 <__aeabi_dsub+0x616>
 8001afe:	464a      	mov	r2, r9
 8001b00:	0759      	lsls	r1, r3, #29
 8001b02:	08d2      	lsrs	r2, r2, #3
 8001b04:	430a      	orrs	r2, r1
 8001b06:	08db      	lsrs	r3, r3, #3
 8001b08:	e027      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001b0a:	000a      	movs	r2, r1
 8001b0c:	4302      	orrs	r2, r0
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0x2b2>
 8001b10:	e174      	b.n	8001dfc <__aeabi_dsub+0x59c>
 8001b12:	0022      	movs	r2, r4
 8001b14:	3a01      	subs	r2, #1
 8001b16:	2c01      	cmp	r4, #1
 8001b18:	d005      	beq.n	8001b26 <__aeabi_dsub+0x2c6>
 8001b1a:	4c1e      	ldr	r4, [pc, #120]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b1c:	45a4      	cmp	ip, r4
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dsub+0x2c2>
 8001b20:	e094      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 8001b22:	4694      	mov	ip, r2
 8001b24:	e759      	b.n	80019da <__aeabi_dsub+0x17a>
 8001b26:	4448      	add	r0, r9
 8001b28:	4548      	cmp	r0, r9
 8001b2a:	4192      	sbcs	r2, r2
 8001b2c:	185b      	adds	r3, r3, r1
 8001b2e:	4698      	mov	r8, r3
 8001b30:	0004      	movs	r4, r0
 8001b32:	4252      	negs	r2, r2
 8001b34:	4490      	add	r8, r2
 8001b36:	4643      	mov	r3, r8
 8001b38:	2602      	movs	r6, #2
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	d500      	bpl.n	8001b40 <__aeabi_dsub+0x2e0>
 8001b3e:	e0c4      	b.n	8001cca <__aeabi_dsub+0x46a>
 8001b40:	3e01      	subs	r6, #1
 8001b42:	0763      	lsls	r3, r4, #29
 8001b44:	d000      	beq.n	8001b48 <__aeabi_dsub+0x2e8>
 8001b46:	e711      	b.n	800196c <__aeabi_dsub+0x10c>
 8001b48:	4643      	mov	r3, r8
 8001b4a:	46b4      	mov	ip, r6
 8001b4c:	0759      	lsls	r1, r3, #29
 8001b4e:	08e2      	lsrs	r2, r4, #3
 8001b50:	430a      	orrs	r2, r1
 8001b52:	08db      	lsrs	r3, r3, #3
 8001b54:	490f      	ldr	r1, [pc, #60]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b56:	458c      	cmp	ip, r1
 8001b58:	d040      	beq.n	8001bdc <__aeabi_dsub+0x37c>
 8001b5a:	4661      	mov	r1, ip
 8001b5c:	031b      	lsls	r3, r3, #12
 8001b5e:	0549      	lsls	r1, r1, #21
 8001b60:	0b1b      	lsrs	r3, r3, #12
 8001b62:	0d49      	lsrs	r1, r1, #21
 8001b64:	e720      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001b66:	4301      	orrs	r1, r0
 8001b68:	000c      	movs	r4, r1
 8001b6a:	1e61      	subs	r1, r4, #1
 8001b6c:	418c      	sbcs	r4, r1
 8001b6e:	444c      	add	r4, r9
 8001b70:	454c      	cmp	r4, r9
 8001b72:	4192      	sbcs	r2, r2
 8001b74:	4252      	negs	r2, r2
 8001b76:	4690      	mov	r8, r2
 8001b78:	4498      	add	r8, r3
 8001b7a:	4643      	mov	r3, r8
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	d5e0      	bpl.n	8001b42 <__aeabi_dsub+0x2e2>
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b82:	3601      	adds	r6, #1
 8001b84:	429e      	cmp	r6, r3
 8001b86:	d000      	beq.n	8001b8a <__aeabi_dsub+0x32a>
 8001b88:	e09f      	b.n	8001cca <__aeabi_dsub+0x46a>
 8001b8a:	0031      	movs	r1, r6
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2200      	movs	r2, #0
 8001b90:	e70a      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	000007ff 	.word	0x000007ff
 8001b98:	ff7fffff 	.word	0xff7fffff
 8001b9c:	fffff801 	.word	0xfffff801
 8001ba0:	000007fe 	.word	0x000007fe
 8001ba4:	2a00      	cmp	r2, #0
 8001ba6:	d100      	bne.n	8001baa <__aeabi_dsub+0x34a>
 8001ba8:	e160      	b.n	8001e6c <__aeabi_dsub+0x60c>
 8001baa:	000a      	movs	r2, r1
 8001bac:	4302      	orrs	r2, r0
 8001bae:	d04d      	beq.n	8001c4c <__aeabi_dsub+0x3ec>
 8001bb0:	464a      	mov	r2, r9
 8001bb2:	075c      	lsls	r4, r3, #29
 8001bb4:	08d2      	lsrs	r2, r2, #3
 8001bb6:	4322      	orrs	r2, r4
 8001bb8:	2480      	movs	r4, #128	; 0x80
 8001bba:	08db      	lsrs	r3, r3, #3
 8001bbc:	0324      	lsls	r4, r4, #12
 8001bbe:	4223      	tst	r3, r4
 8001bc0:	d007      	beq.n	8001bd2 <__aeabi_dsub+0x372>
 8001bc2:	08ce      	lsrs	r6, r1, #3
 8001bc4:	4226      	tst	r6, r4
 8001bc6:	d104      	bne.n	8001bd2 <__aeabi_dsub+0x372>
 8001bc8:	465d      	mov	r5, fp
 8001bca:	0033      	movs	r3, r6
 8001bcc:	08c2      	lsrs	r2, r0, #3
 8001bce:	0749      	lsls	r1, r1, #29
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	0f51      	lsrs	r1, r2, #29
 8001bd4:	00d2      	lsls	r2, r2, #3
 8001bd6:	08d2      	lsrs	r2, r2, #3
 8001bd8:	0749      	lsls	r1, r1, #29
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	0011      	movs	r1, r2
 8001bde:	4319      	orrs	r1, r3
 8001be0:	d100      	bne.n	8001be4 <__aeabi_dsub+0x384>
 8001be2:	e1c8      	b.n	8001f76 <__aeabi_dsub+0x716>
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	0309      	lsls	r1, r1, #12
 8001be8:	430b      	orrs	r3, r1
 8001bea:	031b      	lsls	r3, r3, #12
 8001bec:	49d5      	ldr	r1, [pc, #852]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001bee:	0b1b      	lsrs	r3, r3, #12
 8001bf0:	e6da      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001bf2:	49d5      	ldr	r1, [pc, #852]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001bf4:	1ab6      	subs	r6, r6, r2
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	4698      	mov	r8, r3
 8001bfa:	e6b5      	b.n	8001968 <__aeabi_dsub+0x108>
 8001bfc:	0020      	movs	r0, r4
 8001bfe:	f000 fa6b 	bl	80020d8 <__clzsi2>
 8001c02:	0002      	movs	r2, r0
 8001c04:	3218      	adds	r2, #24
 8001c06:	2a1f      	cmp	r2, #31
 8001c08:	dc00      	bgt.n	8001c0c <__aeabi_dsub+0x3ac>
 8001c0a:	e68f      	b.n	800192c <__aeabi_dsub+0xcc>
 8001c0c:	0023      	movs	r3, r4
 8001c0e:	3808      	subs	r0, #8
 8001c10:	4083      	lsls	r3, r0
 8001c12:	2400      	movs	r4, #0
 8001c14:	e692      	b.n	800193c <__aeabi_dsub+0xdc>
 8001c16:	4308      	orrs	r0, r1
 8001c18:	0002      	movs	r2, r0
 8001c1a:	1e50      	subs	r0, r2, #1
 8001c1c:	4182      	sbcs	r2, r0
 8001c1e:	e66d      	b.n	80018fc <__aeabi_dsub+0x9c>
 8001c20:	4cca      	ldr	r4, [pc, #808]	; (8001f4c <__aeabi_dsub+0x6ec>)
 8001c22:	1c72      	adds	r2, r6, #1
 8001c24:	4222      	tst	r2, r4
 8001c26:	d000      	beq.n	8001c2a <__aeabi_dsub+0x3ca>
 8001c28:	e0ad      	b.n	8001d86 <__aeabi_dsub+0x526>
 8001c2a:	464a      	mov	r2, r9
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	2e00      	cmp	r6, #0
 8001c30:	d1b8      	bne.n	8001ba4 <__aeabi_dsub+0x344>
 8001c32:	2a00      	cmp	r2, #0
 8001c34:	d100      	bne.n	8001c38 <__aeabi_dsub+0x3d8>
 8001c36:	e158      	b.n	8001eea <__aeabi_dsub+0x68a>
 8001c38:	000a      	movs	r2, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	d000      	beq.n	8001c40 <__aeabi_dsub+0x3e0>
 8001c3e:	e159      	b.n	8001ef4 <__aeabi_dsub+0x694>
 8001c40:	464a      	mov	r2, r9
 8001c42:	0759      	lsls	r1, r3, #29
 8001c44:	08d2      	lsrs	r2, r2, #3
 8001c46:	430a      	orrs	r2, r1
 8001c48:	08db      	lsrs	r3, r3, #3
 8001c4a:	e786      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001c4c:	464a      	mov	r2, r9
 8001c4e:	0759      	lsls	r1, r3, #29
 8001c50:	08d2      	lsrs	r2, r2, #3
 8001c52:	430a      	orrs	r2, r1
 8001c54:	08db      	lsrs	r3, r3, #3
 8001c56:	e7c1      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001c58:	4dba      	ldr	r5, [pc, #744]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001c5a:	42aa      	cmp	r2, r5
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x400>
 8001c5e:	e11e      	b.n	8001e9e <__aeabi_dsub+0x63e>
 8001c60:	2580      	movs	r5, #128	; 0x80
 8001c62:	042d      	lsls	r5, r5, #16
 8001c64:	432b      	orrs	r3, r5
 8001c66:	4664      	mov	r4, ip
 8001c68:	2c38      	cmp	r4, #56	; 0x38
 8001c6a:	dc5d      	bgt.n	8001d28 <__aeabi_dsub+0x4c8>
 8001c6c:	2c1f      	cmp	r4, #31
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dsub+0x412>
 8001c70:	e0d0      	b.n	8001e14 <__aeabi_dsub+0x5b4>
 8001c72:	2520      	movs	r5, #32
 8001c74:	4667      	mov	r7, ip
 8001c76:	1b2d      	subs	r5, r5, r4
 8001c78:	464e      	mov	r6, r9
 8001c7a:	001c      	movs	r4, r3
 8001c7c:	40fe      	lsrs	r6, r7
 8001c7e:	40ac      	lsls	r4, r5
 8001c80:	4334      	orrs	r4, r6
 8001c82:	464e      	mov	r6, r9
 8001c84:	40ae      	lsls	r6, r5
 8001c86:	0035      	movs	r5, r6
 8001c88:	40fb      	lsrs	r3, r7
 8001c8a:	1e6e      	subs	r6, r5, #1
 8001c8c:	41b5      	sbcs	r5, r6
 8001c8e:	1ac9      	subs	r1, r1, r3
 8001c90:	432c      	orrs	r4, r5
 8001c92:	e04e      	b.n	8001d32 <__aeabi_dsub+0x4d2>
 8001c94:	464a      	mov	r2, r9
 8001c96:	1a14      	subs	r4, r2, r0
 8001c98:	45a1      	cmp	r9, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	4252      	negs	r2, r2
 8001c9e:	4690      	mov	r8, r2
 8001ca0:	1a5f      	subs	r7, r3, r1
 8001ca2:	003a      	movs	r2, r7
 8001ca4:	4647      	mov	r7, r8
 8001ca6:	1bd2      	subs	r2, r2, r7
 8001ca8:	4690      	mov	r8, r2
 8001caa:	0212      	lsls	r2, r2, #8
 8001cac:	d500      	bpl.n	8001cb0 <__aeabi_dsub+0x450>
 8001cae:	e08b      	b.n	8001dc8 <__aeabi_dsub+0x568>
 8001cb0:	4642      	mov	r2, r8
 8001cb2:	4322      	orrs	r2, r4
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x458>
 8001cb6:	e630      	b.n	800191a <__aeabi_dsub+0xba>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2500      	movs	r5, #0
 8001cbc:	e74d      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001cbe:	464a      	mov	r2, r9
 8001cc0:	0759      	lsls	r1, r3, #29
 8001cc2:	08d2      	lsrs	r2, r2, #3
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	08db      	lsrs	r3, r3, #3
 8001cc8:	e744      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001cca:	4642      	mov	r2, r8
 8001ccc:	4b9e      	ldr	r3, [pc, #632]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001cce:	0861      	lsrs	r1, r4, #1
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	0013      	movs	r3, r2
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4014      	ands	r4, r2
 8001cd8:	430c      	orrs	r4, r1
 8001cda:	07da      	lsls	r2, r3, #31
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	4698      	mov	r8, r3
 8001ce0:	4314      	orrs	r4, r2
 8001ce2:	e641      	b.n	8001968 <__aeabi_dsub+0x108>
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	3e1f      	subs	r6, #31
 8001ce8:	40f2      	lsrs	r2, r6
 8001cea:	0016      	movs	r6, r2
 8001cec:	2920      	cmp	r1, #32
 8001cee:	d003      	beq.n	8001cf8 <__aeabi_dsub+0x498>
 8001cf0:	2240      	movs	r2, #64	; 0x40
 8001cf2:	1a51      	subs	r1, r2, r1
 8001cf4:	408b      	lsls	r3, r1
 8001cf6:	431c      	orrs	r4, r3
 8001cf8:	1e62      	subs	r2, r4, #1
 8001cfa:	4194      	sbcs	r4, r2
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	4334      	orrs	r4, r6
 8001d00:	4698      	mov	r8, r3
 8001d02:	2600      	movs	r6, #0
 8001d04:	e71d      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001d06:	000c      	movs	r4, r1
 8001d08:	3a20      	subs	r2, #32
 8001d0a:	40d4      	lsrs	r4, r2
 8001d0c:	0022      	movs	r2, r4
 8001d0e:	4664      	mov	r4, ip
 8001d10:	2c20      	cmp	r4, #32
 8001d12:	d004      	beq.n	8001d1e <__aeabi_dsub+0x4be>
 8001d14:	2740      	movs	r7, #64	; 0x40
 8001d16:	1b3f      	subs	r7, r7, r4
 8001d18:	40b9      	lsls	r1, r7
 8001d1a:	4308      	orrs	r0, r1
 8001d1c:	4680      	mov	r8, r0
 8001d1e:	4644      	mov	r4, r8
 8001d20:	1e61      	subs	r1, r4, #1
 8001d22:	418c      	sbcs	r4, r1
 8001d24:	4322      	orrs	r2, r4
 8001d26:	e5e9      	b.n	80018fc <__aeabi_dsub+0x9c>
 8001d28:	464c      	mov	r4, r9
 8001d2a:	4323      	orrs	r3, r4
 8001d2c:	001c      	movs	r4, r3
 8001d2e:	1e63      	subs	r3, r4, #1
 8001d30:	419c      	sbcs	r4, r3
 8001d32:	1b04      	subs	r4, r0, r4
 8001d34:	42a0      	cmp	r0, r4
 8001d36:	419b      	sbcs	r3, r3
 8001d38:	425b      	negs	r3, r3
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	4698      	mov	r8, r3
 8001d3e:	465d      	mov	r5, fp
 8001d40:	0016      	movs	r6, r2
 8001d42:	e5e2      	b.n	800190a <__aeabi_dsub+0xaa>
 8001d44:	464e      	mov	r6, r9
 8001d46:	431e      	orrs	r6, r3
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x4ec>
 8001d4a:	e0ae      	b.n	8001eaa <__aeabi_dsub+0x64a>
 8001d4c:	1e66      	subs	r6, r4, #1
 8001d4e:	2c01      	cmp	r4, #1
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x4f4>
 8001d52:	e0fd      	b.n	8001f50 <__aeabi_dsub+0x6f0>
 8001d54:	4f7b      	ldr	r7, [pc, #492]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001d56:	42bc      	cmp	r4, r7
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x4fc>
 8001d5a:	e107      	b.n	8001f6c <__aeabi_dsub+0x70c>
 8001d5c:	46b4      	mov	ip, r6
 8001d5e:	e69b      	b.n	8001a98 <__aeabi_dsub+0x238>
 8001d60:	4664      	mov	r4, ip
 8001d62:	2220      	movs	r2, #32
 8001d64:	1b12      	subs	r2, r2, r4
 8001d66:	000c      	movs	r4, r1
 8001d68:	4094      	lsls	r4, r2
 8001d6a:	0007      	movs	r7, r0
 8001d6c:	4090      	lsls	r0, r2
 8001d6e:	46a0      	mov	r8, r4
 8001d70:	4664      	mov	r4, ip
 8001d72:	1e42      	subs	r2, r0, #1
 8001d74:	4190      	sbcs	r0, r2
 8001d76:	4662      	mov	r2, ip
 8001d78:	40e7      	lsrs	r7, r4
 8001d7a:	4644      	mov	r4, r8
 8001d7c:	40d1      	lsrs	r1, r2
 8001d7e:	433c      	orrs	r4, r7
 8001d80:	4304      	orrs	r4, r0
 8001d82:	185b      	adds	r3, r3, r1
 8001d84:	e6f3      	b.n	8001b6e <__aeabi_dsub+0x30e>
 8001d86:	4c6f      	ldr	r4, [pc, #444]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001d88:	42a2      	cmp	r2, r4
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x52e>
 8001d8c:	e0d5      	b.n	8001f3a <__aeabi_dsub+0x6da>
 8001d8e:	4448      	add	r0, r9
 8001d90:	185b      	adds	r3, r3, r1
 8001d92:	4548      	cmp	r0, r9
 8001d94:	4189      	sbcs	r1, r1
 8001d96:	4249      	negs	r1, r1
 8001d98:	185b      	adds	r3, r3, r1
 8001d9a:	07dc      	lsls	r4, r3, #31
 8001d9c:	0840      	lsrs	r0, r0, #1
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	4698      	mov	r8, r3
 8001da2:	0016      	movs	r6, r2
 8001da4:	4304      	orrs	r4, r0
 8001da6:	e6cc      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	d000      	beq.n	8001dae <__aeabi_dsub+0x54e>
 8001dac:	e082      	b.n	8001eb4 <__aeabi_dsub+0x654>
 8001dae:	000a      	movs	r2, r1
 8001db0:	4302      	orrs	r2, r0
 8001db2:	d140      	bne.n	8001e36 <__aeabi_dsub+0x5d6>
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	2500      	movs	r5, #0
 8001db8:	031b      	lsls	r3, r3, #12
 8001dba:	e713      	b.n	8001be4 <__aeabi_dsub+0x384>
 8001dbc:	074b      	lsls	r3, r1, #29
 8001dbe:	08c2      	lsrs	r2, r0, #3
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	465d      	mov	r5, fp
 8001dc4:	08cb      	lsrs	r3, r1, #3
 8001dc6:	e6c5      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001dc8:	464a      	mov	r2, r9
 8001dca:	1a84      	subs	r4, r0, r2
 8001dcc:	42a0      	cmp	r0, r4
 8001dce:	4192      	sbcs	r2, r2
 8001dd0:	1acb      	subs	r3, r1, r3
 8001dd2:	4252      	negs	r2, r2
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	4698      	mov	r8, r3
 8001dd8:	465d      	mov	r5, fp
 8001dda:	e59e      	b.n	800191a <__aeabi_dsub+0xba>
 8001ddc:	464a      	mov	r2, r9
 8001dde:	0759      	lsls	r1, r3, #29
 8001de0:	08d2      	lsrs	r2, r2, #3
 8001de2:	430a      	orrs	r2, r1
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	e6f9      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001de8:	464a      	mov	r2, r9
 8001dea:	1a14      	subs	r4, r2, r0
 8001dec:	45a1      	cmp	r9, r4
 8001dee:	4192      	sbcs	r2, r2
 8001df0:	1a5b      	subs	r3, r3, r1
 8001df2:	4252      	negs	r2, r2
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	4698      	mov	r8, r3
 8001df8:	2601      	movs	r6, #1
 8001dfa:	e586      	b.n	800190a <__aeabi_dsub+0xaa>
 8001dfc:	464a      	mov	r2, r9
 8001dfe:	0759      	lsls	r1, r3, #29
 8001e00:	08d2      	lsrs	r2, r2, #3
 8001e02:	430a      	orrs	r2, r1
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	e6a5      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001e08:	464c      	mov	r4, r9
 8001e0a:	4323      	orrs	r3, r4
 8001e0c:	001c      	movs	r4, r3
 8001e0e:	1e63      	subs	r3, r4, #1
 8001e10:	419c      	sbcs	r4, r3
 8001e12:	e65b      	b.n	8001acc <__aeabi_dsub+0x26c>
 8001e14:	4665      	mov	r5, ip
 8001e16:	001e      	movs	r6, r3
 8001e18:	3d20      	subs	r5, #32
 8001e1a:	40ee      	lsrs	r6, r5
 8001e1c:	2c20      	cmp	r4, #32
 8001e1e:	d005      	beq.n	8001e2c <__aeabi_dsub+0x5cc>
 8001e20:	2540      	movs	r5, #64	; 0x40
 8001e22:	1b2d      	subs	r5, r5, r4
 8001e24:	40ab      	lsls	r3, r5
 8001e26:	464c      	mov	r4, r9
 8001e28:	431c      	orrs	r4, r3
 8001e2a:	46a2      	mov	sl, r4
 8001e2c:	4654      	mov	r4, sl
 8001e2e:	1e63      	subs	r3, r4, #1
 8001e30:	419c      	sbcs	r4, r3
 8001e32:	4334      	orrs	r4, r6
 8001e34:	e77d      	b.n	8001d32 <__aeabi_dsub+0x4d2>
 8001e36:	074b      	lsls	r3, r1, #29
 8001e38:	08c2      	lsrs	r2, r0, #3
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	465d      	mov	r5, fp
 8001e3e:	08cb      	lsrs	r3, r1, #3
 8001e40:	e6cc      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001e42:	000a      	movs	r2, r1
 8001e44:	4302      	orrs	r2, r0
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x5ea>
 8001e48:	e736      	b.n	8001cb8 <__aeabi_dsub+0x458>
 8001e4a:	074b      	lsls	r3, r1, #29
 8001e4c:	08c2      	lsrs	r2, r0, #3
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	465d      	mov	r5, fp
 8001e52:	08cb      	lsrs	r3, r1, #3
 8001e54:	e681      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001e56:	464a      	mov	r2, r9
 8001e58:	1a84      	subs	r4, r0, r2
 8001e5a:	42a0      	cmp	r0, r4
 8001e5c:	4192      	sbcs	r2, r2
 8001e5e:	1acb      	subs	r3, r1, r3
 8001e60:	4252      	negs	r2, r2
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	4698      	mov	r8, r3
 8001e66:	465d      	mov	r5, fp
 8001e68:	2601      	movs	r6, #1
 8001e6a:	e54e      	b.n	800190a <__aeabi_dsub+0xaa>
 8001e6c:	074b      	lsls	r3, r1, #29
 8001e6e:	08c2      	lsrs	r2, r0, #3
 8001e70:	431a      	orrs	r2, r3
 8001e72:	08cb      	lsrs	r3, r1, #3
 8001e74:	e6b2      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001e76:	464a      	mov	r2, r9
 8001e78:	1a14      	subs	r4, r2, r0
 8001e7a:	45a1      	cmp	r9, r4
 8001e7c:	4192      	sbcs	r2, r2
 8001e7e:	1a5f      	subs	r7, r3, r1
 8001e80:	4252      	negs	r2, r2
 8001e82:	1aba      	subs	r2, r7, r2
 8001e84:	4690      	mov	r8, r2
 8001e86:	0212      	lsls	r2, r2, #8
 8001e88:	d56b      	bpl.n	8001f62 <__aeabi_dsub+0x702>
 8001e8a:	464a      	mov	r2, r9
 8001e8c:	1a84      	subs	r4, r0, r2
 8001e8e:	42a0      	cmp	r0, r4
 8001e90:	4192      	sbcs	r2, r2
 8001e92:	1acb      	subs	r3, r1, r3
 8001e94:	4252      	negs	r2, r2
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	4698      	mov	r8, r3
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	e564      	b.n	8001968 <__aeabi_dsub+0x108>
 8001e9e:	074b      	lsls	r3, r1, #29
 8001ea0:	08c2      	lsrs	r2, r0, #3
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	465d      	mov	r5, fp
 8001ea6:	08cb      	lsrs	r3, r1, #3
 8001ea8:	e698      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001eaa:	074b      	lsls	r3, r1, #29
 8001eac:	08c2      	lsrs	r2, r0, #3
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	08cb      	lsrs	r3, r1, #3
 8001eb2:	e64f      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001eb4:	000a      	movs	r2, r1
 8001eb6:	4302      	orrs	r2, r0
 8001eb8:	d090      	beq.n	8001ddc <__aeabi_dsub+0x57c>
 8001eba:	464a      	mov	r2, r9
 8001ebc:	075c      	lsls	r4, r3, #29
 8001ebe:	08d2      	lsrs	r2, r2, #3
 8001ec0:	4314      	orrs	r4, r2
 8001ec2:	2280      	movs	r2, #128	; 0x80
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	0312      	lsls	r2, r2, #12
 8001ec8:	4213      	tst	r3, r2
 8001eca:	d008      	beq.n	8001ede <__aeabi_dsub+0x67e>
 8001ecc:	08ce      	lsrs	r6, r1, #3
 8001ece:	4216      	tst	r6, r2
 8001ed0:	d105      	bne.n	8001ede <__aeabi_dsub+0x67e>
 8001ed2:	08c0      	lsrs	r0, r0, #3
 8001ed4:	0749      	lsls	r1, r1, #29
 8001ed6:	4308      	orrs	r0, r1
 8001ed8:	0004      	movs	r4, r0
 8001eda:	465d      	mov	r5, fp
 8001edc:	0033      	movs	r3, r6
 8001ede:	0f61      	lsrs	r1, r4, #29
 8001ee0:	00e2      	lsls	r2, r4, #3
 8001ee2:	0749      	lsls	r1, r1, #29
 8001ee4:	08d2      	lsrs	r2, r2, #3
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	e678      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001eea:	074b      	lsls	r3, r1, #29
 8001eec:	08c2      	lsrs	r2, r0, #3
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	08cb      	lsrs	r3, r1, #3
 8001ef2:	e632      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001ef4:	4448      	add	r0, r9
 8001ef6:	185b      	adds	r3, r3, r1
 8001ef8:	4548      	cmp	r0, r9
 8001efa:	4192      	sbcs	r2, r2
 8001efc:	4698      	mov	r8, r3
 8001efe:	4252      	negs	r2, r2
 8001f00:	4490      	add	r8, r2
 8001f02:	4643      	mov	r3, r8
 8001f04:	0004      	movs	r4, r0
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	d400      	bmi.n	8001f0c <__aeabi_dsub+0x6ac>
 8001f0a:	e61a      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f0c:	4642      	mov	r2, r8
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001f10:	2601      	movs	r6, #1
 8001f12:	401a      	ands	r2, r3
 8001f14:	4690      	mov	r8, r2
 8001f16:	e614      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f18:	4666      	mov	r6, ip
 8001f1a:	001f      	movs	r7, r3
 8001f1c:	3e20      	subs	r6, #32
 8001f1e:	40f7      	lsrs	r7, r6
 8001f20:	2c20      	cmp	r4, #32
 8001f22:	d005      	beq.n	8001f30 <__aeabi_dsub+0x6d0>
 8001f24:	2640      	movs	r6, #64	; 0x40
 8001f26:	1b36      	subs	r6, r6, r4
 8001f28:	40b3      	lsls	r3, r6
 8001f2a:	464c      	mov	r4, r9
 8001f2c:	431c      	orrs	r4, r3
 8001f2e:	46a2      	mov	sl, r4
 8001f30:	4654      	mov	r4, sl
 8001f32:	1e63      	subs	r3, r4, #1
 8001f34:	419c      	sbcs	r4, r3
 8001f36:	433c      	orrs	r4, r7
 8001f38:	e5c8      	b.n	8001acc <__aeabi_dsub+0x26c>
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2200      	movs	r2, #0
 8001f40:	e532      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	000007ff 	.word	0x000007ff
 8001f48:	ff7fffff 	.word	0xff7fffff
 8001f4c:	000007fe 	.word	0x000007fe
 8001f50:	464a      	mov	r2, r9
 8001f52:	1814      	adds	r4, r2, r0
 8001f54:	4284      	cmp	r4, r0
 8001f56:	4192      	sbcs	r2, r2
 8001f58:	185b      	adds	r3, r3, r1
 8001f5a:	4698      	mov	r8, r3
 8001f5c:	4252      	negs	r2, r2
 8001f5e:	4490      	add	r8, r2
 8001f60:	e5e9      	b.n	8001b36 <__aeabi_dsub+0x2d6>
 8001f62:	4642      	mov	r2, r8
 8001f64:	4322      	orrs	r2, r4
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x70a>
 8001f68:	e6a6      	b.n	8001cb8 <__aeabi_dsub+0x458>
 8001f6a:	e5ea      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f6c:	074b      	lsls	r3, r1, #29
 8001f6e:	08c2      	lsrs	r2, r0, #3
 8001f70:	431a      	orrs	r2, r3
 8001f72:	08cb      	lsrs	r3, r1, #3
 8001f74:	e632      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001f76:	2200      	movs	r2, #0
 8001f78:	4901      	ldr	r1, [pc, #4]	; (8001f80 <__aeabi_dsub+0x720>)
 8001f7a:	0013      	movs	r3, r2
 8001f7c:	e514      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	000007ff 	.word	0x000007ff

08001f84 <__aeabi_dcmpun>:
 8001f84:	b570      	push	{r4, r5, r6, lr}
 8001f86:	0005      	movs	r5, r0
 8001f88:	480c      	ldr	r0, [pc, #48]	; (8001fbc <__aeabi_dcmpun+0x38>)
 8001f8a:	030c      	lsls	r4, r1, #12
 8001f8c:	0016      	movs	r6, r2
 8001f8e:	0049      	lsls	r1, r1, #1
 8001f90:	031a      	lsls	r2, r3, #12
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	0b24      	lsrs	r4, r4, #12
 8001f96:	0d49      	lsrs	r1, r1, #21
 8001f98:	0b12      	lsrs	r2, r2, #12
 8001f9a:	0d5b      	lsrs	r3, r3, #21
 8001f9c:	4281      	cmp	r1, r0
 8001f9e:	d008      	beq.n	8001fb2 <__aeabi_dcmpun+0x2e>
 8001fa0:	4906      	ldr	r1, [pc, #24]	; (8001fbc <__aeabi_dcmpun+0x38>)
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	428b      	cmp	r3, r1
 8001fa6:	d103      	bne.n	8001fb0 <__aeabi_dcmpun+0x2c>
 8001fa8:	4332      	orrs	r2, r6
 8001faa:	0010      	movs	r0, r2
 8001fac:	1e42      	subs	r2, r0, #1
 8001fae:	4190      	sbcs	r0, r2
 8001fb0:	bd70      	pop	{r4, r5, r6, pc}
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	432c      	orrs	r4, r5
 8001fb6:	d1fb      	bne.n	8001fb0 <__aeabi_dcmpun+0x2c>
 8001fb8:	e7f2      	b.n	8001fa0 <__aeabi_dcmpun+0x1c>
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	000007ff 	.word	0x000007ff

08001fc0 <__aeabi_d2iz>:
 8001fc0:	000a      	movs	r2, r1
 8001fc2:	b530      	push	{r4, r5, lr}
 8001fc4:	4c13      	ldr	r4, [pc, #76]	; (8002014 <__aeabi_d2iz+0x54>)
 8001fc6:	0053      	lsls	r3, r2, #1
 8001fc8:	0309      	lsls	r1, r1, #12
 8001fca:	0005      	movs	r5, r0
 8001fcc:	0b09      	lsrs	r1, r1, #12
 8001fce:	2000      	movs	r0, #0
 8001fd0:	0d5b      	lsrs	r3, r3, #21
 8001fd2:	0fd2      	lsrs	r2, r2, #31
 8001fd4:	42a3      	cmp	r3, r4
 8001fd6:	dd04      	ble.n	8001fe2 <__aeabi_d2iz+0x22>
 8001fd8:	480f      	ldr	r0, [pc, #60]	; (8002018 <__aeabi_d2iz+0x58>)
 8001fda:	4283      	cmp	r3, r0
 8001fdc:	dd02      	ble.n	8001fe4 <__aeabi_d2iz+0x24>
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <__aeabi_d2iz+0x5c>)
 8001fe0:	18d0      	adds	r0, r2, r3
 8001fe2:	bd30      	pop	{r4, r5, pc}
 8001fe4:	2080      	movs	r0, #128	; 0x80
 8001fe6:	0340      	lsls	r0, r0, #13
 8001fe8:	4301      	orrs	r1, r0
 8001fea:	480d      	ldr	r0, [pc, #52]	; (8002020 <__aeabi_d2iz+0x60>)
 8001fec:	1ac0      	subs	r0, r0, r3
 8001fee:	281f      	cmp	r0, #31
 8001ff0:	dd08      	ble.n	8002004 <__aeabi_d2iz+0x44>
 8001ff2:	480c      	ldr	r0, [pc, #48]	; (8002024 <__aeabi_d2iz+0x64>)
 8001ff4:	1ac3      	subs	r3, r0, r3
 8001ff6:	40d9      	lsrs	r1, r3
 8001ff8:	000b      	movs	r3, r1
 8001ffa:	4258      	negs	r0, r3
 8001ffc:	2a00      	cmp	r2, #0
 8001ffe:	d1f0      	bne.n	8001fe2 <__aeabi_d2iz+0x22>
 8002000:	0018      	movs	r0, r3
 8002002:	e7ee      	b.n	8001fe2 <__aeabi_d2iz+0x22>
 8002004:	4c08      	ldr	r4, [pc, #32]	; (8002028 <__aeabi_d2iz+0x68>)
 8002006:	40c5      	lsrs	r5, r0
 8002008:	46a4      	mov	ip, r4
 800200a:	4463      	add	r3, ip
 800200c:	4099      	lsls	r1, r3
 800200e:	000b      	movs	r3, r1
 8002010:	432b      	orrs	r3, r5
 8002012:	e7f2      	b.n	8001ffa <__aeabi_d2iz+0x3a>
 8002014:	000003fe 	.word	0x000003fe
 8002018:	0000041d 	.word	0x0000041d
 800201c:	7fffffff 	.word	0x7fffffff
 8002020:	00000433 	.word	0x00000433
 8002024:	00000413 	.word	0x00000413
 8002028:	fffffbed 	.word	0xfffffbed

0800202c <__aeabi_i2d>:
 800202c:	b570      	push	{r4, r5, r6, lr}
 800202e:	2800      	cmp	r0, #0
 8002030:	d016      	beq.n	8002060 <__aeabi_i2d+0x34>
 8002032:	17c3      	asrs	r3, r0, #31
 8002034:	18c5      	adds	r5, r0, r3
 8002036:	405d      	eors	r5, r3
 8002038:	0fc4      	lsrs	r4, r0, #31
 800203a:	0028      	movs	r0, r5
 800203c:	f000 f84c 	bl	80020d8 <__clzsi2>
 8002040:	4a11      	ldr	r2, [pc, #68]	; (8002088 <__aeabi_i2d+0x5c>)
 8002042:	1a12      	subs	r2, r2, r0
 8002044:	280a      	cmp	r0, #10
 8002046:	dc16      	bgt.n	8002076 <__aeabi_i2d+0x4a>
 8002048:	0003      	movs	r3, r0
 800204a:	002e      	movs	r6, r5
 800204c:	3315      	adds	r3, #21
 800204e:	409e      	lsls	r6, r3
 8002050:	230b      	movs	r3, #11
 8002052:	1a18      	subs	r0, r3, r0
 8002054:	40c5      	lsrs	r5, r0
 8002056:	0553      	lsls	r3, r2, #21
 8002058:	032d      	lsls	r5, r5, #12
 800205a:	0b2d      	lsrs	r5, r5, #12
 800205c:	0d5b      	lsrs	r3, r3, #21
 800205e:	e003      	b.n	8002068 <__aeabi_i2d+0x3c>
 8002060:	2400      	movs	r4, #0
 8002062:	2300      	movs	r3, #0
 8002064:	2500      	movs	r5, #0
 8002066:	2600      	movs	r6, #0
 8002068:	051b      	lsls	r3, r3, #20
 800206a:	432b      	orrs	r3, r5
 800206c:	07e4      	lsls	r4, r4, #31
 800206e:	4323      	orrs	r3, r4
 8002070:	0030      	movs	r0, r6
 8002072:	0019      	movs	r1, r3
 8002074:	bd70      	pop	{r4, r5, r6, pc}
 8002076:	380b      	subs	r0, #11
 8002078:	4085      	lsls	r5, r0
 800207a:	0553      	lsls	r3, r2, #21
 800207c:	032d      	lsls	r5, r5, #12
 800207e:	2600      	movs	r6, #0
 8002080:	0b2d      	lsrs	r5, r5, #12
 8002082:	0d5b      	lsrs	r3, r3, #21
 8002084:	e7f0      	b.n	8002068 <__aeabi_i2d+0x3c>
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	0000041e 	.word	0x0000041e

0800208c <__aeabi_ui2d>:
 800208c:	b510      	push	{r4, lr}
 800208e:	1e04      	subs	r4, r0, #0
 8002090:	d010      	beq.n	80020b4 <__aeabi_ui2d+0x28>
 8002092:	f000 f821 	bl	80020d8 <__clzsi2>
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <__aeabi_ui2d+0x48>)
 8002098:	1a1b      	subs	r3, r3, r0
 800209a:	280a      	cmp	r0, #10
 800209c:	dc11      	bgt.n	80020c2 <__aeabi_ui2d+0x36>
 800209e:	220b      	movs	r2, #11
 80020a0:	0021      	movs	r1, r4
 80020a2:	1a12      	subs	r2, r2, r0
 80020a4:	40d1      	lsrs	r1, r2
 80020a6:	3015      	adds	r0, #21
 80020a8:	030a      	lsls	r2, r1, #12
 80020aa:	055b      	lsls	r3, r3, #21
 80020ac:	4084      	lsls	r4, r0
 80020ae:	0b12      	lsrs	r2, r2, #12
 80020b0:	0d5b      	lsrs	r3, r3, #21
 80020b2:	e001      	b.n	80020b8 <__aeabi_ui2d+0x2c>
 80020b4:	2300      	movs	r3, #0
 80020b6:	2200      	movs	r2, #0
 80020b8:	051b      	lsls	r3, r3, #20
 80020ba:	4313      	orrs	r3, r2
 80020bc:	0020      	movs	r0, r4
 80020be:	0019      	movs	r1, r3
 80020c0:	bd10      	pop	{r4, pc}
 80020c2:	0022      	movs	r2, r4
 80020c4:	380b      	subs	r0, #11
 80020c6:	4082      	lsls	r2, r0
 80020c8:	055b      	lsls	r3, r3, #21
 80020ca:	0312      	lsls	r2, r2, #12
 80020cc:	2400      	movs	r4, #0
 80020ce:	0b12      	lsrs	r2, r2, #12
 80020d0:	0d5b      	lsrs	r3, r3, #21
 80020d2:	e7f1      	b.n	80020b8 <__aeabi_ui2d+0x2c>
 80020d4:	0000041e 	.word	0x0000041e

080020d8 <__clzsi2>:
 80020d8:	211c      	movs	r1, #28
 80020da:	2301      	movs	r3, #1
 80020dc:	041b      	lsls	r3, r3, #16
 80020de:	4298      	cmp	r0, r3
 80020e0:	d301      	bcc.n	80020e6 <__clzsi2+0xe>
 80020e2:	0c00      	lsrs	r0, r0, #16
 80020e4:	3910      	subs	r1, #16
 80020e6:	0a1b      	lsrs	r3, r3, #8
 80020e8:	4298      	cmp	r0, r3
 80020ea:	d301      	bcc.n	80020f0 <__clzsi2+0x18>
 80020ec:	0a00      	lsrs	r0, r0, #8
 80020ee:	3908      	subs	r1, #8
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	4298      	cmp	r0, r3
 80020f4:	d301      	bcc.n	80020fa <__clzsi2+0x22>
 80020f6:	0900      	lsrs	r0, r0, #4
 80020f8:	3904      	subs	r1, #4
 80020fa:	a202      	add	r2, pc, #8	; (adr r2, 8002104 <__clzsi2+0x2c>)
 80020fc:	5c10      	ldrb	r0, [r2, r0]
 80020fe:	1840      	adds	r0, r0, r1
 8002100:	4770      	bx	lr
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	02020304 	.word	0x02020304
 8002108:	01010101 	.word	0x01010101
	...

08002114 <check_button1_pressed>:
	LCD_Printf(buf);
}

void check_button1_pressed(uint16_t ts_x1, uint16_t ts_y1, uint16_t ts_x2,
		uint16_t ts_y2, uint16_t ts_x3, uint16_t ts_y3, uint16_t ts_x4,
		uint16_t ts_y4) {
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	0005      	movs	r5, r0
 800211c:	000c      	movs	r4, r1
 800211e:	0010      	movs	r0, r2
 8002120:	0019      	movs	r1, r3
 8002122:	1dbb      	adds	r3, r7, #6
 8002124:	1c2a      	adds	r2, r5, #0
 8002126:	801a      	strh	r2, [r3, #0]
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	1c22      	adds	r2, r4, #0
 800212c:	801a      	strh	r2, [r3, #0]
 800212e:	1cbb      	adds	r3, r7, #2
 8002130:	1c02      	adds	r2, r0, #0
 8002132:	801a      	strh	r2, [r3, #0]
 8002134:	003b      	movs	r3, r7
 8002136:	1c0a      	adds	r2, r1, #0
 8002138:	801a      	strh	r2, [r3, #0]
	if ((x > ts_x1 && y > ts_y1) && (x < ts_x2 && y < ts_y2)
 800213a:	4b20      	ldr	r3, [pc, #128]	; (80021bc <check_button1_pressed+0xa8>)
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	1dba      	adds	r2, r7, #6
 8002140:	8812      	ldrh	r2, [r2, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d211      	bcs.n	800216a <check_button1_pressed+0x56>
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <check_button1_pressed+0xac>)
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	1d3a      	adds	r2, r7, #4
 800214c:	8812      	ldrh	r2, [r2, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d20b      	bcs.n	800216a <check_button1_pressed+0x56>
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <check_button1_pressed+0xa8>)
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	1cba      	adds	r2, r7, #2
 8002158:	8812      	ldrh	r2, [r2, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d905      	bls.n	800216a <check_button1_pressed+0x56>
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <check_button1_pressed+0xac>)
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	003a      	movs	r2, r7
 8002164:	8812      	ldrh	r2, [r2, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d81b      	bhi.n	80021a2 <check_button1_pressed+0x8e>
			|| (x > ts_x3 && y > ts_y3) && (x < ts_x4 && y < ts_y4)) {
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <check_button1_pressed+0xa8>)
 800216c:	881a      	ldrh	r2, [r3, #0]
 800216e:	2318      	movs	r3, #24
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	4293      	cmp	r3, r2
 8002176:	d218      	bcs.n	80021aa <check_button1_pressed+0x96>
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <check_button1_pressed+0xac>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	221c      	movs	r2, #28
 800217e:	18ba      	adds	r2, r7, r2
 8002180:	8812      	ldrh	r2, [r2, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d211      	bcs.n	80021aa <check_button1_pressed+0x96>
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <check_button1_pressed+0xa8>)
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	2220      	movs	r2, #32
 800218c:	18ba      	adds	r2, r7, r2
 800218e:	8812      	ldrh	r2, [r2, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d90a      	bls.n	80021aa <check_button1_pressed+0x96>
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <check_button1_pressed+0xac>)
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	2224      	movs	r2, #36	; 0x24
 800219a:	18ba      	adds	r2, r7, r2
 800219c:	8812      	ldrh	r2, [r2, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d903      	bls.n	80021aa <check_button1_pressed+0x96>
		button1_pressed = 1;
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <check_button1_pressed+0xb0>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	e003      	b.n	80021b2 <check_button1_pressed+0x9e>
	} else {
		button1_pressed = 0;
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <check_button1_pressed+0xb0>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
	}
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b002      	add	sp, #8
 80021b8:	bdb0      	pop	{r4, r5, r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	20000244 	.word	0x20000244
 80021c0:	20000246 	.word	0x20000246
 80021c4:	20000238 	.word	0x20000238

080021c8 <change_button1_animation>:

void change_button1_animation() {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
	if (button1_pressed) {
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <change_button1_animation+0x50>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01d      	beq.n	8002210 <change_button1_animation+0x48>
		if (button1_anichange == 0) {
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <change_button1_animation+0x54>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d103      	bne.n	80021e4 <change_button1_animation+0x1c>
			button1_anichange = 1;
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <change_button1_animation+0x54>)
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
 80021e2:	e006      	b.n	80021f2 <change_button1_animation+0x2a>
		} else if (button1_anichange == 1) {
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <change_button1_animation+0x54>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d102      	bne.n	80021f2 <change_button1_animation+0x2a>
			button1_anichange = 0;
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <change_button1_animation+0x54>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
		}
		if (button1_color1_changed == 1) {
 80021f2:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <change_button1_animation+0x58>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d103      	bne.n	8002202 <change_button1_animation+0x3a>
			button1_color1_changed = 0;
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <change_button1_animation+0x58>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
		} else if (button1_color2_changed == 1) {
			button1_color2_changed = 0;
		}
	}
}
 8002200:	e006      	b.n	8002210 <change_button1_animation+0x48>
		} else if (button1_color2_changed == 1) {
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <change_button1_animation+0x5c>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d102      	bne.n	8002210 <change_button1_animation+0x48>
			button1_color2_changed = 0;
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <change_button1_animation+0x5c>)
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
}
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	20000238 	.word	0x20000238
 800221c:	20000239 	.word	0x20000239
 8002220:	2000023a 	.word	0x2000023a
 8002224:	2000023b 	.word	0x2000023b

08002228 <button_animation1>:

void button_animation1(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		uint16_t r) {
 8002228:	b5b0      	push	{r4, r5, r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af04      	add	r7, sp, #16
 800222e:	0005      	movs	r5, r0
 8002230:	000c      	movs	r4, r1
 8002232:	0010      	movs	r0, r2
 8002234:	0019      	movs	r1, r3
 8002236:	1dbb      	adds	r3, r7, #6
 8002238:	1c2a      	adds	r2, r5, #0
 800223a:	801a      	strh	r2, [r3, #0]
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	1c22      	adds	r2, r4, #0
 8002240:	801a      	strh	r2, [r3, #0]
 8002242:	1cbb      	adds	r3, r7, #2
 8002244:	1c02      	adds	r2, r0, #0
 8002246:	801a      	strh	r2, [r3, #0]
 8002248:	003b      	movs	r3, r7
 800224a:	1c0a      	adds	r2, r1, #0
 800224c:	801a      	strh	r2, [r3, #0]
	LCD_DrawButton1(x, y, w, h, r, EMERALD, BLUE, 1);
 800224e:	1dbb      	adds	r3, r7, #6
 8002250:	8818      	ldrh	r0, [r3, #0]
 8002252:	1d3b      	adds	r3, r7, #4
 8002254:	8819      	ldrh	r1, [r3, #0]
 8002256:	1cbb      	adds	r3, r7, #2
 8002258:	881a      	ldrh	r2, [r3, #0]
 800225a:	003b      	movs	r3, r7
 800225c:	881c      	ldrh	r4, [r3, #0]
 800225e:	2318      	movs	r3, #24
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	2501      	movs	r5, #1
 8002266:	9503      	str	r5, [sp, #12]
 8002268:	251f      	movs	r5, #31
 800226a:	9502      	str	r5, [sp, #8]
 800226c:	4d14      	ldr	r5, [pc, #80]	; (80022c0 <button_animation1+0x98>)
 800226e:	9501      	str	r5, [sp, #4]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	0023      	movs	r3, r4
 8002274:	f003 fcce 	bl	8005c14 <LCD_DrawButton1>
	LCD_SetCursor(x + 10, y + 17);
 8002278:	1dbb      	adds	r3, r7, #6
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	330a      	adds	r3, #10
 800227e:	001a      	movs	r2, r3
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	3311      	adds	r3, #17
 8002286:	0019      	movs	r1, r3
 8002288:	0010      	movs	r0, r2
 800228a:	f005 f9c7 	bl	800761c <LCD_SetCursor>
	LCD_SetTextSize(2);
 800228e:	2002      	movs	r0, #2
 8002290:	f005 f9da 	bl	8007648 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, EMERALD);
 8002294:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <button_animation1+0x98>)
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <button_animation1+0x9c>)
 8002298:	0011      	movs	r1, r2
 800229a:	0018      	movs	r0, r3
 800229c:	f005 f9ea 	bl	8007674 <LCD_SetTextColor>
	LCD_Printf("Weather");
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <button_animation1+0xa0>)
 80022a2:	0018      	movs	r0, r3
 80022a4:	f005 f8be 	bl	8007424 <LCD_Printf>
	LCD_SetTextSize(1);
 80022a8:	2001      	movs	r0, #1
 80022aa:	f005 f9cd 	bl	8007648 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, BLACK);
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <button_animation1+0x9c>)
 80022b0:	2100      	movs	r1, #0
 80022b2:	0018      	movs	r0, r3
 80022b4:	f005 f9de 	bl	8007674 <LCD_SetTextColor>
}
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b002      	add	sp, #8
 80022be:	bdb0      	pop	{r4, r5, r7, pc}
 80022c0:	000005e5 	.word	0x000005e5
 80022c4:	0000ffff 	.word	0x0000ffff
 80022c8:	0800aca8 	.word	0x0800aca8

080022cc <button_animation2>:
void button_animation2(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		uint16_t r) {
 80022cc:	b5b0      	push	{r4, r5, r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af04      	add	r7, sp, #16
 80022d2:	0005      	movs	r5, r0
 80022d4:	000c      	movs	r4, r1
 80022d6:	0010      	movs	r0, r2
 80022d8:	0019      	movs	r1, r3
 80022da:	1dbb      	adds	r3, r7, #6
 80022dc:	1c2a      	adds	r2, r5, #0
 80022de:	801a      	strh	r2, [r3, #0]
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	1c22      	adds	r2, r4, #0
 80022e4:	801a      	strh	r2, [r3, #0]
 80022e6:	1cbb      	adds	r3, r7, #2
 80022e8:	1c02      	adds	r2, r0, #0
 80022ea:	801a      	strh	r2, [r3, #0]
 80022ec:	003b      	movs	r3, r7
 80022ee:	1c0a      	adds	r2, r1, #0
 80022f0:	801a      	strh	r2, [r3, #0]
	LCD_DrawButton1(x, y, w, h, r, NAVY, BLUE, 1);
 80022f2:	1dbb      	adds	r3, r7, #6
 80022f4:	8818      	ldrh	r0, [r3, #0]
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	8819      	ldrh	r1, [r3, #0]
 80022fa:	1cbb      	adds	r3, r7, #2
 80022fc:	881a      	ldrh	r2, [r3, #0]
 80022fe:	003b      	movs	r3, r7
 8002300:	881c      	ldrh	r4, [r3, #0]
 8002302:	2318      	movs	r3, #24
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	881b      	ldrh	r3, [r3, #0]
 8002308:	2501      	movs	r5, #1
 800230a:	9503      	str	r5, [sp, #12]
 800230c:	251f      	movs	r5, #31
 800230e:	9502      	str	r5, [sp, #8]
 8002310:	250f      	movs	r5, #15
 8002312:	9501      	str	r5, [sp, #4]
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	0023      	movs	r3, r4
 8002318:	f003 fc7c 	bl	8005c14 <LCD_DrawButton1>
	LCD_SetCursor(x + 24, y + 17);
 800231c:	1dbb      	adds	r3, r7, #6
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	3318      	adds	r3, #24
 8002322:	001a      	movs	r2, r3
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	3311      	adds	r3, #17
 800232a:	0019      	movs	r1, r3
 800232c:	0010      	movs	r0, r2
 800232e:	f005 f975 	bl	800761c <LCD_SetCursor>
	LCD_SetTextSize(2);
 8002332:	2002      	movs	r0, #2
 8002334:	f005 f988 	bl	8007648 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, NAVY);
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <button_animation2+0x98>)
 800233a:	210f      	movs	r1, #15
 800233c:	0018      	movs	r0, r3
 800233e:	f005 f999 	bl	8007674 <LCD_SetTextColor>
	LCD_Printf("Time");
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <button_animation2+0x9c>)
 8002344:	0018      	movs	r0, r3
 8002346:	f005 f86d 	bl	8007424 <LCD_Printf>
	LCD_SetTextSize(1);
 800234a:	2001      	movs	r0, #1
 800234c:	f005 f97c 	bl	8007648 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, BLACK);
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <button_animation2+0x98>)
 8002352:	2100      	movs	r1, #0
 8002354:	0018      	movs	r0, r3
 8002356:	f005 f98d 	bl	8007674 <LCD_SetTextColor>
}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	46bd      	mov	sp, r7
 800235e:	b002      	add	sp, #8
 8002360:	bdb0      	pop	{r4, r5, r7, pc}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	0000ffff 	.word	0x0000ffff
 8002368:	0800acb0 	.word	0x0800acb0

0800236c <store_data>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */

void store_data() {
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 5; i++) {
 8002372:	1dfb      	adds	r3, r7, #7
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
 8002378:	e015      	b.n	80023a6 <store_data+0x3a>
		temp_data[i] = Rx_data[i];
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	781a      	ldrb	r2, [r3, #0]
 800237e:	1dfb      	adds	r3, r7, #7
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	4917      	ldr	r1, [pc, #92]	; (80023e0 <store_data+0x74>)
 8002384:	5c89      	ldrb	r1, [r1, r2]
 8002386:	4a17      	ldr	r2, [pc, #92]	; (80023e4 <store_data+0x78>)
 8002388:	54d1      	strb	r1, [r2, r3]
		pressure_data[i] = Rx_data[i + 6];
 800238a:	1dfb      	adds	r3, r7, #7
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	1d9a      	adds	r2, r3, #6
 8002390:	1dfb      	adds	r3, r7, #7
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4912      	ldr	r1, [pc, #72]	; (80023e0 <store_data+0x74>)
 8002396:	5c89      	ldrb	r1, [r1, r2]
 8002398:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <store_data+0x7c>)
 800239a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 5; i++) {
 800239c:	1dfb      	adds	r3, r7, #7
 800239e:	781a      	ldrb	r2, [r3, #0]
 80023a0:	1dfb      	adds	r3, r7, #7
 80023a2:	3201      	adds	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
 80023a6:	1dfb      	adds	r3, r7, #7
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d9e5      	bls.n	800237a <store_data+0xe>
	}
	pressure_data[4] = ' ';
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <store_data+0x7c>)
 80023b0:	2220      	movs	r2, #32
 80023b2:	711a      	strb	r2, [r3, #4]
	humidity_data[0] = Rx_data[12];
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <store_data+0x74>)
 80023b6:	7b1a      	ldrb	r2, [r3, #12]
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <store_data+0x80>)
 80023ba:	701a      	strb	r2, [r3, #0]
	humidity_data[1] = Rx_data[13];
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <store_data+0x74>)
 80023be:	7b5a      	ldrb	r2, [r3, #13]
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <store_data+0x80>)
 80023c2:	705a      	strb	r2, [r3, #1]
	humidity_data[2] = ' ';
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <store_data+0x80>)
 80023c6:	2220      	movs	r2, #32
 80023c8:	709a      	strb	r2, [r3, #2]
	humidity_data[3] = ' ';
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <store_data+0x80>)
 80023cc:	2220      	movs	r2, #32
 80023ce:	70da      	strb	r2, [r3, #3]
	humidity_data[4] = ' ';
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <store_data+0x80>)
 80023d2:	2220      	movs	r2, #32
 80023d4:	711a      	strb	r2, [r3, #4]
}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	b002      	add	sp, #8
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	20000508 	.word	0x20000508
 80023e4:	20000500 	.word	0x20000500
 80023e8:	20000528 	.word	0x20000528
 80023ec:	2000051c 	.word	0x2000051c

080023f0 <display_data>:

void display_data() {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
	store_data();
 80023f4:	f7ff ffba 	bl	800236c <store_data>
	LCD_SetTextSize(2);
 80023f8:	2002      	movs	r0, #2
 80023fa:	f005 f925 	bl	8007648 <LCD_SetTextSize>

	LCD_SetCursor(20, 130);
 80023fe:	2182      	movs	r1, #130	; 0x82
 8002400:	2014      	movs	r0, #20
 8002402:	f005 f90b 	bl	800761c <LCD_SetCursor>
	LCD_SetTextColor(RED, BLACK);
 8002406:	23f8      	movs	r3, #248	; 0xf8
 8002408:	021b      	lsls	r3, r3, #8
 800240a:	2100      	movs	r1, #0
 800240c:	0018      	movs	r0, r3
 800240e:	f005 f931 	bl	8007674 <LCD_SetTextColor>
	LCD_Printf("Temperature:");
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <display_data+0xb0>)
 8002414:	0018      	movs	r0, r3
 8002416:	f005 f805 	bl	8007424 <LCD_Printf>
	LCD_SetTextColor(BLUE3, BLACK);
 800241a:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <display_data+0xb4>)
 800241c:	2100      	movs	r1, #0
 800241e:	0018      	movs	r0, r3
 8002420:	f005 f928 	bl	8007674 <LCD_SetTextColor>
	LCD_Printf(temp_data);
 8002424:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <display_data+0xb8>)
 8002426:	0018      	movs	r0, r3
 8002428:	f004 fffc 	bl	8007424 <LCD_Printf>

	LCD_SetCursor(20, 160);
 800242c:	21a0      	movs	r1, #160	; 0xa0
 800242e:	2014      	movs	r0, #20
 8002430:	f005 f8f4 	bl	800761c <LCD_SetCursor>
	LCD_SetTextColor(RED, BLACK);
 8002434:	23f8      	movs	r3, #248	; 0xf8
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	2100      	movs	r1, #0
 800243a:	0018      	movs	r0, r3
 800243c:	f005 f91a 	bl	8007674 <LCD_SetTextColor>
	LCD_Printf("Pressure:");
 8002440:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <display_data+0xbc>)
 8002442:	0018      	movs	r0, r3
 8002444:	f004 ffee 	bl	8007424 <LCD_Printf>
	LCD_SetTextColor(BLUE3, BLACK);
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <display_data+0xb4>)
 800244a:	2100      	movs	r1, #0
 800244c:	0018      	movs	r0, r3
 800244e:	f005 f911 	bl	8007674 <LCD_SetTextColor>
	LCD_Printf(pressure_data);
 8002452:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <display_data+0xc0>)
 8002454:	0018      	movs	r0, r3
 8002456:	f004 ffe5 	bl	8007424 <LCD_Printf>

	LCD_SetCursor(20, 190);
 800245a:	21be      	movs	r1, #190	; 0xbe
 800245c:	2014      	movs	r0, #20
 800245e:	f005 f8dd 	bl	800761c <LCD_SetCursor>
	LCD_SetTextColor(RED, BLACK);
 8002462:	23f8      	movs	r3, #248	; 0xf8
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	2100      	movs	r1, #0
 8002468:	0018      	movs	r0, r3
 800246a:	f005 f903 	bl	8007674 <LCD_SetTextColor>
	LCD_Printf("Humidity:");
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <display_data+0xc4>)
 8002470:	0018      	movs	r0, r3
 8002472:	f004 ffd7 	bl	8007424 <LCD_Printf>
	LCD_SetTextColor(BLUE3, BLACK);
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <display_data+0xb4>)
 8002478:	2100      	movs	r1, #0
 800247a:	0018      	movs	r0, r3
 800247c:	f005 f8fa 	bl	8007674 <LCD_SetTextColor>
	LCD_Printf(humidity_data);
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <display_data+0xc8>)
 8002482:	0018      	movs	r0, r3
 8002484:	f004 ffce 	bl	8007424 <LCD_Printf>

	LCD_SetTextSize(1);
 8002488:	2001      	movs	r0, #1
 800248a:	f005 f8dd 	bl	8007648 <LCD_SetTextSize>
	LCD_SetTextColor(WHITE, BLACK);
 800248e:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <display_data+0xcc>)
 8002490:	2100      	movs	r1, #0
 8002492:	0018      	movs	r0, r3
 8002494:	f005 f8ee 	bl	8007674 <LCD_SetTextColor>
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	0800acb8 	.word	0x0800acb8
 80024a4:	000003ff 	.word	0x000003ff
 80024a8:	20000500 	.word	0x20000500
 80024ac:	0800acc8 	.word	0x0800acc8
 80024b0:	20000528 	.word	0x20000528
 80024b4:	0800acd4 	.word	0x0800acd4
 80024b8:	2000051c 	.word	0x2000051c
 80024bc:	0000ffff 	.word	0x0000ffff

080024c0 <display_time>:

void display_time() {
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af02      	add	r7, sp, #8
	LCD_SetTextSize(3);
 80024c6:	2003      	movs	r0, #3
 80024c8:	f005 f8be 	bl	8007648 <LCD_SetTextSize>
	LCD_SetTextColor(YELLOW, BLACK);
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <display_time+0x4c>)
 80024ce:	2100      	movs	r1, #0
 80024d0:	0018      	movs	r0, r3
 80024d2:	f005 f8cf 	bl	8007674 <LCD_SetTextColor>
	LCD_SetCursor(30, 150);
 80024d6:	2196      	movs	r1, #150	; 0x96
 80024d8:	201e      	movs	r0, #30
 80024da:	f005 f89f 	bl	800761c <LCD_SetCursor>
	sprintf(time_buff, " %d:%d:%d PM  ", hrs, min, sec_checker);
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <display_time+0x50>)
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	001a      	movs	r2, r3
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <display_time+0x54>)
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	001c      	movs	r4, r3
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <display_time+0x58>)
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	490b      	ldr	r1, [pc, #44]	; (800251c <display_time+0x5c>)
 80024f0:	480b      	ldr	r0, [pc, #44]	; (8002520 <display_time+0x60>)
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	0023      	movs	r3, r4
 80024f6:	f006 f895 	bl	8008624 <siprintf>
	LCD_Printf(time_buff);
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <display_time+0x60>)
 80024fc:	0018      	movs	r0, r3
 80024fe:	f004 ff91 	bl	8007424 <LCD_Printf>
}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	46bd      	mov	sp, r7
 8002506:	b001      	add	sp, #4
 8002508:	bd90      	pop	{r4, r7, pc}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	0000ffe0 	.word	0x0000ffe0
 8002510:	2000023c 	.word	0x2000023c
 8002514:	2000023e 	.word	0x2000023e
 8002518:	20000242 	.word	0x20000242
 800251c:	0800ace0 	.word	0x0800ace0
 8002520:	20000468 	.word	0x20000468

08002524 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, Rx_data, Rx_data_len);
 800252c:	4904      	ldr	r1, [pc, #16]	; (8002540 <HAL_UART_RxCpltCallback+0x1c>)
 800252e:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_UART_RxCpltCallback+0x20>)
 8002530:	2214      	movs	r2, #20
 8002532:	0018      	movs	r0, r3
 8002534:	f001 fd17 	bl	8003f66 <HAL_UART_Receive_IT>
//	store_data(Rx_data);
//	display_temp(Rx_data);

}
 8002538:	46c0      	nop			; (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b002      	add	sp, #8
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000508 	.word	0x20000508
 8002544:	2000047c 	.word	0x2000047c

08002548 <main>:

int main(void) {
 8002548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254a:	b08d      	sub	sp, #52	; 0x34
 800254c:	af04      	add	r7, sp, #16
	HAL_Init();
 800254e:	f000 fc4d 	bl	8002dec <HAL_Init>

	SystemClock_Config();
 8002552:	f000 f953 	bl	80027fc <SystemClock_Config>
	ticks_timer(48);
 8002556:	2030      	movs	r0, #48	; 0x30
 8002558:	f003 f918 	bl	800578c <ticks_timer>
	uart_print_config(9600, 48);
 800255c:	2396      	movs	r3, #150	; 0x96
 800255e:	019b      	lsls	r3, r3, #6
 8002560:	2130      	movs	r1, #48	; 0x30
 8002562:	0018      	movs	r0, r3
 8002564:	f002 ffec 	bl	8005540 <uart_print_config>
	adc_Init();
 8002568:	f005 fa76 	bl	8007a58 <adc_Init>

	button_len Button1;
	Button1.x = 130;
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	2282      	movs	r2, #130	; 0x82
 8002570:	801a      	strh	r2, [r3, #0]
	Button1.y = 10;
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	220a      	movs	r2, #10
 8002576:	805a      	strh	r2, [r3, #2]
	Button1.w = 100;
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	2264      	movs	r2, #100	; 0x64
 800257c:	80da      	strh	r2, [r3, #6]
	Button1.h = 50;
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	2232      	movs	r2, #50	; 0x32
 8002582:	809a      	strh	r2, [r3, #4]
	Button1.r = 7;
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	2207      	movs	r2, #7
 8002588:	811a      	strh	r2, [r3, #8]

	Button1.ts_x1 = 650;
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	4a8a      	ldr	r2, [pc, #552]	; (80027b8 <main+0x270>)
 800258e:	815a      	strh	r2, [r3, #10]
	Button1.ts_y1 = 800;
 8002590:	1d3b      	adds	r3, r7, #4
 8002592:	22c8      	movs	r2, #200	; 0xc8
 8002594:	0092      	lsls	r2, r2, #2
 8002596:	819a      	strh	r2, [r3, #12]

	Button1.ts_x2 = 900;
 8002598:	1d3b      	adds	r3, r7, #4
 800259a:	22e1      	movs	r2, #225	; 0xe1
 800259c:	0092      	lsls	r2, r2, #2
 800259e:	81da      	strh	r2, [r3, #14]
	Button1.ts_y2 = 1200;
 80025a0:	1d3b      	adds	r3, r7, #4
 80025a2:	2296      	movs	r2, #150	; 0x96
 80025a4:	00d2      	lsls	r2, r2, #3
 80025a6:	821a      	strh	r2, [r3, #16]

	Button1.ts_x3 = 500;
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	22fa      	movs	r2, #250	; 0xfa
 80025ac:	0052      	lsls	r2, r2, #1
 80025ae:	825a      	strh	r2, [r3, #18]
	Button1.ts_y3 = 700;
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	22af      	movs	r2, #175	; 0xaf
 80025b4:	0092      	lsls	r2, r2, #2
 80025b6:	829a      	strh	r2, [r3, #20]

	Button1.ts_x4 = 800;
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	22c8      	movs	r2, #200	; 0xc8
 80025bc:	0092      	lsls	r2, r2, #2
 80025be:	82da      	strh	r2, [r3, #22]
	Button1.ts_y4 = 1000;
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	22fa      	movs	r2, #250	; 0xfa
 80025c4:	0092      	lsls	r2, r2, #2
 80025c6:	831a      	strh	r2, [r3, #24]

	print("Running\r\n");
 80025c8:	4b7c      	ldr	r3, [pc, #496]	; (80027bc <main+0x274>)
 80025ca:	0018      	movs	r0, r3
 80025cc:	f002 ff78 	bl	80054c0 <print>

	hrs = 3;
 80025d0:	4b7b      	ldr	r3, [pc, #492]	; (80027c0 <main+0x278>)
 80025d2:	2203      	movs	r2, #3
 80025d4:	801a      	strh	r2, [r3, #0]
	min = 23;
 80025d6:	4b7b      	ldr	r3, [pc, #492]	; (80027c4 <main+0x27c>)
 80025d8:	2217      	movs	r2, #23
 80025da:	801a      	strh	r2, [r3, #0]

	LCD_Begin();
 80025dc:	f003 fc2c 	bl	8005e38 <LCD_Begin>
	LCD_SetRotation(0);
 80025e0:	2000      	movs	r0, #0
 80025e2:	f005 f861 	bl	80076a8 <LCD_SetRotation>
	LCD_FillScreen(BLACK);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f004 fd22 	bl	8007030 <LCD_FillScreen>
	Touch_Begin();
 80025ec:	f005 fa48 	bl	8007a80 <Touch_Begin>

	LCD_SetTextColor(WHITE, BLACK);
 80025f0:	4b75      	ldr	r3, [pc, #468]	; (80027c8 <main+0x280>)
 80025f2:	2100      	movs	r1, #0
 80025f4:	0018      	movs	r0, r3
 80025f6:	f005 f83d 	bl	8007674 <LCD_SetTextColor>
	LCD_SetTextSize(1);
 80025fa:	2001      	movs	r0, #1
 80025fc:	f005 f824 	bl	8007648 <LCD_SetTextSize>

	MX_GPIO_Init();
 8002600:	f000 f9a8 	bl	8002954 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002604:	f000 f946 	bl	8002894 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8002608:	f000 f974 	bl	80028f4 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	memset(Rx_data, 0, Rx_data_len);
 800260c:	4b6f      	ldr	r3, [pc, #444]	; (80027cc <main+0x284>)
 800260e:	2214      	movs	r2, #20
 8002610:	2100      	movs	r1, #0
 8002612:	0018      	movs	r0, r3
 8002614:	f005 fb84 	bl	8007d20 <memset>
	HAL_UART_Receive_IT(&huart3, Rx_data, Rx_data_len);
 8002618:	496c      	ldr	r1, [pc, #432]	; (80027cc <main+0x284>)
 800261a:	4b6d      	ldr	r3, [pc, #436]	; (80027d0 <main+0x288>)
 800261c:	2214      	movs	r2, #20
 800261e:	0018      	movs	r0, r3
 8002620:	f001 fca1 	bl	8003f66 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, "Working\n\r", 10, 10);
 8002624:	496b      	ldr	r1, [pc, #428]	; (80027d4 <main+0x28c>)
 8002626:	486c      	ldr	r0, [pc, #432]	; (80027d8 <main+0x290>)
 8002628:	230a      	movs	r3, #10
 800262a:	220a      	movs	r2, #10
 800262c:	f001 fbf2 	bl	8003e14 <HAL_UART_Transmit>

	while (1) {

		x = TOUCH_VAL('x');
 8002630:	2078      	movs	r0, #120	; 0x78
 8002632:	f005 fafb 	bl	8007c2c <TOUCH_VAL>
 8002636:	0003      	movs	r3, r0
 8002638:	b29a      	uxth	r2, r3
 800263a:	4b68      	ldr	r3, [pc, #416]	; (80027dc <main+0x294>)
 800263c:	801a      	strh	r2, [r3, #0]
		y = TOUCH_VAL('y');
 800263e:	2079      	movs	r0, #121	; 0x79
 8002640:	f005 faf4 	bl	8007c2c <TOUCH_VAL>
 8002644:	0003      	movs	r3, r0
 8002646:	b29a      	uxth	r2, r3
 8002648:	4b65      	ldr	r3, [pc, #404]	; (80027e0 <main+0x298>)
 800264a:	801a      	strh	r2, [r3, #0]
		print("Pos: %d, %d\n\r", x, y);
 800264c:	4b63      	ldr	r3, [pc, #396]	; (80027dc <main+0x294>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	0019      	movs	r1, r3
 8002652:	4b63      	ldr	r3, [pc, #396]	; (80027e0 <main+0x298>)
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	001a      	movs	r2, r3
 8002658:	4b62      	ldr	r3, [pc, #392]	; (80027e4 <main+0x29c>)
 800265a:	0018      	movs	r0, r3
 800265c:	f002 ff30 	bl	80054c0 <print>

		delay_checker++;
 8002660:	4b61      	ldr	r3, [pc, #388]	; (80027e8 <main+0x2a0>)
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	3301      	adds	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	4b5f      	ldr	r3, [pc, #380]	; (80027e8 <main+0x2a0>)
 800266a:	801a      	strh	r2, [r3, #0]
		if (delay_checker > 1) {
 800266c:	4b5e      	ldr	r3, [pc, #376]	; (80027e8 <main+0x2a0>)
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d908      	bls.n	8002686 <main+0x13e>
			sec_checker++;
 8002674:	4b5d      	ldr	r3, [pc, #372]	; (80027ec <main+0x2a4>)
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	3301      	adds	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	4b5b      	ldr	r3, [pc, #364]	; (80027ec <main+0x2a4>)
 800267e:	801a      	strh	r2, [r3, #0]
			delay_checker = 0;
 8002680:	4b59      	ldr	r3, [pc, #356]	; (80027e8 <main+0x2a0>)
 8002682:	2200      	movs	r2, #0
 8002684:	801a      	strh	r2, [r3, #0]
		}

		if (sec_checker > 59) {
 8002686:	4b59      	ldr	r3, [pc, #356]	; (80027ec <main+0x2a4>)
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	2b3b      	cmp	r3, #59	; 0x3b
 800268c:	d91d      	bls.n	80026ca <main+0x182>
			if (min > 59) {
 800268e:	4b4d      	ldr	r3, [pc, #308]	; (80027c4 <main+0x27c>)
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	2b3b      	cmp	r3, #59	; 0x3b
 8002694:	d909      	bls.n	80026aa <main+0x162>
				min = 0;
 8002696:	4b4b      	ldr	r3, [pc, #300]	; (80027c4 <main+0x27c>)
 8002698:	2200      	movs	r2, #0
 800269a:	801a      	strh	r2, [r3, #0]
				hrs++;
 800269c:	4b48      	ldr	r3, [pc, #288]	; (80027c0 <main+0x278>)
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	3301      	adds	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	4b46      	ldr	r3, [pc, #280]	; (80027c0 <main+0x278>)
 80026a6:	801a      	strh	r2, [r3, #0]
 80026a8:	e005      	b.n	80026b6 <main+0x16e>
			} else
				min++;
 80026aa:	4b46      	ldr	r3, [pc, #280]	; (80027c4 <main+0x27c>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	3301      	adds	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	4b44      	ldr	r3, [pc, #272]	; (80027c4 <main+0x27c>)
 80026b4:	801a      	strh	r2, [r3, #0]

			if (hrs > 24)
 80026b6:	4b42      	ldr	r3, [pc, #264]	; (80027c0 <main+0x278>)
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	2b18      	cmp	r3, #24
 80026bc:	d902      	bls.n	80026c4 <main+0x17c>
				hrs = 0;
 80026be:	4b40      	ldr	r3, [pc, #256]	; (80027c0 <main+0x278>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	801a      	strh	r2, [r3, #0]
			sec_checker = 0;
 80026c4:	4b49      	ldr	r3, [pc, #292]	; (80027ec <main+0x2a4>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	801a      	strh	r2, [r3, #0]
//		LCD_SetCursor(0, 0);
//		print_touch();


		//===============================================================
		check_button1_pressed(Button1.ts_x1, Button1.ts_y1, Button1.ts_x2,
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	895c      	ldrh	r4, [r3, #10]
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	899d      	ldrh	r5, [r3, #12]
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	89de      	ldrh	r6, [r3, #14]
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	8a1b      	ldrh	r3, [r3, #16]
 80026da:	469c      	mov	ip, r3
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	8a5b      	ldrh	r3, [r3, #18]
 80026e0:	1d3a      	adds	r2, r7, #4
 80026e2:	8a92      	ldrh	r2, [r2, #20]
 80026e4:	1d39      	adds	r1, r7, #4
 80026e6:	8ac9      	ldrh	r1, [r1, #22]
 80026e8:	1d38      	adds	r0, r7, #4
 80026ea:	8b00      	ldrh	r0, [r0, #24]
 80026ec:	9003      	str	r0, [sp, #12]
 80026ee:	9102      	str	r1, [sp, #8]
 80026f0:	9201      	str	r2, [sp, #4]
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	4663      	mov	r3, ip
 80026f6:	0032      	movs	r2, r6
 80026f8:	0029      	movs	r1, r5
 80026fa:	0020      	movs	r0, r4
 80026fc:	f7ff fd0a 	bl	8002114 <check_button1_pressed>
				Button1.ts_y2, Button1.ts_x3, Button1.ts_y3, Button1.ts_x4,
				Button1.ts_y4);
		//===============================================================
		//===============================================================
		change_button1_animation(Button1.x, Button1.y, Button1.w, Button1.h,
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	0018      	movs	r0, r3
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	885b      	ldrh	r3, [r3, #2]
 800270a:	0019      	movs	r1, r3
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	88db      	ldrh	r3, [r3, #6]
 8002710:	001a      	movs	r2, r3
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	889b      	ldrh	r3, [r3, #4]
 8002716:	001c      	movs	r4, r3
				Button1.r);
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	891b      	ldrh	r3, [r3, #8]
		change_button1_animation(Button1.x, Button1.y, Button1.w, Button1.h,
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	0023      	movs	r3, r4
 8002720:	f7ff fd52 	bl	80021c8 <change_button1_animation>
		//===============================================================
		//===============================================================
		if (button1_anichange == 0) {
 8002724:	4b32      	ldr	r3, [pc, #200]	; (80027f0 <main+0x2a8>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d11f      	bne.n	800276c <main+0x224>
			if (button1_color1_changed == 0) {
 800272c:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <main+0x2ac>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d118      	bne.n	8002766 <main+0x21e>
				button_animation2(Button1.x, Button1.y, Button1.w, Button1.h,
 8002734:	1d3b      	adds	r3, r7, #4
 8002736:	8818      	ldrh	r0, [r3, #0]
 8002738:	1d3b      	adds	r3, r7, #4
 800273a:	8859      	ldrh	r1, [r3, #2]
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	88da      	ldrh	r2, [r3, #6]
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	889c      	ldrh	r4, [r3, #4]
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	891b      	ldrh	r3, [r3, #8]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	0023      	movs	r3, r4
 800274c:	f7ff fdbe 	bl	80022cc <button_animation2>
						Button1.r);
				button1_color1_changed = 1;
 8002750:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <main+0x2ac>)
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
				LCD_FillRect(10, 100, 230, 150, BLACK);
 8002756:	2300      	movs	r3, #0
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	2396      	movs	r3, #150	; 0x96
 800275c:	22e6      	movs	r2, #230	; 0xe6
 800275e:	2164      	movs	r1, #100	; 0x64
 8002760:	200a      	movs	r0, #10
 8002762:	f004 faf3 	bl	8006d4c <LCD_FillRect>
			}
			display_time();
 8002766:	f7ff feab 	bl	80024c0 <display_time>
 800276a:	e761      	b.n	8002630 <main+0xe8>
		} else if (button1_anichange == 1) {
 800276c:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <main+0x2a8>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d000      	beq.n	8002776 <main+0x22e>
 8002774:	e75c      	b.n	8002630 <main+0xe8>
			if (button1_color2_changed == 0) {
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <main+0x2b0>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d118      	bne.n	80027b0 <main+0x268>
				button_animation1(Button1.x, Button1.y, Button1.w, Button1.h,
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	8818      	ldrh	r0, [r3, #0]
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	8859      	ldrh	r1, [r3, #2]
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	88da      	ldrh	r2, [r3, #6]
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	889c      	ldrh	r4, [r3, #4]
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	891b      	ldrh	r3, [r3, #8]
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	0023      	movs	r3, r4
 8002796:	f7ff fd47 	bl	8002228 <button_animation1>
						Button1.r);
				button1_color2_changed = 1;
 800279a:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <main+0x2b0>)
 800279c:	2201      	movs	r2, #1
 800279e:	701a      	strb	r2, [r3, #0]
				LCD_FillRect(10, 100, 230, 150, BLACK);
 80027a0:	2300      	movs	r3, #0
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2396      	movs	r3, #150	; 0x96
 80027a6:	22e6      	movs	r2, #230	; 0xe6
 80027a8:	2164      	movs	r1, #100	; 0x64
 80027aa:	200a      	movs	r0, #10
 80027ac:	f004 face 	bl	8006d4c <LCD_FillRect>
			}
			display_data();
 80027b0:	f7ff fe1e 	bl	80023f0 <display_data>
	while (1) {
 80027b4:	e73c      	b.n	8002630 <main+0xe8>
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	0000028a 	.word	0x0000028a
 80027bc:	0800acf0 	.word	0x0800acf0
 80027c0:	2000023c 	.word	0x2000023c
 80027c4:	2000023e 	.word	0x2000023e
 80027c8:	0000ffff 	.word	0x0000ffff
 80027cc:	20000508 	.word	0x20000508
 80027d0:	2000047c 	.word	0x2000047c
 80027d4:	0800acfc 	.word	0x0800acfc
 80027d8:	20000568 	.word	0x20000568
 80027dc:	20000244 	.word	0x20000244
 80027e0:	20000246 	.word	0x20000246
 80027e4:	0800ad08 	.word	0x0800ad08
 80027e8:	20000240 	.word	0x20000240
 80027ec:	20000242 	.word	0x20000242
 80027f0:	20000239 	.word	0x20000239
 80027f4:	2000023a 	.word	0x2000023a
 80027f8:	2000023b 	.word	0x2000023b

080027fc <SystemClock_Config>:

	}
	/* USER CODE END 3 */
}

void SystemClock_Config(void) {
 80027fc:	b590      	push	{r4, r7, lr}
 80027fe:	b091      	sub	sp, #68	; 0x44
 8002800:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002802:	2410      	movs	r4, #16
 8002804:	193b      	adds	r3, r7, r4
 8002806:	0018      	movs	r0, r3
 8002808:	2330      	movs	r3, #48	; 0x30
 800280a:	001a      	movs	r2, r3
 800280c:	2100      	movs	r1, #0
 800280e:	f005 fa87 	bl	8007d20 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002812:	003b      	movs	r3, r7
 8002814:	0018      	movs	r0, r3
 8002816:	2310      	movs	r3, #16
 8002818:	001a      	movs	r2, r3
 800281a:	2100      	movs	r1, #0
 800281c:	f005 fa80 	bl	8007d20 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002820:	0021      	movs	r1, r4
 8002822:	187b      	adds	r3, r7, r1
 8002824:	2202      	movs	r2, #2
 8002826:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002828:	187b      	adds	r3, r7, r1
 800282a:	2201      	movs	r2, #1
 800282c:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800282e:	187b      	adds	r3, r7, r1
 8002830:	2210      	movs	r2, #16
 8002832:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002834:	187b      	adds	r3, r7, r1
 8002836:	2202      	movs	r2, #2
 8002838:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800283a:	187b      	adds	r3, r7, r1
 800283c:	2280      	movs	r2, #128	; 0x80
 800283e:	0212      	lsls	r2, r2, #8
 8002840:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002842:	187b      	adds	r3, r7, r1
 8002844:	2280      	movs	r2, #128	; 0x80
 8002846:	0352      	lsls	r2, r2, #13
 8002848:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800284a:	187b      	adds	r3, r7, r1
 800284c:	2200      	movs	r2, #0
 800284e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002850:	187b      	adds	r3, r7, r1
 8002852:	0018      	movs	r0, r3
 8002854:	f000 fe18 	bl	8003488 <HAL_RCC_OscConfig>
 8002858:	1e03      	subs	r3, r0, #0
 800285a:	d001      	beq.n	8002860 <SystemClock_Config+0x64>
		Error_Handler();
 800285c:	f000 f8e4 	bl	8002a28 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002860:	003b      	movs	r3, r7
 8002862:	2207      	movs	r2, #7
 8002864:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002866:	003b      	movs	r3, r7
 8002868:	2202      	movs	r2, #2
 800286a:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800286c:	003b      	movs	r3, r7
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002872:	003b      	movs	r3, r7
 8002874:	2200      	movs	r2, #0
 8002876:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002878:	003b      	movs	r3, r7
 800287a:	2101      	movs	r1, #1
 800287c:	0018      	movs	r0, r3
 800287e:	f001 f921 	bl	8003ac4 <HAL_RCC_ClockConfig>
 8002882:	1e03      	subs	r3, r0, #0
 8002884:	d001      	beq.n	800288a <SystemClock_Config+0x8e>
		Error_Handler();
 8002886:	f000 f8cf 	bl	8002a28 <Error_Handler>
	}
}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	b011      	add	sp, #68	; 0x44
 8002890:	bd90      	pop	{r4, r7, pc}
	...

08002894 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <MX_USART2_UART_Init+0x58>)
 800289a:	4a15      	ldr	r2, [pc, #84]	; (80028f0 <MX_USART2_UART_Init+0x5c>)
 800289c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800289e:	4b13      	ldr	r3, [pc, #76]	; (80028ec <MX_USART2_UART_Init+0x58>)
 80028a0:	2296      	movs	r2, #150	; 0x96
 80028a2:	0192      	lsls	r2, r2, #6
 80028a4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <MX_USART2_UART_Init+0x58>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <MX_USART2_UART_Init+0x58>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <MX_USART2_UART_Init+0x58>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <MX_USART2_UART_Init+0x58>)
 80028ba:	220c      	movs	r2, #12
 80028bc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <MX_USART2_UART_Init+0x58>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <MX_USART2_UART_Init+0x58>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <MX_USART2_UART_Init+0x58>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <MX_USART2_UART_Init+0x58>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <MX_USART2_UART_Init+0x58>)
 80028d8:	0018      	movs	r0, r3
 80028da:	f001 fa47 	bl	8003d6c <HAL_UART_Init>
 80028de:	1e03      	subs	r3, r0, #0
 80028e0:	d001      	beq.n	80028e6 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80028e2:	f000 f8a1 	bl	8002a28 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000568 	.word	0x20000568
 80028f0:	40004400 	.word	0x40004400

080028f4 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <MX_USART3_UART_Init+0x58>)
 80028fa:	4a15      	ldr	r2, [pc, #84]	; (8002950 <MX_USART3_UART_Init+0x5c>)
 80028fc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80028fe:	4b13      	ldr	r3, [pc, #76]	; (800294c <MX_USART3_UART_Init+0x58>)
 8002900:	22e1      	movs	r2, #225	; 0xe1
 8002902:	0252      	lsls	r2, r2, #9
 8002904:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <MX_USART3_UART_Init+0x58>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800290c:	4b0f      	ldr	r3, [pc, #60]	; (800294c <MX_USART3_UART_Init+0x58>)
 800290e:	2200      	movs	r2, #0
 8002910:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002912:	4b0e      	ldr	r3, [pc, #56]	; (800294c <MX_USART3_UART_Init+0x58>)
 8002914:	2200      	movs	r2, #0
 8002916:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <MX_USART3_UART_Init+0x58>)
 800291a:	220c      	movs	r2, #12
 800291c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <MX_USART3_UART_Init+0x58>)
 8002920:	2200      	movs	r2, #0
 8002922:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <MX_USART3_UART_Init+0x58>)
 8002926:	2200      	movs	r2, #0
 8002928:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800292a:	4b08      	ldr	r3, [pc, #32]	; (800294c <MX_USART3_UART_Init+0x58>)
 800292c:	2200      	movs	r2, #0
 800292e:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <MX_USART3_UART_Init+0x58>)
 8002932:	2200      	movs	r2, #0
 8002934:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002936:	4b05      	ldr	r3, [pc, #20]	; (800294c <MX_USART3_UART_Init+0x58>)
 8002938:	0018      	movs	r0, r3
 800293a:	f001 fa17 	bl	8003d6c <HAL_UART_Init>
 800293e:	1e03      	subs	r3, r0, #0
 8002940:	d001      	beq.n	8002946 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8002942:	f000 f871 	bl	8002a28 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	2000047c 	.word	0x2000047c
 8002950:	40004800 	.word	0x40004800

08002954 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800295a:	240c      	movs	r4, #12
 800295c:	193b      	adds	r3, r7, r4
 800295e:	0018      	movs	r0, r3
 8002960:	2314      	movs	r3, #20
 8002962:	001a      	movs	r2, r3
 8002964:	2100      	movs	r1, #0
 8002966:	f005 f9db 	bl	8007d20 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800296a:	4b2d      	ldr	r3, [pc, #180]	; (8002a20 <MX_GPIO_Init+0xcc>)
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <MX_GPIO_Init+0xcc>)
 8002970:	2180      	movs	r1, #128	; 0x80
 8002972:	0309      	lsls	r1, r1, #12
 8002974:	430a      	orrs	r2, r1
 8002976:	615a      	str	r2, [r3, #20]
 8002978:	4b29      	ldr	r3, [pc, #164]	; (8002a20 <MX_GPIO_Init+0xcc>)
 800297a:	695a      	ldr	r2, [r3, #20]
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	031b      	lsls	r3, r3, #12
 8002980:	4013      	ands	r3, r2
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002986:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <MX_GPIO_Init+0xcc>)
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <MX_GPIO_Init+0xcc>)
 800298c:	2180      	movs	r1, #128	; 0x80
 800298e:	03c9      	lsls	r1, r1, #15
 8002990:	430a      	orrs	r2, r1
 8002992:	615a      	str	r2, [r3, #20]
 8002994:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <MX_GPIO_Init+0xcc>)
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	03db      	lsls	r3, r3, #15
 800299c:	4013      	ands	r3, r2
 800299e:	607b      	str	r3, [r7, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	4b1f      	ldr	r3, [pc, #124]	; (8002a20 <MX_GPIO_Init+0xcc>)
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <MX_GPIO_Init+0xcc>)
 80029a8:	2180      	movs	r1, #128	; 0x80
 80029aa:	0289      	lsls	r1, r1, #10
 80029ac:	430a      	orrs	r2, r1
 80029ae:	615a      	str	r2, [r3, #20]
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <MX_GPIO_Init+0xcc>)
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	029b      	lsls	r3, r3, #10
 80029b8:	4013      	ands	r3, r2
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80029be:	2390      	movs	r3, #144	; 0x90
 80029c0:	05db      	lsls	r3, r3, #23
 80029c2:	2200      	movs	r2, #0
 80029c4:	2120      	movs	r1, #32
 80029c6:	0018      	movs	r0, r3
 80029c8:	f000 fd40 	bl	800344c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80029cc:	193b      	adds	r3, r7, r4
 80029ce:	2280      	movs	r2, #128	; 0x80
 80029d0:	0192      	lsls	r2, r2, #6
 80029d2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029d4:	193b      	adds	r3, r7, r4
 80029d6:	2284      	movs	r2, #132	; 0x84
 80029d8:	0392      	lsls	r2, r2, #14
 80029da:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	193b      	adds	r3, r7, r4
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029e2:	193b      	adds	r3, r7, r4
 80029e4:	4a0f      	ldr	r2, [pc, #60]	; (8002a24 <MX_GPIO_Init+0xd0>)
 80029e6:	0019      	movs	r1, r3
 80029e8:	0010      	movs	r0, r2
 80029ea:	f000 fbbf 	bl	800316c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80029ee:	0021      	movs	r1, r4
 80029f0:	187b      	adds	r3, r7, r1
 80029f2:	2220      	movs	r2, #32
 80029f4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f6:	187b      	adds	r3, r7, r1
 80029f8:	2201      	movs	r2, #1
 80029fa:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	187b      	adds	r3, r7, r1
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	187b      	adds	r3, r7, r1
 8002a04:	2200      	movs	r2, #0
 8002a06:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002a08:	187a      	adds	r2, r7, r1
 8002a0a:	2390      	movs	r3, #144	; 0x90
 8002a0c:	05db      	lsls	r3, r3, #23
 8002a0e:	0011      	movs	r1, r2
 8002a10:	0018      	movs	r0, r3
 8002a12:	f000 fbab 	bl	800316c <HAL_GPIO_Init>

}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b009      	add	sp, #36	; 0x24
 8002a1c:	bd90      	pop	{r4, r7, pc}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	40021000 	.word	0x40021000
 8002a24:	48000800 	.word	0x48000800

08002a28 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a2c:	b672      	cpsid	i
}
 8002a2e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a30:	e7fe      	b.n	8002a30 <Error_Handler+0x8>
	...

08002a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3a:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <HAL_MspInit+0x44>)
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <HAL_MspInit+0x44>)
 8002a40:	2101      	movs	r1, #1
 8002a42:	430a      	orrs	r2, r1
 8002a44:	619a      	str	r2, [r3, #24]
 8002a46:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <HAL_MspInit+0x44>)
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <HAL_MspInit+0x44>)
 8002a54:	69da      	ldr	r2, [r3, #28]
 8002a56:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <HAL_MspInit+0x44>)
 8002a58:	2180      	movs	r1, #128	; 0x80
 8002a5a:	0549      	lsls	r1, r1, #21
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	61da      	str	r2, [r3, #28]
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_MspInit+0x44>)
 8002a62:	69da      	ldr	r2, [r3, #28]
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	055b      	lsls	r3, r3, #21
 8002a68:	4013      	ands	r3, r2
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b002      	add	sp, #8
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	40021000 	.word	0x40021000

08002a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a7c:	b590      	push	{r4, r7, lr}
 8002a7e:	b08d      	sub	sp, #52	; 0x34
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	241c      	movs	r4, #28
 8002a86:	193b      	adds	r3, r7, r4
 8002a88:	0018      	movs	r0, r3
 8002a8a:	2314      	movs	r3, #20
 8002a8c:	001a      	movs	r2, r3
 8002a8e:	2100      	movs	r1, #0
 8002a90:	f005 f946 	bl	8007d20 <memset>
  if(huart->Instance==USART2)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a41      	ldr	r2, [pc, #260]	; (8002ba0 <HAL_UART_MspInit+0x124>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d13b      	bne.n	8002b16 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a9e:	4b41      	ldr	r3, [pc, #260]	; (8002ba4 <HAL_UART_MspInit+0x128>)
 8002aa0:	69da      	ldr	r2, [r3, #28]
 8002aa2:	4b40      	ldr	r3, [pc, #256]	; (8002ba4 <HAL_UART_MspInit+0x128>)
 8002aa4:	2180      	movs	r1, #128	; 0x80
 8002aa6:	0289      	lsls	r1, r1, #10
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	61da      	str	r2, [r3, #28]
 8002aac:	4b3d      	ldr	r3, [pc, #244]	; (8002ba4 <HAL_UART_MspInit+0x128>)
 8002aae:	69da      	ldr	r2, [r3, #28]
 8002ab0:	2380      	movs	r3, #128	; 0x80
 8002ab2:	029b      	lsls	r3, r3, #10
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
 8002ab8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aba:	4b3a      	ldr	r3, [pc, #232]	; (8002ba4 <HAL_UART_MspInit+0x128>)
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <HAL_UART_MspInit+0x128>)
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	0289      	lsls	r1, r1, #10
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	615a      	str	r2, [r3, #20]
 8002ac8:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <HAL_UART_MspInit+0x128>)
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	029b      	lsls	r3, r3, #10
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ad6:	0021      	movs	r1, r4
 8002ad8:	187b      	adds	r3, r7, r1
 8002ada:	220c      	movs	r2, #12
 8002adc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ade:	187b      	adds	r3, r7, r1
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aea:	187b      	adds	r3, r7, r1
 8002aec:	2203      	movs	r2, #3
 8002aee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	2201      	movs	r2, #1
 8002af4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af6:	187a      	adds	r2, r7, r1
 8002af8:	2390      	movs	r3, #144	; 0x90
 8002afa:	05db      	lsls	r3, r3, #23
 8002afc:	0011      	movs	r1, r2
 8002afe:	0018      	movs	r0, r3
 8002b00:	f000 fb34 	bl	800316c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b04:	2200      	movs	r2, #0
 8002b06:	2100      	movs	r1, #0
 8002b08:	201c      	movs	r0, #28
 8002b0a:	f000 fa7f 	bl	800300c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b0e:	201c      	movs	r0, #28
 8002b10:	f000 fa91 	bl	8003036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b14:	e03f      	b.n	8002b96 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART3)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <HAL_UART_MspInit+0x12c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d13a      	bne.n	8002b96 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b20:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <HAL_UART_MspInit+0x128>)
 8002b22:	69da      	ldr	r2, [r3, #28]
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <HAL_UART_MspInit+0x128>)
 8002b26:	2180      	movs	r1, #128	; 0x80
 8002b28:	02c9      	lsls	r1, r1, #11
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	61da      	str	r2, [r3, #28]
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_UART_MspInit+0x128>)
 8002b30:	69da      	ldr	r2, [r3, #28]
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	02db      	lsls	r3, r3, #11
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b3c:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_UART_MspInit+0x128>)
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <HAL_UART_MspInit+0x128>)
 8002b42:	2180      	movs	r1, #128	; 0x80
 8002b44:	0309      	lsls	r1, r1, #12
 8002b46:	430a      	orrs	r2, r1
 8002b48:	615a      	str	r2, [r3, #20]
 8002b4a:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <HAL_UART_MspInit+0x128>)
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	031b      	lsls	r3, r3, #12
 8002b52:	4013      	ands	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b58:	211c      	movs	r1, #28
 8002b5a:	187b      	adds	r3, r7, r1
 8002b5c:	22c0      	movs	r2, #192	; 0xc0
 8002b5e:	0112      	lsls	r2, r2, #4
 8002b60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b62:	187b      	adds	r3, r7, r1
 8002b64:	2202      	movs	r2, #2
 8002b66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b68:	187b      	adds	r3, r7, r1
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b6e:	187b      	adds	r3, r7, r1
 8002b70:	2203      	movs	r2, #3
 8002b72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8002b74:	187b      	adds	r3, r7, r1
 8002b76:	2201      	movs	r2, #1
 8002b78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b7a:	187b      	adds	r3, r7, r1
 8002b7c:	4a0b      	ldr	r2, [pc, #44]	; (8002bac <HAL_UART_MspInit+0x130>)
 8002b7e:	0019      	movs	r1, r3
 8002b80:	0010      	movs	r0, r2
 8002b82:	f000 faf3 	bl	800316c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	201d      	movs	r0, #29
 8002b8c:	f000 fa3e 	bl	800300c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002b90:	201d      	movs	r0, #29
 8002b92:	f000 fa50 	bl	8003036 <HAL_NVIC_EnableIRQ>
}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b00d      	add	sp, #52	; 0x34
 8002b9c:	bd90      	pop	{r4, r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	40004400 	.word	0x40004400
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40004800 	.word	0x40004800
 8002bac:	48000800 	.word	0x48000800

08002bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bb4:	e7fe      	b.n	8002bb4 <NMI_Handler+0x4>

08002bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bba:	e7fe      	b.n	8002bba <HardFault_Handler+0x4>

08002bbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bd4:	f000 f952 	bl	8002e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bd8:	46c0      	nop			; (mov r8, r8)
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002be4:	4b03      	ldr	r3, [pc, #12]	; (8002bf4 <USART2_IRQHandler+0x14>)
 8002be6:	0018      	movs	r0, r3
 8002be8:	f001 fa1e 	bl	8004028 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	20000568 	.word	0x20000568

08002bf8 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <USART3_4_IRQHandler+0x14>)
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f001 fa12 	bl	8004028 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8002c04:	46c0      	nop			; (mov r8, r8)
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	2000047c 	.word	0x2000047c

08002c10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
	return 1;
 8002c14:	2301      	movs	r3, #1
}
 8002c16:	0018      	movs	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <_kill>:

int _kill(int pid, int sig)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c26:	f005 f851 	bl	8007ccc <__errno>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	2216      	movs	r2, #22
 8002c2e:	601a      	str	r2, [r3, #0]
	return -1;
 8002c30:	2301      	movs	r3, #1
 8002c32:	425b      	negs	r3, r3
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <_exit>:

void _exit (int status)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c44:	2301      	movs	r3, #1
 8002c46:	425a      	negs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7ff ffe5 	bl	8002c1c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c52:	e7fe      	b.n	8002c52 <_exit+0x16>

08002c54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	e00a      	b.n	8002c7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c66:	e000      	b.n	8002c6a <_read+0x16>
 8002c68:	bf00      	nop
 8002c6a:	0001      	movs	r1, r0
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	1c5a      	adds	r2, r3, #1
 8002c70:	60ba      	str	r2, [r7, #8]
 8002c72:	b2ca      	uxtb	r2, r1
 8002c74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	dbf0      	blt.n	8002c66 <_read+0x12>
	}

return len;
 8002c84:	687b      	ldr	r3, [r7, #4]
}
 8002c86:	0018      	movs	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b006      	add	sp, #24
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	e009      	b.n	8002cb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	60ba      	str	r2, [r7, #8]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	e000      	b.n	8002cae <_write+0x20>
 8002cac:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	dbf1      	blt.n	8002ca0 <_write+0x12>
	}
	return len;
 8002cbc:	687b      	ldr	r3, [r7, #4]
}
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b006      	add	sp, #24
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <_close>:

int _close(int file)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
	return -1;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	425b      	negs	r3, r3
}
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b002      	add	sp, #8
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2280      	movs	r2, #128	; 0x80
 8002ce8:	0192      	lsls	r2, r2, #6
 8002cea:	605a      	str	r2, [r3, #4]
	return 0;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	0018      	movs	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b002      	add	sp, #8
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <_isatty>:

int _isatty(int file)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
	return 1;
 8002cfe:	2301      	movs	r3, #1
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
	return 0;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	0018      	movs	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b004      	add	sp, #16
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d28:	4a14      	ldr	r2, [pc, #80]	; (8002d7c <_sbrk+0x5c>)
 8002d2a:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <_sbrk+0x60>)
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d34:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <_sbrk+0x64>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <_sbrk+0x64>)
 8002d3e:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <_sbrk+0x68>)
 8002d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	18d3      	adds	r3, r2, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d207      	bcs.n	8002d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d50:	f004 ffbc 	bl	8007ccc <__errno>
 8002d54:	0003      	movs	r3, r0
 8002d56:	220c      	movs	r2, #12
 8002d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	425b      	negs	r3, r3
 8002d5e:	e009      	b.n	8002d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <_sbrk+0x64>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <_sbrk+0x64>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	18d2      	adds	r2, r2, r3
 8002d6e:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <_sbrk+0x64>)
 8002d70:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b006      	add	sp, #24
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20004000 	.word	0x20004000
 8002d80:	00000400 	.word	0x00000400
 8002d84:	20000248 	.word	0x20000248
 8002d88:	20000600 	.word	0x20000600

08002d8c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d98:	480d      	ldr	r0, [pc, #52]	; (8002dd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d9c:	480d      	ldr	r0, [pc, #52]	; (8002dd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d9e:	490e      	ldr	r1, [pc, #56]	; (8002dd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002da0:	4a0e      	ldr	r2, [pc, #56]	; (8002ddc <LoopForever+0xe>)
  movs r3, #0
 8002da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da4:	e002      	b.n	8002dac <LoopCopyDataInit>

08002da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002daa:	3304      	adds	r3, #4

08002dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002db0:	d3f9      	bcc.n	8002da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002db2:	4a0b      	ldr	r2, [pc, #44]	; (8002de0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002db4:	4c0b      	ldr	r4, [pc, #44]	; (8002de4 <LoopForever+0x16>)
  movs r3, #0
 8002db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db8:	e001      	b.n	8002dbe <LoopFillZerobss>

08002dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dbc:	3204      	adds	r2, #4

08002dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dc0:	d3fb      	bcc.n	8002dba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002dc2:	f7ff ffe3 	bl	8002d8c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002dc6:	f004 ff87 	bl	8007cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dca:	f7ff fbbd 	bl	8002548 <main>

08002dce <LoopForever>:

LoopForever:
    b LoopForever
 8002dce:	e7fe      	b.n	8002dce <LoopForever>
  ldr   r0, =_estack
 8002dd0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd8:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8002ddc:	0800b584 	.word	0x0800b584
  ldr r2, =_sbss
 8002de0:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8002de4:	20000600 	.word	0x20000600

08002de8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002de8:	e7fe      	b.n	8002de8 <ADC1_IRQHandler>
	...

08002dec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002df0:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <HAL_Init+0x24>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <HAL_Init+0x24>)
 8002df6:	2110      	movs	r1, #16
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f000 f809 	bl	8002e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e02:	f7ff fe17 	bl	8002a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	40022000 	.word	0x40022000

08002e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e14:	b590      	push	{r4, r7, lr}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <HAL_InitTick+0x5c>)
 8002e1e:	681c      	ldr	r4, [r3, #0]
 8002e20:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <HAL_InitTick+0x60>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	0019      	movs	r1, r3
 8002e26:	23fa      	movs	r3, #250	; 0xfa
 8002e28:	0098      	lsls	r0, r3, #2
 8002e2a:	f7fd f989 	bl	8000140 <__udivsi3>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	0019      	movs	r1, r3
 8002e32:	0020      	movs	r0, r4
 8002e34:	f7fd f984 	bl	8000140 <__udivsi3>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f000 f90b 	bl	8003056 <HAL_SYSTICK_Config>
 8002e40:	1e03      	subs	r3, r0, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e00f      	b.n	8002e68 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d80b      	bhi.n	8002e66 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	2301      	movs	r3, #1
 8002e52:	425b      	negs	r3, r3
 8002e54:	2200      	movs	r2, #0
 8002e56:	0018      	movs	r0, r3
 8002e58:	f000 f8d8 	bl	800300c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_InitTick+0x64>)
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	0018      	movs	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b003      	add	sp, #12
 8002e6e:	bd90      	pop	{r4, r7, pc}
 8002e70:	20000000 	.word	0x20000000
 8002e74:	20000008 	.word	0x20000008
 8002e78:	20000004 	.word	0x20000004

08002e7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_IncTick+0x1c>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	001a      	movs	r2, r3
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_IncTick+0x20>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	18d2      	adds	r2, r2, r3
 8002e8c:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <HAL_IncTick+0x20>)
 8002e8e:	601a      	str	r2, [r3, #0]
}
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	20000008 	.word	0x20000008
 8002e9c:	200005ec 	.word	0x200005ec

08002ea0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea4:	4b02      	ldr	r3, [pc, #8]	; (8002eb0 <HAL_GetTick+0x10>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	200005ec 	.word	0x200005ec

08002eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	0002      	movs	r2, r0
 8002ebc:	1dfb      	adds	r3, r7, #7
 8002ebe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ec0:	1dfb      	adds	r3, r7, #7
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8002ec6:	d809      	bhi.n	8002edc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec8:	1dfb      	adds	r3, r7, #7
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	001a      	movs	r2, r3
 8002ece:	231f      	movs	r3, #31
 8002ed0:	401a      	ands	r2, r3
 8002ed2:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <__NVIC_EnableIRQ+0x30>)
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	4091      	lsls	r1, r2
 8002ed8:	000a      	movs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]
  }
}
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b002      	add	sp, #8
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	e000e100 	.word	0xe000e100

08002ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ee8:	b590      	push	{r4, r7, lr}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	0002      	movs	r2, r0
 8002ef0:	6039      	str	r1, [r7, #0]
 8002ef2:	1dfb      	adds	r3, r7, #7
 8002ef4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ef6:	1dfb      	adds	r3, r7, #7
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b7f      	cmp	r3, #127	; 0x7f
 8002efc:	d828      	bhi.n	8002f50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002efe:	4a2f      	ldr	r2, [pc, #188]	; (8002fbc <__NVIC_SetPriority+0xd4>)
 8002f00:	1dfb      	adds	r3, r7, #7
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	b25b      	sxtb	r3, r3
 8002f06:	089b      	lsrs	r3, r3, #2
 8002f08:	33c0      	adds	r3, #192	; 0xc0
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	589b      	ldr	r3, [r3, r2]
 8002f0e:	1dfa      	adds	r2, r7, #7
 8002f10:	7812      	ldrb	r2, [r2, #0]
 8002f12:	0011      	movs	r1, r2
 8002f14:	2203      	movs	r2, #3
 8002f16:	400a      	ands	r2, r1
 8002f18:	00d2      	lsls	r2, r2, #3
 8002f1a:	21ff      	movs	r1, #255	; 0xff
 8002f1c:	4091      	lsls	r1, r2
 8002f1e:	000a      	movs	r2, r1
 8002f20:	43d2      	mvns	r2, r2
 8002f22:	401a      	ands	r2, r3
 8002f24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	019b      	lsls	r3, r3, #6
 8002f2a:	22ff      	movs	r2, #255	; 0xff
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	1dfb      	adds	r3, r7, #7
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	0018      	movs	r0, r3
 8002f34:	2303      	movs	r3, #3
 8002f36:	4003      	ands	r3, r0
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f3c:	481f      	ldr	r0, [pc, #124]	; (8002fbc <__NVIC_SetPriority+0xd4>)
 8002f3e:	1dfb      	adds	r3, r7, #7
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	b25b      	sxtb	r3, r3
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	430a      	orrs	r2, r1
 8002f48:	33c0      	adds	r3, #192	; 0xc0
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f4e:	e031      	b.n	8002fb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f50:	4a1b      	ldr	r2, [pc, #108]	; (8002fc0 <__NVIC_SetPriority+0xd8>)
 8002f52:	1dfb      	adds	r3, r7, #7
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	0019      	movs	r1, r3
 8002f58:	230f      	movs	r3, #15
 8002f5a:	400b      	ands	r3, r1
 8002f5c:	3b08      	subs	r3, #8
 8002f5e:	089b      	lsrs	r3, r3, #2
 8002f60:	3306      	adds	r3, #6
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	18d3      	adds	r3, r2, r3
 8002f66:	3304      	adds	r3, #4
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	1dfa      	adds	r2, r7, #7
 8002f6c:	7812      	ldrb	r2, [r2, #0]
 8002f6e:	0011      	movs	r1, r2
 8002f70:	2203      	movs	r2, #3
 8002f72:	400a      	ands	r2, r1
 8002f74:	00d2      	lsls	r2, r2, #3
 8002f76:	21ff      	movs	r1, #255	; 0xff
 8002f78:	4091      	lsls	r1, r2
 8002f7a:	000a      	movs	r2, r1
 8002f7c:	43d2      	mvns	r2, r2
 8002f7e:	401a      	ands	r2, r3
 8002f80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	019b      	lsls	r3, r3, #6
 8002f86:	22ff      	movs	r2, #255	; 0xff
 8002f88:	401a      	ands	r2, r3
 8002f8a:	1dfb      	adds	r3, r7, #7
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	0018      	movs	r0, r3
 8002f90:	2303      	movs	r3, #3
 8002f92:	4003      	ands	r3, r0
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f98:	4809      	ldr	r0, [pc, #36]	; (8002fc0 <__NVIC_SetPriority+0xd8>)
 8002f9a:	1dfb      	adds	r3, r7, #7
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	001c      	movs	r4, r3
 8002fa0:	230f      	movs	r3, #15
 8002fa2:	4023      	ands	r3, r4
 8002fa4:	3b08      	subs	r3, #8
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	3306      	adds	r3, #6
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	18c3      	adds	r3, r0, r3
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	601a      	str	r2, [r3, #0]
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b003      	add	sp, #12
 8002fba:	bd90      	pop	{r4, r7, pc}
 8002fbc:	e000e100 	.word	0xe000e100
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	1e5a      	subs	r2, r3, #1
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	045b      	lsls	r3, r3, #17
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d301      	bcc.n	8002fdc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e010      	b.n	8002ffe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fdc:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <SysTick_Config+0x44>)
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	3a01      	subs	r2, #1
 8002fe2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	425b      	negs	r3, r3
 8002fe8:	2103      	movs	r1, #3
 8002fea:	0018      	movs	r0, r3
 8002fec:	f7ff ff7c 	bl	8002ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <SysTick_Config+0x44>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ff6:	4b04      	ldr	r3, [pc, #16]	; (8003008 <SysTick_Config+0x44>)
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	0018      	movs	r0, r3
 8003000:	46bd      	mov	sp, r7
 8003002:	b002      	add	sp, #8
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	e000e010 	.word	0xe000e010

0800300c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	210f      	movs	r1, #15
 8003018:	187b      	adds	r3, r7, r1
 800301a:	1c02      	adds	r2, r0, #0
 800301c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	187b      	adds	r3, r7, r1
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	b25b      	sxtb	r3, r3
 8003026:	0011      	movs	r1, r2
 8003028:	0018      	movs	r0, r3
 800302a:	f7ff ff5d 	bl	8002ee8 <__NVIC_SetPriority>
}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	46bd      	mov	sp, r7
 8003032:	b004      	add	sp, #16
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	0002      	movs	r2, r0
 800303e:	1dfb      	adds	r3, r7, #7
 8003040:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003042:	1dfb      	adds	r3, r7, #7
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	b25b      	sxtb	r3, r3
 8003048:	0018      	movs	r0, r3
 800304a:	f7ff ff33 	bl	8002eb4 <__NVIC_EnableIRQ>
}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	b002      	add	sp, #8
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	0018      	movs	r0, r3
 8003062:	f7ff ffaf 	bl	8002fc4 <SysTick_Config>
 8003066:	0003      	movs	r3, r0
}
 8003068:	0018      	movs	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	b002      	add	sp, #8
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2221      	movs	r2, #33	; 0x21
 800307c:	5c9b      	ldrb	r3, [r3, r2]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d008      	beq.n	8003096 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2204      	movs	r2, #4
 8003088:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2220      	movs	r2, #32
 800308e:	2100      	movs	r1, #0
 8003090:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e020      	b.n	80030d8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	210e      	movs	r1, #14
 80030a2:	438a      	bics	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2101      	movs	r1, #1
 80030b2:	438a      	bics	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030be:	2101      	movs	r1, #1
 80030c0:	4091      	lsls	r1, r2
 80030c2:	000a      	movs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2221      	movs	r2, #33	; 0x21
 80030ca:	2101      	movs	r1, #1
 80030cc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	2100      	movs	r1, #0
 80030d4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	b002      	add	sp, #8
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e8:	210f      	movs	r1, #15
 80030ea:	187b      	adds	r3, r7, r1
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2221      	movs	r2, #33	; 0x21
 80030f4:	5c9b      	ldrb	r3, [r3, r2]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d006      	beq.n	800310a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2204      	movs	r2, #4
 8003100:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003102:	187b      	adds	r3, r7, r1
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
 8003108:	e028      	b.n	800315c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	210e      	movs	r1, #14
 8003116:	438a      	bics	r2, r1
 8003118:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2101      	movs	r1, #1
 8003126:	438a      	bics	r2, r1
 8003128:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003132:	2101      	movs	r1, #1
 8003134:	4091      	lsls	r1, r2
 8003136:	000a      	movs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2221      	movs	r2, #33	; 0x21
 800313e:	2101      	movs	r1, #1
 8003140:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	2100      	movs	r1, #0
 8003148:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	0010      	movs	r0, r2
 800315a:	4798      	blx	r3
    } 
  }
  return status;
 800315c:	230f      	movs	r3, #15
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	781b      	ldrb	r3, [r3, #0]
}
 8003162:	0018      	movs	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	b004      	add	sp, #16
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800317a:	e14f      	b.n	800341c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2101      	movs	r1, #1
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4091      	lsls	r1, r2
 8003186:	000a      	movs	r2, r1
 8003188:	4013      	ands	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d100      	bne.n	8003194 <HAL_GPIO_Init+0x28>
 8003192:	e140      	b.n	8003416 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2203      	movs	r2, #3
 800319a:	4013      	ands	r3, r2
 800319c:	2b01      	cmp	r3, #1
 800319e:	d005      	beq.n	80031ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2203      	movs	r2, #3
 80031a6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d130      	bne.n	800320e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	409a      	lsls	r2, r3
 80031ba:	0013      	movs	r3, r2
 80031bc:	43da      	mvns	r2, r3
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4013      	ands	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	409a      	lsls	r2, r3
 80031ce:	0013      	movs	r3, r2
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e2:	2201      	movs	r2, #1
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	409a      	lsls	r2, r3
 80031e8:	0013      	movs	r3, r2
 80031ea:	43da      	mvns	r2, r3
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4013      	ands	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	2201      	movs	r2, #1
 80031fa:	401a      	ands	r2, r3
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	409a      	lsls	r2, r3
 8003200:	0013      	movs	r3, r2
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2203      	movs	r2, #3
 8003214:	4013      	ands	r3, r2
 8003216:	2b03      	cmp	r3, #3
 8003218:	d017      	beq.n	800324a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	2203      	movs	r2, #3
 8003226:	409a      	lsls	r2, r3
 8003228:	0013      	movs	r3, r2
 800322a:	43da      	mvns	r2, r3
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	409a      	lsls	r2, r3
 800323c:	0013      	movs	r3, r2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2203      	movs	r2, #3
 8003250:	4013      	ands	r3, r2
 8003252:	2b02      	cmp	r3, #2
 8003254:	d123      	bne.n	800329e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	08da      	lsrs	r2, r3, #3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3208      	adds	r2, #8
 800325e:	0092      	lsls	r2, r2, #2
 8003260:	58d3      	ldr	r3, [r2, r3]
 8003262:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2207      	movs	r2, #7
 8003268:	4013      	ands	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	220f      	movs	r2, #15
 800326e:	409a      	lsls	r2, r3
 8003270:	0013      	movs	r3, r2
 8003272:	43da      	mvns	r2, r3
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4013      	ands	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2107      	movs	r1, #7
 8003282:	400b      	ands	r3, r1
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	409a      	lsls	r2, r3
 8003288:	0013      	movs	r3, r2
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	08da      	lsrs	r2, r3, #3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3208      	adds	r2, #8
 8003298:	0092      	lsls	r2, r2, #2
 800329a:	6939      	ldr	r1, [r7, #16]
 800329c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	2203      	movs	r2, #3
 80032aa:	409a      	lsls	r2, r3
 80032ac:	0013      	movs	r3, r2
 80032ae:	43da      	mvns	r2, r3
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2203      	movs	r2, #3
 80032bc:	401a      	ands	r2, r3
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	409a      	lsls	r2, r3
 80032c4:	0013      	movs	r3, r2
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	23c0      	movs	r3, #192	; 0xc0
 80032d8:	029b      	lsls	r3, r3, #10
 80032da:	4013      	ands	r3, r2
 80032dc:	d100      	bne.n	80032e0 <HAL_GPIO_Init+0x174>
 80032de:	e09a      	b.n	8003416 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e0:	4b54      	ldr	r3, [pc, #336]	; (8003434 <HAL_GPIO_Init+0x2c8>)
 80032e2:	699a      	ldr	r2, [r3, #24]
 80032e4:	4b53      	ldr	r3, [pc, #332]	; (8003434 <HAL_GPIO_Init+0x2c8>)
 80032e6:	2101      	movs	r1, #1
 80032e8:	430a      	orrs	r2, r1
 80032ea:	619a      	str	r2, [r3, #24]
 80032ec:	4b51      	ldr	r3, [pc, #324]	; (8003434 <HAL_GPIO_Init+0x2c8>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	2201      	movs	r2, #1
 80032f2:	4013      	ands	r3, r2
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032f8:	4a4f      	ldr	r2, [pc, #316]	; (8003438 <HAL_GPIO_Init+0x2cc>)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	089b      	lsrs	r3, r3, #2
 80032fe:	3302      	adds	r3, #2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	589b      	ldr	r3, [r3, r2]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2203      	movs	r2, #3
 800330a:	4013      	ands	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	220f      	movs	r2, #15
 8003310:	409a      	lsls	r2, r3
 8003312:	0013      	movs	r3, r2
 8003314:	43da      	mvns	r2, r3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	2390      	movs	r3, #144	; 0x90
 8003320:	05db      	lsls	r3, r3, #23
 8003322:	429a      	cmp	r2, r3
 8003324:	d013      	beq.n	800334e <HAL_GPIO_Init+0x1e2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a44      	ldr	r2, [pc, #272]	; (800343c <HAL_GPIO_Init+0x2d0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00d      	beq.n	800334a <HAL_GPIO_Init+0x1de>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a43      	ldr	r2, [pc, #268]	; (8003440 <HAL_GPIO_Init+0x2d4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <HAL_GPIO_Init+0x1da>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a42      	ldr	r2, [pc, #264]	; (8003444 <HAL_GPIO_Init+0x2d8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d101      	bne.n	8003342 <HAL_GPIO_Init+0x1d6>
 800333e:	2303      	movs	r3, #3
 8003340:	e006      	b.n	8003350 <HAL_GPIO_Init+0x1e4>
 8003342:	2305      	movs	r3, #5
 8003344:	e004      	b.n	8003350 <HAL_GPIO_Init+0x1e4>
 8003346:	2302      	movs	r3, #2
 8003348:	e002      	b.n	8003350 <HAL_GPIO_Init+0x1e4>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <HAL_GPIO_Init+0x1e4>
 800334e:	2300      	movs	r3, #0
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	2103      	movs	r1, #3
 8003354:	400a      	ands	r2, r1
 8003356:	0092      	lsls	r2, r2, #2
 8003358:	4093      	lsls	r3, r2
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003360:	4935      	ldr	r1, [pc, #212]	; (8003438 <HAL_GPIO_Init+0x2cc>)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	089b      	lsrs	r3, r3, #2
 8003366:	3302      	adds	r3, #2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800336e:	4b36      	ldr	r3, [pc, #216]	; (8003448 <HAL_GPIO_Init+0x2dc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	43da      	mvns	r2, r3
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4013      	ands	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	025b      	lsls	r3, r3, #9
 8003386:	4013      	ands	r3, r2
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003392:	4b2d      	ldr	r3, [pc, #180]	; (8003448 <HAL_GPIO_Init+0x2dc>)
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003398:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <HAL_GPIO_Init+0x2dc>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	43da      	mvns	r2, r3
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	2380      	movs	r3, #128	; 0x80
 80033ae:	029b      	lsls	r3, r3, #10
 80033b0:	4013      	ands	r3, r2
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033bc:	4b22      	ldr	r3, [pc, #136]	; (8003448 <HAL_GPIO_Init+0x2dc>)
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033c2:	4b21      	ldr	r3, [pc, #132]	; (8003448 <HAL_GPIO_Init+0x2dc>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	43da      	mvns	r2, r3
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4013      	ands	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	2380      	movs	r3, #128	; 0x80
 80033d8:	035b      	lsls	r3, r3, #13
 80033da:	4013      	ands	r3, r2
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033e6:	4b18      	ldr	r3, [pc, #96]	; (8003448 <HAL_GPIO_Init+0x2dc>)
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80033ec:	4b16      	ldr	r3, [pc, #88]	; (8003448 <HAL_GPIO_Init+0x2dc>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	43da      	mvns	r2, r3
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	2380      	movs	r3, #128	; 0x80
 8003402:	039b      	lsls	r3, r3, #14
 8003404:	4013      	ands	r3, r2
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003410:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <HAL_GPIO_Init+0x2dc>)
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	3301      	adds	r3, #1
 800341a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	40da      	lsrs	r2, r3
 8003424:	1e13      	subs	r3, r2, #0
 8003426:	d000      	beq.n	800342a <HAL_GPIO_Init+0x2be>
 8003428:	e6a8      	b.n	800317c <HAL_GPIO_Init+0x10>
  } 
}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	46bd      	mov	sp, r7
 8003430:	b006      	add	sp, #24
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000
 8003438:	40010000 	.word	0x40010000
 800343c:	48000400 	.word	0x48000400
 8003440:	48000800 	.word	0x48000800
 8003444:	48000c00 	.word	0x48000c00
 8003448:	40010400 	.word	0x40010400

0800344c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	0008      	movs	r0, r1
 8003456:	0011      	movs	r1, r2
 8003458:	1cbb      	adds	r3, r7, #2
 800345a:	1c02      	adds	r2, r0, #0
 800345c:	801a      	strh	r2, [r3, #0]
 800345e:	1c7b      	adds	r3, r7, #1
 8003460:	1c0a      	adds	r2, r1, #0
 8003462:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003464:	1c7b      	adds	r3, r7, #1
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d004      	beq.n	8003476 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800346c:	1cbb      	adds	r3, r7, #2
 800346e:	881a      	ldrh	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003474:	e003      	b.n	800347e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003476:	1cbb      	adds	r3, r7, #2
 8003478:	881a      	ldrh	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	b002      	add	sp, #8
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e305      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2201      	movs	r2, #1
 80034a0:	4013      	ands	r3, r2
 80034a2:	d100      	bne.n	80034a6 <HAL_RCC_OscConfig+0x1e>
 80034a4:	e08d      	b.n	80035c2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80034a6:	4bc5      	ldr	r3, [pc, #788]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	220c      	movs	r2, #12
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d00e      	beq.n	80034d0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034b2:	4bc2      	ldr	r3, [pc, #776]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	220c      	movs	r2, #12
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d116      	bne.n	80034ec <HAL_RCC_OscConfig+0x64>
 80034be:	4bbf      	ldr	r3, [pc, #764]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	23c0      	movs	r3, #192	; 0xc0
 80034c4:	025b      	lsls	r3, r3, #9
 80034c6:	401a      	ands	r2, r3
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	025b      	lsls	r3, r3, #9
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d10d      	bne.n	80034ec <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d0:	4bba      	ldr	r3, [pc, #744]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	029b      	lsls	r3, r3, #10
 80034d8:	4013      	ands	r3, r2
 80034da:	d100      	bne.n	80034de <HAL_RCC_OscConfig+0x56>
 80034dc:	e070      	b.n	80035c0 <HAL_RCC_OscConfig+0x138>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d000      	beq.n	80034e8 <HAL_RCC_OscConfig+0x60>
 80034e6:	e06b      	b.n	80035c0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e2dc      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_OscConfig+0x7c>
 80034f4:	4bb1      	ldr	r3, [pc, #708]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4bb0      	ldr	r3, [pc, #704]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80034fa:	2180      	movs	r1, #128	; 0x80
 80034fc:	0249      	lsls	r1, r1, #9
 80034fe:	430a      	orrs	r2, r1
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	e02f      	b.n	8003564 <HAL_RCC_OscConfig+0xdc>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10c      	bne.n	8003526 <HAL_RCC_OscConfig+0x9e>
 800350c:	4bab      	ldr	r3, [pc, #684]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4baa      	ldr	r3, [pc, #680]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003512:	49ab      	ldr	r1, [pc, #684]	; (80037c0 <HAL_RCC_OscConfig+0x338>)
 8003514:	400a      	ands	r2, r1
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	4ba8      	ldr	r3, [pc, #672]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4ba7      	ldr	r3, [pc, #668]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800351e:	49a9      	ldr	r1, [pc, #676]	; (80037c4 <HAL_RCC_OscConfig+0x33c>)
 8003520:	400a      	ands	r2, r1
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	e01e      	b.n	8003564 <HAL_RCC_OscConfig+0xdc>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b05      	cmp	r3, #5
 800352c:	d10e      	bne.n	800354c <HAL_RCC_OscConfig+0xc4>
 800352e:	4ba3      	ldr	r3, [pc, #652]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4ba2      	ldr	r3, [pc, #648]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003534:	2180      	movs	r1, #128	; 0x80
 8003536:	02c9      	lsls	r1, r1, #11
 8003538:	430a      	orrs	r2, r1
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	4b9f      	ldr	r3, [pc, #636]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4b9e      	ldr	r3, [pc, #632]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003542:	2180      	movs	r1, #128	; 0x80
 8003544:	0249      	lsls	r1, r1, #9
 8003546:	430a      	orrs	r2, r1
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	e00b      	b.n	8003564 <HAL_RCC_OscConfig+0xdc>
 800354c:	4b9b      	ldr	r3, [pc, #620]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b9a      	ldr	r3, [pc, #616]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003552:	499b      	ldr	r1, [pc, #620]	; (80037c0 <HAL_RCC_OscConfig+0x338>)
 8003554:	400a      	ands	r2, r1
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	4b98      	ldr	r3, [pc, #608]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b97      	ldr	r3, [pc, #604]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800355e:	4999      	ldr	r1, [pc, #612]	; (80037c4 <HAL_RCC_OscConfig+0x33c>)
 8003560:	400a      	ands	r2, r1
 8003562:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d014      	beq.n	8003596 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7ff fc98 	bl	8002ea0 <HAL_GetTick>
 8003570:	0003      	movs	r3, r0
 8003572:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003576:	f7ff fc93 	bl	8002ea0 <HAL_GetTick>
 800357a:	0002      	movs	r2, r0
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b64      	cmp	r3, #100	; 0x64
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e28e      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003588:	4b8c      	ldr	r3, [pc, #560]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	029b      	lsls	r3, r3, #10
 8003590:	4013      	ands	r3, r2
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0xee>
 8003594:	e015      	b.n	80035c2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003596:	f7ff fc83 	bl	8002ea0 <HAL_GetTick>
 800359a:	0003      	movs	r3, r0
 800359c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a0:	f7ff fc7e 	bl	8002ea0 <HAL_GetTick>
 80035a4:	0002      	movs	r2, r0
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	; 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e279      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b2:	4b82      	ldr	r3, [pc, #520]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	029b      	lsls	r3, r3, #10
 80035ba:	4013      	ands	r3, r2
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x118>
 80035be:	e000      	b.n	80035c2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2202      	movs	r2, #2
 80035c8:	4013      	ands	r3, r2
 80035ca:	d100      	bne.n	80035ce <HAL_RCC_OscConfig+0x146>
 80035cc:	e06c      	b.n	80036a8 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035ce:	4b7b      	ldr	r3, [pc, #492]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	220c      	movs	r2, #12
 80035d4:	4013      	ands	r3, r2
 80035d6:	d00e      	beq.n	80035f6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80035d8:	4b78      	ldr	r3, [pc, #480]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	220c      	movs	r2, #12
 80035de:	4013      	ands	r3, r2
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d11f      	bne.n	8003624 <HAL_RCC_OscConfig+0x19c>
 80035e4:	4b75      	ldr	r3, [pc, #468]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	23c0      	movs	r3, #192	; 0xc0
 80035ea:	025b      	lsls	r3, r3, #9
 80035ec:	401a      	ands	r2, r3
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d116      	bne.n	8003624 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f6:	4b71      	ldr	r3, [pc, #452]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2202      	movs	r2, #2
 80035fc:	4013      	ands	r3, r2
 80035fe:	d005      	beq.n	800360c <HAL_RCC_OscConfig+0x184>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d001      	beq.n	800360c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e24c      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360c:	4b6b      	ldr	r3, [pc, #428]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	22f8      	movs	r2, #248	; 0xf8
 8003612:	4393      	bics	r3, r2
 8003614:	0019      	movs	r1, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	00da      	lsls	r2, r3, #3
 800361c:	4b67      	ldr	r3, [pc, #412]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800361e:	430a      	orrs	r2, r1
 8003620:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003622:	e041      	b.n	80036a8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d024      	beq.n	8003676 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800362c:	4b63      	ldr	r3, [pc, #396]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4b62      	ldr	r3, [pc, #392]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003632:	2101      	movs	r1, #1
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7ff fc32 	bl	8002ea0 <HAL_GetTick>
 800363c:	0003      	movs	r3, r0
 800363e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003642:	f7ff fc2d 	bl	8002ea0 <HAL_GetTick>
 8003646:	0002      	movs	r2, r0
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e228      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003654:	4b59      	ldr	r3, [pc, #356]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2202      	movs	r2, #2
 800365a:	4013      	ands	r3, r2
 800365c:	d0f1      	beq.n	8003642 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365e:	4b57      	ldr	r3, [pc, #348]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	22f8      	movs	r2, #248	; 0xf8
 8003664:	4393      	bics	r3, r2
 8003666:	0019      	movs	r1, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	00da      	lsls	r2, r3, #3
 800366e:	4b53      	ldr	r3, [pc, #332]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	e018      	b.n	80036a8 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003676:	4b51      	ldr	r3, [pc, #324]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4b50      	ldr	r3, [pc, #320]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 800367c:	2101      	movs	r1, #1
 800367e:	438a      	bics	r2, r1
 8003680:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003682:	f7ff fc0d 	bl	8002ea0 <HAL_GetTick>
 8003686:	0003      	movs	r3, r0
 8003688:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800368c:	f7ff fc08 	bl	8002ea0 <HAL_GetTick>
 8003690:	0002      	movs	r2, r0
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e203      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369e:	4b47      	ldr	r3, [pc, #284]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2202      	movs	r2, #2
 80036a4:	4013      	ands	r3, r2
 80036a6:	d1f1      	bne.n	800368c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2208      	movs	r2, #8
 80036ae:	4013      	ands	r3, r2
 80036b0:	d036      	beq.n	8003720 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d019      	beq.n	80036ee <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ba:	4b40      	ldr	r3, [pc, #256]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80036bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036be:	4b3f      	ldr	r3, [pc, #252]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80036c0:	2101      	movs	r1, #1
 80036c2:	430a      	orrs	r2, r1
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c6:	f7ff fbeb 	bl	8002ea0 <HAL_GetTick>
 80036ca:	0003      	movs	r3, r0
 80036cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d0:	f7ff fbe6 	bl	8002ea0 <HAL_GetTick>
 80036d4:	0002      	movs	r2, r0
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e1e1      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e2:	4b36      	ldr	r3, [pc, #216]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	2202      	movs	r2, #2
 80036e8:	4013      	ands	r3, r2
 80036ea:	d0f1      	beq.n	80036d0 <HAL_RCC_OscConfig+0x248>
 80036ec:	e018      	b.n	8003720 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ee:	4b33      	ldr	r3, [pc, #204]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80036f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036f2:	4b32      	ldr	r3, [pc, #200]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80036f4:	2101      	movs	r1, #1
 80036f6:	438a      	bics	r2, r1
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fa:	f7ff fbd1 	bl	8002ea0 <HAL_GetTick>
 80036fe:	0003      	movs	r3, r0
 8003700:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003704:	f7ff fbcc 	bl	8002ea0 <HAL_GetTick>
 8003708:	0002      	movs	r2, r0
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e1c7      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003716:	4b29      	ldr	r3, [pc, #164]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	2202      	movs	r2, #2
 800371c:	4013      	ands	r3, r2
 800371e:	d1f1      	bne.n	8003704 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2204      	movs	r2, #4
 8003726:	4013      	ands	r3, r2
 8003728:	d100      	bne.n	800372c <HAL_RCC_OscConfig+0x2a4>
 800372a:	e0b5      	b.n	8003898 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372c:	201f      	movs	r0, #31
 800372e:	183b      	adds	r3, r7, r0
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003734:	4b21      	ldr	r3, [pc, #132]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003736:	69da      	ldr	r2, [r3, #28]
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	055b      	lsls	r3, r3, #21
 800373c:	4013      	ands	r3, r2
 800373e:	d110      	bne.n	8003762 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003740:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003742:	69da      	ldr	r2, [r3, #28]
 8003744:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003746:	2180      	movs	r1, #128	; 0x80
 8003748:	0549      	lsls	r1, r1, #21
 800374a:	430a      	orrs	r2, r1
 800374c:	61da      	str	r2, [r3, #28]
 800374e:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	055b      	lsls	r3, r3, #21
 8003756:	4013      	ands	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800375c:	183b      	adds	r3, r7, r0
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003762:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <HAL_RCC_OscConfig+0x340>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	2380      	movs	r3, #128	; 0x80
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4013      	ands	r3, r2
 800376c:	d11a      	bne.n	80037a4 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800376e:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <HAL_RCC_OscConfig+0x340>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <HAL_RCC_OscConfig+0x340>)
 8003774:	2180      	movs	r1, #128	; 0x80
 8003776:	0049      	lsls	r1, r1, #1
 8003778:	430a      	orrs	r2, r1
 800377a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377c:	f7ff fb90 	bl	8002ea0 <HAL_GetTick>
 8003780:	0003      	movs	r3, r0
 8003782:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003786:	f7ff fb8b 	bl	8002ea0 <HAL_GetTick>
 800378a:	0002      	movs	r2, r0
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b64      	cmp	r3, #100	; 0x64
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e186      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_OscConfig+0x340>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	4013      	ands	r3, r2
 80037a2:	d0f0      	beq.n	8003786 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d10f      	bne.n	80037cc <HAL_RCC_OscConfig+0x344>
 80037ac:	4b03      	ldr	r3, [pc, #12]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80037ae:	6a1a      	ldr	r2, [r3, #32]
 80037b0:	4b02      	ldr	r3, [pc, #8]	; (80037bc <HAL_RCC_OscConfig+0x334>)
 80037b2:	2101      	movs	r1, #1
 80037b4:	430a      	orrs	r2, r1
 80037b6:	621a      	str	r2, [r3, #32]
 80037b8:	e036      	b.n	8003828 <HAL_RCC_OscConfig+0x3a0>
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	40021000 	.word	0x40021000
 80037c0:	fffeffff 	.word	0xfffeffff
 80037c4:	fffbffff 	.word	0xfffbffff
 80037c8:	40007000 	.word	0x40007000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10c      	bne.n	80037ee <HAL_RCC_OscConfig+0x366>
 80037d4:	4bb6      	ldr	r3, [pc, #728]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80037d6:	6a1a      	ldr	r2, [r3, #32]
 80037d8:	4bb5      	ldr	r3, [pc, #724]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80037da:	2101      	movs	r1, #1
 80037dc:	438a      	bics	r2, r1
 80037de:	621a      	str	r2, [r3, #32]
 80037e0:	4bb3      	ldr	r3, [pc, #716]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80037e2:	6a1a      	ldr	r2, [r3, #32]
 80037e4:	4bb2      	ldr	r3, [pc, #712]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80037e6:	2104      	movs	r1, #4
 80037e8:	438a      	bics	r2, r1
 80037ea:	621a      	str	r2, [r3, #32]
 80037ec:	e01c      	b.n	8003828 <HAL_RCC_OscConfig+0x3a0>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b05      	cmp	r3, #5
 80037f4:	d10c      	bne.n	8003810 <HAL_RCC_OscConfig+0x388>
 80037f6:	4bae      	ldr	r3, [pc, #696]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80037f8:	6a1a      	ldr	r2, [r3, #32]
 80037fa:	4bad      	ldr	r3, [pc, #692]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80037fc:	2104      	movs	r1, #4
 80037fe:	430a      	orrs	r2, r1
 8003800:	621a      	str	r2, [r3, #32]
 8003802:	4bab      	ldr	r3, [pc, #684]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003804:	6a1a      	ldr	r2, [r3, #32]
 8003806:	4baa      	ldr	r3, [pc, #680]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003808:	2101      	movs	r1, #1
 800380a:	430a      	orrs	r2, r1
 800380c:	621a      	str	r2, [r3, #32]
 800380e:	e00b      	b.n	8003828 <HAL_RCC_OscConfig+0x3a0>
 8003810:	4ba7      	ldr	r3, [pc, #668]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003812:	6a1a      	ldr	r2, [r3, #32]
 8003814:	4ba6      	ldr	r3, [pc, #664]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003816:	2101      	movs	r1, #1
 8003818:	438a      	bics	r2, r1
 800381a:	621a      	str	r2, [r3, #32]
 800381c:	4ba4      	ldr	r3, [pc, #656]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 800381e:	6a1a      	ldr	r2, [r3, #32]
 8003820:	4ba3      	ldr	r3, [pc, #652]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003822:	2104      	movs	r1, #4
 8003824:	438a      	bics	r2, r1
 8003826:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d014      	beq.n	800385a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003830:	f7ff fb36 	bl	8002ea0 <HAL_GetTick>
 8003834:	0003      	movs	r3, r0
 8003836:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003838:	e009      	b.n	800384e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800383a:	f7ff fb31 	bl	8002ea0 <HAL_GetTick>
 800383e:	0002      	movs	r2, r0
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	4a9b      	ldr	r2, [pc, #620]	; (8003ab4 <HAL_RCC_OscConfig+0x62c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e12b      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384e:	4b98      	ldr	r3, [pc, #608]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	2202      	movs	r2, #2
 8003854:	4013      	ands	r3, r2
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x3b2>
 8003858:	e013      	b.n	8003882 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385a:	f7ff fb21 	bl	8002ea0 <HAL_GetTick>
 800385e:	0003      	movs	r3, r0
 8003860:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003862:	e009      	b.n	8003878 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003864:	f7ff fb1c 	bl	8002ea0 <HAL_GetTick>
 8003868:	0002      	movs	r2, r0
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	4a91      	ldr	r2, [pc, #580]	; (8003ab4 <HAL_RCC_OscConfig+0x62c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e116      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003878:	4b8d      	ldr	r3, [pc, #564]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	2202      	movs	r2, #2
 800387e:	4013      	ands	r3, r2
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003882:	231f      	movs	r3, #31
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d105      	bne.n	8003898 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800388c:	4b88      	ldr	r3, [pc, #544]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	4b87      	ldr	r3, [pc, #540]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003892:	4989      	ldr	r1, [pc, #548]	; (8003ab8 <HAL_RCC_OscConfig+0x630>)
 8003894:	400a      	ands	r2, r1
 8003896:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2210      	movs	r2, #16
 800389e:	4013      	ands	r3, r2
 80038a0:	d063      	beq.n	800396a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d12a      	bne.n	8003900 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80038aa:	4b81      	ldr	r3, [pc, #516]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80038ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ae:	4b80      	ldr	r3, [pc, #512]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80038b0:	2104      	movs	r1, #4
 80038b2:	430a      	orrs	r2, r1
 80038b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80038b6:	4b7e      	ldr	r3, [pc, #504]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80038b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ba:	4b7d      	ldr	r3, [pc, #500]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80038bc:	2101      	movs	r1, #1
 80038be:	430a      	orrs	r2, r1
 80038c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c2:	f7ff faed 	bl	8002ea0 <HAL_GetTick>
 80038c6:	0003      	movs	r3, r0
 80038c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80038cc:	f7ff fae8 	bl	8002ea0 <HAL_GetTick>
 80038d0:	0002      	movs	r2, r0
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e0e3      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80038de:	4b74      	ldr	r3, [pc, #464]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80038e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e2:	2202      	movs	r2, #2
 80038e4:	4013      	ands	r3, r2
 80038e6:	d0f1      	beq.n	80038cc <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80038e8:	4b71      	ldr	r3, [pc, #452]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80038ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ec:	22f8      	movs	r2, #248	; 0xf8
 80038ee:	4393      	bics	r3, r2
 80038f0:	0019      	movs	r1, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	00da      	lsls	r2, r3, #3
 80038f8:	4b6d      	ldr	r3, [pc, #436]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80038fa:	430a      	orrs	r2, r1
 80038fc:	635a      	str	r2, [r3, #52]	; 0x34
 80038fe:	e034      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	3305      	adds	r3, #5
 8003906:	d111      	bne.n	800392c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003908:	4b69      	ldr	r3, [pc, #420]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 800390a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800390c:	4b68      	ldr	r3, [pc, #416]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 800390e:	2104      	movs	r1, #4
 8003910:	438a      	bics	r2, r1
 8003912:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003914:	4b66      	ldr	r3, [pc, #408]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003918:	22f8      	movs	r2, #248	; 0xf8
 800391a:	4393      	bics	r3, r2
 800391c:	0019      	movs	r1, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	00da      	lsls	r2, r3, #3
 8003924:	4b62      	ldr	r3, [pc, #392]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003926:	430a      	orrs	r2, r1
 8003928:	635a      	str	r2, [r3, #52]	; 0x34
 800392a:	e01e      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800392c:	4b60      	ldr	r3, [pc, #384]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 800392e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003930:	4b5f      	ldr	r3, [pc, #380]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003932:	2104      	movs	r1, #4
 8003934:	430a      	orrs	r2, r1
 8003936:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003938:	4b5d      	ldr	r3, [pc, #372]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 800393a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800393c:	4b5c      	ldr	r3, [pc, #368]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 800393e:	2101      	movs	r1, #1
 8003940:	438a      	bics	r2, r1
 8003942:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003944:	f7ff faac 	bl	8002ea0 <HAL_GetTick>
 8003948:	0003      	movs	r3, r0
 800394a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800394e:	f7ff faa7 	bl	8002ea0 <HAL_GetTick>
 8003952:	0002      	movs	r2, r0
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e0a2      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003960:	4b53      	ldr	r3, [pc, #332]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003964:	2202      	movs	r2, #2
 8003966:	4013      	ands	r3, r2
 8003968:	d1f1      	bne.n	800394e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d100      	bne.n	8003974 <HAL_RCC_OscConfig+0x4ec>
 8003972:	e097      	b.n	8003aa4 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003974:	4b4e      	ldr	r3, [pc, #312]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	220c      	movs	r2, #12
 800397a:	4013      	ands	r3, r2
 800397c:	2b08      	cmp	r3, #8
 800397e:	d100      	bne.n	8003982 <HAL_RCC_OscConfig+0x4fa>
 8003980:	e06b      	b.n	8003a5a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d14c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398a:	4b49      	ldr	r3, [pc, #292]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	4b48      	ldr	r3, [pc, #288]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003990:	494a      	ldr	r1, [pc, #296]	; (8003abc <HAL_RCC_OscConfig+0x634>)
 8003992:	400a      	ands	r2, r1
 8003994:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003996:	f7ff fa83 	bl	8002ea0 <HAL_GetTick>
 800399a:	0003      	movs	r3, r0
 800399c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a0:	f7ff fa7e 	bl	8002ea0 <HAL_GetTick>
 80039a4:	0002      	movs	r2, r0
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e079      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b2:	4b3f      	ldr	r3, [pc, #252]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	049b      	lsls	r3, r3, #18
 80039ba:	4013      	ands	r3, r2
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039be:	4b3c      	ldr	r3, [pc, #240]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	220f      	movs	r2, #15
 80039c4:	4393      	bics	r3, r2
 80039c6:	0019      	movs	r1, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	4b38      	ldr	r3, [pc, #224]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80039ce:	430a      	orrs	r2, r1
 80039d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80039d2:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4a3a      	ldr	r2, [pc, #232]	; (8003ac0 <HAL_RCC_OscConfig+0x638>)
 80039d8:	4013      	ands	r3, r2
 80039da:	0019      	movs	r1, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	431a      	orrs	r2, r3
 80039e6:	4b32      	ldr	r3, [pc, #200]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80039e8:	430a      	orrs	r2, r1
 80039ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ec:	4b30      	ldr	r3, [pc, #192]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4b2f      	ldr	r3, [pc, #188]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 80039f2:	2180      	movs	r1, #128	; 0x80
 80039f4:	0449      	lsls	r1, r1, #17
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fa:	f7ff fa51 	bl	8002ea0 <HAL_GetTick>
 80039fe:	0003      	movs	r3, r0
 8003a00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a04:	f7ff fa4c 	bl	8002ea0 <HAL_GetTick>
 8003a08:	0002      	movs	r2, r0
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e047      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a16:	4b26      	ldr	r3, [pc, #152]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	049b      	lsls	r3, r3, #18
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x57c>
 8003a22:	e03f      	b.n	8003aa4 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a24:	4b22      	ldr	r3, [pc, #136]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4b21      	ldr	r3, [pc, #132]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003a2a:	4924      	ldr	r1, [pc, #144]	; (8003abc <HAL_RCC_OscConfig+0x634>)
 8003a2c:	400a      	ands	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a30:	f7ff fa36 	bl	8002ea0 <HAL_GetTick>
 8003a34:	0003      	movs	r3, r0
 8003a36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a3a:	f7ff fa31 	bl	8002ea0 <HAL_GetTick>
 8003a3e:	0002      	movs	r2, r0
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e02c      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a4c:	4b18      	ldr	r3, [pc, #96]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	2380      	movs	r3, #128	; 0x80
 8003a52:	049b      	lsls	r3, r3, #18
 8003a54:	4013      	ands	r3, r2
 8003a56:	d1f0      	bne.n	8003a3a <HAL_RCC_OscConfig+0x5b2>
 8003a58:	e024      	b.n	8003aa4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e01f      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003a6c:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <HAL_RCC_OscConfig+0x628>)
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	23c0      	movs	r3, #192	; 0xc0
 8003a76:	025b      	lsls	r3, r3, #9
 8003a78:	401a      	ands	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d10e      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	220f      	movs	r2, #15
 8003a86:	401a      	ands	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d107      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	23f0      	movs	r3, #240	; 0xf0
 8003a94:	039b      	lsls	r3, r3, #14
 8003a96:	401a      	ands	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b008      	add	sp, #32
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	00001388 	.word	0x00001388
 8003ab8:	efffffff 	.word	0xefffffff
 8003abc:	feffffff 	.word	0xfeffffff
 8003ac0:	ffc27fff 	.word	0xffc27fff

08003ac4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0b3      	b.n	8003c40 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b5b      	ldr	r3, [pc, #364]	; (8003c48 <HAL_RCC_ClockConfig+0x184>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2201      	movs	r2, #1
 8003ade:	4013      	ands	r3, r2
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d911      	bls.n	8003b0a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b58      	ldr	r3, [pc, #352]	; (8003c48 <HAL_RCC_ClockConfig+0x184>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2201      	movs	r2, #1
 8003aec:	4393      	bics	r3, r2
 8003aee:	0019      	movs	r1, r3
 8003af0:	4b55      	ldr	r3, [pc, #340]	; (8003c48 <HAL_RCC_ClockConfig+0x184>)
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af8:	4b53      	ldr	r3, [pc, #332]	; (8003c48 <HAL_RCC_ClockConfig+0x184>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2201      	movs	r2, #1
 8003afe:	4013      	ands	r3, r2
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e09a      	b.n	8003c40 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	4013      	ands	r3, r2
 8003b12:	d015      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2204      	movs	r2, #4
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d006      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b1e:	4b4b      	ldr	r3, [pc, #300]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	4b4a      	ldr	r3, [pc, #296]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003b24:	21e0      	movs	r1, #224	; 0xe0
 8003b26:	00c9      	lsls	r1, r1, #3
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b2c:	4b47      	ldr	r3, [pc, #284]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	22f0      	movs	r2, #240	; 0xf0
 8003b32:	4393      	bics	r3, r2
 8003b34:	0019      	movs	r1, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	4b44      	ldr	r3, [pc, #272]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2201      	movs	r2, #1
 8003b46:	4013      	ands	r3, r2
 8003b48:	d040      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d107      	bne.n	8003b62 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	4b3e      	ldr	r3, [pc, #248]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	029b      	lsls	r3, r3, #10
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d114      	bne.n	8003b88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e06e      	b.n	8003c40 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d107      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6a:	4b38      	ldr	r3, [pc, #224]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	049b      	lsls	r3, r3, #18
 8003b72:	4013      	ands	r3, r2
 8003b74:	d108      	bne.n	8003b88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e062      	b.n	8003c40 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7a:	4b34      	ldr	r3, [pc, #208]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	4013      	ands	r3, r2
 8003b82:	d101      	bne.n	8003b88 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e05b      	b.n	8003c40 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b88:	4b30      	ldr	r3, [pc, #192]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	4393      	bics	r3, r2
 8003b90:	0019      	movs	r1, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b9c:	f7ff f980 	bl	8002ea0 <HAL_GetTick>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba4:	e009      	b.n	8003bba <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba6:	f7ff f97b 	bl	8002ea0 <HAL_GetTick>
 8003baa:	0002      	movs	r2, r0
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	4a27      	ldr	r2, [pc, #156]	; (8003c50 <HAL_RCC_ClockConfig+0x18c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e042      	b.n	8003c40 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	4b24      	ldr	r3, [pc, #144]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	401a      	ands	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d1ec      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b1e      	ldr	r3, [pc, #120]	; (8003c48 <HAL_RCC_ClockConfig+0x184>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d211      	bcs.n	8003bfe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <HAL_RCC_ClockConfig+0x184>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2201      	movs	r2, #1
 8003be0:	4393      	bics	r3, r2
 8003be2:	0019      	movs	r1, r3
 8003be4:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <HAL_RCC_ClockConfig+0x184>)
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bec:	4b16      	ldr	r3, [pc, #88]	; (8003c48 <HAL_RCC_ClockConfig+0x184>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e020      	b.n	8003c40 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2204      	movs	r2, #4
 8003c04:	4013      	ands	r3, r2
 8003c06:	d009      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c08:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a11      	ldr	r2, [pc, #68]	; (8003c54 <HAL_RCC_ClockConfig+0x190>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	0019      	movs	r1, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003c1c:	f000 f820 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8003c20:	0001      	movs	r1, r0
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <HAL_RCC_ClockConfig+0x188>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	220f      	movs	r2, #15
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <HAL_RCC_ClockConfig+0x194>)
 8003c2e:	5cd3      	ldrb	r3, [r2, r3]
 8003c30:	000a      	movs	r2, r1
 8003c32:	40da      	lsrs	r2, r3
 8003c34:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <HAL_RCC_ClockConfig+0x198>)
 8003c36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003c38:	2000      	movs	r0, #0
 8003c3a:	f7ff f8eb 	bl	8002e14 <HAL_InitTick>
  
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	0018      	movs	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b004      	add	sp, #16
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40022000 	.word	0x40022000
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	00001388 	.word	0x00001388
 8003c54:	fffff8ff 	.word	0xfffff8ff
 8003c58:	0800adb8 	.word	0x0800adb8
 8003c5c:	20000000 	.word	0x20000000

08003c60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b08f      	sub	sp, #60	; 0x3c
 8003c64:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003c66:	2314      	movs	r3, #20
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	4a2c      	ldr	r2, [pc, #176]	; (8003d1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003c6e:	c313      	stmia	r3!, {r0, r1, r4}
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003c74:	1d3b      	adds	r3, r7, #4
 8003c76:	4a2a      	ldr	r2, [pc, #168]	; (8003d20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c78:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003c7a:	c313      	stmia	r3!, {r0, r1, r4}
 8003c7c:	6812      	ldr	r2, [r2, #0]
 8003c7e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c84:	2300      	movs	r3, #0
 8003c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c88:	2300      	movs	r3, #0
 8003c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003c94:	4b23      	ldr	r3, [pc, #140]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	220c      	movs	r2, #12
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d002      	beq.n	8003caa <HAL_RCC_GetSysClockFreq+0x4a>
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d003      	beq.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x50>
 8003ca8:	e02f      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003caa:	4b1f      	ldr	r3, [pc, #124]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003cae:	e02f      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb2:	0c9b      	lsrs	r3, r3, #18
 8003cb4:	220f      	movs	r2, #15
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2214      	movs	r2, #20
 8003cba:	18ba      	adds	r2, r7, r2
 8003cbc:	5cd3      	ldrb	r3, [r2, r3]
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003cc0:	4b18      	ldr	r3, [pc, #96]	; (8003d24 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	220f      	movs	r2, #15
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	1d3a      	adds	r2, r7, #4
 8003cca:	5cd3      	ldrb	r3, [r2, r3]
 8003ccc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cd0:	23c0      	movs	r3, #192	; 0xc0
 8003cd2:	025b      	lsls	r3, r3, #9
 8003cd4:	401a      	ands	r2, r3
 8003cd6:	2380      	movs	r3, #128	; 0x80
 8003cd8:	025b      	lsls	r3, r3, #9
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d109      	bne.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ce0:	4811      	ldr	r0, [pc, #68]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ce2:	f7fc fa2d 	bl	8000140 <__udivsi3>
 8003ce6:	0003      	movs	r3, r0
 8003ce8:	001a      	movs	r2, r3
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	4353      	muls	r3, r2
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003cf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cf4:	480c      	ldr	r0, [pc, #48]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003cf6:	f7fc fa23 	bl	8000140 <__udivsi3>
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	001a      	movs	r2, r3
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	4353      	muls	r3, r2
 8003d02:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d08:	e002      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d0a:	4b07      	ldr	r3, [pc, #28]	; (8003d28 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d0c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003d0e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003d12:	0018      	movs	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b00f      	add	sp, #60	; 0x3c
 8003d18:	bd90      	pop	{r4, r7, pc}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	0800ad18 	.word	0x0800ad18
 8003d20:	0800ad28 	.word	0x0800ad28
 8003d24:	40021000 	.word	0x40021000
 8003d28:	007a1200 	.word	0x007a1200

08003d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d30:	4b02      	ldr	r3, [pc, #8]	; (8003d3c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d32:	681b      	ldr	r3, [r3, #0]
}
 8003d34:	0018      	movs	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	20000000 	.word	0x20000000

08003d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003d44:	f7ff fff2 	bl	8003d2c <HAL_RCC_GetHCLKFreq>
 8003d48:	0001      	movs	r1, r0
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	0a1b      	lsrs	r3, r3, #8
 8003d50:	2207      	movs	r2, #7
 8003d52:	4013      	ands	r3, r2
 8003d54:	4a04      	ldr	r2, [pc, #16]	; (8003d68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d56:	5cd3      	ldrb	r3, [r2, r3]
 8003d58:	40d9      	lsrs	r1, r3
 8003d5a:	000b      	movs	r3, r1
}    
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	40021000 	.word	0x40021000
 8003d68:	0800adc8 	.word	0x0800adc8

08003d6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e044      	b.n	8003e08 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d107      	bne.n	8003d96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2274      	movs	r2, #116	; 0x74
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	0018      	movs	r0, r3
 8003d92:	f7fe fe73 	bl	8002a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2224      	movs	r2, #36	; 0x24
 8003d9a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2101      	movs	r1, #1
 8003da8:	438a      	bics	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	0018      	movs	r0, r3
 8003db0:	f000 fc16 	bl	80045e0 <UART_SetConfig>
 8003db4:	0003      	movs	r3, r0
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e024      	b.n	8003e08 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f000 fd61 	bl	8004890 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	490d      	ldr	r1, [pc, #52]	; (8003e10 <HAL_UART_Init+0xa4>)
 8003dda:	400a      	ands	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2108      	movs	r1, #8
 8003dea:	438a      	bics	r2, r1
 8003dec:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2101      	movs	r1, #1
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	0018      	movs	r0, r3
 8003e02:	f000 fdf9 	bl	80049f8 <UART_CheckIdleState>
 8003e06:	0003      	movs	r3, r0
}
 8003e08:	0018      	movs	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b002      	add	sp, #8
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	fffff7ff 	.word	0xfffff7ff

08003e14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08a      	sub	sp, #40	; 0x28
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	1dbb      	adds	r3, r7, #6
 8003e22:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d000      	beq.n	8003e2e <HAL_UART_Transmit+0x1a>
 8003e2c:	e096      	b.n	8003f5c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_UART_Transmit+0x28>
 8003e34:	1dbb      	adds	r3, r7, #6
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e08e      	b.n	8003f5e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	015b      	lsls	r3, r3, #5
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d109      	bne.n	8003e60 <HAL_UART_Transmit+0x4c>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d105      	bne.n	8003e60 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2201      	movs	r2, #1
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d001      	beq.n	8003e60 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e07e      	b.n	8003f5e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2274      	movs	r2, #116	; 0x74
 8003e64:	5c9b      	ldrb	r3, [r3, r2]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_UART_Transmit+0x5a>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e077      	b.n	8003f5e <HAL_UART_Transmit+0x14a>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2274      	movs	r2, #116	; 0x74
 8003e72:	2101      	movs	r1, #1
 8003e74:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2280      	movs	r2, #128	; 0x80
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2221      	movs	r2, #33	; 0x21
 8003e82:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e84:	f7ff f80c 	bl	8002ea0 <HAL_GetTick>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1dba      	adds	r2, r7, #6
 8003e90:	2150      	movs	r1, #80	; 0x50
 8003e92:	8812      	ldrh	r2, [r2, #0]
 8003e94:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1dba      	adds	r2, r7, #6
 8003e9a:	2152      	movs	r1, #82	; 0x52
 8003e9c:	8812      	ldrh	r2, [r2, #0]
 8003e9e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	015b      	lsls	r3, r3, #5
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d108      	bne.n	8003ebe <HAL_UART_Transmit+0xaa>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d104      	bne.n	8003ebe <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	61bb      	str	r3, [r7, #24]
 8003ebc:	e003      	b.n	8003ec6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2274      	movs	r2, #116	; 0x74
 8003eca:	2100      	movs	r1, #0
 8003ecc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003ece:	e02d      	b.n	8003f2c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	0013      	movs	r3, r2
 8003eda:	2200      	movs	r2, #0
 8003edc:	2180      	movs	r1, #128	; 0x80
 8003ede:	f000 fdd3 	bl	8004a88 <UART_WaitOnFlagUntilTimeout>
 8003ee2:	1e03      	subs	r3, r0, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e039      	b.n	8003f5e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10b      	bne.n	8003f08 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	881a      	ldrh	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	05d2      	lsls	r2, r2, #23
 8003efa:	0dd2      	lsrs	r2, r2, #23
 8003efc:	b292      	uxth	r2, r2
 8003efe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	3302      	adds	r3, #2
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	e008      	b.n	8003f1a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	781a      	ldrb	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	b292      	uxth	r2, r2
 8003f12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	3301      	adds	r3, #1
 8003f18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2252      	movs	r2, #82	; 0x52
 8003f1e:	5a9b      	ldrh	r3, [r3, r2]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b299      	uxth	r1, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2252      	movs	r2, #82	; 0x52
 8003f2a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2252      	movs	r2, #82	; 0x52
 8003f30:	5a9b      	ldrh	r3, [r3, r2]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1cb      	bne.n	8003ed0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	0013      	movs	r3, r2
 8003f42:	2200      	movs	r2, #0
 8003f44:	2140      	movs	r1, #64	; 0x40
 8003f46:	f000 fd9f 	bl	8004a88 <UART_WaitOnFlagUntilTimeout>
 8003f4a:	1e03      	subs	r3, r0, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e005      	b.n	8003f5e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	e000      	b.n	8003f5e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003f5c:	2302      	movs	r3, #2
  }
}
 8003f5e:	0018      	movs	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b008      	add	sp, #32
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b088      	sub	sp, #32
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	1dbb      	adds	r3, r7, #6
 8003f72:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d150      	bne.n	800401e <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_UART_Receive_IT+0x24>
 8003f82:	1dbb      	adds	r3, r7, #6
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e048      	b.n	8004020 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	2380      	movs	r3, #128	; 0x80
 8003f94:	015b      	lsls	r3, r3, #5
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d109      	bne.n	8003fae <HAL_UART_Receive_IT+0x48>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d105      	bne.n	8003fae <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d001      	beq.n	8003fae <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e038      	b.n	8004020 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2274      	movs	r2, #116	; 0x74
 8003fb2:	5c9b      	ldrb	r3, [r3, r2]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_UART_Receive_IT+0x56>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e031      	b.n	8004020 <HAL_UART_Receive_IT+0xba>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2274      	movs	r2, #116	; 0x74
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	041b      	lsls	r3, r3, #16
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d019      	beq.n	800400c <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fdc:	613b      	str	r3, [r7, #16]
  return(result);
 8003fde:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f383 8810 	msr	PRIMASK, r3
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2180      	movs	r1, #128	; 0x80
 8003ffa:	04c9      	lsls	r1, r1, #19
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f383 8810 	msr	PRIMASK, r3
}
 800400a:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800400c:	1dbb      	adds	r3, r7, #6
 800400e:	881a      	ldrh	r2, [r3, #0]
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	0018      	movs	r0, r3
 8004016:	f000 fdfb 	bl	8004c10 <UART_Start_Receive_IT>
 800401a:	0003      	movs	r3, r0
 800401c:	e000      	b.n	8004020 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800401e:	2302      	movs	r3, #2
  }
}
 8004020:	0018      	movs	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	b008      	add	sp, #32
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b0ab      	sub	sp, #172	; 0xac
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	22a4      	movs	r2, #164	; 0xa4
 8004038:	18b9      	adds	r1, r7, r2
 800403a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	20a0      	movs	r0, #160	; 0xa0
 8004044:	1839      	adds	r1, r7, r0
 8004046:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	219c      	movs	r1, #156	; 0x9c
 8004050:	1879      	adds	r1, r7, r1
 8004052:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004054:	0011      	movs	r1, r2
 8004056:	18bb      	adds	r3, r7, r2
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a99      	ldr	r2, [pc, #612]	; (80042c0 <HAL_UART_IRQHandler+0x298>)
 800405c:	4013      	ands	r3, r2
 800405e:	2298      	movs	r2, #152	; 0x98
 8004060:	18bc      	adds	r4, r7, r2
 8004062:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004064:	18bb      	adds	r3, r7, r2
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d114      	bne.n	8004096 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800406c:	187b      	adds	r3, r7, r1
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2220      	movs	r2, #32
 8004072:	4013      	ands	r3, r2
 8004074:	d00f      	beq.n	8004096 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004076:	183b      	adds	r3, r7, r0
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2220      	movs	r2, #32
 800407c:	4013      	ands	r3, r2
 800407e:	d00a      	beq.n	8004096 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004084:	2b00      	cmp	r3, #0
 8004086:	d100      	bne.n	800408a <HAL_UART_IRQHandler+0x62>
 8004088:	e27e      	b.n	8004588 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	0010      	movs	r0, r2
 8004092:	4798      	blx	r3
      }
      return;
 8004094:	e278      	b.n	8004588 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004096:	2398      	movs	r3, #152	; 0x98
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d100      	bne.n	80040a2 <HAL_UART_IRQHandler+0x7a>
 80040a0:	e114      	b.n	80042cc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040a2:	239c      	movs	r3, #156	; 0x9c
 80040a4:	18fb      	adds	r3, r7, r3
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2201      	movs	r2, #1
 80040aa:	4013      	ands	r3, r2
 80040ac:	d106      	bne.n	80040bc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040ae:	23a0      	movs	r3, #160	; 0xa0
 80040b0:	18fb      	adds	r3, r7, r3
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a83      	ldr	r2, [pc, #524]	; (80042c4 <HAL_UART_IRQHandler+0x29c>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	d100      	bne.n	80040bc <HAL_UART_IRQHandler+0x94>
 80040ba:	e107      	b.n	80042cc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040bc:	23a4      	movs	r3, #164	; 0xa4
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2201      	movs	r2, #1
 80040c4:	4013      	ands	r3, r2
 80040c6:	d012      	beq.n	80040ee <HAL_UART_IRQHandler+0xc6>
 80040c8:	23a0      	movs	r3, #160	; 0xa0
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	2380      	movs	r3, #128	; 0x80
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	4013      	ands	r3, r2
 80040d4:	d00b      	beq.n	80040ee <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2201      	movs	r2, #1
 80040dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2280      	movs	r2, #128	; 0x80
 80040e2:	589b      	ldr	r3, [r3, r2]
 80040e4:	2201      	movs	r2, #1
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2180      	movs	r1, #128	; 0x80
 80040ec:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040ee:	23a4      	movs	r3, #164	; 0xa4
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2202      	movs	r2, #2
 80040f6:	4013      	ands	r3, r2
 80040f8:	d011      	beq.n	800411e <HAL_UART_IRQHandler+0xf6>
 80040fa:	239c      	movs	r3, #156	; 0x9c
 80040fc:	18fb      	adds	r3, r7, r3
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2201      	movs	r2, #1
 8004102:	4013      	ands	r3, r2
 8004104:	d00b      	beq.n	800411e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2202      	movs	r2, #2
 800410c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2280      	movs	r2, #128	; 0x80
 8004112:	589b      	ldr	r3, [r3, r2]
 8004114:	2204      	movs	r2, #4
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2180      	movs	r1, #128	; 0x80
 800411c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800411e:	23a4      	movs	r3, #164	; 0xa4
 8004120:	18fb      	adds	r3, r7, r3
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2204      	movs	r2, #4
 8004126:	4013      	ands	r3, r2
 8004128:	d011      	beq.n	800414e <HAL_UART_IRQHandler+0x126>
 800412a:	239c      	movs	r3, #156	; 0x9c
 800412c:	18fb      	adds	r3, r7, r3
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2201      	movs	r2, #1
 8004132:	4013      	ands	r3, r2
 8004134:	d00b      	beq.n	800414e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2204      	movs	r2, #4
 800413c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2280      	movs	r2, #128	; 0x80
 8004142:	589b      	ldr	r3, [r3, r2]
 8004144:	2202      	movs	r2, #2
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2180      	movs	r1, #128	; 0x80
 800414c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800414e:	23a4      	movs	r3, #164	; 0xa4
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2208      	movs	r2, #8
 8004156:	4013      	ands	r3, r2
 8004158:	d017      	beq.n	800418a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800415a:	23a0      	movs	r3, #160	; 0xa0
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2220      	movs	r2, #32
 8004162:	4013      	ands	r3, r2
 8004164:	d105      	bne.n	8004172 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004166:	239c      	movs	r3, #156	; 0x9c
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2201      	movs	r2, #1
 800416e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004170:	d00b      	beq.n	800418a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2208      	movs	r2, #8
 8004178:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2280      	movs	r2, #128	; 0x80
 800417e:	589b      	ldr	r3, [r3, r2]
 8004180:	2208      	movs	r2, #8
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2180      	movs	r1, #128	; 0x80
 8004188:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800418a:	23a4      	movs	r3, #164	; 0xa4
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	4013      	ands	r3, r2
 8004196:	d013      	beq.n	80041c0 <HAL_UART_IRQHandler+0x198>
 8004198:	23a0      	movs	r3, #160	; 0xa0
 800419a:	18fb      	adds	r3, r7, r3
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	2380      	movs	r3, #128	; 0x80
 80041a0:	04db      	lsls	r3, r3, #19
 80041a2:	4013      	ands	r3, r2
 80041a4:	d00c      	beq.n	80041c0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2280      	movs	r2, #128	; 0x80
 80041ac:	0112      	lsls	r2, r2, #4
 80041ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2280      	movs	r2, #128	; 0x80
 80041b4:	589b      	ldr	r3, [r3, r2]
 80041b6:	2220      	movs	r2, #32
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2180      	movs	r1, #128	; 0x80
 80041be:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2280      	movs	r2, #128	; 0x80
 80041c4:	589b      	ldr	r3, [r3, r2]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d100      	bne.n	80041cc <HAL_UART_IRQHandler+0x1a4>
 80041ca:	e1df      	b.n	800458c <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041cc:	23a4      	movs	r3, #164	; 0xa4
 80041ce:	18fb      	adds	r3, r7, r3
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2220      	movs	r2, #32
 80041d4:	4013      	ands	r3, r2
 80041d6:	d00e      	beq.n	80041f6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041d8:	23a0      	movs	r3, #160	; 0xa0
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2220      	movs	r2, #32
 80041e0:	4013      	ands	r3, r2
 80041e2:	d008      	beq.n	80041f6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d004      	beq.n	80041f6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	0010      	movs	r0, r2
 80041f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2280      	movs	r2, #128	; 0x80
 80041fa:	589b      	ldr	r3, [r3, r2]
 80041fc:	2194      	movs	r1, #148	; 0x94
 80041fe:	187a      	adds	r2, r7, r1
 8004200:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2240      	movs	r2, #64	; 0x40
 800420a:	4013      	ands	r3, r2
 800420c:	2b40      	cmp	r3, #64	; 0x40
 800420e:	d004      	beq.n	800421a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004210:	187b      	adds	r3, r7, r1
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2228      	movs	r2, #40	; 0x28
 8004216:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004218:	d047      	beq.n	80042aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	0018      	movs	r0, r3
 800421e:	f000 fda7 	bl	8004d70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2240      	movs	r2, #64	; 0x40
 800422a:	4013      	ands	r3, r2
 800422c:	2b40      	cmp	r3, #64	; 0x40
 800422e:	d137      	bne.n	80042a0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004230:	f3ef 8310 	mrs	r3, PRIMASK
 8004234:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004238:	2090      	movs	r0, #144	; 0x90
 800423a:	183a      	adds	r2, r7, r0
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	2301      	movs	r3, #1
 8004240:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004242:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004244:	f383 8810 	msr	PRIMASK, r3
}
 8004248:	46c0      	nop			; (mov r8, r8)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2140      	movs	r1, #64	; 0x40
 8004256:	438a      	bics	r2, r1
 8004258:	609a      	str	r2, [r3, #8]
 800425a:	183b      	adds	r3, r7, r0
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004260:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004262:	f383 8810 	msr	PRIMASK, r3
}
 8004266:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	2b00      	cmp	r3, #0
 800426e:	d012      	beq.n	8004296 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	4a14      	ldr	r2, [pc, #80]	; (80042c8 <HAL_UART_IRQHandler+0x2a0>)
 8004276:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	0018      	movs	r0, r3
 800427e:	f7fe ff2f 	bl	80030e0 <HAL_DMA_Abort_IT>
 8004282:	1e03      	subs	r3, r0, #0
 8004284:	d01a      	beq.n	80042bc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	0018      	movs	r0, r3
 8004292:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004294:	e012      	b.n	80042bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	0018      	movs	r0, r3
 800429a:	f000 f98d 	bl	80045b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429e:	e00d      	b.n	80042bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	0018      	movs	r0, r3
 80042a4:	f000 f988 	bl	80045b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a8:	e008      	b.n	80042bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	0018      	movs	r0, r3
 80042ae:	f000 f983 	bl	80045b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2280      	movs	r2, #128	; 0x80
 80042b6:	2100      	movs	r1, #0
 80042b8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80042ba:	e167      	b.n	800458c <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042bc:	46c0      	nop			; (mov r8, r8)
    return;
 80042be:	e165      	b.n	800458c <HAL_UART_IRQHandler+0x564>
 80042c0:	0000080f 	.word	0x0000080f
 80042c4:	04000120 	.word	0x04000120
 80042c8:	08004e35 	.word	0x08004e35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d000      	beq.n	80042d6 <HAL_UART_IRQHandler+0x2ae>
 80042d4:	e131      	b.n	800453a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80042d6:	23a4      	movs	r3, #164	; 0xa4
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2210      	movs	r2, #16
 80042de:	4013      	ands	r3, r2
 80042e0:	d100      	bne.n	80042e4 <HAL_UART_IRQHandler+0x2bc>
 80042e2:	e12a      	b.n	800453a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80042e4:	23a0      	movs	r3, #160	; 0xa0
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2210      	movs	r2, #16
 80042ec:	4013      	ands	r3, r2
 80042ee:	d100      	bne.n	80042f2 <HAL_UART_IRQHandler+0x2ca>
 80042f0:	e123      	b.n	800453a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2210      	movs	r2, #16
 80042f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2240      	movs	r2, #64	; 0x40
 8004302:	4013      	ands	r3, r2
 8004304:	2b40      	cmp	r3, #64	; 0x40
 8004306:	d000      	beq.n	800430a <HAL_UART_IRQHandler+0x2e2>
 8004308:	e09b      	b.n	8004442 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	217e      	movs	r1, #126	; 0x7e
 8004314:	187b      	adds	r3, r7, r1
 8004316:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004318:	187b      	adds	r3, r7, r1
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d100      	bne.n	8004322 <HAL_UART_IRQHandler+0x2fa>
 8004320:	e136      	b.n	8004590 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2258      	movs	r2, #88	; 0x58
 8004326:	5a9b      	ldrh	r3, [r3, r2]
 8004328:	187a      	adds	r2, r7, r1
 800432a:	8812      	ldrh	r2, [r2, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d300      	bcc.n	8004332 <HAL_UART_IRQHandler+0x30a>
 8004330:	e12e      	b.n	8004590 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	187a      	adds	r2, r7, r1
 8004336:	215a      	movs	r1, #90	; 0x5a
 8004338:	8812      	ldrh	r2, [r2, #0]
 800433a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	2b20      	cmp	r3, #32
 8004344:	d06e      	beq.n	8004424 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004346:	f3ef 8310 	mrs	r3, PRIMASK
 800434a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800434e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004350:	2301      	movs	r3, #1
 8004352:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004356:	f383 8810 	msr	PRIMASK, r3
}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	498e      	ldr	r1, [pc, #568]	; (80045a0 <HAL_UART_IRQHandler+0x578>)
 8004368:	400a      	ands	r2, r1
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800436e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004372:	f383 8810 	msr	PRIMASK, r3
}
 8004376:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004378:	f3ef 8310 	mrs	r3, PRIMASK
 800437c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800437e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004380:	677b      	str	r3, [r7, #116]	; 0x74
 8004382:	2301      	movs	r3, #1
 8004384:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004388:	f383 8810 	msr	PRIMASK, r3
}
 800438c:	46c0      	nop			; (mov r8, r8)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2101      	movs	r1, #1
 800439a:	438a      	bics	r2, r1
 800439c:	609a      	str	r2, [r3, #8]
 800439e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043a0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043a4:	f383 8810 	msr	PRIMASK, r3
}
 80043a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043aa:	f3ef 8310 	mrs	r3, PRIMASK
 80043ae:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80043b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043b2:	673b      	str	r3, [r7, #112]	; 0x70
 80043b4:	2301      	movs	r3, #1
 80043b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ba:	f383 8810 	msr	PRIMASK, r3
}
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2140      	movs	r1, #64	; 0x40
 80043cc:	438a      	bics	r2, r1
 80043ce:	609a      	str	r2, [r3, #8]
 80043d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043d2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d6:	f383 8810 	msr	PRIMASK, r3
}
 80043da:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2220      	movs	r2, #32
 80043e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e8:	f3ef 8310 	mrs	r3, PRIMASK
 80043ec:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80043ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043f2:	2301      	movs	r3, #1
 80043f4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043f8:	f383 8810 	msr	PRIMASK, r3
}
 80043fc:	46c0      	nop			; (mov r8, r8)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2110      	movs	r1, #16
 800440a:	438a      	bics	r2, r1
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004410:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004414:	f383 8810 	msr	PRIMASK, r3
}
 8004418:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	0018      	movs	r0, r3
 8004420:	f7fe fe26 	bl	8003070 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2258      	movs	r2, #88	; 0x58
 8004428:	5a9a      	ldrh	r2, [r3, r2]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	215a      	movs	r1, #90	; 0x5a
 800442e:	5a5b      	ldrh	r3, [r3, r1]
 8004430:	b29b      	uxth	r3, r3
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	b29a      	uxth	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	0011      	movs	r1, r2
 800443a:	0018      	movs	r0, r3
 800443c:	f000 f8c4 	bl	80045c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004440:	e0a6      	b.n	8004590 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2258      	movs	r2, #88	; 0x58
 8004446:	5a99      	ldrh	r1, [r3, r2]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	225a      	movs	r2, #90	; 0x5a
 800444c:	5a9b      	ldrh	r3, [r3, r2]
 800444e:	b29a      	uxth	r2, r3
 8004450:	208e      	movs	r0, #142	; 0x8e
 8004452:	183b      	adds	r3, r7, r0
 8004454:	1a8a      	subs	r2, r1, r2
 8004456:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	225a      	movs	r2, #90	; 0x5a
 800445c:	5a9b      	ldrh	r3, [r3, r2]
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d100      	bne.n	8004466 <HAL_UART_IRQHandler+0x43e>
 8004464:	e096      	b.n	8004594 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8004466:	183b      	adds	r3, r7, r0
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d100      	bne.n	8004470 <HAL_UART_IRQHandler+0x448>
 800446e:	e091      	b.n	8004594 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004470:	f3ef 8310 	mrs	r3, PRIMASK
 8004474:	60fb      	str	r3, [r7, #12]
  return(result);
 8004476:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004478:	2488      	movs	r4, #136	; 0x88
 800447a:	193a      	adds	r2, r7, r4
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	2301      	movs	r3, #1
 8004480:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f383 8810 	msr	PRIMASK, r3
}
 8004488:	46c0      	nop			; (mov r8, r8)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4943      	ldr	r1, [pc, #268]	; (80045a4 <HAL_UART_IRQHandler+0x57c>)
 8004496:	400a      	ands	r2, r1
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	193b      	adds	r3, r7, r4
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f383 8810 	msr	PRIMASK, r3
}
 80044a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044a8:	f3ef 8310 	mrs	r3, PRIMASK
 80044ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80044ae:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b0:	2484      	movs	r4, #132	; 0x84
 80044b2:	193a      	adds	r2, r7, r4
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	2301      	movs	r3, #1
 80044b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f383 8810 	msr	PRIMASK, r3
}
 80044c0:	46c0      	nop			; (mov r8, r8)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2101      	movs	r1, #1
 80044ce:	438a      	bics	r2, r1
 80044d0:	609a      	str	r2, [r3, #8]
 80044d2:	193b      	adds	r3, r7, r4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	f383 8810 	msr	PRIMASK, r3
}
 80044de:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f2:	f3ef 8310 	mrs	r3, PRIMASK
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fa:	2480      	movs	r4, #128	; 0x80
 80044fc:	193a      	adds	r2, r7, r4
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	2301      	movs	r3, #1
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	f383 8810 	msr	PRIMASK, r3
}
 800450a:	46c0      	nop			; (mov r8, r8)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2110      	movs	r1, #16
 8004518:	438a      	bics	r2, r1
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	193b      	adds	r3, r7, r4
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004524:	f383 8810 	msr	PRIMASK, r3
}
 8004528:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800452a:	183b      	adds	r3, r7, r0
 800452c:	881a      	ldrh	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0011      	movs	r1, r2
 8004532:	0018      	movs	r0, r3
 8004534:	f000 f848 	bl	80045c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004538:	e02c      	b.n	8004594 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800453a:	23a4      	movs	r3, #164	; 0xa4
 800453c:	18fb      	adds	r3, r7, r3
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2280      	movs	r2, #128	; 0x80
 8004542:	4013      	ands	r3, r2
 8004544:	d00f      	beq.n	8004566 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004546:	23a0      	movs	r3, #160	; 0xa0
 8004548:	18fb      	adds	r3, r7, r3
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2280      	movs	r2, #128	; 0x80
 800454e:	4013      	ands	r3, r2
 8004550:	d009      	beq.n	8004566 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01e      	beq.n	8004598 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	0010      	movs	r0, r2
 8004562:	4798      	blx	r3
    }
    return;
 8004564:	e018      	b.n	8004598 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004566:	23a4      	movs	r3, #164	; 0xa4
 8004568:	18fb      	adds	r3, r7, r3
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2240      	movs	r2, #64	; 0x40
 800456e:	4013      	ands	r3, r2
 8004570:	d013      	beq.n	800459a <HAL_UART_IRQHandler+0x572>
 8004572:	23a0      	movs	r3, #160	; 0xa0
 8004574:	18fb      	adds	r3, r7, r3
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2240      	movs	r2, #64	; 0x40
 800457a:	4013      	ands	r3, r2
 800457c:	d00d      	beq.n	800459a <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	0018      	movs	r0, r3
 8004582:	f000 fc6e 	bl	8004e62 <UART_EndTransmit_IT>
    return;
 8004586:	e008      	b.n	800459a <HAL_UART_IRQHandler+0x572>
      return;
 8004588:	46c0      	nop			; (mov r8, r8)
 800458a:	e006      	b.n	800459a <HAL_UART_IRQHandler+0x572>
    return;
 800458c:	46c0      	nop			; (mov r8, r8)
 800458e:	e004      	b.n	800459a <HAL_UART_IRQHandler+0x572>
      return;
 8004590:	46c0      	nop			; (mov r8, r8)
 8004592:	e002      	b.n	800459a <HAL_UART_IRQHandler+0x572>
      return;
 8004594:	46c0      	nop			; (mov r8, r8)
 8004596:	e000      	b.n	800459a <HAL_UART_IRQHandler+0x572>
    return;
 8004598:	46c0      	nop			; (mov r8, r8)
  }

}
 800459a:	46bd      	mov	sp, r7
 800459c:	b02b      	add	sp, #172	; 0xac
 800459e:	bd90      	pop	{r4, r7, pc}
 80045a0:	fffffeff 	.word	0xfffffeff
 80045a4:	fffffedf 	.word	0xfffffedf

080045a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b002      	add	sp, #8
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045c0:	46c0      	nop			; (mov r8, r8)
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b002      	add	sp, #8
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	000a      	movs	r2, r1
 80045d2:	1cbb      	adds	r3, r7, #2
 80045d4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	46bd      	mov	sp, r7
 80045da:	b002      	add	sp, #8
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045e8:	231e      	movs	r3, #30
 80045ea:	18fb      	adds	r3, r7, r3
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a97      	ldr	r2, [pc, #604]	; (800486c <UART_SetConfig+0x28c>)
 8004610:	4013      	ands	r3, r2
 8004612:	0019      	movs	r1, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	430a      	orrs	r2, r1
 800461c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	4a92      	ldr	r2, [pc, #584]	; (8004870 <UART_SetConfig+0x290>)
 8004626:	4013      	ands	r3, r2
 8004628:	0019      	movs	r1, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	4a89      	ldr	r2, [pc, #548]	; (8004874 <UART_SetConfig+0x294>)
 800464e:	4013      	ands	r3, r2
 8004650:	0019      	movs	r1, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	430a      	orrs	r2, r1
 800465a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a85      	ldr	r2, [pc, #532]	; (8004878 <UART_SetConfig+0x298>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d127      	bne.n	80046b6 <UART_SetConfig+0xd6>
 8004666:	4b85      	ldr	r3, [pc, #532]	; (800487c <UART_SetConfig+0x29c>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	2203      	movs	r2, #3
 800466c:	4013      	ands	r3, r2
 800466e:	2b03      	cmp	r3, #3
 8004670:	d00d      	beq.n	800468e <UART_SetConfig+0xae>
 8004672:	d81b      	bhi.n	80046ac <UART_SetConfig+0xcc>
 8004674:	2b02      	cmp	r3, #2
 8004676:	d014      	beq.n	80046a2 <UART_SetConfig+0xc2>
 8004678:	d818      	bhi.n	80046ac <UART_SetConfig+0xcc>
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <UART_SetConfig+0xa4>
 800467e:	2b01      	cmp	r3, #1
 8004680:	d00a      	beq.n	8004698 <UART_SetConfig+0xb8>
 8004682:	e013      	b.n	80046ac <UART_SetConfig+0xcc>
 8004684:	231f      	movs	r3, #31
 8004686:	18fb      	adds	r3, r7, r3
 8004688:	2200      	movs	r2, #0
 800468a:	701a      	strb	r2, [r3, #0]
 800468c:	e035      	b.n	80046fa <UART_SetConfig+0x11a>
 800468e:	231f      	movs	r3, #31
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	2202      	movs	r2, #2
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e030      	b.n	80046fa <UART_SetConfig+0x11a>
 8004698:	231f      	movs	r3, #31
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	2204      	movs	r2, #4
 800469e:	701a      	strb	r2, [r3, #0]
 80046a0:	e02b      	b.n	80046fa <UART_SetConfig+0x11a>
 80046a2:	231f      	movs	r3, #31
 80046a4:	18fb      	adds	r3, r7, r3
 80046a6:	2208      	movs	r2, #8
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e026      	b.n	80046fa <UART_SetConfig+0x11a>
 80046ac:	231f      	movs	r3, #31
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	2210      	movs	r2, #16
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	e021      	b.n	80046fa <UART_SetConfig+0x11a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a71      	ldr	r2, [pc, #452]	; (8004880 <UART_SetConfig+0x2a0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d104      	bne.n	80046ca <UART_SetConfig+0xea>
 80046c0:	231f      	movs	r3, #31
 80046c2:	18fb      	adds	r3, r7, r3
 80046c4:	2200      	movs	r2, #0
 80046c6:	701a      	strb	r2, [r3, #0]
 80046c8:	e017      	b.n	80046fa <UART_SetConfig+0x11a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a6d      	ldr	r2, [pc, #436]	; (8004884 <UART_SetConfig+0x2a4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d104      	bne.n	80046de <UART_SetConfig+0xfe>
 80046d4:	231f      	movs	r3, #31
 80046d6:	18fb      	adds	r3, r7, r3
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
 80046dc:	e00d      	b.n	80046fa <UART_SetConfig+0x11a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a69      	ldr	r2, [pc, #420]	; (8004888 <UART_SetConfig+0x2a8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d104      	bne.n	80046f2 <UART_SetConfig+0x112>
 80046e8:	231f      	movs	r3, #31
 80046ea:	18fb      	adds	r3, r7, r3
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]
 80046f0:	e003      	b.n	80046fa <UART_SetConfig+0x11a>
 80046f2:	231f      	movs	r3, #31
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	2210      	movs	r2, #16
 80046f8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69da      	ldr	r2, [r3, #28]
 80046fe:	2380      	movs	r3, #128	; 0x80
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	429a      	cmp	r2, r3
 8004704:	d15d      	bne.n	80047c2 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8004706:	231f      	movs	r3, #31
 8004708:	18fb      	adds	r3, r7, r3
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b08      	cmp	r3, #8
 800470e:	d015      	beq.n	800473c <UART_SetConfig+0x15c>
 8004710:	dc18      	bgt.n	8004744 <UART_SetConfig+0x164>
 8004712:	2b04      	cmp	r3, #4
 8004714:	d00d      	beq.n	8004732 <UART_SetConfig+0x152>
 8004716:	dc15      	bgt.n	8004744 <UART_SetConfig+0x164>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <UART_SetConfig+0x142>
 800471c:	2b02      	cmp	r3, #2
 800471e:	d005      	beq.n	800472c <UART_SetConfig+0x14c>
 8004720:	e010      	b.n	8004744 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004722:	f7ff fb0d 	bl	8003d40 <HAL_RCC_GetPCLK1Freq>
 8004726:	0003      	movs	r3, r0
 8004728:	61bb      	str	r3, [r7, #24]
        break;
 800472a:	e012      	b.n	8004752 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800472c:	4b57      	ldr	r3, [pc, #348]	; (800488c <UART_SetConfig+0x2ac>)
 800472e:	61bb      	str	r3, [r7, #24]
        break;
 8004730:	e00f      	b.n	8004752 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004732:	f7ff fa95 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8004736:	0003      	movs	r3, r0
 8004738:	61bb      	str	r3, [r7, #24]
        break;
 800473a:	e00a      	b.n	8004752 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800473c:	2380      	movs	r3, #128	; 0x80
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	61bb      	str	r3, [r7, #24]
        break;
 8004742:	e006      	b.n	8004752 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004748:	231e      	movs	r3, #30
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	2201      	movs	r2, #1
 800474e:	701a      	strb	r2, [r3, #0]
        break;
 8004750:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d100      	bne.n	800475a <UART_SetConfig+0x17a>
 8004758:	e07b      	b.n	8004852 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	005a      	lsls	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	085b      	lsrs	r3, r3, #1
 8004764:	18d2      	adds	r2, r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	0019      	movs	r1, r3
 800476c:	0010      	movs	r0, r2
 800476e:	f7fb fce7 	bl	8000140 <__udivsi3>
 8004772:	0003      	movs	r3, r0
 8004774:	b29b      	uxth	r3, r3
 8004776:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2b0f      	cmp	r3, #15
 800477c:	d91c      	bls.n	80047b8 <UART_SetConfig+0x1d8>
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	2380      	movs	r3, #128	; 0x80
 8004782:	025b      	lsls	r3, r3, #9
 8004784:	429a      	cmp	r2, r3
 8004786:	d217      	bcs.n	80047b8 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	b29a      	uxth	r2, r3
 800478c:	200e      	movs	r0, #14
 800478e:	183b      	adds	r3, r7, r0
 8004790:	210f      	movs	r1, #15
 8004792:	438a      	bics	r2, r1
 8004794:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	b29b      	uxth	r3, r3
 800479c:	2207      	movs	r2, #7
 800479e:	4013      	ands	r3, r2
 80047a0:	b299      	uxth	r1, r3
 80047a2:	183b      	adds	r3, r7, r0
 80047a4:	183a      	adds	r2, r7, r0
 80047a6:	8812      	ldrh	r2, [r2, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	183a      	adds	r2, r7, r0
 80047b2:	8812      	ldrh	r2, [r2, #0]
 80047b4:	60da      	str	r2, [r3, #12]
 80047b6:	e04c      	b.n	8004852 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 80047b8:	231e      	movs	r3, #30
 80047ba:	18fb      	adds	r3, r7, r3
 80047bc:	2201      	movs	r2, #1
 80047be:	701a      	strb	r2, [r3, #0]
 80047c0:	e047      	b.n	8004852 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047c2:	231f      	movs	r3, #31
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d015      	beq.n	80047f8 <UART_SetConfig+0x218>
 80047cc:	dc18      	bgt.n	8004800 <UART_SetConfig+0x220>
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d00d      	beq.n	80047ee <UART_SetConfig+0x20e>
 80047d2:	dc15      	bgt.n	8004800 <UART_SetConfig+0x220>
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <UART_SetConfig+0x1fe>
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d005      	beq.n	80047e8 <UART_SetConfig+0x208>
 80047dc:	e010      	b.n	8004800 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047de:	f7ff faaf 	bl	8003d40 <HAL_RCC_GetPCLK1Freq>
 80047e2:	0003      	movs	r3, r0
 80047e4:	61bb      	str	r3, [r7, #24]
        break;
 80047e6:	e012      	b.n	800480e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e8:	4b28      	ldr	r3, [pc, #160]	; (800488c <UART_SetConfig+0x2ac>)
 80047ea:	61bb      	str	r3, [r7, #24]
        break;
 80047ec:	e00f      	b.n	800480e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ee:	f7ff fa37 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 80047f2:	0003      	movs	r3, r0
 80047f4:	61bb      	str	r3, [r7, #24]
        break;
 80047f6:	e00a      	b.n	800480e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	61bb      	str	r3, [r7, #24]
        break;
 80047fe:	e006      	b.n	800480e <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004804:	231e      	movs	r3, #30
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	2201      	movs	r2, #1
 800480a:	701a      	strb	r2, [r3, #0]
        break;
 800480c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01e      	beq.n	8004852 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	085a      	lsrs	r2, r3, #1
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	18d2      	adds	r2, r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	0019      	movs	r1, r3
 8004824:	0010      	movs	r0, r2
 8004826:	f7fb fc8b 	bl	8000140 <__udivsi3>
 800482a:	0003      	movs	r3, r0
 800482c:	b29b      	uxth	r3, r3
 800482e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b0f      	cmp	r3, #15
 8004834:	d909      	bls.n	800484a <UART_SetConfig+0x26a>
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	2380      	movs	r3, #128	; 0x80
 800483a:	025b      	lsls	r3, r3, #9
 800483c:	429a      	cmp	r2, r3
 800483e:	d204      	bcs.n	800484a <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	60da      	str	r2, [r3, #12]
 8004848:	e003      	b.n	8004852 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800484a:	231e      	movs	r3, #30
 800484c:	18fb      	adds	r3, r7, r3
 800484e:	2201      	movs	r2, #1
 8004850:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800485e:	231e      	movs	r3, #30
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	781b      	ldrb	r3, [r3, #0]
}
 8004864:	0018      	movs	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	b008      	add	sp, #32
 800486a:	bd80      	pop	{r7, pc}
 800486c:	efff69f3 	.word	0xefff69f3
 8004870:	ffffcfff 	.word	0xffffcfff
 8004874:	fffff4ff 	.word	0xfffff4ff
 8004878:	40013800 	.word	0x40013800
 800487c:	40021000 	.word	0x40021000
 8004880:	40004400 	.word	0x40004400
 8004884:	40004800 	.word	0x40004800
 8004888:	40004c00 	.word	0x40004c00
 800488c:	007a1200 	.word	0x007a1200

08004890 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	2201      	movs	r2, #1
 800489e:	4013      	ands	r3, r2
 80048a0:	d00b      	beq.n	80048ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4a4a      	ldr	r2, [pc, #296]	; (80049d4 <UART_AdvFeatureConfig+0x144>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	0019      	movs	r1, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	2202      	movs	r2, #2
 80048c0:	4013      	ands	r3, r2
 80048c2:	d00b      	beq.n	80048dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	4a43      	ldr	r2, [pc, #268]	; (80049d8 <UART_AdvFeatureConfig+0x148>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	0019      	movs	r1, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	2204      	movs	r2, #4
 80048e2:	4013      	ands	r3, r2
 80048e4:	d00b      	beq.n	80048fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	4a3b      	ldr	r2, [pc, #236]	; (80049dc <UART_AdvFeatureConfig+0x14c>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	0019      	movs	r1, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	2208      	movs	r2, #8
 8004904:	4013      	ands	r3, r2
 8004906:	d00b      	beq.n	8004920 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4a34      	ldr	r2, [pc, #208]	; (80049e0 <UART_AdvFeatureConfig+0x150>)
 8004910:	4013      	ands	r3, r2
 8004912:	0019      	movs	r1, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	2210      	movs	r2, #16
 8004926:	4013      	ands	r3, r2
 8004928:	d00b      	beq.n	8004942 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	4a2c      	ldr	r2, [pc, #176]	; (80049e4 <UART_AdvFeatureConfig+0x154>)
 8004932:	4013      	ands	r3, r2
 8004934:	0019      	movs	r1, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	2220      	movs	r2, #32
 8004948:	4013      	ands	r3, r2
 800494a:	d00b      	beq.n	8004964 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	4a25      	ldr	r2, [pc, #148]	; (80049e8 <UART_AdvFeatureConfig+0x158>)
 8004954:	4013      	ands	r3, r2
 8004956:	0019      	movs	r1, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	2240      	movs	r2, #64	; 0x40
 800496a:	4013      	ands	r3, r2
 800496c:	d01d      	beq.n	80049aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4a1d      	ldr	r2, [pc, #116]	; (80049ec <UART_AdvFeatureConfig+0x15c>)
 8004976:	4013      	ands	r3, r2
 8004978:	0019      	movs	r1, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800498a:	2380      	movs	r3, #128	; 0x80
 800498c:	035b      	lsls	r3, r3, #13
 800498e:	429a      	cmp	r2, r3
 8004990:	d10b      	bne.n	80049aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	4a15      	ldr	r2, [pc, #84]	; (80049f0 <UART_AdvFeatureConfig+0x160>)
 800499a:	4013      	ands	r3, r2
 800499c:	0019      	movs	r1, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	2280      	movs	r2, #128	; 0x80
 80049b0:	4013      	ands	r3, r2
 80049b2:	d00b      	beq.n	80049cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	4a0e      	ldr	r2, [pc, #56]	; (80049f4 <UART_AdvFeatureConfig+0x164>)
 80049bc:	4013      	ands	r3, r2
 80049be:	0019      	movs	r1, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	605a      	str	r2, [r3, #4]
  }
}
 80049cc:	46c0      	nop			; (mov r8, r8)
 80049ce:	46bd      	mov	sp, r7
 80049d0:	b002      	add	sp, #8
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	fffdffff 	.word	0xfffdffff
 80049d8:	fffeffff 	.word	0xfffeffff
 80049dc:	fffbffff 	.word	0xfffbffff
 80049e0:	ffff7fff 	.word	0xffff7fff
 80049e4:	ffffefff 	.word	0xffffefff
 80049e8:	ffffdfff 	.word	0xffffdfff
 80049ec:	ffefffff 	.word	0xffefffff
 80049f0:	ff9fffff 	.word	0xff9fffff
 80049f4:	fff7ffff 	.word	0xfff7ffff

080049f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2280      	movs	r2, #128	; 0x80
 8004a04:	2100      	movs	r1, #0
 8004a06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a08:	f7fe fa4a 	bl	8002ea0 <HAL_GetTick>
 8004a0c:	0003      	movs	r3, r0
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2208      	movs	r2, #8
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d10c      	bne.n	8004a38 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2280      	movs	r2, #128	; 0x80
 8004a22:	0391      	lsls	r1, r2, #14
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	4a17      	ldr	r2, [pc, #92]	; (8004a84 <UART_CheckIdleState+0x8c>)
 8004a28:	9200      	str	r2, [sp, #0]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f000 f82c 	bl	8004a88 <UART_WaitOnFlagUntilTimeout>
 8004a30:	1e03      	subs	r3, r0, #0
 8004a32:	d001      	beq.n	8004a38 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e021      	b.n	8004a7c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2204      	movs	r2, #4
 8004a40:	4013      	ands	r3, r2
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d10c      	bne.n	8004a60 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2280      	movs	r2, #128	; 0x80
 8004a4a:	03d1      	lsls	r1, r2, #15
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	4a0d      	ldr	r2, [pc, #52]	; (8004a84 <UART_CheckIdleState+0x8c>)
 8004a50:	9200      	str	r2, [sp, #0]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f000 f818 	bl	8004a88 <UART_WaitOnFlagUntilTimeout>
 8004a58:	1e03      	subs	r3, r0, #0
 8004a5a:	d001      	beq.n	8004a60 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e00d      	b.n	8004a7c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2220      	movs	r2, #32
 8004a64:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2274      	movs	r2, #116	; 0x74
 8004a76:	2100      	movs	r1, #0
 8004a78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	b004      	add	sp, #16
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	01ffffff 	.word	0x01ffffff

08004a88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b094      	sub	sp, #80	; 0x50
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	1dfb      	adds	r3, r7, #7
 8004a96:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a98:	e0a3      	b.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	d100      	bne.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004aa0:	e09f      	b.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa2:	f7fe f9fd 	bl	8002ea0 <HAL_GetTick>
 8004aa6:	0002      	movs	r2, r0
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d302      	bcc.n	8004ab8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d13d      	bne.n	8004b34 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8004abc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	f383 8810 	msr	PRIMASK, r3
}
 8004acc:	46c0      	nop			; (mov r8, r8)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	494c      	ldr	r1, [pc, #304]	; (8004c0c <UART_WaitOnFlagUntilTimeout+0x184>)
 8004ada:	400a      	ands	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ae0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	f383 8810 	msr	PRIMASK, r3
}
 8004ae8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aea:	f3ef 8310 	mrs	r3, PRIMASK
 8004aee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af2:	643b      	str	r3, [r7, #64]	; 0x40
 8004af4:	2301      	movs	r3, #1
 8004af6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	f383 8810 	msr	PRIMASK, r3
}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	438a      	bics	r2, r1
 8004b0e:	609a      	str	r2, [r3, #8]
 8004b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b16:	f383 8810 	msr	PRIMASK, r3
}
 8004b1a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2274      	movs	r2, #116	; 0x74
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e067      	b.n	8004c04 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2204      	movs	r2, #4
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	d050      	beq.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	69da      	ldr	r2, [r3, #28]
 8004b46:	2380      	movs	r3, #128	; 0x80
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	401a      	ands	r2, r3
 8004b4c:	2380      	movs	r3, #128	; 0x80
 8004b4e:	011b      	lsls	r3, r3, #4
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d146      	bne.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2280      	movs	r2, #128	; 0x80
 8004b5a:	0112      	lsls	r2, r2, #4
 8004b5c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b62:	613b      	str	r3, [r7, #16]
  return(result);
 8004b64:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b68:	2301      	movs	r3, #1
 8004b6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f383 8810 	msr	PRIMASK, r3
}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4923      	ldr	r1, [pc, #140]	; (8004c0c <UART_WaitOnFlagUntilTimeout+0x184>)
 8004b80:	400a      	ands	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	f383 8810 	msr	PRIMASK, r3
}
 8004b8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b90:	f3ef 8310 	mrs	r3, PRIMASK
 8004b94:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b96:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b98:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	f383 8810 	msr	PRIMASK, r3
}
 8004ba4:	46c0      	nop			; (mov r8, r8)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	438a      	bics	r2, r1
 8004bb4:	609a      	str	r2, [r3, #8]
 8004bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	f383 8810 	msr	PRIMASK, r3
}
 8004bc0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2280      	movs	r2, #128	; 0x80
 8004bd2:	2120      	movs	r1, #32
 8004bd4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2274      	movs	r2, #116	; 0x74
 8004bda:	2100      	movs	r1, #0
 8004bdc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e010      	b.n	8004c04 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	4013      	ands	r3, r2
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	425a      	negs	r2, r3
 8004bf2:	4153      	adcs	r3, r2
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	001a      	movs	r2, r3
 8004bf8:	1dfb      	adds	r3, r7, #7
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d100      	bne.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004c00:	e74b      	b.n	8004a9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	0018      	movs	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	b014      	add	sp, #80	; 0x50
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	fffffe5f 	.word	0xfffffe5f

08004c10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08c      	sub	sp, #48	; 0x30
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	1dbb      	adds	r3, r7, #6
 8004c1c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1dba      	adds	r2, r7, #6
 8004c28:	2158      	movs	r1, #88	; 0x58
 8004c2a:	8812      	ldrh	r2, [r2, #0]
 8004c2c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1dba      	adds	r2, r7, #6
 8004c32:	215a      	movs	r1, #90	; 0x5a
 8004c34:	8812      	ldrh	r2, [r2, #0]
 8004c36:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	2380      	movs	r3, #128	; 0x80
 8004c44:	015b      	lsls	r3, r3, #5
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d10d      	bne.n	8004c66 <UART_Start_Receive_IT+0x56>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d104      	bne.n	8004c5c <UART_Start_Receive_IT+0x4c>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	225c      	movs	r2, #92	; 0x5c
 8004c56:	4943      	ldr	r1, [pc, #268]	; (8004d64 <UART_Start_Receive_IT+0x154>)
 8004c58:	5299      	strh	r1, [r3, r2]
 8004c5a:	e02e      	b.n	8004cba <UART_Start_Receive_IT+0xaa>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	225c      	movs	r2, #92	; 0x5c
 8004c60:	21ff      	movs	r1, #255	; 0xff
 8004c62:	5299      	strh	r1, [r3, r2]
 8004c64:	e029      	b.n	8004cba <UART_Start_Receive_IT+0xaa>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10d      	bne.n	8004c8a <UART_Start_Receive_IT+0x7a>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d104      	bne.n	8004c80 <UART_Start_Receive_IT+0x70>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	225c      	movs	r2, #92	; 0x5c
 8004c7a:	21ff      	movs	r1, #255	; 0xff
 8004c7c:	5299      	strh	r1, [r3, r2]
 8004c7e:	e01c      	b.n	8004cba <UART_Start_Receive_IT+0xaa>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	225c      	movs	r2, #92	; 0x5c
 8004c84:	217f      	movs	r1, #127	; 0x7f
 8004c86:	5299      	strh	r1, [r3, r2]
 8004c88:	e017      	b.n	8004cba <UART_Start_Receive_IT+0xaa>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	2380      	movs	r3, #128	; 0x80
 8004c90:	055b      	lsls	r3, r3, #21
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d10d      	bne.n	8004cb2 <UART_Start_Receive_IT+0xa2>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d104      	bne.n	8004ca8 <UART_Start_Receive_IT+0x98>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	225c      	movs	r2, #92	; 0x5c
 8004ca2:	217f      	movs	r1, #127	; 0x7f
 8004ca4:	5299      	strh	r1, [r3, r2]
 8004ca6:	e008      	b.n	8004cba <UART_Start_Receive_IT+0xaa>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	225c      	movs	r2, #92	; 0x5c
 8004cac:	213f      	movs	r1, #63	; 0x3f
 8004cae:	5299      	strh	r1, [r3, r2]
 8004cb0:	e003      	b.n	8004cba <UART_Start_Receive_IT+0xaa>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	225c      	movs	r2, #92	; 0x5c
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2280      	movs	r2, #128	; 0x80
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2222      	movs	r2, #34	; 0x22
 8004cc6:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8004ccc:	61fb      	str	r3, [r7, #28]
  return(result);
 8004cce:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	f383 8810 	msr	PRIMASK, r3
}
 8004cdc:	46c0      	nop			; (mov r8, r8)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2101      	movs	r1, #1
 8004cea:	430a      	orrs	r2, r1
 8004cec:	609a      	str	r2, [r3, #8]
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	f383 8810 	msr	PRIMASK, r3
}
 8004cf8:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	2380      	movs	r3, #128	; 0x80
 8004d00:	015b      	lsls	r3, r3, #5
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d107      	bne.n	8004d16 <UART_Start_Receive_IT+0x106>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d103      	bne.n	8004d16 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4a15      	ldr	r2, [pc, #84]	; (8004d68 <UART_Start_Receive_IT+0x158>)
 8004d12:	665a      	str	r2, [r3, #100]	; 0x64
 8004d14:	e002      	b.n	8004d1c <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4a14      	ldr	r2, [pc, #80]	; (8004d6c <UART_Start_Receive_IT+0x15c>)
 8004d1a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2274      	movs	r2, #116	; 0x74
 8004d20:	2100      	movs	r1, #0
 8004d22:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d24:	f3ef 8310 	mrs	r3, PRIMASK
 8004d28:	613b      	str	r3, [r7, #16]
  return(result);
 8004d2a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d2e:	2301      	movs	r3, #1
 8004d30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f383 8810 	msr	PRIMASK, r3
}
 8004d38:	46c0      	nop			; (mov r8, r8)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2190      	movs	r1, #144	; 0x90
 8004d46:	0049      	lsls	r1, r1, #1
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f383 8810 	msr	PRIMASK, r3
}
 8004d56:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	b00c      	add	sp, #48	; 0x30
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	000001ff 	.word	0x000001ff
 8004d68:	08005021 	.word	0x08005021
 8004d6c:	08004eb9 	.word	0x08004eb9

08004d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08e      	sub	sp, #56	; 0x38
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d78:	f3ef 8310 	mrs	r3, PRIMASK
 8004d7c:	617b      	str	r3, [r7, #20]
  return(result);
 8004d7e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d80:	637b      	str	r3, [r7, #52]	; 0x34
 8004d82:	2301      	movs	r3, #1
 8004d84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	f383 8810 	msr	PRIMASK, r3
}
 8004d8c:	46c0      	nop			; (mov r8, r8)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4925      	ldr	r1, [pc, #148]	; (8004e30 <UART_EndRxTransfer+0xc0>)
 8004d9a:	400a      	ands	r2, r1
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	f383 8810 	msr	PRIMASK, r3
}
 8004da8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004daa:	f3ef 8310 	mrs	r3, PRIMASK
 8004dae:	623b      	str	r3, [r7, #32]
  return(result);
 8004db0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db2:	633b      	str	r3, [r7, #48]	; 0x30
 8004db4:	2301      	movs	r3, #1
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	f383 8810 	msr	PRIMASK, r3
}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2101      	movs	r1, #1
 8004dcc:	438a      	bics	r2, r1
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd6:	f383 8810 	msr	PRIMASK, r3
}
 8004dda:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d118      	bne.n	8004e16 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de4:	f3ef 8310 	mrs	r3, PRIMASK
 8004de8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dee:	2301      	movs	r3, #1
 8004df0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f383 8810 	msr	PRIMASK, r3
}
 8004df8:	46c0      	nop			; (mov r8, r8)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2110      	movs	r1, #16
 8004e06:	438a      	bics	r2, r1
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f383 8810 	msr	PRIMASK, r3
}
 8004e14:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004e28:	46c0      	nop			; (mov r8, r8)
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	b00e      	add	sp, #56	; 0x38
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	fffffedf 	.word	0xfffffedf

08004e34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	225a      	movs	r2, #90	; 0x5a
 8004e46:	2100      	movs	r1, #0
 8004e48:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2252      	movs	r2, #82	; 0x52
 8004e4e:	2100      	movs	r1, #0
 8004e50:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	0018      	movs	r0, r3
 8004e56:	f7ff fbaf 	bl	80045b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	b004      	add	sp, #16
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b086      	sub	sp, #24
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e70:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	2301      	movs	r3, #1
 8004e76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f383 8810 	msr	PRIMASK, r3
}
 8004e7e:	46c0      	nop			; (mov r8, r8)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2140      	movs	r1, #64	; 0x40
 8004e8c:	438a      	bics	r2, r1
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f383 8810 	msr	PRIMASK, r3
}
 8004e9a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f7ff fb7c 	bl	80045a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eb0:	46c0      	nop			; (mov r8, r8)
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b006      	add	sp, #24
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b090      	sub	sp, #64	; 0x40
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ec0:	203e      	movs	r0, #62	; 0x3e
 8004ec2:	183b      	adds	r3, r7, r0
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	215c      	movs	r1, #92	; 0x5c
 8004ec8:	5a52      	ldrh	r2, [r2, r1]
 8004eca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed0:	2b22      	cmp	r3, #34	; 0x22
 8004ed2:	d000      	beq.n	8004ed6 <UART_RxISR_8BIT+0x1e>
 8004ed4:	e095      	b.n	8005002 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	213c      	movs	r1, #60	; 0x3c
 8004edc:	187b      	adds	r3, r7, r1
 8004ede:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004ee0:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ee2:	187b      	adds	r3, r7, r1
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	183b      	adds	r3, r7, r0
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b2d9      	uxtb	r1, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef2:	400a      	ands	r2, r1
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	225a      	movs	r2, #90	; 0x5a
 8004f06:	5a9b      	ldrh	r3, [r3, r2]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b299      	uxth	r1, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	225a      	movs	r2, #90	; 0x5a
 8004f12:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	225a      	movs	r2, #90	; 0x5a
 8004f18:	5a9b      	ldrh	r3, [r3, r2]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d178      	bne.n	8005012 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f20:	f3ef 8310 	mrs	r3, PRIMASK
 8004f24:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f26:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f28:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	f383 8810 	msr	PRIMASK, r3
}
 8004f34:	46c0      	nop			; (mov r8, r8)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4936      	ldr	r1, [pc, #216]	; (800501c <UART_RxISR_8BIT+0x164>)
 8004f42:	400a      	ands	r2, r1
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f48:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	f383 8810 	msr	PRIMASK, r3
}
 8004f50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f52:	f3ef 8310 	mrs	r3, PRIMASK
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	f383 8810 	msr	PRIMASK, r3
}
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2101      	movs	r1, #1
 8004f74:	438a      	bics	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]
 8004f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7e:	f383 8810 	msr	PRIMASK, r3
}
 8004f82:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d12f      	bne.n	8004ff8 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8004fa2:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fa4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa6:	633b      	str	r3, [r7, #48]	; 0x30
 8004fa8:	2301      	movs	r3, #1
 8004faa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f383 8810 	msr	PRIMASK, r3
}
 8004fb2:	46c0      	nop			; (mov r8, r8)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2110      	movs	r1, #16
 8004fc0:	438a      	bics	r2, r1
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f383 8810 	msr	PRIMASK, r3
}
 8004fce:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	2210      	movs	r2, #16
 8004fd8:	4013      	ands	r3, r2
 8004fda:	2b10      	cmp	r3, #16
 8004fdc:	d103      	bne.n	8004fe6 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2210      	movs	r2, #16
 8004fe4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2258      	movs	r2, #88	; 0x58
 8004fea:	5a9a      	ldrh	r2, [r3, r2]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	0011      	movs	r1, r2
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	f7ff fae9 	bl	80045c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ff6:	e00c      	b.n	8005012 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	f7fd fa92 	bl	8002524 <HAL_UART_RxCpltCallback>
}
 8005000:	e007      	b.n	8005012 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699a      	ldr	r2, [r3, #24]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2108      	movs	r1, #8
 800500e:	430a      	orrs	r2, r1
 8005010:	619a      	str	r2, [r3, #24]
}
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	46bd      	mov	sp, r7
 8005016:	b010      	add	sp, #64	; 0x40
 8005018:	bd80      	pop	{r7, pc}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	fffffedf 	.word	0xfffffedf

08005020 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b090      	sub	sp, #64	; 0x40
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005028:	203e      	movs	r0, #62	; 0x3e
 800502a:	183b      	adds	r3, r7, r0
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	215c      	movs	r1, #92	; 0x5c
 8005030:	5a52      	ldrh	r2, [r2, r1]
 8005032:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005038:	2b22      	cmp	r3, #34	; 0x22
 800503a:	d000      	beq.n	800503e <UART_RxISR_16BIT+0x1e>
 800503c:	e095      	b.n	800516a <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	213c      	movs	r1, #60	; 0x3c
 8005044:	187b      	adds	r3, r7, r1
 8005046:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005048:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005050:	187b      	adds	r3, r7, r1
 8005052:	183a      	adds	r2, r7, r0
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	8812      	ldrh	r2, [r2, #0]
 8005058:	4013      	ands	r3, r2
 800505a:	b29a      	uxth	r2, r3
 800505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005064:	1c9a      	adds	r2, r3, #2
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	225a      	movs	r2, #90	; 0x5a
 800506e:	5a9b      	ldrh	r3, [r3, r2]
 8005070:	b29b      	uxth	r3, r3
 8005072:	3b01      	subs	r3, #1
 8005074:	b299      	uxth	r1, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	225a      	movs	r2, #90	; 0x5a
 800507a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	225a      	movs	r2, #90	; 0x5a
 8005080:	5a9b      	ldrh	r3, [r3, r2]
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d178      	bne.n	800517a <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005088:	f3ef 8310 	mrs	r3, PRIMASK
 800508c:	617b      	str	r3, [r7, #20]
  return(result);
 800508e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005090:	637b      	str	r3, [r7, #52]	; 0x34
 8005092:	2301      	movs	r3, #1
 8005094:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	f383 8810 	msr	PRIMASK, r3
}
 800509c:	46c0      	nop			; (mov r8, r8)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4936      	ldr	r1, [pc, #216]	; (8005184 <UART_RxISR_16BIT+0x164>)
 80050aa:	400a      	ands	r2, r1
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	f383 8810 	msr	PRIMASK, r3
}
 80050b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ba:	f3ef 8310 	mrs	r3, PRIMASK
 80050be:	623b      	str	r3, [r7, #32]
  return(result);
 80050c0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c2:	633b      	str	r3, [r7, #48]	; 0x30
 80050c4:	2301      	movs	r3, #1
 80050c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	f383 8810 	msr	PRIMASK, r3
}
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2101      	movs	r1, #1
 80050dc:	438a      	bics	r2, r1
 80050de:	609a      	str	r2, [r3, #8]
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e6:	f383 8810 	msr	PRIMASK, r3
}
 80050ea:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d12f      	bne.n	8005160 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005106:	f3ef 8310 	mrs	r3, PRIMASK
 800510a:	60bb      	str	r3, [r7, #8]
  return(result);
 800510c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800510e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005110:	2301      	movs	r3, #1
 8005112:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f383 8810 	msr	PRIMASK, r3
}
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2110      	movs	r1, #16
 8005128:	438a      	bics	r2, r1
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f383 8810 	msr	PRIMASK, r3
}
 8005136:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	2210      	movs	r2, #16
 8005140:	4013      	ands	r3, r2
 8005142:	2b10      	cmp	r3, #16
 8005144:	d103      	bne.n	800514e <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2210      	movs	r2, #16
 800514c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2258      	movs	r2, #88	; 0x58
 8005152:	5a9a      	ldrh	r2, [r3, r2]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	0011      	movs	r1, r2
 8005158:	0018      	movs	r0, r3
 800515a:	f7ff fa35 	bl	80045c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800515e:	e00c      	b.n	800517a <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	0018      	movs	r0, r3
 8005164:	f7fd f9de 	bl	8002524 <HAL_UART_RxCpltCallback>
}
 8005168:	e007      	b.n	800517a <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699a      	ldr	r2, [r3, #24]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2108      	movs	r1, #8
 8005176:	430a      	orrs	r2, r1
 8005178:	619a      	str	r2, [r3, #24]
}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	46bd      	mov	sp, r7
 800517e:	b010      	add	sp, #64	; 0x40
 8005180:	bd80      	pop	{r7, pc}
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	fffffedf 	.word	0xfffffedf

08005188 <__NVIC_EnableIRQ>:
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	0002      	movs	r2, r0
 8005190:	1dfb      	adds	r3, r7, #7
 8005192:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005194:	1dfb      	adds	r3, r7, #7
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b7f      	cmp	r3, #127	; 0x7f
 800519a:	d809      	bhi.n	80051b0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800519c:	1dfb      	adds	r3, r7, #7
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	001a      	movs	r2, r3
 80051a2:	231f      	movs	r3, #31
 80051a4:	401a      	ands	r2, r3
 80051a6:	4b04      	ldr	r3, [pc, #16]	; (80051b8 <__NVIC_EnableIRQ+0x30>)
 80051a8:	2101      	movs	r1, #1
 80051aa:	4091      	lsls	r1, r2
 80051ac:	000a      	movs	r2, r1
 80051ae:	601a      	str	r2, [r3, #0]
}
 80051b0:	46c0      	nop			; (mov r8, r8)
 80051b2:	46bd      	mov	sp, r7
 80051b4:	b002      	add	sp, #8
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	e000e100 	.word	0xe000e100

080051bc <map>:
uint32_t AF[8] = { (0x00), (0x01), (0x02), (0x03), (0x04), (0x05), (0x06),
		(0x07) };

uint16_t ticks = 0;

uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 80051bc:	b5b0      	push	{r4, r5, r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	0005      	movs	r5, r0
 80051c4:	000c      	movs	r4, r1
 80051c6:	0010      	movs	r0, r2
 80051c8:	0019      	movs	r1, r3
 80051ca:	1dbb      	adds	r3, r7, #6
 80051cc:	1c2a      	adds	r2, r5, #0
 80051ce:	801a      	strh	r2, [r3, #0]
 80051d0:	1d3b      	adds	r3, r7, #4
 80051d2:	1c22      	adds	r2, r4, #0
 80051d4:	801a      	strh	r2, [r3, #0]
 80051d6:	1cbb      	adds	r3, r7, #2
 80051d8:	1c02      	adds	r2, r0, #0
 80051da:	801a      	strh	r2, [r3, #0]
 80051dc:	003b      	movs	r3, r7
 80051de:	1c0a      	adds	r2, r1, #0
 80051e0:	801a      	strh	r2, [r3, #0]
  return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
 80051e2:	1dbb      	adds	r3, r7, #6
 80051e4:	881a      	ldrh	r2, [r3, #0]
 80051e6:	1d3b      	adds	r3, r7, #4
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	1ad2      	subs	r2, r2, r3
 80051ec:	2318      	movs	r3, #24
 80051ee:	18fb      	adds	r3, r7, r3
 80051f0:	8819      	ldrh	r1, [r3, #0]
 80051f2:	003b      	movs	r3, r7
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	1acb      	subs	r3, r1, r3
 80051f8:	4353      	muls	r3, r2
 80051fa:	0018      	movs	r0, r3
 80051fc:	1cbb      	adds	r3, r7, #2
 80051fe:	881a      	ldrh	r2, [r3, #0]
 8005200:	1d3b      	adds	r3, r7, #4
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	1ad2      	subs	r2, r2, r3
 8005206:	003b      	movs	r3, r7
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	18d3      	adds	r3, r2, r3
 800520c:	0019      	movs	r1, r3
 800520e:	f7fb f821 	bl	8000254 <__divsi3>
 8005212:	0003      	movs	r3, r0
 8005214:	b29b      	uxth	r3, r3
}
 8005216:	0018      	movs	r0, r3
 8005218:	46bd      	mov	sp, r7
 800521a:	b002      	add	sp, #8
 800521c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005220 <gpio_clk_en>:

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	2390      	movs	r3, #144	; 0x90
 800522c:	05db      	lsls	r3, r3, #23
 800522e:	429a      	cmp	r2, r3
 8005230:	d107      	bne.n	8005242 <gpio_clk_en+0x22>
		GPIOA_CLK_EN;
 8005232:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <gpio_clk_en+0x80>)
 8005234:	695a      	ldr	r2, [r3, #20]
 8005236:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <gpio_clk_en+0x80>)
 8005238:	2180      	movs	r1, #128	; 0x80
 800523a:	0289      	lsls	r1, r1, #10
 800523c:	430a      	orrs	r2, r1
 800523e:	615a      	str	r2, [r3, #20]
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOF_CLK_EN;
	}
}
 8005240:	e02a      	b.n	8005298 <gpio_clk_en+0x78>
	} else if (port == GPIOB) {
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a17      	ldr	r2, [pc, #92]	; (80052a4 <gpio_clk_en+0x84>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d107      	bne.n	800525a <gpio_clk_en+0x3a>
		GPIOB_CLK_EN;
 800524a:	4b15      	ldr	r3, [pc, #84]	; (80052a0 <gpio_clk_en+0x80>)
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	4b14      	ldr	r3, [pc, #80]	; (80052a0 <gpio_clk_en+0x80>)
 8005250:	2180      	movs	r1, #128	; 0x80
 8005252:	02c9      	lsls	r1, r1, #11
 8005254:	430a      	orrs	r2, r1
 8005256:	615a      	str	r2, [r3, #20]
}
 8005258:	e01e      	b.n	8005298 <gpio_clk_en+0x78>
	} else if (port == GPIOC) {
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a12      	ldr	r2, [pc, #72]	; (80052a8 <gpio_clk_en+0x88>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d107      	bne.n	8005272 <gpio_clk_en+0x52>
		GPIOC_CLK_EN;
 8005262:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <gpio_clk_en+0x80>)
 8005264:	695a      	ldr	r2, [r3, #20]
 8005266:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <gpio_clk_en+0x80>)
 8005268:	2180      	movs	r1, #128	; 0x80
 800526a:	0309      	lsls	r1, r1, #12
 800526c:	430a      	orrs	r2, r1
 800526e:	615a      	str	r2, [r3, #20]
}
 8005270:	e012      	b.n	8005298 <gpio_clk_en+0x78>
	} else if (port == GPIOD) {
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a0d      	ldr	r2, [pc, #52]	; (80052ac <gpio_clk_en+0x8c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d107      	bne.n	800528a <gpio_clk_en+0x6a>
		GPIOD_CLK_EN;
 800527a:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <gpio_clk_en+0x80>)
 800527c:	695a      	ldr	r2, [r3, #20]
 800527e:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <gpio_clk_en+0x80>)
 8005280:	2180      	movs	r1, #128	; 0x80
 8005282:	0349      	lsls	r1, r1, #13
 8005284:	430a      	orrs	r2, r1
 8005286:	615a      	str	r2, [r3, #20]
}
 8005288:	e006      	b.n	8005298 <gpio_clk_en+0x78>
		GPIOF_CLK_EN;
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <gpio_clk_en+0x80>)
 800528c:	695a      	ldr	r2, [r3, #20]
 800528e:	4b04      	ldr	r3, [pc, #16]	; (80052a0 <gpio_clk_en+0x80>)
 8005290:	2180      	movs	r1, #128	; 0x80
 8005292:	03c9      	lsls	r1, r1, #15
 8005294:	430a      	orrs	r2, r1
 8005296:	615a      	str	r2, [r3, #20]
}
 8005298:	46c0      	nop			; (mov r8, r8)
 800529a:	46bd      	mov	sp, r7
 800529c:	b002      	add	sp, #8
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40021000 	.word	0x40021000
 80052a4:	48000400 	.word	0x48000400
 80052a8:	48000800 	.word	0x48000800
 80052ac:	48000c00 	.word	0x48000c00

080052b0 <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d11c      	bne.n	80052fe <gpio_config+0x4e>
		gpio_clk_en(port);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	0018      	movs	r0, r3
 80052c8:	f7ff ffaa 	bl	8005220 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	0018      	movs	r0, r3
 80052d4:	f000 f856 	bl	8005384 <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	0018      	movs	r0, r3
 80052e0:	f000 f868 	bl	80053b4 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	68b9      	ldr	r1, [r7, #8]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	0018      	movs	r0, r3
 80052ec:	f000 f87a 	bl	80053e4 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	0018      	movs	r0, r3
 80052f8:	f000 f88c 	bl	8005414 <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
		adc_chsel(pinNumber);
	}
}
 80052fc:	e03e      	b.n	800537c <gpio_config+0xcc>
	} else if (pinMode == INPUT_MODE) {
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d110      	bne.n	8005326 <gpio_config+0x76>
		gpio_clk_en(port);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	0018      	movs	r0, r3
 8005308:	f7ff ff8a 	bl	8005220 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	0018      	movs	r0, r3
 8005314:	f000 f836 	bl	8005384 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	68b9      	ldr	r1, [r7, #8]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	0018      	movs	r0, r3
 8005320:	f000 f860 	bl	80053e4 <gpio_PUPD>
}
 8005324:	e02a      	b.n	800537c <gpio_config+0xcc>
	} else if (pinMode == ALT_MODE) {
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d116      	bne.n	800535a <gpio_config+0xaa>
		gpio_clk_en(port);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	0018      	movs	r0, r3
 8005330:	f7ff ff76 	bl	8005220 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	68b9      	ldr	r1, [r7, #8]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	0018      	movs	r0, r3
 800533c:	f000 f822 	bl	8005384 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	68b9      	ldr	r1, [r7, #8]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	0018      	movs	r0, r3
 8005348:	f000 f84c 	bl	80053e4 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	0018      	movs	r0, r3
 8005354:	f000 f85e 	bl	8005414 <gpio_PHPL_OD>
}
 8005358:	e010      	b.n	800537c <gpio_config+0xcc>
	} else if (pinMode == ANALOG_MODE) {
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b03      	cmp	r3, #3
 800535e:	d10d      	bne.n	800537c <gpio_config+0xcc>
		gpio_clk_en(port);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	0018      	movs	r0, r3
 8005364:	f7ff ff5c 	bl	8005220 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	0018      	movs	r0, r3
 8005370:	f000 f808 	bl	8005384 <gpio_moder>
		adc_chsel(pinNumber);
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	0018      	movs	r0, r3
 8005378:	f000 fb5c 	bl	8005a34 <adc_chsel>
}
 800537c:	46c0      	nop			; (mov r8, r8)
 800537e:	46bd      	mov	sp, r7
 8005380:	b004      	add	sp, #16
 8005382:	bd80      	pop	{r7, pc}

08005384 <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));// IN/OP/Alternate/ANALOG
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <gpio_moder+0x2c>)
 8005396:	68b9      	ldr	r1, [r7, #8]
 8005398:	0089      	lsls	r1, r1, #2
 800539a:	58cb      	ldr	r3, [r1, r3]
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4099      	lsls	r1, r3
 80053a0:	000b      	movs	r3, r1
 80053a2:	431a      	orrs	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	601a      	str	r2, [r3, #0]
}
 80053a8:	46c0      	nop			; (mov r8, r8)
 80053aa:	46bd      	mov	sp, r7
 80053ac:	b004      	add	sp, #16
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	2000000c 	.word	0x2000000c

080053b4 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <gpio_speed+0x2c>)
 80053c6:	68b9      	ldr	r1, [r7, #8]
 80053c8:	0089      	lsls	r1, r1, #2
 80053ca:	58cb      	ldr	r3, [r1, r3]
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	4099      	lsls	r1, r3
 80053d0:	000b      	movs	r3, r1
 80053d2:	431a      	orrs	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	609a      	str	r2, [r3, #8]
}
 80053d8:	46c0      	nop			; (mov r8, r8)
 80053da:	46bd      	mov	sp, r7
 80053dc:	b004      	add	sp, #16
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	2000000c 	.word	0x2000000c

080053e4 <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	4b06      	ldr	r3, [pc, #24]	; (8005410 <gpio_PUPD+0x2c>)
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	0089      	lsls	r1, r1, #2
 80053fa:	58cb      	ldr	r3, [r1, r3]
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	4099      	lsls	r1, r3
 8005400:	000b      	movs	r3, r1
 8005402:	431a      	orrs	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	60da      	str	r2, [r3, #12]
}
 8005408:	46c0      	nop			; (mov r8, r8)
 800540a:	46bd      	mov	sp, r7
 800540c:	b004      	add	sp, #16
 800540e:	bd80      	pop	{r7, pc}
 8005410:	2000000c 	.word	0x2000000c

08005414 <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	4099      	lsls	r1, r3
 800542a:	000b      	movs	r3, r1
 800542c:	431a      	orrs	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	605a      	str	r2, [r3, #4]
}
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	46bd      	mov	sp, r7
 8005436:	b004      	add	sp, #16
 8005438:	bd80      	pop	{r7, pc}

0800543a <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2b07      	cmp	r3, #7
 800544a:	d80a      	bhi.n	8005462 <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a1a      	ldr	r2, [r3, #32]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	4099      	lsls	r1, r3
 8005458:	000b      	movs	r3, r1
 800545a:	431a      	orrs	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 8005460:	e00a      	b.n	8005478 <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	3b08      	subs	r3, #8
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	4099      	lsls	r1, r3
 8005470:	000b      	movs	r3, r1
 8005472:	431a      	orrs	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005478:	46c0      	nop			; (mov r8, r8)
 800547a:	46bd      	mov	sp, r7
 800547c:	b004      	add	sp, #16
 800547e:	bd80      	pop	{r7, pc}

08005480 <gpio_write>:

/************************************************************************************/

/************************GPIO OPERATION FUNCTION*************************************/
void gpio_write(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t state) {
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	1dfb      	adds	r3, r7, #7
 800548c:	701a      	strb	r2, [r3, #0]
	if (state) {
 800548e:	1dfb      	adds	r3, r7, #7
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <gpio_write+0x26>
		port->BSRR = (1 << pinNumber);
 8005496:	2201      	movs	r2, #1
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	409a      	lsls	r2, r3
 800549c:	0013      	movs	r3, r2
 800549e:	001a      	movs	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	619a      	str	r2, [r3, #24]
	} else {
		port->BSRR = (1 << (pinNumber + 16));
	}
}
 80054a4:	e007      	b.n	80054b6 <gpio_write+0x36>
		port->BSRR = (1 << (pinNumber + 16));
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	3310      	adds	r3, #16
 80054aa:	2201      	movs	r2, #1
 80054ac:	409a      	lsls	r2, r3
 80054ae:	0013      	movs	r3, r2
 80054b0:	001a      	movs	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	619a      	str	r2, [r3, #24]
}
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	46bd      	mov	sp, r7
 80054ba:	b004      	add	sp, #16
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <print>:

//*******************************************************************************************//

//************************** UART SERIAL PRINTING *******************************************//

void print(const char *fmt, ...) {
 80054c0:	b40f      	push	{r0, r1, r2, r3}
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 80054c8:	231c      	movs	r3, #28
 80054ca:	18fb      	adds	r3, r7, r3
 80054cc:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	2180      	movs	r1, #128	; 0x80
 80054d4:	0049      	lsls	r1, r1, #1
 80054d6:	4818      	ldr	r0, [pc, #96]	; (8005538 <print+0x78>)
 80054d8:	f003 f8f0 	bl	80086bc <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 80054dc:	4b16      	ldr	r3, [pc, #88]	; (8005538 <print+0x78>)
 80054de:	0018      	movs	r0, r3
 80054e0:	f7fa fe12 	bl	8000108 <strlen>
 80054e4:	0003      	movs	r3, r0
 80054e6:	60bb      	str	r3, [r7, #8]
	for (uint8_t i = 0; i < len; i++) {
 80054e8:	230f      	movs	r3, #15
 80054ea:	18fb      	adds	r3, r7, r3
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]
 80054f0:	e013      	b.n	800551a <print+0x5a>
		USART2->TDR = buffer[i];
 80054f2:	230f      	movs	r3, #15
 80054f4:	18fb      	adds	r3, r7, r3
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	4a0f      	ldr	r2, [pc, #60]	; (8005538 <print+0x78>)
 80054fa:	5cd2      	ldrb	r2, [r2, r3]
 80054fc:	4b0f      	ldr	r3, [pc, #60]	; (800553c <print+0x7c>)
 80054fe:	b292      	uxth	r2, r2
 8005500:	851a      	strh	r2, [r3, #40]	; 0x28
		while (!(USART2->ISR & USART_ISR_TXE))
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	4b0d      	ldr	r3, [pc, #52]	; (800553c <print+0x7c>)
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	2280      	movs	r2, #128	; 0x80
 800550a:	4013      	ands	r3, r2
 800550c:	d0fa      	beq.n	8005504 <print+0x44>
	for (uint8_t i = 0; i < len; i++) {
 800550e:	210f      	movs	r1, #15
 8005510:	187b      	adds	r3, r7, r1
 8005512:	781a      	ldrb	r2, [r3, #0]
 8005514:	187b      	adds	r3, r7, r1
 8005516:	3201      	adds	r2, #1
 8005518:	701a      	strb	r2, [r3, #0]
 800551a:	230f      	movs	r3, #15
 800551c:	18fb      	adds	r3, r7, r3
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	429a      	cmp	r2, r3
 8005524:	dce5      	bgt.n	80054f2 <print+0x32>
			;
	}

}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	46c0      	nop			; (mov r8, r8)
 800552a:	46bd      	mov	sp, r7
 800552c:	b004      	add	sp, #16
 800552e:	bc80      	pop	{r7}
 8005530:	bc08      	pop	{r3}
 8005532:	b004      	add	sp, #16
 8005534:	4718      	bx	r3
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	20000250 	.word	0x20000250
 800553c:	40004400 	.word	0x40004400

08005540 <uart_print_config>:

void uart_print_config(uint32_t baudRate, uint8_t clkSpeed) {
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af02      	add	r7, sp, #8
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	000a      	movs	r2, r1
 800554a:	1cfb      	adds	r3, r7, #3
 800554c:	701a      	strb	r2, [r3, #0]

	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 800554e:	4b30      	ldr	r3, [pc, #192]	; (8005610 <uart_print_config+0xd0>)
 8005550:	69da      	ldr	r2, [r3, #28]
 8005552:	4b2f      	ldr	r3, [pc, #188]	; (8005610 <uart_print_config+0xd0>)
 8005554:	2180      	movs	r1, #128	; 0x80
 8005556:	0289      	lsls	r1, r1, #10
 8005558:	430a      	orrs	r2, r1
 800555a:	61da      	str	r2, [r3, #28]
	gpio_config(GPIOA, 2, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800555c:	2390      	movs	r3, #144	; 0x90
 800555e:	05d8      	lsls	r0, r3, #23
 8005560:	2300      	movs	r3, #0
 8005562:	9301      	str	r3, [sp, #4]
 8005564:	2300      	movs	r3, #0
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	2302      	movs	r3, #2
 800556a:	2202      	movs	r2, #2
 800556c:	2102      	movs	r1, #2
 800556e:	f7ff fe9f 	bl	80052b0 <gpio_config>
	gpio_config(GPIOA, 3, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8005572:	2390      	movs	r3, #144	; 0x90
 8005574:	05d8      	lsls	r0, r3, #23
 8005576:	2300      	movs	r3, #0
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	2300      	movs	r3, #0
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	2302      	movs	r3, #2
 8005580:	2202      	movs	r2, #2
 8005582:	2103      	movs	r1, #3
 8005584:	f7ff fe94 	bl	80052b0 <gpio_config>

	gpio_altfn(GPIOA, 2, USART2_TX_PA2);
 8005588:	2390      	movs	r3, #144	; 0x90
 800558a:	05db      	lsls	r3, r3, #23
 800558c:	2201      	movs	r2, #1
 800558e:	2102      	movs	r1, #2
 8005590:	0018      	movs	r0, r3
 8005592:	f7ff ff52 	bl	800543a <gpio_altfn>
	gpio_altfn(GPIOA, 3, USART2_RX_PA3);
 8005596:	2390      	movs	r3, #144	; 0x90
 8005598:	05db      	lsls	r3, r3, #23
 800559a:	2201      	movs	r2, #1
 800559c:	2103      	movs	r1, #3
 800559e:	0018      	movs	r0, r3
 80055a0:	f7ff ff4b 	bl	800543a <gpio_altfn>

//clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388

	if (clkSpeed == 8) {
 80055a4:	1cfb      	adds	r3, r7, #3
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b08      	cmp	r3, #8
 80055aa:	d108      	bne.n	80055be <uart_print_config+0x7e>
		if (baudRate == 9600)
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	2396      	movs	r3, #150	; 0x96
 80055b0:	019b      	lsls	r3, r3, #6
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d121      	bne.n	80055fa <uart_print_config+0xba>
			USART2->BRR = 0x341;
 80055b6:	4b17      	ldr	r3, [pc, #92]	; (8005614 <uart_print_config+0xd4>)
 80055b8:	4a17      	ldr	r2, [pc, #92]	; (8005618 <uart_print_config+0xd8>)
 80055ba:	60da      	str	r2, [r3, #12]
 80055bc:	e01d      	b.n	80055fa <uart_print_config+0xba>

	} else if (clkSpeed == 48) {
 80055be:	1cfb      	adds	r3, r7, #3
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b30      	cmp	r3, #48	; 0x30
 80055c4:	d119      	bne.n	80055fa <uart_print_config+0xba>
		if (baudRate == 4800)
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	2396      	movs	r3, #150	; 0x96
 80055ca:	015b      	lsls	r3, r3, #5
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d103      	bne.n	80055d8 <uart_print_config+0x98>
			USART2->BRR = 0x271;
 80055d0:	4b10      	ldr	r3, [pc, #64]	; (8005614 <uart_print_config+0xd4>)
 80055d2:	4a12      	ldr	r2, [pc, #72]	; (800561c <uart_print_config+0xdc>)
 80055d4:	60da      	str	r2, [r3, #12]
 80055d6:	e010      	b.n	80055fa <uart_print_config+0xba>
		else if (baudRate == 9600)
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	2396      	movs	r3, #150	; 0x96
 80055dc:	019b      	lsls	r3, r3, #6
 80055de:	429a      	cmp	r2, r3
 80055e0:	d103      	bne.n	80055ea <uart_print_config+0xaa>
			USART2->BRR = 0x1388;
 80055e2:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <uart_print_config+0xd4>)
 80055e4:	4a0e      	ldr	r2, [pc, #56]	; (8005620 <uart_print_config+0xe0>)
 80055e6:	60da      	str	r2, [r3, #12]
 80055e8:	e007      	b.n	80055fa <uart_print_config+0xba>
		else if (baudRate == 19200)
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	2396      	movs	r3, #150	; 0x96
 80055ee:	01db      	lsls	r3, r3, #7
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d102      	bne.n	80055fa <uart_print_config+0xba>
			USART2->BRR = 0x9c4;
 80055f4:	4b07      	ldr	r3, [pc, #28]	; (8005614 <uart_print_config+0xd4>)
 80055f6:	4a0b      	ldr	r2, [pc, #44]	; (8005624 <uart_print_config+0xe4>)
 80055f8:	60da      	str	r2, [r3, #12]
	}

	USART2->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 80055fa:	4b06      	ldr	r3, [pc, #24]	; (8005614 <uart_print_config+0xd4>)
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b05      	ldr	r3, [pc, #20]	; (8005614 <uart_print_config+0xd4>)
 8005600:	210d      	movs	r1, #13
 8005602:	430a      	orrs	r2, r1
 8005604:	601a      	str	r2, [r3, #0]
}
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	46bd      	mov	sp, r7
 800560a:	b002      	add	sp, #8
 800560c:	bd80      	pop	{r7, pc}
 800560e:	46c0      	nop			; (mov r8, r8)
 8005610:	40021000 	.word	0x40021000
 8005614:	40004400 	.word	0x40004400
 8005618:	00000341 	.word	0x00000341
 800561c:	00000271 	.word	0x00000271
 8005620:	00001388 	.word	0x00001388
 8005624:	000009c4 	.word	0x000009c4

08005628 <timer_config>:

//************************** TIMER FUNCTIONS ************************************************//

//************************** Basic TIMER FUNCTIONS *******************************//
void timer_config(TIM_TypeDef *tim, uint16_t prescaler_val,
		uint16_t auto_reload_val) {
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	0008      	movs	r0, r1
 8005632:	0011      	movs	r1, r2
 8005634:	1cbb      	adds	r3, r7, #2
 8005636:	1c02      	adds	r2, r0, #0
 8005638:	801a      	strh	r2, [r3, #0]
 800563a:	003b      	movs	r3, r7
 800563c:	1c0a      	adds	r2, r1, #0
 800563e:	801a      	strh	r2, [r3, #0]

	if (tim == TIM1) {						// ENable clock for particular timer
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a33      	ldr	r2, [pc, #204]	; (8005710 <timer_config+0xe8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d107      	bne.n	8005658 <timer_config+0x30>
		RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8005648:	4b32      	ldr	r3, [pc, #200]	; (8005714 <timer_config+0xec>)
 800564a:	699a      	ldr	r2, [r3, #24]
 800564c:	4b31      	ldr	r3, [pc, #196]	; (8005714 <timer_config+0xec>)
 800564e:	2180      	movs	r1, #128	; 0x80
 8005650:	0109      	lsls	r1, r1, #4
 8005652:	430a      	orrs	r2, r1
 8005654:	619a      	str	r2, [r3, #24]
 8005656:	e04f      	b.n	80056f8 <timer_config+0xd0>
	} else if (tim == TIM3) {
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a2f      	ldr	r2, [pc, #188]	; (8005718 <timer_config+0xf0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d106      	bne.n	800566e <timer_config+0x46>
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8005660:	4b2c      	ldr	r3, [pc, #176]	; (8005714 <timer_config+0xec>)
 8005662:	69da      	ldr	r2, [r3, #28]
 8005664:	4b2b      	ldr	r3, [pc, #172]	; (8005714 <timer_config+0xec>)
 8005666:	2102      	movs	r1, #2
 8005668:	430a      	orrs	r2, r1
 800566a:	61da      	str	r2, [r3, #28]
 800566c:	e044      	b.n	80056f8 <timer_config+0xd0>
	} else if (tim == TIM6) {
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a2a      	ldr	r2, [pc, #168]	; (800571c <timer_config+0xf4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d106      	bne.n	8005684 <timer_config+0x5c>
		RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8005676:	4b27      	ldr	r3, [pc, #156]	; (8005714 <timer_config+0xec>)
 8005678:	69da      	ldr	r2, [r3, #28]
 800567a:	4b26      	ldr	r3, [pc, #152]	; (8005714 <timer_config+0xec>)
 800567c:	2110      	movs	r1, #16
 800567e:	430a      	orrs	r2, r1
 8005680:	61da      	str	r2, [r3, #28]
 8005682:	e039      	b.n	80056f8 <timer_config+0xd0>
	} else if (tim == TIM7) {
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a26      	ldr	r2, [pc, #152]	; (8005720 <timer_config+0xf8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d106      	bne.n	800569a <timer_config+0x72>
		RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 800568c:	4b21      	ldr	r3, [pc, #132]	; (8005714 <timer_config+0xec>)
 800568e:	69da      	ldr	r2, [r3, #28]
 8005690:	4b20      	ldr	r3, [pc, #128]	; (8005714 <timer_config+0xec>)
 8005692:	2120      	movs	r1, #32
 8005694:	430a      	orrs	r2, r1
 8005696:	61da      	str	r2, [r3, #28]
 8005698:	e02e      	b.n	80056f8 <timer_config+0xd0>
	} else if (tim == TIM14) {
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a21      	ldr	r2, [pc, #132]	; (8005724 <timer_config+0xfc>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d107      	bne.n	80056b2 <timer_config+0x8a>
		RCC->APB1ENR |= RCC_APB1ENR_TIM14EN;
 80056a2:	4b1c      	ldr	r3, [pc, #112]	; (8005714 <timer_config+0xec>)
 80056a4:	69da      	ldr	r2, [r3, #28]
 80056a6:	4b1b      	ldr	r3, [pc, #108]	; (8005714 <timer_config+0xec>)
 80056a8:	2180      	movs	r1, #128	; 0x80
 80056aa:	0049      	lsls	r1, r1, #1
 80056ac:	430a      	orrs	r2, r1
 80056ae:	61da      	str	r2, [r3, #28]
 80056b0:	e022      	b.n	80056f8 <timer_config+0xd0>
	} else if (tim == TIM15) {
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a1c      	ldr	r2, [pc, #112]	; (8005728 <timer_config+0x100>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d107      	bne.n	80056ca <timer_config+0xa2>
		RCC->APB2ENR |= RCC_APB2ENR_TIM15EN;
 80056ba:	4b16      	ldr	r3, [pc, #88]	; (8005714 <timer_config+0xec>)
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	4b15      	ldr	r3, [pc, #84]	; (8005714 <timer_config+0xec>)
 80056c0:	2180      	movs	r1, #128	; 0x80
 80056c2:	0249      	lsls	r1, r1, #9
 80056c4:	430a      	orrs	r2, r1
 80056c6:	619a      	str	r2, [r3, #24]
 80056c8:	e016      	b.n	80056f8 <timer_config+0xd0>
	} else if (tim == TIM16) {
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a17      	ldr	r2, [pc, #92]	; (800572c <timer_config+0x104>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d107      	bne.n	80056e2 <timer_config+0xba>
		RCC->APB2ENR |= RCC_APB2ENR_TIM16EN;
 80056d2:	4b10      	ldr	r3, [pc, #64]	; (8005714 <timer_config+0xec>)
 80056d4:	699a      	ldr	r2, [r3, #24]
 80056d6:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <timer_config+0xec>)
 80056d8:	2180      	movs	r1, #128	; 0x80
 80056da:	0289      	lsls	r1, r1, #10
 80056dc:	430a      	orrs	r2, r1
 80056de:	619a      	str	r2, [r3, #24]
 80056e0:	e00a      	b.n	80056f8 <timer_config+0xd0>
	} else if (tim == TIM17) {
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a12      	ldr	r2, [pc, #72]	; (8005730 <timer_config+0x108>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d106      	bne.n	80056f8 <timer_config+0xd0>
		RCC->APB2ENR |= RCC_APB2ENR_TIM17EN;
 80056ea:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <timer_config+0xec>)
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	4b09      	ldr	r3, [pc, #36]	; (8005714 <timer_config+0xec>)
 80056f0:	2180      	movs	r1, #128	; 0x80
 80056f2:	02c9      	lsls	r1, r1, #11
 80056f4:	430a      	orrs	r2, r1
 80056f6:	619a      	str	r2, [r3, #24]
	}

	// Peripheral clock/Desired clk = PSC x ARR = Value

	tim->ARR = auto_reload_val;	// fill auto-reload register with value: auto_reload_val
 80056f8:	003b      	movs	r3, r7
 80056fa:	881a      	ldrh	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	62da      	str	r2, [r3, #44]	; 0x2c
	tim->PSC = prescaler_val;// fill prescale value register with value: prescaler_val
 8005700:	1cbb      	adds	r3, r7, #2
 8005702:	881a      	ldrh	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	629a      	str	r2, [r3, #40]	; 0x28

}
 8005708:	46c0      	nop			; (mov r8, r8)
 800570a:	46bd      	mov	sp, r7
 800570c:	b002      	add	sp, #8
 800570e:	bd80      	pop	{r7, pc}
 8005710:	40012c00 	.word	0x40012c00
 8005714:	40021000 	.word	0x40021000
 8005718:	40000400 	.word	0x40000400
 800571c:	40001000 	.word	0x40001000
 8005720:	40001400 	.word	0x40001400
 8005724:	40002000 	.word	0x40002000
 8005728:	40014000 	.word	0x40014000
 800572c:	40014400 	.word	0x40014400
 8005730:	40014800 	.word	0x40014800

08005734 <timer_EN>:

void timer_EN(TIM_TypeDef *tim) {
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
	tim->CR1 |= TIM_CR1_CEN;		// Enable counter to count the value
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2201      	movs	r2, #1
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	601a      	str	r2, [r3, #0]
}
 8005748:	46c0      	nop			; (mov r8, r8)
 800574a:	46bd      	mov	sp, r7
 800574c:	b002      	add	sp, #8
 800574e:	bd80      	pop	{r7, pc}

08005750 <timer_DI>:

void timer_DI(TIM_TypeDef *tim) {
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
	tim->CR1 &= ~TIM_CR1_CEN;		// Disable counter to count the value
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2201      	movs	r2, #1
 800575e:	4393      	bics	r3, r2
 8005760:	001a      	movs	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	601a      	str	r2, [r3, #0]
}
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	46bd      	mov	sp, r7
 800576a:	b002      	add	sp, #8
 800576c:	bd80      	pop	{r7, pc}

0800576e <timer_IT_EN>:
uint16_t timer_cnt_val(TIM_TypeDef *tim) {
	uint16_t val = tim->CNT;		// counter register value
	return val;
}

void timer_IT_EN(TIM_TypeDef *tim) {
 800576e:	b580      	push	{r7, lr}
 8005770:	b082      	sub	sp, #8
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
	tim->DIER |= TIM_DIER_UIE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	60da      	str	r2, [r3, #12]
}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	46bd      	mov	sp, r7
 8005786:	b002      	add	sp, #8
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <ticks_timer>:

void ticks_timer(uint8_t clkSpeed) {			// similar to millis
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	0002      	movs	r2, r0
 8005794:	1dfb      	adds	r3, r7, #7
 8005796:	701a      	strb	r2, [r3, #0]
	if (clkSpeed == 8) {
 8005798:	1dfb      	adds	r3, r7, #7
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b08      	cmp	r3, #8
 800579e:	d106      	bne.n	80057ae <ticks_timer+0x22>
		timer_config(TIM6, 0, 7499);//Initialize timer with configuration to 1 milli second
 80057a0:	4a0f      	ldr	r2, [pc, #60]	; (80057e0 <ticks_timer+0x54>)
 80057a2:	4b10      	ldr	r3, [pc, #64]	; (80057e4 <ticks_timer+0x58>)
 80057a4:	2100      	movs	r1, #0
 80057a6:	0018      	movs	r0, r3
 80057a8:	f7ff ff3e 	bl	8005628 <timer_config>
 80057ac:	e009      	b.n	80057c2 <ticks_timer+0x36>
	} else if (clkSpeed == 48) {
 80057ae:	1dfb      	adds	r3, r7, #7
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2b30      	cmp	r3, #48	; 0x30
 80057b4:	d105      	bne.n	80057c2 <ticks_timer+0x36>
		timer_config(TIM6, 45, 999);//Initialize timer with configuration to 1 milli second
 80057b6:	4a0c      	ldr	r2, [pc, #48]	; (80057e8 <ticks_timer+0x5c>)
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <ticks_timer+0x58>)
 80057ba:	212d      	movs	r1, #45	; 0x2d
 80057bc:	0018      	movs	r0, r3
 80057be:	f7ff ff33 	bl	8005628 <timer_config>
	}
	timer_IT_EN(TIM6);
 80057c2:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <ticks_timer+0x58>)
 80057c4:	0018      	movs	r0, r3
 80057c6:	f7ff ffd2 	bl	800576e <timer_IT_EN>
	NVIC_EnableIRQ(TIM6_IRQn);
 80057ca:	2011      	movs	r0, #17
 80057cc:	f7ff fcdc 	bl	8005188 <__NVIC_EnableIRQ>
	timer_EN(TIM6);
 80057d0:	4b04      	ldr	r3, [pc, #16]	; (80057e4 <ticks_timer+0x58>)
 80057d2:	0018      	movs	r0, r3
 80057d4:	f7ff ffae 	bl	8005734 <timer_EN>
}
 80057d8:	46c0      	nop			; (mov r8, r8)
 80057da:	46bd      	mov	sp, r7
 80057dc:	b002      	add	sp, #8
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	00001d4b 	.word	0x00001d4b
 80057e4:	40001000 	.word	0x40001000
 80057e8:	000003e7 	.word	0x000003e7

080057ec <ticks_val>:
uint16_t ticks_val() {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
	return ticks;
 80057f0:	4b02      	ldr	r3, [pc, #8]	; (80057fc <ticks_val+0x10>)
 80057f2:	881b      	ldrh	r3, [r3, #0]
}
 80057f4:	0018      	movs	r0, r3
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	2000024c 	.word	0x2000024c

08005800 <ticks_reset>:
void ticks_reset() {
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
	ticks = 0;
 8005804:	4b02      	ldr	r3, [pc, #8]	; (8005810 <ticks_reset+0x10>)
 8005806:	2200      	movs	r2, #0
 8005808:	801a      	strh	r2, [r3, #0]
}
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	2000024c 	.word	0x2000024c

08005814 <TIM6_IRQHandler>:
void TIM6_IRQHandler(void) {		// Timer Interrupt helping in delay
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
	ticks++;
 8005818:	4b07      	ldr	r3, [pc, #28]	; (8005838 <TIM6_IRQHandler+0x24>)
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	3301      	adds	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	4b05      	ldr	r3, [pc, #20]	; (8005838 <TIM6_IRQHandler+0x24>)
 8005822:	801a      	strh	r2, [r3, #0]
	TIM6->SR &= ~TIM_SR_UIF;
 8005824:	4b05      	ldr	r3, [pc, #20]	; (800583c <TIM6_IRQHandler+0x28>)
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	4b04      	ldr	r3, [pc, #16]	; (800583c <TIM6_IRQHandler+0x28>)
 800582a:	2101      	movs	r1, #1
 800582c:	438a      	bics	r2, r1
 800582e:	611a      	str	r2, [r3, #16]
}
 8005830:	46c0      	nop			; (mov r8, r8)
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	46c0      	nop			; (mov r8, r8)
 8005838:	2000024c 	.word	0x2000024c
 800583c:	40001000 	.word	0x40001000

08005840 <delay_ms>:

void delay_ms(uint32_t ms) {		// blocking mode delay function
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
//	timer_config(TIM6, 0, 7499);
	timer_config(TIM6, 0, 47899);
 8005848:	4a11      	ldr	r2, [pc, #68]	; (8005890 <delay_ms+0x50>)
 800584a:	4b12      	ldr	r3, [pc, #72]	; (8005894 <delay_ms+0x54>)
 800584c:	2100      	movs	r1, #0
 800584e:	0018      	movs	r0, r3
 8005850:	f7ff feea 	bl	8005628 <timer_config>
//	timer_config(TIM6, 0, 208);
//	timer_config(TIM6, 23, 65534);
	timer_IT_EN(TIM6);
 8005854:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <delay_ms+0x54>)
 8005856:	0018      	movs	r0, r3
 8005858:	f7ff ff89 	bl	800576e <timer_IT_EN>
	NVIC_EnableIRQ(TIM6_IRQn);
 800585c:	2011      	movs	r0, #17
 800585e:	f7ff fc93 	bl	8005188 <__NVIC_EnableIRQ>

	timer_EN(TIM6);	// good for turning timer off when not in need to save power
 8005862:	4b0c      	ldr	r3, [pc, #48]	; (8005894 <delay_ms+0x54>)
 8005864:	0018      	movs	r0, r3
 8005866:	f7ff ff65 	bl	8005734 <timer_EN>
	ticks = 0;
 800586a:	4b0b      	ldr	r3, [pc, #44]	; (8005898 <delay_ms+0x58>)
 800586c:	2200      	movs	r2, #0
 800586e:	801a      	strh	r2, [r3, #0]
	while (ticks < ms)
 8005870:	46c0      	nop			; (mov r8, r8)
 8005872:	4b09      	ldr	r3, [pc, #36]	; (8005898 <delay_ms+0x58>)
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	001a      	movs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4293      	cmp	r3, r2
 800587c:	d8f9      	bhi.n	8005872 <delay_ms+0x32>
		;
	timer_DI(TIM6);
 800587e:	4b05      	ldr	r3, [pc, #20]	; (8005894 <delay_ms+0x54>)
 8005880:	0018      	movs	r0, r3
 8005882:	f7ff ff65 	bl	8005750 <timer_DI>
}
 8005886:	46c0      	nop			; (mov r8, r8)
 8005888:	46bd      	mov	sp, r7
 800588a:	b002      	add	sp, #8
 800588c:	bd80      	pop	{r7, pc}
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	0000bb1b 	.word	0x0000bb1b
 8005894:	40001000 	.word	0x40001000
 8005898:	2000024c 	.word	0x2000024c

0800589c <adc_calib>:
//************************** General Purpose TIMER FUNCTIONS ********************//

//*******************************************************************************//

//********************************| ADC FUNCTIONS |******************************//
void adc_calib() {
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
	// Calibrate ADC
	if ((ADC1->CR & ADC_CR_ADEN) != 0) /* (1) */
 80058a0:	4b13      	ldr	r3, [pc, #76]	; (80058f0 <adc_calib+0x54>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	2201      	movs	r2, #1
 80058a6:	4013      	ands	r3, r2
 80058a8:	d005      	beq.n	80058b6 <adc_calib+0x1a>
	{
		ADC1->CR |= ADC_CR_ADDIS; /* (2) */
 80058aa:	4b11      	ldr	r3, [pc, #68]	; (80058f0 <adc_calib+0x54>)
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	4b10      	ldr	r3, [pc, #64]	; (80058f0 <adc_calib+0x54>)
 80058b0:	2102      	movs	r1, #2
 80058b2:	430a      	orrs	r2, r1
 80058b4:	609a      	str	r2, [r3, #8]
	}
	while ((ADC1->CR & ADC_CR_ADEN) != 0) {
 80058b6:	46c0      	nop			; (mov r8, r8)
 80058b8:	4b0d      	ldr	r3, [pc, #52]	; (80058f0 <adc_calib+0x54>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2201      	movs	r2, #1
 80058be:	4013      	ands	r3, r2
 80058c0:	d1fa      	bne.n	80058b8 <adc_calib+0x1c>
		/* For robust implementation, add here time-out management */
	}
	ADC1->CFGR1 &= ~ADC_CFGR1_DMAEN; /* (3) */
 80058c2:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <adc_calib+0x54>)
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <adc_calib+0x54>)
 80058c8:	2101      	movs	r1, #1
 80058ca:	438a      	bics	r2, r1
 80058cc:	60da      	str	r2, [r3, #12]
	ADC1->CR |= ADC_CR_ADCAL; /* (4) */
 80058ce:	4b08      	ldr	r3, [pc, #32]	; (80058f0 <adc_calib+0x54>)
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <adc_calib+0x54>)
 80058d4:	2180      	movs	r1, #128	; 0x80
 80058d6:	0609      	lsls	r1, r1, #24
 80058d8:	430a      	orrs	r2, r1
 80058da:	609a      	str	r2, [r3, #8]
	while ((ADC1->CR & ADC_CR_ADCAL) != 0) /* (5) */
 80058dc:	46c0      	nop			; (mov r8, r8)
 80058de:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <adc_calib+0x54>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	dbfb      	blt.n	80058de <adc_calib+0x42>
	{
	}
}
 80058e6:	46c0      	nop			; (mov r8, r8)
 80058e8:	46c0      	nop			; (mov r8, r8)
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	46c0      	nop			; (mov r8, r8)
 80058f0:	40012400 	.word	0x40012400

080058f4 <adc_ready>:
void adc_ready() {
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
	// ADC ENABLE
	if ((ADC1->ISR & ADC_ISR_ADRDY) != 0) /* (1) */
 80058f8:	4b11      	ldr	r3, [pc, #68]	; (8005940 <adc_ready+0x4c>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2201      	movs	r2, #1
 80058fe:	4013      	ands	r3, r2
 8005900:	d005      	beq.n	800590e <adc_ready+0x1a>
	{
		ADC1->ISR |= ADC_ISR_ADRDY; /* (2) */
 8005902:	4b0f      	ldr	r3, [pc, #60]	; (8005940 <adc_ready+0x4c>)
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	4b0e      	ldr	r3, [pc, #56]	; (8005940 <adc_ready+0x4c>)
 8005908:	2101      	movs	r1, #1
 800590a:	430a      	orrs	r2, r1
 800590c:	601a      	str	r2, [r3, #0]
	}
	ADC1->CR |= ADC_CR_ADEN; /* (3) */
 800590e:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <adc_ready+0x4c>)
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <adc_ready+0x4c>)
 8005914:	2101      	movs	r1, #1
 8005916:	430a      	orrs	r2, r1
 8005918:	609a      	str	r2, [r3, #8]
	ticks_reset();
 800591a:	f7ff ff71 	bl	8005800 <ticks_reset>
	while (ticks_val() < 50)
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	f7ff ff64 	bl	80057ec <ticks_val>
 8005924:	0003      	movs	r3, r0
 8005926:	2b31      	cmp	r3, #49	; 0x31
 8005928:	d9fa      	bls.n	8005920 <adc_ready+0x2c>
		;
	while ((ADC1->ISR & ADC_ISR_ADRDY) == 0) /* (4) */
 800592a:	46c0      	nop			; (mov r8, r8)
 800592c:	4b04      	ldr	r3, [pc, #16]	; (8005940 <adc_ready+0x4c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2201      	movs	r2, #1
 8005932:	4013      	ands	r3, r2
 8005934:	d0fa      	beq.n	800592c <adc_ready+0x38>
	{
		/* For robust implementation, add here time-out management */
	}
}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	46c0      	nop			; (mov r8, r8)
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	40012400 	.word	0x40012400

08005944 <adc_clk_config>:
void adc_clk_config() {
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; /* (1) */
 8005948:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <adc_clk_config+0x34>)
 800594a:	699a      	ldr	r2, [r3, #24]
 800594c:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <adc_clk_config+0x34>)
 800594e:	2180      	movs	r1, #128	; 0x80
 8005950:	0089      	lsls	r1, r1, #2
 8005952:	430a      	orrs	r2, r1
 8005954:	619a      	str	r2, [r3, #24]
	RCC->CR2 |= RCC_CR2_HSI14ON; /* (2) */
 8005956:	4b08      	ldr	r3, [pc, #32]	; (8005978 <adc_clk_config+0x34>)
 8005958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800595a:	4b07      	ldr	r3, [pc, #28]	; (8005978 <adc_clk_config+0x34>)
 800595c:	2101      	movs	r1, #1
 800595e:	430a      	orrs	r2, r1
 8005960:	635a      	str	r2, [r3, #52]	; 0x34
	while ((RCC->CR2 & RCC_CR2_HSI14RDY) == 0) /* (3) */
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	4b04      	ldr	r3, [pc, #16]	; (8005978 <adc_clk_config+0x34>)
 8005966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005968:	2202      	movs	r2, #2
 800596a:	4013      	ands	r3, r2
 800596c:	d0fa      	beq.n	8005964 <adc_clk_config+0x20>
	{
		/* For robust implementation, add here time-out management */
	}
}
 800596e:	46c0      	nop			; (mov r8, r8)
 8005970:	46c0      	nop			; (mov r8, r8)
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	40021000 	.word	0x40021000

0800597c <adc_sample_time>:
void adc_sample_time(uint8_t sample_time) {
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	0002      	movs	r2, r0
 8005984:	1dfb      	adds	r3, r7, #7
 8005986:	701a      	strb	r2, [r3, #0]
	ADC1->SMPR |= sample_time;
 8005988:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <adc_sample_time+0x24>)
 800598a:	6959      	ldr	r1, [r3, #20]
 800598c:	1dfb      	adds	r3, r7, #7
 800598e:	781a      	ldrb	r2, [r3, #0]
 8005990:	4b03      	ldr	r3, [pc, #12]	; (80059a0 <adc_sample_time+0x24>)
 8005992:	430a      	orrs	r2, r1
 8005994:	615a      	str	r2, [r3, #20]
}
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	46bd      	mov	sp, r7
 800599a:	b002      	add	sp, #8
 800599c:	bd80      	pop	{r7, pc}
 800599e:	46c0      	nop			; (mov r8, r8)
 80059a0:	40012400 	.word	0x40012400

080059a4 <adc_en>:
void adc_en() {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
	adc_clk_config();
 80059a8:	f7ff ffcc 	bl	8005944 <adc_clk_config>
	adc_calib();
 80059ac:	f7ff ff76 	bl	800589c <adc_calib>
	adc_ready();
 80059b0:	f7ff ffa0 	bl	80058f4 <adc_ready>
}
 80059b4:	46c0      	nop			; (mov r8, r8)
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <adc_read>:
void adc_read(uint16_t *arr, uint8_t arr_len) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	000a      	movs	r2, r1
 80059c6:	1cfb      	adds	r3, r7, #3
 80059c8:	701a      	strb	r2, [r3, #0]
	ADC1->CR |= ADC_CR_ADSTART;
 80059ca:	4b12      	ldr	r3, [pc, #72]	; (8005a14 <adc_read+0x58>)
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	4b11      	ldr	r3, [pc, #68]	; (8005a14 <adc_read+0x58>)
 80059d0:	2104      	movs	r1, #4
 80059d2:	430a      	orrs	r2, r1
 80059d4:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < arr_len; i++) {
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	e010      	b.n	80059fe <adc_read+0x42>
		while ((ADC1->ISR & ADC_ISR_EOC) == 0)
 80059dc:	46c0      	nop			; (mov r8, r8)
 80059de:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <adc_read+0x58>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2204      	movs	r2, #4
 80059e4:	4013      	ands	r3, r2
 80059e6:	d0fa      	beq.n	80059de <adc_read+0x22>
			;
		*(arr + i) = ADC1->DR;
 80059e8:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <adc_read+0x58>)
 80059ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	18d3      	adds	r3, r2, r3
 80059f4:	b28a      	uxth	r2, r1
 80059f6:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < arr_len; i++) {
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3301      	adds	r3, #1
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	1cfb      	adds	r3, r7, #3
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	dbe9      	blt.n	80059dc <adc_read+0x20>
	}
}
 8005a08:	46c0      	nop			; (mov r8, r8)
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	b004      	add	sp, #16
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	40012400 	.word	0x40012400

08005a18 <adc_stop>:

void adc_start() {
	ADC1->CR |= ADC_CR_ADSTART;
}
void adc_stop() {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
	ADC1->CR |= ADC_CR_ADSTP;
 8005a1c:	4b04      	ldr	r3, [pc, #16]	; (8005a30 <adc_stop+0x18>)
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	4b03      	ldr	r3, [pc, #12]	; (8005a30 <adc_stop+0x18>)
 8005a22:	2110      	movs	r1, #16
 8005a24:	430a      	orrs	r2, r1
 8005a26:	609a      	str	r2, [r3, #8]
}
 8005a28:	46c0      	nop			; (mov r8, r8)
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	40012400 	.word	0x40012400

08005a34 <adc_chsel>:
	while ((ADC1->CR & ADC_CR_ADEN) != 0) /* (4) */
	{
		/* For robust implementation, add here time-out management */
	}
}
void adc_chsel(uint32_t pin) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b0f      	cmp	r3, #15
 8005a40:	d900      	bls.n	8005a44 <adc_chsel+0x10>
 8005a42:	e07d      	b.n	8005b40 <adc_chsel+0x10c>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	009a      	lsls	r2, r3, #2
 8005a48:	4b3f      	ldr	r3, [pc, #252]	; (8005b48 <adc_chsel+0x114>)
 8005a4a:	18d3      	adds	r3, r2, r3
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	469f      	mov	pc, r3
	switch (pin) {
	case 0:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL0;
 8005a50:	4b3e      	ldr	r3, [pc, #248]	; (8005b4c <adc_chsel+0x118>)
 8005a52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a54:	4b3d      	ldr	r3, [pc, #244]	; (8005b4c <adc_chsel+0x118>)
 8005a56:	2101      	movs	r1, #1
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005a5c:	e070      	b.n	8005b40 <adc_chsel+0x10c>
	case 1:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL1;
 8005a5e:	4b3b      	ldr	r3, [pc, #236]	; (8005b4c <adc_chsel+0x118>)
 8005a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a62:	4b3a      	ldr	r3, [pc, #232]	; (8005b4c <adc_chsel+0x118>)
 8005a64:	2102      	movs	r1, #2
 8005a66:	430a      	orrs	r2, r1
 8005a68:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005a6a:	e069      	b.n	8005b40 <adc_chsel+0x10c>
	case 2:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL2;
 8005a6c:	4b37      	ldr	r3, [pc, #220]	; (8005b4c <adc_chsel+0x118>)
 8005a6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a70:	4b36      	ldr	r3, [pc, #216]	; (8005b4c <adc_chsel+0x118>)
 8005a72:	2104      	movs	r1, #4
 8005a74:	430a      	orrs	r2, r1
 8005a76:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005a78:	e062      	b.n	8005b40 <adc_chsel+0x10c>
	case 3:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL3;
 8005a7a:	4b34      	ldr	r3, [pc, #208]	; (8005b4c <adc_chsel+0x118>)
 8005a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a7e:	4b33      	ldr	r3, [pc, #204]	; (8005b4c <adc_chsel+0x118>)
 8005a80:	2108      	movs	r1, #8
 8005a82:	430a      	orrs	r2, r1
 8005a84:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005a86:	e05b      	b.n	8005b40 <adc_chsel+0x10c>
	case 4:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL4;
 8005a88:	4b30      	ldr	r3, [pc, #192]	; (8005b4c <adc_chsel+0x118>)
 8005a8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a8c:	4b2f      	ldr	r3, [pc, #188]	; (8005b4c <adc_chsel+0x118>)
 8005a8e:	2110      	movs	r1, #16
 8005a90:	430a      	orrs	r2, r1
 8005a92:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005a94:	e054      	b.n	8005b40 <adc_chsel+0x10c>
	case 5:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL5;
 8005a96:	4b2d      	ldr	r3, [pc, #180]	; (8005b4c <adc_chsel+0x118>)
 8005a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a9a:	4b2c      	ldr	r3, [pc, #176]	; (8005b4c <adc_chsel+0x118>)
 8005a9c:	2120      	movs	r1, #32
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005aa2:	e04d      	b.n	8005b40 <adc_chsel+0x10c>
	case 6:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL6;
 8005aa4:	4b29      	ldr	r3, [pc, #164]	; (8005b4c <adc_chsel+0x118>)
 8005aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aa8:	4b28      	ldr	r3, [pc, #160]	; (8005b4c <adc_chsel+0x118>)
 8005aaa:	2140      	movs	r1, #64	; 0x40
 8005aac:	430a      	orrs	r2, r1
 8005aae:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005ab0:	e046      	b.n	8005b40 <adc_chsel+0x10c>
	case 7:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL7;
 8005ab2:	4b26      	ldr	r3, [pc, #152]	; (8005b4c <adc_chsel+0x118>)
 8005ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ab6:	4b25      	ldr	r3, [pc, #148]	; (8005b4c <adc_chsel+0x118>)
 8005ab8:	2180      	movs	r1, #128	; 0x80
 8005aba:	430a      	orrs	r2, r1
 8005abc:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005abe:	e03f      	b.n	8005b40 <adc_chsel+0x10c>
	case 8:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL8;
 8005ac0:	4b22      	ldr	r3, [pc, #136]	; (8005b4c <adc_chsel+0x118>)
 8005ac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ac4:	4b21      	ldr	r3, [pc, #132]	; (8005b4c <adc_chsel+0x118>)
 8005ac6:	2180      	movs	r1, #128	; 0x80
 8005ac8:	0049      	lsls	r1, r1, #1
 8005aca:	430a      	orrs	r2, r1
 8005acc:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005ace:	e037      	b.n	8005b40 <adc_chsel+0x10c>
	case 9:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL9;
 8005ad0:	4b1e      	ldr	r3, [pc, #120]	; (8005b4c <adc_chsel+0x118>)
 8005ad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ad4:	4b1d      	ldr	r3, [pc, #116]	; (8005b4c <adc_chsel+0x118>)
 8005ad6:	2180      	movs	r1, #128	; 0x80
 8005ad8:	0089      	lsls	r1, r1, #2
 8005ada:	430a      	orrs	r2, r1
 8005adc:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005ade:	e02f      	b.n	8005b40 <adc_chsel+0x10c>
	case 10:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL10;
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	; (8005b4c <adc_chsel+0x118>)
 8005ae2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ae4:	4b19      	ldr	r3, [pc, #100]	; (8005b4c <adc_chsel+0x118>)
 8005ae6:	2180      	movs	r1, #128	; 0x80
 8005ae8:	00c9      	lsls	r1, r1, #3
 8005aea:	430a      	orrs	r2, r1
 8005aec:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005aee:	e027      	b.n	8005b40 <adc_chsel+0x10c>
	case 11:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL11;
 8005af0:	4b16      	ldr	r3, [pc, #88]	; (8005b4c <adc_chsel+0x118>)
 8005af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005af4:	4b15      	ldr	r3, [pc, #84]	; (8005b4c <adc_chsel+0x118>)
 8005af6:	2180      	movs	r1, #128	; 0x80
 8005af8:	0109      	lsls	r1, r1, #4
 8005afa:	430a      	orrs	r2, r1
 8005afc:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005afe:	e01f      	b.n	8005b40 <adc_chsel+0x10c>
	case 12:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL12;
 8005b00:	4b12      	ldr	r3, [pc, #72]	; (8005b4c <adc_chsel+0x118>)
 8005b02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b04:	4b11      	ldr	r3, [pc, #68]	; (8005b4c <adc_chsel+0x118>)
 8005b06:	2180      	movs	r1, #128	; 0x80
 8005b08:	0149      	lsls	r1, r1, #5
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005b0e:	e017      	b.n	8005b40 <adc_chsel+0x10c>
	case 13:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL13;
 8005b10:	4b0e      	ldr	r3, [pc, #56]	; (8005b4c <adc_chsel+0x118>)
 8005b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b14:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <adc_chsel+0x118>)
 8005b16:	2180      	movs	r1, #128	; 0x80
 8005b18:	0189      	lsls	r1, r1, #6
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005b1e:	e00f      	b.n	8005b40 <adc_chsel+0x10c>
	case 14:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL14;
 8005b20:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <adc_chsel+0x118>)
 8005b22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b24:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <adc_chsel+0x118>)
 8005b26:	2180      	movs	r1, #128	; 0x80
 8005b28:	01c9      	lsls	r1, r1, #7
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005b2e:	e007      	b.n	8005b40 <adc_chsel+0x10c>
	case 15:
		ADC1->CHSELR |= ADC_CHSELR_CHSEL15;
 8005b30:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <adc_chsel+0x118>)
 8005b32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b34:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <adc_chsel+0x118>)
 8005b36:	2180      	movs	r1, #128	; 0x80
 8005b38:	0209      	lsls	r1, r1, #8
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8005b3e:	46c0      	nop			; (mov r8, r8)
	}
}
 8005b40:	46c0      	nop			; (mov r8, r8)
 8005b42:	46bd      	mov	sp, r7
 8005b44:	b002      	add	sp, #8
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	0800add0 	.word	0x0800add0
 8005b4c:	40012400 	.word	0x40012400

08005b50 <adc_config>:
void adc_config(uint8_t sample_time, uint8_t CONT, uint8_t SCANDIR,
		uint8_t AUTOFF, uint8_t WAIT, uint8_t DISCEN, uint8_t OVRMOD) {
 8005b50:	b5b0      	push	{r4, r5, r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	0005      	movs	r5, r0
 8005b58:	000c      	movs	r4, r1
 8005b5a:	0010      	movs	r0, r2
 8005b5c:	0019      	movs	r1, r3
 8005b5e:	1dfb      	adds	r3, r7, #7
 8005b60:	1c2a      	adds	r2, r5, #0
 8005b62:	701a      	strb	r2, [r3, #0]
 8005b64:	1dbb      	adds	r3, r7, #6
 8005b66:	1c22      	adds	r2, r4, #0
 8005b68:	701a      	strb	r2, [r3, #0]
 8005b6a:	1d7b      	adds	r3, r7, #5
 8005b6c:	1c02      	adds	r2, r0, #0
 8005b6e:	701a      	strb	r2, [r3, #0]
 8005b70:	1d3b      	adds	r3, r7, #4
 8005b72:	1c0a      	adds	r2, r1, #0
 8005b74:	701a      	strb	r2, [r3, #0]
	adc_sample_time(sample_time);
 8005b76:	1dfb      	adds	r3, r7, #7
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	f7ff fefe 	bl	800597c <adc_sample_time>
	if (DISCEN) {
 8005b80:	231c      	movs	r3, #28
 8005b82:	18fb      	adds	r3, r7, r3
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d006      	beq.n	8005b98 <adc_config+0x48>
		ADC1->CFGR1 |= ADC_CFGR1_DISCEN;
 8005b8a:	4b21      	ldr	r3, [pc, #132]	; (8005c10 <adc_config+0xc0>)
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	4b20      	ldr	r3, [pc, #128]	; (8005c10 <adc_config+0xc0>)
 8005b90:	2180      	movs	r1, #128	; 0x80
 8005b92:	0249      	lsls	r1, r1, #9
 8005b94:	430a      	orrs	r2, r1
 8005b96:	60da      	str	r2, [r3, #12]
	}
	if (AUTOFF) {
 8005b98:	1d3b      	adds	r3, r7, #4
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d006      	beq.n	8005bae <adc_config+0x5e>
		ADC1->CFGR1 |= ADC_CFGR1_AUTOFF;
 8005ba0:	4b1b      	ldr	r3, [pc, #108]	; (8005c10 <adc_config+0xc0>)
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	4b1a      	ldr	r3, [pc, #104]	; (8005c10 <adc_config+0xc0>)
 8005ba6:	2180      	movs	r1, #128	; 0x80
 8005ba8:	0209      	lsls	r1, r1, #8
 8005baa:	430a      	orrs	r2, r1
 8005bac:	60da      	str	r2, [r3, #12]
	}
	if (WAIT) {
 8005bae:	2318      	movs	r3, #24
 8005bb0:	18fb      	adds	r3, r7, r3
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d006      	beq.n	8005bc6 <adc_config+0x76>
		ADC1->CFGR1 |= ADC_CFGR1_WAIT;
 8005bb8:	4b15      	ldr	r3, [pc, #84]	; (8005c10 <adc_config+0xc0>)
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	4b14      	ldr	r3, [pc, #80]	; (8005c10 <adc_config+0xc0>)
 8005bbe:	2180      	movs	r1, #128	; 0x80
 8005bc0:	01c9      	lsls	r1, r1, #7
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	60da      	str	r2, [r3, #12]
	}
	if (CONT) {
 8005bc6:	1dbb      	adds	r3, r7, #6
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d006      	beq.n	8005bdc <adc_config+0x8c>
		ADC1->CFGR1 |= ADC_CFGR1_CONT;
 8005bce:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <adc_config+0xc0>)
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	4b0f      	ldr	r3, [pc, #60]	; (8005c10 <adc_config+0xc0>)
 8005bd4:	2180      	movs	r1, #128	; 0x80
 8005bd6:	0189      	lsls	r1, r1, #6
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	60da      	str	r2, [r3, #12]
	}
	if (OVRMOD) {
 8005bdc:	2320      	movs	r3, #32
 8005bde:	18fb      	adds	r3, r7, r3
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d006      	beq.n	8005bf4 <adc_config+0xa4>
		ADC1->CFGR1 |= ADC_CFGR1_OVRMOD;
 8005be6:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <adc_config+0xc0>)
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <adc_config+0xc0>)
 8005bec:	2180      	movs	r1, #128	; 0x80
 8005bee:	0149      	lsls	r1, r1, #5
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	60da      	str	r2, [r3, #12]
	}
	if (SCANDIR) {
 8005bf4:	1d7b      	adds	r3, r7, #5
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d005      	beq.n	8005c08 <adc_config+0xb8>
		ADC1->CFGR1 |= ADC_CFGR1_SCANDIR;
 8005bfc:	4b04      	ldr	r3, [pc, #16]	; (8005c10 <adc_config+0xc0>)
 8005bfe:	68da      	ldr	r2, [r3, #12]
 8005c00:	4b03      	ldr	r3, [pc, #12]	; (8005c10 <adc_config+0xc0>)
 8005c02:	2104      	movs	r1, #4
 8005c04:	430a      	orrs	r2, r1
 8005c06:	60da      	str	r2, [r3, #12]
	}
}
 8005c08:	46c0      	nop			; (mov r8, r8)
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	b002      	add	sp, #8
 8005c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8005c10:	40012400 	.word	0x40012400

08005c14 <LCD_DrawButton1>:
#include "graphics.h"



void LCD_DrawButton1(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color1, uint16_t color2, uint8_t bg_draw) {
 8005c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af02      	add	r7, sp, #8
 8005c1a:	0005      	movs	r5, r0
 8005c1c:	000c      	movs	r4, r1
 8005c1e:	0010      	movs	r0, r2
 8005c20:	0019      	movs	r1, r3
 8005c22:	1dbb      	adds	r3, r7, #6
 8005c24:	1c2a      	adds	r2, r5, #0
 8005c26:	801a      	strh	r2, [r3, #0]
 8005c28:	1d3b      	adds	r3, r7, #4
 8005c2a:	1c22      	adds	r2, r4, #0
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	1cbb      	adds	r3, r7, #2
 8005c30:	1c02      	adds	r2, r0, #0
 8005c32:	801a      	strh	r2, [r3, #0]
 8005c34:	003b      	movs	r3, r7
 8005c36:	1c0a      	adds	r2, r1, #0
 8005c38:	801a      	strh	r2, [r3, #0]

	if (bg_draw == 1)
 8005c3a:	2324      	movs	r3, #36	; 0x24
 8005c3c:	2208      	movs	r2, #8
 8005c3e:	4694      	mov	ip, r2
 8005c40:	44bc      	add	ip, r7
 8005c42:	4463      	add	r3, ip
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d121      	bne.n	8005c8e <LCD_DrawButton1+0x7a>
		LCD_FillRoundRect(x + 5, y + 5, w, h, r, color2);
 8005c4a:	1dbb      	adds	r3, r7, #6
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	3305      	adds	r3, #5
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	b218      	sxth	r0, r3
 8005c54:	1d3b      	adds	r3, r7, #4
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	3305      	adds	r3, #5
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	b219      	sxth	r1, r3
 8005c5e:	003b      	movs	r3, r7
 8005c60:	2400      	movs	r4, #0
 8005c62:	5f1c      	ldrsh	r4, [r3, r4]
 8005c64:	1cbb      	adds	r3, r7, #2
 8005c66:	2200      	movs	r2, #0
 8005c68:	5e9a      	ldrsh	r2, [r3, r2]
 8005c6a:	2320      	movs	r3, #32
 8005c6c:	2508      	movs	r5, #8
 8005c6e:	46ac      	mov	ip, r5
 8005c70:	44bc      	add	ip, r7
 8005c72:	4463      	add	r3, ip
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	2318      	movs	r3, #24
 8005c7a:	2508      	movs	r5, #8
 8005c7c:	46ac      	mov	ip, r5
 8005c7e:	44bc      	add	ip, r7
 8005c80:	4463      	add	r3, ip
 8005c82:	2500      	movs	r5, #0
 8005c84:	5f5b      	ldrsh	r3, [r3, r5]
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	0023      	movs	r3, r4
 8005c8a:	f001 f93b 	bl	8006f04 <LCD_FillRoundRect>

	LCD_FillRoundRect(x, y, w, h, r, color1);
 8005c8e:	003b      	movs	r3, r7
 8005c90:	2400      	movs	r4, #0
 8005c92:	5f1c      	ldrsh	r4, [r3, r4]
 8005c94:	1cbb      	adds	r3, r7, #2
 8005c96:	2200      	movs	r2, #0
 8005c98:	5e9a      	ldrsh	r2, [r3, r2]
 8005c9a:	1d3b      	adds	r3, r7, #4
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	5e59      	ldrsh	r1, [r3, r1]
 8005ca0:	1dbb      	adds	r3, r7, #6
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	5e18      	ldrsh	r0, [r3, r0]
 8005ca6:	231c      	movs	r3, #28
 8005ca8:	2508      	movs	r5, #8
 8005caa:	46ac      	mov	ip, r5
 8005cac:	44bc      	add	ip, r7
 8005cae:	4463      	add	r3, ip
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	9301      	str	r3, [sp, #4]
 8005cb4:	2518      	movs	r5, #24
 8005cb6:	2308      	movs	r3, #8
 8005cb8:	18fe      	adds	r6, r7, r3
 8005cba:	1973      	adds	r3, r6, r5
 8005cbc:	2600      	movs	r6, #0
 8005cbe:	5f9b      	ldrsh	r3, [r3, r6]
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	0023      	movs	r3, r4
 8005cc4:	f001 f91e 	bl	8006f04 <LCD_FillRoundRect>
	LCD_DrawRoundRect(x, y, w, h, r, WHITE);
 8005cc8:	003b      	movs	r3, r7
 8005cca:	2400      	movs	r4, #0
 8005ccc:	5f1c      	ldrsh	r4, [r3, r4]
 8005cce:	1cbb      	adds	r3, r7, #2
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	5e9a      	ldrsh	r2, [r3, r2]
 8005cd4:	1d3b      	adds	r3, r7, #4
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	5e59      	ldrsh	r1, [r3, r1]
 8005cda:	1dbb      	adds	r3, r7, #6
 8005cdc:	2000      	movs	r0, #0
 8005cde:	5e18      	ldrsh	r0, [r3, r0]
 8005ce0:	4b07      	ldr	r3, [pc, #28]	; (8005d00 <LCD_DrawButton1+0xec>)
 8005ce2:	9301      	str	r3, [sp, #4]
 8005ce4:	2308      	movs	r3, #8
 8005ce6:	18fb      	adds	r3, r7, r3
 8005ce8:	195b      	adds	r3, r3, r5
 8005cea:	2500      	movs	r5, #0
 8005cec:	5f5b      	ldrsh	r3, [r3, r5]
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	0023      	movs	r3, r4
 8005cf2:	f000 fb72 	bl	80063da <LCD_DrawRoundRect>
}
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	b003      	add	sp, #12
 8005cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	0000ffff 	.word	0x0000ffff

08005d04 <delay>:
		//-----FRAME RATE SETTING-------//
		0x0060, 0xA700, 0x0061, 0x0001, 0x0090, 0x0033, //RTNI setting
		//-------DISPLAY ON------//
		0x0007, 0x0133, };

void delay(unsigned int t) {
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	for (; t > 0; t--) {
 8005d0c:	e003      	b.n	8005d16 <delay+0x12>
		__asm("nop");
 8005d0e:	46c0      	nop			; (mov r8, r8)
	for (; t > 0; t--) {
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	607b      	str	r3, [r7, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1f8      	bne.n	8005d0e <delay+0xa>
	}
}
 8005d1c:	46c0      	nop			; (mov r8, r8)
 8005d1e:	46c0      	nop			; (mov r8, r8)
 8005d20:	46bd      	mov	sp, r7
 8005d22:	b002      	add	sp, #8
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <GPIO_Init>:
 * 
 * \param 
 * 
 * \return void
 */
static void GPIO_Init(void) {
 8005d28:	b590      	push	{r4, r7, lr}
 8005d2a:	b08b      	sub	sp, #44	; 0x2c
 8005d2c:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOC_CLK_ENABLE()
 8005d2e:	4b3d      	ldr	r3, [pc, #244]	; (8005e24 <GPIO_Init+0xfc>)
 8005d30:	695a      	ldr	r2, [r3, #20]
 8005d32:	4b3c      	ldr	r3, [pc, #240]	; (8005e24 <GPIO_Init+0xfc>)
 8005d34:	2180      	movs	r1, #128	; 0x80
 8005d36:	0309      	lsls	r1, r1, #12
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	615a      	str	r2, [r3, #20]
 8005d3c:	4b39      	ldr	r3, [pc, #228]	; (8005e24 <GPIO_Init+0xfc>)
 8005d3e:	695a      	ldr	r2, [r3, #20]
 8005d40:	2380      	movs	r3, #128	; 0x80
 8005d42:	031b      	lsls	r3, r3, #12
 8005d44:	4013      	ands	r3, r2
 8005d46:	60bb      	str	r3, [r7, #8]
 8005d48:	68bb      	ldr	r3, [r7, #8]
	;
	__GPIOA_CLK_ENABLE()
 8005d4a:	4b36      	ldr	r3, [pc, #216]	; (8005e24 <GPIO_Init+0xfc>)
 8005d4c:	695a      	ldr	r2, [r3, #20]
 8005d4e:	4b35      	ldr	r3, [pc, #212]	; (8005e24 <GPIO_Init+0xfc>)
 8005d50:	2180      	movs	r1, #128	; 0x80
 8005d52:	0289      	lsls	r1, r1, #10
 8005d54:	430a      	orrs	r2, r1
 8005d56:	615a      	str	r2, [r3, #20]
 8005d58:	4b32      	ldr	r3, [pc, #200]	; (8005e24 <GPIO_Init+0xfc>)
 8005d5a:	695a      	ldr	r2, [r3, #20]
 8005d5c:	2380      	movs	r3, #128	; 0x80
 8005d5e:	029b      	lsls	r3, r3, #10
 8005d60:	4013      	ands	r3, r2
 8005d62:	607b      	str	r3, [r7, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
	;
	__GPIOB_CLK_ENABLE()
 8005d66:	4b2f      	ldr	r3, [pc, #188]	; (8005e24 <GPIO_Init+0xfc>)
 8005d68:	695a      	ldr	r2, [r3, #20]
 8005d6a:	4b2e      	ldr	r3, [pc, #184]	; (8005e24 <GPIO_Init+0xfc>)
 8005d6c:	2180      	movs	r1, #128	; 0x80
 8005d6e:	02c9      	lsls	r1, r1, #11
 8005d70:	430a      	orrs	r2, r1
 8005d72:	615a      	str	r2, [r3, #20]
 8005d74:	4b2b      	ldr	r3, [pc, #172]	; (8005e24 <GPIO_Init+0xfc>)
 8005d76:	695a      	ldr	r2, [r3, #20]
 8005d78:	2380      	movs	r3, #128	; 0x80
 8005d7a:	02db      	lsls	r3, r3, #11
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	603b      	str	r3, [r7, #0]
 8005d80:	683b      	ldr	r3, [r7, #0]
	;

	/*Configure GPIO pins : PC1 PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_7;
 8005d82:	240c      	movs	r4, #12
 8005d84:	193b      	adds	r3, r7, r4
 8005d86:	2282      	movs	r2, #130	; 0x82
 8005d88:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d8a:	193b      	adds	r3, r7, r4
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d90:	193b      	adds	r3, r7, r4
 8005d92:	2200      	movs	r2, #0
 8005d94:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005d96:	193b      	adds	r3, r7, r4
 8005d98:	2203      	movs	r2, #3
 8005d9a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d9c:	193b      	adds	r3, r7, r4
 8005d9e:	4a22      	ldr	r2, [pc, #136]	; (8005e28 <GPIO_Init+0x100>)
 8005da0:	0019      	movs	r1, r3
 8005da2:	0010      	movs	r0, r2
 8005da4:	f7fd f9e2 	bl	800316c <HAL_GPIO_Init>

	gpio_config(PORTC, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8005da8:	481f      	ldr	r0, [pc, #124]	; (8005e28 <GPIO_Init+0x100>)
 8005daa:	2300      	movs	r3, #0
 8005dac:	9301      	str	r3, [sp, #4]
 8005dae:	2300      	movs	r3, #0
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	2302      	movs	r3, #2
 8005db4:	2201      	movs	r2, #1
 8005db6:	2101      	movs	r1, #1
 8005db8:	f7ff fa7a 	bl	80052b0 <gpio_config>
	gpio_config(PORTC, 7, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8005dbc:	481a      	ldr	r0, [pc, #104]	; (8005e28 <GPIO_Init+0x100>)
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	9301      	str	r3, [sp, #4]
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	2201      	movs	r2, #1
 8005dca:	2107      	movs	r1, #7
 8005dcc:	f7ff fa70 	bl	80052b0 <gpio_config>

	/*Configure GPIO pins : PA0 PA2 PA5 PA8
	 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_8 | GPIO_PIN_9
 8005dd0:	193b      	adds	r3, r7, r4
 8005dd2:	4a16      	ldr	r2, [pc, #88]	; (8005e2c <GPIO_Init+0x104>)
 8005dd4:	601a      	str	r2, [r3, #0]
			| GPIO_PIN_10 | GPIO_PIN_1 | GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005dd6:	193b      	adds	r3, r7, r4
 8005dd8:	2201      	movs	r2, #1
 8005dda:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ddc:	193b      	adds	r3, r7, r4
 8005dde:	2200      	movs	r2, #0
 8005de0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005de2:	193b      	adds	r3, r7, r4
 8005de4:	2203      	movs	r2, #3
 8005de6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005de8:	193a      	adds	r2, r7, r4
 8005dea:	2390      	movs	r3, #144	; 0x90
 8005dec:	05db      	lsls	r3, r3, #23
 8005dee:	0011      	movs	r1, r2
 8005df0:	0018      	movs	r0, r3
 8005df2:	f7fd f9bb 	bl	800316c <HAL_GPIO_Init>
//	gpio_config(PORTA, 8, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTA, 9, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTA, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);

	/*Configure GPIO pins : PB0 PB10 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_3 | GPIO_PIN_10 | GPIO_PIN_4
 8005df6:	0021      	movs	r1, r4
 8005df8:	187b      	adds	r3, r7, r1
 8005dfa:	4a0d      	ldr	r2, [pc, #52]	; (8005e30 <GPIO_Init+0x108>)
 8005dfc:	601a      	str	r2, [r3, #0]
			| GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005dfe:	187b      	adds	r3, r7, r1
 8005e00:	2201      	movs	r2, #1
 8005e02:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e04:	187b      	adds	r3, r7, r1
 8005e06:	2200      	movs	r2, #0
 8005e08:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005e0a:	187b      	adds	r3, r7, r1
 8005e0c:	2203      	movs	r2, #3
 8005e0e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e10:	187b      	adds	r3, r7, r1
 8005e12:	4a08      	ldr	r2, [pc, #32]	; (8005e34 <GPIO_Init+0x10c>)
 8005e14:	0019      	movs	r1, r3
 8005e16:	0010      	movs	r0, r2
 8005e18:	f7fd f9a8 	bl	800316c <HAL_GPIO_Init>

//	gpio_config(PORTB, 0, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 4, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
//	gpio_config(PORTB, 5, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
}
 8005e1c:	46c0      	nop			; (mov r8, r8)
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	b009      	add	sp, #36	; 0x24
 8005e22:	bd90      	pop	{r4, r7, pc}
 8005e24:	40021000 	.word	0x40021000
 8005e28:	48000800 	.word	0x48000800
 8005e2c:	00000713 	.word	0x00000713
 8005e30:	00000439 	.word	0x00000439
 8005e34:	48000400 	.word	0x48000400

08005e38 <LCD_Begin>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Begin(void) {
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 8005e3e:	4b35      	ldr	r3, [pc, #212]	; (8005f14 <LCD_Begin+0xdc>)
 8005e40:	22f0      	movs	r2, #240	; 0xf0
 8005e42:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8005e44:	4b34      	ldr	r3, [pc, #208]	; (8005f18 <LCD_Begin+0xe0>)
 8005e46:	22a0      	movs	r2, #160	; 0xa0
 8005e48:	0052      	lsls	r2, r2, #1
 8005e4a:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8005e4c:	4b33      	ldr	r3, [pc, #204]	; (8005f1c <LCD_Begin+0xe4>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 8005e52:	4b33      	ldr	r3, [pc, #204]	; (8005f20 <LCD_Begin+0xe8>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	801a      	strh	r2, [r3, #0]
 8005e58:	4b31      	ldr	r3, [pc, #196]	; (8005f20 <LCD_Begin+0xe8>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	5e9a      	ldrsh	r2, [r3, r2]
 8005e5e:	4b31      	ldr	r3, [pc, #196]	; (8005f24 <LCD_Begin+0xec>)
 8005e60:	801a      	strh	r2, [r3, #0]
	m_textsize = 4;
 8005e62:	4b31      	ldr	r3, [pc, #196]	; (8005f28 <LCD_Begin+0xf0>)
 8005e64:	2204      	movs	r2, #4
 8005e66:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8005e68:	4b30      	ldr	r3, [pc, #192]	; (8005f2c <LCD_Begin+0xf4>)
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	4252      	negs	r2, r2
 8005e6e:	801a      	strh	r2, [r3, #0]
 8005e70:	4b2e      	ldr	r3, [pc, #184]	; (8005f2c <LCD_Begin+0xf4>)
 8005e72:	881a      	ldrh	r2, [r3, #0]
 8005e74:	4b2e      	ldr	r3, [pc, #184]	; (8005f30 <LCD_Begin+0xf8>)
 8005e76:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8005e78:	4b2e      	ldr	r3, [pc, #184]	; (8005f34 <LCD_Begin+0xfc>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8005e7e:	1dfb      	adds	r3, r7, #7
 8005e80:	2200      	movs	r2, #0
 8005e82:	701a      	strb	r2, [r3, #0]
	uint16_t a, d;

	GPIO_Init();
 8005e84:	f7ff ff50 	bl	8005d28 <GPIO_Init>

	LCD_Reset();
 8005e88:	f001 fb62 	bl	8007550 <LCD_Reset>

	LCD_CS_LOW();
 8005e8c:	4b2a      	ldr	r3, [pc, #168]	; (8005f38 <LCD_Begin+0x100>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2100      	movs	r1, #0
 8005e92:	0018      	movs	r0, r3
 8005e94:	f7ff faf4 	bl	8005480 <gpio_write>

	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8005e98:	e027      	b.n	8005eea <LCD_Begin+0xb2>
		a = ST7781_regValues[i++];
 8005e9a:	1dfb      	adds	r3, r7, #7
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	1dfa      	adds	r2, r7, #7
 8005ea0:	1c59      	adds	r1, r3, #1
 8005ea2:	7011      	strb	r1, [r2, #0]
 8005ea4:	0019      	movs	r1, r3
 8005ea6:	1d3b      	adds	r3, r7, #4
 8005ea8:	4a24      	ldr	r2, [pc, #144]	; (8005f3c <LCD_Begin+0x104>)
 8005eaa:	0049      	lsls	r1, r1, #1
 8005eac:	5a8a      	ldrh	r2, [r1, r2]
 8005eae:	801a      	strh	r2, [r3, #0]
		d = ST7781_regValues[i++];
 8005eb0:	1dfb      	adds	r3, r7, #7
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	1dfa      	adds	r2, r7, #7
 8005eb6:	1c59      	adds	r1, r3, #1
 8005eb8:	7011      	strb	r1, [r2, #0]
 8005eba:	0019      	movs	r1, r3
 8005ebc:	1cbb      	adds	r3, r7, #2
 8005ebe:	4a1f      	ldr	r2, [pc, #124]	; (8005f3c <LCD_Begin+0x104>)
 8005ec0:	0049      	lsls	r1, r1, #1
 8005ec2:	5a8a      	ldrh	r2, [r1, r2]
 8005ec4:	801a      	strh	r2, [r3, #0]
		if (a == TFTLCD_DELAY) {
 8005ec6:	1d3b      	adds	r3, r7, #4
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	2bff      	cmp	r3, #255	; 0xff
 8005ecc:	d105      	bne.n	8005eda <LCD_Begin+0xa2>
			delay(d);
 8005ece:	1cbb      	adds	r3, r7, #2
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f7ff ff16 	bl	8005d04 <delay>
 8005ed8:	e007      	b.n	8005eea <LCD_Begin+0xb2>
		} else {
			LCD_WriteRegister16(a, d);
 8005eda:	1cbb      	adds	r3, r7, #2
 8005edc:	881a      	ldrh	r2, [r3, #0]
 8005ede:	1d3b      	adds	r3, r7, #4
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	0011      	movs	r1, r2
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	f001 fd1d 	bl	8007924 <LCD_WriteRegister16>
	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8005eea:	1dfb      	adds	r3, r7, #7
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b83      	cmp	r3, #131	; 0x83
 8005ef0:	d9d3      	bls.n	8005e9a <LCD_Begin+0x62>
		}
	}

	LCD_SetRotation(m_rotation);
 8005ef2:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <LCD_Begin+0xe4>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	0018      	movs	r0, r3
 8005ef8:	f001 fbd6 	bl	80076a8 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
 8005efc:	2340      	movs	r3, #64	; 0x40
 8005efe:	33ff      	adds	r3, #255	; 0xff
 8005f00:	22ef      	movs	r2, #239	; 0xef
 8005f02:	2100      	movs	r1, #0
 8005f04:	2000      	movs	r0, #0
 8005f06:	f001 fc03 	bl	8007710 <LCD_SetAddrWindow>
}
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	b002      	add	sp, #8
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	46c0      	nop			; (mov r8, r8)
 8005f14:	20000350 	.word	0x20000350
 8005f18:	20000352 	.word	0x20000352
 8005f1c:	2000035d 	.word	0x2000035d
 8005f20:	20000354 	.word	0x20000354
 8005f24:	20000356 	.word	0x20000356
 8005f28:	2000035c 	.word	0x2000035c
 8005f2c:	2000035a 	.word	0x2000035a
 8005f30:	20000358 	.word	0x20000358
 8005f34:	2000035e 	.word	0x2000035e
 8005f38:	48000400 	.word	0x48000400
 8005f3c:	0800b090 	.word	0x0800b090

08005f40 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8005f40:	b590      	push	{r4, r7, lr}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	0004      	movs	r4, r0
 8005f48:	0008      	movs	r0, r1
 8005f4a:	0011      	movs	r1, r2
 8005f4c:	1dbb      	adds	r3, r7, #6
 8005f4e:	1c22      	adds	r2, r4, #0
 8005f50:	801a      	strh	r2, [r3, #0]
 8005f52:	1d3b      	adds	r3, r7, #4
 8005f54:	1c02      	adds	r2, r0, #0
 8005f56:	801a      	strh	r2, [r3, #0]
 8005f58:	1cbb      	adds	r3, r7, #2
 8005f5a:	1c0a      	adds	r2, r1, #0
 8005f5c:	801a      	strh	r2, [r3, #0]
	// Clip
	if ((x < 0) || (y < 0) || (x >= TFTWIDTH) || (y >= TFTHEIGHT))
 8005f5e:	1dbb      	adds	r3, r7, #6
 8005f60:	2200      	movs	r2, #0
 8005f62:	5e9b      	ldrsh	r3, [r3, r2]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	da00      	bge.n	8005f6a <LCD_DrawPixel+0x2a>
 8005f68:	e06d      	b.n	8006046 <LCD_DrawPixel+0x106>
 8005f6a:	1d3b      	adds	r3, r7, #4
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	5e9b      	ldrsh	r3, [r3, r2]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	da00      	bge.n	8005f76 <LCD_DrawPixel+0x36>
 8005f74:	e067      	b.n	8006046 <LCD_DrawPixel+0x106>
 8005f76:	1dbb      	adds	r3, r7, #6
 8005f78:	2200      	movs	r2, #0
 8005f7a:	5e9b      	ldrsh	r3, [r3, r2]
 8005f7c:	2bef      	cmp	r3, #239	; 0xef
 8005f7e:	dc62      	bgt.n	8006046 <LCD_DrawPixel+0x106>
 8005f80:	1d3b      	adds	r3, r7, #4
 8005f82:	2200      	movs	r2, #0
 8005f84:	5e9a      	ldrsh	r2, [r3, r2]
 8005f86:	23a0      	movs	r3, #160	; 0xa0
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	da5b      	bge.n	8006046 <LCD_DrawPixel+0x106>
		return;

	LCD_CS_LOW();
 8005f8e:	4b30      	ldr	r3, [pc, #192]	; (8006050 <LCD_DrawPixel+0x110>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	2100      	movs	r1, #0
 8005f94:	0018      	movs	r0, r3
 8005f96:	f7ff fa73 	bl	8005480 <gpio_write>

	int16_t t;
	switch (m_rotation) {
 8005f9a:	4b2e      	ldr	r3, [pc, #184]	; (8006054 <LCD_DrawPixel+0x114>)
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	d026      	beq.n	8005ff0 <LCD_DrawPixel+0xb0>
 8005fa2:	dc37      	bgt.n	8006014 <LCD_DrawPixel+0xd4>
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d002      	beq.n	8005fae <LCD_DrawPixel+0x6e>
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d011      	beq.n	8005fd0 <LCD_DrawPixel+0x90>
 8005fac:	e032      	b.n	8006014 <LCD_DrawPixel+0xd4>
	case 1:
		t = x;
 8005fae:	210e      	movs	r1, #14
 8005fb0:	187b      	adds	r3, r7, r1
 8005fb2:	1dba      	adds	r2, r7, #6
 8005fb4:	8812      	ldrh	r2, [r2, #0]
 8005fb6:	801a      	strh	r2, [r3, #0]
		x = TFTWIDTH - 1 - y;
 8005fb8:	1d3b      	adds	r3, r7, #4
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	22ef      	movs	r2, #239	; 0xef
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	1dbb      	adds	r3, r7, #6
 8005fc4:	801a      	strh	r2, [r3, #0]
		y = t;
 8005fc6:	1d3b      	adds	r3, r7, #4
 8005fc8:	187a      	adds	r2, r7, r1
 8005fca:	8812      	ldrh	r2, [r2, #0]
 8005fcc:	801a      	strh	r2, [r3, #0]
		break;
 8005fce:	e021      	b.n	8006014 <LCD_DrawPixel+0xd4>
	case 2:
		x = TFTWIDTH - 1 - x;
 8005fd0:	1dbb      	adds	r3, r7, #6
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	22ef      	movs	r2, #239	; 0xef
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	1dbb      	adds	r3, r7, #6
 8005fdc:	801a      	strh	r2, [r3, #0]
		y = TFTHEIGHT - 1 - y;
 8005fde:	1d3b      	adds	r3, r7, #4
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	2240      	movs	r2, #64	; 0x40
 8005fe4:	32ff      	adds	r2, #255	; 0xff
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	1d3b      	adds	r3, r7, #4
 8005fec:	801a      	strh	r2, [r3, #0]
		break;
 8005fee:	e011      	b.n	8006014 <LCD_DrawPixel+0xd4>
	case 3:
		t = x;
 8005ff0:	210e      	movs	r1, #14
 8005ff2:	187b      	adds	r3, r7, r1
 8005ff4:	1dba      	adds	r2, r7, #6
 8005ff6:	8812      	ldrh	r2, [r2, #0]
 8005ff8:	801a      	strh	r2, [r3, #0]
		x = y;
 8005ffa:	1dbb      	adds	r3, r7, #6
 8005ffc:	1d3a      	adds	r2, r7, #4
 8005ffe:	8812      	ldrh	r2, [r2, #0]
 8006000:	801a      	strh	r2, [r3, #0]
		y = TFTHEIGHT - 1 - t;
 8006002:	187b      	adds	r3, r7, r1
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	2240      	movs	r2, #64	; 0x40
 8006008:	32ff      	adds	r2, #255	; 0xff
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	b29a      	uxth	r2, r3
 800600e:	1d3b      	adds	r3, r7, #4
 8006010:	801a      	strh	r2, [r3, #0]
		break;
 8006012:	46c0      	nop			; (mov r8, r8)
	}

	LCD_WriteRegister16(0x0020, x);
 8006014:	1dbb      	adds	r3, r7, #6
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	0019      	movs	r1, r3
 800601a:	2020      	movs	r0, #32
 800601c:	f001 fc82 	bl	8007924 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8006020:	1d3b      	adds	r3, r7, #4
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	0019      	movs	r1, r3
 8006026:	2021      	movs	r0, #33	; 0x21
 8006028:	f001 fc7c 	bl	8007924 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0022, color);
 800602c:	1cbb      	adds	r3, r7, #2
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	0019      	movs	r1, r3
 8006032:	2022      	movs	r0, #34	; 0x22
 8006034:	f001 fc76 	bl	8007924 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8006038:	4b05      	ldr	r3, [pc, #20]	; (8006050 <LCD_DrawPixel+0x110>)
 800603a:	2201      	movs	r2, #1
 800603c:	2100      	movs	r1, #0
 800603e:	0018      	movs	r0, r3
 8006040:	f7ff fa1e 	bl	8005480 <gpio_write>
 8006044:	e000      	b.n	8006048 <LCD_DrawPixel+0x108>
		return;
 8006046:	46c0      	nop			; (mov r8, r8)
}
 8006048:	46bd      	mov	sp, r7
 800604a:	b005      	add	sp, #20
 800604c:	bd90      	pop	{r4, r7, pc}
 800604e:	46c0      	nop			; (mov r8, r8)
 8006050:	48000400 	.word	0x48000400
 8006054:	2000035d 	.word	0x2000035d

08006058 <LCD_DrawLine>:
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2,
		uint16_t color) {
 8006058:	b5b0      	push	{r4, r5, r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	0005      	movs	r5, r0
 8006060:	000c      	movs	r4, r1
 8006062:	0010      	movs	r0, r2
 8006064:	0019      	movs	r1, r3
 8006066:	1dbb      	adds	r3, r7, #6
 8006068:	1c2a      	adds	r2, r5, #0
 800606a:	801a      	strh	r2, [r3, #0]
 800606c:	1d3b      	adds	r3, r7, #4
 800606e:	1c22      	adds	r2, r4, #0
 8006070:	801a      	strh	r2, [r3, #0]
 8006072:	1cbb      	adds	r3, r7, #2
 8006074:	1c02      	adds	r2, r0, #0
 8006076:	801a      	strh	r2, [r3, #0]
 8006078:	003b      	movs	r3, r7
 800607a:	1c0a      	adds	r2, r1, #0
 800607c:	801a      	strh	r2, [r3, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 800607e:	003b      	movs	r3, r7
 8006080:	2200      	movs	r2, #0
 8006082:	5e9a      	ldrsh	r2, [r3, r2]
 8006084:	1d3b      	adds	r3, r7, #4
 8006086:	2100      	movs	r1, #0
 8006088:	5e5b      	ldrsh	r3, [r3, r1]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	17d9      	asrs	r1, r3, #31
 800608e:	185a      	adds	r2, r3, r1
 8006090:	404a      	eors	r2, r1
 8006092:	1cbb      	adds	r3, r7, #2
 8006094:	2100      	movs	r1, #0
 8006096:	5e59      	ldrsh	r1, [r3, r1]
 8006098:	1dbb      	adds	r3, r7, #6
 800609a:	2000      	movs	r0, #0
 800609c:	5e1b      	ldrsh	r3, [r3, r0]
 800609e:	1acb      	subs	r3, r1, r3
 80060a0:	17d9      	asrs	r1, r3, #31
 80060a2:	185b      	adds	r3, r3, r1
 80060a4:	404b      	eors	r3, r1
 80060a6:	2101      	movs	r1, #1
 80060a8:	429a      	cmp	r2, r3
 80060aa:	dc01      	bgt.n	80060b0 <LCD_DrawLine+0x58>
 80060ac:	2300      	movs	r3, #0
 80060ae:	1c19      	adds	r1, r3, #0
 80060b0:	b2ca      	uxtb	r2, r1
 80060b2:	211a      	movs	r1, #26
 80060b4:	187b      	adds	r3, r7, r1
 80060b6:	801a      	strh	r2, [r3, #0]
	if (steep) {
 80060b8:	187b      	adds	r3, r7, r1
 80060ba:	2200      	movs	r2, #0
 80060bc:	5e9b      	ldrsh	r3, [r3, r2]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d019      	beq.n	80060f6 <LCD_DrawLine+0x9e>
		swap(x1, y1);
 80060c2:	2118      	movs	r1, #24
 80060c4:	187b      	adds	r3, r7, r1
 80060c6:	1dba      	adds	r2, r7, #6
 80060c8:	8812      	ldrh	r2, [r2, #0]
 80060ca:	801a      	strh	r2, [r3, #0]
 80060cc:	1dbb      	adds	r3, r7, #6
 80060ce:	1d3a      	adds	r2, r7, #4
 80060d0:	8812      	ldrh	r2, [r2, #0]
 80060d2:	801a      	strh	r2, [r3, #0]
 80060d4:	1d3b      	adds	r3, r7, #4
 80060d6:	187a      	adds	r2, r7, r1
 80060d8:	8812      	ldrh	r2, [r2, #0]
 80060da:	801a      	strh	r2, [r3, #0]
		swap(x2, y2);
 80060dc:	2116      	movs	r1, #22
 80060de:	187b      	adds	r3, r7, r1
 80060e0:	1cba      	adds	r2, r7, #2
 80060e2:	8812      	ldrh	r2, [r2, #0]
 80060e4:	801a      	strh	r2, [r3, #0]
 80060e6:	1cbb      	adds	r3, r7, #2
 80060e8:	003a      	movs	r2, r7
 80060ea:	8812      	ldrh	r2, [r2, #0]
 80060ec:	801a      	strh	r2, [r3, #0]
 80060ee:	003b      	movs	r3, r7
 80060f0:	187a      	adds	r2, r7, r1
 80060f2:	8812      	ldrh	r2, [r2, #0]
 80060f4:	801a      	strh	r2, [r3, #0]
	}

	if (x1 > x2) {
 80060f6:	1dba      	adds	r2, r7, #6
 80060f8:	1cbb      	adds	r3, r7, #2
 80060fa:	2100      	movs	r1, #0
 80060fc:	5e52      	ldrsh	r2, [r2, r1]
 80060fe:	2100      	movs	r1, #0
 8006100:	5e5b      	ldrsh	r3, [r3, r1]
 8006102:	429a      	cmp	r2, r3
 8006104:	dd19      	ble.n	800613a <LCD_DrawLine+0xe2>
		swap(x1, x2);
 8006106:	2114      	movs	r1, #20
 8006108:	187b      	adds	r3, r7, r1
 800610a:	1dba      	adds	r2, r7, #6
 800610c:	8812      	ldrh	r2, [r2, #0]
 800610e:	801a      	strh	r2, [r3, #0]
 8006110:	1dbb      	adds	r3, r7, #6
 8006112:	1cba      	adds	r2, r7, #2
 8006114:	8812      	ldrh	r2, [r2, #0]
 8006116:	801a      	strh	r2, [r3, #0]
 8006118:	1cbb      	adds	r3, r7, #2
 800611a:	187a      	adds	r2, r7, r1
 800611c:	8812      	ldrh	r2, [r2, #0]
 800611e:	801a      	strh	r2, [r3, #0]
		swap(y1, y2);
 8006120:	2112      	movs	r1, #18
 8006122:	187b      	adds	r3, r7, r1
 8006124:	1d3a      	adds	r2, r7, #4
 8006126:	8812      	ldrh	r2, [r2, #0]
 8006128:	801a      	strh	r2, [r3, #0]
 800612a:	1d3b      	adds	r3, r7, #4
 800612c:	003a      	movs	r2, r7
 800612e:	8812      	ldrh	r2, [r2, #0]
 8006130:	801a      	strh	r2, [r3, #0]
 8006132:	003b      	movs	r3, r7
 8006134:	187a      	adds	r2, r7, r1
 8006136:	8812      	ldrh	r2, [r2, #0]
 8006138:	801a      	strh	r2, [r3, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 800613a:	1cbb      	adds	r3, r7, #2
 800613c:	881a      	ldrh	r2, [r3, #0]
 800613e:	1dbb      	adds	r3, r7, #6
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	b29a      	uxth	r2, r3
 8006146:	2110      	movs	r1, #16
 8006148:	187b      	adds	r3, r7, r1
 800614a:	801a      	strh	r2, [r3, #0]
	dy = abs(y2 - y1);
 800614c:	003b      	movs	r3, r7
 800614e:	2200      	movs	r2, #0
 8006150:	5e9a      	ldrsh	r2, [r3, r2]
 8006152:	1d3b      	adds	r3, r7, #4
 8006154:	2000      	movs	r0, #0
 8006156:	5e1b      	ldrsh	r3, [r3, r0]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	17d8      	asrs	r0, r3, #31
 800615c:	181a      	adds	r2, r3, r0
 800615e:	4042      	eors	r2, r0
 8006160:	230e      	movs	r3, #14
 8006162:	18fb      	adds	r3, r7, r3
 8006164:	801a      	strh	r2, [r3, #0]

	int16_t err = dx / 2;
 8006166:	231e      	movs	r3, #30
 8006168:	18fa      	adds	r2, r7, r3
 800616a:	187b      	adds	r3, r7, r1
 800616c:	2100      	movs	r1, #0
 800616e:	5e5b      	ldrsh	r3, [r3, r1]
 8006170:	2b00      	cmp	r3, #0
 8006172:	da00      	bge.n	8006176 <LCD_DrawLine+0x11e>
 8006174:	3301      	adds	r3, #1
 8006176:	105b      	asrs	r3, r3, #1
 8006178:	8013      	strh	r3, [r2, #0]
	int16_t ystep;

	if (y1 < y2) {
 800617a:	1d3a      	adds	r2, r7, #4
 800617c:	003b      	movs	r3, r7
 800617e:	2100      	movs	r1, #0
 8006180:	5e52      	ldrsh	r2, [r2, r1]
 8006182:	2100      	movs	r1, #0
 8006184:	5e5b      	ldrsh	r3, [r3, r1]
 8006186:	429a      	cmp	r2, r3
 8006188:	da04      	bge.n	8006194 <LCD_DrawLine+0x13c>
		ystep = 1;
 800618a:	231c      	movs	r3, #28
 800618c:	18fb      	adds	r3, r7, r3
 800618e:	2201      	movs	r2, #1
 8006190:	801a      	strh	r2, [r3, #0]
 8006192:	e04d      	b.n	8006230 <LCD_DrawLine+0x1d8>
	} else {
		ystep = -1;
 8006194:	231c      	movs	r3, #28
 8006196:	18fb      	adds	r3, r7, r3
 8006198:	2201      	movs	r2, #1
 800619a:	4252      	negs	r2, r2
 800619c:	801a      	strh	r2, [r3, #0]
	}

	for (; x1 <= x2; x1++) {
 800619e:	e047      	b.n	8006230 <LCD_DrawLine+0x1d8>
		if (steep) {
 80061a0:	231a      	movs	r3, #26
 80061a2:	18fb      	adds	r3, r7, r3
 80061a4:	2200      	movs	r2, #0
 80061a6:	5e9b      	ldrsh	r3, [r3, r2]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00c      	beq.n	80061c6 <LCD_DrawLine+0x16e>
			LCD_DrawPixel(y1, x1, color);
 80061ac:	2330      	movs	r3, #48	; 0x30
 80061ae:	18fb      	adds	r3, r7, r3
 80061b0:	881a      	ldrh	r2, [r3, #0]
 80061b2:	1dbb      	adds	r3, r7, #6
 80061b4:	2100      	movs	r1, #0
 80061b6:	5e59      	ldrsh	r1, [r3, r1]
 80061b8:	1d3b      	adds	r3, r7, #4
 80061ba:	2000      	movs	r0, #0
 80061bc:	5e1b      	ldrsh	r3, [r3, r0]
 80061be:	0018      	movs	r0, r3
 80061c0:	f7ff febe 	bl	8005f40 <LCD_DrawPixel>
 80061c4:	e00b      	b.n	80061de <LCD_DrawLine+0x186>
		} else {
			LCD_DrawPixel(x1, y1, color);
 80061c6:	2330      	movs	r3, #48	; 0x30
 80061c8:	18fb      	adds	r3, r7, r3
 80061ca:	881a      	ldrh	r2, [r3, #0]
 80061cc:	1d3b      	adds	r3, r7, #4
 80061ce:	2100      	movs	r1, #0
 80061d0:	5e59      	ldrsh	r1, [r3, r1]
 80061d2:	1dbb      	adds	r3, r7, #6
 80061d4:	2000      	movs	r0, #0
 80061d6:	5e1b      	ldrsh	r3, [r3, r0]
 80061d8:	0018      	movs	r0, r3
 80061da:	f7ff feb1 	bl	8005f40 <LCD_DrawPixel>
		}
		err -= dy;
 80061de:	211e      	movs	r1, #30
 80061e0:	187b      	adds	r3, r7, r1
 80061e2:	881a      	ldrh	r2, [r3, #0]
 80061e4:	230e      	movs	r3, #14
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	187b      	adds	r3, r7, r1
 80061f0:	801a      	strh	r2, [r3, #0]
		if (err < 0) {
 80061f2:	187b      	adds	r3, r7, r1
 80061f4:	2200      	movs	r2, #0
 80061f6:	5e9b      	ldrsh	r3, [r3, r2]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	da11      	bge.n	8006220 <LCD_DrawLine+0x1c8>
			y1 += ystep;
 80061fc:	1d3b      	adds	r3, r7, #4
 80061fe:	881a      	ldrh	r2, [r3, #0]
 8006200:	231c      	movs	r3, #28
 8006202:	18fb      	adds	r3, r7, r3
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	18d3      	adds	r3, r2, r3
 8006208:	b29a      	uxth	r2, r3
 800620a:	1d3b      	adds	r3, r7, #4
 800620c:	801a      	strh	r2, [r3, #0]
			err += dx;
 800620e:	187b      	adds	r3, r7, r1
 8006210:	881a      	ldrh	r2, [r3, #0]
 8006212:	2310      	movs	r3, #16
 8006214:	18fb      	adds	r3, r7, r3
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	18d3      	adds	r3, r2, r3
 800621a:	b29a      	uxth	r2, r3
 800621c:	187b      	adds	r3, r7, r1
 800621e:	801a      	strh	r2, [r3, #0]
	for (; x1 <= x2; x1++) {
 8006220:	1dbb      	adds	r3, r7, #6
 8006222:	2200      	movs	r2, #0
 8006224:	5e9b      	ldrsh	r3, [r3, r2]
 8006226:	b29b      	uxth	r3, r3
 8006228:	3301      	adds	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	1dbb      	adds	r3, r7, #6
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	1dba      	adds	r2, r7, #6
 8006232:	1cbb      	adds	r3, r7, #2
 8006234:	2100      	movs	r1, #0
 8006236:	5e52      	ldrsh	r2, [r2, r1]
 8006238:	2100      	movs	r1, #0
 800623a:	5e5b      	ldrsh	r3, [r3, r1]
 800623c:	429a      	cmp	r2, r3
 800623e:	ddaf      	ble.n	80061a0 <LCD_DrawLine+0x148>
		}
	}
}
 8006240:	46c0      	nop			; (mov r8, r8)
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	46bd      	mov	sp, r7
 8006246:	b008      	add	sp, #32
 8006248:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800624c <LCD_DrawFastHLine>:
 * \param length	Length of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastHLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
 800624c:	b5b0      	push	{r4, r5, r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	0005      	movs	r5, r0
 8006254:	000c      	movs	r4, r1
 8006256:	0010      	movs	r0, r2
 8006258:	0019      	movs	r1, r3
 800625a:	1dbb      	adds	r3, r7, #6
 800625c:	1c2a      	adds	r2, r5, #0
 800625e:	801a      	strh	r2, [r3, #0]
 8006260:	1d3b      	adds	r3, r7, #4
 8006262:	1c22      	adds	r2, r4, #0
 8006264:	801a      	strh	r2, [r3, #0]
 8006266:	1cbb      	adds	r3, r7, #2
 8006268:	1c02      	adds	r2, r0, #0
 800626a:	801a      	strh	r2, [r3, #0]
 800626c:	003b      	movs	r3, r7
 800626e:	1c0a      	adds	r2, r1, #0
 8006270:	801a      	strh	r2, [r3, #0]
	int16_t x2;

	// Initial off-screen clipping
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 8006272:	1cbb      	adds	r3, r7, #2
 8006274:	2200      	movs	r2, #0
 8006276:	5e9b      	ldrsh	r3, [r3, r2]
 8006278:	2b00      	cmp	r3, #0
 800627a:	dc00      	bgt.n	800627e <LCD_DrawFastHLine+0x32>
 800627c:	e075      	b.n	800636a <LCD_DrawFastHLine+0x11e>
 800627e:	1d3b      	adds	r3, r7, #4
 8006280:	2200      	movs	r2, #0
 8006282:	5e9b      	ldrsh	r3, [r3, r2]
 8006284:	2b00      	cmp	r3, #0
 8006286:	da00      	bge.n	800628a <LCD_DrawFastHLine+0x3e>
 8006288:	e06f      	b.n	800636a <LCD_DrawFastHLine+0x11e>
 800628a:	4b3a      	ldr	r3, [pc, #232]	; (8006374 <LCD_DrawFastHLine+0x128>)
 800628c:	2200      	movs	r2, #0
 800628e:	5e9b      	ldrsh	r3, [r3, r2]
 8006290:	1d3a      	adds	r2, r7, #4
 8006292:	2100      	movs	r1, #0
 8006294:	5e52      	ldrsh	r2, [r2, r1]
 8006296:	429a      	cmp	r2, r3
 8006298:	da67      	bge.n	800636a <LCD_DrawFastHLine+0x11e>
 800629a:	4b37      	ldr	r3, [pc, #220]	; (8006378 <LCD_DrawFastHLine+0x12c>)
 800629c:	2200      	movs	r2, #0
 800629e:	5e9b      	ldrsh	r3, [r3, r2]
 80062a0:	1dba      	adds	r2, r7, #6
 80062a2:	2100      	movs	r1, #0
 80062a4:	5e52      	ldrsh	r2, [r2, r1]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	da5f      	bge.n	800636a <LCD_DrawFastHLine+0x11e>
			(x + length - 1)) < 0))
 80062aa:	1dbb      	adds	r3, r7, #6
 80062ac:	881a      	ldrh	r2, [r3, #0]
 80062ae:	1cbb      	adds	r3, r7, #2
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	18d3      	adds	r3, r2, r3
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b29a      	uxth	r2, r3
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 80062ba:	210e      	movs	r1, #14
 80062bc:	187b      	adds	r3, r7, r1
 80062be:	801a      	strh	r2, [r3, #0]
 80062c0:	187b      	adds	r3, r7, r1
 80062c2:	2200      	movs	r2, #0
 80062c4:	5e9b      	ldrsh	r3, [r3, r2]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	db4f      	blt.n	800636a <LCD_DrawFastHLine+0x11e>
		return;

	if (x < 0) { // Clip left
 80062ca:	1dbb      	adds	r3, r7, #6
 80062cc:	2200      	movs	r2, #0
 80062ce:	5e9b      	ldrsh	r3, [r3, r2]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	da0a      	bge.n	80062ea <LCD_DrawFastHLine+0x9e>
		length += x;
 80062d4:	1cbb      	adds	r3, r7, #2
 80062d6:	881a      	ldrh	r2, [r3, #0]
 80062d8:	1dbb      	adds	r3, r7, #6
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	18d3      	adds	r3, r2, r3
 80062de:	b29a      	uxth	r2, r3
 80062e0:	1cbb      	adds	r3, r7, #2
 80062e2:	801a      	strh	r2, [r3, #0]
		x = 0;
 80062e4:	1dbb      	adds	r3, r7, #6
 80062e6:	2200      	movs	r2, #0
 80062e8:	801a      	strh	r2, [r3, #0]
	}

	if (x2 >= m_width) { // Clip right
 80062ea:	4b23      	ldr	r3, [pc, #140]	; (8006378 <LCD_DrawFastHLine+0x12c>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	5e9b      	ldrsh	r3, [r3, r2]
 80062f0:	210e      	movs	r1, #14
 80062f2:	187a      	adds	r2, r7, r1
 80062f4:	2000      	movs	r0, #0
 80062f6:	5e12      	ldrsh	r2, [r2, r0]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	db11      	blt.n	8006320 <LCD_DrawFastHLine+0xd4>
		x2 = m_width - 1;
 80062fc:	4b1e      	ldr	r3, [pc, #120]	; (8006378 <LCD_DrawFastHLine+0x12c>)
 80062fe:	2200      	movs	r2, #0
 8006300:	5e9b      	ldrsh	r3, [r3, r2]
 8006302:	b29b      	uxth	r3, r3
 8006304:	3b01      	subs	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	187b      	adds	r3, r7, r1
 800630a:	801a      	strh	r2, [r3, #0]
		length = x2 - x + 1;
 800630c:	187b      	adds	r3, r7, r1
 800630e:	881a      	ldrh	r2, [r3, #0]
 8006310:	1dbb      	adds	r3, r7, #6
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	b29b      	uxth	r3, r3
 8006318:	3301      	adds	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	1cbb      	adds	r3, r7, #2
 800631e:	801a      	strh	r2, [r3, #0]
	}

	LCD_SetAddrWindow(x, y, x2, y);
 8006320:	1dbb      	adds	r3, r7, #6
 8006322:	2000      	movs	r0, #0
 8006324:	5e18      	ldrsh	r0, [r3, r0]
 8006326:	1d3b      	adds	r3, r7, #4
 8006328:	2100      	movs	r1, #0
 800632a:	5e59      	ldrsh	r1, [r3, r1]
 800632c:	230e      	movs	r3, #14
 800632e:	18fb      	adds	r3, r7, r3
 8006330:	2200      	movs	r2, #0
 8006332:	5e9a      	ldrsh	r2, [r3, r2]
 8006334:	1d3b      	adds	r3, r7, #4
 8006336:	2400      	movs	r4, #0
 8006338:	5f1b      	ldrsh	r3, [r3, r4]
 800633a:	f001 f9e9 	bl	8007710 <LCD_SetAddrWindow>
	LCD_Flood(color, length);
 800633e:	1cbb      	adds	r3, r7, #2
 8006340:	2200      	movs	r2, #0
 8006342:	5e9a      	ldrsh	r2, [r3, r2]
 8006344:	003b      	movs	r3, r7
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	0011      	movs	r1, r2
 800634a:	0018      	movs	r0, r3
 800634c:	f000 feca 	bl	80070e4 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8006350:	4b09      	ldr	r3, [pc, #36]	; (8006378 <LCD_DrawFastHLine+0x12c>)
 8006352:	2200      	movs	r2, #0
 8006354:	5e9b      	ldrsh	r3, [r3, r2]
 8006356:	1e5a      	subs	r2, r3, #1
 8006358:	4b06      	ldr	r3, [pc, #24]	; (8006374 <LCD_DrawFastHLine+0x128>)
 800635a:	2100      	movs	r1, #0
 800635c:	5e5b      	ldrsh	r3, [r3, r1]
 800635e:	3b01      	subs	r3, #1
 8006360:	2100      	movs	r1, #0
 8006362:	2000      	movs	r0, #0
 8006364:	f001 f9d4 	bl	8007710 <LCD_SetAddrWindow>
 8006368:	e000      	b.n	800636c <LCD_DrawFastHLine+0x120>
		return;
 800636a:	46c0      	nop			; (mov r8, r8)

}
 800636c:	46bd      	mov	sp, r7
 800636e:	b004      	add	sp, #16
 8006370:	bdb0      	pop	{r4, r5, r7, pc}
 8006372:	46c0      	nop			; (mov r8, r8)
 8006374:	20000352 	.word	0x20000352
 8006378:	20000350 	.word	0x20000350

0800637c <LCD_DrawFastVLine>:
 * \param h		High of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 800637c:	b5b0      	push	{r4, r5, r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af02      	add	r7, sp, #8
 8006382:	0005      	movs	r5, r0
 8006384:	000c      	movs	r4, r1
 8006386:	0010      	movs	r0, r2
 8006388:	0019      	movs	r1, r3
 800638a:	1dbb      	adds	r3, r7, #6
 800638c:	1c2a      	adds	r2, r5, #0
 800638e:	801a      	strh	r2, [r3, #0]
 8006390:	1d3b      	adds	r3, r7, #4
 8006392:	1c22      	adds	r2, r4, #0
 8006394:	801a      	strh	r2, [r3, #0]
 8006396:	1cbb      	adds	r3, r7, #2
 8006398:	1c02      	adds	r2, r0, #0
 800639a:	801a      	strh	r2, [r3, #0]
 800639c:	003b      	movs	r3, r7
 800639e:	1c0a      	adds	r2, r1, #0
 80063a0:	801a      	strh	r2, [r3, #0]
	// Update in subclasses if desired!
	LCD_DrawLine(x, y, x, y + h - 1, color);
 80063a2:	1d3b      	adds	r3, r7, #4
 80063a4:	881a      	ldrh	r2, [r3, #0]
 80063a6:	1cbb      	adds	r3, r7, #2
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	18d3      	adds	r3, r2, r3
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	b21c      	sxth	r4, r3
 80063b4:	1dbb      	adds	r3, r7, #6
 80063b6:	2200      	movs	r2, #0
 80063b8:	5e9a      	ldrsh	r2, [r3, r2]
 80063ba:	1d3b      	adds	r3, r7, #4
 80063bc:	2100      	movs	r1, #0
 80063be:	5e59      	ldrsh	r1, [r3, r1]
 80063c0:	1dbb      	adds	r3, r7, #6
 80063c2:	2000      	movs	r0, #0
 80063c4:	5e18      	ldrsh	r0, [r3, r0]
 80063c6:	003b      	movs	r3, r7
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	0023      	movs	r3, r4
 80063ce:	f7ff fe43 	bl	8006058 <LCD_DrawLine>
}
 80063d2:	46c0      	nop			; (mov r8, r8)
 80063d4:	46bd      	mov	sp, r7
 80063d6:	b002      	add	sp, #8
 80063d8:	bdb0      	pop	{r4, r5, r7, pc}

080063da <LCD_DrawRoundRect>:
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 80063da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063dc:	b085      	sub	sp, #20
 80063de:	af02      	add	r7, sp, #8
 80063e0:	0005      	movs	r5, r0
 80063e2:	000c      	movs	r4, r1
 80063e4:	0010      	movs	r0, r2
 80063e6:	0019      	movs	r1, r3
 80063e8:	1dbb      	adds	r3, r7, #6
 80063ea:	1c2a      	adds	r2, r5, #0
 80063ec:	801a      	strh	r2, [r3, #0]
 80063ee:	1d3b      	adds	r3, r7, #4
 80063f0:	1c22      	adds	r2, r4, #0
 80063f2:	801a      	strh	r2, [r3, #0]
 80063f4:	1cbb      	adds	r3, r7, #2
 80063f6:	1c02      	adds	r2, r0, #0
 80063f8:	801a      	strh	r2, [r3, #0]
 80063fa:	003b      	movs	r3, r7
 80063fc:	1c0a      	adds	r2, r1, #0
 80063fe:	801a      	strh	r2, [r3, #0]
	// smarter version
	LCD_DrawFastHLine(x + r, y, w - 2 * r, color); // Top
 8006400:	1dbb      	adds	r3, r7, #6
 8006402:	881a      	ldrh	r2, [r3, #0]
 8006404:	2518      	movs	r5, #24
 8006406:	2408      	movs	r4, #8
 8006408:	193b      	adds	r3, r7, r4
 800640a:	195b      	adds	r3, r3, r5
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	18d3      	adds	r3, r2, r3
 8006410:	b29b      	uxth	r3, r3
 8006412:	b218      	sxth	r0, r3
 8006414:	1cbb      	adds	r3, r7, #2
 8006416:	881a      	ldrh	r2, [r3, #0]
 8006418:	193b      	adds	r3, r7, r4
 800641a:	195b      	adds	r3, r3, r5
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	18db      	adds	r3, r3, r3
 8006420:	b29b      	uxth	r3, r3
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	b29b      	uxth	r3, r3
 8006426:	b21a      	sxth	r2, r3
 8006428:	261c      	movs	r6, #28
 800642a:	193b      	adds	r3, r7, r4
 800642c:	199b      	adds	r3, r3, r6
 800642e:	881c      	ldrh	r4, [r3, #0]
 8006430:	1d3b      	adds	r3, r7, #4
 8006432:	2100      	movs	r1, #0
 8006434:	5e59      	ldrsh	r1, [r3, r1]
 8006436:	0023      	movs	r3, r4
 8006438:	f7ff ff08 	bl	800624c <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 800643c:	1dbb      	adds	r3, r7, #6
 800643e:	881a      	ldrh	r2, [r3, #0]
 8006440:	2408      	movs	r4, #8
 8006442:	193b      	adds	r3, r7, r4
 8006444:	195b      	adds	r3, r3, r5
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	18d3      	adds	r3, r2, r3
 800644a:	b29b      	uxth	r3, r3
 800644c:	b218      	sxth	r0, r3
 800644e:	1d3b      	adds	r3, r7, #4
 8006450:	881a      	ldrh	r2, [r3, #0]
 8006452:	003b      	movs	r3, r7
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	18d3      	adds	r3, r2, r3
 8006458:	b29b      	uxth	r3, r3
 800645a:	3b01      	subs	r3, #1
 800645c:	b29b      	uxth	r3, r3
 800645e:	b219      	sxth	r1, r3
 8006460:	1cbb      	adds	r3, r7, #2
 8006462:	881a      	ldrh	r2, [r3, #0]
 8006464:	193b      	adds	r3, r7, r4
 8006466:	195b      	adds	r3, r3, r5
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	18db      	adds	r3, r3, r3
 800646c:	b29b      	uxth	r3, r3
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	b29b      	uxth	r3, r3
 8006472:	b21a      	sxth	r2, r3
 8006474:	193b      	adds	r3, r7, r4
 8006476:	199b      	adds	r3, r3, r6
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	f7ff fee7 	bl	800624c <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y + r, h - 2 * r, color); // Left
 800647e:	1d3b      	adds	r3, r7, #4
 8006480:	881a      	ldrh	r2, [r3, #0]
 8006482:	193b      	adds	r3, r7, r4
 8006484:	195b      	adds	r3, r3, r5
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	18d3      	adds	r3, r2, r3
 800648a:	b29b      	uxth	r3, r3
 800648c:	b219      	sxth	r1, r3
 800648e:	003b      	movs	r3, r7
 8006490:	881a      	ldrh	r2, [r3, #0]
 8006492:	193b      	adds	r3, r7, r4
 8006494:	195b      	adds	r3, r3, r5
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	18db      	adds	r3, r3, r3
 800649a:	b29b      	uxth	r3, r3
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	b29b      	uxth	r3, r3
 80064a0:	b21a      	sxth	r2, r3
 80064a2:	193b      	adds	r3, r7, r4
 80064a4:	199b      	adds	r3, r3, r6
 80064a6:	881c      	ldrh	r4, [r3, #0]
 80064a8:	1dbb      	adds	r3, r7, #6
 80064aa:	2000      	movs	r0, #0
 80064ac:	5e18      	ldrsh	r0, [r3, r0]
 80064ae:	0023      	movs	r3, r4
 80064b0:	f7ff ff64 	bl	800637c <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 80064b4:	1dbb      	adds	r3, r7, #6
 80064b6:	881a      	ldrh	r2, [r3, #0]
 80064b8:	1cbb      	adds	r3, r7, #2
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	18d3      	adds	r3, r2, r3
 80064be:	b29b      	uxth	r3, r3
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	b218      	sxth	r0, r3
 80064c6:	1d3b      	adds	r3, r7, #4
 80064c8:	881a      	ldrh	r2, [r3, #0]
 80064ca:	2408      	movs	r4, #8
 80064cc:	193b      	adds	r3, r7, r4
 80064ce:	195b      	adds	r3, r3, r5
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	18d3      	adds	r3, r2, r3
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	b219      	sxth	r1, r3
 80064d8:	003b      	movs	r3, r7
 80064da:	881a      	ldrh	r2, [r3, #0]
 80064dc:	193b      	adds	r3, r7, r4
 80064de:	195b      	adds	r3, r3, r5
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	18db      	adds	r3, r3, r3
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	b21a      	sxth	r2, r3
 80064ec:	193b      	adds	r3, r7, r4
 80064ee:	199b      	adds	r3, r3, r6
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	f7ff ff43 	bl	800637c <LCD_DrawFastVLine>
	// draw four corners
	LCD_DrawCircleHelper(x + r, y + r, r, 1, color);
 80064f6:	1dbb      	adds	r3, r7, #6
 80064f8:	881a      	ldrh	r2, [r3, #0]
 80064fa:	193b      	adds	r3, r7, r4
 80064fc:	195b      	adds	r3, r3, r5
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	18d3      	adds	r3, r2, r3
 8006502:	b29b      	uxth	r3, r3
 8006504:	b218      	sxth	r0, r3
 8006506:	1d3b      	adds	r3, r7, #4
 8006508:	881a      	ldrh	r2, [r3, #0]
 800650a:	1939      	adds	r1, r7, r4
 800650c:	194b      	adds	r3, r1, r5
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	18d3      	adds	r3, r2, r3
 8006512:	b29b      	uxth	r3, r3
 8006514:	b219      	sxth	r1, r3
 8006516:	002c      	movs	r4, r5
 8006518:	2308      	movs	r3, #8
 800651a:	18fa      	adds	r2, r7, r3
 800651c:	1953      	adds	r3, r2, r5
 800651e:	2200      	movs	r2, #0
 8006520:	5e9a      	ldrsh	r2, [r3, r2]
 8006522:	0035      	movs	r5, r6
 8006524:	2608      	movs	r6, #8
 8006526:	19bb      	adds	r3, r7, r6
 8006528:	195b      	adds	r3, r3, r5
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	2301      	movs	r3, #1
 8006530:	f000 f873 	bl	800661a <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 8006534:	1dbb      	adds	r3, r7, #6
 8006536:	881a      	ldrh	r2, [r3, #0]
 8006538:	1cbb      	adds	r3, r7, #2
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	18d3      	adds	r3, r2, r3
 800653e:	b29a      	uxth	r2, r3
 8006540:	0031      	movs	r1, r6
 8006542:	187b      	adds	r3, r7, r1
 8006544:	191b      	adds	r3, r3, r4
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29b      	uxth	r3, r3
 8006550:	b218      	sxth	r0, r3
 8006552:	1d3b      	adds	r3, r7, #4
 8006554:	881a      	ldrh	r2, [r3, #0]
 8006556:	000e      	movs	r6, r1
 8006558:	19bb      	adds	r3, r7, r6
 800655a:	191b      	adds	r3, r3, r4
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	18d3      	adds	r3, r2, r3
 8006560:	b29b      	uxth	r3, r3
 8006562:	b219      	sxth	r1, r3
 8006564:	19bb      	adds	r3, r7, r6
 8006566:	191b      	adds	r3, r3, r4
 8006568:	2200      	movs	r2, #0
 800656a:	5e9a      	ldrsh	r2, [r3, r2]
 800656c:	19bb      	adds	r3, r7, r6
 800656e:	195b      	adds	r3, r3, r5
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	2302      	movs	r3, #2
 8006576:	f000 f850 	bl	800661a <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 800657a:	1dbb      	adds	r3, r7, #6
 800657c:	881a      	ldrh	r2, [r3, #0]
 800657e:	1cbb      	adds	r3, r7, #2
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	18d3      	adds	r3, r2, r3
 8006584:	b29a      	uxth	r2, r3
 8006586:	0021      	movs	r1, r4
 8006588:	19bb      	adds	r3, r7, r6
 800658a:	185b      	adds	r3, r3, r1
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	b29b      	uxth	r3, r3
 8006592:	3b01      	subs	r3, #1
 8006594:	b29b      	uxth	r3, r3
 8006596:	b218      	sxth	r0, r3
 8006598:	1d3b      	adds	r3, r7, #4
 800659a:	881a      	ldrh	r2, [r3, #0]
 800659c:	003b      	movs	r3, r7
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	18d3      	adds	r3, r2, r3
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	000c      	movs	r4, r1
 80065a6:	19bb      	adds	r3, r7, r6
 80065a8:	191b      	adds	r3, r3, r4
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	b219      	sxth	r1, r3
 80065b6:	19bb      	adds	r3, r7, r6
 80065b8:	191b      	adds	r3, r3, r4
 80065ba:	2200      	movs	r2, #0
 80065bc:	5e9a      	ldrsh	r2, [r3, r2]
 80065be:	19bb      	adds	r3, r7, r6
 80065c0:	195b      	adds	r3, r3, r5
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	2304      	movs	r3, #4
 80065c8:	f000 f827 	bl	800661a <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 80065cc:	1dbb      	adds	r3, r7, #6
 80065ce:	881a      	ldrh	r2, [r3, #0]
 80065d0:	0021      	movs	r1, r4
 80065d2:	19bb      	adds	r3, r7, r6
 80065d4:	185b      	adds	r3, r3, r1
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	18d3      	adds	r3, r2, r3
 80065da:	b29b      	uxth	r3, r3
 80065dc:	b218      	sxth	r0, r3
 80065de:	1d3b      	adds	r3, r7, #4
 80065e0:	881a      	ldrh	r2, [r3, #0]
 80065e2:	003b      	movs	r3, r7
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	18d3      	adds	r3, r2, r3
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	000c      	movs	r4, r1
 80065ec:	19bb      	adds	r3, r7, r6
 80065ee:	185b      	adds	r3, r3, r1
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	b219      	sxth	r1, r3
 80065fc:	19bb      	adds	r3, r7, r6
 80065fe:	191b      	adds	r3, r3, r4
 8006600:	2200      	movs	r2, #0
 8006602:	5e9a      	ldrsh	r2, [r3, r2]
 8006604:	19bb      	adds	r3, r7, r6
 8006606:	195b      	adds	r3, r3, r5
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	2308      	movs	r3, #8
 800660e:	f000 f804 	bl	800661a <LCD_DrawCircleHelper>
}
 8006612:	46c0      	nop			; (mov r8, r8)
 8006614:	46bd      	mov	sp, r7
 8006616:	b003      	add	sp, #12
 8006618:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800661a <LCD_DrawCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		uint16_t color) {
 800661a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800661c:	b087      	sub	sp, #28
 800661e:	af00      	add	r7, sp, #0
 8006620:	0005      	movs	r5, r0
 8006622:	000c      	movs	r4, r1
 8006624:	0010      	movs	r0, r2
 8006626:	0019      	movs	r1, r3
 8006628:	1dbb      	adds	r3, r7, #6
 800662a:	1c2a      	adds	r2, r5, #0
 800662c:	801a      	strh	r2, [r3, #0]
 800662e:	1d3b      	adds	r3, r7, #4
 8006630:	1c22      	adds	r2, r4, #0
 8006632:	801a      	strh	r2, [r3, #0]
 8006634:	1cbb      	adds	r3, r7, #2
 8006636:	1c02      	adds	r2, r0, #0
 8006638:	801a      	strh	r2, [r3, #0]
 800663a:	1c7b      	adds	r3, r7, #1
 800663c:	1c0a      	adds	r2, r1, #0
 800663e:	701a      	strb	r2, [r3, #0]
	int16_t f = 1 - r;
 8006640:	1cbb      	adds	r3, r7, #2
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	2201      	movs	r2, #1
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	b29a      	uxth	r2, r3
 800664a:	2316      	movs	r3, #22
 800664c:	18fb      	adds	r3, r7, r3
 800664e:	801a      	strh	r2, [r3, #0]
	int16_t ddF_x = 1;
 8006650:	2314      	movs	r3, #20
 8006652:	18fb      	adds	r3, r7, r3
 8006654:	2201      	movs	r2, #1
 8006656:	801a      	strh	r2, [r3, #0]
	int16_t ddF_y = -2 * r;
 8006658:	1cbb      	adds	r3, r7, #2
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	1c1a      	adds	r2, r3, #0
 800665e:	03d2      	lsls	r2, r2, #15
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	18db      	adds	r3, r3, r3
 8006664:	b29a      	uxth	r2, r3
 8006666:	2312      	movs	r3, #18
 8006668:	18fb      	adds	r3, r7, r3
 800666a:	801a      	strh	r2, [r3, #0]
	int16_t x = 0;
 800666c:	2310      	movs	r3, #16
 800666e:	18fb      	adds	r3, r7, r3
 8006670:	2200      	movs	r2, #0
 8006672:	801a      	strh	r2, [r3, #0]
	int16_t y = r;
 8006674:	230e      	movs	r3, #14
 8006676:	18fb      	adds	r3, r7, r3
 8006678:	1cba      	adds	r2, r7, #2
 800667a:	8812      	ldrh	r2, [r2, #0]
 800667c:	801a      	strh	r2, [r3, #0]

	while (x < y) {
 800667e:	e0fe      	b.n	800687e <LCD_DrawCircleHelper+0x264>
		if (f >= 0) {
 8006680:	2116      	movs	r1, #22
 8006682:	187b      	adds	r3, r7, r1
 8006684:	2200      	movs	r2, #0
 8006686:	5e9b      	ldrsh	r3, [r3, r2]
 8006688:	2b00      	cmp	r3, #0
 800668a:	db17      	blt.n	80066bc <LCD_DrawCircleHelper+0xa2>
			y--;
 800668c:	200e      	movs	r0, #14
 800668e:	183b      	adds	r3, r7, r0
 8006690:	2200      	movs	r2, #0
 8006692:	5e9b      	ldrsh	r3, [r3, r2]
 8006694:	b29b      	uxth	r3, r3
 8006696:	3b01      	subs	r3, #1
 8006698:	b29a      	uxth	r2, r3
 800669a:	183b      	adds	r3, r7, r0
 800669c:	801a      	strh	r2, [r3, #0]
			ddF_y += 2;
 800669e:	2012      	movs	r0, #18
 80066a0:	183b      	adds	r3, r7, r0
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	3302      	adds	r3, #2
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	183b      	adds	r3, r7, r0
 80066aa:	801a      	strh	r2, [r3, #0]
			f += ddF_y;
 80066ac:	187b      	adds	r3, r7, r1
 80066ae:	881a      	ldrh	r2, [r3, #0]
 80066b0:	183b      	adds	r3, r7, r0
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	18d3      	adds	r3, r2, r3
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	187b      	adds	r3, r7, r1
 80066ba:	801a      	strh	r2, [r3, #0]
		}
		x++;
 80066bc:	2110      	movs	r1, #16
 80066be:	187b      	adds	r3, r7, r1
 80066c0:	2200      	movs	r2, #0
 80066c2:	5e9b      	ldrsh	r3, [r3, r2]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3301      	adds	r3, #1
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	187b      	adds	r3, r7, r1
 80066cc:	801a      	strh	r2, [r3, #0]
		ddF_x += 2;
 80066ce:	2014      	movs	r0, #20
 80066d0:	183b      	adds	r3, r7, r0
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	3302      	adds	r3, #2
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	183b      	adds	r3, r7, r0
 80066da:	801a      	strh	r2, [r3, #0]
		f += ddF_x;
 80066dc:	2416      	movs	r4, #22
 80066de:	193b      	adds	r3, r7, r4
 80066e0:	881a      	ldrh	r2, [r3, #0]
 80066e2:	183b      	adds	r3, r7, r0
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	18d3      	adds	r3, r2, r3
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	193b      	adds	r3, r7, r4
 80066ec:	801a      	strh	r2, [r3, #0]
		if (cornername & 0x4) {
 80066ee:	1c7b      	adds	r3, r7, #1
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	2204      	movs	r2, #4
 80066f4:	4013      	ands	r3, r2
 80066f6:	d02c      	beq.n	8006752 <LCD_DrawCircleHelper+0x138>
			LCD_DrawPixel(x0 + x, y0 + y, color);
 80066f8:	1dbb      	adds	r3, r7, #6
 80066fa:	881a      	ldrh	r2, [r3, #0]
 80066fc:	000c      	movs	r4, r1
 80066fe:	187b      	adds	r3, r7, r1
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	18d3      	adds	r3, r2, r3
 8006704:	b29b      	uxth	r3, r3
 8006706:	b218      	sxth	r0, r3
 8006708:	1d3b      	adds	r3, r7, #4
 800670a:	881a      	ldrh	r2, [r3, #0]
 800670c:	250e      	movs	r5, #14
 800670e:	197b      	adds	r3, r7, r5
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	18d3      	adds	r3, r2, r3
 8006714:	b29b      	uxth	r3, r3
 8006716:	b219      	sxth	r1, r3
 8006718:	2628      	movs	r6, #40	; 0x28
 800671a:	2308      	movs	r3, #8
 800671c:	18fa      	adds	r2, r7, r3
 800671e:	1993      	adds	r3, r2, r6
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	001a      	movs	r2, r3
 8006724:	f7ff fc0c 	bl	8005f40 <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 + x, color);
 8006728:	1dbb      	adds	r3, r7, #6
 800672a:	881a      	ldrh	r2, [r3, #0]
 800672c:	197b      	adds	r3, r7, r5
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	18d3      	adds	r3, r2, r3
 8006732:	b29b      	uxth	r3, r3
 8006734:	b218      	sxth	r0, r3
 8006736:	1d3b      	adds	r3, r7, #4
 8006738:	881a      	ldrh	r2, [r3, #0]
 800673a:	193b      	adds	r3, r7, r4
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	18d3      	adds	r3, r2, r3
 8006740:	b29b      	uxth	r3, r3
 8006742:	b219      	sxth	r1, r3
 8006744:	2308      	movs	r3, #8
 8006746:	18fb      	adds	r3, r7, r3
 8006748:	199b      	adds	r3, r3, r6
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	001a      	movs	r2, r3
 800674e:	f7ff fbf7 	bl	8005f40 <LCD_DrawPixel>
		}
		if (cornername & 0x2) {
 8006752:	1c7b      	adds	r3, r7, #1
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	2202      	movs	r2, #2
 8006758:	4013      	ands	r3, r2
 800675a:	d02c      	beq.n	80067b6 <LCD_DrawCircleHelper+0x19c>
			LCD_DrawPixel(x0 + x, y0 - y, color);
 800675c:	1dbb      	adds	r3, r7, #6
 800675e:	881a      	ldrh	r2, [r3, #0]
 8006760:	2410      	movs	r4, #16
 8006762:	193b      	adds	r3, r7, r4
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	18d3      	adds	r3, r2, r3
 8006768:	b29b      	uxth	r3, r3
 800676a:	b218      	sxth	r0, r3
 800676c:	1d3b      	adds	r3, r7, #4
 800676e:	881a      	ldrh	r2, [r3, #0]
 8006770:	250e      	movs	r5, #14
 8006772:	197b      	adds	r3, r7, r5
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	b29b      	uxth	r3, r3
 800677a:	b219      	sxth	r1, r3
 800677c:	2628      	movs	r6, #40	; 0x28
 800677e:	2308      	movs	r3, #8
 8006780:	18fa      	adds	r2, r7, r3
 8006782:	1993      	adds	r3, r2, r6
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	001a      	movs	r2, r3
 8006788:	f7ff fbda 	bl	8005f40 <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 - x, color);
 800678c:	1dbb      	adds	r3, r7, #6
 800678e:	881a      	ldrh	r2, [r3, #0]
 8006790:	197b      	adds	r3, r7, r5
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	18d3      	adds	r3, r2, r3
 8006796:	b29b      	uxth	r3, r3
 8006798:	b218      	sxth	r0, r3
 800679a:	1d3b      	adds	r3, r7, #4
 800679c:	881a      	ldrh	r2, [r3, #0]
 800679e:	193b      	adds	r3, r7, r4
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	b219      	sxth	r1, r3
 80067a8:	2308      	movs	r3, #8
 80067aa:	18fb      	adds	r3, r7, r3
 80067ac:	199b      	adds	r3, r3, r6
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	001a      	movs	r2, r3
 80067b2:	f7ff fbc5 	bl	8005f40 <LCD_DrawPixel>
		}
		if (cornername & 0x8) {
 80067b6:	1c7b      	adds	r3, r7, #1
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2208      	movs	r2, #8
 80067bc:	4013      	ands	r3, r2
 80067be:	d02c      	beq.n	800681a <LCD_DrawCircleHelper+0x200>
			LCD_DrawPixel(x0 - y, y0 + x, color);
 80067c0:	1dbb      	adds	r3, r7, #6
 80067c2:	881a      	ldrh	r2, [r3, #0]
 80067c4:	240e      	movs	r4, #14
 80067c6:	193b      	adds	r3, r7, r4
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	b218      	sxth	r0, r3
 80067d0:	1d3b      	adds	r3, r7, #4
 80067d2:	881a      	ldrh	r2, [r3, #0]
 80067d4:	2510      	movs	r5, #16
 80067d6:	197b      	adds	r3, r7, r5
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	18d3      	adds	r3, r2, r3
 80067dc:	b29b      	uxth	r3, r3
 80067de:	b219      	sxth	r1, r3
 80067e0:	2628      	movs	r6, #40	; 0x28
 80067e2:	2308      	movs	r3, #8
 80067e4:	18fa      	adds	r2, r7, r3
 80067e6:	1993      	adds	r3, r2, r6
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	001a      	movs	r2, r3
 80067ec:	f7ff fba8 	bl	8005f40 <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 + y, color);
 80067f0:	1dbb      	adds	r3, r7, #6
 80067f2:	881a      	ldrh	r2, [r3, #0]
 80067f4:	197b      	adds	r3, r7, r5
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	b218      	sxth	r0, r3
 80067fe:	1d3b      	adds	r3, r7, #4
 8006800:	881a      	ldrh	r2, [r3, #0]
 8006802:	193b      	adds	r3, r7, r4
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	18d3      	adds	r3, r2, r3
 8006808:	b29b      	uxth	r3, r3
 800680a:	b219      	sxth	r1, r3
 800680c:	2308      	movs	r3, #8
 800680e:	18fb      	adds	r3, r7, r3
 8006810:	199b      	adds	r3, r3, r6
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	001a      	movs	r2, r3
 8006816:	f7ff fb93 	bl	8005f40 <LCD_DrawPixel>
		}
		if (cornername & 0x1) {
 800681a:	1c7b      	adds	r3, r7, #1
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2201      	movs	r2, #1
 8006820:	4013      	ands	r3, r2
 8006822:	d02c      	beq.n	800687e <LCD_DrawCircleHelper+0x264>
			LCD_DrawPixel(x0 - y, y0 - x, color);
 8006824:	1dbb      	adds	r3, r7, #6
 8006826:	881a      	ldrh	r2, [r3, #0]
 8006828:	240e      	movs	r4, #14
 800682a:	193b      	adds	r3, r7, r4
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	b29b      	uxth	r3, r3
 8006832:	b218      	sxth	r0, r3
 8006834:	1d3b      	adds	r3, r7, #4
 8006836:	881a      	ldrh	r2, [r3, #0]
 8006838:	2510      	movs	r5, #16
 800683a:	197b      	adds	r3, r7, r5
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	b29b      	uxth	r3, r3
 8006842:	b219      	sxth	r1, r3
 8006844:	2628      	movs	r6, #40	; 0x28
 8006846:	2308      	movs	r3, #8
 8006848:	18fa      	adds	r2, r7, r3
 800684a:	1993      	adds	r3, r2, r6
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	001a      	movs	r2, r3
 8006850:	f7ff fb76 	bl	8005f40 <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 - y, color);
 8006854:	1dbb      	adds	r3, r7, #6
 8006856:	881a      	ldrh	r2, [r3, #0]
 8006858:	197b      	adds	r3, r7, r5
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	b29b      	uxth	r3, r3
 8006860:	b218      	sxth	r0, r3
 8006862:	1d3b      	adds	r3, r7, #4
 8006864:	881a      	ldrh	r2, [r3, #0]
 8006866:	193b      	adds	r3, r7, r4
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	b29b      	uxth	r3, r3
 800686e:	b219      	sxth	r1, r3
 8006870:	2308      	movs	r3, #8
 8006872:	18fb      	adds	r3, r7, r3
 8006874:	199b      	adds	r3, r3, r6
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	001a      	movs	r2, r3
 800687a:	f7ff fb61 	bl	8005f40 <LCD_DrawPixel>
	while (x < y) {
 800687e:	2310      	movs	r3, #16
 8006880:	18fa      	adds	r2, r7, r3
 8006882:	230e      	movs	r3, #14
 8006884:	18fb      	adds	r3, r7, r3
 8006886:	2100      	movs	r1, #0
 8006888:	5e52      	ldrsh	r2, [r2, r1]
 800688a:	2100      	movs	r1, #0
 800688c:	5e5b      	ldrsh	r3, [r3, r1]
 800688e:	429a      	cmp	r2, r3
 8006890:	da00      	bge.n	8006894 <LCD_DrawCircleHelper+0x27a>
 8006892:	e6f5      	b.n	8006680 <LCD_DrawCircleHelper+0x66>
		}
	}
}
 8006894:	46c0      	nop			; (mov r8, r8)
 8006896:	46c0      	nop			; (mov r8, r8)
 8006898:	46bd      	mov	sp, r7
 800689a:	b007      	add	sp, #28
 800689c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080068a0 <LCD_DrawChar>:
 * \param size		Character Size
 * 
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
		uint16_t bg, uint8_t size) {
 80068a0:	b5b0      	push	{r4, r5, r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	0005      	movs	r5, r0
 80068a8:	000c      	movs	r4, r1
 80068aa:	0010      	movs	r0, r2
 80068ac:	0019      	movs	r1, r3
 80068ae:	1dbb      	adds	r3, r7, #6
 80068b0:	1c2a      	adds	r2, r5, #0
 80068b2:	801a      	strh	r2, [r3, #0]
 80068b4:	1d3b      	adds	r3, r7, #4
 80068b6:	1c22      	adds	r2, r4, #0
 80068b8:	801a      	strh	r2, [r3, #0]
 80068ba:	1cfb      	adds	r3, r7, #3
 80068bc:	1c02      	adds	r2, r0, #0
 80068be:	701a      	strb	r2, [r3, #0]
 80068c0:	003b      	movs	r3, r7
 80068c2:	1c0a      	adds	r2, r1, #0
 80068c4:	801a      	strh	r2, [r3, #0]
	if ((x >= m_width) || // Clip right
 80068c6:	4b8f      	ldr	r3, [pc, #572]	; (8006b04 <LCD_DrawChar+0x264>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	5e9b      	ldrsh	r3, [r3, r2]
 80068cc:	1dba      	adds	r2, r7, #6
 80068ce:	2100      	movs	r1, #0
 80068d0:	5e52      	ldrsh	r2, [r2, r1]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	db00      	blt.n	80068d8 <LCD_DrawChar+0x38>
 80068d6:	e110      	b.n	8006afa <LCD_DrawChar+0x25a>
			(y >= m_height) || // Clip bottom
 80068d8:	4b8b      	ldr	r3, [pc, #556]	; (8006b08 <LCD_DrawChar+0x268>)
 80068da:	2200      	movs	r2, #0
 80068dc:	5e9b      	ldrsh	r3, [r3, r2]
	if ((x >= m_width) || // Clip right
 80068de:	1d3a      	adds	r2, r7, #4
 80068e0:	2100      	movs	r1, #0
 80068e2:	5e52      	ldrsh	r2, [r2, r1]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	db00      	blt.n	80068ea <LCD_DrawChar+0x4a>
 80068e8:	e107      	b.n	8006afa <LCD_DrawChar+0x25a>
			((x + 6 * size - 1) < 0) || // Clip left
 80068ea:	1dbb      	adds	r3, r7, #6
 80068ec:	2100      	movs	r1, #0
 80068ee:	5e59      	ldrsh	r1, [r3, r1]
 80068f0:	2024      	movs	r0, #36	; 0x24
 80068f2:	183b      	adds	r3, r7, r0
 80068f4:	781a      	ldrb	r2, [r3, #0]
 80068f6:	0013      	movs	r3, r2
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	189b      	adds	r3, r3, r2
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	18cb      	adds	r3, r1, r3
			(y >= m_height) || // Clip bottom
 8006900:	2b00      	cmp	r3, #0
 8006902:	dc00      	bgt.n	8006906 <LCD_DrawChar+0x66>
 8006904:	e0f9      	b.n	8006afa <LCD_DrawChar+0x25a>
			((y + 8 * size - 1) < 0))   // Clip top
 8006906:	1d3b      	adds	r3, r7, #4
 8006908:	2200      	movs	r2, #0
 800690a:	5e9a      	ldrsh	r2, [r3, r2]
 800690c:	183b      	adds	r3, r7, r0
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	18d3      	adds	r3, r2, r3
			((x + 6 * size - 1) < 0) || // Clip left
 8006914:	2b00      	cmp	r3, #0
 8006916:	dc00      	bgt.n	800691a <LCD_DrawChar+0x7a>
 8006918:	e0ef      	b.n	8006afa <LCD_DrawChar+0x25a>
		return;

	for (int8_t i = 0; i < 6; i++) {
 800691a:	230f      	movs	r3, #15
 800691c:	18fb      	adds	r3, r7, r3
 800691e:	2200      	movs	r2, #0
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	e0e2      	b.n	8006aea <LCD_DrawChar+0x24a>
		uint8_t line;
		if (i == 5) {
 8006924:	230f      	movs	r3, #15
 8006926:	18fb      	adds	r3, r7, r3
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	b25b      	sxtb	r3, r3
 800692c:	2b05      	cmp	r3, #5
 800692e:	d104      	bne.n	800693a <LCD_DrawChar+0x9a>
			line = 0x0;
 8006930:	230e      	movs	r3, #14
 8006932:	18fb      	adds	r3, r7, r3
 8006934:	2200      	movs	r2, #0
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	e0ce      	b.n	8006ad8 <LCD_DrawChar+0x238>
		} else {
			line = font[c * 5 + i];   //pgm_read_byte(font+(c*5)+i);
 800693a:	1cfb      	adds	r3, r7, #3
 800693c:	781a      	ldrb	r2, [r3, #0]
 800693e:	0013      	movs	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	189a      	adds	r2, r3, r2
 8006944:	230f      	movs	r3, #15
 8006946:	18fb      	adds	r3, r7, r3
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	b25b      	sxtb	r3, r3
 800694c:	18d2      	adds	r2, r2, r3
 800694e:	230e      	movs	r3, #14
 8006950:	18fb      	adds	r3, r7, r3
 8006952:	496e      	ldr	r1, [pc, #440]	; (8006b0c <LCD_DrawChar+0x26c>)
 8006954:	5c8a      	ldrb	r2, [r1, r2]
 8006956:	701a      	strb	r2, [r3, #0]
			for (int8_t j = 0; j < 8; j++) {
 8006958:	230d      	movs	r3, #13
 800695a:	18fb      	adds	r3, r7, r3
 800695c:	2200      	movs	r2, #0
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	e0b3      	b.n	8006aca <LCD_DrawChar+0x22a>
				if (line & 0x1) {
 8006962:	230e      	movs	r3, #14
 8006964:	18fb      	adds	r3, r7, r3
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2201      	movs	r2, #1
 800696a:	4013      	ands	r3, r2
 800696c:	d04b      	beq.n	8006a06 <LCD_DrawChar+0x166>
					if (size == 1) { // default size
 800696e:	2324      	movs	r3, #36	; 0x24
 8006970:	18fb      	adds	r3, r7, r3
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d119      	bne.n	80069ac <LCD_DrawChar+0x10c>
						LCD_DrawPixel(x + i, y + j, color);
 8006978:	230f      	movs	r3, #15
 800697a:	18fb      	adds	r3, r7, r3
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	b25b      	sxtb	r3, r3
 8006980:	b29a      	uxth	r2, r3
 8006982:	1dbb      	adds	r3, r7, #6
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	18d3      	adds	r3, r2, r3
 8006988:	b29b      	uxth	r3, r3
 800698a:	b218      	sxth	r0, r3
 800698c:	230d      	movs	r3, #13
 800698e:	18fb      	adds	r3, r7, r3
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	b25b      	sxtb	r3, r3
 8006994:	b29a      	uxth	r2, r3
 8006996:	1d3b      	adds	r3, r7, #4
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	18d3      	adds	r3, r2, r3
 800699c:	b29b      	uxth	r3, r3
 800699e:	b219      	sxth	r1, r3
 80069a0:	003b      	movs	r3, r7
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	001a      	movs	r2, r3
 80069a6:	f7ff facb 	bl	8005f40 <LCD_DrawPixel>
 80069aa:	e07f      	b.n	8006aac <LCD_DrawChar+0x20c>
					} else {  // big size
						LCD_FillRect(x + (i * size), y + (j * size), size, size,
 80069ac:	230f      	movs	r3, #15
 80069ae:	18fb      	adds	r3, r7, r3
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	b25b      	sxtb	r3, r3
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2124      	movs	r1, #36	; 0x24
 80069b8:	187a      	adds	r2, r7, r1
 80069ba:	7812      	ldrb	r2, [r2, #0]
 80069bc:	b292      	uxth	r2, r2
 80069be:	4353      	muls	r3, r2
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	1dbb      	adds	r3, r7, #6
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	18d3      	adds	r3, r2, r3
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	b218      	sxth	r0, r3
 80069cc:	230d      	movs	r3, #13
 80069ce:	18fb      	adds	r3, r7, r3
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	b25b      	sxtb	r3, r3
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	000c      	movs	r4, r1
 80069d8:	187a      	adds	r2, r7, r1
 80069da:	7812      	ldrb	r2, [r2, #0]
 80069dc:	b292      	uxth	r2, r2
 80069de:	4353      	muls	r3, r2
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	1d3b      	adds	r3, r7, #4
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	18d3      	adds	r3, r2, r3
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	b219      	sxth	r1, r3
 80069ec:	193b      	adds	r3, r7, r4
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	b21a      	sxth	r2, r3
 80069f2:	193b      	adds	r3, r7, r4
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	b21c      	sxth	r4, r3
 80069f8:	003b      	movs	r3, r7
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	0023      	movs	r3, r4
 8006a00:	f000 f9a4 	bl	8006d4c <LCD_FillRect>
 8006a04:	e052      	b.n	8006aac <LCD_DrawChar+0x20c>
								color);
					}
				} else if (bg != color) {
 8006a06:	2420      	movs	r4, #32
 8006a08:	193b      	adds	r3, r7, r4
 8006a0a:	0039      	movs	r1, r7
 8006a0c:	881a      	ldrh	r2, [r3, #0]
 8006a0e:	880b      	ldrh	r3, [r1, #0]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d04b      	beq.n	8006aac <LCD_DrawChar+0x20c>
					if (size == 1) { // default size
 8006a14:	2324      	movs	r3, #36	; 0x24
 8006a16:	18fb      	adds	r3, r7, r3
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d119      	bne.n	8006a52 <LCD_DrawChar+0x1b2>
						LCD_DrawPixel(x + i, y + j, bg);
 8006a1e:	230f      	movs	r3, #15
 8006a20:	18fb      	adds	r3, r7, r3
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	b25b      	sxtb	r3, r3
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	1dbb      	adds	r3, r7, #6
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	18d3      	adds	r3, r2, r3
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	b218      	sxth	r0, r3
 8006a32:	230d      	movs	r3, #13
 8006a34:	18fb      	adds	r3, r7, r3
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	b25b      	sxtb	r3, r3
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	1d3b      	adds	r3, r7, #4
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	18d3      	adds	r3, r2, r3
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	b219      	sxth	r1, r3
 8006a46:	193b      	adds	r3, r7, r4
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	001a      	movs	r2, r3
 8006a4c:	f7ff fa78 	bl	8005f40 <LCD_DrawPixel>
 8006a50:	e02c      	b.n	8006aac <LCD_DrawChar+0x20c>
					} else {  // big size
						LCD_FillRect(x + i * size, y + j * size, size, size,
 8006a52:	230f      	movs	r3, #15
 8006a54:	18fb      	adds	r3, r7, r3
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	b25b      	sxtb	r3, r3
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2124      	movs	r1, #36	; 0x24
 8006a5e:	187a      	adds	r2, r7, r1
 8006a60:	7812      	ldrb	r2, [r2, #0]
 8006a62:	b292      	uxth	r2, r2
 8006a64:	4353      	muls	r3, r2
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	1dbb      	adds	r3, r7, #6
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	18d3      	adds	r3, r2, r3
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	b218      	sxth	r0, r3
 8006a72:	230d      	movs	r3, #13
 8006a74:	18fb      	adds	r3, r7, r3
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	b25b      	sxtb	r3, r3
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	000c      	movs	r4, r1
 8006a7e:	187a      	adds	r2, r7, r1
 8006a80:	7812      	ldrb	r2, [r2, #0]
 8006a82:	b292      	uxth	r2, r2
 8006a84:	4353      	muls	r3, r2
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	1d3b      	adds	r3, r7, #4
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	18d3      	adds	r3, r2, r3
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	b219      	sxth	r1, r3
 8006a92:	193b      	adds	r3, r7, r4
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	b21a      	sxth	r2, r3
 8006a98:	193b      	adds	r3, r7, r4
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	b21c      	sxth	r4, r3
 8006a9e:	2320      	movs	r3, #32
 8006aa0:	18fb      	adds	r3, r7, r3
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	0023      	movs	r3, r4
 8006aa8:	f000 f950 	bl	8006d4c <LCD_FillRect>
								bg);
					}
				}
				line >>= 1;
 8006aac:	220e      	movs	r2, #14
 8006aae:	18bb      	adds	r3, r7, r2
 8006ab0:	18ba      	adds	r2, r7, r2
 8006ab2:	7812      	ldrb	r2, [r2, #0]
 8006ab4:	0852      	lsrs	r2, r2, #1
 8006ab6:	701a      	strb	r2, [r3, #0]
			for (int8_t j = 0; j < 8; j++) {
 8006ab8:	210d      	movs	r1, #13
 8006aba:	187b      	adds	r3, r7, r1
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	b25b      	sxtb	r3, r3
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	187b      	adds	r3, r7, r1
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	230d      	movs	r3, #13
 8006acc:	18fb      	adds	r3, r7, r3
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	b25b      	sxtb	r3, r3
 8006ad2:	2b07      	cmp	r3, #7
 8006ad4:	dc00      	bgt.n	8006ad8 <LCD_DrawChar+0x238>
 8006ad6:	e744      	b.n	8006962 <LCD_DrawChar+0xc2>
	for (int8_t i = 0; i < 6; i++) {
 8006ad8:	210f      	movs	r1, #15
 8006ada:	187b      	adds	r3, r7, r1
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	b25b      	sxtb	r3, r3
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	187b      	adds	r3, r7, r1
 8006ae8:	701a      	strb	r2, [r3, #0]
 8006aea:	230f      	movs	r3, #15
 8006aec:	18fb      	adds	r3, r7, r3
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	b25b      	sxtb	r3, r3
 8006af2:	2b05      	cmp	r3, #5
 8006af4:	dc00      	bgt.n	8006af8 <LCD_DrawChar+0x258>
 8006af6:	e715      	b.n	8006924 <LCD_DrawChar+0x84>
 8006af8:	e000      	b.n	8006afc <LCD_DrawChar+0x25c>
		return;
 8006afa:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
}
 8006afc:	46bd      	mov	sp, r7
 8006afe:	b004      	add	sp, #16
 8006b00:	bdb0      	pop	{r4, r5, r7, pc}
 8006b02:	46c0      	nop			; (mov r8, r8)
 8006b04:	20000350 	.word	0x20000350
 8006b08:	20000352 	.word	0x20000352
 8006b0c:	0800ae10 	.word	0x0800ae10

08006b10 <LCD_FillCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		int16_t delta, uint16_t color) {
 8006b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b12:	46c6      	mov	lr, r8
 8006b14:	b500      	push	{lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	0005      	movs	r5, r0
 8006b1c:	000c      	movs	r4, r1
 8006b1e:	0010      	movs	r0, r2
 8006b20:	0019      	movs	r1, r3
 8006b22:	1dbb      	adds	r3, r7, #6
 8006b24:	1c2a      	adds	r2, r5, #0
 8006b26:	801a      	strh	r2, [r3, #0]
 8006b28:	1d3b      	adds	r3, r7, #4
 8006b2a:	1c22      	adds	r2, r4, #0
 8006b2c:	801a      	strh	r2, [r3, #0]
 8006b2e:	1cbb      	adds	r3, r7, #2
 8006b30:	1c02      	adds	r2, r0, #0
 8006b32:	801a      	strh	r2, [r3, #0]
 8006b34:	1c7b      	adds	r3, r7, #1
 8006b36:	1c0a      	adds	r2, r1, #0
 8006b38:	701a      	strb	r2, [r3, #0]
	int16_t f = 1 - r;
 8006b3a:	1cbb      	adds	r3, r7, #2
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	2316      	movs	r3, #22
 8006b46:	18fb      	adds	r3, r7, r3
 8006b48:	801a      	strh	r2, [r3, #0]
	int16_t ddF_x = 1;
 8006b4a:	2314      	movs	r3, #20
 8006b4c:	18fb      	adds	r3, r7, r3
 8006b4e:	2201      	movs	r2, #1
 8006b50:	801a      	strh	r2, [r3, #0]
	int16_t ddF_y = -2 * r;
 8006b52:	1cbb      	adds	r3, r7, #2
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	1c1a      	adds	r2, r3, #0
 8006b58:	03d2      	lsls	r2, r2, #15
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	18db      	adds	r3, r3, r3
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	2312      	movs	r3, #18
 8006b62:	18fb      	adds	r3, r7, r3
 8006b64:	801a      	strh	r2, [r3, #0]
	int16_t x = 0;
 8006b66:	2310      	movs	r3, #16
 8006b68:	18fb      	adds	r3, r7, r3
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	801a      	strh	r2, [r3, #0]
	int16_t y = r;
 8006b6e:	230e      	movs	r3, #14
 8006b70:	18fb      	adds	r3, r7, r3
 8006b72:	1cba      	adds	r2, r7, #2
 8006b74:	8812      	ldrh	r2, [r2, #0]
 8006b76:	801a      	strh	r2, [r3, #0]

	while (x < y) {
 8006b78:	e0d5      	b.n	8006d26 <LCD_FillCircleHelper+0x216>
		if (f >= 0) {
 8006b7a:	2116      	movs	r1, #22
 8006b7c:	187b      	adds	r3, r7, r1
 8006b7e:	2200      	movs	r2, #0
 8006b80:	5e9b      	ldrsh	r3, [r3, r2]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	db17      	blt.n	8006bb6 <LCD_FillCircleHelper+0xa6>
			y--;
 8006b86:	200e      	movs	r0, #14
 8006b88:	183b      	adds	r3, r7, r0
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	5e9b      	ldrsh	r3, [r3, r2]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	3b01      	subs	r3, #1
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	183b      	adds	r3, r7, r0
 8006b96:	801a      	strh	r2, [r3, #0]
			ddF_y += 2;
 8006b98:	2012      	movs	r0, #18
 8006b9a:	183b      	adds	r3, r7, r0
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	3302      	adds	r3, #2
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	183b      	adds	r3, r7, r0
 8006ba4:	801a      	strh	r2, [r3, #0]
			f += ddF_y;
 8006ba6:	187b      	adds	r3, r7, r1
 8006ba8:	881a      	ldrh	r2, [r3, #0]
 8006baa:	183b      	adds	r3, r7, r0
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	18d3      	adds	r3, r2, r3
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	187b      	adds	r3, r7, r1
 8006bb4:	801a      	strh	r2, [r3, #0]
		}
		x++;
 8006bb6:	2410      	movs	r4, #16
 8006bb8:	193b      	adds	r3, r7, r4
 8006bba:	2200      	movs	r2, #0
 8006bbc:	5e9b      	ldrsh	r3, [r3, r2]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	193b      	adds	r3, r7, r4
 8006bc6:	801a      	strh	r2, [r3, #0]
		ddF_x += 2;
 8006bc8:	2114      	movs	r1, #20
 8006bca:	187b      	adds	r3, r7, r1
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	3302      	adds	r3, #2
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	187b      	adds	r3, r7, r1
 8006bd4:	801a      	strh	r2, [r3, #0]
		f += ddF_x;
 8006bd6:	2016      	movs	r0, #22
 8006bd8:	183b      	adds	r3, r7, r0
 8006bda:	881a      	ldrh	r2, [r3, #0]
 8006bdc:	187b      	adds	r3, r7, r1
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	18d3      	adds	r3, r2, r3
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	183b      	adds	r3, r7, r0
 8006be6:	801a      	strh	r2, [r3, #0]

		if (cornername & 0x1) {
 8006be8:	1c7b      	adds	r3, r7, #1
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	2201      	movs	r2, #1
 8006bee:	4013      	ands	r3, r2
 8006bf0:	d049      	beq.n	8006c86 <LCD_FillCircleHelper+0x176>
			LCD_DrawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 8006bf2:	1dbb      	adds	r3, r7, #6
 8006bf4:	881a      	ldrh	r2, [r3, #0]
 8006bf6:	193b      	adds	r3, r7, r4
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	18d3      	adds	r3, r2, r3
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	b218      	sxth	r0, r3
 8006c00:	1d3b      	adds	r3, r7, #4
 8006c02:	881a      	ldrh	r2, [r3, #0]
 8006c04:	250e      	movs	r5, #14
 8006c06:	197b      	adds	r3, r7, r5
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	b219      	sxth	r1, r3
 8006c10:	197b      	adds	r3, r7, r5
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	18db      	adds	r3, r3, r3
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	2628      	movs	r6, #40	; 0x28
 8006c1a:	2308      	movs	r3, #8
 8006c1c:	18fb      	adds	r3, r7, r3
 8006c1e:	199b      	adds	r3, r3, r6
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	18d3      	adds	r3, r2, r3
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	3301      	adds	r3, #1
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	b21b      	sxth	r3, r3
 8006c2c:	4698      	mov	r8, r3
 8006c2e:	232c      	movs	r3, #44	; 0x2c
 8006c30:	2208      	movs	r2, #8
 8006c32:	4694      	mov	ip, r2
 8006c34:	44bc      	add	ip, r7
 8006c36:	4463      	add	r3, ip
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	4642      	mov	r2, r8
 8006c3c:	f7ff fb9e 	bl	800637c <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color);
 8006c40:	1dbb      	adds	r3, r7, #6
 8006c42:	881a      	ldrh	r2, [r3, #0]
 8006c44:	197b      	adds	r3, r7, r5
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	18d3      	adds	r3, r2, r3
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	b218      	sxth	r0, r3
 8006c4e:	1d3b      	adds	r3, r7, #4
 8006c50:	881a      	ldrh	r2, [r3, #0]
 8006c52:	193b      	adds	r3, r7, r4
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	b219      	sxth	r1, r3
 8006c5c:	193b      	adds	r3, r7, r4
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	18db      	adds	r3, r3, r3
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	2308      	movs	r3, #8
 8006c66:	18fb      	adds	r3, r7, r3
 8006c68:	199b      	adds	r3, r3, r6
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	18d3      	adds	r3, r2, r3
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	3301      	adds	r3, #1
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	b21a      	sxth	r2, r3
 8006c76:	232c      	movs	r3, #44	; 0x2c
 8006c78:	2408      	movs	r4, #8
 8006c7a:	46a4      	mov	ip, r4
 8006c7c:	44bc      	add	ip, r7
 8006c7e:	4463      	add	r3, ip
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	f7ff fb7b 	bl	800637c <LCD_DrawFastVLine>
		}
		if (cornername & 0x2) {
 8006c86:	1c7b      	adds	r3, r7, #1
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	d04a      	beq.n	8006d26 <LCD_FillCircleHelper+0x216>
			LCD_DrawFastVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color);
 8006c90:	1dbb      	adds	r3, r7, #6
 8006c92:	881a      	ldrh	r2, [r3, #0]
 8006c94:	2410      	movs	r4, #16
 8006c96:	193b      	adds	r3, r7, r4
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	b218      	sxth	r0, r3
 8006ca0:	1d3b      	adds	r3, r7, #4
 8006ca2:	881a      	ldrh	r2, [r3, #0]
 8006ca4:	250e      	movs	r5, #14
 8006ca6:	197b      	adds	r3, r7, r5
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	b219      	sxth	r1, r3
 8006cb0:	197b      	adds	r3, r7, r5
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	18db      	adds	r3, r3, r3
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	2628      	movs	r6, #40	; 0x28
 8006cba:	2308      	movs	r3, #8
 8006cbc:	18fb      	adds	r3, r7, r3
 8006cbe:	199b      	adds	r3, r3, r6
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	18d3      	adds	r3, r2, r3
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	b21b      	sxth	r3, r3
 8006ccc:	4698      	mov	r8, r3
 8006cce:	232c      	movs	r3, #44	; 0x2c
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	4694      	mov	ip, r2
 8006cd4:	44bc      	add	ip, r7
 8006cd6:	4463      	add	r3, ip
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	4642      	mov	r2, r8
 8006cdc:	f7ff fb4e 	bl	800637c <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color);
 8006ce0:	1dbb      	adds	r3, r7, #6
 8006ce2:	881a      	ldrh	r2, [r3, #0]
 8006ce4:	197b      	adds	r3, r7, r5
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	b218      	sxth	r0, r3
 8006cee:	1d3b      	adds	r3, r7, #4
 8006cf0:	881a      	ldrh	r2, [r3, #0]
 8006cf2:	193b      	adds	r3, r7, r4
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	b219      	sxth	r1, r3
 8006cfc:	193b      	adds	r3, r7, r4
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	18db      	adds	r3, r3, r3
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	2308      	movs	r3, #8
 8006d06:	18fb      	adds	r3, r7, r3
 8006d08:	199b      	adds	r3, r3, r6
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	18d3      	adds	r3, r2, r3
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	3301      	adds	r3, #1
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	b21a      	sxth	r2, r3
 8006d16:	232c      	movs	r3, #44	; 0x2c
 8006d18:	2408      	movs	r4, #8
 8006d1a:	46a4      	mov	ip, r4
 8006d1c:	44bc      	add	ip, r7
 8006d1e:	4463      	add	r3, ip
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	f7ff fb2b 	bl	800637c <LCD_DrawFastVLine>
	while (x < y) {
 8006d26:	2310      	movs	r3, #16
 8006d28:	18fa      	adds	r2, r7, r3
 8006d2a:	230e      	movs	r3, #14
 8006d2c:	18fb      	adds	r3, r7, r3
 8006d2e:	2100      	movs	r1, #0
 8006d30:	5e52      	ldrsh	r2, [r2, r1]
 8006d32:	2100      	movs	r1, #0
 8006d34:	5e5b      	ldrsh	r3, [r3, r1]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	da00      	bge.n	8006d3c <LCD_FillCircleHelper+0x22c>
 8006d3a:	e71e      	b.n	8006b7a <LCD_FillCircleHelper+0x6a>
		}
	}
}
 8006d3c:	46c0      	nop			; (mov r8, r8)
 8006d3e:	46c0      	nop			; (mov r8, r8)
 8006d40:	46bd      	mov	sp, r7
 8006d42:	b006      	add	sp, #24
 8006d44:	bc80      	pop	{r7}
 8006d46:	46b8      	mov	r8, r7
 8006d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006d4c <LCD_FillRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRect(int16_t x, int16_t y1, int16_t w, int16_t h,
		uint16_t fillcolor) {
 8006d4c:	b5b0      	push	{r4, r5, r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	0005      	movs	r5, r0
 8006d54:	000c      	movs	r4, r1
 8006d56:	0010      	movs	r0, r2
 8006d58:	0019      	movs	r1, r3
 8006d5a:	1dbb      	adds	r3, r7, #6
 8006d5c:	1c2a      	adds	r2, r5, #0
 8006d5e:	801a      	strh	r2, [r3, #0]
 8006d60:	1d3b      	adds	r3, r7, #4
 8006d62:	1c22      	adds	r2, r4, #0
 8006d64:	801a      	strh	r2, [r3, #0]
 8006d66:	1cbb      	adds	r3, r7, #2
 8006d68:	1c02      	adds	r2, r0, #0
 8006d6a:	801a      	strh	r2, [r3, #0]
 8006d6c:	003b      	movs	r3, r7
 8006d6e:	1c0a      	adds	r2, r1, #0
 8006d70:	801a      	strh	r2, [r3, #0]
	int16_t x2, y2;

	// Initial off-screen clipping
	if ((w <= 0) || (h <= 0) || (x >= m_width) || (y1 >= m_height)
 8006d72:	1cbb      	adds	r3, r7, #2
 8006d74:	2200      	movs	r2, #0
 8006d76:	5e9b      	ldrsh	r3, [r3, r2]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	dc00      	bgt.n	8006d7e <LCD_FillRect+0x32>
 8006d7c:	e0ba      	b.n	8006ef4 <LCD_FillRect+0x1a8>
 8006d7e:	003b      	movs	r3, r7
 8006d80:	2200      	movs	r2, #0
 8006d82:	5e9b      	ldrsh	r3, [r3, r2]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	dc00      	bgt.n	8006d8a <LCD_FillRect+0x3e>
 8006d88:	e0b4      	b.n	8006ef4 <LCD_FillRect+0x1a8>
 8006d8a:	4b5c      	ldr	r3, [pc, #368]	; (8006efc <LCD_FillRect+0x1b0>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	5e9b      	ldrsh	r3, [r3, r2]
 8006d90:	1dba      	adds	r2, r7, #6
 8006d92:	2100      	movs	r1, #0
 8006d94:	5e52      	ldrsh	r2, [r2, r1]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	db00      	blt.n	8006d9c <LCD_FillRect+0x50>
 8006d9a:	e0ab      	b.n	8006ef4 <LCD_FillRect+0x1a8>
 8006d9c:	4b58      	ldr	r3, [pc, #352]	; (8006f00 <LCD_FillRect+0x1b4>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	5e9b      	ldrsh	r3, [r3, r2]
 8006da2:	1d3a      	adds	r2, r7, #4
 8006da4:	2100      	movs	r1, #0
 8006da6:	5e52      	ldrsh	r2, [r2, r1]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	db00      	blt.n	8006dae <LCD_FillRect+0x62>
 8006dac:	e0a2      	b.n	8006ef4 <LCD_FillRect+0x1a8>
			|| ((x2 = x + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8006dae:	1dbb      	adds	r3, r7, #6
 8006db0:	881a      	ldrh	r2, [r3, #0]
 8006db2:	1cbb      	adds	r3, r7, #2
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	18d3      	adds	r3, r2, r3
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	210e      	movs	r1, #14
 8006dc0:	187b      	adds	r3, r7, r1
 8006dc2:	801a      	strh	r2, [r3, #0]
 8006dc4:	187b      	adds	r3, r7, r1
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	5e9b      	ldrsh	r3, [r3, r2]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	da00      	bge.n	8006dd0 <LCD_FillRect+0x84>
 8006dce:	e091      	b.n	8006ef4 <LCD_FillRect+0x1a8>
 8006dd0:	1d3b      	adds	r3, r7, #4
 8006dd2:	881a      	ldrh	r2, [r3, #0]
 8006dd4:	003b      	movs	r3, r7
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	18d3      	adds	r3, r2, r3
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	210c      	movs	r1, #12
 8006de2:	187b      	adds	r3, r7, r1
 8006de4:	801a      	strh	r2, [r3, #0]
 8006de6:	187b      	adds	r3, r7, r1
 8006de8:	2200      	movs	r2, #0
 8006dea:	5e9b      	ldrsh	r3, [r3, r2]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	da00      	bge.n	8006df2 <LCD_FillRect+0xa6>
 8006df0:	e080      	b.n	8006ef4 <LCD_FillRect+0x1a8>
		return;
	if (x < 0) { // Clip left
 8006df2:	1dbb      	adds	r3, r7, #6
 8006df4:	2200      	movs	r2, #0
 8006df6:	5e9b      	ldrsh	r3, [r3, r2]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	da0a      	bge.n	8006e12 <LCD_FillRect+0xc6>
		w += x;
 8006dfc:	1cbb      	adds	r3, r7, #2
 8006dfe:	881a      	ldrh	r2, [r3, #0]
 8006e00:	1dbb      	adds	r3, r7, #6
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	18d3      	adds	r3, r2, r3
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	1cbb      	adds	r3, r7, #2
 8006e0a:	801a      	strh	r2, [r3, #0]
		x = 0;
 8006e0c:	1dbb      	adds	r3, r7, #6
 8006e0e:	2200      	movs	r2, #0
 8006e10:	801a      	strh	r2, [r3, #0]
	}
	if (y1 < 0) { // Clip top
 8006e12:	1d3b      	adds	r3, r7, #4
 8006e14:	2200      	movs	r2, #0
 8006e16:	5e9b      	ldrsh	r3, [r3, r2]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	da0a      	bge.n	8006e32 <LCD_FillRect+0xe6>
		h += y1;
 8006e1c:	003b      	movs	r3, r7
 8006e1e:	881a      	ldrh	r2, [r3, #0]
 8006e20:	1d3b      	adds	r3, r7, #4
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	18d3      	adds	r3, r2, r3
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	003b      	movs	r3, r7
 8006e2a:	801a      	strh	r2, [r3, #0]
		y1 = 0;
 8006e2c:	1d3b      	adds	r3, r7, #4
 8006e2e:	2200      	movs	r2, #0
 8006e30:	801a      	strh	r2, [r3, #0]
	}
	if (x2 >= m_width) { // Clip right
 8006e32:	4b32      	ldr	r3, [pc, #200]	; (8006efc <LCD_FillRect+0x1b0>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	5e9b      	ldrsh	r3, [r3, r2]
 8006e38:	210e      	movs	r1, #14
 8006e3a:	187a      	adds	r2, r7, r1
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	5e12      	ldrsh	r2, [r2, r0]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	db11      	blt.n	8006e68 <LCD_FillRect+0x11c>
		x2 = m_width - 1;
 8006e44:	4b2d      	ldr	r3, [pc, #180]	; (8006efc <LCD_FillRect+0x1b0>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	5e9b      	ldrsh	r3, [r3, r2]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	187b      	adds	r3, r7, r1
 8006e52:	801a      	strh	r2, [r3, #0]
		w = x2 - x + 1;
 8006e54:	187b      	adds	r3, r7, r1
 8006e56:	881a      	ldrh	r2, [r3, #0]
 8006e58:	1dbb      	adds	r3, r7, #6
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	3301      	adds	r3, #1
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	1cbb      	adds	r3, r7, #2
 8006e66:	801a      	strh	r2, [r3, #0]
	}
	if (y2 >= m_height) { // Clip bottom
 8006e68:	4b25      	ldr	r3, [pc, #148]	; (8006f00 <LCD_FillRect+0x1b4>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	5e9b      	ldrsh	r3, [r3, r2]
 8006e6e:	210c      	movs	r1, #12
 8006e70:	187a      	adds	r2, r7, r1
 8006e72:	2000      	movs	r0, #0
 8006e74:	5e12      	ldrsh	r2, [r2, r0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	db11      	blt.n	8006e9e <LCD_FillRect+0x152>
		y2 = m_height - 1;
 8006e7a:	4b21      	ldr	r3, [pc, #132]	; (8006f00 <LCD_FillRect+0x1b4>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	5e9b      	ldrsh	r3, [r3, r2]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	3b01      	subs	r3, #1
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	187b      	adds	r3, r7, r1
 8006e88:	801a      	strh	r2, [r3, #0]
		h = y2 - y1 + 1;
 8006e8a:	187b      	adds	r3, r7, r1
 8006e8c:	881a      	ldrh	r2, [r3, #0]
 8006e8e:	1d3b      	adds	r3, r7, #4
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3301      	adds	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	003b      	movs	r3, r7
 8006e9c:	801a      	strh	r2, [r3, #0]
	}

	LCD_SetAddrWindow(x, y1, x2, y2);
 8006e9e:	1dbb      	adds	r3, r7, #6
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	5e18      	ldrsh	r0, [r3, r0]
 8006ea4:	1d3b      	adds	r3, r7, #4
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	5e59      	ldrsh	r1, [r3, r1]
 8006eaa:	230e      	movs	r3, #14
 8006eac:	18fb      	adds	r3, r7, r3
 8006eae:	2200      	movs	r2, #0
 8006eb0:	5e9a      	ldrsh	r2, [r3, r2]
 8006eb2:	230c      	movs	r3, #12
 8006eb4:	18fb      	adds	r3, r7, r3
 8006eb6:	2400      	movs	r4, #0
 8006eb8:	5f1b      	ldrsh	r3, [r3, r4]
 8006eba:	f000 fc29 	bl	8007710 <LCD_SetAddrWindow>
	LCD_Flood(fillcolor, (uint32_t) w * (uint32_t) h);
 8006ebe:	1cbb      	adds	r3, r7, #2
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	5e9b      	ldrsh	r3, [r3, r2]
 8006ec4:	003a      	movs	r2, r7
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	5e52      	ldrsh	r2, [r2, r1]
 8006eca:	435a      	muls	r2, r3
 8006ecc:	2320      	movs	r3, #32
 8006ece:	18fb      	adds	r3, r7, r3
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	0011      	movs	r1, r2
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	f000 f905 	bl	80070e4 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8006eda:	4b08      	ldr	r3, [pc, #32]	; (8006efc <LCD_FillRect+0x1b0>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	5e9b      	ldrsh	r3, [r3, r2]
 8006ee0:	1e5a      	subs	r2, r3, #1
 8006ee2:	4b07      	ldr	r3, [pc, #28]	; (8006f00 <LCD_FillRect+0x1b4>)
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	5e5b      	ldrsh	r3, [r3, r1]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	2100      	movs	r1, #0
 8006eec:	2000      	movs	r0, #0
 8006eee:	f000 fc0f 	bl	8007710 <LCD_SetAddrWindow>
 8006ef2:	e000      	b.n	8006ef6 <LCD_FillRect+0x1aa>
		return;
 8006ef4:	46c0      	nop			; (mov r8, r8)
}
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	b004      	add	sp, #16
 8006efa:	bdb0      	pop	{r4, r5, r7, pc}
 8006efc:	20000350 	.word	0x20000350
 8006f00:	20000352 	.word	0x20000352

08006f04 <LCD_FillRoundRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 8006f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af02      	add	r7, sp, #8
 8006f0a:	0005      	movs	r5, r0
 8006f0c:	000c      	movs	r4, r1
 8006f0e:	0010      	movs	r0, r2
 8006f10:	0019      	movs	r1, r3
 8006f12:	1dbb      	adds	r3, r7, #6
 8006f14:	1c2a      	adds	r2, r5, #0
 8006f16:	801a      	strh	r2, [r3, #0]
 8006f18:	1d3b      	adds	r3, r7, #4
 8006f1a:	1c22      	adds	r2, r4, #0
 8006f1c:	801a      	strh	r2, [r3, #0]
 8006f1e:	1cbb      	adds	r3, r7, #2
 8006f20:	1c02      	adds	r2, r0, #0
 8006f22:	801a      	strh	r2, [r3, #0]
 8006f24:	003b      	movs	r3, r7
 8006f26:	1c0a      	adds	r2, r1, #0
 8006f28:	801a      	strh	r2, [r3, #0]
	// smarter version
	LCD_FillRect(x + r, y, w - 2 * r, h, color);
 8006f2a:	1dbb      	adds	r3, r7, #6
 8006f2c:	881a      	ldrh	r2, [r3, #0]
 8006f2e:	2518      	movs	r5, #24
 8006f30:	2408      	movs	r4, #8
 8006f32:	193b      	adds	r3, r7, r4
 8006f34:	195b      	adds	r3, r3, r5
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	18d3      	adds	r3, r2, r3
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	b218      	sxth	r0, r3
 8006f3e:	1cbb      	adds	r3, r7, #2
 8006f40:	881a      	ldrh	r2, [r3, #0]
 8006f42:	1939      	adds	r1, r7, r4
 8006f44:	194b      	adds	r3, r1, r5
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	18db      	adds	r3, r3, r3
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	b21a      	sxth	r2, r3
 8006f52:	003b      	movs	r3, r7
 8006f54:	2400      	movs	r4, #0
 8006f56:	5f1c      	ldrsh	r4, [r3, r4]
 8006f58:	1d3b      	adds	r3, r7, #4
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	5e59      	ldrsh	r1, [r3, r1]
 8006f5e:	261c      	movs	r6, #28
 8006f60:	2308      	movs	r3, #8
 8006f62:	18fb      	adds	r3, r7, r3
 8006f64:	199b      	adds	r3, r3, r6
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	0023      	movs	r3, r4
 8006f6c:	f7ff feee 	bl	8006d4c <LCD_FillRect>

	// draw four corners
	LCD_FillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8006f70:	1dbb      	adds	r3, r7, #6
 8006f72:	881a      	ldrh	r2, [r3, #0]
 8006f74:	1cbb      	adds	r3, r7, #2
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	18d3      	adds	r3, r2, r3
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	2408      	movs	r4, #8
 8006f7e:	193b      	adds	r3, r7, r4
 8006f80:	195b      	adds	r3, r3, r5
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	b218      	sxth	r0, r3
 8006f8e:	1d3b      	adds	r3, r7, #4
 8006f90:	881a      	ldrh	r2, [r3, #0]
 8006f92:	193b      	adds	r3, r7, r4
 8006f94:	195b      	adds	r3, r3, r5
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	18d3      	adds	r3, r2, r3
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	b219      	sxth	r1, r3
 8006f9e:	003b      	movs	r3, r7
 8006fa0:	881a      	ldrh	r2, [r3, #0]
 8006fa2:	193b      	adds	r3, r7, r4
 8006fa4:	195b      	adds	r3, r3, r5
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	18db      	adds	r3, r3, r3
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	b21a      	sxth	r2, r3
 8006fb6:	193b      	adds	r3, r7, r4
 8006fb8:	195b      	adds	r3, r3, r5
 8006fba:	2400      	movs	r4, #0
 8006fbc:	5f1c      	ldrsh	r4, [r3, r4]
 8006fbe:	2308      	movs	r3, #8
 8006fc0:	18fb      	adds	r3, r7, r3
 8006fc2:	199b      	adds	r3, r3, r6
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	9301      	str	r3, [sp, #4]
 8006fc8:	9200      	str	r2, [sp, #0]
 8006fca:	2301      	movs	r3, #1
 8006fcc:	0022      	movs	r2, r4
 8006fce:	f7ff fd9f 	bl	8006b10 <LCD_FillCircleHelper>
	LCD_FillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8006fd2:	1dbb      	adds	r3, r7, #6
 8006fd4:	881a      	ldrh	r2, [r3, #0]
 8006fd6:	002c      	movs	r4, r5
 8006fd8:	2508      	movs	r5, #8
 8006fda:	197b      	adds	r3, r7, r5
 8006fdc:	191b      	adds	r3, r3, r4
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	18d3      	adds	r3, r2, r3
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	b218      	sxth	r0, r3
 8006fe6:	1d3b      	adds	r3, r7, #4
 8006fe8:	881a      	ldrh	r2, [r3, #0]
 8006fea:	197b      	adds	r3, r7, r5
 8006fec:	191b      	adds	r3, r3, r4
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	18d3      	adds	r3, r2, r3
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	b219      	sxth	r1, r3
 8006ff6:	003b      	movs	r3, r7
 8006ff8:	881a      	ldrh	r2, [r3, #0]
 8006ffa:	197b      	adds	r3, r7, r5
 8006ffc:	191b      	adds	r3, r3, r4
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	18db      	adds	r3, r3, r3
 8007002:	b29b      	uxth	r3, r3
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	b29b      	uxth	r3, r3
 8007008:	3b01      	subs	r3, #1
 800700a:	b29b      	uxth	r3, r3
 800700c:	b21a      	sxth	r2, r3
 800700e:	197b      	adds	r3, r7, r5
 8007010:	191b      	adds	r3, r3, r4
 8007012:	2400      	movs	r4, #0
 8007014:	5f1c      	ldrsh	r4, [r3, r4]
 8007016:	197b      	adds	r3, r7, r5
 8007018:	199b      	adds	r3, r3, r6
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	9301      	str	r3, [sp, #4]
 800701e:	9200      	str	r2, [sp, #0]
 8007020:	2302      	movs	r3, #2
 8007022:	0022      	movs	r2, r4
 8007024:	f7ff fd74 	bl	8006b10 <LCD_FillCircleHelper>
}
 8007028:	46c0      	nop			; (mov r8, r8)
 800702a:	46bd      	mov	sp, r7
 800702c:	b003      	add	sp, #12
 800702e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007030 <LCD_FillScreen>:
 * 
 * \param color	Color
 * 
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	0002      	movs	r2, r0
 8007038:	1dbb      	adds	r3, r7, #6
 800703a:	801a      	strh	r2, [r3, #0]
	// state, just need to set the address pointer to the top-left corner.
	// Although we could fill in any direction, the code uses the current
	// screen rotation because some users find it disconcerting when a
	// fill does not occur top-to-bottom.
	uint16_t x, y;
	switch (m_rotation) {
 800703c:	4b27      	ldr	r3, [pc, #156]	; (80070dc <LCD_FillScreen+0xac>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2b03      	cmp	r3, #3
 8007042:	d020      	beq.n	8007086 <LCD_FillScreen+0x56>
 8007044:	dc03      	bgt.n	800704e <LCD_FillScreen+0x1e>
 8007046:	2b01      	cmp	r3, #1
 8007048:	d00a      	beq.n	8007060 <LCD_FillScreen+0x30>
 800704a:	2b02      	cmp	r3, #2
 800704c:	d011      	beq.n	8007072 <LCD_FillScreen+0x42>
	default:
		x = 0;
 800704e:	230e      	movs	r3, #14
 8007050:	18fb      	adds	r3, r7, r3
 8007052:	2200      	movs	r2, #0
 8007054:	801a      	strh	r2, [r3, #0]
		y = 0;
 8007056:	230c      	movs	r3, #12
 8007058:	18fb      	adds	r3, r7, r3
 800705a:	2200      	movs	r2, #0
 800705c:	801a      	strh	r2, [r3, #0]
		break;
 800705e:	e01c      	b.n	800709a <LCD_FillScreen+0x6a>
	case 1:
		x = TFTWIDTH - 1;
 8007060:	230e      	movs	r3, #14
 8007062:	18fb      	adds	r3, r7, r3
 8007064:	22ef      	movs	r2, #239	; 0xef
 8007066:	801a      	strh	r2, [r3, #0]
		y = 0;
 8007068:	230c      	movs	r3, #12
 800706a:	18fb      	adds	r3, r7, r3
 800706c:	2200      	movs	r2, #0
 800706e:	801a      	strh	r2, [r3, #0]
		break;
 8007070:	e013      	b.n	800709a <LCD_FillScreen+0x6a>
	case 2:
		x = TFTWIDTH - 1;
 8007072:	230e      	movs	r3, #14
 8007074:	18fb      	adds	r3, r7, r3
 8007076:	22ef      	movs	r2, #239	; 0xef
 8007078:	801a      	strh	r2, [r3, #0]
		y = TFTHEIGHT - 1;
 800707a:	230c      	movs	r3, #12
 800707c:	18fb      	adds	r3, r7, r3
 800707e:	2240      	movs	r2, #64	; 0x40
 8007080:	32ff      	adds	r2, #255	; 0xff
 8007082:	801a      	strh	r2, [r3, #0]
		break;
 8007084:	e009      	b.n	800709a <LCD_FillScreen+0x6a>
	case 3:
		x = 0;
 8007086:	230e      	movs	r3, #14
 8007088:	18fb      	adds	r3, r7, r3
 800708a:	2200      	movs	r2, #0
 800708c:	801a      	strh	r2, [r3, #0]
		y = TFTHEIGHT - 1;
 800708e:	230c      	movs	r3, #12
 8007090:	18fb      	adds	r3, r7, r3
 8007092:	2240      	movs	r2, #64	; 0x40
 8007094:	32ff      	adds	r2, #255	; 0xff
 8007096:	801a      	strh	r2, [r3, #0]
		break;
 8007098:	46c0      	nop			; (mov r8, r8)
	}
	LCD_CS_LOW();
 800709a:	4b11      	ldr	r3, [pc, #68]	; (80070e0 <LCD_FillScreen+0xb0>)
 800709c:	2200      	movs	r2, #0
 800709e:	2100      	movs	r1, #0
 80070a0:	0018      	movs	r0, r3
 80070a2:	f7fe f9ed 	bl	8005480 <gpio_write>
	LCD_WriteRegister16(0x0020, x);
 80070a6:	230e      	movs	r3, #14
 80070a8:	18fb      	adds	r3, r7, r3
 80070aa:	881b      	ldrh	r3, [r3, #0]
 80070ac:	0019      	movs	r1, r3
 80070ae:	2020      	movs	r0, #32
 80070b0:	f000 fc38 	bl	8007924 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 80070b4:	230c      	movs	r3, #12
 80070b6:	18fb      	adds	r3, r7, r3
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	0019      	movs	r1, r3
 80070bc:	2021      	movs	r0, #33	; 0x21
 80070be:	f000 fc31 	bl	8007924 <LCD_WriteRegister16>

	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 80070c2:	2396      	movs	r3, #150	; 0x96
 80070c4:	025a      	lsls	r2, r3, #9
 80070c6:	1dbb      	adds	r3, r7, #6
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	0011      	movs	r1, r2
 80070cc:	0018      	movs	r0, r3
 80070ce:	f000 f809 	bl	80070e4 <LCD_Flood>
}
 80070d2:	46c0      	nop			; (mov r8, r8)
 80070d4:	46bd      	mov	sp, r7
 80070d6:	b004      	add	sp, #16
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	2000035d 	.word	0x2000035d
 80070e0:	48000400 	.word	0x48000400

080070e4 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 * 
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 80070e4:	b5b0      	push	{r4, r5, r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	0002      	movs	r2, r0
 80070ec:	6039      	str	r1, [r7, #0]
 80070ee:	1dbb      	adds	r3, r7, #6
 80070f0:	801a      	strh	r2, [r3, #0]
	uint16_t blocks;
	uint8_t i, hi = color >> 8, lo = color;
 80070f2:	1dbb      	adds	r3, r7, #6
 80070f4:	881b      	ldrh	r3, [r3, #0]
 80070f6:	0a1b      	lsrs	r3, r3, #8
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	240c      	movs	r4, #12
 80070fc:	193b      	adds	r3, r7, r4
 80070fe:	701a      	strb	r2, [r3, #0]
 8007100:	250b      	movs	r5, #11
 8007102:	197b      	adds	r3, r7, r5
 8007104:	1dba      	adds	r2, r7, #6
 8007106:	8812      	ldrh	r2, [r2, #0]
 8007108:	701a      	strb	r2, [r3, #0]

	LCD_CS_LOW();
 800710a:	4bc5      	ldr	r3, [pc, #788]	; (8007420 <LCD_Flood+0x33c>)
 800710c:	2200      	movs	r2, #0
 800710e:	2100      	movs	r1, #0
 8007110:	0018      	movs	r0, r3
 8007112:	f7fe f9b5 	bl	8005480 <gpio_write>
	LCD_CD_LOW();
 8007116:	2390      	movs	r3, #144	; 0x90
 8007118:	05db      	lsls	r3, r3, #23
 800711a:	2200      	movs	r2, #0
 800711c:	2104      	movs	r1, #4
 800711e:	0018      	movs	r0, r3
 8007120:	f7fe f9ae 	bl	8005480 <gpio_write>
	LCD_Write8(0x00); // High byte of GRAM register...
 8007124:	2000      	movs	r0, #0
 8007126:	f000 fb83 	bl	8007830 <LCD_Write8>
	LCD_Write8(0x22); // Write data to GRAM
 800712a:	2022      	movs	r0, #34	; 0x22
 800712c:	f000 fb80 	bl	8007830 <LCD_Write8>

	// Write first pixel normally, decrement counter by 1
	LCD_CD_HIGH();
 8007130:	2390      	movs	r3, #144	; 0x90
 8007132:	05db      	lsls	r3, r3, #23
 8007134:	2201      	movs	r2, #1
 8007136:	2104      	movs	r1, #4
 8007138:	0018      	movs	r0, r3
 800713a:	f7fe f9a1 	bl	8005480 <gpio_write>
	LCD_Write8(hi);
 800713e:	193b      	adds	r3, r7, r4
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	0018      	movs	r0, r3
 8007144:	f000 fb74 	bl	8007830 <LCD_Write8>
	LCD_Write8(lo);
 8007148:	197b      	adds	r3, r7, r5
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	0018      	movs	r0, r3
 800714e:	f000 fb6f 	bl	8007830 <LCD_Write8>
	len--;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	3b01      	subs	r3, #1
 8007156:	603b      	str	r3, [r7, #0]

	blocks = (uint16_t) (len / 64); // 64 pixels/block
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	099a      	lsrs	r2, r3, #6
 800715c:	230e      	movs	r3, #14
 800715e:	18fb      	adds	r3, r7, r3
 8007160:	801a      	strh	r2, [r3, #0]
	if (hi == lo) {
 8007162:	193a      	adds	r2, r7, r4
 8007164:	197b      	adds	r3, r7, r5
 8007166:	7812      	ldrb	r2, [r2, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d000      	beq.n	8007170 <LCD_Flood+0x8c>
 800716e:	e129      	b.n	80073c4 <LCD_Flood+0x2e0>
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (blocks--) {
 8007170:	e0ae      	b.n	80072d0 <LCD_Flood+0x1ec>
			i = 16; // 64 pixels/block / 4 pixels/pass
 8007172:	230d      	movs	r3, #13
 8007174:	18fb      	adds	r3, r7, r3
 8007176:	2210      	movs	r2, #16
 8007178:	701a      	strb	r2, [r3, #0]
			do {
				LCD_WR_STROBE();
 800717a:	2390      	movs	r3, #144	; 0x90
 800717c:	05db      	lsls	r3, r3, #23
 800717e:	2200      	movs	r2, #0
 8007180:	2101      	movs	r1, #1
 8007182:	0018      	movs	r0, r3
 8007184:	f7fe f97c 	bl	8005480 <gpio_write>
 8007188:	2001      	movs	r0, #1
 800718a:	f7fe fdbb 	bl	8005d04 <delay>
 800718e:	2390      	movs	r3, #144	; 0x90
 8007190:	05db      	lsls	r3, r3, #23
 8007192:	2201      	movs	r2, #1
 8007194:	2101      	movs	r1, #1
 8007196:	0018      	movs	r0, r3
 8007198:	f7fe f972 	bl	8005480 <gpio_write>
 800719c:	2001      	movs	r0, #1
 800719e:	f7fe fdb1 	bl	8005d04 <delay>
				LCD_WR_STROBE();
 80071a2:	2390      	movs	r3, #144	; 0x90
 80071a4:	05db      	lsls	r3, r3, #23
 80071a6:	2200      	movs	r2, #0
 80071a8:	2101      	movs	r1, #1
 80071aa:	0018      	movs	r0, r3
 80071ac:	f7fe f968 	bl	8005480 <gpio_write>
 80071b0:	2001      	movs	r0, #1
 80071b2:	f7fe fda7 	bl	8005d04 <delay>
 80071b6:	2390      	movs	r3, #144	; 0x90
 80071b8:	05db      	lsls	r3, r3, #23
 80071ba:	2201      	movs	r2, #1
 80071bc:	2101      	movs	r1, #1
 80071be:	0018      	movs	r0, r3
 80071c0:	f7fe f95e 	bl	8005480 <gpio_write>
 80071c4:	2001      	movs	r0, #1
 80071c6:	f7fe fd9d 	bl	8005d04 <delay>
				LCD_WR_STROBE();
 80071ca:	2390      	movs	r3, #144	; 0x90
 80071cc:	05db      	lsls	r3, r3, #23
 80071ce:	2200      	movs	r2, #0
 80071d0:	2101      	movs	r1, #1
 80071d2:	0018      	movs	r0, r3
 80071d4:	f7fe f954 	bl	8005480 <gpio_write>
 80071d8:	2001      	movs	r0, #1
 80071da:	f7fe fd93 	bl	8005d04 <delay>
 80071de:	2390      	movs	r3, #144	; 0x90
 80071e0:	05db      	lsls	r3, r3, #23
 80071e2:	2201      	movs	r2, #1
 80071e4:	2101      	movs	r1, #1
 80071e6:	0018      	movs	r0, r3
 80071e8:	f7fe f94a 	bl	8005480 <gpio_write>
 80071ec:	2001      	movs	r0, #1
 80071ee:	f7fe fd89 	bl	8005d04 <delay>
				LCD_WR_STROBE(); // 2 bytes/pixel
 80071f2:	2390      	movs	r3, #144	; 0x90
 80071f4:	05db      	lsls	r3, r3, #23
 80071f6:	2200      	movs	r2, #0
 80071f8:	2101      	movs	r1, #1
 80071fa:	0018      	movs	r0, r3
 80071fc:	f7fe f940 	bl	8005480 <gpio_write>
 8007200:	2001      	movs	r0, #1
 8007202:	f7fe fd7f 	bl	8005d04 <delay>
 8007206:	2390      	movs	r3, #144	; 0x90
 8007208:	05db      	lsls	r3, r3, #23
 800720a:	2201      	movs	r2, #1
 800720c:	2101      	movs	r1, #1
 800720e:	0018      	movs	r0, r3
 8007210:	f7fe f936 	bl	8005480 <gpio_write>
 8007214:	2001      	movs	r0, #1
 8007216:	f7fe fd75 	bl	8005d04 <delay>
				LCD_WR_STROBE();
 800721a:	2390      	movs	r3, #144	; 0x90
 800721c:	05db      	lsls	r3, r3, #23
 800721e:	2200      	movs	r2, #0
 8007220:	2101      	movs	r1, #1
 8007222:	0018      	movs	r0, r3
 8007224:	f7fe f92c 	bl	8005480 <gpio_write>
 8007228:	2001      	movs	r0, #1
 800722a:	f7fe fd6b 	bl	8005d04 <delay>
 800722e:	2390      	movs	r3, #144	; 0x90
 8007230:	05db      	lsls	r3, r3, #23
 8007232:	2201      	movs	r2, #1
 8007234:	2101      	movs	r1, #1
 8007236:	0018      	movs	r0, r3
 8007238:	f7fe f922 	bl	8005480 <gpio_write>
 800723c:	2001      	movs	r0, #1
 800723e:	f7fe fd61 	bl	8005d04 <delay>
				LCD_WR_STROBE();
 8007242:	2390      	movs	r3, #144	; 0x90
 8007244:	05db      	lsls	r3, r3, #23
 8007246:	2200      	movs	r2, #0
 8007248:	2101      	movs	r1, #1
 800724a:	0018      	movs	r0, r3
 800724c:	f7fe f918 	bl	8005480 <gpio_write>
 8007250:	2001      	movs	r0, #1
 8007252:	f7fe fd57 	bl	8005d04 <delay>
 8007256:	2390      	movs	r3, #144	; 0x90
 8007258:	05db      	lsls	r3, r3, #23
 800725a:	2201      	movs	r2, #1
 800725c:	2101      	movs	r1, #1
 800725e:	0018      	movs	r0, r3
 8007260:	f7fe f90e 	bl	8005480 <gpio_write>
 8007264:	2001      	movs	r0, #1
 8007266:	f7fe fd4d 	bl	8005d04 <delay>
				LCD_WR_STROBE();
 800726a:	2390      	movs	r3, #144	; 0x90
 800726c:	05db      	lsls	r3, r3, #23
 800726e:	2200      	movs	r2, #0
 8007270:	2101      	movs	r1, #1
 8007272:	0018      	movs	r0, r3
 8007274:	f7fe f904 	bl	8005480 <gpio_write>
 8007278:	2001      	movs	r0, #1
 800727a:	f7fe fd43 	bl	8005d04 <delay>
 800727e:	2390      	movs	r3, #144	; 0x90
 8007280:	05db      	lsls	r3, r3, #23
 8007282:	2201      	movs	r2, #1
 8007284:	2101      	movs	r1, #1
 8007286:	0018      	movs	r0, r3
 8007288:	f7fe f8fa 	bl	8005480 <gpio_write>
 800728c:	2001      	movs	r0, #1
 800728e:	f7fe fd39 	bl	8005d04 <delay>
				LCD_WR_STROBE(); // x 4 pixels
 8007292:	2390      	movs	r3, #144	; 0x90
 8007294:	05db      	lsls	r3, r3, #23
 8007296:	2200      	movs	r2, #0
 8007298:	2101      	movs	r1, #1
 800729a:	0018      	movs	r0, r3
 800729c:	f7fe f8f0 	bl	8005480 <gpio_write>
 80072a0:	2001      	movs	r0, #1
 80072a2:	f7fe fd2f 	bl	8005d04 <delay>
 80072a6:	2390      	movs	r3, #144	; 0x90
 80072a8:	05db      	lsls	r3, r3, #23
 80072aa:	2201      	movs	r2, #1
 80072ac:	2101      	movs	r1, #1
 80072ae:	0018      	movs	r0, r3
 80072b0:	f7fe f8e6 	bl	8005480 <gpio_write>
 80072b4:	2001      	movs	r0, #1
 80072b6:	f7fe fd25 	bl	8005d04 <delay>
			} while (--i);
 80072ba:	210d      	movs	r1, #13
 80072bc:	187b      	adds	r3, r7, r1
 80072be:	187a      	adds	r2, r7, r1
 80072c0:	7812      	ldrb	r2, [r2, #0]
 80072c2:	3a01      	subs	r2, #1
 80072c4:	701a      	strb	r2, [r3, #0]
 80072c6:	187b      	adds	r3, r7, r1
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d000      	beq.n	80072d0 <LCD_Flood+0x1ec>
 80072ce:	e754      	b.n	800717a <LCD_Flood+0x96>
		while (blocks--) {
 80072d0:	220e      	movs	r2, #14
 80072d2:	18bb      	adds	r3, r7, r2
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	18ba      	adds	r2, r7, r2
 80072d8:	1e59      	subs	r1, r3, #1
 80072da:	8011      	strh	r1, [r2, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d000      	beq.n	80072e2 <LCD_Flood+0x1fe>
 80072e0:	e747      	b.n	8007172 <LCD_Flood+0x8e>
		}
		// Fill any remaining pixels (1 to 64)
		for (i = (uint8_t) len & 63; i--;) {
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	230d      	movs	r3, #13
 80072e8:	18fb      	adds	r3, r7, r3
 80072ea:	213f      	movs	r1, #63	; 0x3f
 80072ec:	400a      	ands	r2, r1
 80072ee:	701a      	strb	r2, [r3, #0]
 80072f0:	e027      	b.n	8007342 <LCD_Flood+0x25e>
			LCD_WR_STROBE();
 80072f2:	2390      	movs	r3, #144	; 0x90
 80072f4:	05db      	lsls	r3, r3, #23
 80072f6:	2200      	movs	r2, #0
 80072f8:	2101      	movs	r1, #1
 80072fa:	0018      	movs	r0, r3
 80072fc:	f7fe f8c0 	bl	8005480 <gpio_write>
 8007300:	2001      	movs	r0, #1
 8007302:	f7fe fcff 	bl	8005d04 <delay>
 8007306:	2390      	movs	r3, #144	; 0x90
 8007308:	05db      	lsls	r3, r3, #23
 800730a:	2201      	movs	r2, #1
 800730c:	2101      	movs	r1, #1
 800730e:	0018      	movs	r0, r3
 8007310:	f7fe f8b6 	bl	8005480 <gpio_write>
 8007314:	2001      	movs	r0, #1
 8007316:	f7fe fcf5 	bl	8005d04 <delay>
			LCD_WR_STROBE();
 800731a:	2390      	movs	r3, #144	; 0x90
 800731c:	05db      	lsls	r3, r3, #23
 800731e:	2200      	movs	r2, #0
 8007320:	2101      	movs	r1, #1
 8007322:	0018      	movs	r0, r3
 8007324:	f7fe f8ac 	bl	8005480 <gpio_write>
 8007328:	2001      	movs	r0, #1
 800732a:	f7fe fceb 	bl	8005d04 <delay>
 800732e:	2390      	movs	r3, #144	; 0x90
 8007330:	05db      	lsls	r3, r3, #23
 8007332:	2201      	movs	r2, #1
 8007334:	2101      	movs	r1, #1
 8007336:	0018      	movs	r0, r3
 8007338:	f7fe f8a2 	bl	8005480 <gpio_write>
 800733c:	2001      	movs	r0, #1
 800733e:	f7fe fce1 	bl	8005d04 <delay>
		for (i = (uint8_t) len & 63; i--;) {
 8007342:	220d      	movs	r2, #13
 8007344:	18bb      	adds	r3, r7, r2
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	18ba      	adds	r2, r7, r2
 800734a:	1e59      	subs	r1, r3, #1
 800734c:	7011      	strb	r1, [r2, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1cf      	bne.n	80072f2 <LCD_Flood+0x20e>
 8007352:	e05b      	b.n	800740c <LCD_Flood+0x328>
		}
	} else {
		while (blocks--) {
			i = 16; // 64 pixels/block / 4 pixels/pass
 8007354:	230d      	movs	r3, #13
 8007356:	18fb      	adds	r3, r7, r3
 8007358:	2210      	movs	r2, #16
 800735a:	701a      	strb	r2, [r3, #0]
			do {
				LCD_Write8(hi);
 800735c:	240c      	movs	r4, #12
 800735e:	193b      	adds	r3, r7, r4
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	0018      	movs	r0, r3
 8007364:	f000 fa64 	bl	8007830 <LCD_Write8>
				LCD_Write8(lo);
 8007368:	250b      	movs	r5, #11
 800736a:	197b      	adds	r3, r7, r5
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	0018      	movs	r0, r3
 8007370:	f000 fa5e 	bl	8007830 <LCD_Write8>
				LCD_Write8(hi);
 8007374:	193b      	adds	r3, r7, r4
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	0018      	movs	r0, r3
 800737a:	f000 fa59 	bl	8007830 <LCD_Write8>
				LCD_Write8(lo);
 800737e:	197b      	adds	r3, r7, r5
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	0018      	movs	r0, r3
 8007384:	f000 fa54 	bl	8007830 <LCD_Write8>
				LCD_Write8(hi);
 8007388:	193b      	adds	r3, r7, r4
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	0018      	movs	r0, r3
 800738e:	f000 fa4f 	bl	8007830 <LCD_Write8>
				LCD_Write8(lo);
 8007392:	197b      	adds	r3, r7, r5
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	0018      	movs	r0, r3
 8007398:	f000 fa4a 	bl	8007830 <LCD_Write8>
				LCD_Write8(hi);
 800739c:	193b      	adds	r3, r7, r4
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	0018      	movs	r0, r3
 80073a2:	f000 fa45 	bl	8007830 <LCD_Write8>
				LCD_Write8(lo);
 80073a6:	197b      	adds	r3, r7, r5
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	0018      	movs	r0, r3
 80073ac:	f000 fa40 	bl	8007830 <LCD_Write8>
			} while (--i);
 80073b0:	210d      	movs	r1, #13
 80073b2:	187b      	adds	r3, r7, r1
 80073b4:	187a      	adds	r2, r7, r1
 80073b6:	7812      	ldrb	r2, [r2, #0]
 80073b8:	3a01      	subs	r2, #1
 80073ba:	701a      	strb	r2, [r3, #0]
 80073bc:	187b      	adds	r3, r7, r1
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1cb      	bne.n	800735c <LCD_Flood+0x278>
		while (blocks--) {
 80073c4:	220e      	movs	r2, #14
 80073c6:	18bb      	adds	r3, r7, r2
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	18ba      	adds	r2, r7, r2
 80073cc:	1e59      	subs	r1, r3, #1
 80073ce:	8011      	strh	r1, [r2, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1bf      	bne.n	8007354 <LCD_Flood+0x270>
		}
		for (i = (uint8_t) len & 63; i--;) {
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	230d      	movs	r3, #13
 80073da:	18fb      	adds	r3, r7, r3
 80073dc:	213f      	movs	r1, #63	; 0x3f
 80073de:	400a      	ands	r2, r1
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	e00b      	b.n	80073fc <LCD_Flood+0x318>
			LCD_Write8(hi);
 80073e4:	230c      	movs	r3, #12
 80073e6:	18fb      	adds	r3, r7, r3
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	0018      	movs	r0, r3
 80073ec:	f000 fa20 	bl	8007830 <LCD_Write8>
			LCD_Write8(lo);
 80073f0:	230b      	movs	r3, #11
 80073f2:	18fb      	adds	r3, r7, r3
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	0018      	movs	r0, r3
 80073f8:	f000 fa1a 	bl	8007830 <LCD_Write8>
		for (i = (uint8_t) len & 63; i--;) {
 80073fc:	220d      	movs	r2, #13
 80073fe:	18bb      	adds	r3, r7, r2
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	18ba      	adds	r2, r7, r2
 8007404:	1e59      	subs	r1, r3, #1
 8007406:	7011      	strb	r1, [r2, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1eb      	bne.n	80073e4 <LCD_Flood+0x300>
		}
	}
	LCD_CS_HIGH();
 800740c:	4b04      	ldr	r3, [pc, #16]	; (8007420 <LCD_Flood+0x33c>)
 800740e:	2201      	movs	r2, #1
 8007410:	2100      	movs	r1, #0
 8007412:	0018      	movs	r0, r3
 8007414:	f7fe f834 	bl	8005480 <gpio_write>
}
 8007418:	46c0      	nop			; (mov r8, r8)
 800741a:	46bd      	mov	sp, r7
 800741c:	b004      	add	sp, #16
 800741e:	bdb0      	pop	{r4, r5, r7, pc}
 8007420:	48000400 	.word	0x48000400

08007424 <LCD_Printf>:
 * \param fmt	Format text
 * \param 
 * 
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 8007424:	b40f      	push	{r0, r1, r2, r3}
 8007426:	b5b0      	push	{r4, r5, r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 800742c:	231c      	movs	r3, #28
 800742e:	18fb      	adds	r3, r7, r3
 8007430:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	69b9      	ldr	r1, [r7, #24]
 8007436:	4b3e      	ldr	r3, [pc, #248]	; (8007530 <LCD_Printf+0x10c>)
 8007438:	0018      	movs	r0, r3
 800743a:	f001 f961 	bl	8008700 <vsiprintf>
	va_end(lst);

	p = buf;
 800743e:	4b3c      	ldr	r3, [pc, #240]	; (8007530 <LCD_Printf+0x10c>)
 8007440:	607b      	str	r3, [r7, #4]
	while (*p) {
 8007442:	e069      	b.n	8007518 <LCD_Printf+0xf4>
		if (*p == '\n') {
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b0a      	cmp	r3, #10
 800744a:	d111      	bne.n	8007470 <LCD_Printf+0x4c>
			m_cursor_y += m_textsize * 8;
 800744c:	4b39      	ldr	r3, [pc, #228]	; (8007534 <LCD_Printf+0x110>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	b29b      	uxth	r3, r3
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	b29a      	uxth	r2, r3
 8007456:	4b38      	ldr	r3, [pc, #224]	; (8007538 <LCD_Printf+0x114>)
 8007458:	2100      	movs	r1, #0
 800745a:	5e5b      	ldrsh	r3, [r3, r1]
 800745c:	b29b      	uxth	r3, r3
 800745e:	18d3      	adds	r3, r2, r3
 8007460:	b29b      	uxth	r3, r3
 8007462:	b21a      	sxth	r2, r3
 8007464:	4b34      	ldr	r3, [pc, #208]	; (8007538 <LCD_Printf+0x114>)
 8007466:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8007468:	4b34      	ldr	r3, [pc, #208]	; (800753c <LCD_Printf+0x118>)
 800746a:	2200      	movs	r2, #0
 800746c:	801a      	strh	r2, [r3, #0]
 800746e:	e050      	b.n	8007512 <LCD_Printf+0xee>
		} else if (*p == '\r') {
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b0d      	cmp	r3, #13
 8007476:	d04c      	beq.n	8007512 <LCD_Printf+0xee>
			// skip em
		} else {
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor,
 8007478:	4b30      	ldr	r3, [pc, #192]	; (800753c <LCD_Printf+0x118>)
 800747a:	2000      	movs	r0, #0
 800747c:	5e18      	ldrsh	r0, [r3, r0]
 800747e:	4b2e      	ldr	r3, [pc, #184]	; (8007538 <LCD_Printf+0x114>)
 8007480:	2100      	movs	r1, #0
 8007482:	5e59      	ldrsh	r1, [r3, r1]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	781c      	ldrb	r4, [r3, #0]
 8007488:	4b2d      	ldr	r3, [pc, #180]	; (8007540 <LCD_Printf+0x11c>)
 800748a:	881d      	ldrh	r5, [r3, #0]
 800748c:	4b2d      	ldr	r3, [pc, #180]	; (8007544 <LCD_Printf+0x120>)
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	4a28      	ldr	r2, [pc, #160]	; (8007534 <LCD_Printf+0x110>)
 8007492:	7812      	ldrb	r2, [r2, #0]
 8007494:	9201      	str	r2, [sp, #4]
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	002b      	movs	r3, r5
 800749a:	0022      	movs	r2, r4
 800749c:	f7ff fa00 	bl	80068a0 <LCD_DrawChar>
					m_textsize);
			m_cursor_x += m_textsize * 6;
 80074a0:	4b24      	ldr	r3, [pc, #144]	; (8007534 <LCD_Printf+0x110>)
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	1c1a      	adds	r2, r3, #0
 80074a8:	1c13      	adds	r3, r2, #0
 80074aa:	18db      	adds	r3, r3, r3
 80074ac:	189b      	adds	r3, r3, r2
 80074ae:	18db      	adds	r3, r3, r3
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	4b22      	ldr	r3, [pc, #136]	; (800753c <LCD_Printf+0x118>)
 80074b4:	2100      	movs	r1, #0
 80074b6:	5e5b      	ldrsh	r3, [r3, r1]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	18d3      	adds	r3, r2, r3
 80074bc:	b29b      	uxth	r3, r3
 80074be:	b21a      	sxth	r2, r3
 80074c0:	4b1e      	ldr	r3, [pc, #120]	; (800753c <LCD_Printf+0x118>)
 80074c2:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - m_textsize * 6))) {
 80074c4:	4b20      	ldr	r3, [pc, #128]	; (8007548 <LCD_Printf+0x124>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d022      	beq.n	8007512 <LCD_Printf+0xee>
 80074cc:	4b1b      	ldr	r3, [pc, #108]	; (800753c <LCD_Printf+0x118>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	5e9b      	ldrsh	r3, [r3, r2]
 80074d2:	0019      	movs	r1, r3
 80074d4:	4b1d      	ldr	r3, [pc, #116]	; (800754c <LCD_Printf+0x128>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	5e9b      	ldrsh	r3, [r3, r2]
 80074da:	0018      	movs	r0, r3
 80074dc:	4b15      	ldr	r3, [pc, #84]	; (8007534 <LCD_Printf+0x110>)
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	001a      	movs	r2, r3
 80074e2:	0013      	movs	r3, r2
 80074e4:	0092      	lsls	r2, r2, #2
 80074e6:	1a9b      	subs	r3, r3, r2
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	18c3      	adds	r3, r0, r3
 80074ec:	4299      	cmp	r1, r3
 80074ee:	dd10      	ble.n	8007512 <LCD_Printf+0xee>
				m_cursor_y += m_textsize * 8;
 80074f0:	4b10      	ldr	r3, [pc, #64]	; (8007534 <LCD_Printf+0x110>)
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	00db      	lsls	r3, r3, #3
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	4b0f      	ldr	r3, [pc, #60]	; (8007538 <LCD_Printf+0x114>)
 80074fc:	2100      	movs	r1, #0
 80074fe:	5e5b      	ldrsh	r3, [r3, r1]
 8007500:	b29b      	uxth	r3, r3
 8007502:	18d3      	adds	r3, r2, r3
 8007504:	b29b      	uxth	r3, r3
 8007506:	b21a      	sxth	r2, r3
 8007508:	4b0b      	ldr	r3, [pc, #44]	; (8007538 <LCD_Printf+0x114>)
 800750a:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 800750c:	4b0b      	ldr	r3, [pc, #44]	; (800753c <LCD_Printf+0x118>)
 800750e:	2200      	movs	r2, #0
 8007510:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3301      	adds	r3, #1
 8007516:	607b      	str	r3, [r7, #4]
	while (*p) {
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d191      	bne.n	8007444 <LCD_Printf+0x20>
	}
}
 8007520:	46c0      	nop			; (mov r8, r8)
 8007522:	46c0      	nop			; (mov r8, r8)
 8007524:	46bd      	mov	sp, r7
 8007526:	b002      	add	sp, #8
 8007528:	bcb0      	pop	{r4, r5, r7}
 800752a:	bc08      	pop	{r3}
 800752c:	b004      	add	sp, #16
 800752e:	4718      	bx	r3
 8007530:	20000360 	.word	0x20000360
 8007534:	2000035c 	.word	0x2000035c
 8007538:	20000356 	.word	0x20000356
 800753c:	20000354 	.word	0x20000354
 8007540:	20000358 	.word	0x20000358
 8007544:	2000035a 	.word	0x2000035a
 8007548:	2000035e 	.word	0x2000035e
 800754c:	20000350 	.word	0x20000350

08007550 <LCD_Reset>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Reset(void) {
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 8007556:	4b2f      	ldr	r3, [pc, #188]	; (8007614 <LCD_Reset+0xc4>)
 8007558:	2201      	movs	r2, #1
 800755a:	2100      	movs	r1, #0
 800755c:	0018      	movs	r0, r3
 800755e:	f7fd ff8f 	bl	8005480 <gpio_write>
	LCD_WR_HIGH();
 8007562:	2390      	movs	r3, #144	; 0x90
 8007564:	05db      	lsls	r3, r3, #23
 8007566:	2201      	movs	r2, #1
 8007568:	2101      	movs	r1, #1
 800756a:	0018      	movs	r0, r3
 800756c:	f7fd ff88 	bl	8005480 <gpio_write>
	LCD_RD_HIGH();
 8007570:	2390      	movs	r3, #144	; 0x90
 8007572:	05db      	lsls	r3, r3, #23
 8007574:	2201      	movs	r2, #1
 8007576:	2100      	movs	r1, #0
 8007578:	0018      	movs	r0, r3
 800757a:	f7fd ff81 	bl	8005480 <gpio_write>

	LCD_RST_LOW();
 800757e:	4b26      	ldr	r3, [pc, #152]	; (8007618 <LCD_Reset+0xc8>)
 8007580:	2200      	movs	r2, #0
 8007582:	2101      	movs	r1, #1
 8007584:	0018      	movs	r0, r3
 8007586:	f7fd ff7b 	bl	8005480 <gpio_write>
	delay(100);
 800758a:	2064      	movs	r0, #100	; 0x64
 800758c:	f7fe fbba 	bl	8005d04 <delay>
	LCD_RST_HIGH();
 8007590:	4b21      	ldr	r3, [pc, #132]	; (8007618 <LCD_Reset+0xc8>)
 8007592:	2201      	movs	r2, #1
 8007594:	2101      	movs	r1, #1
 8007596:	0018      	movs	r0, r3
 8007598:	f7fd ff72 	bl	8005480 <gpio_write>

	// Data transfer sync
	LCD_CS_LOW();
 800759c:	4b1d      	ldr	r3, [pc, #116]	; (8007614 <LCD_Reset+0xc4>)
 800759e:	2200      	movs	r2, #0
 80075a0:	2100      	movs	r1, #0
 80075a2:	0018      	movs	r0, r3
 80075a4:	f7fd ff6c 	bl	8005480 <gpio_write>

	LCD_CD_LOW();
 80075a8:	2390      	movs	r3, #144	; 0x90
 80075aa:	05db      	lsls	r3, r3, #23
 80075ac:	2200      	movs	r2, #0
 80075ae:	2104      	movs	r1, #4
 80075b0:	0018      	movs	r0, r3
 80075b2:	f7fd ff65 	bl	8005480 <gpio_write>
	LCD_Write8(0x00);
 80075b6:	2000      	movs	r0, #0
 80075b8:	f000 f93a 	bl	8007830 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++)
 80075bc:	1dfb      	adds	r3, r7, #7
 80075be:	2200      	movs	r2, #0
 80075c0:	701a      	strb	r2, [r3, #0]
 80075c2:	e018      	b.n	80075f6 <LCD_Reset+0xa6>
		LCD_WR_STROBE(); // Three extra 0x00s
 80075c4:	2390      	movs	r3, #144	; 0x90
 80075c6:	05db      	lsls	r3, r3, #23
 80075c8:	2200      	movs	r2, #0
 80075ca:	2101      	movs	r1, #1
 80075cc:	0018      	movs	r0, r3
 80075ce:	f7fd ff57 	bl	8005480 <gpio_write>
 80075d2:	2001      	movs	r0, #1
 80075d4:	f7fe fb96 	bl	8005d04 <delay>
 80075d8:	2390      	movs	r3, #144	; 0x90
 80075da:	05db      	lsls	r3, r3, #23
 80075dc:	2201      	movs	r2, #1
 80075de:	2101      	movs	r1, #1
 80075e0:	0018      	movs	r0, r3
 80075e2:	f7fd ff4d 	bl	8005480 <gpio_write>
 80075e6:	2001      	movs	r0, #1
 80075e8:	f7fe fb8c 	bl	8005d04 <delay>
	for (uint8_t i = 0; i < 3; i++)
 80075ec:	1dfb      	adds	r3, r7, #7
 80075ee:	781a      	ldrb	r2, [r3, #0]
 80075f0:	1dfb      	adds	r3, r7, #7
 80075f2:	3201      	adds	r2, #1
 80075f4:	701a      	strb	r2, [r3, #0]
 80075f6:	1dfb      	adds	r3, r7, #7
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d9e2      	bls.n	80075c4 <LCD_Reset+0x74>
	LCD_CS_HIGH();
 80075fe:	4b05      	ldr	r3, [pc, #20]	; (8007614 <LCD_Reset+0xc4>)
 8007600:	2201      	movs	r2, #1
 8007602:	2100      	movs	r1, #0
 8007604:	0018      	movs	r0, r3
 8007606:	f7fd ff3b 	bl	8005480 <gpio_write>
}
 800760a:	46c0      	nop			; (mov r8, r8)
 800760c:	46bd      	mov	sp, r7
 800760e:	b002      	add	sp, #8
 8007610:	bd80      	pop	{r7, pc}
 8007612:	46c0      	nop			; (mov r8, r8)
 8007614:	48000400 	.word	0x48000400
 8007618:	48000800 	.word	0x48000800

0800761c <LCD_SetCursor>:
 * \param x		The x-coordinate
 * \param y		The y-coordinate
 * 
 * \return void
 */
void LCD_SetCursor(unsigned int x, unsigned int y) {
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
	m_cursor_x = x;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	b21a      	sxth	r2, r3
 800762a:	4b05      	ldr	r3, [pc, #20]	; (8007640 <LCD_SetCursor+0x24>)
 800762c:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	b21a      	sxth	r2, r3
 8007632:	4b04      	ldr	r3, [pc, #16]	; (8007644 <LCD_SetCursor+0x28>)
 8007634:	801a      	strh	r2, [r3, #0]
}
 8007636:	46c0      	nop			; (mov r8, r8)
 8007638:	46bd      	mov	sp, r7
 800763a:	b002      	add	sp, #8
 800763c:	bd80      	pop	{r7, pc}
 800763e:	46c0      	nop			; (mov r8, r8)
 8007640:	20000354 	.word	0x20000354
 8007644:	20000356 	.word	0x20000356

08007648 <LCD_SetTextSize>:
 * 
 * \param s	Size
 * 
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	0002      	movs	r2, r0
 8007650:	1dfb      	adds	r3, r7, #7
 8007652:	701a      	strb	r2, [r3, #0]
	m_textsize = (s > 0) ? s : 1;
 8007654:	1dfb      	adds	r3, r7, #7
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <LCD_SetTextSize+0x1a>
 800765c:	1dfb      	adds	r3, r7, #7
 800765e:	781a      	ldrb	r2, [r3, #0]
 8007660:	e000      	b.n	8007664 <LCD_SetTextSize+0x1c>
 8007662:	2201      	movs	r2, #1
 8007664:	4b02      	ldr	r3, [pc, #8]	; (8007670 <LCD_SetTextSize+0x28>)
 8007666:	701a      	strb	r2, [r3, #0]
}
 8007668:	46c0      	nop			; (mov r8, r8)
 800766a:	46bd      	mov	sp, r7
 800766c:	b002      	add	sp, #8
 800766e:	bd80      	pop	{r7, pc}
 8007670:	2000035c 	.word	0x2000035c

08007674 <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 * 
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	0002      	movs	r2, r0
 800767c:	1dbb      	adds	r3, r7, #6
 800767e:	801a      	strh	r2, [r3, #0]
 8007680:	1d3b      	adds	r3, r7, #4
 8007682:	1c0a      	adds	r2, r1, #0
 8007684:	801a      	strh	r2, [r3, #0]
	m_textcolor = c;
 8007686:	4b06      	ldr	r3, [pc, #24]	; (80076a0 <LCD_SetTextColor+0x2c>)
 8007688:	1dba      	adds	r2, r7, #6
 800768a:	8812      	ldrh	r2, [r2, #0]
 800768c:	801a      	strh	r2, [r3, #0]
	m_textbgcolor = b;
 800768e:	4b05      	ldr	r3, [pc, #20]	; (80076a4 <LCD_SetTextColor+0x30>)
 8007690:	1d3a      	adds	r2, r7, #4
 8007692:	8812      	ldrh	r2, [r2, #0]
 8007694:	801a      	strh	r2, [r3, #0]
}
 8007696:	46c0      	nop			; (mov r8, r8)
 8007698:	46bd      	mov	sp, r7
 800769a:	b002      	add	sp, #8
 800769c:	bd80      	pop	{r7, pc}
 800769e:	46c0      	nop			; (mov r8, r8)
 80076a0:	20000358 	.word	0x20000358
 80076a4:	2000035a 	.word	0x2000035a

080076a8 <LCD_SetRotation>:
 * 
 * \param x	rotation
 * 
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	0002      	movs	r2, r0
 80076b0:	1dfb      	adds	r3, r7, #7
 80076b2:	701a      	strb	r2, [r3, #0]
	m_rotation = (x & 3);
 80076b4:	1dfb      	adds	r3, r7, #7
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2203      	movs	r2, #3
 80076ba:	4013      	ands	r3, r2
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	4b11      	ldr	r3, [pc, #68]	; (8007704 <LCD_SetRotation+0x5c>)
 80076c0:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 80076c2:	4b10      	ldr	r3, [pc, #64]	; (8007704 <LCD_SetRotation+0x5c>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d010      	beq.n	80076ec <LCD_SetRotation+0x44>
 80076ca:	dc17      	bgt.n	80076fc <LCD_SetRotation+0x54>
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d005      	beq.n	80076dc <LCD_SetRotation+0x34>
 80076d0:	dc14      	bgt.n	80076fc <LCD_SetRotation+0x54>
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d002      	beq.n	80076dc <LCD_SetRotation+0x34>
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d008      	beq.n	80076ec <LCD_SetRotation+0x44>
	case 3:
		m_width = TFTHEIGHT;
		m_height = TFTWIDTH;
		break;
	}
}
 80076da:	e00f      	b.n	80076fc <LCD_SetRotation+0x54>
		m_width = TFTWIDTH;
 80076dc:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <LCD_SetRotation+0x60>)
 80076de:	22f0      	movs	r2, #240	; 0xf0
 80076e0:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 80076e2:	4b0a      	ldr	r3, [pc, #40]	; (800770c <LCD_SetRotation+0x64>)
 80076e4:	22a0      	movs	r2, #160	; 0xa0
 80076e6:	0052      	lsls	r2, r2, #1
 80076e8:	801a      	strh	r2, [r3, #0]
		break;
 80076ea:	e007      	b.n	80076fc <LCD_SetRotation+0x54>
		m_width = TFTHEIGHT;
 80076ec:	4b06      	ldr	r3, [pc, #24]	; (8007708 <LCD_SetRotation+0x60>)
 80076ee:	22a0      	movs	r2, #160	; 0xa0
 80076f0:	0052      	lsls	r2, r2, #1
 80076f2:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 80076f4:	4b05      	ldr	r3, [pc, #20]	; (800770c <LCD_SetRotation+0x64>)
 80076f6:	22f0      	movs	r2, #240	; 0xf0
 80076f8:	801a      	strh	r2, [r3, #0]
		break;
 80076fa:	46c0      	nop			; (mov r8, r8)
}
 80076fc:	46c0      	nop			; (mov r8, r8)
 80076fe:	46bd      	mov	sp, r7
 8007700:	b002      	add	sp, #8
 8007702:	bd80      	pop	{r7, pc}
 8007704:	2000035d 	.word	0x2000035d
 8007708:	20000350 	.word	0x20000350
 800770c:	20000352 	.word	0x20000352

08007710 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 * 
 * \return void
 */
void LCD_SetAddrWindow(int x1, int y1, int x2, int y2) {
 8007710:	b580      	push	{r7, lr}
 8007712:	b088      	sub	sp, #32
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
 800771c:	603b      	str	r3, [r7, #0]

	LCD_CS_LOW();
 800771e:	4b42      	ldr	r3, [pc, #264]	; (8007828 <LCD_SetAddrWindow+0x118>)
 8007720:	2200      	movs	r2, #0
 8007722:	2100      	movs	r1, #0
 8007724:	0018      	movs	r0, r3
 8007726:	f7fd feab 	bl	8005480 <gpio_write>
	// set to the top-left corner -- although fill operations can be
	// done in any direction, the current screen rotation is applied
	// because some users find it disconcerting when a fill does not
	// occur top-to-bottom.
	int x, y, t;
	switch (m_rotation) {
 800772a:	4b40      	ldr	r3, [pc, #256]	; (800782c <LCD_SetAddrWindow+0x11c>)
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	2b03      	cmp	r3, #3
 8007730:	d037      	beq.n	80077a2 <LCD_SetAddrWindow+0x92>
 8007732:	dc03      	bgt.n	800773c <LCD_SetAddrWindow+0x2c>
 8007734:	2b01      	cmp	r3, #1
 8007736:	d006      	beq.n	8007746 <LCD_SetAddrWindow+0x36>
 8007738:	2b02      	cmp	r3, #2
 800773a:	d017      	beq.n	800776c <LCD_SetAddrWindow+0x5c>
	default:
		x = x1;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	61fb      	str	r3, [r7, #28]
		y = y1;
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	61bb      	str	r3, [r7, #24]
		break;
 8007744:	e042      	b.n	80077cc <LCD_SetAddrWindow+0xbc>
	case 1:
		t = y1;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	617b      	str	r3, [r7, #20]
		y1 = x1;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	60bb      	str	r3, [r7, #8]
		x1 = TFTWIDTH - 1 - y2;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	22ef      	movs	r2, #239	; 0xef
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	60fb      	str	r3, [r7, #12]
		y2 = x2;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	603b      	str	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	22ef      	movs	r2, #239	; 0xef
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	607b      	str	r3, [r7, #4]
		x = x2;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	61fb      	str	r3, [r7, #28]
		y = y1;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	61bb      	str	r3, [r7, #24]
		break;
 800776a:	e02f      	b.n	80077cc <LCD_SetAddrWindow+0xbc>
	case 2:
		t = x1;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	617b      	str	r3, [r7, #20]
		x1 = TFTWIDTH - 1 - x2;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	22ef      	movs	r2, #239	; 0xef
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	60fb      	str	r3, [r7, #12]
		x2 = TFTWIDTH - 1 - t;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	22ef      	movs	r2, #239	; 0xef
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	607b      	str	r3, [r7, #4]
		t = y1;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	617b      	str	r3, [r7, #20]
		y1 = TFTHEIGHT - 1 - y2;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2240      	movs	r2, #64	; 0x40
 8007788:	32ff      	adds	r2, #255	; 0xff
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	60bb      	str	r3, [r7, #8]
		y2 = TFTHEIGHT - 1 - t;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2240      	movs	r2, #64	; 0x40
 8007792:	32ff      	adds	r2, #255	; 0xff
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	603b      	str	r3, [r7, #0]
		x = x2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	61fb      	str	r3, [r7, #28]
		y = y2;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	61bb      	str	r3, [r7, #24]
		break;
 80077a0:	e014      	b.n	80077cc <LCD_SetAddrWindow+0xbc>
	case 3:
		t = x1;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	617b      	str	r3, [r7, #20]
		x1 = y1;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - x2;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2240      	movs	r2, #64	; 0x40
 80077ae:	32ff      	adds	r2, #255	; 0xff
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	60bb      	str	r3, [r7, #8]
		x2 = y2;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	607b      	str	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2240      	movs	r2, #64	; 0x40
 80077bc:	32ff      	adds	r2, #255	; 0xff
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	603b      	str	r3, [r7, #0]
		x = x1;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	61fb      	str	r3, [r7, #28]
		y = y2;
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	61bb      	str	r3, [r7, #24]
		break;
 80077ca:	46c0      	nop			; (mov r8, r8)
	}

	LCD_WriteRegister16(0x0050, x1); // Set address window
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	0019      	movs	r1, r3
 80077d2:	2050      	movs	r0, #80	; 0x50
 80077d4:	f000 f8a6 	bl	8007924 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0051, x2);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	0019      	movs	r1, r3
 80077de:	2051      	movs	r0, #81	; 0x51
 80077e0:	f000 f8a0 	bl	8007924 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0052, y1);
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	0019      	movs	r1, r3
 80077ea:	2052      	movs	r0, #82	; 0x52
 80077ec:	f000 f89a 	bl	8007924 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0053, y2);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	0019      	movs	r1, r3
 80077f6:	2053      	movs	r0, #83	; 0x53
 80077f8:	f000 f894 	bl	8007924 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0020, x); // Set address counter to top left
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	0019      	movs	r1, r3
 8007802:	2020      	movs	r0, #32
 8007804:	f000 f88e 	bl	8007924 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	b29b      	uxth	r3, r3
 800780c:	0019      	movs	r1, r3
 800780e:	2021      	movs	r0, #33	; 0x21
 8007810:	f000 f888 	bl	8007924 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8007814:	4b04      	ldr	r3, [pc, #16]	; (8007828 <LCD_SetAddrWindow+0x118>)
 8007816:	2201      	movs	r2, #1
 8007818:	2100      	movs	r1, #0
 800781a:	0018      	movs	r0, r3
 800781c:	f7fd fe30 	bl	8005480 <gpio_write>
}
 8007820:	46c0      	nop			; (mov r8, r8)
 8007822:	46bd      	mov	sp, r7
 8007824:	b008      	add	sp, #32
 8007826:	bd80      	pop	{r7, pc}
 8007828:	48000400 	.word	0x48000400
 800782c:	2000035d 	.word	0x2000035d

08007830 <LCD_Write8>:
 * 
 * \param data	8-Bit Data
 * 
 * \return void
 */
void LCD_Write8(uint8_t data) {
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	0002      	movs	r2, r0
 8007838:	1dfb      	adds	r3, r7, #7
 800783a:	701a      	strb	r2, [r3, #0]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 800783c:	2390      	movs	r3, #144	; 0x90
 800783e:	05db      	lsls	r3, r3, #23
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	4a33      	ldr	r2, [pc, #204]	; (8007910 <LCD_Write8+0xe0>)
 8007844:	401a      	ands	r2, r3
 8007846:	1dfb      	adds	r3, r7, #7
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	025b      	lsls	r3, r3, #9
 800784c:	0019      	movs	r1, r3
 800784e:	2380      	movs	r3, #128	; 0x80
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	400b      	ands	r3, r1
 8007854:	431a      	orrs	r2, r3
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8007856:	1dfb      	adds	r3, r7, #7
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	021b      	lsls	r3, r3, #8
 800785c:	0019      	movs	r1, r3
 800785e:	2380      	movs	r3, #128	; 0x80
 8007860:	00db      	lsls	r3, r3, #3
 8007862:	400b      	ands	r3, r1
 8007864:	431a      	orrs	r2, r3
 8007866:	0011      	movs	r1, r2
 8007868:	1dfb      	adds	r3, r7, #7
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	001a      	movs	r2, r3
 8007870:	2380      	movs	r3, #128	; 0x80
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	401a      	ands	r2, r3
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8007876:	2390      	movs	r3, #144	; 0x90
 8007878:	05db      	lsls	r3, r3, #23
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 800787a:	430a      	orrs	r2, r1
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 800787c:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 800787e:	4b25      	ldr	r3, [pc, #148]	; (8007914 <LCD_Write8+0xe4>)
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	4a25      	ldr	r2, [pc, #148]	; (8007918 <LCD_Write8+0xe8>)
 8007884:	401a      	ands	r2, r3
 8007886:	1dfb      	adds	r3, r7, #7
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	2108      	movs	r1, #8
 800788c:	400b      	ands	r3, r1
 800788e:	431a      	orrs	r2, r3
 8007890:	1dfb      	adds	r3, r7, #7
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	0019      	movs	r1, r3
 8007898:	2320      	movs	r3, #32
 800789a:	400b      	ands	r3, r1
 800789c:	431a      	orrs	r2, r3
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 800789e:	1dfb      	adds	r3, r7, #7
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	105b      	asrs	r3, r3, #1
 80078a4:	0019      	movs	r1, r3
 80078a6:	2310      	movs	r3, #16
 80078a8:	400b      	ands	r3, r1
 80078aa:	431a      	orrs	r2, r3
 80078ac:	0011      	movs	r1, r2
 80078ae:	1dfb      	adds	r3, r7, #7
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	011b      	lsls	r3, r3, #4
 80078b4:	001a      	movs	r2, r3
 80078b6:	2380      	movs	r3, #128	; 0x80
 80078b8:	00db      	lsls	r3, r3, #3
 80078ba:	401a      	ands	r2, r3
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 80078bc:	4b15      	ldr	r3, [pc, #84]	; (8007914 <LCD_Write8+0xe4>)
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 80078be:	430a      	orrs	r2, r1
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 80078c0:	615a      	str	r2, [r3, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 80078c2:	4b16      	ldr	r3, [pc, #88]	; (800791c <LCD_Write8+0xec>)
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	4a16      	ldr	r2, [pc, #88]	; (8007920 <LCD_Write8+0xf0>)
 80078c8:	4013      	ands	r3, r2
 80078ca:	0019      	movs	r1, r3
 80078cc:	1dfb      	adds	r3, r7, #7
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	019b      	lsls	r3, r3, #6
 80078d2:	001a      	movs	r2, r3
 80078d4:	2380      	movs	r3, #128	; 0x80
 80078d6:	401a      	ands	r2, r3
 80078d8:	4b10      	ldr	r3, [pc, #64]	; (800791c <LCD_Write8+0xec>)
 80078da:	430a      	orrs	r2, r1
 80078dc:	615a      	str	r2, [r3, #20]

	LCD_WR_STROBE();
 80078de:	2390      	movs	r3, #144	; 0x90
 80078e0:	05db      	lsls	r3, r3, #23
 80078e2:	2200      	movs	r2, #0
 80078e4:	2101      	movs	r1, #1
 80078e6:	0018      	movs	r0, r3
 80078e8:	f7fd fdca 	bl	8005480 <gpio_write>
 80078ec:	2001      	movs	r0, #1
 80078ee:	f7fe fa09 	bl	8005d04 <delay>
 80078f2:	2390      	movs	r3, #144	; 0x90
 80078f4:	05db      	lsls	r3, r3, #23
 80078f6:	2201      	movs	r2, #1
 80078f8:	2101      	movs	r1, #1
 80078fa:	0018      	movs	r0, r3
 80078fc:	f7fd fdc0 	bl	8005480 <gpio_write>
 8007900:	2001      	movs	r0, #1
 8007902:	f7fe f9ff 	bl	8005d04 <delay>
}
 8007906:	46c0      	nop			; (mov r8, r8)
 8007908:	46bd      	mov	sp, r7
 800790a:	b002      	add	sp, #8
 800790c:	bd80      	pop	{r7, pc}
 800790e:	46c0      	nop			; (mov r8, r8)
 8007910:	0000f8ff 	.word	0x0000f8ff
 8007914:	48000400 	.word	0x48000400
 8007918:	0000fbc7 	.word	0x0000fbc7
 800791c:	48000800 	.word	0x48000800
 8007920:	0000ff7f 	.word	0x0000ff7f

08007924 <LCD_WriteRegister16>:
 * \param a		Register
 * \param d		Data
 * 
 * \return void
 */
void LCD_WriteRegister16(uint16_t a, uint16_t d) {
 8007924:	b5b0      	push	{r4, r5, r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	0002      	movs	r2, r0
 800792c:	1dbb      	adds	r3, r7, #6
 800792e:	801a      	strh	r2, [r3, #0]
 8007930:	1d3b      	adds	r3, r7, #4
 8007932:	1c0a      	adds	r2, r1, #0
 8007934:	801a      	strh	r2, [r3, #0]
	uint8_t hi, lo;
	hi = (a) >> 8;
 8007936:	1dbb      	adds	r3, r7, #6
 8007938:	881b      	ldrh	r3, [r3, #0]
 800793a:	0a1b      	lsrs	r3, r3, #8
 800793c:	b29a      	uxth	r2, r3
 800793e:	240f      	movs	r4, #15
 8007940:	193b      	adds	r3, r7, r4
 8007942:	701a      	strb	r2, [r3, #0]
	lo = (a);
 8007944:	250e      	movs	r5, #14
 8007946:	197b      	adds	r3, r7, r5
 8007948:	1dba      	adds	r2, r7, #6
 800794a:	8812      	ldrh	r2, [r2, #0]
 800794c:	701a      	strb	r2, [r3, #0]
	LCD_CD_LOW();
 800794e:	2390      	movs	r3, #144	; 0x90
 8007950:	05db      	lsls	r3, r3, #23
 8007952:	2200      	movs	r2, #0
 8007954:	2104      	movs	r1, #4
 8007956:	0018      	movs	r0, r3
 8007958:	f7fd fd92 	bl	8005480 <gpio_write>
	LCD_Write8(hi);
 800795c:	193b      	adds	r3, r7, r4
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	0018      	movs	r0, r3
 8007962:	f7ff ff65 	bl	8007830 <LCD_Write8>
	LCD_Write8(lo);
 8007966:	197b      	adds	r3, r7, r5
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	0018      	movs	r0, r3
 800796c:	f7ff ff60 	bl	8007830 <LCD_Write8>
	hi = (d) >> 8;
 8007970:	1d3b      	adds	r3, r7, #4
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	0a1b      	lsrs	r3, r3, #8
 8007976:	b29a      	uxth	r2, r3
 8007978:	193b      	adds	r3, r7, r4
 800797a:	701a      	strb	r2, [r3, #0]
	lo = (d);
 800797c:	197b      	adds	r3, r7, r5
 800797e:	1d3a      	adds	r2, r7, #4
 8007980:	8812      	ldrh	r2, [r2, #0]
 8007982:	701a      	strb	r2, [r3, #0]
	LCD_CD_HIGH();
 8007984:	2390      	movs	r3, #144	; 0x90
 8007986:	05db      	lsls	r3, r3, #23
 8007988:	2201      	movs	r2, #1
 800798a:	2104      	movs	r1, #4
 800798c:	0018      	movs	r0, r3
 800798e:	f7fd fd77 	bl	8005480 <gpio_write>
	LCD_Write8(hi);
 8007992:	193b      	adds	r3, r7, r4
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	0018      	movs	r0, r3
 8007998:	f7ff ff4a 	bl	8007830 <LCD_Write8>
	LCD_Write8(lo);
 800799c:	197b      	adds	r3, r7, r5
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	0018      	movs	r0, r3
 80079a2:	f7ff ff45 	bl	8007830 <LCD_Write8>
}
 80079a6:	46c0      	nop			; (mov r8, r8)
 80079a8:	46bd      	mov	sp, r7
 80079aa:	b004      	add	sp, #16
 80079ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080079b0 <insert_sort>:
 *      Author: hp
 */

#include "touch.h"

void insert_sort(int array[], uint8_t size) {
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	000a      	movs	r2, r1
 80079ba:	1cfb      	adds	r3, r7, #3
 80079bc:	701a      	strb	r2, [r3, #0]
	uint8_t j;
	int save;

	for (int i = 1; i < size; i++) {
 80079be:	2301      	movs	r3, #1
 80079c0:	613b      	str	r3, [r7, #16]
 80079c2:	e03c      	b.n	8007a3e <insert_sort+0x8e>
		save = array[i];
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	18d3      	adds	r3, r2, r3
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	60fb      	str	r3, [r7, #12]
		for (j = i; j >= 1 && save < array[j - 1]; j--)
 80079d0:	2317      	movs	r3, #23
 80079d2:	18fb      	adds	r3, r7, r3
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	701a      	strb	r2, [r3, #0]
 80079d8:	e015      	b.n	8007a06 <insert_sort+0x56>
			array[j] = array[j - 1];
 80079da:	2117      	movs	r1, #23
 80079dc:	187b      	adds	r3, r7, r1
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	4a1c      	ldr	r2, [pc, #112]	; (8007a54 <insert_sort+0xa4>)
 80079e2:	4694      	mov	ip, r2
 80079e4:	4463      	add	r3, ip
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	18d2      	adds	r2, r2, r3
 80079ec:	0008      	movs	r0, r1
 80079ee:	187b      	adds	r3, r7, r1
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	6879      	ldr	r1, [r7, #4]
 80079f6:	18cb      	adds	r3, r1, r3
 80079f8:	6812      	ldr	r2, [r2, #0]
 80079fa:	601a      	str	r2, [r3, #0]
		for (j = i; j >= 1 && save < array[j - 1]; j--)
 80079fc:	183b      	adds	r3, r7, r0
 80079fe:	781a      	ldrb	r2, [r3, #0]
 8007a00:	183b      	adds	r3, r7, r0
 8007a02:	3a01      	subs	r2, #1
 8007a04:	701a      	strb	r2, [r3, #0]
 8007a06:	2217      	movs	r2, #23
 8007a08:	18bb      	adds	r3, r7, r2
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00b      	beq.n	8007a28 <insert_sort+0x78>
 8007a10:	18bb      	adds	r3, r7, r2
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	4a0f      	ldr	r2, [pc, #60]	; (8007a54 <insert_sort+0xa4>)
 8007a16:	4694      	mov	ip, r2
 8007a18:	4463      	add	r3, ip
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	18d3      	adds	r3, r2, r3
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	dbd8      	blt.n	80079da <insert_sort+0x2a>
		array[j] = save;
 8007a28:	2317      	movs	r3, #23
 8007a2a:	18fb      	adds	r3, r7, r3
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	18d3      	adds	r3, r2, r3
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	601a      	str	r2, [r3, #0]
	for (int i = 1; i < size; i++) {
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	613b      	str	r3, [r7, #16]
 8007a3e:	1cfb      	adds	r3, r7, #3
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	dbbd      	blt.n	80079c4 <insert_sort+0x14>
	}
}
 8007a48:	46c0      	nop			; (mov r8, r8)
 8007a4a:	46c0      	nop			; (mov r8, r8)
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	b006      	add	sp, #24
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	46c0      	nop			; (mov r8, r8)
 8007a54:	3fffffff 	.word	0x3fffffff

08007a58 <adc_Init>:

void adc_Init(void) {
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af04      	add	r7, sp, #16
	adc_en();
 8007a5e:	f7fd ffa1 	bl	80059a4 <adc_en>
	adc_config(sample_time_7, CONT_off, SCANDIR_off, AUTOFF_off, WAIT_off,
 8007a62:	2300      	movs	r3, #0
 8007a64:	9302      	str	r3, [sp, #8]
 8007a66:	2300      	movs	r3, #0
 8007a68:	9301      	str	r3, [sp, #4]
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2200      	movs	r2, #0
 8007a72:	2100      	movs	r1, #0
 8007a74:	2007      	movs	r0, #7
 8007a76:	f7fe f86b 	bl	8005b50 <adc_config>
	DISCEN_off, OVRMOD_off);

}
 8007a7a:	46c0      	nop			; (mov r8, r8)
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <Touch_Begin>:

void Touch_Begin(void) {
 8007a80:	b580      	push	{r7, lr}
 8007a82:	af00      	add	r7, sp, #0
//	ADCx_MspInit();
	adc_Init();
 8007a84:	f7ff ffe8 	bl	8007a58 <adc_Init>
}
 8007a88:	46c0      	nop			; (mov r8, r8)
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <GPIO_SetOutput>:

void GPIO_SetOutput(GPIO_TypeDef *GPIOx, uint16_t pin, int val) {
 8007a8e:	b590      	push	{r4, r7, lr}
 8007a90:	b087      	sub	sp, #28
 8007a92:	af02      	add	r7, sp, #8
 8007a94:	60f8      	str	r0, [r7, #12]
 8007a96:	607a      	str	r2, [r7, #4]
 8007a98:	200a      	movs	r0, #10
 8007a9a:	183b      	adds	r3, r7, r0
 8007a9c:	1c0a      	adds	r2, r1, #0
 8007a9e:	801a      	strh	r2, [r3, #0]
	GPIOx->MODER &= ~(0x03 << (2 * pin));
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	183a      	adds	r2, r7, r0
 8007aa6:	8812      	ldrh	r2, [r2, #0]
 8007aa8:	0052      	lsls	r2, r2, #1
 8007aaa:	2103      	movs	r1, #3
 8007aac:	4091      	lsls	r1, r2
 8007aae:	000a      	movs	r2, r1
 8007ab0:	43d2      	mvns	r2, r2
 8007ab2:	401a      	ands	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	601a      	str	r2, [r3, #0]
	gpio_config(GPIOx, pin, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8007ab8:	0004      	movs	r4, r0
 8007aba:	183b      	adds	r3, r7, r0
 8007abc:	8819      	ldrh	r1, [r3, #0]
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	9301      	str	r3, [sp, #4]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	2302      	movs	r3, #2
 8007aca:	2201      	movs	r2, #1
 8007acc:	f7fd fbf0 	bl	80052b0 <gpio_config>
	gpio_write(GPIOx, pin, val);
 8007ad0:	193b      	adds	r3, r7, r4
 8007ad2:	8819      	ldrh	r1, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	0018      	movs	r0, r3
 8007adc:	f7fd fcd0 	bl	8005480 <gpio_write>
}
 8007ae0:	46c0      	nop			; (mov r8, r8)
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	b005      	add	sp, #20
 8007ae6:	bd90      	pop	{r4, r7, pc}

08007ae8 <GPIO_SetAnalog>:

void GPIO_SetAnalog(GPIO_TypeDef *GPIOx, uint16_t pin) {
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	000a      	movs	r2, r1
 8007af2:	1cbb      	adds	r3, r7, #2
 8007af4:	801a      	strh	r2, [r3, #0]

	gpio_clk_en(GPIOx);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	0018      	movs	r0, r3
 8007afa:	f7fd fb91 	bl	8005220 <gpio_clk_en>
	gpio_moder(GPIOx, pin, ANALOG_MODE);
 8007afe:	1cbb      	adds	r3, r7, #2
 8007b00:	8819      	ldrh	r1, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2203      	movs	r2, #3
 8007b06:	0018      	movs	r0, r3
 8007b08:	f7fd fc3c 	bl	8005384 <gpio_moder>

	if ((GPIOx == GPIOA) && (pin == 1)) {
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	2390      	movs	r3, #144	; 0x90
 8007b10:	05db      	lsls	r3, r3, #23
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d10a      	bne.n	8007b2c <GPIO_SetAnalog+0x44>
 8007b16:	1cbb      	adds	r3, r7, #2
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d106      	bne.n	8007b2c <GPIO_SetAnalog+0x44>
		ADC1->CHSELR |= ADC_CHSELR_CHSEL1;
 8007b1e:	4b0d      	ldr	r3, [pc, #52]	; (8007b54 <GPIO_SetAnalog+0x6c>)
 8007b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b22:	4b0c      	ldr	r3, [pc, #48]	; (8007b54 <GPIO_SetAnalog+0x6c>)
 8007b24:	2102      	movs	r1, #2
 8007b26:	430a      	orrs	r2, r1
 8007b28:	629a      	str	r2, [r3, #40]	; 0x28
	} else if ((GPIOx == GPIOA) && (pin == 4)) {
		ADC1->CHSELR |= ADC_CHSELR_CHSEL4;
	}

}
 8007b2a:	e00e      	b.n	8007b4a <GPIO_SetAnalog+0x62>
	} else if ((GPIOx == GPIOA) && (pin == 4)) {
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	2390      	movs	r3, #144	; 0x90
 8007b30:	05db      	lsls	r3, r3, #23
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d109      	bne.n	8007b4a <GPIO_SetAnalog+0x62>
 8007b36:	1cbb      	adds	r3, r7, #2
 8007b38:	881b      	ldrh	r3, [r3, #0]
 8007b3a:	2b04      	cmp	r3, #4
 8007b3c:	d105      	bne.n	8007b4a <GPIO_SetAnalog+0x62>
		ADC1->CHSELR |= ADC_CHSELR_CHSEL4;
 8007b3e:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <GPIO_SetAnalog+0x6c>)
 8007b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b42:	4b04      	ldr	r3, [pc, #16]	; (8007b54 <GPIO_SetAnalog+0x6c>)
 8007b44:	2110      	movs	r1, #16
 8007b46:	430a      	orrs	r2, r1
 8007b48:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007b4a:	46c0      	nop			; (mov r8, r8)
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	b002      	add	sp, #8
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	46c0      	nop			; (mov r8, r8)
 8007b54:	40012400 	.word	0x40012400

08007b58 <Touch_Get>:
	GPIO_SetOutput(TS_PORT_XM, TS_PIN_XM, 0);

	return y;
}

void Touch_Get(uint16_t *arr) {
 8007b58:	b590      	push	{r4, r7, lr}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
	GPIO_SetAnalog(TS_PORT_YP, TS_PIN_YP);
 8007b60:	2390      	movs	r3, #144	; 0x90
 8007b62:	05db      	lsls	r3, r3, #23
 8007b64:	2101      	movs	r1, #1
 8007b66:	0018      	movs	r0, r3
 8007b68:	f7ff ffbe 	bl	8007ae8 <GPIO_SetAnalog>
	GPIO_SetAnalog(TS_PORT_XM, TS_PIN_XM);
 8007b6c:	2390      	movs	r3, #144	; 0x90
 8007b6e:	05db      	lsls	r3, r3, #23
 8007b70:	2104      	movs	r1, #4
 8007b72:	0018      	movs	r0, r3
 8007b74:	f7ff ffb8 	bl	8007ae8 <GPIO_SetAnalog>
//	gpio_config(TS_PORT_XM, TS_PIN_XM, ANALOG_MODE, LOW_SPEED, DI_PUPD, PHPL);

	GPIO_SetOutput(TS_PORT_YM, TS_PIN_YM, 1);
 8007b78:	2390      	movs	r3, #144	; 0x90
 8007b7a:	05db      	lsls	r3, r3, #23
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	2108      	movs	r1, #8
 8007b80:	0018      	movs	r0, r3
 8007b82:	f7ff ff84 	bl	8007a8e <GPIO_SetOutput>
	GPIO_SetOutput(TS_PORT_XP, TS_PIN_XP, 1);
 8007b86:	4b26      	ldr	r3, [pc, #152]	; (8007c20 <Touch_Get+0xc8>)
 8007b88:	2201      	movs	r2, #1
 8007b8a:	210a      	movs	r1, #10
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	f7ff ff7e 	bl	8007a8e <GPIO_SetOutput>

	delay_ms(100);
 8007b92:	2064      	movs	r0, #100	; 0x64
 8007b94:	f7fd fe54 	bl	8005840 <delay_ms>

//	uint16_t y = ADC_Measure(TS_ADCCH_XM);
	uint16_t ADC_VAL[2];
	for (int i = 0; i < 12; i++) {
 8007b98:	2300      	movs	r3, #0
 8007b9a:	60fb      	str	r3, [r7, #12]
 8007b9c:	e017      	b.n	8007bce <Touch_Get+0x76>
		adc_read(&ADC_VAL, 2);
 8007b9e:	2408      	movs	r4, #8
 8007ba0:	193b      	adds	r3, r7, r4
 8007ba2:	2102      	movs	r1, #2
 8007ba4:	0018      	movs	r0, r3
 8007ba6:	f7fd ff09 	bl	80059bc <adc_read>
		adc_stop();
 8007baa:	f7fd ff35 	bl	8005a18 <adc_stop>
		arr_X[i] = ADC_VAL[0];
 8007bae:	0020      	movs	r0, r4
 8007bb0:	183b      	adds	r3, r7, r0
 8007bb2:	8819      	ldrh	r1, [r3, #0]
 8007bb4:	4b1b      	ldr	r3, [pc, #108]	; (8007c24 <Touch_Get+0xcc>)
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	0052      	lsls	r2, r2, #1
 8007bba:	52d1      	strh	r1, [r2, r3]
		arr_Y[i] = ADC_VAL[1];
 8007bbc:	183b      	adds	r3, r7, r0
 8007bbe:	8859      	ldrh	r1, [r3, #2]
 8007bc0:	4b19      	ldr	r3, [pc, #100]	; (8007c28 <Touch_Get+0xd0>)
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	0052      	lsls	r2, r2, #1
 8007bc6:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < 12; i++) {
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	60fb      	str	r3, [r7, #12]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2b0b      	cmp	r3, #11
 8007bd2:	dde4      	ble.n	8007b9e <Touch_Get+0x46>
	}
	insert_sort(arr_X, 12);
 8007bd4:	4b13      	ldr	r3, [pc, #76]	; (8007c24 <Touch_Get+0xcc>)
 8007bd6:	210c      	movs	r1, #12
 8007bd8:	0018      	movs	r0, r3
 8007bda:	f7ff fee9 	bl	80079b0 <insert_sort>
	insert_sort(arr_Y, 12);
 8007bde:	4b12      	ldr	r3, [pc, #72]	; (8007c28 <Touch_Get+0xd0>)
 8007be0:	210c      	movs	r1, #12
 8007be2:	0018      	movs	r0, r3
 8007be4:	f7ff fee4 	bl	80079b0 <insert_sort>
	*arr = arr_X[6];
 8007be8:	4b0e      	ldr	r3, [pc, #56]	; (8007c24 <Touch_Get+0xcc>)
 8007bea:	899a      	ldrh	r2, [r3, #12]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	801a      	strh	r2, [r3, #0]
	*(arr + 1) = arr_Y[6];
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	3302      	adds	r3, #2
 8007bf4:	4a0c      	ldr	r2, [pc, #48]	; (8007c28 <Touch_Get+0xd0>)
 8007bf6:	8992      	ldrh	r2, [r2, #12]
 8007bf8:	801a      	strh	r2, [r3, #0]

	GPIO_SetOutput(TS_PORT_YP, TS_PIN_YP, 0);
 8007bfa:	2390      	movs	r3, #144	; 0x90
 8007bfc:	05db      	lsls	r3, r3, #23
 8007bfe:	2200      	movs	r2, #0
 8007c00:	2101      	movs	r1, #1
 8007c02:	0018      	movs	r0, r3
 8007c04:	f7ff ff43 	bl	8007a8e <GPIO_SetOutput>
	GPIO_SetOutput(TS_PORT_XM, TS_PIN_XM, 0);
 8007c08:	2390      	movs	r3, #144	; 0x90
 8007c0a:	05db      	lsls	r3, r3, #23
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2104      	movs	r1, #4
 8007c10:	0018      	movs	r0, r3
 8007c12:	f7ff ff3c 	bl	8007a8e <GPIO_SetOutput>
}
 8007c16:	46c0      	nop			; (mov r8, r8)
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	b005      	add	sp, #20
 8007c1c:	bd90      	pop	{r4, r7, pc}
 8007c1e:	46c0      	nop			; (mov r8, r8)
 8007c20:	48000400 	.word	0x48000400
 8007c24:	20000530 	.word	0x20000530
 8007c28:	20000550 	.word	0x20000550

08007c2c <TOUCH_VAL>:

uint16_t TOUCH_VAL(char c) {
 8007c2c:	b5b0      	push	{r4, r5, r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af02      	add	r7, sp, #8
 8007c32:	0002      	movs	r2, r0
 8007c34:	1dfb      	adds	r3, r7, #7
 8007c36:	701a      	strb	r2, [r3, #0]
	Touch_Get(&adc_arr_val[0]);
 8007c38:	4b20      	ldr	r3, [pc, #128]	; (8007cbc <TOUCH_VAL+0x90>)
 8007c3a:	0018      	movs	r0, r3
 8007c3c:	f7ff ff8c 	bl	8007b58 <Touch_Get>
	uint16_t x = 0, y = 0;
 8007c40:	230e      	movs	r3, #14
 8007c42:	18fb      	adds	r3, r7, r3
 8007c44:	2200      	movs	r2, #0
 8007c46:	801a      	strh	r2, [r3, #0]
 8007c48:	230c      	movs	r3, #12
 8007c4a:	18fb      	adds	r3, r7, r3
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	801a      	strh	r2, [r3, #0]
	if (c == 'x' || c == 'X') {
 8007c50:	1dfb      	adds	r3, r7, #7
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	2b78      	cmp	r3, #120	; 0x78
 8007c56:	d003      	beq.n	8007c60 <TOUCH_VAL+0x34>
 8007c58:	1dfb      	adds	r3, r7, #7
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b58      	cmp	r3, #88	; 0x58
 8007c5e:	d110      	bne.n	8007c82 <TOUCH_VAL+0x56>
//		x = adc_arr_val[0] ;
		x = map(adc_arr_val[0], TS_Xmin, TS_Xmax, 0, 1023);
 8007c60:	4b16      	ldr	r3, [pc, #88]	; (8007cbc <TOUCH_VAL+0x90>)
 8007c62:	8818      	ldrh	r0, [r3, #0]
 8007c64:	250e      	movs	r5, #14
 8007c66:	197c      	adds	r4, r7, r5
 8007c68:	23c8      	movs	r3, #200	; 0xc8
 8007c6a:	00da      	lsls	r2, r3, #3
 8007c6c:	4b14      	ldr	r3, [pc, #80]	; (8007cc0 <TOUCH_VAL+0x94>)
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	2300      	movs	r3, #0
 8007c72:	2100      	movs	r1, #0
 8007c74:	f7fd faa2 	bl	80051bc <map>
 8007c78:	0003      	movs	r3, r0
 8007c7a:	8023      	strh	r3, [r4, #0]
		return x;
 8007c7c:	197b      	adds	r3, r7, r5
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	e017      	b.n	8007cb2 <TOUCH_VAL+0x86>
	} else if (c == 'y' || c == 'Y') {
 8007c82:	1dfb      	adds	r3, r7, #7
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	2b79      	cmp	r3, #121	; 0x79
 8007c88:	d003      	beq.n	8007c92 <TOUCH_VAL+0x66>
 8007c8a:	1dfb      	adds	r3, r7, #7
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b59      	cmp	r3, #89	; 0x59
 8007c90:	d10f      	bne.n	8007cb2 <TOUCH_VAL+0x86>
//		y = adc_arr_val[1];
		y = map(adc_arr_val[1], TS_Ymin, TS_Ymax, 0, 1023);
 8007c92:	4b0a      	ldr	r3, [pc, #40]	; (8007cbc <TOUCH_VAL+0x90>)
 8007c94:	8858      	ldrh	r0, [r3, #2]
 8007c96:	250c      	movs	r5, #12
 8007c98:	197c      	adds	r4, r7, r5
 8007c9a:	4a0a      	ldr	r2, [pc, #40]	; (8007cc4 <TOUCH_VAL+0x98>)
 8007c9c:	490a      	ldr	r1, [pc, #40]	; (8007cc8 <TOUCH_VAL+0x9c>)
 8007c9e:	4b08      	ldr	r3, [pc, #32]	; (8007cc0 <TOUCH_VAL+0x94>)
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f7fd fa8a 	bl	80051bc <map>
 8007ca8:	0003      	movs	r3, r0
 8007caa:	8023      	strh	r3, [r4, #0]
		return y;
 8007cac:	197b      	adds	r3, r7, r5
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	e7ff      	b.n	8007cb2 <TOUCH_VAL+0x86>
	}
}
 8007cb2:	0018      	movs	r0, r3
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	b004      	add	sp, #16
 8007cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8007cba:	46c0      	nop			; (mov r8, r8)
 8007cbc:	20000524 	.word	0x20000524
 8007cc0:	000003ff 	.word	0x000003ff
 8007cc4:	0000076c 	.word	0x0000076c
 8007cc8:	00000514 	.word	0x00000514

08007ccc <__errno>:
 8007ccc:	4b01      	ldr	r3, [pc, #4]	; (8007cd4 <__errno+0x8>)
 8007cce:	6818      	ldr	r0, [r3, #0]
 8007cd0:	4770      	bx	lr
 8007cd2:	46c0      	nop			; (mov r8, r8)
 8007cd4:	2000004c 	.word	0x2000004c

08007cd8 <__libc_init_array>:
 8007cd8:	b570      	push	{r4, r5, r6, lr}
 8007cda:	2600      	movs	r6, #0
 8007cdc:	4d0c      	ldr	r5, [pc, #48]	; (8007d10 <__libc_init_array+0x38>)
 8007cde:	4c0d      	ldr	r4, [pc, #52]	; (8007d14 <__libc_init_array+0x3c>)
 8007ce0:	1b64      	subs	r4, r4, r5
 8007ce2:	10a4      	asrs	r4, r4, #2
 8007ce4:	42a6      	cmp	r6, r4
 8007ce6:	d109      	bne.n	8007cfc <__libc_init_array+0x24>
 8007ce8:	2600      	movs	r6, #0
 8007cea:	f002 ffc7 	bl	800ac7c <_init>
 8007cee:	4d0a      	ldr	r5, [pc, #40]	; (8007d18 <__libc_init_array+0x40>)
 8007cf0:	4c0a      	ldr	r4, [pc, #40]	; (8007d1c <__libc_init_array+0x44>)
 8007cf2:	1b64      	subs	r4, r4, r5
 8007cf4:	10a4      	asrs	r4, r4, #2
 8007cf6:	42a6      	cmp	r6, r4
 8007cf8:	d105      	bne.n	8007d06 <__libc_init_array+0x2e>
 8007cfa:	bd70      	pop	{r4, r5, r6, pc}
 8007cfc:	00b3      	lsls	r3, r6, #2
 8007cfe:	58eb      	ldr	r3, [r5, r3]
 8007d00:	4798      	blx	r3
 8007d02:	3601      	adds	r6, #1
 8007d04:	e7ee      	b.n	8007ce4 <__libc_init_array+0xc>
 8007d06:	00b3      	lsls	r3, r6, #2
 8007d08:	58eb      	ldr	r3, [r5, r3]
 8007d0a:	4798      	blx	r3
 8007d0c:	3601      	adds	r6, #1
 8007d0e:	e7f2      	b.n	8007cf6 <__libc_init_array+0x1e>
 8007d10:	0800b57c 	.word	0x0800b57c
 8007d14:	0800b57c 	.word	0x0800b57c
 8007d18:	0800b57c 	.word	0x0800b57c
 8007d1c:	0800b580 	.word	0x0800b580

08007d20 <memset>:
 8007d20:	0003      	movs	r3, r0
 8007d22:	1882      	adds	r2, r0, r2
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d100      	bne.n	8007d2a <memset+0xa>
 8007d28:	4770      	bx	lr
 8007d2a:	7019      	strb	r1, [r3, #0]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	e7f9      	b.n	8007d24 <memset+0x4>

08007d30 <__cvt>:
 8007d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d32:	001e      	movs	r6, r3
 8007d34:	2300      	movs	r3, #0
 8007d36:	0014      	movs	r4, r2
 8007d38:	b08b      	sub	sp, #44	; 0x2c
 8007d3a:	429e      	cmp	r6, r3
 8007d3c:	da04      	bge.n	8007d48 <__cvt+0x18>
 8007d3e:	2180      	movs	r1, #128	; 0x80
 8007d40:	0609      	lsls	r1, r1, #24
 8007d42:	1873      	adds	r3, r6, r1
 8007d44:	001e      	movs	r6, r3
 8007d46:	232d      	movs	r3, #45	; 0x2d
 8007d48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007d4c:	7013      	strb	r3, [r2, #0]
 8007d4e:	2320      	movs	r3, #32
 8007d50:	2203      	movs	r2, #3
 8007d52:	439f      	bics	r7, r3
 8007d54:	2f46      	cmp	r7, #70	; 0x46
 8007d56:	d007      	beq.n	8007d68 <__cvt+0x38>
 8007d58:	003b      	movs	r3, r7
 8007d5a:	3b45      	subs	r3, #69	; 0x45
 8007d5c:	4259      	negs	r1, r3
 8007d5e:	414b      	adcs	r3, r1
 8007d60:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007d62:	3a01      	subs	r2, #1
 8007d64:	18cb      	adds	r3, r1, r3
 8007d66:	9310      	str	r3, [sp, #64]	; 0x40
 8007d68:	ab09      	add	r3, sp, #36	; 0x24
 8007d6a:	9304      	str	r3, [sp, #16]
 8007d6c:	ab08      	add	r3, sp, #32
 8007d6e:	9303      	str	r3, [sp, #12]
 8007d70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d72:	9200      	str	r2, [sp, #0]
 8007d74:	9302      	str	r3, [sp, #8]
 8007d76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d78:	0022      	movs	r2, r4
 8007d7a:	9301      	str	r3, [sp, #4]
 8007d7c:	0033      	movs	r3, r6
 8007d7e:	f000 fd57 	bl	8008830 <_dtoa_r>
 8007d82:	0005      	movs	r5, r0
 8007d84:	2f47      	cmp	r7, #71	; 0x47
 8007d86:	d102      	bne.n	8007d8e <__cvt+0x5e>
 8007d88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d8a:	07db      	lsls	r3, r3, #31
 8007d8c:	d528      	bpl.n	8007de0 <__cvt+0xb0>
 8007d8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d90:	18eb      	adds	r3, r5, r3
 8007d92:	9307      	str	r3, [sp, #28]
 8007d94:	2f46      	cmp	r7, #70	; 0x46
 8007d96:	d114      	bne.n	8007dc2 <__cvt+0x92>
 8007d98:	782b      	ldrb	r3, [r5, #0]
 8007d9a:	2b30      	cmp	r3, #48	; 0x30
 8007d9c:	d10c      	bne.n	8007db8 <__cvt+0x88>
 8007d9e:	2200      	movs	r2, #0
 8007da0:	2300      	movs	r3, #0
 8007da2:	0020      	movs	r0, r4
 8007da4:	0031      	movs	r1, r6
 8007da6:	f7f8 fb51 	bl	800044c <__aeabi_dcmpeq>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d104      	bne.n	8007db8 <__cvt+0x88>
 8007dae:	2301      	movs	r3, #1
 8007db0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007db2:	1a9b      	subs	r3, r3, r2
 8007db4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007dba:	9a07      	ldr	r2, [sp, #28]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	18d3      	adds	r3, r2, r3
 8007dc0:	9307      	str	r3, [sp, #28]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	0020      	movs	r0, r4
 8007dc8:	0031      	movs	r1, r6
 8007dca:	f7f8 fb3f 	bl	800044c <__aeabi_dcmpeq>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d001      	beq.n	8007dd6 <__cvt+0xa6>
 8007dd2:	9b07      	ldr	r3, [sp, #28]
 8007dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd6:	2230      	movs	r2, #48	; 0x30
 8007dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dda:	9907      	ldr	r1, [sp, #28]
 8007ddc:	428b      	cmp	r3, r1
 8007dde:	d306      	bcc.n	8007dee <__cvt+0xbe>
 8007de0:	0028      	movs	r0, r5
 8007de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007de6:	1b5b      	subs	r3, r3, r5
 8007de8:	6013      	str	r3, [r2, #0]
 8007dea:	b00b      	add	sp, #44	; 0x2c
 8007dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dee:	1c59      	adds	r1, r3, #1
 8007df0:	9109      	str	r1, [sp, #36]	; 0x24
 8007df2:	701a      	strb	r2, [r3, #0]
 8007df4:	e7f0      	b.n	8007dd8 <__cvt+0xa8>

08007df6 <__exponent>:
 8007df6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007df8:	1c83      	adds	r3, r0, #2
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	9303      	str	r3, [sp, #12]
 8007dfe:	0005      	movs	r5, r0
 8007e00:	000c      	movs	r4, r1
 8007e02:	232b      	movs	r3, #43	; 0x2b
 8007e04:	7002      	strb	r2, [r0, #0]
 8007e06:	2900      	cmp	r1, #0
 8007e08:	da01      	bge.n	8007e0e <__exponent+0x18>
 8007e0a:	424c      	negs	r4, r1
 8007e0c:	3302      	adds	r3, #2
 8007e0e:	706b      	strb	r3, [r5, #1]
 8007e10:	2c09      	cmp	r4, #9
 8007e12:	dd31      	ble.n	8007e78 <__exponent+0x82>
 8007e14:	270a      	movs	r7, #10
 8007e16:	ab04      	add	r3, sp, #16
 8007e18:	1dde      	adds	r6, r3, #7
 8007e1a:	0020      	movs	r0, r4
 8007e1c:	0039      	movs	r1, r7
 8007e1e:	9601      	str	r6, [sp, #4]
 8007e20:	f7f8 fafe 	bl	8000420 <__aeabi_idivmod>
 8007e24:	3e01      	subs	r6, #1
 8007e26:	3130      	adds	r1, #48	; 0x30
 8007e28:	0020      	movs	r0, r4
 8007e2a:	7031      	strb	r1, [r6, #0]
 8007e2c:	0039      	movs	r1, r7
 8007e2e:	9402      	str	r4, [sp, #8]
 8007e30:	f7f8 fa10 	bl	8000254 <__divsi3>
 8007e34:	9b02      	ldr	r3, [sp, #8]
 8007e36:	0004      	movs	r4, r0
 8007e38:	2b63      	cmp	r3, #99	; 0x63
 8007e3a:	dcee      	bgt.n	8007e1a <__exponent+0x24>
 8007e3c:	9b01      	ldr	r3, [sp, #4]
 8007e3e:	3430      	adds	r4, #48	; 0x30
 8007e40:	1e9a      	subs	r2, r3, #2
 8007e42:	0013      	movs	r3, r2
 8007e44:	9903      	ldr	r1, [sp, #12]
 8007e46:	7014      	strb	r4, [r2, #0]
 8007e48:	a804      	add	r0, sp, #16
 8007e4a:	3007      	adds	r0, #7
 8007e4c:	4298      	cmp	r0, r3
 8007e4e:	d80e      	bhi.n	8007e6e <__exponent+0x78>
 8007e50:	ab04      	add	r3, sp, #16
 8007e52:	3307      	adds	r3, #7
 8007e54:	2000      	movs	r0, #0
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d804      	bhi.n	8007e64 <__exponent+0x6e>
 8007e5a:	ab04      	add	r3, sp, #16
 8007e5c:	3009      	adds	r0, #9
 8007e5e:	18c0      	adds	r0, r0, r3
 8007e60:	9b01      	ldr	r3, [sp, #4]
 8007e62:	1ac0      	subs	r0, r0, r3
 8007e64:	9b03      	ldr	r3, [sp, #12]
 8007e66:	1818      	adds	r0, r3, r0
 8007e68:	1b40      	subs	r0, r0, r5
 8007e6a:	b007      	add	sp, #28
 8007e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e6e:	7818      	ldrb	r0, [r3, #0]
 8007e70:	3301      	adds	r3, #1
 8007e72:	7008      	strb	r0, [r1, #0]
 8007e74:	3101      	adds	r1, #1
 8007e76:	e7e7      	b.n	8007e48 <__exponent+0x52>
 8007e78:	2330      	movs	r3, #48	; 0x30
 8007e7a:	18e4      	adds	r4, r4, r3
 8007e7c:	70ab      	strb	r3, [r5, #2]
 8007e7e:	1d28      	adds	r0, r5, #4
 8007e80:	70ec      	strb	r4, [r5, #3]
 8007e82:	e7f1      	b.n	8007e68 <__exponent+0x72>

08007e84 <_printf_float>:
 8007e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e86:	b095      	sub	sp, #84	; 0x54
 8007e88:	000c      	movs	r4, r1
 8007e8a:	9208      	str	r2, [sp, #32]
 8007e8c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e90:	0007      	movs	r7, r0
 8007e92:	f001 faeb 	bl	800946c <_localeconv_r>
 8007e96:	6803      	ldr	r3, [r0, #0]
 8007e98:	0018      	movs	r0, r3
 8007e9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e9c:	f7f8 f934 	bl	8000108 <strlen>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	9312      	str	r3, [sp, #72]	; 0x48
 8007ea4:	7e23      	ldrb	r3, [r4, #24]
 8007ea6:	2207      	movs	r2, #7
 8007ea8:	001e      	movs	r6, r3
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	900d      	str	r0, [sp, #52]	; 0x34
 8007eae:	930c      	str	r3, [sp, #48]	; 0x30
 8007eb0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007eb2:	682b      	ldr	r3, [r5, #0]
 8007eb4:	05c9      	lsls	r1, r1, #23
 8007eb6:	d547      	bpl.n	8007f48 <_printf_float+0xc4>
 8007eb8:	189b      	adds	r3, r3, r2
 8007eba:	4393      	bics	r3, r2
 8007ebc:	001a      	movs	r2, r3
 8007ebe:	3208      	adds	r2, #8
 8007ec0:	602a      	str	r2, [r5, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	64a2      	str	r2, [r4, #72]	; 0x48
 8007ec8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007eca:	2201      	movs	r2, #1
 8007ecc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007ece:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8007ed2:	006b      	lsls	r3, r5, #1
 8007ed4:	085b      	lsrs	r3, r3, #1
 8007ed6:	930e      	str	r3, [sp, #56]	; 0x38
 8007ed8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007eda:	4ba8      	ldr	r3, [pc, #672]	; (800817c <_printf_float+0x2f8>)
 8007edc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007ede:	4252      	negs	r2, r2
 8007ee0:	f7fa f850 	bl	8001f84 <__aeabi_dcmpun>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	d131      	bne.n	8007f4c <_printf_float+0xc8>
 8007ee8:	2201      	movs	r2, #1
 8007eea:	4ba4      	ldr	r3, [pc, #656]	; (800817c <_printf_float+0x2f8>)
 8007eec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007eee:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007ef0:	4252      	negs	r2, r2
 8007ef2:	f7f8 fabb 	bl	800046c <__aeabi_dcmple>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d128      	bne.n	8007f4c <_printf_float+0xc8>
 8007efa:	2200      	movs	r2, #0
 8007efc:	2300      	movs	r3, #0
 8007efe:	0029      	movs	r1, r5
 8007f00:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007f02:	f7f8 faa9 	bl	8000458 <__aeabi_dcmplt>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	d003      	beq.n	8007f12 <_printf_float+0x8e>
 8007f0a:	0023      	movs	r3, r4
 8007f0c:	222d      	movs	r2, #45	; 0x2d
 8007f0e:	3343      	adds	r3, #67	; 0x43
 8007f10:	701a      	strb	r2, [r3, #0]
 8007f12:	4d9b      	ldr	r5, [pc, #620]	; (8008180 <_printf_float+0x2fc>)
 8007f14:	2e47      	cmp	r6, #71	; 0x47
 8007f16:	d900      	bls.n	8007f1a <_printf_float+0x96>
 8007f18:	4d9a      	ldr	r5, [pc, #616]	; (8008184 <_printf_float+0x300>)
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f1e:	6123      	str	r3, [r4, #16]
 8007f20:	3301      	adds	r3, #1
 8007f22:	439a      	bics	r2, r3
 8007f24:	2300      	movs	r3, #0
 8007f26:	6022      	str	r2, [r4, #0]
 8007f28:	930a      	str	r3, [sp, #40]	; 0x28
 8007f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2c:	0021      	movs	r1, r4
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	0038      	movs	r0, r7
 8007f32:	9b08      	ldr	r3, [sp, #32]
 8007f34:	aa13      	add	r2, sp, #76	; 0x4c
 8007f36:	f000 f9f3 	bl	8008320 <_printf_common>
 8007f3a:	1c43      	adds	r3, r0, #1
 8007f3c:	d000      	beq.n	8007f40 <_printf_float+0xbc>
 8007f3e:	e09e      	b.n	800807e <_printf_float+0x1fa>
 8007f40:	2001      	movs	r0, #1
 8007f42:	4240      	negs	r0, r0
 8007f44:	b015      	add	sp, #84	; 0x54
 8007f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f48:	3307      	adds	r3, #7
 8007f4a:	e7b6      	b.n	8007eba <_printf_float+0x36>
 8007f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f4e:	002b      	movs	r3, r5
 8007f50:	0010      	movs	r0, r2
 8007f52:	0029      	movs	r1, r5
 8007f54:	f7fa f816 	bl	8001f84 <__aeabi_dcmpun>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d00a      	beq.n	8007f72 <_printf_float+0xee>
 8007f5c:	2d00      	cmp	r5, #0
 8007f5e:	da03      	bge.n	8007f68 <_printf_float+0xe4>
 8007f60:	0023      	movs	r3, r4
 8007f62:	222d      	movs	r2, #45	; 0x2d
 8007f64:	3343      	adds	r3, #67	; 0x43
 8007f66:	701a      	strb	r2, [r3, #0]
 8007f68:	4d87      	ldr	r5, [pc, #540]	; (8008188 <_printf_float+0x304>)
 8007f6a:	2e47      	cmp	r6, #71	; 0x47
 8007f6c:	d9d5      	bls.n	8007f1a <_printf_float+0x96>
 8007f6e:	4d87      	ldr	r5, [pc, #540]	; (800818c <_printf_float+0x308>)
 8007f70:	e7d3      	b.n	8007f1a <_printf_float+0x96>
 8007f72:	2220      	movs	r2, #32
 8007f74:	0031      	movs	r1, r6
 8007f76:	6863      	ldr	r3, [r4, #4]
 8007f78:	4391      	bics	r1, r2
 8007f7a:	910e      	str	r1, [sp, #56]	; 0x38
 8007f7c:	1c5a      	adds	r2, r3, #1
 8007f7e:	d147      	bne.n	8008010 <_printf_float+0x18c>
 8007f80:	3307      	adds	r3, #7
 8007f82:	6063      	str	r3, [r4, #4]
 8007f84:	2380      	movs	r3, #128	; 0x80
 8007f86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f88:	00db      	lsls	r3, r3, #3
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	9206      	str	r2, [sp, #24]
 8007f90:	aa12      	add	r2, sp, #72	; 0x48
 8007f92:	9205      	str	r2, [sp, #20]
 8007f94:	aa11      	add	r2, sp, #68	; 0x44
 8007f96:	9203      	str	r2, [sp, #12]
 8007f98:	2223      	movs	r2, #35	; 0x23
 8007f9a:	a908      	add	r1, sp, #32
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	9301      	str	r3, [sp, #4]
 8007fa0:	6863      	ldr	r3, [r4, #4]
 8007fa2:	1852      	adds	r2, r2, r1
 8007fa4:	9202      	str	r2, [sp, #8]
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	0038      	movs	r0, r7
 8007faa:	002b      	movs	r3, r5
 8007fac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fae:	9604      	str	r6, [sp, #16]
 8007fb0:	f7ff febe 	bl	8007d30 <__cvt>
 8007fb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fb6:	0005      	movs	r5, r0
 8007fb8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007fba:	2b47      	cmp	r3, #71	; 0x47
 8007fbc:	d108      	bne.n	8007fd0 <_printf_float+0x14c>
 8007fbe:	1ccb      	adds	r3, r1, #3
 8007fc0:	db02      	blt.n	8007fc8 <_printf_float+0x144>
 8007fc2:	6863      	ldr	r3, [r4, #4]
 8007fc4:	4299      	cmp	r1, r3
 8007fc6:	dd46      	ble.n	8008056 <_printf_float+0x1d2>
 8007fc8:	0033      	movs	r3, r6
 8007fca:	3b02      	subs	r3, #2
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	001e      	movs	r6, r3
 8007fd0:	2e65      	cmp	r6, #101	; 0x65
 8007fd2:	d824      	bhi.n	800801e <_printf_float+0x19a>
 8007fd4:	0020      	movs	r0, r4
 8007fd6:	0032      	movs	r2, r6
 8007fd8:	3901      	subs	r1, #1
 8007fda:	3050      	adds	r0, #80	; 0x50
 8007fdc:	9111      	str	r1, [sp, #68]	; 0x44
 8007fde:	f7ff ff0a 	bl	8007df6 <__exponent>
 8007fe2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fe4:	900a      	str	r0, [sp, #40]	; 0x28
 8007fe6:	1813      	adds	r3, r2, r0
 8007fe8:	6123      	str	r3, [r4, #16]
 8007fea:	2a01      	cmp	r2, #1
 8007fec:	dc02      	bgt.n	8007ff4 <_printf_float+0x170>
 8007fee:	6822      	ldr	r2, [r4, #0]
 8007ff0:	07d2      	lsls	r2, r2, #31
 8007ff2:	d501      	bpl.n	8007ff8 <_printf_float+0x174>
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	6123      	str	r3, [r4, #16]
 8007ff8:	2323      	movs	r3, #35	; 0x23
 8007ffa:	aa08      	add	r2, sp, #32
 8007ffc:	189b      	adds	r3, r3, r2
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d100      	bne.n	8008006 <_printf_float+0x182>
 8008004:	e791      	b.n	8007f2a <_printf_float+0xa6>
 8008006:	0023      	movs	r3, r4
 8008008:	222d      	movs	r2, #45	; 0x2d
 800800a:	3343      	adds	r3, #67	; 0x43
 800800c:	701a      	strb	r2, [r3, #0]
 800800e:	e78c      	b.n	8007f2a <_printf_float+0xa6>
 8008010:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008012:	2a47      	cmp	r2, #71	; 0x47
 8008014:	d1b6      	bne.n	8007f84 <_printf_float+0x100>
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1b4      	bne.n	8007f84 <_printf_float+0x100>
 800801a:	3301      	adds	r3, #1
 800801c:	e7b1      	b.n	8007f82 <_printf_float+0xfe>
 800801e:	2e66      	cmp	r6, #102	; 0x66
 8008020:	d11b      	bne.n	800805a <_printf_float+0x1d6>
 8008022:	6863      	ldr	r3, [r4, #4]
 8008024:	2900      	cmp	r1, #0
 8008026:	dd0d      	ble.n	8008044 <_printf_float+0x1c0>
 8008028:	6121      	str	r1, [r4, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d102      	bne.n	8008034 <_printf_float+0x1b0>
 800802e:	6822      	ldr	r2, [r4, #0]
 8008030:	07d2      	lsls	r2, r2, #31
 8008032:	d502      	bpl.n	800803a <_printf_float+0x1b6>
 8008034:	3301      	adds	r3, #1
 8008036:	1859      	adds	r1, r3, r1
 8008038:	6121      	str	r1, [r4, #16]
 800803a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800803c:	65a3      	str	r3, [r4, #88]	; 0x58
 800803e:	2300      	movs	r3, #0
 8008040:	930a      	str	r3, [sp, #40]	; 0x28
 8008042:	e7d9      	b.n	8007ff8 <_printf_float+0x174>
 8008044:	2b00      	cmp	r3, #0
 8008046:	d103      	bne.n	8008050 <_printf_float+0x1cc>
 8008048:	2201      	movs	r2, #1
 800804a:	6821      	ldr	r1, [r4, #0]
 800804c:	4211      	tst	r1, r2
 800804e:	d000      	beq.n	8008052 <_printf_float+0x1ce>
 8008050:	1c9a      	adds	r2, r3, #2
 8008052:	6122      	str	r2, [r4, #16]
 8008054:	e7f1      	b.n	800803a <_printf_float+0x1b6>
 8008056:	2367      	movs	r3, #103	; 0x67
 8008058:	001e      	movs	r6, r3
 800805a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800805c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800805e:	4293      	cmp	r3, r2
 8008060:	db06      	blt.n	8008070 <_printf_float+0x1ec>
 8008062:	6822      	ldr	r2, [r4, #0]
 8008064:	6123      	str	r3, [r4, #16]
 8008066:	07d2      	lsls	r2, r2, #31
 8008068:	d5e7      	bpl.n	800803a <_printf_float+0x1b6>
 800806a:	3301      	adds	r3, #1
 800806c:	6123      	str	r3, [r4, #16]
 800806e:	e7e4      	b.n	800803a <_printf_float+0x1b6>
 8008070:	2101      	movs	r1, #1
 8008072:	2b00      	cmp	r3, #0
 8008074:	dc01      	bgt.n	800807a <_printf_float+0x1f6>
 8008076:	1849      	adds	r1, r1, r1
 8008078:	1ac9      	subs	r1, r1, r3
 800807a:	1852      	adds	r2, r2, r1
 800807c:	e7e9      	b.n	8008052 <_printf_float+0x1ce>
 800807e:	6822      	ldr	r2, [r4, #0]
 8008080:	0553      	lsls	r3, r2, #21
 8008082:	d408      	bmi.n	8008096 <_printf_float+0x212>
 8008084:	6923      	ldr	r3, [r4, #16]
 8008086:	002a      	movs	r2, r5
 8008088:	0038      	movs	r0, r7
 800808a:	9908      	ldr	r1, [sp, #32]
 800808c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800808e:	47a8      	blx	r5
 8008090:	1c43      	adds	r3, r0, #1
 8008092:	d129      	bne.n	80080e8 <_printf_float+0x264>
 8008094:	e754      	b.n	8007f40 <_printf_float+0xbc>
 8008096:	2e65      	cmp	r6, #101	; 0x65
 8008098:	d800      	bhi.n	800809c <_printf_float+0x218>
 800809a:	e0ec      	b.n	8008276 <_printf_float+0x3f2>
 800809c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800809e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80080a0:	2200      	movs	r2, #0
 80080a2:	2300      	movs	r3, #0
 80080a4:	f7f8 f9d2 	bl	800044c <__aeabi_dcmpeq>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d034      	beq.n	8008116 <_printf_float+0x292>
 80080ac:	2301      	movs	r3, #1
 80080ae:	0038      	movs	r0, r7
 80080b0:	4a37      	ldr	r2, [pc, #220]	; (8008190 <_printf_float+0x30c>)
 80080b2:	9908      	ldr	r1, [sp, #32]
 80080b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80080b6:	47a8      	blx	r5
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d100      	bne.n	80080be <_printf_float+0x23a>
 80080bc:	e740      	b.n	8007f40 <_printf_float+0xbc>
 80080be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080c2:	4293      	cmp	r3, r2
 80080c4:	db02      	blt.n	80080cc <_printf_float+0x248>
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	07db      	lsls	r3, r3, #31
 80080ca:	d50d      	bpl.n	80080e8 <_printf_float+0x264>
 80080cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80080ce:	0038      	movs	r0, r7
 80080d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080d4:	9908      	ldr	r1, [sp, #32]
 80080d6:	47a8      	blx	r5
 80080d8:	2500      	movs	r5, #0
 80080da:	1c43      	adds	r3, r0, #1
 80080dc:	d100      	bne.n	80080e0 <_printf_float+0x25c>
 80080de:	e72f      	b.n	8007f40 <_printf_float+0xbc>
 80080e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080e2:	3b01      	subs	r3, #1
 80080e4:	42ab      	cmp	r3, r5
 80080e6:	dc0a      	bgt.n	80080fe <_printf_float+0x27a>
 80080e8:	6823      	ldr	r3, [r4, #0]
 80080ea:	079b      	lsls	r3, r3, #30
 80080ec:	d500      	bpl.n	80080f0 <_printf_float+0x26c>
 80080ee:	e114      	b.n	800831a <_printf_float+0x496>
 80080f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80080f2:	68e0      	ldr	r0, [r4, #12]
 80080f4:	4298      	cmp	r0, r3
 80080f6:	db00      	blt.n	80080fa <_printf_float+0x276>
 80080f8:	e724      	b.n	8007f44 <_printf_float+0xc0>
 80080fa:	0018      	movs	r0, r3
 80080fc:	e722      	b.n	8007f44 <_printf_float+0xc0>
 80080fe:	0022      	movs	r2, r4
 8008100:	2301      	movs	r3, #1
 8008102:	0038      	movs	r0, r7
 8008104:	9908      	ldr	r1, [sp, #32]
 8008106:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008108:	321a      	adds	r2, #26
 800810a:	47b0      	blx	r6
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d100      	bne.n	8008112 <_printf_float+0x28e>
 8008110:	e716      	b.n	8007f40 <_printf_float+0xbc>
 8008112:	3501      	adds	r5, #1
 8008114:	e7e4      	b.n	80080e0 <_printf_float+0x25c>
 8008116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008118:	2b00      	cmp	r3, #0
 800811a:	dc3b      	bgt.n	8008194 <_printf_float+0x310>
 800811c:	2301      	movs	r3, #1
 800811e:	0038      	movs	r0, r7
 8008120:	4a1b      	ldr	r2, [pc, #108]	; (8008190 <_printf_float+0x30c>)
 8008122:	9908      	ldr	r1, [sp, #32]
 8008124:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008126:	47b0      	blx	r6
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	d100      	bne.n	800812e <_printf_float+0x2aa>
 800812c:	e708      	b.n	8007f40 <_printf_float+0xbc>
 800812e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008130:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008132:	4313      	orrs	r3, r2
 8008134:	d102      	bne.n	800813c <_printf_float+0x2b8>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	07db      	lsls	r3, r3, #31
 800813a:	d5d5      	bpl.n	80080e8 <_printf_float+0x264>
 800813c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800813e:	0038      	movs	r0, r7
 8008140:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008142:	9908      	ldr	r1, [sp, #32]
 8008144:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008146:	47b0      	blx	r6
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	d100      	bne.n	800814e <_printf_float+0x2ca>
 800814c:	e6f8      	b.n	8007f40 <_printf_float+0xbc>
 800814e:	2300      	movs	r3, #0
 8008150:	930a      	str	r3, [sp, #40]	; 0x28
 8008152:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008156:	425b      	negs	r3, r3
 8008158:	4293      	cmp	r3, r2
 800815a:	dc01      	bgt.n	8008160 <_printf_float+0x2dc>
 800815c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800815e:	e792      	b.n	8008086 <_printf_float+0x202>
 8008160:	0022      	movs	r2, r4
 8008162:	2301      	movs	r3, #1
 8008164:	0038      	movs	r0, r7
 8008166:	9908      	ldr	r1, [sp, #32]
 8008168:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800816a:	321a      	adds	r2, #26
 800816c:	47b0      	blx	r6
 800816e:	1c43      	adds	r3, r0, #1
 8008170:	d100      	bne.n	8008174 <_printf_float+0x2f0>
 8008172:	e6e5      	b.n	8007f40 <_printf_float+0xbc>
 8008174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008176:	3301      	adds	r3, #1
 8008178:	e7ea      	b.n	8008150 <_printf_float+0x2cc>
 800817a:	46c0      	nop			; (mov r8, r8)
 800817c:	7fefffff 	.word	0x7fefffff
 8008180:	0800b19c 	.word	0x0800b19c
 8008184:	0800b1a0 	.word	0x0800b1a0
 8008188:	0800b1a4 	.word	0x0800b1a4
 800818c:	0800b1a8 	.word	0x0800b1a8
 8008190:	0800b1ac 	.word	0x0800b1ac
 8008194:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008196:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008198:	920a      	str	r2, [sp, #40]	; 0x28
 800819a:	429a      	cmp	r2, r3
 800819c:	dd00      	ble.n	80081a0 <_printf_float+0x31c>
 800819e:	930a      	str	r3, [sp, #40]	; 0x28
 80081a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	dc3d      	bgt.n	8008222 <_printf_float+0x39e>
 80081a6:	2300      	movs	r3, #0
 80081a8:	930e      	str	r3, [sp, #56]	; 0x38
 80081aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ac:	43db      	mvns	r3, r3
 80081ae:	17db      	asrs	r3, r3, #31
 80081b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80081b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081b6:	930c      	str	r3, [sp, #48]	; 0x30
 80081b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ba:	4013      	ands	r3, r2
 80081bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081c2:	4293      	cmp	r3, r2
 80081c4:	dc36      	bgt.n	8008234 <_printf_float+0x3b0>
 80081c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081ca:	4293      	cmp	r3, r2
 80081cc:	db40      	blt.n	8008250 <_printf_float+0x3cc>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	07db      	lsls	r3, r3, #31
 80081d2:	d43d      	bmi.n	8008250 <_printf_float+0x3cc>
 80081d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	1a52      	subs	r2, r2, r1
 80081de:	920a      	str	r2, [sp, #40]	; 0x28
 80081e0:	429a      	cmp	r2, r3
 80081e2:	dd00      	ble.n	80081e6 <_printf_float+0x362>
 80081e4:	930a      	str	r3, [sp, #40]	; 0x28
 80081e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	dc3a      	bgt.n	8008262 <_printf_float+0x3de>
 80081ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ee:	2500      	movs	r5, #0
 80081f0:	43db      	mvns	r3, r3
 80081f2:	17db      	asrs	r3, r3, #31
 80081f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80081f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80081f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081fc:	1a9b      	subs	r3, r3, r2
 80081fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008200:	400a      	ands	r2, r1
 8008202:	1a9b      	subs	r3, r3, r2
 8008204:	42ab      	cmp	r3, r5
 8008206:	dc00      	bgt.n	800820a <_printf_float+0x386>
 8008208:	e76e      	b.n	80080e8 <_printf_float+0x264>
 800820a:	0022      	movs	r2, r4
 800820c:	2301      	movs	r3, #1
 800820e:	0038      	movs	r0, r7
 8008210:	9908      	ldr	r1, [sp, #32]
 8008212:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008214:	321a      	adds	r2, #26
 8008216:	47b0      	blx	r6
 8008218:	1c43      	adds	r3, r0, #1
 800821a:	d100      	bne.n	800821e <_printf_float+0x39a>
 800821c:	e690      	b.n	8007f40 <_printf_float+0xbc>
 800821e:	3501      	adds	r5, #1
 8008220:	e7e9      	b.n	80081f6 <_printf_float+0x372>
 8008222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008224:	002a      	movs	r2, r5
 8008226:	0038      	movs	r0, r7
 8008228:	9908      	ldr	r1, [sp, #32]
 800822a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800822c:	47b0      	blx	r6
 800822e:	1c43      	adds	r3, r0, #1
 8008230:	d1b9      	bne.n	80081a6 <_printf_float+0x322>
 8008232:	e685      	b.n	8007f40 <_printf_float+0xbc>
 8008234:	0022      	movs	r2, r4
 8008236:	2301      	movs	r3, #1
 8008238:	0038      	movs	r0, r7
 800823a:	9908      	ldr	r1, [sp, #32]
 800823c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800823e:	321a      	adds	r2, #26
 8008240:	47b0      	blx	r6
 8008242:	1c43      	adds	r3, r0, #1
 8008244:	d100      	bne.n	8008248 <_printf_float+0x3c4>
 8008246:	e67b      	b.n	8007f40 <_printf_float+0xbc>
 8008248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800824a:	3301      	adds	r3, #1
 800824c:	930e      	str	r3, [sp, #56]	; 0x38
 800824e:	e7b0      	b.n	80081b2 <_printf_float+0x32e>
 8008250:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008252:	0038      	movs	r0, r7
 8008254:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008256:	9908      	ldr	r1, [sp, #32]
 8008258:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800825a:	47b0      	blx	r6
 800825c:	1c43      	adds	r3, r0, #1
 800825e:	d1b9      	bne.n	80081d4 <_printf_float+0x350>
 8008260:	e66e      	b.n	8007f40 <_printf_float+0xbc>
 8008262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008264:	0038      	movs	r0, r7
 8008266:	18ea      	adds	r2, r5, r3
 8008268:	9908      	ldr	r1, [sp, #32]
 800826a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800826c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800826e:	47a8      	blx	r5
 8008270:	1c43      	adds	r3, r0, #1
 8008272:	d1bb      	bne.n	80081ec <_printf_float+0x368>
 8008274:	e664      	b.n	8007f40 <_printf_float+0xbc>
 8008276:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008278:	2b01      	cmp	r3, #1
 800827a:	dc02      	bgt.n	8008282 <_printf_float+0x3fe>
 800827c:	2301      	movs	r3, #1
 800827e:	421a      	tst	r2, r3
 8008280:	d038      	beq.n	80082f4 <_printf_float+0x470>
 8008282:	2301      	movs	r3, #1
 8008284:	002a      	movs	r2, r5
 8008286:	0038      	movs	r0, r7
 8008288:	9908      	ldr	r1, [sp, #32]
 800828a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800828c:	47b0      	blx	r6
 800828e:	1c43      	adds	r3, r0, #1
 8008290:	d100      	bne.n	8008294 <_printf_float+0x410>
 8008292:	e655      	b.n	8007f40 <_printf_float+0xbc>
 8008294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008296:	0038      	movs	r0, r7
 8008298:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800829a:	9908      	ldr	r1, [sp, #32]
 800829c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800829e:	47b0      	blx	r6
 80082a0:	1c43      	adds	r3, r0, #1
 80082a2:	d100      	bne.n	80082a6 <_printf_float+0x422>
 80082a4:	e64c      	b.n	8007f40 <_printf_float+0xbc>
 80082a6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80082a8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80082aa:	2200      	movs	r2, #0
 80082ac:	2300      	movs	r3, #0
 80082ae:	f7f8 f8cd 	bl	800044c <__aeabi_dcmpeq>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d11c      	bne.n	80082f0 <_printf_float+0x46c>
 80082b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082b8:	1c6a      	adds	r2, r5, #1
 80082ba:	3b01      	subs	r3, #1
 80082bc:	0038      	movs	r0, r7
 80082be:	9908      	ldr	r1, [sp, #32]
 80082c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80082c2:	47a8      	blx	r5
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d10f      	bne.n	80082e8 <_printf_float+0x464>
 80082c8:	e63a      	b.n	8007f40 <_printf_float+0xbc>
 80082ca:	0022      	movs	r2, r4
 80082cc:	2301      	movs	r3, #1
 80082ce:	0038      	movs	r0, r7
 80082d0:	9908      	ldr	r1, [sp, #32]
 80082d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80082d4:	321a      	adds	r2, #26
 80082d6:	47b0      	blx	r6
 80082d8:	1c43      	adds	r3, r0, #1
 80082da:	d100      	bne.n	80082de <_printf_float+0x45a>
 80082dc:	e630      	b.n	8007f40 <_printf_float+0xbc>
 80082de:	3501      	adds	r5, #1
 80082e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082e2:	3b01      	subs	r3, #1
 80082e4:	42ab      	cmp	r3, r5
 80082e6:	dcf0      	bgt.n	80082ca <_printf_float+0x446>
 80082e8:	0022      	movs	r2, r4
 80082ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082ec:	3250      	adds	r2, #80	; 0x50
 80082ee:	e6cb      	b.n	8008088 <_printf_float+0x204>
 80082f0:	2500      	movs	r5, #0
 80082f2:	e7f5      	b.n	80082e0 <_printf_float+0x45c>
 80082f4:	002a      	movs	r2, r5
 80082f6:	e7e1      	b.n	80082bc <_printf_float+0x438>
 80082f8:	0022      	movs	r2, r4
 80082fa:	2301      	movs	r3, #1
 80082fc:	0038      	movs	r0, r7
 80082fe:	9908      	ldr	r1, [sp, #32]
 8008300:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008302:	3219      	adds	r2, #25
 8008304:	47b0      	blx	r6
 8008306:	1c43      	adds	r3, r0, #1
 8008308:	d100      	bne.n	800830c <_printf_float+0x488>
 800830a:	e619      	b.n	8007f40 <_printf_float+0xbc>
 800830c:	3501      	adds	r5, #1
 800830e:	68e3      	ldr	r3, [r4, #12]
 8008310:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008312:	1a9b      	subs	r3, r3, r2
 8008314:	42ab      	cmp	r3, r5
 8008316:	dcef      	bgt.n	80082f8 <_printf_float+0x474>
 8008318:	e6ea      	b.n	80080f0 <_printf_float+0x26c>
 800831a:	2500      	movs	r5, #0
 800831c:	e7f7      	b.n	800830e <_printf_float+0x48a>
 800831e:	46c0      	nop			; (mov r8, r8)

08008320 <_printf_common>:
 8008320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008322:	0015      	movs	r5, r2
 8008324:	9301      	str	r3, [sp, #4]
 8008326:	688a      	ldr	r2, [r1, #8]
 8008328:	690b      	ldr	r3, [r1, #16]
 800832a:	000c      	movs	r4, r1
 800832c:	9000      	str	r0, [sp, #0]
 800832e:	4293      	cmp	r3, r2
 8008330:	da00      	bge.n	8008334 <_printf_common+0x14>
 8008332:	0013      	movs	r3, r2
 8008334:	0022      	movs	r2, r4
 8008336:	602b      	str	r3, [r5, #0]
 8008338:	3243      	adds	r2, #67	; 0x43
 800833a:	7812      	ldrb	r2, [r2, #0]
 800833c:	2a00      	cmp	r2, #0
 800833e:	d001      	beq.n	8008344 <_printf_common+0x24>
 8008340:	3301      	adds	r3, #1
 8008342:	602b      	str	r3, [r5, #0]
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	069b      	lsls	r3, r3, #26
 8008348:	d502      	bpl.n	8008350 <_printf_common+0x30>
 800834a:	682b      	ldr	r3, [r5, #0]
 800834c:	3302      	adds	r3, #2
 800834e:	602b      	str	r3, [r5, #0]
 8008350:	6822      	ldr	r2, [r4, #0]
 8008352:	2306      	movs	r3, #6
 8008354:	0017      	movs	r7, r2
 8008356:	401f      	ands	r7, r3
 8008358:	421a      	tst	r2, r3
 800835a:	d027      	beq.n	80083ac <_printf_common+0x8c>
 800835c:	0023      	movs	r3, r4
 800835e:	3343      	adds	r3, #67	; 0x43
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	1e5a      	subs	r2, r3, #1
 8008364:	4193      	sbcs	r3, r2
 8008366:	6822      	ldr	r2, [r4, #0]
 8008368:	0692      	lsls	r2, r2, #26
 800836a:	d430      	bmi.n	80083ce <_printf_common+0xae>
 800836c:	0022      	movs	r2, r4
 800836e:	9901      	ldr	r1, [sp, #4]
 8008370:	9800      	ldr	r0, [sp, #0]
 8008372:	9e08      	ldr	r6, [sp, #32]
 8008374:	3243      	adds	r2, #67	; 0x43
 8008376:	47b0      	blx	r6
 8008378:	1c43      	adds	r3, r0, #1
 800837a:	d025      	beq.n	80083c8 <_printf_common+0xa8>
 800837c:	2306      	movs	r3, #6
 800837e:	6820      	ldr	r0, [r4, #0]
 8008380:	682a      	ldr	r2, [r5, #0]
 8008382:	68e1      	ldr	r1, [r4, #12]
 8008384:	2500      	movs	r5, #0
 8008386:	4003      	ands	r3, r0
 8008388:	2b04      	cmp	r3, #4
 800838a:	d103      	bne.n	8008394 <_printf_common+0x74>
 800838c:	1a8d      	subs	r5, r1, r2
 800838e:	43eb      	mvns	r3, r5
 8008390:	17db      	asrs	r3, r3, #31
 8008392:	401d      	ands	r5, r3
 8008394:	68a3      	ldr	r3, [r4, #8]
 8008396:	6922      	ldr	r2, [r4, #16]
 8008398:	4293      	cmp	r3, r2
 800839a:	dd01      	ble.n	80083a0 <_printf_common+0x80>
 800839c:	1a9b      	subs	r3, r3, r2
 800839e:	18ed      	adds	r5, r5, r3
 80083a0:	2700      	movs	r7, #0
 80083a2:	42bd      	cmp	r5, r7
 80083a4:	d120      	bne.n	80083e8 <_printf_common+0xc8>
 80083a6:	2000      	movs	r0, #0
 80083a8:	e010      	b.n	80083cc <_printf_common+0xac>
 80083aa:	3701      	adds	r7, #1
 80083ac:	68e3      	ldr	r3, [r4, #12]
 80083ae:	682a      	ldr	r2, [r5, #0]
 80083b0:	1a9b      	subs	r3, r3, r2
 80083b2:	42bb      	cmp	r3, r7
 80083b4:	ddd2      	ble.n	800835c <_printf_common+0x3c>
 80083b6:	0022      	movs	r2, r4
 80083b8:	2301      	movs	r3, #1
 80083ba:	9901      	ldr	r1, [sp, #4]
 80083bc:	9800      	ldr	r0, [sp, #0]
 80083be:	9e08      	ldr	r6, [sp, #32]
 80083c0:	3219      	adds	r2, #25
 80083c2:	47b0      	blx	r6
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d1f0      	bne.n	80083aa <_printf_common+0x8a>
 80083c8:	2001      	movs	r0, #1
 80083ca:	4240      	negs	r0, r0
 80083cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083ce:	2030      	movs	r0, #48	; 0x30
 80083d0:	18e1      	adds	r1, r4, r3
 80083d2:	3143      	adds	r1, #67	; 0x43
 80083d4:	7008      	strb	r0, [r1, #0]
 80083d6:	0021      	movs	r1, r4
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	3145      	adds	r1, #69	; 0x45
 80083dc:	7809      	ldrb	r1, [r1, #0]
 80083de:	18a2      	adds	r2, r4, r2
 80083e0:	3243      	adds	r2, #67	; 0x43
 80083e2:	3302      	adds	r3, #2
 80083e4:	7011      	strb	r1, [r2, #0]
 80083e6:	e7c1      	b.n	800836c <_printf_common+0x4c>
 80083e8:	0022      	movs	r2, r4
 80083ea:	2301      	movs	r3, #1
 80083ec:	9901      	ldr	r1, [sp, #4]
 80083ee:	9800      	ldr	r0, [sp, #0]
 80083f0:	9e08      	ldr	r6, [sp, #32]
 80083f2:	321a      	adds	r2, #26
 80083f4:	47b0      	blx	r6
 80083f6:	1c43      	adds	r3, r0, #1
 80083f8:	d0e6      	beq.n	80083c8 <_printf_common+0xa8>
 80083fa:	3701      	adds	r7, #1
 80083fc:	e7d1      	b.n	80083a2 <_printf_common+0x82>
	...

08008400 <_printf_i>:
 8008400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008402:	b08b      	sub	sp, #44	; 0x2c
 8008404:	9206      	str	r2, [sp, #24]
 8008406:	000a      	movs	r2, r1
 8008408:	3243      	adds	r2, #67	; 0x43
 800840a:	9307      	str	r3, [sp, #28]
 800840c:	9005      	str	r0, [sp, #20]
 800840e:	9204      	str	r2, [sp, #16]
 8008410:	7e0a      	ldrb	r2, [r1, #24]
 8008412:	000c      	movs	r4, r1
 8008414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008416:	2a78      	cmp	r2, #120	; 0x78
 8008418:	d806      	bhi.n	8008428 <_printf_i+0x28>
 800841a:	2a62      	cmp	r2, #98	; 0x62
 800841c:	d808      	bhi.n	8008430 <_printf_i+0x30>
 800841e:	2a00      	cmp	r2, #0
 8008420:	d100      	bne.n	8008424 <_printf_i+0x24>
 8008422:	e0c0      	b.n	80085a6 <_printf_i+0x1a6>
 8008424:	2a58      	cmp	r2, #88	; 0x58
 8008426:	d052      	beq.n	80084ce <_printf_i+0xce>
 8008428:	0026      	movs	r6, r4
 800842a:	3642      	adds	r6, #66	; 0x42
 800842c:	7032      	strb	r2, [r6, #0]
 800842e:	e022      	b.n	8008476 <_printf_i+0x76>
 8008430:	0010      	movs	r0, r2
 8008432:	3863      	subs	r0, #99	; 0x63
 8008434:	2815      	cmp	r0, #21
 8008436:	d8f7      	bhi.n	8008428 <_printf_i+0x28>
 8008438:	f7f7 fe78 	bl	800012c <__gnu_thumb1_case_shi>
 800843c:	001f0016 	.word	0x001f0016
 8008440:	fff6fff6 	.word	0xfff6fff6
 8008444:	fff6fff6 	.word	0xfff6fff6
 8008448:	fff6001f 	.word	0xfff6001f
 800844c:	fff6fff6 	.word	0xfff6fff6
 8008450:	00a8fff6 	.word	0x00a8fff6
 8008454:	009a0036 	.word	0x009a0036
 8008458:	fff6fff6 	.word	0xfff6fff6
 800845c:	fff600b9 	.word	0xfff600b9
 8008460:	fff60036 	.word	0xfff60036
 8008464:	009efff6 	.word	0x009efff6
 8008468:	0026      	movs	r6, r4
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	3642      	adds	r6, #66	; 0x42
 800846e:	1d11      	adds	r1, r2, #4
 8008470:	6019      	str	r1, [r3, #0]
 8008472:	6813      	ldr	r3, [r2, #0]
 8008474:	7033      	strb	r3, [r6, #0]
 8008476:	2301      	movs	r3, #1
 8008478:	e0a7      	b.n	80085ca <_printf_i+0x1ca>
 800847a:	6808      	ldr	r0, [r1, #0]
 800847c:	6819      	ldr	r1, [r3, #0]
 800847e:	1d0a      	adds	r2, r1, #4
 8008480:	0605      	lsls	r5, r0, #24
 8008482:	d50b      	bpl.n	800849c <_printf_i+0x9c>
 8008484:	680d      	ldr	r5, [r1, #0]
 8008486:	601a      	str	r2, [r3, #0]
 8008488:	2d00      	cmp	r5, #0
 800848a:	da03      	bge.n	8008494 <_printf_i+0x94>
 800848c:	232d      	movs	r3, #45	; 0x2d
 800848e:	9a04      	ldr	r2, [sp, #16]
 8008490:	426d      	negs	r5, r5
 8008492:	7013      	strb	r3, [r2, #0]
 8008494:	4b61      	ldr	r3, [pc, #388]	; (800861c <_printf_i+0x21c>)
 8008496:	270a      	movs	r7, #10
 8008498:	9303      	str	r3, [sp, #12]
 800849a:	e032      	b.n	8008502 <_printf_i+0x102>
 800849c:	680d      	ldr	r5, [r1, #0]
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	0641      	lsls	r1, r0, #25
 80084a2:	d5f1      	bpl.n	8008488 <_printf_i+0x88>
 80084a4:	b22d      	sxth	r5, r5
 80084a6:	e7ef      	b.n	8008488 <_printf_i+0x88>
 80084a8:	680d      	ldr	r5, [r1, #0]
 80084aa:	6819      	ldr	r1, [r3, #0]
 80084ac:	1d08      	adds	r0, r1, #4
 80084ae:	6018      	str	r0, [r3, #0]
 80084b0:	062e      	lsls	r6, r5, #24
 80084b2:	d501      	bpl.n	80084b8 <_printf_i+0xb8>
 80084b4:	680d      	ldr	r5, [r1, #0]
 80084b6:	e003      	b.n	80084c0 <_printf_i+0xc0>
 80084b8:	066d      	lsls	r5, r5, #25
 80084ba:	d5fb      	bpl.n	80084b4 <_printf_i+0xb4>
 80084bc:	680d      	ldr	r5, [r1, #0]
 80084be:	b2ad      	uxth	r5, r5
 80084c0:	4b56      	ldr	r3, [pc, #344]	; (800861c <_printf_i+0x21c>)
 80084c2:	270a      	movs	r7, #10
 80084c4:	9303      	str	r3, [sp, #12]
 80084c6:	2a6f      	cmp	r2, #111	; 0x6f
 80084c8:	d117      	bne.n	80084fa <_printf_i+0xfa>
 80084ca:	2708      	movs	r7, #8
 80084cc:	e015      	b.n	80084fa <_printf_i+0xfa>
 80084ce:	3145      	adds	r1, #69	; 0x45
 80084d0:	700a      	strb	r2, [r1, #0]
 80084d2:	4a52      	ldr	r2, [pc, #328]	; (800861c <_printf_i+0x21c>)
 80084d4:	9203      	str	r2, [sp, #12]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	6821      	ldr	r1, [r4, #0]
 80084da:	ca20      	ldmia	r2!, {r5}
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	0608      	lsls	r0, r1, #24
 80084e0:	d550      	bpl.n	8008584 <_printf_i+0x184>
 80084e2:	07cb      	lsls	r3, r1, #31
 80084e4:	d502      	bpl.n	80084ec <_printf_i+0xec>
 80084e6:	2320      	movs	r3, #32
 80084e8:	4319      	orrs	r1, r3
 80084ea:	6021      	str	r1, [r4, #0]
 80084ec:	2710      	movs	r7, #16
 80084ee:	2d00      	cmp	r5, #0
 80084f0:	d103      	bne.n	80084fa <_printf_i+0xfa>
 80084f2:	2320      	movs	r3, #32
 80084f4:	6822      	ldr	r2, [r4, #0]
 80084f6:	439a      	bics	r2, r3
 80084f8:	6022      	str	r2, [r4, #0]
 80084fa:	0023      	movs	r3, r4
 80084fc:	2200      	movs	r2, #0
 80084fe:	3343      	adds	r3, #67	; 0x43
 8008500:	701a      	strb	r2, [r3, #0]
 8008502:	6863      	ldr	r3, [r4, #4]
 8008504:	60a3      	str	r3, [r4, #8]
 8008506:	2b00      	cmp	r3, #0
 8008508:	db03      	blt.n	8008512 <_printf_i+0x112>
 800850a:	2204      	movs	r2, #4
 800850c:	6821      	ldr	r1, [r4, #0]
 800850e:	4391      	bics	r1, r2
 8008510:	6021      	str	r1, [r4, #0]
 8008512:	2d00      	cmp	r5, #0
 8008514:	d102      	bne.n	800851c <_printf_i+0x11c>
 8008516:	9e04      	ldr	r6, [sp, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00c      	beq.n	8008536 <_printf_i+0x136>
 800851c:	9e04      	ldr	r6, [sp, #16]
 800851e:	0028      	movs	r0, r5
 8008520:	0039      	movs	r1, r7
 8008522:	f7f7 fe93 	bl	800024c <__aeabi_uidivmod>
 8008526:	9b03      	ldr	r3, [sp, #12]
 8008528:	3e01      	subs	r6, #1
 800852a:	5c5b      	ldrb	r3, [r3, r1]
 800852c:	7033      	strb	r3, [r6, #0]
 800852e:	002b      	movs	r3, r5
 8008530:	0005      	movs	r5, r0
 8008532:	429f      	cmp	r7, r3
 8008534:	d9f3      	bls.n	800851e <_printf_i+0x11e>
 8008536:	2f08      	cmp	r7, #8
 8008538:	d109      	bne.n	800854e <_printf_i+0x14e>
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	07db      	lsls	r3, r3, #31
 800853e:	d506      	bpl.n	800854e <_printf_i+0x14e>
 8008540:	6863      	ldr	r3, [r4, #4]
 8008542:	6922      	ldr	r2, [r4, #16]
 8008544:	4293      	cmp	r3, r2
 8008546:	dc02      	bgt.n	800854e <_printf_i+0x14e>
 8008548:	2330      	movs	r3, #48	; 0x30
 800854a:	3e01      	subs	r6, #1
 800854c:	7033      	strb	r3, [r6, #0]
 800854e:	9b04      	ldr	r3, [sp, #16]
 8008550:	1b9b      	subs	r3, r3, r6
 8008552:	6123      	str	r3, [r4, #16]
 8008554:	9b07      	ldr	r3, [sp, #28]
 8008556:	0021      	movs	r1, r4
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	9805      	ldr	r0, [sp, #20]
 800855c:	9b06      	ldr	r3, [sp, #24]
 800855e:	aa09      	add	r2, sp, #36	; 0x24
 8008560:	f7ff fede 	bl	8008320 <_printf_common>
 8008564:	1c43      	adds	r3, r0, #1
 8008566:	d135      	bne.n	80085d4 <_printf_i+0x1d4>
 8008568:	2001      	movs	r0, #1
 800856a:	4240      	negs	r0, r0
 800856c:	b00b      	add	sp, #44	; 0x2c
 800856e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008570:	2220      	movs	r2, #32
 8008572:	6809      	ldr	r1, [r1, #0]
 8008574:	430a      	orrs	r2, r1
 8008576:	6022      	str	r2, [r4, #0]
 8008578:	0022      	movs	r2, r4
 800857a:	2178      	movs	r1, #120	; 0x78
 800857c:	3245      	adds	r2, #69	; 0x45
 800857e:	7011      	strb	r1, [r2, #0]
 8008580:	4a27      	ldr	r2, [pc, #156]	; (8008620 <_printf_i+0x220>)
 8008582:	e7a7      	b.n	80084d4 <_printf_i+0xd4>
 8008584:	0648      	lsls	r0, r1, #25
 8008586:	d5ac      	bpl.n	80084e2 <_printf_i+0xe2>
 8008588:	b2ad      	uxth	r5, r5
 800858a:	e7aa      	b.n	80084e2 <_printf_i+0xe2>
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	680d      	ldr	r5, [r1, #0]
 8008590:	1d10      	adds	r0, r2, #4
 8008592:	6949      	ldr	r1, [r1, #20]
 8008594:	6018      	str	r0, [r3, #0]
 8008596:	6813      	ldr	r3, [r2, #0]
 8008598:	062e      	lsls	r6, r5, #24
 800859a:	d501      	bpl.n	80085a0 <_printf_i+0x1a0>
 800859c:	6019      	str	r1, [r3, #0]
 800859e:	e002      	b.n	80085a6 <_printf_i+0x1a6>
 80085a0:	066d      	lsls	r5, r5, #25
 80085a2:	d5fb      	bpl.n	800859c <_printf_i+0x19c>
 80085a4:	8019      	strh	r1, [r3, #0]
 80085a6:	2300      	movs	r3, #0
 80085a8:	9e04      	ldr	r6, [sp, #16]
 80085aa:	6123      	str	r3, [r4, #16]
 80085ac:	e7d2      	b.n	8008554 <_printf_i+0x154>
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	1d11      	adds	r1, r2, #4
 80085b2:	6019      	str	r1, [r3, #0]
 80085b4:	6816      	ldr	r6, [r2, #0]
 80085b6:	2100      	movs	r1, #0
 80085b8:	0030      	movs	r0, r6
 80085ba:	6862      	ldr	r2, [r4, #4]
 80085bc:	f000 ff64 	bl	8009488 <memchr>
 80085c0:	2800      	cmp	r0, #0
 80085c2:	d001      	beq.n	80085c8 <_printf_i+0x1c8>
 80085c4:	1b80      	subs	r0, r0, r6
 80085c6:	6060      	str	r0, [r4, #4]
 80085c8:	6863      	ldr	r3, [r4, #4]
 80085ca:	6123      	str	r3, [r4, #16]
 80085cc:	2300      	movs	r3, #0
 80085ce:	9a04      	ldr	r2, [sp, #16]
 80085d0:	7013      	strb	r3, [r2, #0]
 80085d2:	e7bf      	b.n	8008554 <_printf_i+0x154>
 80085d4:	6923      	ldr	r3, [r4, #16]
 80085d6:	0032      	movs	r2, r6
 80085d8:	9906      	ldr	r1, [sp, #24]
 80085da:	9805      	ldr	r0, [sp, #20]
 80085dc:	9d07      	ldr	r5, [sp, #28]
 80085de:	47a8      	blx	r5
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d0c1      	beq.n	8008568 <_printf_i+0x168>
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	079b      	lsls	r3, r3, #30
 80085e8:	d415      	bmi.n	8008616 <_printf_i+0x216>
 80085ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ec:	68e0      	ldr	r0, [r4, #12]
 80085ee:	4298      	cmp	r0, r3
 80085f0:	dabc      	bge.n	800856c <_printf_i+0x16c>
 80085f2:	0018      	movs	r0, r3
 80085f4:	e7ba      	b.n	800856c <_printf_i+0x16c>
 80085f6:	0022      	movs	r2, r4
 80085f8:	2301      	movs	r3, #1
 80085fa:	9906      	ldr	r1, [sp, #24]
 80085fc:	9805      	ldr	r0, [sp, #20]
 80085fe:	9e07      	ldr	r6, [sp, #28]
 8008600:	3219      	adds	r2, #25
 8008602:	47b0      	blx	r6
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	d0af      	beq.n	8008568 <_printf_i+0x168>
 8008608:	3501      	adds	r5, #1
 800860a:	68e3      	ldr	r3, [r4, #12]
 800860c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800860e:	1a9b      	subs	r3, r3, r2
 8008610:	42ab      	cmp	r3, r5
 8008612:	dcf0      	bgt.n	80085f6 <_printf_i+0x1f6>
 8008614:	e7e9      	b.n	80085ea <_printf_i+0x1ea>
 8008616:	2500      	movs	r5, #0
 8008618:	e7f7      	b.n	800860a <_printf_i+0x20a>
 800861a:	46c0      	nop			; (mov r8, r8)
 800861c:	0800b1ae 	.word	0x0800b1ae
 8008620:	0800b1bf 	.word	0x0800b1bf

08008624 <siprintf>:
 8008624:	b40e      	push	{r1, r2, r3}
 8008626:	b500      	push	{lr}
 8008628:	490b      	ldr	r1, [pc, #44]	; (8008658 <siprintf+0x34>)
 800862a:	b09c      	sub	sp, #112	; 0x70
 800862c:	ab1d      	add	r3, sp, #116	; 0x74
 800862e:	9002      	str	r0, [sp, #8]
 8008630:	9006      	str	r0, [sp, #24]
 8008632:	9107      	str	r1, [sp, #28]
 8008634:	9104      	str	r1, [sp, #16]
 8008636:	4809      	ldr	r0, [pc, #36]	; (800865c <siprintf+0x38>)
 8008638:	4909      	ldr	r1, [pc, #36]	; (8008660 <siprintf+0x3c>)
 800863a:	cb04      	ldmia	r3!, {r2}
 800863c:	9105      	str	r1, [sp, #20]
 800863e:	6800      	ldr	r0, [r0, #0]
 8008640:	a902      	add	r1, sp, #8
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	f001 fbea 	bl	8009e1c <_svfiprintf_r>
 8008648:	2300      	movs	r3, #0
 800864a:	9a02      	ldr	r2, [sp, #8]
 800864c:	7013      	strb	r3, [r2, #0]
 800864e:	b01c      	add	sp, #112	; 0x70
 8008650:	bc08      	pop	{r3}
 8008652:	b003      	add	sp, #12
 8008654:	4718      	bx	r3
 8008656:	46c0      	nop			; (mov r8, r8)
 8008658:	7fffffff 	.word	0x7fffffff
 800865c:	2000004c 	.word	0x2000004c
 8008660:	ffff0208 	.word	0xffff0208

08008664 <_vsniprintf_r>:
 8008664:	b530      	push	{r4, r5, lr}
 8008666:	0014      	movs	r4, r2
 8008668:	0005      	movs	r5, r0
 800866a:	001a      	movs	r2, r3
 800866c:	b09b      	sub	sp, #108	; 0x6c
 800866e:	2c00      	cmp	r4, #0
 8008670:	da05      	bge.n	800867e <_vsniprintf_r+0x1a>
 8008672:	238b      	movs	r3, #139	; 0x8b
 8008674:	6003      	str	r3, [r0, #0]
 8008676:	2001      	movs	r0, #1
 8008678:	4240      	negs	r0, r0
 800867a:	b01b      	add	sp, #108	; 0x6c
 800867c:	bd30      	pop	{r4, r5, pc}
 800867e:	2382      	movs	r3, #130	; 0x82
 8008680:	4668      	mov	r0, sp
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	8183      	strh	r3, [r0, #12]
 8008686:	2300      	movs	r3, #0
 8008688:	9100      	str	r1, [sp, #0]
 800868a:	9104      	str	r1, [sp, #16]
 800868c:	429c      	cmp	r4, r3
 800868e:	d000      	beq.n	8008692 <_vsniprintf_r+0x2e>
 8008690:	1e63      	subs	r3, r4, #1
 8008692:	9302      	str	r3, [sp, #8]
 8008694:	9305      	str	r3, [sp, #20]
 8008696:	2301      	movs	r3, #1
 8008698:	4669      	mov	r1, sp
 800869a:	425b      	negs	r3, r3
 800869c:	81cb      	strh	r3, [r1, #14]
 800869e:	0028      	movs	r0, r5
 80086a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80086a2:	f001 fbbb 	bl	8009e1c <_svfiprintf_r>
 80086a6:	1c43      	adds	r3, r0, #1
 80086a8:	da01      	bge.n	80086ae <_vsniprintf_r+0x4a>
 80086aa:	238b      	movs	r3, #139	; 0x8b
 80086ac:	602b      	str	r3, [r5, #0]
 80086ae:	2c00      	cmp	r4, #0
 80086b0:	d0e3      	beq.n	800867a <_vsniprintf_r+0x16>
 80086b2:	2300      	movs	r3, #0
 80086b4:	9a00      	ldr	r2, [sp, #0]
 80086b6:	7013      	strb	r3, [r2, #0]
 80086b8:	e7df      	b.n	800867a <_vsniprintf_r+0x16>
	...

080086bc <vsniprintf>:
 80086bc:	b507      	push	{r0, r1, r2, lr}
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	0013      	movs	r3, r2
 80086c2:	000a      	movs	r2, r1
 80086c4:	0001      	movs	r1, r0
 80086c6:	4802      	ldr	r0, [pc, #8]	; (80086d0 <vsniprintf+0x14>)
 80086c8:	6800      	ldr	r0, [r0, #0]
 80086ca:	f7ff ffcb 	bl	8008664 <_vsniprintf_r>
 80086ce:	bd0e      	pop	{r1, r2, r3, pc}
 80086d0:	2000004c 	.word	0x2000004c

080086d4 <_vsiprintf_r>:
 80086d4:	b500      	push	{lr}
 80086d6:	b09b      	sub	sp, #108	; 0x6c
 80086d8:	9100      	str	r1, [sp, #0]
 80086da:	9104      	str	r1, [sp, #16]
 80086dc:	4906      	ldr	r1, [pc, #24]	; (80086f8 <_vsiprintf_r+0x24>)
 80086de:	9105      	str	r1, [sp, #20]
 80086e0:	9102      	str	r1, [sp, #8]
 80086e2:	4906      	ldr	r1, [pc, #24]	; (80086fc <_vsiprintf_r+0x28>)
 80086e4:	9103      	str	r1, [sp, #12]
 80086e6:	4669      	mov	r1, sp
 80086e8:	f001 fb98 	bl	8009e1c <_svfiprintf_r>
 80086ec:	2300      	movs	r3, #0
 80086ee:	9a00      	ldr	r2, [sp, #0]
 80086f0:	7013      	strb	r3, [r2, #0]
 80086f2:	b01b      	add	sp, #108	; 0x6c
 80086f4:	bd00      	pop	{pc}
 80086f6:	46c0      	nop			; (mov r8, r8)
 80086f8:	7fffffff 	.word	0x7fffffff
 80086fc:	ffff0208 	.word	0xffff0208

08008700 <vsiprintf>:
 8008700:	b510      	push	{r4, lr}
 8008702:	0013      	movs	r3, r2
 8008704:	000a      	movs	r2, r1
 8008706:	0001      	movs	r1, r0
 8008708:	4802      	ldr	r0, [pc, #8]	; (8008714 <vsiprintf+0x14>)
 800870a:	6800      	ldr	r0, [r0, #0]
 800870c:	f7ff ffe2 	bl	80086d4 <_vsiprintf_r>
 8008710:	bd10      	pop	{r4, pc}
 8008712:	46c0      	nop			; (mov r8, r8)
 8008714:	2000004c 	.word	0x2000004c

08008718 <quorem>:
 8008718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800871a:	0006      	movs	r6, r0
 800871c:	690d      	ldr	r5, [r1, #16]
 800871e:	6933      	ldr	r3, [r6, #16]
 8008720:	b087      	sub	sp, #28
 8008722:	2000      	movs	r0, #0
 8008724:	9102      	str	r1, [sp, #8]
 8008726:	42ab      	cmp	r3, r5
 8008728:	db6b      	blt.n	8008802 <quorem+0xea>
 800872a:	000b      	movs	r3, r1
 800872c:	3d01      	subs	r5, #1
 800872e:	00ac      	lsls	r4, r5, #2
 8008730:	3314      	adds	r3, #20
 8008732:	9305      	str	r3, [sp, #20]
 8008734:	191b      	adds	r3, r3, r4
 8008736:	9303      	str	r3, [sp, #12]
 8008738:	0033      	movs	r3, r6
 800873a:	3314      	adds	r3, #20
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	191c      	adds	r4, r3, r4
 8008740:	9b03      	ldr	r3, [sp, #12]
 8008742:	6827      	ldr	r7, [r4, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	0038      	movs	r0, r7
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	3301      	adds	r3, #1
 800874c:	0019      	movs	r1, r3
 800874e:	9304      	str	r3, [sp, #16]
 8008750:	f7f7 fcf6 	bl	8000140 <__udivsi3>
 8008754:	9b04      	ldr	r3, [sp, #16]
 8008756:	9000      	str	r0, [sp, #0]
 8008758:	429f      	cmp	r7, r3
 800875a:	d329      	bcc.n	80087b0 <quorem+0x98>
 800875c:	2300      	movs	r3, #0
 800875e:	469c      	mov	ip, r3
 8008760:	9801      	ldr	r0, [sp, #4]
 8008762:	9f05      	ldr	r7, [sp, #20]
 8008764:	9304      	str	r3, [sp, #16]
 8008766:	cf08      	ldmia	r7!, {r3}
 8008768:	9a00      	ldr	r2, [sp, #0]
 800876a:	b299      	uxth	r1, r3
 800876c:	4351      	muls	r1, r2
 800876e:	0c1b      	lsrs	r3, r3, #16
 8008770:	4353      	muls	r3, r2
 8008772:	4461      	add	r1, ip
 8008774:	0c0a      	lsrs	r2, r1, #16
 8008776:	189b      	adds	r3, r3, r2
 8008778:	0c1a      	lsrs	r2, r3, #16
 800877a:	9305      	str	r3, [sp, #20]
 800877c:	6803      	ldr	r3, [r0, #0]
 800877e:	4694      	mov	ip, r2
 8008780:	b29a      	uxth	r2, r3
 8008782:	9b04      	ldr	r3, [sp, #16]
 8008784:	b289      	uxth	r1, r1
 8008786:	18d2      	adds	r2, r2, r3
 8008788:	6803      	ldr	r3, [r0, #0]
 800878a:	1a52      	subs	r2, r2, r1
 800878c:	0c19      	lsrs	r1, r3, #16
 800878e:	466b      	mov	r3, sp
 8008790:	8a9b      	ldrh	r3, [r3, #20]
 8008792:	1acb      	subs	r3, r1, r3
 8008794:	1411      	asrs	r1, r2, #16
 8008796:	185b      	adds	r3, r3, r1
 8008798:	1419      	asrs	r1, r3, #16
 800879a:	b292      	uxth	r2, r2
 800879c:	041b      	lsls	r3, r3, #16
 800879e:	431a      	orrs	r2, r3
 80087a0:	9b03      	ldr	r3, [sp, #12]
 80087a2:	9104      	str	r1, [sp, #16]
 80087a4:	c004      	stmia	r0!, {r2}
 80087a6:	42bb      	cmp	r3, r7
 80087a8:	d2dd      	bcs.n	8008766 <quorem+0x4e>
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d02e      	beq.n	800880e <quorem+0xf6>
 80087b0:	0030      	movs	r0, r6
 80087b2:	9902      	ldr	r1, [sp, #8]
 80087b4:	f001 f902 	bl	80099bc <__mcmp>
 80087b8:	2800      	cmp	r0, #0
 80087ba:	db21      	blt.n	8008800 <quorem+0xe8>
 80087bc:	0030      	movs	r0, r6
 80087be:	2400      	movs	r4, #0
 80087c0:	9b00      	ldr	r3, [sp, #0]
 80087c2:	9902      	ldr	r1, [sp, #8]
 80087c4:	3301      	adds	r3, #1
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	3014      	adds	r0, #20
 80087ca:	3114      	adds	r1, #20
 80087cc:	6802      	ldr	r2, [r0, #0]
 80087ce:	c908      	ldmia	r1!, {r3}
 80087d0:	b292      	uxth	r2, r2
 80087d2:	1914      	adds	r4, r2, r4
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	1aa2      	subs	r2, r4, r2
 80087d8:	6804      	ldr	r4, [r0, #0]
 80087da:	0c1b      	lsrs	r3, r3, #16
 80087dc:	0c24      	lsrs	r4, r4, #16
 80087de:	1ae3      	subs	r3, r4, r3
 80087e0:	1414      	asrs	r4, r2, #16
 80087e2:	191b      	adds	r3, r3, r4
 80087e4:	141c      	asrs	r4, r3, #16
 80087e6:	b292      	uxth	r2, r2
 80087e8:	041b      	lsls	r3, r3, #16
 80087ea:	4313      	orrs	r3, r2
 80087ec:	c008      	stmia	r0!, {r3}
 80087ee:	9b03      	ldr	r3, [sp, #12]
 80087f0:	428b      	cmp	r3, r1
 80087f2:	d2eb      	bcs.n	80087cc <quorem+0xb4>
 80087f4:	9a01      	ldr	r2, [sp, #4]
 80087f6:	00ab      	lsls	r3, r5, #2
 80087f8:	18d3      	adds	r3, r2, r3
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	2a00      	cmp	r2, #0
 80087fe:	d010      	beq.n	8008822 <quorem+0x10a>
 8008800:	9800      	ldr	r0, [sp, #0]
 8008802:	b007      	add	sp, #28
 8008804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d104      	bne.n	8008816 <quorem+0xfe>
 800880c:	3d01      	subs	r5, #1
 800880e:	9b01      	ldr	r3, [sp, #4]
 8008810:	3c04      	subs	r4, #4
 8008812:	42a3      	cmp	r3, r4
 8008814:	d3f7      	bcc.n	8008806 <quorem+0xee>
 8008816:	6135      	str	r5, [r6, #16]
 8008818:	e7ca      	b.n	80087b0 <quorem+0x98>
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	2a00      	cmp	r2, #0
 800881e:	d104      	bne.n	800882a <quorem+0x112>
 8008820:	3d01      	subs	r5, #1
 8008822:	9a01      	ldr	r2, [sp, #4]
 8008824:	3b04      	subs	r3, #4
 8008826:	429a      	cmp	r2, r3
 8008828:	d3f7      	bcc.n	800881a <quorem+0x102>
 800882a:	6135      	str	r5, [r6, #16]
 800882c:	e7e8      	b.n	8008800 <quorem+0xe8>
	...

08008830 <_dtoa_r>:
 8008830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008832:	b09d      	sub	sp, #116	; 0x74
 8008834:	9202      	str	r2, [sp, #8]
 8008836:	9303      	str	r3, [sp, #12]
 8008838:	9b02      	ldr	r3, [sp, #8]
 800883a:	9c03      	ldr	r4, [sp, #12]
 800883c:	930a      	str	r3, [sp, #40]	; 0x28
 800883e:	940b      	str	r4, [sp, #44]	; 0x2c
 8008840:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008842:	0007      	movs	r7, r0
 8008844:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008846:	2c00      	cmp	r4, #0
 8008848:	d10e      	bne.n	8008868 <_dtoa_r+0x38>
 800884a:	2010      	movs	r0, #16
 800884c:	f000 fe12 	bl	8009474 <malloc>
 8008850:	1e02      	subs	r2, r0, #0
 8008852:	6278      	str	r0, [r7, #36]	; 0x24
 8008854:	d104      	bne.n	8008860 <_dtoa_r+0x30>
 8008856:	21ea      	movs	r1, #234	; 0xea
 8008858:	4bc0      	ldr	r3, [pc, #768]	; (8008b5c <_dtoa_r+0x32c>)
 800885a:	48c1      	ldr	r0, [pc, #772]	; (8008b60 <_dtoa_r+0x330>)
 800885c:	f001 fbf0 	bl	800a040 <__assert_func>
 8008860:	6044      	str	r4, [r0, #4]
 8008862:	6084      	str	r4, [r0, #8]
 8008864:	6004      	str	r4, [r0, #0]
 8008866:	60c4      	str	r4, [r0, #12]
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886a:	6819      	ldr	r1, [r3, #0]
 800886c:	2900      	cmp	r1, #0
 800886e:	d00a      	beq.n	8008886 <_dtoa_r+0x56>
 8008870:	685a      	ldr	r2, [r3, #4]
 8008872:	2301      	movs	r3, #1
 8008874:	4093      	lsls	r3, r2
 8008876:	604a      	str	r2, [r1, #4]
 8008878:	608b      	str	r3, [r1, #8]
 800887a:	0038      	movs	r0, r7
 800887c:	f000 fe5c 	bl	8009538 <_Bfree>
 8008880:	2200      	movs	r2, #0
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	601a      	str	r2, [r3, #0]
 8008886:	9b03      	ldr	r3, [sp, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	da21      	bge.n	80088d0 <_dtoa_r+0xa0>
 800888c:	2301      	movs	r3, #1
 800888e:	602b      	str	r3, [r5, #0]
 8008890:	9b03      	ldr	r3, [sp, #12]
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	085b      	lsrs	r3, r3, #1
 8008896:	930b      	str	r3, [sp, #44]	; 0x2c
 8008898:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800889a:	4bb2      	ldr	r3, [pc, #712]	; (8008b64 <_dtoa_r+0x334>)
 800889c:	002a      	movs	r2, r5
 800889e:	9318      	str	r3, [sp, #96]	; 0x60
 80088a0:	401a      	ands	r2, r3
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d117      	bne.n	80088d6 <_dtoa_r+0xa6>
 80088a6:	4bb0      	ldr	r3, [pc, #704]	; (8008b68 <_dtoa_r+0x338>)
 80088a8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80088aa:	0328      	lsls	r0, r5, #12
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	9b02      	ldr	r3, [sp, #8]
 80088b0:	0b00      	lsrs	r0, r0, #12
 80088b2:	4318      	orrs	r0, r3
 80088b4:	d101      	bne.n	80088ba <_dtoa_r+0x8a>
 80088b6:	f000 fdc3 	bl	8009440 <_dtoa_r+0xc10>
 80088ba:	48ac      	ldr	r0, [pc, #688]	; (8008b6c <_dtoa_r+0x33c>)
 80088bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088be:	9005      	str	r0, [sp, #20]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <_dtoa_r+0x9a>
 80088c4:	4baa      	ldr	r3, [pc, #680]	; (8008b70 <_dtoa_r+0x340>)
 80088c6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80088c8:	6013      	str	r3, [r2, #0]
 80088ca:	9805      	ldr	r0, [sp, #20]
 80088cc:	b01d      	add	sp, #116	; 0x74
 80088ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088d0:	2300      	movs	r3, #0
 80088d2:	602b      	str	r3, [r5, #0]
 80088d4:	e7e0      	b.n	8008898 <_dtoa_r+0x68>
 80088d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80088da:	9312      	str	r3, [sp, #72]	; 0x48
 80088dc:	9413      	str	r4, [sp, #76]	; 0x4c
 80088de:	9812      	ldr	r0, [sp, #72]	; 0x48
 80088e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80088e2:	2200      	movs	r2, #0
 80088e4:	2300      	movs	r3, #0
 80088e6:	f7f7 fdb1 	bl	800044c <__aeabi_dcmpeq>
 80088ea:	1e04      	subs	r4, r0, #0
 80088ec:	d00b      	beq.n	8008906 <_dtoa_r+0xd6>
 80088ee:	2301      	movs	r3, #1
 80088f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	4b9f      	ldr	r3, [pc, #636]	; (8008b74 <_dtoa_r+0x344>)
 80088f6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80088f8:	9305      	str	r3, [sp, #20]
 80088fa:	2a00      	cmp	r2, #0
 80088fc:	d0e5      	beq.n	80088ca <_dtoa_r+0x9a>
 80088fe:	4a9e      	ldr	r2, [pc, #632]	; (8008b78 <_dtoa_r+0x348>)
 8008900:	9926      	ldr	r1, [sp, #152]	; 0x98
 8008902:	600a      	str	r2, [r1, #0]
 8008904:	e7e1      	b.n	80088ca <_dtoa_r+0x9a>
 8008906:	ab1a      	add	r3, sp, #104	; 0x68
 8008908:	9301      	str	r3, [sp, #4]
 800890a:	ab1b      	add	r3, sp, #108	; 0x6c
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	0038      	movs	r0, r7
 8008910:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008912:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008914:	f001 f906 	bl	8009b24 <__d2b>
 8008918:	006e      	lsls	r6, r5, #1
 800891a:	9004      	str	r0, [sp, #16]
 800891c:	0d76      	lsrs	r6, r6, #21
 800891e:	d100      	bne.n	8008922 <_dtoa_r+0xf2>
 8008920:	e07c      	b.n	8008a1c <_dtoa_r+0x1ec>
 8008922:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008924:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008926:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008928:	4a94      	ldr	r2, [pc, #592]	; (8008b7c <_dtoa_r+0x34c>)
 800892a:	031b      	lsls	r3, r3, #12
 800892c:	0b1b      	lsrs	r3, r3, #12
 800892e:	431a      	orrs	r2, r3
 8008930:	0011      	movs	r1, r2
 8008932:	4b93      	ldr	r3, [pc, #588]	; (8008b80 <_dtoa_r+0x350>)
 8008934:	9416      	str	r4, [sp, #88]	; 0x58
 8008936:	18f6      	adds	r6, r6, r3
 8008938:	2200      	movs	r2, #0
 800893a:	4b92      	ldr	r3, [pc, #584]	; (8008b84 <_dtoa_r+0x354>)
 800893c:	f7f8 ff90 	bl	8001860 <__aeabi_dsub>
 8008940:	4a91      	ldr	r2, [pc, #580]	; (8008b88 <_dtoa_r+0x358>)
 8008942:	4b92      	ldr	r3, [pc, #584]	; (8008b8c <_dtoa_r+0x35c>)
 8008944:	f7f8 fd20 	bl	8001388 <__aeabi_dmul>
 8008948:	4a91      	ldr	r2, [pc, #580]	; (8008b90 <_dtoa_r+0x360>)
 800894a:	4b92      	ldr	r3, [pc, #584]	; (8008b94 <_dtoa_r+0x364>)
 800894c:	f7f7 fdac 	bl	80004a8 <__aeabi_dadd>
 8008950:	0004      	movs	r4, r0
 8008952:	0030      	movs	r0, r6
 8008954:	000d      	movs	r5, r1
 8008956:	f7f9 fb69 	bl	800202c <__aeabi_i2d>
 800895a:	4a8f      	ldr	r2, [pc, #572]	; (8008b98 <_dtoa_r+0x368>)
 800895c:	4b8f      	ldr	r3, [pc, #572]	; (8008b9c <_dtoa_r+0x36c>)
 800895e:	f7f8 fd13 	bl	8001388 <__aeabi_dmul>
 8008962:	0002      	movs	r2, r0
 8008964:	000b      	movs	r3, r1
 8008966:	0020      	movs	r0, r4
 8008968:	0029      	movs	r1, r5
 800896a:	f7f7 fd9d 	bl	80004a8 <__aeabi_dadd>
 800896e:	0004      	movs	r4, r0
 8008970:	000d      	movs	r5, r1
 8008972:	f7f9 fb25 	bl	8001fc0 <__aeabi_d2iz>
 8008976:	2200      	movs	r2, #0
 8008978:	9002      	str	r0, [sp, #8]
 800897a:	2300      	movs	r3, #0
 800897c:	0020      	movs	r0, r4
 800897e:	0029      	movs	r1, r5
 8008980:	f7f7 fd6a 	bl	8000458 <__aeabi_dcmplt>
 8008984:	2800      	cmp	r0, #0
 8008986:	d00b      	beq.n	80089a0 <_dtoa_r+0x170>
 8008988:	9802      	ldr	r0, [sp, #8]
 800898a:	f7f9 fb4f 	bl	800202c <__aeabi_i2d>
 800898e:	002b      	movs	r3, r5
 8008990:	0022      	movs	r2, r4
 8008992:	f7f7 fd5b 	bl	800044c <__aeabi_dcmpeq>
 8008996:	4243      	negs	r3, r0
 8008998:	4158      	adcs	r0, r3
 800899a:	9b02      	ldr	r3, [sp, #8]
 800899c:	1a1b      	subs	r3, r3, r0
 800899e:	9302      	str	r3, [sp, #8]
 80089a0:	2301      	movs	r3, #1
 80089a2:	9315      	str	r3, [sp, #84]	; 0x54
 80089a4:	9b02      	ldr	r3, [sp, #8]
 80089a6:	2b16      	cmp	r3, #22
 80089a8:	d80f      	bhi.n	80089ca <_dtoa_r+0x19a>
 80089aa:	9812      	ldr	r0, [sp, #72]	; 0x48
 80089ac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80089ae:	00da      	lsls	r2, r3, #3
 80089b0:	4b7b      	ldr	r3, [pc, #492]	; (8008ba0 <_dtoa_r+0x370>)
 80089b2:	189b      	adds	r3, r3, r2
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f7f7 fd4e 	bl	8000458 <__aeabi_dcmplt>
 80089bc:	2800      	cmp	r0, #0
 80089be:	d049      	beq.n	8008a54 <_dtoa_r+0x224>
 80089c0:	9b02      	ldr	r3, [sp, #8]
 80089c2:	3b01      	subs	r3, #1
 80089c4:	9302      	str	r3, [sp, #8]
 80089c6:	2300      	movs	r3, #0
 80089c8:	9315      	str	r3, [sp, #84]	; 0x54
 80089ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80089cc:	1b9e      	subs	r6, r3, r6
 80089ce:	2300      	movs	r3, #0
 80089d0:	9308      	str	r3, [sp, #32]
 80089d2:	0033      	movs	r3, r6
 80089d4:	3b01      	subs	r3, #1
 80089d6:	930d      	str	r3, [sp, #52]	; 0x34
 80089d8:	d504      	bpl.n	80089e4 <_dtoa_r+0x1b4>
 80089da:	2301      	movs	r3, #1
 80089dc:	1b9b      	subs	r3, r3, r6
 80089de:	9308      	str	r3, [sp, #32]
 80089e0:	2300      	movs	r3, #0
 80089e2:	930d      	str	r3, [sp, #52]	; 0x34
 80089e4:	9b02      	ldr	r3, [sp, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	db36      	blt.n	8008a58 <_dtoa_r+0x228>
 80089ea:	9a02      	ldr	r2, [sp, #8]
 80089ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089ee:	4694      	mov	ip, r2
 80089f0:	4463      	add	r3, ip
 80089f2:	930d      	str	r3, [sp, #52]	; 0x34
 80089f4:	2300      	movs	r3, #0
 80089f6:	9214      	str	r2, [sp, #80]	; 0x50
 80089f8:	930e      	str	r3, [sp, #56]	; 0x38
 80089fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089fc:	2401      	movs	r4, #1
 80089fe:	2b09      	cmp	r3, #9
 8008a00:	d862      	bhi.n	8008ac8 <_dtoa_r+0x298>
 8008a02:	2b05      	cmp	r3, #5
 8008a04:	dd02      	ble.n	8008a0c <_dtoa_r+0x1dc>
 8008a06:	2400      	movs	r4, #0
 8008a08:	3b04      	subs	r3, #4
 8008a0a:	9322      	str	r3, [sp, #136]	; 0x88
 8008a0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a0e:	1e98      	subs	r0, r3, #2
 8008a10:	2803      	cmp	r0, #3
 8008a12:	d862      	bhi.n	8008ada <_dtoa_r+0x2aa>
 8008a14:	f7f7 fb80 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008a18:	56343629 	.word	0x56343629
 8008a1c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008a1e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008a20:	189e      	adds	r6, r3, r2
 8008a22:	4b60      	ldr	r3, [pc, #384]	; (8008ba4 <_dtoa_r+0x374>)
 8008a24:	18f2      	adds	r2, r6, r3
 8008a26:	2a20      	cmp	r2, #32
 8008a28:	dd0f      	ble.n	8008a4a <_dtoa_r+0x21a>
 8008a2a:	2340      	movs	r3, #64	; 0x40
 8008a2c:	1a9b      	subs	r3, r3, r2
 8008a2e:	409d      	lsls	r5, r3
 8008a30:	4b5d      	ldr	r3, [pc, #372]	; (8008ba8 <_dtoa_r+0x378>)
 8008a32:	9802      	ldr	r0, [sp, #8]
 8008a34:	18f3      	adds	r3, r6, r3
 8008a36:	40d8      	lsrs	r0, r3
 8008a38:	4328      	orrs	r0, r5
 8008a3a:	f7f9 fb27 	bl	800208c <__aeabi_ui2d>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	4c5a      	ldr	r4, [pc, #360]	; (8008bac <_dtoa_r+0x37c>)
 8008a42:	3e01      	subs	r6, #1
 8008a44:	1909      	adds	r1, r1, r4
 8008a46:	9316      	str	r3, [sp, #88]	; 0x58
 8008a48:	e776      	b.n	8008938 <_dtoa_r+0x108>
 8008a4a:	2320      	movs	r3, #32
 8008a4c:	9802      	ldr	r0, [sp, #8]
 8008a4e:	1a9b      	subs	r3, r3, r2
 8008a50:	4098      	lsls	r0, r3
 8008a52:	e7f2      	b.n	8008a3a <_dtoa_r+0x20a>
 8008a54:	9015      	str	r0, [sp, #84]	; 0x54
 8008a56:	e7b8      	b.n	80089ca <_dtoa_r+0x19a>
 8008a58:	9b08      	ldr	r3, [sp, #32]
 8008a5a:	9a02      	ldr	r2, [sp, #8]
 8008a5c:	1a9b      	subs	r3, r3, r2
 8008a5e:	9308      	str	r3, [sp, #32]
 8008a60:	4253      	negs	r3, r2
 8008a62:	930e      	str	r3, [sp, #56]	; 0x38
 8008a64:	2300      	movs	r3, #0
 8008a66:	9314      	str	r3, [sp, #80]	; 0x50
 8008a68:	e7c7      	b.n	80089fa <_dtoa_r+0x1ca>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	dc36      	bgt.n	8008ae2 <_dtoa_r+0x2b2>
 8008a74:	2301      	movs	r3, #1
 8008a76:	001a      	movs	r2, r3
 8008a78:	930c      	str	r3, [sp, #48]	; 0x30
 8008a7a:	9306      	str	r3, [sp, #24]
 8008a7c:	9223      	str	r2, [sp, #140]	; 0x8c
 8008a7e:	e00d      	b.n	8008a9c <_dtoa_r+0x26c>
 8008a80:	2301      	movs	r3, #1
 8008a82:	e7f3      	b.n	8008a6c <_dtoa_r+0x23c>
 8008a84:	2300      	movs	r3, #0
 8008a86:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008a88:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a8a:	4694      	mov	ip, r2
 8008a8c:	9b02      	ldr	r3, [sp, #8]
 8008a8e:	4463      	add	r3, ip
 8008a90:	930c      	str	r3, [sp, #48]	; 0x30
 8008a92:	3301      	adds	r3, #1
 8008a94:	9306      	str	r3, [sp, #24]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	dc00      	bgt.n	8008a9c <_dtoa_r+0x26c>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008aa0:	6042      	str	r2, [r0, #4]
 8008aa2:	3204      	adds	r2, #4
 8008aa4:	0015      	movs	r5, r2
 8008aa6:	3514      	adds	r5, #20
 8008aa8:	6841      	ldr	r1, [r0, #4]
 8008aaa:	429d      	cmp	r5, r3
 8008aac:	d91d      	bls.n	8008aea <_dtoa_r+0x2ba>
 8008aae:	0038      	movs	r0, r7
 8008ab0:	f000 fcfe 	bl	80094b0 <_Balloc>
 8008ab4:	9005      	str	r0, [sp, #20]
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d11b      	bne.n	8008af2 <_dtoa_r+0x2c2>
 8008aba:	21d5      	movs	r1, #213	; 0xd5
 8008abc:	0002      	movs	r2, r0
 8008abe:	4b3c      	ldr	r3, [pc, #240]	; (8008bb0 <_dtoa_r+0x380>)
 8008ac0:	0049      	lsls	r1, r1, #1
 8008ac2:	e6ca      	b.n	800885a <_dtoa_r+0x2a>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e7de      	b.n	8008a86 <_dtoa_r+0x256>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	940f      	str	r4, [sp, #60]	; 0x3c
 8008acc:	9322      	str	r3, [sp, #136]	; 0x88
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	930c      	str	r3, [sp, #48]	; 0x30
 8008ad2:	9306      	str	r3, [sp, #24]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	3313      	adds	r3, #19
 8008ad8:	e7d0      	b.n	8008a7c <_dtoa_r+0x24c>
 8008ada:	2301      	movs	r3, #1
 8008adc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ade:	3b02      	subs	r3, #2
 8008ae0:	e7f6      	b.n	8008ad0 <_dtoa_r+0x2a0>
 8008ae2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ae4:	930c      	str	r3, [sp, #48]	; 0x30
 8008ae6:	9306      	str	r3, [sp, #24]
 8008ae8:	e7d8      	b.n	8008a9c <_dtoa_r+0x26c>
 8008aea:	3101      	adds	r1, #1
 8008aec:	6041      	str	r1, [r0, #4]
 8008aee:	0052      	lsls	r2, r2, #1
 8008af0:	e7d8      	b.n	8008aa4 <_dtoa_r+0x274>
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	9a05      	ldr	r2, [sp, #20]
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	9b06      	ldr	r3, [sp, #24]
 8008afa:	2b0e      	cmp	r3, #14
 8008afc:	d900      	bls.n	8008b00 <_dtoa_r+0x2d0>
 8008afe:	e0eb      	b.n	8008cd8 <_dtoa_r+0x4a8>
 8008b00:	2c00      	cmp	r4, #0
 8008b02:	d100      	bne.n	8008b06 <_dtoa_r+0x2d6>
 8008b04:	e0e8      	b.n	8008cd8 <_dtoa_r+0x4a8>
 8008b06:	9b02      	ldr	r3, [sp, #8]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	dd68      	ble.n	8008bde <_dtoa_r+0x3ae>
 8008b0c:	001a      	movs	r2, r3
 8008b0e:	210f      	movs	r1, #15
 8008b10:	4b23      	ldr	r3, [pc, #140]	; (8008ba0 <_dtoa_r+0x370>)
 8008b12:	400a      	ands	r2, r1
 8008b14:	00d2      	lsls	r2, r2, #3
 8008b16:	189b      	adds	r3, r3, r2
 8008b18:	681d      	ldr	r5, [r3, #0]
 8008b1a:	685e      	ldr	r6, [r3, #4]
 8008b1c:	9b02      	ldr	r3, [sp, #8]
 8008b1e:	111c      	asrs	r4, r3, #4
 8008b20:	2302      	movs	r3, #2
 8008b22:	9310      	str	r3, [sp, #64]	; 0x40
 8008b24:	9b02      	ldr	r3, [sp, #8]
 8008b26:	05db      	lsls	r3, r3, #23
 8008b28:	d50b      	bpl.n	8008b42 <_dtoa_r+0x312>
 8008b2a:	4b22      	ldr	r3, [pc, #136]	; (8008bb4 <_dtoa_r+0x384>)
 8008b2c:	400c      	ands	r4, r1
 8008b2e:	6a1a      	ldr	r2, [r3, #32]
 8008b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b32:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008b34:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008b36:	f7f8 f821 	bl	8000b7c <__aeabi_ddiv>
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	900a      	str	r0, [sp, #40]	; 0x28
 8008b3e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008b40:	9310      	str	r3, [sp, #64]	; 0x40
 8008b42:	4b1c      	ldr	r3, [pc, #112]	; (8008bb4 <_dtoa_r+0x384>)
 8008b44:	9307      	str	r3, [sp, #28]
 8008b46:	2c00      	cmp	r4, #0
 8008b48:	d136      	bne.n	8008bb8 <_dtoa_r+0x388>
 8008b4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008b4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b4e:	002a      	movs	r2, r5
 8008b50:	0033      	movs	r3, r6
 8008b52:	f7f8 f813 	bl	8000b7c <__aeabi_ddiv>
 8008b56:	900a      	str	r0, [sp, #40]	; 0x28
 8008b58:	910b      	str	r1, [sp, #44]	; 0x2c
 8008b5a:	e05c      	b.n	8008c16 <_dtoa_r+0x3e6>
 8008b5c:	0800b1dd 	.word	0x0800b1dd
 8008b60:	0800b1f4 	.word	0x0800b1f4
 8008b64:	7ff00000 	.word	0x7ff00000
 8008b68:	0000270f 	.word	0x0000270f
 8008b6c:	0800b1d9 	.word	0x0800b1d9
 8008b70:	0800b1dc 	.word	0x0800b1dc
 8008b74:	0800b1ac 	.word	0x0800b1ac
 8008b78:	0800b1ad 	.word	0x0800b1ad
 8008b7c:	3ff00000 	.word	0x3ff00000
 8008b80:	fffffc01 	.word	0xfffffc01
 8008b84:	3ff80000 	.word	0x3ff80000
 8008b88:	636f4361 	.word	0x636f4361
 8008b8c:	3fd287a7 	.word	0x3fd287a7
 8008b90:	8b60c8b3 	.word	0x8b60c8b3
 8008b94:	3fc68a28 	.word	0x3fc68a28
 8008b98:	509f79fb 	.word	0x509f79fb
 8008b9c:	3fd34413 	.word	0x3fd34413
 8008ba0:	0800b2f0 	.word	0x0800b2f0
 8008ba4:	00000432 	.word	0x00000432
 8008ba8:	00000412 	.word	0x00000412
 8008bac:	fe100000 	.word	0xfe100000
 8008bb0:	0800b253 	.word	0x0800b253
 8008bb4:	0800b2c8 	.word	0x0800b2c8
 8008bb8:	2301      	movs	r3, #1
 8008bba:	421c      	tst	r4, r3
 8008bbc:	d00b      	beq.n	8008bd6 <_dtoa_r+0x3a6>
 8008bbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bc0:	0028      	movs	r0, r5
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	9310      	str	r3, [sp, #64]	; 0x40
 8008bc6:	9b07      	ldr	r3, [sp, #28]
 8008bc8:	0031      	movs	r1, r6
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f7f8 fbdb 	bl	8001388 <__aeabi_dmul>
 8008bd2:	0005      	movs	r5, r0
 8008bd4:	000e      	movs	r6, r1
 8008bd6:	9b07      	ldr	r3, [sp, #28]
 8008bd8:	1064      	asrs	r4, r4, #1
 8008bda:	3308      	adds	r3, #8
 8008bdc:	e7b2      	b.n	8008b44 <_dtoa_r+0x314>
 8008bde:	2302      	movs	r3, #2
 8008be0:	9310      	str	r3, [sp, #64]	; 0x40
 8008be2:	9b02      	ldr	r3, [sp, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d016      	beq.n	8008c16 <_dtoa_r+0x3e6>
 8008be8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008bea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008bec:	425c      	negs	r4, r3
 8008bee:	230f      	movs	r3, #15
 8008bf0:	4ab5      	ldr	r2, [pc, #724]	; (8008ec8 <_dtoa_r+0x698>)
 8008bf2:	4023      	ands	r3, r4
 8008bf4:	00db      	lsls	r3, r3, #3
 8008bf6:	18d3      	adds	r3, r2, r3
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	f7f8 fbc4 	bl	8001388 <__aeabi_dmul>
 8008c00:	2601      	movs	r6, #1
 8008c02:	2300      	movs	r3, #0
 8008c04:	900a      	str	r0, [sp, #40]	; 0x28
 8008c06:	910b      	str	r1, [sp, #44]	; 0x2c
 8008c08:	4db0      	ldr	r5, [pc, #704]	; (8008ecc <_dtoa_r+0x69c>)
 8008c0a:	1124      	asrs	r4, r4, #4
 8008c0c:	2c00      	cmp	r4, #0
 8008c0e:	d000      	beq.n	8008c12 <_dtoa_r+0x3e2>
 8008c10:	e094      	b.n	8008d3c <_dtoa_r+0x50c>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d19f      	bne.n	8008b56 <_dtoa_r+0x326>
 8008c16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d100      	bne.n	8008c1e <_dtoa_r+0x3ee>
 8008c1c:	e09b      	b.n	8008d56 <_dtoa_r+0x526>
 8008c1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c20:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008c22:	2200      	movs	r2, #0
 8008c24:	0020      	movs	r0, r4
 8008c26:	0029      	movs	r1, r5
 8008c28:	4ba9      	ldr	r3, [pc, #676]	; (8008ed0 <_dtoa_r+0x6a0>)
 8008c2a:	f7f7 fc15 	bl	8000458 <__aeabi_dcmplt>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d100      	bne.n	8008c34 <_dtoa_r+0x404>
 8008c32:	e090      	b.n	8008d56 <_dtoa_r+0x526>
 8008c34:	9b06      	ldr	r3, [sp, #24]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d100      	bne.n	8008c3c <_dtoa_r+0x40c>
 8008c3a:	e08c      	b.n	8008d56 <_dtoa_r+0x526>
 8008c3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	dd46      	ble.n	8008cd0 <_dtoa_r+0x4a0>
 8008c42:	9b02      	ldr	r3, [sp, #8]
 8008c44:	2200      	movs	r2, #0
 8008c46:	0020      	movs	r0, r4
 8008c48:	0029      	movs	r1, r5
 8008c4a:	1e5e      	subs	r6, r3, #1
 8008c4c:	4ba1      	ldr	r3, [pc, #644]	; (8008ed4 <_dtoa_r+0x6a4>)
 8008c4e:	f7f8 fb9b 	bl	8001388 <__aeabi_dmul>
 8008c52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c54:	900a      	str	r0, [sp, #40]	; 0x28
 8008c56:	910b      	str	r1, [sp, #44]	; 0x2c
 8008c58:	3301      	adds	r3, #1
 8008c5a:	9310      	str	r3, [sp, #64]	; 0x40
 8008c5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c5e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008c60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c62:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008c64:	9307      	str	r3, [sp, #28]
 8008c66:	f7f9 f9e1 	bl	800202c <__aeabi_i2d>
 8008c6a:	0022      	movs	r2, r4
 8008c6c:	002b      	movs	r3, r5
 8008c6e:	f7f8 fb8b 	bl	8001388 <__aeabi_dmul>
 8008c72:	2200      	movs	r2, #0
 8008c74:	4b98      	ldr	r3, [pc, #608]	; (8008ed8 <_dtoa_r+0x6a8>)
 8008c76:	f7f7 fc17 	bl	80004a8 <__aeabi_dadd>
 8008c7a:	9010      	str	r0, [sp, #64]	; 0x40
 8008c7c:	9111      	str	r1, [sp, #68]	; 0x44
 8008c7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c82:	920a      	str	r2, [sp, #40]	; 0x28
 8008c84:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c86:	4a95      	ldr	r2, [pc, #596]	; (8008edc <_dtoa_r+0x6ac>)
 8008c88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c8a:	4694      	mov	ip, r2
 8008c8c:	4463      	add	r3, ip
 8008c8e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008c90:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c92:	9b07      	ldr	r3, [sp, #28]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d161      	bne.n	8008d5c <_dtoa_r+0x52c>
 8008c98:	2200      	movs	r2, #0
 8008c9a:	0020      	movs	r0, r4
 8008c9c:	0029      	movs	r1, r5
 8008c9e:	4b90      	ldr	r3, [pc, #576]	; (8008ee0 <_dtoa_r+0x6b0>)
 8008ca0:	f7f8 fdde 	bl	8001860 <__aeabi_dsub>
 8008ca4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ca6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ca8:	0004      	movs	r4, r0
 8008caa:	000d      	movs	r5, r1
 8008cac:	f7f7 fbe8 	bl	8000480 <__aeabi_dcmpgt>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d000      	beq.n	8008cb6 <_dtoa_r+0x486>
 8008cb4:	e2b5      	b.n	8009222 <_dtoa_r+0x9f2>
 8008cb6:	488b      	ldr	r0, [pc, #556]	; (8008ee4 <_dtoa_r+0x6b4>)
 8008cb8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008cba:	4684      	mov	ip, r0
 8008cbc:	4461      	add	r1, ip
 8008cbe:	000b      	movs	r3, r1
 8008cc0:	0020      	movs	r0, r4
 8008cc2:	0029      	movs	r1, r5
 8008cc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cc6:	f7f7 fbc7 	bl	8000458 <__aeabi_dcmplt>
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	d000      	beq.n	8008cd0 <_dtoa_r+0x4a0>
 8008cce:	e2a5      	b.n	800921c <_dtoa_r+0x9ec>
 8008cd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cd2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008cd4:	930a      	str	r3, [sp, #40]	; 0x28
 8008cd6:	940b      	str	r4, [sp, #44]	; 0x2c
 8008cd8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	da00      	bge.n	8008ce0 <_dtoa_r+0x4b0>
 8008cde:	e171      	b.n	8008fc4 <_dtoa_r+0x794>
 8008ce0:	9a02      	ldr	r2, [sp, #8]
 8008ce2:	2a0e      	cmp	r2, #14
 8008ce4:	dd00      	ble.n	8008ce8 <_dtoa_r+0x4b8>
 8008ce6:	e16d      	b.n	8008fc4 <_dtoa_r+0x794>
 8008ce8:	4b77      	ldr	r3, [pc, #476]	; (8008ec8 <_dtoa_r+0x698>)
 8008cea:	00d2      	lsls	r2, r2, #3
 8008cec:	189b      	adds	r3, r3, r2
 8008cee:	685c      	ldr	r4, [r3, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	9308      	str	r3, [sp, #32]
 8008cf4:	9409      	str	r4, [sp, #36]	; 0x24
 8008cf6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	db00      	blt.n	8008cfe <_dtoa_r+0x4ce>
 8008cfc:	e0f6      	b.n	8008eec <_dtoa_r+0x6bc>
 8008cfe:	9b06      	ldr	r3, [sp, #24]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	dd00      	ble.n	8008d06 <_dtoa_r+0x4d6>
 8008d04:	e0f2      	b.n	8008eec <_dtoa_r+0x6bc>
 8008d06:	d000      	beq.n	8008d0a <_dtoa_r+0x4da>
 8008d08:	e288      	b.n	800921c <_dtoa_r+0x9ec>
 8008d0a:	9808      	ldr	r0, [sp, #32]
 8008d0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d0e:	2200      	movs	r2, #0
 8008d10:	4b73      	ldr	r3, [pc, #460]	; (8008ee0 <_dtoa_r+0x6b0>)
 8008d12:	f7f8 fb39 	bl	8001388 <__aeabi_dmul>
 8008d16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d1a:	f7f7 fbbb 	bl	8000494 <__aeabi_dcmpge>
 8008d1e:	9e06      	ldr	r6, [sp, #24]
 8008d20:	0035      	movs	r5, r6
 8008d22:	2800      	cmp	r0, #0
 8008d24:	d000      	beq.n	8008d28 <_dtoa_r+0x4f8>
 8008d26:	e25f      	b.n	80091e8 <_dtoa_r+0x9b8>
 8008d28:	9b05      	ldr	r3, [sp, #20]
 8008d2a:	9a05      	ldr	r2, [sp, #20]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	9307      	str	r3, [sp, #28]
 8008d30:	2331      	movs	r3, #49	; 0x31
 8008d32:	7013      	strb	r3, [r2, #0]
 8008d34:	9b02      	ldr	r3, [sp, #8]
 8008d36:	3301      	adds	r3, #1
 8008d38:	9302      	str	r3, [sp, #8]
 8008d3a:	e25a      	b.n	80091f2 <_dtoa_r+0x9c2>
 8008d3c:	4234      	tst	r4, r6
 8008d3e:	d007      	beq.n	8008d50 <_dtoa_r+0x520>
 8008d40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d42:	3301      	adds	r3, #1
 8008d44:	9310      	str	r3, [sp, #64]	; 0x40
 8008d46:	682a      	ldr	r2, [r5, #0]
 8008d48:	686b      	ldr	r3, [r5, #4]
 8008d4a:	f7f8 fb1d 	bl	8001388 <__aeabi_dmul>
 8008d4e:	0033      	movs	r3, r6
 8008d50:	1064      	asrs	r4, r4, #1
 8008d52:	3508      	adds	r5, #8
 8008d54:	e75a      	b.n	8008c0c <_dtoa_r+0x3dc>
 8008d56:	9e02      	ldr	r6, [sp, #8]
 8008d58:	9b06      	ldr	r3, [sp, #24]
 8008d5a:	e780      	b.n	8008c5e <_dtoa_r+0x42e>
 8008d5c:	9b07      	ldr	r3, [sp, #28]
 8008d5e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d60:	1e5a      	subs	r2, r3, #1
 8008d62:	4b59      	ldr	r3, [pc, #356]	; (8008ec8 <_dtoa_r+0x698>)
 8008d64:	00d2      	lsls	r2, r2, #3
 8008d66:	189b      	adds	r3, r3, r2
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	2900      	cmp	r1, #0
 8008d6e:	d051      	beq.n	8008e14 <_dtoa_r+0x5e4>
 8008d70:	2000      	movs	r0, #0
 8008d72:	495d      	ldr	r1, [pc, #372]	; (8008ee8 <_dtoa_r+0x6b8>)
 8008d74:	f7f7 ff02 	bl	8000b7c <__aeabi_ddiv>
 8008d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d7c:	f7f8 fd70 	bl	8001860 <__aeabi_dsub>
 8008d80:	9a05      	ldr	r2, [sp, #20]
 8008d82:	9b05      	ldr	r3, [sp, #20]
 8008d84:	4694      	mov	ip, r2
 8008d86:	9310      	str	r3, [sp, #64]	; 0x40
 8008d88:	9b07      	ldr	r3, [sp, #28]
 8008d8a:	900a      	str	r0, [sp, #40]	; 0x28
 8008d8c:	910b      	str	r1, [sp, #44]	; 0x2c
 8008d8e:	4463      	add	r3, ip
 8008d90:	9319      	str	r3, [sp, #100]	; 0x64
 8008d92:	0029      	movs	r1, r5
 8008d94:	0020      	movs	r0, r4
 8008d96:	f7f9 f913 	bl	8001fc0 <__aeabi_d2iz>
 8008d9a:	9017      	str	r0, [sp, #92]	; 0x5c
 8008d9c:	f7f9 f946 	bl	800202c <__aeabi_i2d>
 8008da0:	0002      	movs	r2, r0
 8008da2:	000b      	movs	r3, r1
 8008da4:	0020      	movs	r0, r4
 8008da6:	0029      	movs	r1, r5
 8008da8:	f7f8 fd5a 	bl	8001860 <__aeabi_dsub>
 8008dac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008db0:	3301      	adds	r3, #1
 8008db2:	9307      	str	r3, [sp, #28]
 8008db4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008db6:	0004      	movs	r4, r0
 8008db8:	3330      	adds	r3, #48	; 0x30
 8008dba:	7013      	strb	r3, [r2, #0]
 8008dbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dc0:	000d      	movs	r5, r1
 8008dc2:	f7f7 fb49 	bl	8000458 <__aeabi_dcmplt>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d175      	bne.n	8008eb6 <_dtoa_r+0x686>
 8008dca:	0022      	movs	r2, r4
 8008dcc:	002b      	movs	r3, r5
 8008dce:	2000      	movs	r0, #0
 8008dd0:	493f      	ldr	r1, [pc, #252]	; (8008ed0 <_dtoa_r+0x6a0>)
 8008dd2:	f7f8 fd45 	bl	8001860 <__aeabi_dsub>
 8008dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dda:	f7f7 fb3d 	bl	8000458 <__aeabi_dcmplt>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d000      	beq.n	8008de4 <_dtoa_r+0x5b4>
 8008de2:	e0d1      	b.n	8008f88 <_dtoa_r+0x758>
 8008de4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008de6:	9a07      	ldr	r2, [sp, #28]
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d100      	bne.n	8008dee <_dtoa_r+0x5be>
 8008dec:	e770      	b.n	8008cd0 <_dtoa_r+0x4a0>
 8008dee:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008df0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008df2:	2200      	movs	r2, #0
 8008df4:	4b37      	ldr	r3, [pc, #220]	; (8008ed4 <_dtoa_r+0x6a4>)
 8008df6:	f7f8 fac7 	bl	8001388 <__aeabi_dmul>
 8008dfa:	4b36      	ldr	r3, [pc, #216]	; (8008ed4 <_dtoa_r+0x6a4>)
 8008dfc:	900a      	str	r0, [sp, #40]	; 0x28
 8008dfe:	910b      	str	r1, [sp, #44]	; 0x2c
 8008e00:	2200      	movs	r2, #0
 8008e02:	0020      	movs	r0, r4
 8008e04:	0029      	movs	r1, r5
 8008e06:	f7f8 fabf 	bl	8001388 <__aeabi_dmul>
 8008e0a:	9b07      	ldr	r3, [sp, #28]
 8008e0c:	0004      	movs	r4, r0
 8008e0e:	000d      	movs	r5, r1
 8008e10:	9310      	str	r3, [sp, #64]	; 0x40
 8008e12:	e7be      	b.n	8008d92 <_dtoa_r+0x562>
 8008e14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008e16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e18:	f7f8 fab6 	bl	8001388 <__aeabi_dmul>
 8008e1c:	9a05      	ldr	r2, [sp, #20]
 8008e1e:	9b05      	ldr	r3, [sp, #20]
 8008e20:	4694      	mov	ip, r2
 8008e22:	930a      	str	r3, [sp, #40]	; 0x28
 8008e24:	9b07      	ldr	r3, [sp, #28]
 8008e26:	9010      	str	r0, [sp, #64]	; 0x40
 8008e28:	9111      	str	r1, [sp, #68]	; 0x44
 8008e2a:	4463      	add	r3, ip
 8008e2c:	9319      	str	r3, [sp, #100]	; 0x64
 8008e2e:	0029      	movs	r1, r5
 8008e30:	0020      	movs	r0, r4
 8008e32:	f7f9 f8c5 	bl	8001fc0 <__aeabi_d2iz>
 8008e36:	9017      	str	r0, [sp, #92]	; 0x5c
 8008e38:	f7f9 f8f8 	bl	800202c <__aeabi_i2d>
 8008e3c:	0002      	movs	r2, r0
 8008e3e:	000b      	movs	r3, r1
 8008e40:	0020      	movs	r0, r4
 8008e42:	0029      	movs	r1, r5
 8008e44:	f7f8 fd0c 	bl	8001860 <__aeabi_dsub>
 8008e48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e4c:	3330      	adds	r3, #48	; 0x30
 8008e4e:	7013      	strb	r3, [r2, #0]
 8008e50:	0013      	movs	r3, r2
 8008e52:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e54:	3301      	adds	r3, #1
 8008e56:	0004      	movs	r4, r0
 8008e58:	000d      	movs	r5, r1
 8008e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d12c      	bne.n	8008eba <_dtoa_r+0x68a>
 8008e60:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008e62:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008e64:	9a05      	ldr	r2, [sp, #20]
 8008e66:	9b07      	ldr	r3, [sp, #28]
 8008e68:	4694      	mov	ip, r2
 8008e6a:	4463      	add	r3, ip
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	9307      	str	r3, [sp, #28]
 8008e70:	4b1d      	ldr	r3, [pc, #116]	; (8008ee8 <_dtoa_r+0x6b8>)
 8008e72:	f7f7 fb19 	bl	80004a8 <__aeabi_dadd>
 8008e76:	0002      	movs	r2, r0
 8008e78:	000b      	movs	r3, r1
 8008e7a:	0020      	movs	r0, r4
 8008e7c:	0029      	movs	r1, r5
 8008e7e:	f7f7 faff 	bl	8000480 <__aeabi_dcmpgt>
 8008e82:	2800      	cmp	r0, #0
 8008e84:	d000      	beq.n	8008e88 <_dtoa_r+0x658>
 8008e86:	e07f      	b.n	8008f88 <_dtoa_r+0x758>
 8008e88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	4916      	ldr	r1, [pc, #88]	; (8008ee8 <_dtoa_r+0x6b8>)
 8008e90:	f7f8 fce6 	bl	8001860 <__aeabi_dsub>
 8008e94:	0002      	movs	r2, r0
 8008e96:	000b      	movs	r3, r1
 8008e98:	0020      	movs	r0, r4
 8008e9a:	0029      	movs	r1, r5
 8008e9c:	f7f7 fadc 	bl	8000458 <__aeabi_dcmplt>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d100      	bne.n	8008ea6 <_dtoa_r+0x676>
 8008ea4:	e714      	b.n	8008cd0 <_dtoa_r+0x4a0>
 8008ea6:	9b07      	ldr	r3, [sp, #28]
 8008ea8:	001a      	movs	r2, r3
 8008eaa:	3a01      	subs	r2, #1
 8008eac:	9207      	str	r2, [sp, #28]
 8008eae:	7812      	ldrb	r2, [r2, #0]
 8008eb0:	2a30      	cmp	r2, #48	; 0x30
 8008eb2:	d0f8      	beq.n	8008ea6 <_dtoa_r+0x676>
 8008eb4:	9307      	str	r3, [sp, #28]
 8008eb6:	9602      	str	r6, [sp, #8]
 8008eb8:	e054      	b.n	8008f64 <_dtoa_r+0x734>
 8008eba:	2200      	movs	r2, #0
 8008ebc:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <_dtoa_r+0x6a4>)
 8008ebe:	f7f8 fa63 	bl	8001388 <__aeabi_dmul>
 8008ec2:	0004      	movs	r4, r0
 8008ec4:	000d      	movs	r5, r1
 8008ec6:	e7b2      	b.n	8008e2e <_dtoa_r+0x5fe>
 8008ec8:	0800b2f0 	.word	0x0800b2f0
 8008ecc:	0800b2c8 	.word	0x0800b2c8
 8008ed0:	3ff00000 	.word	0x3ff00000
 8008ed4:	40240000 	.word	0x40240000
 8008ed8:	401c0000 	.word	0x401c0000
 8008edc:	fcc00000 	.word	0xfcc00000
 8008ee0:	40140000 	.word	0x40140000
 8008ee4:	7cc00000 	.word	0x7cc00000
 8008ee8:	3fe00000 	.word	0x3fe00000
 8008eec:	9b06      	ldr	r3, [sp, #24]
 8008eee:	9e05      	ldr	r6, [sp, #20]
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	199b      	adds	r3, r3, r6
 8008ef4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008ef6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008ef8:	930a      	str	r3, [sp, #40]	; 0x28
 8008efa:	9a08      	ldr	r2, [sp, #32]
 8008efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008efe:	0020      	movs	r0, r4
 8008f00:	0029      	movs	r1, r5
 8008f02:	f7f7 fe3b 	bl	8000b7c <__aeabi_ddiv>
 8008f06:	f7f9 f85b 	bl	8001fc0 <__aeabi_d2iz>
 8008f0a:	9006      	str	r0, [sp, #24]
 8008f0c:	f7f9 f88e 	bl	800202c <__aeabi_i2d>
 8008f10:	9a08      	ldr	r2, [sp, #32]
 8008f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f14:	f7f8 fa38 	bl	8001388 <__aeabi_dmul>
 8008f18:	0002      	movs	r2, r0
 8008f1a:	000b      	movs	r3, r1
 8008f1c:	0020      	movs	r0, r4
 8008f1e:	0029      	movs	r1, r5
 8008f20:	f7f8 fc9e 	bl	8001860 <__aeabi_dsub>
 8008f24:	0033      	movs	r3, r6
 8008f26:	9a06      	ldr	r2, [sp, #24]
 8008f28:	3601      	adds	r6, #1
 8008f2a:	3230      	adds	r2, #48	; 0x30
 8008f2c:	701a      	strb	r2, [r3, #0]
 8008f2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f30:	9607      	str	r6, [sp, #28]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d139      	bne.n	8008faa <_dtoa_r+0x77a>
 8008f36:	0002      	movs	r2, r0
 8008f38:	000b      	movs	r3, r1
 8008f3a:	f7f7 fab5 	bl	80004a8 <__aeabi_dadd>
 8008f3e:	9a08      	ldr	r2, [sp, #32]
 8008f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f42:	0004      	movs	r4, r0
 8008f44:	000d      	movs	r5, r1
 8008f46:	f7f7 fa9b 	bl	8000480 <__aeabi_dcmpgt>
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d11b      	bne.n	8008f86 <_dtoa_r+0x756>
 8008f4e:	9a08      	ldr	r2, [sp, #32]
 8008f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f52:	0020      	movs	r0, r4
 8008f54:	0029      	movs	r1, r5
 8008f56:	f7f7 fa79 	bl	800044c <__aeabi_dcmpeq>
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	d002      	beq.n	8008f64 <_dtoa_r+0x734>
 8008f5e:	9b06      	ldr	r3, [sp, #24]
 8008f60:	07db      	lsls	r3, r3, #31
 8008f62:	d410      	bmi.n	8008f86 <_dtoa_r+0x756>
 8008f64:	0038      	movs	r0, r7
 8008f66:	9904      	ldr	r1, [sp, #16]
 8008f68:	f000 fae6 	bl	8009538 <_Bfree>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	9a07      	ldr	r2, [sp, #28]
 8008f70:	9802      	ldr	r0, [sp, #8]
 8008f72:	7013      	strb	r3, [r2, #0]
 8008f74:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f76:	3001      	adds	r0, #1
 8008f78:	6018      	str	r0, [r3, #0]
 8008f7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d100      	bne.n	8008f82 <_dtoa_r+0x752>
 8008f80:	e4a3      	b.n	80088ca <_dtoa_r+0x9a>
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	e4a1      	b.n	80088ca <_dtoa_r+0x9a>
 8008f86:	9e02      	ldr	r6, [sp, #8]
 8008f88:	9b07      	ldr	r3, [sp, #28]
 8008f8a:	9307      	str	r3, [sp, #28]
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	781a      	ldrb	r2, [r3, #0]
 8008f90:	2a39      	cmp	r2, #57	; 0x39
 8008f92:	d106      	bne.n	8008fa2 <_dtoa_r+0x772>
 8008f94:	9a05      	ldr	r2, [sp, #20]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d1f7      	bne.n	8008f8a <_dtoa_r+0x75a>
 8008f9a:	2230      	movs	r2, #48	; 0x30
 8008f9c:	9905      	ldr	r1, [sp, #20]
 8008f9e:	3601      	adds	r6, #1
 8008fa0:	700a      	strb	r2, [r1, #0]
 8008fa2:	781a      	ldrb	r2, [r3, #0]
 8008fa4:	3201      	adds	r2, #1
 8008fa6:	701a      	strb	r2, [r3, #0]
 8008fa8:	e785      	b.n	8008eb6 <_dtoa_r+0x686>
 8008faa:	2200      	movs	r2, #0
 8008fac:	4bad      	ldr	r3, [pc, #692]	; (8009264 <_dtoa_r+0xa34>)
 8008fae:	f7f8 f9eb 	bl	8001388 <__aeabi_dmul>
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	0004      	movs	r4, r0
 8008fb8:	000d      	movs	r5, r1
 8008fba:	f7f7 fa47 	bl	800044c <__aeabi_dcmpeq>
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d09b      	beq.n	8008efa <_dtoa_r+0x6ca>
 8008fc2:	e7cf      	b.n	8008f64 <_dtoa_r+0x734>
 8008fc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008fc6:	2a00      	cmp	r2, #0
 8008fc8:	d100      	bne.n	8008fcc <_dtoa_r+0x79c>
 8008fca:	e082      	b.n	80090d2 <_dtoa_r+0x8a2>
 8008fcc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008fce:	2a01      	cmp	r2, #1
 8008fd0:	dc66      	bgt.n	80090a0 <_dtoa_r+0x870>
 8008fd2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008fd4:	2a00      	cmp	r2, #0
 8008fd6:	d05f      	beq.n	8009098 <_dtoa_r+0x868>
 8008fd8:	4aa3      	ldr	r2, [pc, #652]	; (8009268 <_dtoa_r+0xa38>)
 8008fda:	189b      	adds	r3, r3, r2
 8008fdc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008fde:	9c08      	ldr	r4, [sp, #32]
 8008fe0:	9a08      	ldr	r2, [sp, #32]
 8008fe2:	2101      	movs	r1, #1
 8008fe4:	18d2      	adds	r2, r2, r3
 8008fe6:	9208      	str	r2, [sp, #32]
 8008fe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fea:	0038      	movs	r0, r7
 8008fec:	18d3      	adds	r3, r2, r3
 8008fee:	930d      	str	r3, [sp, #52]	; 0x34
 8008ff0:	f000 fb52 	bl	8009698 <__i2b>
 8008ff4:	0005      	movs	r5, r0
 8008ff6:	2c00      	cmp	r4, #0
 8008ff8:	dd0e      	ble.n	8009018 <_dtoa_r+0x7e8>
 8008ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	dd0b      	ble.n	8009018 <_dtoa_r+0x7e8>
 8009000:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009002:	0023      	movs	r3, r4
 8009004:	4294      	cmp	r4, r2
 8009006:	dd00      	ble.n	800900a <_dtoa_r+0x7da>
 8009008:	0013      	movs	r3, r2
 800900a:	9a08      	ldr	r2, [sp, #32]
 800900c:	1ae4      	subs	r4, r4, r3
 800900e:	1ad2      	subs	r2, r2, r3
 8009010:	9208      	str	r2, [sp, #32]
 8009012:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	930d      	str	r3, [sp, #52]	; 0x34
 8009018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800901a:	2b00      	cmp	r3, #0
 800901c:	d01f      	beq.n	800905e <_dtoa_r+0x82e>
 800901e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009020:	2b00      	cmp	r3, #0
 8009022:	d05a      	beq.n	80090da <_dtoa_r+0x8aa>
 8009024:	2e00      	cmp	r6, #0
 8009026:	dd11      	ble.n	800904c <_dtoa_r+0x81c>
 8009028:	0029      	movs	r1, r5
 800902a:	0032      	movs	r2, r6
 800902c:	0038      	movs	r0, r7
 800902e:	f000 fbf9 	bl	8009824 <__pow5mult>
 8009032:	9a04      	ldr	r2, [sp, #16]
 8009034:	0001      	movs	r1, r0
 8009036:	0005      	movs	r5, r0
 8009038:	0038      	movs	r0, r7
 800903a:	f000 fb43 	bl	80096c4 <__multiply>
 800903e:	9904      	ldr	r1, [sp, #16]
 8009040:	9007      	str	r0, [sp, #28]
 8009042:	0038      	movs	r0, r7
 8009044:	f000 fa78 	bl	8009538 <_Bfree>
 8009048:	9b07      	ldr	r3, [sp, #28]
 800904a:	9304      	str	r3, [sp, #16]
 800904c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800904e:	1b9a      	subs	r2, r3, r6
 8009050:	42b3      	cmp	r3, r6
 8009052:	d004      	beq.n	800905e <_dtoa_r+0x82e>
 8009054:	0038      	movs	r0, r7
 8009056:	9904      	ldr	r1, [sp, #16]
 8009058:	f000 fbe4 	bl	8009824 <__pow5mult>
 800905c:	9004      	str	r0, [sp, #16]
 800905e:	2101      	movs	r1, #1
 8009060:	0038      	movs	r0, r7
 8009062:	f000 fb19 	bl	8009698 <__i2b>
 8009066:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009068:	0006      	movs	r6, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	dd37      	ble.n	80090de <_dtoa_r+0x8ae>
 800906e:	001a      	movs	r2, r3
 8009070:	0001      	movs	r1, r0
 8009072:	0038      	movs	r0, r7
 8009074:	f000 fbd6 	bl	8009824 <__pow5mult>
 8009078:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800907a:	0006      	movs	r6, r0
 800907c:	2b01      	cmp	r3, #1
 800907e:	dd33      	ble.n	80090e8 <_dtoa_r+0x8b8>
 8009080:	2300      	movs	r3, #0
 8009082:	9307      	str	r3, [sp, #28]
 8009084:	6933      	ldr	r3, [r6, #16]
 8009086:	3303      	adds	r3, #3
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	18f3      	adds	r3, r6, r3
 800908c:	6858      	ldr	r0, [r3, #4]
 800908e:	f000 fabb 	bl	8009608 <__hi0bits>
 8009092:	2320      	movs	r3, #32
 8009094:	1a18      	subs	r0, r3, r0
 8009096:	e03f      	b.n	8009118 <_dtoa_r+0x8e8>
 8009098:	2336      	movs	r3, #54	; 0x36
 800909a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800909c:	1a9b      	subs	r3, r3, r2
 800909e:	e79d      	b.n	8008fdc <_dtoa_r+0x7ac>
 80090a0:	9b06      	ldr	r3, [sp, #24]
 80090a2:	1e5e      	subs	r6, r3, #1
 80090a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090a6:	42b3      	cmp	r3, r6
 80090a8:	db08      	blt.n	80090bc <_dtoa_r+0x88c>
 80090aa:	1b9e      	subs	r6, r3, r6
 80090ac:	9b06      	ldr	r3, [sp, #24]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	da0c      	bge.n	80090cc <_dtoa_r+0x89c>
 80090b2:	9b08      	ldr	r3, [sp, #32]
 80090b4:	9a06      	ldr	r2, [sp, #24]
 80090b6:	1a9c      	subs	r4, r3, r2
 80090b8:	2300      	movs	r3, #0
 80090ba:	e791      	b.n	8008fe0 <_dtoa_r+0x7b0>
 80090bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090c0:	1af3      	subs	r3, r6, r3
 80090c2:	18d3      	adds	r3, r2, r3
 80090c4:	960e      	str	r6, [sp, #56]	; 0x38
 80090c6:	9314      	str	r3, [sp, #80]	; 0x50
 80090c8:	2600      	movs	r6, #0
 80090ca:	e7ef      	b.n	80090ac <_dtoa_r+0x87c>
 80090cc:	9c08      	ldr	r4, [sp, #32]
 80090ce:	9b06      	ldr	r3, [sp, #24]
 80090d0:	e786      	b.n	8008fe0 <_dtoa_r+0x7b0>
 80090d2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80090d4:	9c08      	ldr	r4, [sp, #32]
 80090d6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80090d8:	e78d      	b.n	8008ff6 <_dtoa_r+0x7c6>
 80090da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090dc:	e7ba      	b.n	8009054 <_dtoa_r+0x824>
 80090de:	2300      	movs	r3, #0
 80090e0:	9307      	str	r3, [sp, #28]
 80090e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	dc13      	bgt.n	8009110 <_dtoa_r+0x8e0>
 80090e8:	2300      	movs	r3, #0
 80090ea:	9307      	str	r3, [sp, #28]
 80090ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10e      	bne.n	8009110 <_dtoa_r+0x8e0>
 80090f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090f4:	031b      	lsls	r3, r3, #12
 80090f6:	d10b      	bne.n	8009110 <_dtoa_r+0x8e0>
 80090f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80090fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090fc:	4213      	tst	r3, r2
 80090fe:	d007      	beq.n	8009110 <_dtoa_r+0x8e0>
 8009100:	9b08      	ldr	r3, [sp, #32]
 8009102:	3301      	adds	r3, #1
 8009104:	9308      	str	r3, [sp, #32]
 8009106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009108:	3301      	adds	r3, #1
 800910a:	930d      	str	r3, [sp, #52]	; 0x34
 800910c:	2301      	movs	r3, #1
 800910e:	9307      	str	r3, [sp, #28]
 8009110:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009112:	2001      	movs	r0, #1
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1b5      	bne.n	8009084 <_dtoa_r+0x854>
 8009118:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800911a:	221f      	movs	r2, #31
 800911c:	1818      	adds	r0, r3, r0
 800911e:	0003      	movs	r3, r0
 8009120:	4013      	ands	r3, r2
 8009122:	4210      	tst	r0, r2
 8009124:	d046      	beq.n	80091b4 <_dtoa_r+0x984>
 8009126:	3201      	adds	r2, #1
 8009128:	1ad2      	subs	r2, r2, r3
 800912a:	2a04      	cmp	r2, #4
 800912c:	dd3f      	ble.n	80091ae <_dtoa_r+0x97e>
 800912e:	221c      	movs	r2, #28
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	9a08      	ldr	r2, [sp, #32]
 8009134:	18e4      	adds	r4, r4, r3
 8009136:	18d2      	adds	r2, r2, r3
 8009138:	9208      	str	r2, [sp, #32]
 800913a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800913c:	18d3      	adds	r3, r2, r3
 800913e:	930d      	str	r3, [sp, #52]	; 0x34
 8009140:	9b08      	ldr	r3, [sp, #32]
 8009142:	2b00      	cmp	r3, #0
 8009144:	dd05      	ble.n	8009152 <_dtoa_r+0x922>
 8009146:	001a      	movs	r2, r3
 8009148:	0038      	movs	r0, r7
 800914a:	9904      	ldr	r1, [sp, #16]
 800914c:	f000 fbc6 	bl	80098dc <__lshift>
 8009150:	9004      	str	r0, [sp, #16]
 8009152:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009154:	2b00      	cmp	r3, #0
 8009156:	dd05      	ble.n	8009164 <_dtoa_r+0x934>
 8009158:	0031      	movs	r1, r6
 800915a:	001a      	movs	r2, r3
 800915c:	0038      	movs	r0, r7
 800915e:	f000 fbbd 	bl	80098dc <__lshift>
 8009162:	0006      	movs	r6, r0
 8009164:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009166:	2b00      	cmp	r3, #0
 8009168:	d026      	beq.n	80091b8 <_dtoa_r+0x988>
 800916a:	0031      	movs	r1, r6
 800916c:	9804      	ldr	r0, [sp, #16]
 800916e:	f000 fc25 	bl	80099bc <__mcmp>
 8009172:	2800      	cmp	r0, #0
 8009174:	da20      	bge.n	80091b8 <_dtoa_r+0x988>
 8009176:	9b02      	ldr	r3, [sp, #8]
 8009178:	220a      	movs	r2, #10
 800917a:	3b01      	subs	r3, #1
 800917c:	9302      	str	r3, [sp, #8]
 800917e:	0038      	movs	r0, r7
 8009180:	2300      	movs	r3, #0
 8009182:	9904      	ldr	r1, [sp, #16]
 8009184:	f000 f9fc 	bl	8009580 <__multadd>
 8009188:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800918a:	9004      	str	r0, [sp, #16]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d100      	bne.n	8009192 <_dtoa_r+0x962>
 8009190:	e160      	b.n	8009454 <_dtoa_r+0xc24>
 8009192:	2300      	movs	r3, #0
 8009194:	0029      	movs	r1, r5
 8009196:	220a      	movs	r2, #10
 8009198:	0038      	movs	r0, r7
 800919a:	f000 f9f1 	bl	8009580 <__multadd>
 800919e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091a0:	0005      	movs	r5, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	dc47      	bgt.n	8009236 <_dtoa_r+0xa06>
 80091a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	dc0d      	bgt.n	80091c8 <_dtoa_r+0x998>
 80091ac:	e043      	b.n	8009236 <_dtoa_r+0xa06>
 80091ae:	2a04      	cmp	r2, #4
 80091b0:	d0c6      	beq.n	8009140 <_dtoa_r+0x910>
 80091b2:	0013      	movs	r3, r2
 80091b4:	331c      	adds	r3, #28
 80091b6:	e7bc      	b.n	8009132 <_dtoa_r+0x902>
 80091b8:	9b06      	ldr	r3, [sp, #24]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	dc35      	bgt.n	800922a <_dtoa_r+0x9fa>
 80091be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	dd32      	ble.n	800922a <_dtoa_r+0x9fa>
 80091c4:	9b06      	ldr	r3, [sp, #24]
 80091c6:	930c      	str	r3, [sp, #48]	; 0x30
 80091c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10c      	bne.n	80091e8 <_dtoa_r+0x9b8>
 80091ce:	0031      	movs	r1, r6
 80091d0:	2205      	movs	r2, #5
 80091d2:	0038      	movs	r0, r7
 80091d4:	f000 f9d4 	bl	8009580 <__multadd>
 80091d8:	0006      	movs	r6, r0
 80091da:	0001      	movs	r1, r0
 80091dc:	9804      	ldr	r0, [sp, #16]
 80091de:	f000 fbed 	bl	80099bc <__mcmp>
 80091e2:	2800      	cmp	r0, #0
 80091e4:	dd00      	ble.n	80091e8 <_dtoa_r+0x9b8>
 80091e6:	e59f      	b.n	8008d28 <_dtoa_r+0x4f8>
 80091e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091ea:	43db      	mvns	r3, r3
 80091ec:	9302      	str	r3, [sp, #8]
 80091ee:	9b05      	ldr	r3, [sp, #20]
 80091f0:	9307      	str	r3, [sp, #28]
 80091f2:	2400      	movs	r4, #0
 80091f4:	0031      	movs	r1, r6
 80091f6:	0038      	movs	r0, r7
 80091f8:	f000 f99e 	bl	8009538 <_Bfree>
 80091fc:	2d00      	cmp	r5, #0
 80091fe:	d100      	bne.n	8009202 <_dtoa_r+0x9d2>
 8009200:	e6b0      	b.n	8008f64 <_dtoa_r+0x734>
 8009202:	2c00      	cmp	r4, #0
 8009204:	d005      	beq.n	8009212 <_dtoa_r+0x9e2>
 8009206:	42ac      	cmp	r4, r5
 8009208:	d003      	beq.n	8009212 <_dtoa_r+0x9e2>
 800920a:	0021      	movs	r1, r4
 800920c:	0038      	movs	r0, r7
 800920e:	f000 f993 	bl	8009538 <_Bfree>
 8009212:	0029      	movs	r1, r5
 8009214:	0038      	movs	r0, r7
 8009216:	f000 f98f 	bl	8009538 <_Bfree>
 800921a:	e6a3      	b.n	8008f64 <_dtoa_r+0x734>
 800921c:	2600      	movs	r6, #0
 800921e:	0035      	movs	r5, r6
 8009220:	e7e2      	b.n	80091e8 <_dtoa_r+0x9b8>
 8009222:	9602      	str	r6, [sp, #8]
 8009224:	9e07      	ldr	r6, [sp, #28]
 8009226:	0035      	movs	r5, r6
 8009228:	e57e      	b.n	8008d28 <_dtoa_r+0x4f8>
 800922a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800922c:	2b00      	cmp	r3, #0
 800922e:	d100      	bne.n	8009232 <_dtoa_r+0xa02>
 8009230:	e0c8      	b.n	80093c4 <_dtoa_r+0xb94>
 8009232:	9b06      	ldr	r3, [sp, #24]
 8009234:	930c      	str	r3, [sp, #48]	; 0x30
 8009236:	2c00      	cmp	r4, #0
 8009238:	dd05      	ble.n	8009246 <_dtoa_r+0xa16>
 800923a:	0029      	movs	r1, r5
 800923c:	0022      	movs	r2, r4
 800923e:	0038      	movs	r0, r7
 8009240:	f000 fb4c 	bl	80098dc <__lshift>
 8009244:	0005      	movs	r5, r0
 8009246:	9b07      	ldr	r3, [sp, #28]
 8009248:	0028      	movs	r0, r5
 800924a:	2b00      	cmp	r3, #0
 800924c:	d01f      	beq.n	800928e <_dtoa_r+0xa5e>
 800924e:	0038      	movs	r0, r7
 8009250:	6869      	ldr	r1, [r5, #4]
 8009252:	f000 f92d 	bl	80094b0 <_Balloc>
 8009256:	1e04      	subs	r4, r0, #0
 8009258:	d10c      	bne.n	8009274 <_dtoa_r+0xa44>
 800925a:	0002      	movs	r2, r0
 800925c:	4b03      	ldr	r3, [pc, #12]	; (800926c <_dtoa_r+0xa3c>)
 800925e:	4904      	ldr	r1, [pc, #16]	; (8009270 <_dtoa_r+0xa40>)
 8009260:	f7ff fafb 	bl	800885a <_dtoa_r+0x2a>
 8009264:	40240000 	.word	0x40240000
 8009268:	00000433 	.word	0x00000433
 800926c:	0800b253 	.word	0x0800b253
 8009270:	000002ea 	.word	0x000002ea
 8009274:	0029      	movs	r1, r5
 8009276:	692b      	ldr	r3, [r5, #16]
 8009278:	310c      	adds	r1, #12
 800927a:	1c9a      	adds	r2, r3, #2
 800927c:	0092      	lsls	r2, r2, #2
 800927e:	300c      	adds	r0, #12
 8009280:	f000 f90d 	bl	800949e <memcpy>
 8009284:	2201      	movs	r2, #1
 8009286:	0021      	movs	r1, r4
 8009288:	0038      	movs	r0, r7
 800928a:	f000 fb27 	bl	80098dc <__lshift>
 800928e:	002c      	movs	r4, r5
 8009290:	0005      	movs	r5, r0
 8009292:	9b05      	ldr	r3, [sp, #20]
 8009294:	9308      	str	r3, [sp, #32]
 8009296:	0031      	movs	r1, r6
 8009298:	9804      	ldr	r0, [sp, #16]
 800929a:	f7ff fa3d 	bl	8008718 <quorem>
 800929e:	0003      	movs	r3, r0
 80092a0:	0021      	movs	r1, r4
 80092a2:	3330      	adds	r3, #48	; 0x30
 80092a4:	900e      	str	r0, [sp, #56]	; 0x38
 80092a6:	9804      	ldr	r0, [sp, #16]
 80092a8:	9306      	str	r3, [sp, #24]
 80092aa:	f000 fb87 	bl	80099bc <__mcmp>
 80092ae:	002a      	movs	r2, r5
 80092b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80092b2:	0031      	movs	r1, r6
 80092b4:	0038      	movs	r0, r7
 80092b6:	f000 fb9d 	bl	80099f4 <__mdiff>
 80092ba:	68c3      	ldr	r3, [r0, #12]
 80092bc:	9007      	str	r0, [sp, #28]
 80092be:	9310      	str	r3, [sp, #64]	; 0x40
 80092c0:	2301      	movs	r3, #1
 80092c2:	930d      	str	r3, [sp, #52]	; 0x34
 80092c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d104      	bne.n	80092d4 <_dtoa_r+0xaa4>
 80092ca:	0001      	movs	r1, r0
 80092cc:	9804      	ldr	r0, [sp, #16]
 80092ce:	f000 fb75 	bl	80099bc <__mcmp>
 80092d2:	900d      	str	r0, [sp, #52]	; 0x34
 80092d4:	0038      	movs	r0, r7
 80092d6:	9907      	ldr	r1, [sp, #28]
 80092d8:	f000 f92e 	bl	8009538 <_Bfree>
 80092dc:	2301      	movs	r3, #1
 80092de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80092e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092e2:	4018      	ands	r0, r3
 80092e4:	9b08      	ldr	r3, [sp, #32]
 80092e6:	3301      	adds	r3, #1
 80092e8:	9307      	str	r3, [sp, #28]
 80092ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092ec:	4313      	orrs	r3, r2
 80092ee:	4303      	orrs	r3, r0
 80092f0:	d10c      	bne.n	800930c <_dtoa_r+0xadc>
 80092f2:	9b06      	ldr	r3, [sp, #24]
 80092f4:	2b39      	cmp	r3, #57	; 0x39
 80092f6:	d025      	beq.n	8009344 <_dtoa_r+0xb14>
 80092f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	dd02      	ble.n	8009304 <_dtoa_r+0xad4>
 80092fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009300:	3331      	adds	r3, #49	; 0x31
 8009302:	9306      	str	r3, [sp, #24]
 8009304:	9b08      	ldr	r3, [sp, #32]
 8009306:	9a06      	ldr	r2, [sp, #24]
 8009308:	701a      	strb	r2, [r3, #0]
 800930a:	e773      	b.n	80091f4 <_dtoa_r+0x9c4>
 800930c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800930e:	2b00      	cmp	r3, #0
 8009310:	db03      	blt.n	800931a <_dtoa_r+0xaea>
 8009312:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009314:	4313      	orrs	r3, r2
 8009316:	4303      	orrs	r3, r0
 8009318:	d11f      	bne.n	800935a <_dtoa_r+0xb2a>
 800931a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800931c:	2b00      	cmp	r3, #0
 800931e:	ddf1      	ble.n	8009304 <_dtoa_r+0xad4>
 8009320:	9904      	ldr	r1, [sp, #16]
 8009322:	2201      	movs	r2, #1
 8009324:	0038      	movs	r0, r7
 8009326:	f000 fad9 	bl	80098dc <__lshift>
 800932a:	0031      	movs	r1, r6
 800932c:	9004      	str	r0, [sp, #16]
 800932e:	f000 fb45 	bl	80099bc <__mcmp>
 8009332:	2800      	cmp	r0, #0
 8009334:	dc03      	bgt.n	800933e <_dtoa_r+0xb0e>
 8009336:	d1e5      	bne.n	8009304 <_dtoa_r+0xad4>
 8009338:	9b06      	ldr	r3, [sp, #24]
 800933a:	07db      	lsls	r3, r3, #31
 800933c:	d5e2      	bpl.n	8009304 <_dtoa_r+0xad4>
 800933e:	9b06      	ldr	r3, [sp, #24]
 8009340:	2b39      	cmp	r3, #57	; 0x39
 8009342:	d1dc      	bne.n	80092fe <_dtoa_r+0xace>
 8009344:	2339      	movs	r3, #57	; 0x39
 8009346:	9a08      	ldr	r2, [sp, #32]
 8009348:	7013      	strb	r3, [r2, #0]
 800934a:	9b07      	ldr	r3, [sp, #28]
 800934c:	9307      	str	r3, [sp, #28]
 800934e:	3b01      	subs	r3, #1
 8009350:	781a      	ldrb	r2, [r3, #0]
 8009352:	2a39      	cmp	r2, #57	; 0x39
 8009354:	d06c      	beq.n	8009430 <_dtoa_r+0xc00>
 8009356:	3201      	adds	r2, #1
 8009358:	e7d6      	b.n	8009308 <_dtoa_r+0xad8>
 800935a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800935c:	2b00      	cmp	r3, #0
 800935e:	dd07      	ble.n	8009370 <_dtoa_r+0xb40>
 8009360:	9b06      	ldr	r3, [sp, #24]
 8009362:	2b39      	cmp	r3, #57	; 0x39
 8009364:	d0ee      	beq.n	8009344 <_dtoa_r+0xb14>
 8009366:	9b06      	ldr	r3, [sp, #24]
 8009368:	9a08      	ldr	r2, [sp, #32]
 800936a:	3301      	adds	r3, #1
 800936c:	7013      	strb	r3, [r2, #0]
 800936e:	e741      	b.n	80091f4 <_dtoa_r+0x9c4>
 8009370:	9b08      	ldr	r3, [sp, #32]
 8009372:	9a06      	ldr	r2, [sp, #24]
 8009374:	701a      	strb	r2, [r3, #0]
 8009376:	2301      	movs	r3, #1
 8009378:	9a05      	ldr	r2, [sp, #20]
 800937a:	1a9b      	subs	r3, r3, r2
 800937c:	9a08      	ldr	r2, [sp, #32]
 800937e:	189b      	adds	r3, r3, r2
 8009380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009382:	429a      	cmp	r2, r3
 8009384:	d03e      	beq.n	8009404 <_dtoa_r+0xbd4>
 8009386:	2300      	movs	r3, #0
 8009388:	220a      	movs	r2, #10
 800938a:	9904      	ldr	r1, [sp, #16]
 800938c:	0038      	movs	r0, r7
 800938e:	f000 f8f7 	bl	8009580 <__multadd>
 8009392:	2300      	movs	r3, #0
 8009394:	9004      	str	r0, [sp, #16]
 8009396:	220a      	movs	r2, #10
 8009398:	0021      	movs	r1, r4
 800939a:	0038      	movs	r0, r7
 800939c:	42ac      	cmp	r4, r5
 800939e:	d106      	bne.n	80093ae <_dtoa_r+0xb7e>
 80093a0:	f000 f8ee 	bl	8009580 <__multadd>
 80093a4:	0004      	movs	r4, r0
 80093a6:	0005      	movs	r5, r0
 80093a8:	9b07      	ldr	r3, [sp, #28]
 80093aa:	9308      	str	r3, [sp, #32]
 80093ac:	e773      	b.n	8009296 <_dtoa_r+0xa66>
 80093ae:	f000 f8e7 	bl	8009580 <__multadd>
 80093b2:	0029      	movs	r1, r5
 80093b4:	0004      	movs	r4, r0
 80093b6:	2300      	movs	r3, #0
 80093b8:	220a      	movs	r2, #10
 80093ba:	0038      	movs	r0, r7
 80093bc:	f000 f8e0 	bl	8009580 <__multadd>
 80093c0:	0005      	movs	r5, r0
 80093c2:	e7f1      	b.n	80093a8 <_dtoa_r+0xb78>
 80093c4:	9b06      	ldr	r3, [sp, #24]
 80093c6:	930c      	str	r3, [sp, #48]	; 0x30
 80093c8:	2400      	movs	r4, #0
 80093ca:	0031      	movs	r1, r6
 80093cc:	9804      	ldr	r0, [sp, #16]
 80093ce:	f7ff f9a3 	bl	8008718 <quorem>
 80093d2:	9b05      	ldr	r3, [sp, #20]
 80093d4:	3030      	adds	r0, #48	; 0x30
 80093d6:	5518      	strb	r0, [r3, r4]
 80093d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093da:	3401      	adds	r4, #1
 80093dc:	9006      	str	r0, [sp, #24]
 80093de:	42a3      	cmp	r3, r4
 80093e0:	dd07      	ble.n	80093f2 <_dtoa_r+0xbc2>
 80093e2:	2300      	movs	r3, #0
 80093e4:	220a      	movs	r2, #10
 80093e6:	0038      	movs	r0, r7
 80093e8:	9904      	ldr	r1, [sp, #16]
 80093ea:	f000 f8c9 	bl	8009580 <__multadd>
 80093ee:	9004      	str	r0, [sp, #16]
 80093f0:	e7eb      	b.n	80093ca <_dtoa_r+0xb9a>
 80093f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093f4:	2001      	movs	r0, #1
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	dd00      	ble.n	80093fc <_dtoa_r+0xbcc>
 80093fa:	0018      	movs	r0, r3
 80093fc:	2400      	movs	r4, #0
 80093fe:	9b05      	ldr	r3, [sp, #20]
 8009400:	181b      	adds	r3, r3, r0
 8009402:	9307      	str	r3, [sp, #28]
 8009404:	9904      	ldr	r1, [sp, #16]
 8009406:	2201      	movs	r2, #1
 8009408:	0038      	movs	r0, r7
 800940a:	f000 fa67 	bl	80098dc <__lshift>
 800940e:	0031      	movs	r1, r6
 8009410:	9004      	str	r0, [sp, #16]
 8009412:	f000 fad3 	bl	80099bc <__mcmp>
 8009416:	2800      	cmp	r0, #0
 8009418:	dc97      	bgt.n	800934a <_dtoa_r+0xb1a>
 800941a:	d102      	bne.n	8009422 <_dtoa_r+0xbf2>
 800941c:	9b06      	ldr	r3, [sp, #24]
 800941e:	07db      	lsls	r3, r3, #31
 8009420:	d493      	bmi.n	800934a <_dtoa_r+0xb1a>
 8009422:	9b07      	ldr	r3, [sp, #28]
 8009424:	9307      	str	r3, [sp, #28]
 8009426:	3b01      	subs	r3, #1
 8009428:	781a      	ldrb	r2, [r3, #0]
 800942a:	2a30      	cmp	r2, #48	; 0x30
 800942c:	d0fa      	beq.n	8009424 <_dtoa_r+0xbf4>
 800942e:	e6e1      	b.n	80091f4 <_dtoa_r+0x9c4>
 8009430:	9a05      	ldr	r2, [sp, #20]
 8009432:	429a      	cmp	r2, r3
 8009434:	d18a      	bne.n	800934c <_dtoa_r+0xb1c>
 8009436:	9b02      	ldr	r3, [sp, #8]
 8009438:	3301      	adds	r3, #1
 800943a:	9302      	str	r3, [sp, #8]
 800943c:	2331      	movs	r3, #49	; 0x31
 800943e:	e795      	b.n	800936c <_dtoa_r+0xb3c>
 8009440:	4b08      	ldr	r3, [pc, #32]	; (8009464 <_dtoa_r+0xc34>)
 8009442:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009444:	9305      	str	r3, [sp, #20]
 8009446:	4b08      	ldr	r3, [pc, #32]	; (8009468 <_dtoa_r+0xc38>)
 8009448:	2a00      	cmp	r2, #0
 800944a:	d001      	beq.n	8009450 <_dtoa_r+0xc20>
 800944c:	f7ff fa3b 	bl	80088c6 <_dtoa_r+0x96>
 8009450:	f7ff fa3b 	bl	80088ca <_dtoa_r+0x9a>
 8009454:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009456:	2b00      	cmp	r3, #0
 8009458:	dcb6      	bgt.n	80093c8 <_dtoa_r+0xb98>
 800945a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800945c:	2b02      	cmp	r3, #2
 800945e:	dd00      	ble.n	8009462 <_dtoa_r+0xc32>
 8009460:	e6b2      	b.n	80091c8 <_dtoa_r+0x998>
 8009462:	e7b1      	b.n	80093c8 <_dtoa_r+0xb98>
 8009464:	0800b1d0 	.word	0x0800b1d0
 8009468:	0800b1d8 	.word	0x0800b1d8

0800946c <_localeconv_r>:
 800946c:	4800      	ldr	r0, [pc, #0]	; (8009470 <_localeconv_r+0x4>)
 800946e:	4770      	bx	lr
 8009470:	200001a0 	.word	0x200001a0

08009474 <malloc>:
 8009474:	b510      	push	{r4, lr}
 8009476:	4b03      	ldr	r3, [pc, #12]	; (8009484 <malloc+0x10>)
 8009478:	0001      	movs	r1, r0
 800947a:	6818      	ldr	r0, [r3, #0]
 800947c:	f000 fc0e 	bl	8009c9c <_malloc_r>
 8009480:	bd10      	pop	{r4, pc}
 8009482:	46c0      	nop			; (mov r8, r8)
 8009484:	2000004c 	.word	0x2000004c

08009488 <memchr>:
 8009488:	b2c9      	uxtb	r1, r1
 800948a:	1882      	adds	r2, r0, r2
 800948c:	4290      	cmp	r0, r2
 800948e:	d101      	bne.n	8009494 <memchr+0xc>
 8009490:	2000      	movs	r0, #0
 8009492:	4770      	bx	lr
 8009494:	7803      	ldrb	r3, [r0, #0]
 8009496:	428b      	cmp	r3, r1
 8009498:	d0fb      	beq.n	8009492 <memchr+0xa>
 800949a:	3001      	adds	r0, #1
 800949c:	e7f6      	b.n	800948c <memchr+0x4>

0800949e <memcpy>:
 800949e:	2300      	movs	r3, #0
 80094a0:	b510      	push	{r4, lr}
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d100      	bne.n	80094a8 <memcpy+0xa>
 80094a6:	bd10      	pop	{r4, pc}
 80094a8:	5ccc      	ldrb	r4, [r1, r3]
 80094aa:	54c4      	strb	r4, [r0, r3]
 80094ac:	3301      	adds	r3, #1
 80094ae:	e7f8      	b.n	80094a2 <memcpy+0x4>

080094b0 <_Balloc>:
 80094b0:	b570      	push	{r4, r5, r6, lr}
 80094b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80094b4:	0006      	movs	r6, r0
 80094b6:	000c      	movs	r4, r1
 80094b8:	2d00      	cmp	r5, #0
 80094ba:	d10e      	bne.n	80094da <_Balloc+0x2a>
 80094bc:	2010      	movs	r0, #16
 80094be:	f7ff ffd9 	bl	8009474 <malloc>
 80094c2:	1e02      	subs	r2, r0, #0
 80094c4:	6270      	str	r0, [r6, #36]	; 0x24
 80094c6:	d104      	bne.n	80094d2 <_Balloc+0x22>
 80094c8:	2166      	movs	r1, #102	; 0x66
 80094ca:	4b19      	ldr	r3, [pc, #100]	; (8009530 <_Balloc+0x80>)
 80094cc:	4819      	ldr	r0, [pc, #100]	; (8009534 <_Balloc+0x84>)
 80094ce:	f000 fdb7 	bl	800a040 <__assert_func>
 80094d2:	6045      	str	r5, [r0, #4]
 80094d4:	6085      	str	r5, [r0, #8]
 80094d6:	6005      	str	r5, [r0, #0]
 80094d8:	60c5      	str	r5, [r0, #12]
 80094da:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80094dc:	68eb      	ldr	r3, [r5, #12]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d013      	beq.n	800950a <_Balloc+0x5a>
 80094e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80094e4:	00a2      	lsls	r2, r4, #2
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	189b      	adds	r3, r3, r2
 80094ea:	6818      	ldr	r0, [r3, #0]
 80094ec:	2800      	cmp	r0, #0
 80094ee:	d118      	bne.n	8009522 <_Balloc+0x72>
 80094f0:	2101      	movs	r1, #1
 80094f2:	000d      	movs	r5, r1
 80094f4:	40a5      	lsls	r5, r4
 80094f6:	1d6a      	adds	r2, r5, #5
 80094f8:	0030      	movs	r0, r6
 80094fa:	0092      	lsls	r2, r2, #2
 80094fc:	f000 fb76 	bl	8009bec <_calloc_r>
 8009500:	2800      	cmp	r0, #0
 8009502:	d00c      	beq.n	800951e <_Balloc+0x6e>
 8009504:	6044      	str	r4, [r0, #4]
 8009506:	6085      	str	r5, [r0, #8]
 8009508:	e00d      	b.n	8009526 <_Balloc+0x76>
 800950a:	2221      	movs	r2, #33	; 0x21
 800950c:	2104      	movs	r1, #4
 800950e:	0030      	movs	r0, r6
 8009510:	f000 fb6c 	bl	8009bec <_calloc_r>
 8009514:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009516:	60e8      	str	r0, [r5, #12]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1e1      	bne.n	80094e2 <_Balloc+0x32>
 800951e:	2000      	movs	r0, #0
 8009520:	bd70      	pop	{r4, r5, r6, pc}
 8009522:	6802      	ldr	r2, [r0, #0]
 8009524:	601a      	str	r2, [r3, #0]
 8009526:	2300      	movs	r3, #0
 8009528:	6103      	str	r3, [r0, #16]
 800952a:	60c3      	str	r3, [r0, #12]
 800952c:	e7f8      	b.n	8009520 <_Balloc+0x70>
 800952e:	46c0      	nop			; (mov r8, r8)
 8009530:	0800b1dd 	.word	0x0800b1dd
 8009534:	0800b264 	.word	0x0800b264

08009538 <_Bfree>:
 8009538:	b570      	push	{r4, r5, r6, lr}
 800953a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800953c:	0005      	movs	r5, r0
 800953e:	000c      	movs	r4, r1
 8009540:	2e00      	cmp	r6, #0
 8009542:	d10e      	bne.n	8009562 <_Bfree+0x2a>
 8009544:	2010      	movs	r0, #16
 8009546:	f7ff ff95 	bl	8009474 <malloc>
 800954a:	1e02      	subs	r2, r0, #0
 800954c:	6268      	str	r0, [r5, #36]	; 0x24
 800954e:	d104      	bne.n	800955a <_Bfree+0x22>
 8009550:	218a      	movs	r1, #138	; 0x8a
 8009552:	4b09      	ldr	r3, [pc, #36]	; (8009578 <_Bfree+0x40>)
 8009554:	4809      	ldr	r0, [pc, #36]	; (800957c <_Bfree+0x44>)
 8009556:	f000 fd73 	bl	800a040 <__assert_func>
 800955a:	6046      	str	r6, [r0, #4]
 800955c:	6086      	str	r6, [r0, #8]
 800955e:	6006      	str	r6, [r0, #0]
 8009560:	60c6      	str	r6, [r0, #12]
 8009562:	2c00      	cmp	r4, #0
 8009564:	d007      	beq.n	8009576 <_Bfree+0x3e>
 8009566:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009568:	6862      	ldr	r2, [r4, #4]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	0092      	lsls	r2, r2, #2
 800956e:	189b      	adds	r3, r3, r2
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	6022      	str	r2, [r4, #0]
 8009574:	601c      	str	r4, [r3, #0]
 8009576:	bd70      	pop	{r4, r5, r6, pc}
 8009578:	0800b1dd 	.word	0x0800b1dd
 800957c:	0800b264 	.word	0x0800b264

08009580 <__multadd>:
 8009580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009582:	000e      	movs	r6, r1
 8009584:	9001      	str	r0, [sp, #4]
 8009586:	000c      	movs	r4, r1
 8009588:	001d      	movs	r5, r3
 800958a:	2000      	movs	r0, #0
 800958c:	690f      	ldr	r7, [r1, #16]
 800958e:	3614      	adds	r6, #20
 8009590:	6833      	ldr	r3, [r6, #0]
 8009592:	3001      	adds	r0, #1
 8009594:	b299      	uxth	r1, r3
 8009596:	4351      	muls	r1, r2
 8009598:	0c1b      	lsrs	r3, r3, #16
 800959a:	4353      	muls	r3, r2
 800959c:	1949      	adds	r1, r1, r5
 800959e:	0c0d      	lsrs	r5, r1, #16
 80095a0:	195b      	adds	r3, r3, r5
 80095a2:	0c1d      	lsrs	r5, r3, #16
 80095a4:	b289      	uxth	r1, r1
 80095a6:	041b      	lsls	r3, r3, #16
 80095a8:	185b      	adds	r3, r3, r1
 80095aa:	c608      	stmia	r6!, {r3}
 80095ac:	4287      	cmp	r7, r0
 80095ae:	dcef      	bgt.n	8009590 <__multadd+0x10>
 80095b0:	2d00      	cmp	r5, #0
 80095b2:	d022      	beq.n	80095fa <__multadd+0x7a>
 80095b4:	68a3      	ldr	r3, [r4, #8]
 80095b6:	42bb      	cmp	r3, r7
 80095b8:	dc19      	bgt.n	80095ee <__multadd+0x6e>
 80095ba:	6863      	ldr	r3, [r4, #4]
 80095bc:	9801      	ldr	r0, [sp, #4]
 80095be:	1c59      	adds	r1, r3, #1
 80095c0:	f7ff ff76 	bl	80094b0 <_Balloc>
 80095c4:	1e06      	subs	r6, r0, #0
 80095c6:	d105      	bne.n	80095d4 <__multadd+0x54>
 80095c8:	0002      	movs	r2, r0
 80095ca:	21b5      	movs	r1, #181	; 0xb5
 80095cc:	4b0c      	ldr	r3, [pc, #48]	; (8009600 <__multadd+0x80>)
 80095ce:	480d      	ldr	r0, [pc, #52]	; (8009604 <__multadd+0x84>)
 80095d0:	f000 fd36 	bl	800a040 <__assert_func>
 80095d4:	0021      	movs	r1, r4
 80095d6:	6923      	ldr	r3, [r4, #16]
 80095d8:	310c      	adds	r1, #12
 80095da:	1c9a      	adds	r2, r3, #2
 80095dc:	0092      	lsls	r2, r2, #2
 80095de:	300c      	adds	r0, #12
 80095e0:	f7ff ff5d 	bl	800949e <memcpy>
 80095e4:	0021      	movs	r1, r4
 80095e6:	9801      	ldr	r0, [sp, #4]
 80095e8:	f7ff ffa6 	bl	8009538 <_Bfree>
 80095ec:	0034      	movs	r4, r6
 80095ee:	1d3b      	adds	r3, r7, #4
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	18e3      	adds	r3, r4, r3
 80095f4:	605d      	str	r5, [r3, #4]
 80095f6:	1c7b      	adds	r3, r7, #1
 80095f8:	6123      	str	r3, [r4, #16]
 80095fa:	0020      	movs	r0, r4
 80095fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095fe:	46c0      	nop			; (mov r8, r8)
 8009600:	0800b253 	.word	0x0800b253
 8009604:	0800b264 	.word	0x0800b264

08009608 <__hi0bits>:
 8009608:	0003      	movs	r3, r0
 800960a:	0c02      	lsrs	r2, r0, #16
 800960c:	2000      	movs	r0, #0
 800960e:	4282      	cmp	r2, r0
 8009610:	d101      	bne.n	8009616 <__hi0bits+0xe>
 8009612:	041b      	lsls	r3, r3, #16
 8009614:	3010      	adds	r0, #16
 8009616:	0e1a      	lsrs	r2, r3, #24
 8009618:	d101      	bne.n	800961e <__hi0bits+0x16>
 800961a:	3008      	adds	r0, #8
 800961c:	021b      	lsls	r3, r3, #8
 800961e:	0f1a      	lsrs	r2, r3, #28
 8009620:	d101      	bne.n	8009626 <__hi0bits+0x1e>
 8009622:	3004      	adds	r0, #4
 8009624:	011b      	lsls	r3, r3, #4
 8009626:	0f9a      	lsrs	r2, r3, #30
 8009628:	d101      	bne.n	800962e <__hi0bits+0x26>
 800962a:	3002      	adds	r0, #2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	2b00      	cmp	r3, #0
 8009630:	db03      	blt.n	800963a <__hi0bits+0x32>
 8009632:	3001      	adds	r0, #1
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	d400      	bmi.n	800963a <__hi0bits+0x32>
 8009638:	2020      	movs	r0, #32
 800963a:	4770      	bx	lr

0800963c <__lo0bits>:
 800963c:	6803      	ldr	r3, [r0, #0]
 800963e:	0002      	movs	r2, r0
 8009640:	2107      	movs	r1, #7
 8009642:	0018      	movs	r0, r3
 8009644:	4008      	ands	r0, r1
 8009646:	420b      	tst	r3, r1
 8009648:	d00d      	beq.n	8009666 <__lo0bits+0x2a>
 800964a:	3906      	subs	r1, #6
 800964c:	2000      	movs	r0, #0
 800964e:	420b      	tst	r3, r1
 8009650:	d105      	bne.n	800965e <__lo0bits+0x22>
 8009652:	3002      	adds	r0, #2
 8009654:	4203      	tst	r3, r0
 8009656:	d003      	beq.n	8009660 <__lo0bits+0x24>
 8009658:	40cb      	lsrs	r3, r1
 800965a:	0008      	movs	r0, r1
 800965c:	6013      	str	r3, [r2, #0]
 800965e:	4770      	bx	lr
 8009660:	089b      	lsrs	r3, r3, #2
 8009662:	6013      	str	r3, [r2, #0]
 8009664:	e7fb      	b.n	800965e <__lo0bits+0x22>
 8009666:	b299      	uxth	r1, r3
 8009668:	2900      	cmp	r1, #0
 800966a:	d101      	bne.n	8009670 <__lo0bits+0x34>
 800966c:	2010      	movs	r0, #16
 800966e:	0c1b      	lsrs	r3, r3, #16
 8009670:	b2d9      	uxtb	r1, r3
 8009672:	2900      	cmp	r1, #0
 8009674:	d101      	bne.n	800967a <__lo0bits+0x3e>
 8009676:	3008      	adds	r0, #8
 8009678:	0a1b      	lsrs	r3, r3, #8
 800967a:	0719      	lsls	r1, r3, #28
 800967c:	d101      	bne.n	8009682 <__lo0bits+0x46>
 800967e:	3004      	adds	r0, #4
 8009680:	091b      	lsrs	r3, r3, #4
 8009682:	0799      	lsls	r1, r3, #30
 8009684:	d101      	bne.n	800968a <__lo0bits+0x4e>
 8009686:	3002      	adds	r0, #2
 8009688:	089b      	lsrs	r3, r3, #2
 800968a:	07d9      	lsls	r1, r3, #31
 800968c:	d4e9      	bmi.n	8009662 <__lo0bits+0x26>
 800968e:	3001      	adds	r0, #1
 8009690:	085b      	lsrs	r3, r3, #1
 8009692:	d1e6      	bne.n	8009662 <__lo0bits+0x26>
 8009694:	2020      	movs	r0, #32
 8009696:	e7e2      	b.n	800965e <__lo0bits+0x22>

08009698 <__i2b>:
 8009698:	b510      	push	{r4, lr}
 800969a:	000c      	movs	r4, r1
 800969c:	2101      	movs	r1, #1
 800969e:	f7ff ff07 	bl	80094b0 <_Balloc>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d106      	bne.n	80096b4 <__i2b+0x1c>
 80096a6:	21a0      	movs	r1, #160	; 0xa0
 80096a8:	0002      	movs	r2, r0
 80096aa:	4b04      	ldr	r3, [pc, #16]	; (80096bc <__i2b+0x24>)
 80096ac:	4804      	ldr	r0, [pc, #16]	; (80096c0 <__i2b+0x28>)
 80096ae:	0049      	lsls	r1, r1, #1
 80096b0:	f000 fcc6 	bl	800a040 <__assert_func>
 80096b4:	2301      	movs	r3, #1
 80096b6:	6144      	str	r4, [r0, #20]
 80096b8:	6103      	str	r3, [r0, #16]
 80096ba:	bd10      	pop	{r4, pc}
 80096bc:	0800b253 	.word	0x0800b253
 80096c0:	0800b264 	.word	0x0800b264

080096c4 <__multiply>:
 80096c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096c6:	690b      	ldr	r3, [r1, #16]
 80096c8:	0014      	movs	r4, r2
 80096ca:	6912      	ldr	r2, [r2, #16]
 80096cc:	000d      	movs	r5, r1
 80096ce:	b089      	sub	sp, #36	; 0x24
 80096d0:	4293      	cmp	r3, r2
 80096d2:	da01      	bge.n	80096d8 <__multiply+0x14>
 80096d4:	0025      	movs	r5, r4
 80096d6:	000c      	movs	r4, r1
 80096d8:	692f      	ldr	r7, [r5, #16]
 80096da:	6926      	ldr	r6, [r4, #16]
 80096dc:	6869      	ldr	r1, [r5, #4]
 80096de:	19bb      	adds	r3, r7, r6
 80096e0:	9302      	str	r3, [sp, #8]
 80096e2:	68ab      	ldr	r3, [r5, #8]
 80096e4:	19ba      	adds	r2, r7, r6
 80096e6:	4293      	cmp	r3, r2
 80096e8:	da00      	bge.n	80096ec <__multiply+0x28>
 80096ea:	3101      	adds	r1, #1
 80096ec:	f7ff fee0 	bl	80094b0 <_Balloc>
 80096f0:	9001      	str	r0, [sp, #4]
 80096f2:	2800      	cmp	r0, #0
 80096f4:	d106      	bne.n	8009704 <__multiply+0x40>
 80096f6:	215e      	movs	r1, #94	; 0x5e
 80096f8:	0002      	movs	r2, r0
 80096fa:	4b48      	ldr	r3, [pc, #288]	; (800981c <__multiply+0x158>)
 80096fc:	4848      	ldr	r0, [pc, #288]	; (8009820 <__multiply+0x15c>)
 80096fe:	31ff      	adds	r1, #255	; 0xff
 8009700:	f000 fc9e 	bl	800a040 <__assert_func>
 8009704:	9b01      	ldr	r3, [sp, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	3314      	adds	r3, #20
 800970a:	469c      	mov	ip, r3
 800970c:	19bb      	adds	r3, r7, r6
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	4463      	add	r3, ip
 8009712:	9303      	str	r3, [sp, #12]
 8009714:	4663      	mov	r3, ip
 8009716:	9903      	ldr	r1, [sp, #12]
 8009718:	428b      	cmp	r3, r1
 800971a:	d32c      	bcc.n	8009776 <__multiply+0xb2>
 800971c:	002b      	movs	r3, r5
 800971e:	0022      	movs	r2, r4
 8009720:	3314      	adds	r3, #20
 8009722:	00bf      	lsls	r7, r7, #2
 8009724:	3214      	adds	r2, #20
 8009726:	9306      	str	r3, [sp, #24]
 8009728:	00b6      	lsls	r6, r6, #2
 800972a:	19db      	adds	r3, r3, r7
 800972c:	9304      	str	r3, [sp, #16]
 800972e:	1993      	adds	r3, r2, r6
 8009730:	9307      	str	r3, [sp, #28]
 8009732:	2304      	movs	r3, #4
 8009734:	9305      	str	r3, [sp, #20]
 8009736:	002b      	movs	r3, r5
 8009738:	9904      	ldr	r1, [sp, #16]
 800973a:	3315      	adds	r3, #21
 800973c:	9200      	str	r2, [sp, #0]
 800973e:	4299      	cmp	r1, r3
 8009740:	d305      	bcc.n	800974e <__multiply+0x8a>
 8009742:	1b4b      	subs	r3, r1, r5
 8009744:	3b15      	subs	r3, #21
 8009746:	089b      	lsrs	r3, r3, #2
 8009748:	3301      	adds	r3, #1
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	9305      	str	r3, [sp, #20]
 800974e:	9b07      	ldr	r3, [sp, #28]
 8009750:	9a00      	ldr	r2, [sp, #0]
 8009752:	429a      	cmp	r2, r3
 8009754:	d311      	bcc.n	800977a <__multiply+0xb6>
 8009756:	9b02      	ldr	r3, [sp, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	dd06      	ble.n	800976a <__multiply+0xa6>
 800975c:	9b03      	ldr	r3, [sp, #12]
 800975e:	3b04      	subs	r3, #4
 8009760:	9303      	str	r3, [sp, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d054      	beq.n	8009814 <__multiply+0x150>
 800976a:	9b01      	ldr	r3, [sp, #4]
 800976c:	9a02      	ldr	r2, [sp, #8]
 800976e:	0018      	movs	r0, r3
 8009770:	611a      	str	r2, [r3, #16]
 8009772:	b009      	add	sp, #36	; 0x24
 8009774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009776:	c304      	stmia	r3!, {r2}
 8009778:	e7cd      	b.n	8009716 <__multiply+0x52>
 800977a:	9b00      	ldr	r3, [sp, #0]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	b298      	uxth	r0, r3
 8009780:	2800      	cmp	r0, #0
 8009782:	d01c      	beq.n	80097be <__multiply+0xfa>
 8009784:	4667      	mov	r7, ip
 8009786:	2400      	movs	r4, #0
 8009788:	9e06      	ldr	r6, [sp, #24]
 800978a:	ce02      	ldmia	r6!, {r1}
 800978c:	683a      	ldr	r2, [r7, #0]
 800978e:	b28b      	uxth	r3, r1
 8009790:	4343      	muls	r3, r0
 8009792:	0c09      	lsrs	r1, r1, #16
 8009794:	4341      	muls	r1, r0
 8009796:	b292      	uxth	r2, r2
 8009798:	189b      	adds	r3, r3, r2
 800979a:	191b      	adds	r3, r3, r4
 800979c:	000c      	movs	r4, r1
 800979e:	683a      	ldr	r2, [r7, #0]
 80097a0:	0c11      	lsrs	r1, r2, #16
 80097a2:	1861      	adds	r1, r4, r1
 80097a4:	0c1c      	lsrs	r4, r3, #16
 80097a6:	1909      	adds	r1, r1, r4
 80097a8:	0c0c      	lsrs	r4, r1, #16
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	0409      	lsls	r1, r1, #16
 80097ae:	430b      	orrs	r3, r1
 80097b0:	c708      	stmia	r7!, {r3}
 80097b2:	9b04      	ldr	r3, [sp, #16]
 80097b4:	42b3      	cmp	r3, r6
 80097b6:	d8e8      	bhi.n	800978a <__multiply+0xc6>
 80097b8:	4663      	mov	r3, ip
 80097ba:	9a05      	ldr	r2, [sp, #20]
 80097bc:	509c      	str	r4, [r3, r2]
 80097be:	9b00      	ldr	r3, [sp, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	0c1e      	lsrs	r6, r3, #16
 80097c4:	d020      	beq.n	8009808 <__multiply+0x144>
 80097c6:	4663      	mov	r3, ip
 80097c8:	002c      	movs	r4, r5
 80097ca:	4660      	mov	r0, ip
 80097cc:	2700      	movs	r7, #0
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	3414      	adds	r4, #20
 80097d2:	6822      	ldr	r2, [r4, #0]
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	b291      	uxth	r1, r2
 80097d8:	4371      	muls	r1, r6
 80097da:	6802      	ldr	r2, [r0, #0]
 80097dc:	0c12      	lsrs	r2, r2, #16
 80097de:	1889      	adds	r1, r1, r2
 80097e0:	19cf      	adds	r7, r1, r7
 80097e2:	0439      	lsls	r1, r7, #16
 80097e4:	430b      	orrs	r3, r1
 80097e6:	6003      	str	r3, [r0, #0]
 80097e8:	cc02      	ldmia	r4!, {r1}
 80097ea:	6843      	ldr	r3, [r0, #4]
 80097ec:	0c09      	lsrs	r1, r1, #16
 80097ee:	4371      	muls	r1, r6
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	0c3f      	lsrs	r7, r7, #16
 80097f4:	18cb      	adds	r3, r1, r3
 80097f6:	9a04      	ldr	r2, [sp, #16]
 80097f8:	19db      	adds	r3, r3, r7
 80097fa:	0c1f      	lsrs	r7, r3, #16
 80097fc:	3004      	adds	r0, #4
 80097fe:	42a2      	cmp	r2, r4
 8009800:	d8e7      	bhi.n	80097d2 <__multiply+0x10e>
 8009802:	4662      	mov	r2, ip
 8009804:	9905      	ldr	r1, [sp, #20]
 8009806:	5053      	str	r3, [r2, r1]
 8009808:	9b00      	ldr	r3, [sp, #0]
 800980a:	3304      	adds	r3, #4
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	2304      	movs	r3, #4
 8009810:	449c      	add	ip, r3
 8009812:	e79c      	b.n	800974e <__multiply+0x8a>
 8009814:	9b02      	ldr	r3, [sp, #8]
 8009816:	3b01      	subs	r3, #1
 8009818:	9302      	str	r3, [sp, #8]
 800981a:	e79c      	b.n	8009756 <__multiply+0x92>
 800981c:	0800b253 	.word	0x0800b253
 8009820:	0800b264 	.word	0x0800b264

08009824 <__pow5mult>:
 8009824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009826:	2303      	movs	r3, #3
 8009828:	0015      	movs	r5, r2
 800982a:	0007      	movs	r7, r0
 800982c:	000e      	movs	r6, r1
 800982e:	401a      	ands	r2, r3
 8009830:	421d      	tst	r5, r3
 8009832:	d008      	beq.n	8009846 <__pow5mult+0x22>
 8009834:	4925      	ldr	r1, [pc, #148]	; (80098cc <__pow5mult+0xa8>)
 8009836:	3a01      	subs	r2, #1
 8009838:	0092      	lsls	r2, r2, #2
 800983a:	5852      	ldr	r2, [r2, r1]
 800983c:	2300      	movs	r3, #0
 800983e:	0031      	movs	r1, r6
 8009840:	f7ff fe9e 	bl	8009580 <__multadd>
 8009844:	0006      	movs	r6, r0
 8009846:	10ad      	asrs	r5, r5, #2
 8009848:	d03d      	beq.n	80098c6 <__pow5mult+0xa2>
 800984a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800984c:	2c00      	cmp	r4, #0
 800984e:	d10f      	bne.n	8009870 <__pow5mult+0x4c>
 8009850:	2010      	movs	r0, #16
 8009852:	f7ff fe0f 	bl	8009474 <malloc>
 8009856:	1e02      	subs	r2, r0, #0
 8009858:	6278      	str	r0, [r7, #36]	; 0x24
 800985a:	d105      	bne.n	8009868 <__pow5mult+0x44>
 800985c:	21d7      	movs	r1, #215	; 0xd7
 800985e:	4b1c      	ldr	r3, [pc, #112]	; (80098d0 <__pow5mult+0xac>)
 8009860:	481c      	ldr	r0, [pc, #112]	; (80098d4 <__pow5mult+0xb0>)
 8009862:	0049      	lsls	r1, r1, #1
 8009864:	f000 fbec 	bl	800a040 <__assert_func>
 8009868:	6044      	str	r4, [r0, #4]
 800986a:	6084      	str	r4, [r0, #8]
 800986c:	6004      	str	r4, [r0, #0]
 800986e:	60c4      	str	r4, [r0, #12]
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	689c      	ldr	r4, [r3, #8]
 8009874:	9301      	str	r3, [sp, #4]
 8009876:	2c00      	cmp	r4, #0
 8009878:	d108      	bne.n	800988c <__pow5mult+0x68>
 800987a:	0038      	movs	r0, r7
 800987c:	4916      	ldr	r1, [pc, #88]	; (80098d8 <__pow5mult+0xb4>)
 800987e:	f7ff ff0b 	bl	8009698 <__i2b>
 8009882:	9b01      	ldr	r3, [sp, #4]
 8009884:	0004      	movs	r4, r0
 8009886:	6098      	str	r0, [r3, #8]
 8009888:	2300      	movs	r3, #0
 800988a:	6003      	str	r3, [r0, #0]
 800988c:	2301      	movs	r3, #1
 800988e:	421d      	tst	r5, r3
 8009890:	d00a      	beq.n	80098a8 <__pow5mult+0x84>
 8009892:	0031      	movs	r1, r6
 8009894:	0022      	movs	r2, r4
 8009896:	0038      	movs	r0, r7
 8009898:	f7ff ff14 	bl	80096c4 <__multiply>
 800989c:	0031      	movs	r1, r6
 800989e:	9001      	str	r0, [sp, #4]
 80098a0:	0038      	movs	r0, r7
 80098a2:	f7ff fe49 	bl	8009538 <_Bfree>
 80098a6:	9e01      	ldr	r6, [sp, #4]
 80098a8:	106d      	asrs	r5, r5, #1
 80098aa:	d00c      	beq.n	80098c6 <__pow5mult+0xa2>
 80098ac:	6820      	ldr	r0, [r4, #0]
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d107      	bne.n	80098c2 <__pow5mult+0x9e>
 80098b2:	0022      	movs	r2, r4
 80098b4:	0021      	movs	r1, r4
 80098b6:	0038      	movs	r0, r7
 80098b8:	f7ff ff04 	bl	80096c4 <__multiply>
 80098bc:	2300      	movs	r3, #0
 80098be:	6020      	str	r0, [r4, #0]
 80098c0:	6003      	str	r3, [r0, #0]
 80098c2:	0004      	movs	r4, r0
 80098c4:	e7e2      	b.n	800988c <__pow5mult+0x68>
 80098c6:	0030      	movs	r0, r6
 80098c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098ca:	46c0      	nop			; (mov r8, r8)
 80098cc:	0800b3b8 	.word	0x0800b3b8
 80098d0:	0800b1dd 	.word	0x0800b1dd
 80098d4:	0800b264 	.word	0x0800b264
 80098d8:	00000271 	.word	0x00000271

080098dc <__lshift>:
 80098dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098de:	000c      	movs	r4, r1
 80098e0:	0017      	movs	r7, r2
 80098e2:	6923      	ldr	r3, [r4, #16]
 80098e4:	1155      	asrs	r5, r2, #5
 80098e6:	b087      	sub	sp, #28
 80098e8:	18eb      	adds	r3, r5, r3
 80098ea:	9302      	str	r3, [sp, #8]
 80098ec:	3301      	adds	r3, #1
 80098ee:	9301      	str	r3, [sp, #4]
 80098f0:	6849      	ldr	r1, [r1, #4]
 80098f2:	68a3      	ldr	r3, [r4, #8]
 80098f4:	9004      	str	r0, [sp, #16]
 80098f6:	9a01      	ldr	r2, [sp, #4]
 80098f8:	4293      	cmp	r3, r2
 80098fa:	db11      	blt.n	8009920 <__lshift+0x44>
 80098fc:	9804      	ldr	r0, [sp, #16]
 80098fe:	f7ff fdd7 	bl	80094b0 <_Balloc>
 8009902:	0002      	movs	r2, r0
 8009904:	2300      	movs	r3, #0
 8009906:	3214      	adds	r2, #20
 8009908:	0006      	movs	r6, r0
 800990a:	0011      	movs	r1, r2
 800990c:	9203      	str	r2, [sp, #12]
 800990e:	4298      	cmp	r0, r3
 8009910:	d10d      	bne.n	800992e <__lshift+0x52>
 8009912:	21da      	movs	r1, #218	; 0xda
 8009914:	0002      	movs	r2, r0
 8009916:	4b27      	ldr	r3, [pc, #156]	; (80099b4 <__lshift+0xd8>)
 8009918:	4827      	ldr	r0, [pc, #156]	; (80099b8 <__lshift+0xdc>)
 800991a:	31ff      	adds	r1, #255	; 0xff
 800991c:	f000 fb90 	bl	800a040 <__assert_func>
 8009920:	3101      	adds	r1, #1
 8009922:	005b      	lsls	r3, r3, #1
 8009924:	e7e7      	b.n	80098f6 <__lshift+0x1a>
 8009926:	2200      	movs	r2, #0
 8009928:	0098      	lsls	r0, r3, #2
 800992a:	500a      	str	r2, [r1, r0]
 800992c:	3301      	adds	r3, #1
 800992e:	42ab      	cmp	r3, r5
 8009930:	dbf9      	blt.n	8009926 <__lshift+0x4a>
 8009932:	43eb      	mvns	r3, r5
 8009934:	17db      	asrs	r3, r3, #31
 8009936:	401d      	ands	r5, r3
 8009938:	9b03      	ldr	r3, [sp, #12]
 800993a:	00ad      	lsls	r5, r5, #2
 800993c:	211f      	movs	r1, #31
 800993e:	0038      	movs	r0, r7
 8009940:	195d      	adds	r5, r3, r5
 8009942:	0023      	movs	r3, r4
 8009944:	6922      	ldr	r2, [r4, #16]
 8009946:	3314      	adds	r3, #20
 8009948:	0092      	lsls	r2, r2, #2
 800994a:	4008      	ands	r0, r1
 800994c:	4684      	mov	ip, r0
 800994e:	189a      	adds	r2, r3, r2
 8009950:	420f      	tst	r7, r1
 8009952:	d02a      	beq.n	80099aa <__lshift+0xce>
 8009954:	3101      	adds	r1, #1
 8009956:	1a09      	subs	r1, r1, r0
 8009958:	9105      	str	r1, [sp, #20]
 800995a:	2100      	movs	r1, #0
 800995c:	9503      	str	r5, [sp, #12]
 800995e:	4667      	mov	r7, ip
 8009960:	6818      	ldr	r0, [r3, #0]
 8009962:	40b8      	lsls	r0, r7
 8009964:	4301      	orrs	r1, r0
 8009966:	9803      	ldr	r0, [sp, #12]
 8009968:	c002      	stmia	r0!, {r1}
 800996a:	cb02      	ldmia	r3!, {r1}
 800996c:	9003      	str	r0, [sp, #12]
 800996e:	9805      	ldr	r0, [sp, #20]
 8009970:	40c1      	lsrs	r1, r0
 8009972:	429a      	cmp	r2, r3
 8009974:	d8f3      	bhi.n	800995e <__lshift+0x82>
 8009976:	0020      	movs	r0, r4
 8009978:	3015      	adds	r0, #21
 800997a:	2304      	movs	r3, #4
 800997c:	4282      	cmp	r2, r0
 800997e:	d304      	bcc.n	800998a <__lshift+0xae>
 8009980:	1b13      	subs	r3, r2, r4
 8009982:	3b15      	subs	r3, #21
 8009984:	089b      	lsrs	r3, r3, #2
 8009986:	3301      	adds	r3, #1
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	50e9      	str	r1, [r5, r3]
 800998c:	2900      	cmp	r1, #0
 800998e:	d002      	beq.n	8009996 <__lshift+0xba>
 8009990:	9b02      	ldr	r3, [sp, #8]
 8009992:	3302      	adds	r3, #2
 8009994:	9301      	str	r3, [sp, #4]
 8009996:	9b01      	ldr	r3, [sp, #4]
 8009998:	9804      	ldr	r0, [sp, #16]
 800999a:	3b01      	subs	r3, #1
 800999c:	0021      	movs	r1, r4
 800999e:	6133      	str	r3, [r6, #16]
 80099a0:	f7ff fdca 	bl	8009538 <_Bfree>
 80099a4:	0030      	movs	r0, r6
 80099a6:	b007      	add	sp, #28
 80099a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099aa:	cb02      	ldmia	r3!, {r1}
 80099ac:	c502      	stmia	r5!, {r1}
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d8fb      	bhi.n	80099aa <__lshift+0xce>
 80099b2:	e7f0      	b.n	8009996 <__lshift+0xba>
 80099b4:	0800b253 	.word	0x0800b253
 80099b8:	0800b264 	.word	0x0800b264

080099bc <__mcmp>:
 80099bc:	6902      	ldr	r2, [r0, #16]
 80099be:	690b      	ldr	r3, [r1, #16]
 80099c0:	b530      	push	{r4, r5, lr}
 80099c2:	0004      	movs	r4, r0
 80099c4:	1ad0      	subs	r0, r2, r3
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d10d      	bne.n	80099e6 <__mcmp+0x2a>
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	3414      	adds	r4, #20
 80099ce:	3114      	adds	r1, #20
 80099d0:	18e2      	adds	r2, r4, r3
 80099d2:	18c9      	adds	r1, r1, r3
 80099d4:	3a04      	subs	r2, #4
 80099d6:	3904      	subs	r1, #4
 80099d8:	6815      	ldr	r5, [r2, #0]
 80099da:	680b      	ldr	r3, [r1, #0]
 80099dc:	429d      	cmp	r5, r3
 80099de:	d003      	beq.n	80099e8 <__mcmp+0x2c>
 80099e0:	2001      	movs	r0, #1
 80099e2:	429d      	cmp	r5, r3
 80099e4:	d303      	bcc.n	80099ee <__mcmp+0x32>
 80099e6:	bd30      	pop	{r4, r5, pc}
 80099e8:	4294      	cmp	r4, r2
 80099ea:	d3f3      	bcc.n	80099d4 <__mcmp+0x18>
 80099ec:	e7fb      	b.n	80099e6 <__mcmp+0x2a>
 80099ee:	4240      	negs	r0, r0
 80099f0:	e7f9      	b.n	80099e6 <__mcmp+0x2a>
	...

080099f4 <__mdiff>:
 80099f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099f6:	000e      	movs	r6, r1
 80099f8:	0007      	movs	r7, r0
 80099fa:	0011      	movs	r1, r2
 80099fc:	0030      	movs	r0, r6
 80099fe:	b087      	sub	sp, #28
 8009a00:	0014      	movs	r4, r2
 8009a02:	f7ff ffdb 	bl	80099bc <__mcmp>
 8009a06:	1e05      	subs	r5, r0, #0
 8009a08:	d110      	bne.n	8009a2c <__mdiff+0x38>
 8009a0a:	0001      	movs	r1, r0
 8009a0c:	0038      	movs	r0, r7
 8009a0e:	f7ff fd4f 	bl	80094b0 <_Balloc>
 8009a12:	1e02      	subs	r2, r0, #0
 8009a14:	d104      	bne.n	8009a20 <__mdiff+0x2c>
 8009a16:	4b40      	ldr	r3, [pc, #256]	; (8009b18 <__mdiff+0x124>)
 8009a18:	4940      	ldr	r1, [pc, #256]	; (8009b1c <__mdiff+0x128>)
 8009a1a:	4841      	ldr	r0, [pc, #260]	; (8009b20 <__mdiff+0x12c>)
 8009a1c:	f000 fb10 	bl	800a040 <__assert_func>
 8009a20:	2301      	movs	r3, #1
 8009a22:	6145      	str	r5, [r0, #20]
 8009a24:	6103      	str	r3, [r0, #16]
 8009a26:	0010      	movs	r0, r2
 8009a28:	b007      	add	sp, #28
 8009a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	9301      	str	r3, [sp, #4]
 8009a30:	2800      	cmp	r0, #0
 8009a32:	db04      	blt.n	8009a3e <__mdiff+0x4a>
 8009a34:	0023      	movs	r3, r4
 8009a36:	0034      	movs	r4, r6
 8009a38:	001e      	movs	r6, r3
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	9301      	str	r3, [sp, #4]
 8009a3e:	0038      	movs	r0, r7
 8009a40:	6861      	ldr	r1, [r4, #4]
 8009a42:	f7ff fd35 	bl	80094b0 <_Balloc>
 8009a46:	1e02      	subs	r2, r0, #0
 8009a48:	d103      	bne.n	8009a52 <__mdiff+0x5e>
 8009a4a:	2190      	movs	r1, #144	; 0x90
 8009a4c:	4b32      	ldr	r3, [pc, #200]	; (8009b18 <__mdiff+0x124>)
 8009a4e:	0089      	lsls	r1, r1, #2
 8009a50:	e7e3      	b.n	8009a1a <__mdiff+0x26>
 8009a52:	9b01      	ldr	r3, [sp, #4]
 8009a54:	2700      	movs	r7, #0
 8009a56:	60c3      	str	r3, [r0, #12]
 8009a58:	6920      	ldr	r0, [r4, #16]
 8009a5a:	3414      	adds	r4, #20
 8009a5c:	9401      	str	r4, [sp, #4]
 8009a5e:	9b01      	ldr	r3, [sp, #4]
 8009a60:	0084      	lsls	r4, r0, #2
 8009a62:	191b      	adds	r3, r3, r4
 8009a64:	0034      	movs	r4, r6
 8009a66:	9302      	str	r3, [sp, #8]
 8009a68:	6933      	ldr	r3, [r6, #16]
 8009a6a:	3414      	adds	r4, #20
 8009a6c:	0099      	lsls	r1, r3, #2
 8009a6e:	1863      	adds	r3, r4, r1
 8009a70:	9303      	str	r3, [sp, #12]
 8009a72:	0013      	movs	r3, r2
 8009a74:	3314      	adds	r3, #20
 8009a76:	469c      	mov	ip, r3
 8009a78:	9305      	str	r3, [sp, #20]
 8009a7a:	9b01      	ldr	r3, [sp, #4]
 8009a7c:	9304      	str	r3, [sp, #16]
 8009a7e:	9b04      	ldr	r3, [sp, #16]
 8009a80:	cc02      	ldmia	r4!, {r1}
 8009a82:	cb20      	ldmia	r3!, {r5}
 8009a84:	9304      	str	r3, [sp, #16]
 8009a86:	b2ab      	uxth	r3, r5
 8009a88:	19df      	adds	r7, r3, r7
 8009a8a:	b28b      	uxth	r3, r1
 8009a8c:	1afb      	subs	r3, r7, r3
 8009a8e:	0c2d      	lsrs	r5, r5, #16
 8009a90:	0c09      	lsrs	r1, r1, #16
 8009a92:	1a69      	subs	r1, r5, r1
 8009a94:	141d      	asrs	r5, r3, #16
 8009a96:	1949      	adds	r1, r1, r5
 8009a98:	140f      	asrs	r7, r1, #16
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	0409      	lsls	r1, r1, #16
 8009a9e:	430b      	orrs	r3, r1
 8009aa0:	4661      	mov	r1, ip
 8009aa2:	c108      	stmia	r1!, {r3}
 8009aa4:	9b03      	ldr	r3, [sp, #12]
 8009aa6:	468c      	mov	ip, r1
 8009aa8:	42a3      	cmp	r3, r4
 8009aaa:	d8e8      	bhi.n	8009a7e <__mdiff+0x8a>
 8009aac:	0031      	movs	r1, r6
 8009aae:	9c03      	ldr	r4, [sp, #12]
 8009ab0:	3115      	adds	r1, #21
 8009ab2:	2304      	movs	r3, #4
 8009ab4:	428c      	cmp	r4, r1
 8009ab6:	d304      	bcc.n	8009ac2 <__mdiff+0xce>
 8009ab8:	1ba3      	subs	r3, r4, r6
 8009aba:	3b15      	subs	r3, #21
 8009abc:	089b      	lsrs	r3, r3, #2
 8009abe:	3301      	adds	r3, #1
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	9901      	ldr	r1, [sp, #4]
 8009ac4:	18cc      	adds	r4, r1, r3
 8009ac6:	9905      	ldr	r1, [sp, #20]
 8009ac8:	0026      	movs	r6, r4
 8009aca:	18cb      	adds	r3, r1, r3
 8009acc:	469c      	mov	ip, r3
 8009ace:	9902      	ldr	r1, [sp, #8]
 8009ad0:	428e      	cmp	r6, r1
 8009ad2:	d310      	bcc.n	8009af6 <__mdiff+0x102>
 8009ad4:	9e02      	ldr	r6, [sp, #8]
 8009ad6:	1ee5      	subs	r5, r4, #3
 8009ad8:	2100      	movs	r1, #0
 8009ada:	42ae      	cmp	r6, r5
 8009adc:	d304      	bcc.n	8009ae8 <__mdiff+0xf4>
 8009ade:	0031      	movs	r1, r6
 8009ae0:	3103      	adds	r1, #3
 8009ae2:	1b09      	subs	r1, r1, r4
 8009ae4:	0889      	lsrs	r1, r1, #2
 8009ae6:	0089      	lsls	r1, r1, #2
 8009ae8:	185b      	adds	r3, r3, r1
 8009aea:	3b04      	subs	r3, #4
 8009aec:	6819      	ldr	r1, [r3, #0]
 8009aee:	2900      	cmp	r1, #0
 8009af0:	d00f      	beq.n	8009b12 <__mdiff+0x11e>
 8009af2:	6110      	str	r0, [r2, #16]
 8009af4:	e797      	b.n	8009a26 <__mdiff+0x32>
 8009af6:	ce02      	ldmia	r6!, {r1}
 8009af8:	b28d      	uxth	r5, r1
 8009afa:	19ed      	adds	r5, r5, r7
 8009afc:	0c0f      	lsrs	r7, r1, #16
 8009afe:	1429      	asrs	r1, r5, #16
 8009b00:	1879      	adds	r1, r7, r1
 8009b02:	140f      	asrs	r7, r1, #16
 8009b04:	b2ad      	uxth	r5, r5
 8009b06:	0409      	lsls	r1, r1, #16
 8009b08:	430d      	orrs	r5, r1
 8009b0a:	4661      	mov	r1, ip
 8009b0c:	c120      	stmia	r1!, {r5}
 8009b0e:	468c      	mov	ip, r1
 8009b10:	e7dd      	b.n	8009ace <__mdiff+0xda>
 8009b12:	3801      	subs	r0, #1
 8009b14:	e7e9      	b.n	8009aea <__mdiff+0xf6>
 8009b16:	46c0      	nop			; (mov r8, r8)
 8009b18:	0800b253 	.word	0x0800b253
 8009b1c:	00000232 	.word	0x00000232
 8009b20:	0800b264 	.word	0x0800b264

08009b24 <__d2b>:
 8009b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b26:	2101      	movs	r1, #1
 8009b28:	0014      	movs	r4, r2
 8009b2a:	001e      	movs	r6, r3
 8009b2c:	9f08      	ldr	r7, [sp, #32]
 8009b2e:	f7ff fcbf 	bl	80094b0 <_Balloc>
 8009b32:	1e05      	subs	r5, r0, #0
 8009b34:	d105      	bne.n	8009b42 <__d2b+0x1e>
 8009b36:	0002      	movs	r2, r0
 8009b38:	4b26      	ldr	r3, [pc, #152]	; (8009bd4 <__d2b+0xb0>)
 8009b3a:	4927      	ldr	r1, [pc, #156]	; (8009bd8 <__d2b+0xb4>)
 8009b3c:	4827      	ldr	r0, [pc, #156]	; (8009bdc <__d2b+0xb8>)
 8009b3e:	f000 fa7f 	bl	800a040 <__assert_func>
 8009b42:	0333      	lsls	r3, r6, #12
 8009b44:	0076      	lsls	r6, r6, #1
 8009b46:	0b1b      	lsrs	r3, r3, #12
 8009b48:	0d76      	lsrs	r6, r6, #21
 8009b4a:	d124      	bne.n	8009b96 <__d2b+0x72>
 8009b4c:	9301      	str	r3, [sp, #4]
 8009b4e:	2c00      	cmp	r4, #0
 8009b50:	d027      	beq.n	8009ba2 <__d2b+0x7e>
 8009b52:	4668      	mov	r0, sp
 8009b54:	9400      	str	r4, [sp, #0]
 8009b56:	f7ff fd71 	bl	800963c <__lo0bits>
 8009b5a:	9c00      	ldr	r4, [sp, #0]
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	d01e      	beq.n	8009b9e <__d2b+0x7a>
 8009b60:	9b01      	ldr	r3, [sp, #4]
 8009b62:	2120      	movs	r1, #32
 8009b64:	001a      	movs	r2, r3
 8009b66:	1a09      	subs	r1, r1, r0
 8009b68:	408a      	lsls	r2, r1
 8009b6a:	40c3      	lsrs	r3, r0
 8009b6c:	4322      	orrs	r2, r4
 8009b6e:	616a      	str	r2, [r5, #20]
 8009b70:	9301      	str	r3, [sp, #4]
 8009b72:	9c01      	ldr	r4, [sp, #4]
 8009b74:	61ac      	str	r4, [r5, #24]
 8009b76:	1e63      	subs	r3, r4, #1
 8009b78:	419c      	sbcs	r4, r3
 8009b7a:	3401      	adds	r4, #1
 8009b7c:	612c      	str	r4, [r5, #16]
 8009b7e:	2e00      	cmp	r6, #0
 8009b80:	d018      	beq.n	8009bb4 <__d2b+0x90>
 8009b82:	4b17      	ldr	r3, [pc, #92]	; (8009be0 <__d2b+0xbc>)
 8009b84:	18f6      	adds	r6, r6, r3
 8009b86:	2335      	movs	r3, #53	; 0x35
 8009b88:	1836      	adds	r6, r6, r0
 8009b8a:	1a18      	subs	r0, r3, r0
 8009b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8e:	603e      	str	r6, [r7, #0]
 8009b90:	6018      	str	r0, [r3, #0]
 8009b92:	0028      	movs	r0, r5
 8009b94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b96:	2280      	movs	r2, #128	; 0x80
 8009b98:	0352      	lsls	r2, r2, #13
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	e7d6      	b.n	8009b4c <__d2b+0x28>
 8009b9e:	616c      	str	r4, [r5, #20]
 8009ba0:	e7e7      	b.n	8009b72 <__d2b+0x4e>
 8009ba2:	a801      	add	r0, sp, #4
 8009ba4:	f7ff fd4a 	bl	800963c <__lo0bits>
 8009ba8:	2401      	movs	r4, #1
 8009baa:	9b01      	ldr	r3, [sp, #4]
 8009bac:	612c      	str	r4, [r5, #16]
 8009bae:	616b      	str	r3, [r5, #20]
 8009bb0:	3020      	adds	r0, #32
 8009bb2:	e7e4      	b.n	8009b7e <__d2b+0x5a>
 8009bb4:	4b0b      	ldr	r3, [pc, #44]	; (8009be4 <__d2b+0xc0>)
 8009bb6:	18c0      	adds	r0, r0, r3
 8009bb8:	4b0b      	ldr	r3, [pc, #44]	; (8009be8 <__d2b+0xc4>)
 8009bba:	6038      	str	r0, [r7, #0]
 8009bbc:	18e3      	adds	r3, r4, r3
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	18eb      	adds	r3, r5, r3
 8009bc2:	6958      	ldr	r0, [r3, #20]
 8009bc4:	f7ff fd20 	bl	8009608 <__hi0bits>
 8009bc8:	0164      	lsls	r4, r4, #5
 8009bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bcc:	1a24      	subs	r4, r4, r0
 8009bce:	601c      	str	r4, [r3, #0]
 8009bd0:	e7df      	b.n	8009b92 <__d2b+0x6e>
 8009bd2:	46c0      	nop			; (mov r8, r8)
 8009bd4:	0800b253 	.word	0x0800b253
 8009bd8:	0000030a 	.word	0x0000030a
 8009bdc:	0800b264 	.word	0x0800b264
 8009be0:	fffffbcd 	.word	0xfffffbcd
 8009be4:	fffffbce 	.word	0xfffffbce
 8009be8:	3fffffff 	.word	0x3fffffff

08009bec <_calloc_r>:
 8009bec:	434a      	muls	r2, r1
 8009bee:	b570      	push	{r4, r5, r6, lr}
 8009bf0:	0011      	movs	r1, r2
 8009bf2:	0015      	movs	r5, r2
 8009bf4:	f000 f852 	bl	8009c9c <_malloc_r>
 8009bf8:	1e04      	subs	r4, r0, #0
 8009bfa:	d003      	beq.n	8009c04 <_calloc_r+0x18>
 8009bfc:	002a      	movs	r2, r5
 8009bfe:	2100      	movs	r1, #0
 8009c00:	f7fe f88e 	bl	8007d20 <memset>
 8009c04:	0020      	movs	r0, r4
 8009c06:	bd70      	pop	{r4, r5, r6, pc}

08009c08 <_free_r>:
 8009c08:	b570      	push	{r4, r5, r6, lr}
 8009c0a:	0005      	movs	r5, r0
 8009c0c:	2900      	cmp	r1, #0
 8009c0e:	d010      	beq.n	8009c32 <_free_r+0x2a>
 8009c10:	1f0c      	subs	r4, r1, #4
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	da00      	bge.n	8009c1a <_free_r+0x12>
 8009c18:	18e4      	adds	r4, r4, r3
 8009c1a:	0028      	movs	r0, r5
 8009c1c:	f000 fa64 	bl	800a0e8 <__malloc_lock>
 8009c20:	4a1d      	ldr	r2, [pc, #116]	; (8009c98 <_free_r+0x90>)
 8009c22:	6813      	ldr	r3, [r2, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d105      	bne.n	8009c34 <_free_r+0x2c>
 8009c28:	6063      	str	r3, [r4, #4]
 8009c2a:	6014      	str	r4, [r2, #0]
 8009c2c:	0028      	movs	r0, r5
 8009c2e:	f000 fa63 	bl	800a0f8 <__malloc_unlock>
 8009c32:	bd70      	pop	{r4, r5, r6, pc}
 8009c34:	42a3      	cmp	r3, r4
 8009c36:	d908      	bls.n	8009c4a <_free_r+0x42>
 8009c38:	6821      	ldr	r1, [r4, #0]
 8009c3a:	1860      	adds	r0, r4, r1
 8009c3c:	4283      	cmp	r3, r0
 8009c3e:	d1f3      	bne.n	8009c28 <_free_r+0x20>
 8009c40:	6818      	ldr	r0, [r3, #0]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	1841      	adds	r1, r0, r1
 8009c46:	6021      	str	r1, [r4, #0]
 8009c48:	e7ee      	b.n	8009c28 <_free_r+0x20>
 8009c4a:	001a      	movs	r2, r3
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d001      	beq.n	8009c56 <_free_r+0x4e>
 8009c52:	42a3      	cmp	r3, r4
 8009c54:	d9f9      	bls.n	8009c4a <_free_r+0x42>
 8009c56:	6811      	ldr	r1, [r2, #0]
 8009c58:	1850      	adds	r0, r2, r1
 8009c5a:	42a0      	cmp	r0, r4
 8009c5c:	d10b      	bne.n	8009c76 <_free_r+0x6e>
 8009c5e:	6820      	ldr	r0, [r4, #0]
 8009c60:	1809      	adds	r1, r1, r0
 8009c62:	1850      	adds	r0, r2, r1
 8009c64:	6011      	str	r1, [r2, #0]
 8009c66:	4283      	cmp	r3, r0
 8009c68:	d1e0      	bne.n	8009c2c <_free_r+0x24>
 8009c6a:	6818      	ldr	r0, [r3, #0]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	1841      	adds	r1, r0, r1
 8009c70:	6011      	str	r1, [r2, #0]
 8009c72:	6053      	str	r3, [r2, #4]
 8009c74:	e7da      	b.n	8009c2c <_free_r+0x24>
 8009c76:	42a0      	cmp	r0, r4
 8009c78:	d902      	bls.n	8009c80 <_free_r+0x78>
 8009c7a:	230c      	movs	r3, #12
 8009c7c:	602b      	str	r3, [r5, #0]
 8009c7e:	e7d5      	b.n	8009c2c <_free_r+0x24>
 8009c80:	6821      	ldr	r1, [r4, #0]
 8009c82:	1860      	adds	r0, r4, r1
 8009c84:	4283      	cmp	r3, r0
 8009c86:	d103      	bne.n	8009c90 <_free_r+0x88>
 8009c88:	6818      	ldr	r0, [r3, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	1841      	adds	r1, r0, r1
 8009c8e:	6021      	str	r1, [r4, #0]
 8009c90:	6063      	str	r3, [r4, #4]
 8009c92:	6054      	str	r4, [r2, #4]
 8009c94:	e7ca      	b.n	8009c2c <_free_r+0x24>
 8009c96:	46c0      	nop			; (mov r8, r8)
 8009c98:	20000460 	.word	0x20000460

08009c9c <_malloc_r>:
 8009c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	1ccd      	adds	r5, r1, #3
 8009ca2:	439d      	bics	r5, r3
 8009ca4:	3508      	adds	r5, #8
 8009ca6:	0006      	movs	r6, r0
 8009ca8:	2d0c      	cmp	r5, #12
 8009caa:	d21f      	bcs.n	8009cec <_malloc_r+0x50>
 8009cac:	250c      	movs	r5, #12
 8009cae:	42a9      	cmp	r1, r5
 8009cb0:	d81e      	bhi.n	8009cf0 <_malloc_r+0x54>
 8009cb2:	0030      	movs	r0, r6
 8009cb4:	f000 fa18 	bl	800a0e8 <__malloc_lock>
 8009cb8:	4925      	ldr	r1, [pc, #148]	; (8009d50 <_malloc_r+0xb4>)
 8009cba:	680a      	ldr	r2, [r1, #0]
 8009cbc:	0014      	movs	r4, r2
 8009cbe:	2c00      	cmp	r4, #0
 8009cc0:	d11a      	bne.n	8009cf8 <_malloc_r+0x5c>
 8009cc2:	4f24      	ldr	r7, [pc, #144]	; (8009d54 <_malloc_r+0xb8>)
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d104      	bne.n	8009cd4 <_malloc_r+0x38>
 8009cca:	0021      	movs	r1, r4
 8009ccc:	0030      	movs	r0, r6
 8009cce:	f000 f9a5 	bl	800a01c <_sbrk_r>
 8009cd2:	6038      	str	r0, [r7, #0]
 8009cd4:	0029      	movs	r1, r5
 8009cd6:	0030      	movs	r0, r6
 8009cd8:	f000 f9a0 	bl	800a01c <_sbrk_r>
 8009cdc:	1c43      	adds	r3, r0, #1
 8009cde:	d12b      	bne.n	8009d38 <_malloc_r+0x9c>
 8009ce0:	230c      	movs	r3, #12
 8009ce2:	0030      	movs	r0, r6
 8009ce4:	6033      	str	r3, [r6, #0]
 8009ce6:	f000 fa07 	bl	800a0f8 <__malloc_unlock>
 8009cea:	e003      	b.n	8009cf4 <_malloc_r+0x58>
 8009cec:	2d00      	cmp	r5, #0
 8009cee:	dade      	bge.n	8009cae <_malloc_r+0x12>
 8009cf0:	230c      	movs	r3, #12
 8009cf2:	6033      	str	r3, [r6, #0]
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	1b5b      	subs	r3, r3, r5
 8009cfc:	d419      	bmi.n	8009d32 <_malloc_r+0x96>
 8009cfe:	2b0b      	cmp	r3, #11
 8009d00:	d903      	bls.n	8009d0a <_malloc_r+0x6e>
 8009d02:	6023      	str	r3, [r4, #0]
 8009d04:	18e4      	adds	r4, r4, r3
 8009d06:	6025      	str	r5, [r4, #0]
 8009d08:	e003      	b.n	8009d12 <_malloc_r+0x76>
 8009d0a:	6863      	ldr	r3, [r4, #4]
 8009d0c:	42a2      	cmp	r2, r4
 8009d0e:	d10e      	bne.n	8009d2e <_malloc_r+0x92>
 8009d10:	600b      	str	r3, [r1, #0]
 8009d12:	0030      	movs	r0, r6
 8009d14:	f000 f9f0 	bl	800a0f8 <__malloc_unlock>
 8009d18:	0020      	movs	r0, r4
 8009d1a:	2207      	movs	r2, #7
 8009d1c:	300b      	adds	r0, #11
 8009d1e:	1d23      	adds	r3, r4, #4
 8009d20:	4390      	bics	r0, r2
 8009d22:	1ac2      	subs	r2, r0, r3
 8009d24:	4298      	cmp	r0, r3
 8009d26:	d0e6      	beq.n	8009cf6 <_malloc_r+0x5a>
 8009d28:	1a1b      	subs	r3, r3, r0
 8009d2a:	50a3      	str	r3, [r4, r2]
 8009d2c:	e7e3      	b.n	8009cf6 <_malloc_r+0x5a>
 8009d2e:	6053      	str	r3, [r2, #4]
 8009d30:	e7ef      	b.n	8009d12 <_malloc_r+0x76>
 8009d32:	0022      	movs	r2, r4
 8009d34:	6864      	ldr	r4, [r4, #4]
 8009d36:	e7c2      	b.n	8009cbe <_malloc_r+0x22>
 8009d38:	2303      	movs	r3, #3
 8009d3a:	1cc4      	adds	r4, r0, #3
 8009d3c:	439c      	bics	r4, r3
 8009d3e:	42a0      	cmp	r0, r4
 8009d40:	d0e1      	beq.n	8009d06 <_malloc_r+0x6a>
 8009d42:	1a21      	subs	r1, r4, r0
 8009d44:	0030      	movs	r0, r6
 8009d46:	f000 f969 	bl	800a01c <_sbrk_r>
 8009d4a:	1c43      	adds	r3, r0, #1
 8009d4c:	d1db      	bne.n	8009d06 <_malloc_r+0x6a>
 8009d4e:	e7c7      	b.n	8009ce0 <_malloc_r+0x44>
 8009d50:	20000460 	.word	0x20000460
 8009d54:	20000464 	.word	0x20000464

08009d58 <__ssputs_r>:
 8009d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d5a:	688e      	ldr	r6, [r1, #8]
 8009d5c:	b085      	sub	sp, #20
 8009d5e:	0007      	movs	r7, r0
 8009d60:	000c      	movs	r4, r1
 8009d62:	9203      	str	r2, [sp, #12]
 8009d64:	9301      	str	r3, [sp, #4]
 8009d66:	429e      	cmp	r6, r3
 8009d68:	d83c      	bhi.n	8009de4 <__ssputs_r+0x8c>
 8009d6a:	2390      	movs	r3, #144	; 0x90
 8009d6c:	898a      	ldrh	r2, [r1, #12]
 8009d6e:	00db      	lsls	r3, r3, #3
 8009d70:	421a      	tst	r2, r3
 8009d72:	d034      	beq.n	8009dde <__ssputs_r+0x86>
 8009d74:	2503      	movs	r5, #3
 8009d76:	6909      	ldr	r1, [r1, #16]
 8009d78:	6823      	ldr	r3, [r4, #0]
 8009d7a:	1a5b      	subs	r3, r3, r1
 8009d7c:	9302      	str	r3, [sp, #8]
 8009d7e:	6963      	ldr	r3, [r4, #20]
 8009d80:	9802      	ldr	r0, [sp, #8]
 8009d82:	435d      	muls	r5, r3
 8009d84:	0feb      	lsrs	r3, r5, #31
 8009d86:	195d      	adds	r5, r3, r5
 8009d88:	9b01      	ldr	r3, [sp, #4]
 8009d8a:	106d      	asrs	r5, r5, #1
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	181b      	adds	r3, r3, r0
 8009d90:	42ab      	cmp	r3, r5
 8009d92:	d900      	bls.n	8009d96 <__ssputs_r+0x3e>
 8009d94:	001d      	movs	r5, r3
 8009d96:	0553      	lsls	r3, r2, #21
 8009d98:	d532      	bpl.n	8009e00 <__ssputs_r+0xa8>
 8009d9a:	0029      	movs	r1, r5
 8009d9c:	0038      	movs	r0, r7
 8009d9e:	f7ff ff7d 	bl	8009c9c <_malloc_r>
 8009da2:	1e06      	subs	r6, r0, #0
 8009da4:	d109      	bne.n	8009dba <__ssputs_r+0x62>
 8009da6:	230c      	movs	r3, #12
 8009da8:	603b      	str	r3, [r7, #0]
 8009daa:	2340      	movs	r3, #64	; 0x40
 8009dac:	2001      	movs	r0, #1
 8009dae:	89a2      	ldrh	r2, [r4, #12]
 8009db0:	4240      	negs	r0, r0
 8009db2:	4313      	orrs	r3, r2
 8009db4:	81a3      	strh	r3, [r4, #12]
 8009db6:	b005      	add	sp, #20
 8009db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dba:	9a02      	ldr	r2, [sp, #8]
 8009dbc:	6921      	ldr	r1, [r4, #16]
 8009dbe:	f7ff fb6e 	bl	800949e <memcpy>
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	4a14      	ldr	r2, [pc, #80]	; (8009e18 <__ssputs_r+0xc0>)
 8009dc6:	401a      	ands	r2, r3
 8009dc8:	2380      	movs	r3, #128	; 0x80
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	81a3      	strh	r3, [r4, #12]
 8009dce:	9b02      	ldr	r3, [sp, #8]
 8009dd0:	6126      	str	r6, [r4, #16]
 8009dd2:	18f6      	adds	r6, r6, r3
 8009dd4:	6026      	str	r6, [r4, #0]
 8009dd6:	6165      	str	r5, [r4, #20]
 8009dd8:	9e01      	ldr	r6, [sp, #4]
 8009dda:	1aed      	subs	r5, r5, r3
 8009ddc:	60a5      	str	r5, [r4, #8]
 8009dde:	9b01      	ldr	r3, [sp, #4]
 8009de0:	429e      	cmp	r6, r3
 8009de2:	d900      	bls.n	8009de6 <__ssputs_r+0x8e>
 8009de4:	9e01      	ldr	r6, [sp, #4]
 8009de6:	0032      	movs	r2, r6
 8009de8:	9903      	ldr	r1, [sp, #12]
 8009dea:	6820      	ldr	r0, [r4, #0]
 8009dec:	f000 f968 	bl	800a0c0 <memmove>
 8009df0:	68a3      	ldr	r3, [r4, #8]
 8009df2:	2000      	movs	r0, #0
 8009df4:	1b9b      	subs	r3, r3, r6
 8009df6:	60a3      	str	r3, [r4, #8]
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	199e      	adds	r6, r3, r6
 8009dfc:	6026      	str	r6, [r4, #0]
 8009dfe:	e7da      	b.n	8009db6 <__ssputs_r+0x5e>
 8009e00:	002a      	movs	r2, r5
 8009e02:	0038      	movs	r0, r7
 8009e04:	f000 f980 	bl	800a108 <_realloc_r>
 8009e08:	1e06      	subs	r6, r0, #0
 8009e0a:	d1e0      	bne.n	8009dce <__ssputs_r+0x76>
 8009e0c:	0038      	movs	r0, r7
 8009e0e:	6921      	ldr	r1, [r4, #16]
 8009e10:	f7ff fefa 	bl	8009c08 <_free_r>
 8009e14:	e7c7      	b.n	8009da6 <__ssputs_r+0x4e>
 8009e16:	46c0      	nop			; (mov r8, r8)
 8009e18:	fffffb7f 	.word	0xfffffb7f

08009e1c <_svfiprintf_r>:
 8009e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e1e:	b0a1      	sub	sp, #132	; 0x84
 8009e20:	9003      	str	r0, [sp, #12]
 8009e22:	001d      	movs	r5, r3
 8009e24:	898b      	ldrh	r3, [r1, #12]
 8009e26:	000f      	movs	r7, r1
 8009e28:	0016      	movs	r6, r2
 8009e2a:	061b      	lsls	r3, r3, #24
 8009e2c:	d511      	bpl.n	8009e52 <_svfiprintf_r+0x36>
 8009e2e:	690b      	ldr	r3, [r1, #16]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10e      	bne.n	8009e52 <_svfiprintf_r+0x36>
 8009e34:	2140      	movs	r1, #64	; 0x40
 8009e36:	f7ff ff31 	bl	8009c9c <_malloc_r>
 8009e3a:	6038      	str	r0, [r7, #0]
 8009e3c:	6138      	str	r0, [r7, #16]
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d105      	bne.n	8009e4e <_svfiprintf_r+0x32>
 8009e42:	230c      	movs	r3, #12
 8009e44:	9a03      	ldr	r2, [sp, #12]
 8009e46:	3801      	subs	r0, #1
 8009e48:	6013      	str	r3, [r2, #0]
 8009e4a:	b021      	add	sp, #132	; 0x84
 8009e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e4e:	2340      	movs	r3, #64	; 0x40
 8009e50:	617b      	str	r3, [r7, #20]
 8009e52:	2300      	movs	r3, #0
 8009e54:	ac08      	add	r4, sp, #32
 8009e56:	6163      	str	r3, [r4, #20]
 8009e58:	3320      	adds	r3, #32
 8009e5a:	7663      	strb	r3, [r4, #25]
 8009e5c:	3310      	adds	r3, #16
 8009e5e:	76a3      	strb	r3, [r4, #26]
 8009e60:	9507      	str	r5, [sp, #28]
 8009e62:	0035      	movs	r5, r6
 8009e64:	782b      	ldrb	r3, [r5, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <_svfiprintf_r+0x52>
 8009e6a:	2b25      	cmp	r3, #37	; 0x25
 8009e6c:	d147      	bne.n	8009efe <_svfiprintf_r+0xe2>
 8009e6e:	1bab      	subs	r3, r5, r6
 8009e70:	9305      	str	r3, [sp, #20]
 8009e72:	42b5      	cmp	r5, r6
 8009e74:	d00c      	beq.n	8009e90 <_svfiprintf_r+0x74>
 8009e76:	0032      	movs	r2, r6
 8009e78:	0039      	movs	r1, r7
 8009e7a:	9803      	ldr	r0, [sp, #12]
 8009e7c:	f7ff ff6c 	bl	8009d58 <__ssputs_r>
 8009e80:	1c43      	adds	r3, r0, #1
 8009e82:	d100      	bne.n	8009e86 <_svfiprintf_r+0x6a>
 8009e84:	e0ae      	b.n	8009fe4 <_svfiprintf_r+0x1c8>
 8009e86:	6962      	ldr	r2, [r4, #20]
 8009e88:	9b05      	ldr	r3, [sp, #20]
 8009e8a:	4694      	mov	ip, r2
 8009e8c:	4463      	add	r3, ip
 8009e8e:	6163      	str	r3, [r4, #20]
 8009e90:	782b      	ldrb	r3, [r5, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d100      	bne.n	8009e98 <_svfiprintf_r+0x7c>
 8009e96:	e0a5      	b.n	8009fe4 <_svfiprintf_r+0x1c8>
 8009e98:	2201      	movs	r2, #1
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	4252      	negs	r2, r2
 8009e9e:	6062      	str	r2, [r4, #4]
 8009ea0:	a904      	add	r1, sp, #16
 8009ea2:	3254      	adds	r2, #84	; 0x54
 8009ea4:	1852      	adds	r2, r2, r1
 8009ea6:	1c6e      	adds	r6, r5, #1
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	60e3      	str	r3, [r4, #12]
 8009eac:	60a3      	str	r3, [r4, #8]
 8009eae:	7013      	strb	r3, [r2, #0]
 8009eb0:	65a3      	str	r3, [r4, #88]	; 0x58
 8009eb2:	2205      	movs	r2, #5
 8009eb4:	7831      	ldrb	r1, [r6, #0]
 8009eb6:	4854      	ldr	r0, [pc, #336]	; (800a008 <_svfiprintf_r+0x1ec>)
 8009eb8:	f7ff fae6 	bl	8009488 <memchr>
 8009ebc:	1c75      	adds	r5, r6, #1
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d11f      	bne.n	8009f02 <_svfiprintf_r+0xe6>
 8009ec2:	6822      	ldr	r2, [r4, #0]
 8009ec4:	06d3      	lsls	r3, r2, #27
 8009ec6:	d504      	bpl.n	8009ed2 <_svfiprintf_r+0xb6>
 8009ec8:	2353      	movs	r3, #83	; 0x53
 8009eca:	a904      	add	r1, sp, #16
 8009ecc:	185b      	adds	r3, r3, r1
 8009ece:	2120      	movs	r1, #32
 8009ed0:	7019      	strb	r1, [r3, #0]
 8009ed2:	0713      	lsls	r3, r2, #28
 8009ed4:	d504      	bpl.n	8009ee0 <_svfiprintf_r+0xc4>
 8009ed6:	2353      	movs	r3, #83	; 0x53
 8009ed8:	a904      	add	r1, sp, #16
 8009eda:	185b      	adds	r3, r3, r1
 8009edc:	212b      	movs	r1, #43	; 0x2b
 8009ede:	7019      	strb	r1, [r3, #0]
 8009ee0:	7833      	ldrb	r3, [r6, #0]
 8009ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ee4:	d016      	beq.n	8009f14 <_svfiprintf_r+0xf8>
 8009ee6:	0035      	movs	r5, r6
 8009ee8:	2100      	movs	r1, #0
 8009eea:	200a      	movs	r0, #10
 8009eec:	68e3      	ldr	r3, [r4, #12]
 8009eee:	782a      	ldrb	r2, [r5, #0]
 8009ef0:	1c6e      	adds	r6, r5, #1
 8009ef2:	3a30      	subs	r2, #48	; 0x30
 8009ef4:	2a09      	cmp	r2, #9
 8009ef6:	d94e      	bls.n	8009f96 <_svfiprintf_r+0x17a>
 8009ef8:	2900      	cmp	r1, #0
 8009efa:	d111      	bne.n	8009f20 <_svfiprintf_r+0x104>
 8009efc:	e017      	b.n	8009f2e <_svfiprintf_r+0x112>
 8009efe:	3501      	adds	r5, #1
 8009f00:	e7b0      	b.n	8009e64 <_svfiprintf_r+0x48>
 8009f02:	4b41      	ldr	r3, [pc, #260]	; (800a008 <_svfiprintf_r+0x1ec>)
 8009f04:	6822      	ldr	r2, [r4, #0]
 8009f06:	1ac0      	subs	r0, r0, r3
 8009f08:	2301      	movs	r3, #1
 8009f0a:	4083      	lsls	r3, r0
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	002e      	movs	r6, r5
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	e7ce      	b.n	8009eb2 <_svfiprintf_r+0x96>
 8009f14:	9b07      	ldr	r3, [sp, #28]
 8009f16:	1d19      	adds	r1, r3, #4
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	9107      	str	r1, [sp, #28]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	db01      	blt.n	8009f24 <_svfiprintf_r+0x108>
 8009f20:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f22:	e004      	b.n	8009f2e <_svfiprintf_r+0x112>
 8009f24:	425b      	negs	r3, r3
 8009f26:	60e3      	str	r3, [r4, #12]
 8009f28:	2302      	movs	r3, #2
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	6023      	str	r3, [r4, #0]
 8009f2e:	782b      	ldrb	r3, [r5, #0]
 8009f30:	2b2e      	cmp	r3, #46	; 0x2e
 8009f32:	d10a      	bne.n	8009f4a <_svfiprintf_r+0x12e>
 8009f34:	786b      	ldrb	r3, [r5, #1]
 8009f36:	2b2a      	cmp	r3, #42	; 0x2a
 8009f38:	d135      	bne.n	8009fa6 <_svfiprintf_r+0x18a>
 8009f3a:	9b07      	ldr	r3, [sp, #28]
 8009f3c:	3502      	adds	r5, #2
 8009f3e:	1d1a      	adds	r2, r3, #4
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	9207      	str	r2, [sp, #28]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	db2b      	blt.n	8009fa0 <_svfiprintf_r+0x184>
 8009f48:	9309      	str	r3, [sp, #36]	; 0x24
 8009f4a:	4e30      	ldr	r6, [pc, #192]	; (800a00c <_svfiprintf_r+0x1f0>)
 8009f4c:	2203      	movs	r2, #3
 8009f4e:	0030      	movs	r0, r6
 8009f50:	7829      	ldrb	r1, [r5, #0]
 8009f52:	f7ff fa99 	bl	8009488 <memchr>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d006      	beq.n	8009f68 <_svfiprintf_r+0x14c>
 8009f5a:	2340      	movs	r3, #64	; 0x40
 8009f5c:	1b80      	subs	r0, r0, r6
 8009f5e:	4083      	lsls	r3, r0
 8009f60:	6822      	ldr	r2, [r4, #0]
 8009f62:	3501      	adds	r5, #1
 8009f64:	4313      	orrs	r3, r2
 8009f66:	6023      	str	r3, [r4, #0]
 8009f68:	7829      	ldrb	r1, [r5, #0]
 8009f6a:	2206      	movs	r2, #6
 8009f6c:	4828      	ldr	r0, [pc, #160]	; (800a010 <_svfiprintf_r+0x1f4>)
 8009f6e:	1c6e      	adds	r6, r5, #1
 8009f70:	7621      	strb	r1, [r4, #24]
 8009f72:	f7ff fa89 	bl	8009488 <memchr>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d03c      	beq.n	8009ff4 <_svfiprintf_r+0x1d8>
 8009f7a:	4b26      	ldr	r3, [pc, #152]	; (800a014 <_svfiprintf_r+0x1f8>)
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d125      	bne.n	8009fcc <_svfiprintf_r+0x1b0>
 8009f80:	2207      	movs	r2, #7
 8009f82:	9b07      	ldr	r3, [sp, #28]
 8009f84:	3307      	adds	r3, #7
 8009f86:	4393      	bics	r3, r2
 8009f88:	3308      	adds	r3, #8
 8009f8a:	9307      	str	r3, [sp, #28]
 8009f8c:	6963      	ldr	r3, [r4, #20]
 8009f8e:	9a04      	ldr	r2, [sp, #16]
 8009f90:	189b      	adds	r3, r3, r2
 8009f92:	6163      	str	r3, [r4, #20]
 8009f94:	e765      	b.n	8009e62 <_svfiprintf_r+0x46>
 8009f96:	4343      	muls	r3, r0
 8009f98:	0035      	movs	r5, r6
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	189b      	adds	r3, r3, r2
 8009f9e:	e7a6      	b.n	8009eee <_svfiprintf_r+0xd2>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	425b      	negs	r3, r3
 8009fa4:	e7d0      	b.n	8009f48 <_svfiprintf_r+0x12c>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	200a      	movs	r0, #10
 8009faa:	001a      	movs	r2, r3
 8009fac:	3501      	adds	r5, #1
 8009fae:	6063      	str	r3, [r4, #4]
 8009fb0:	7829      	ldrb	r1, [r5, #0]
 8009fb2:	1c6e      	adds	r6, r5, #1
 8009fb4:	3930      	subs	r1, #48	; 0x30
 8009fb6:	2909      	cmp	r1, #9
 8009fb8:	d903      	bls.n	8009fc2 <_svfiprintf_r+0x1a6>
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d0c5      	beq.n	8009f4a <_svfiprintf_r+0x12e>
 8009fbe:	9209      	str	r2, [sp, #36]	; 0x24
 8009fc0:	e7c3      	b.n	8009f4a <_svfiprintf_r+0x12e>
 8009fc2:	4342      	muls	r2, r0
 8009fc4:	0035      	movs	r5, r6
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	1852      	adds	r2, r2, r1
 8009fca:	e7f1      	b.n	8009fb0 <_svfiprintf_r+0x194>
 8009fcc:	ab07      	add	r3, sp, #28
 8009fce:	9300      	str	r3, [sp, #0]
 8009fd0:	003a      	movs	r2, r7
 8009fd2:	0021      	movs	r1, r4
 8009fd4:	4b10      	ldr	r3, [pc, #64]	; (800a018 <_svfiprintf_r+0x1fc>)
 8009fd6:	9803      	ldr	r0, [sp, #12]
 8009fd8:	f7fd ff54 	bl	8007e84 <_printf_float>
 8009fdc:	9004      	str	r0, [sp, #16]
 8009fde:	9b04      	ldr	r3, [sp, #16]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	d1d3      	bne.n	8009f8c <_svfiprintf_r+0x170>
 8009fe4:	89bb      	ldrh	r3, [r7, #12]
 8009fe6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009fe8:	065b      	lsls	r3, r3, #25
 8009fea:	d400      	bmi.n	8009fee <_svfiprintf_r+0x1d2>
 8009fec:	e72d      	b.n	8009e4a <_svfiprintf_r+0x2e>
 8009fee:	2001      	movs	r0, #1
 8009ff0:	4240      	negs	r0, r0
 8009ff2:	e72a      	b.n	8009e4a <_svfiprintf_r+0x2e>
 8009ff4:	ab07      	add	r3, sp, #28
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	003a      	movs	r2, r7
 8009ffa:	0021      	movs	r1, r4
 8009ffc:	4b06      	ldr	r3, [pc, #24]	; (800a018 <_svfiprintf_r+0x1fc>)
 8009ffe:	9803      	ldr	r0, [sp, #12]
 800a000:	f7fe f9fe 	bl	8008400 <_printf_i>
 800a004:	e7ea      	b.n	8009fdc <_svfiprintf_r+0x1c0>
 800a006:	46c0      	nop			; (mov r8, r8)
 800a008:	0800b3c4 	.word	0x0800b3c4
 800a00c:	0800b3ca 	.word	0x0800b3ca
 800a010:	0800b3ce 	.word	0x0800b3ce
 800a014:	08007e85 	.word	0x08007e85
 800a018:	08009d59 	.word	0x08009d59

0800a01c <_sbrk_r>:
 800a01c:	2300      	movs	r3, #0
 800a01e:	b570      	push	{r4, r5, r6, lr}
 800a020:	4d06      	ldr	r5, [pc, #24]	; (800a03c <_sbrk_r+0x20>)
 800a022:	0004      	movs	r4, r0
 800a024:	0008      	movs	r0, r1
 800a026:	602b      	str	r3, [r5, #0]
 800a028:	f7f8 fe7a 	bl	8002d20 <_sbrk>
 800a02c:	1c43      	adds	r3, r0, #1
 800a02e:	d103      	bne.n	800a038 <_sbrk_r+0x1c>
 800a030:	682b      	ldr	r3, [r5, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d000      	beq.n	800a038 <_sbrk_r+0x1c>
 800a036:	6023      	str	r3, [r4, #0]
 800a038:	bd70      	pop	{r4, r5, r6, pc}
 800a03a:	46c0      	nop			; (mov r8, r8)
 800a03c:	200005f0 	.word	0x200005f0

0800a040 <__assert_func>:
 800a040:	b530      	push	{r4, r5, lr}
 800a042:	0014      	movs	r4, r2
 800a044:	001a      	movs	r2, r3
 800a046:	4b09      	ldr	r3, [pc, #36]	; (800a06c <__assert_func+0x2c>)
 800a048:	0005      	movs	r5, r0
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	b085      	sub	sp, #20
 800a04e:	68d8      	ldr	r0, [r3, #12]
 800a050:	4b07      	ldr	r3, [pc, #28]	; (800a070 <__assert_func+0x30>)
 800a052:	2c00      	cmp	r4, #0
 800a054:	d101      	bne.n	800a05a <__assert_func+0x1a>
 800a056:	4b07      	ldr	r3, [pc, #28]	; (800a074 <__assert_func+0x34>)
 800a058:	001c      	movs	r4, r3
 800a05a:	9301      	str	r3, [sp, #4]
 800a05c:	9100      	str	r1, [sp, #0]
 800a05e:	002b      	movs	r3, r5
 800a060:	4905      	ldr	r1, [pc, #20]	; (800a078 <__assert_func+0x38>)
 800a062:	9402      	str	r4, [sp, #8]
 800a064:	f000 f80a 	bl	800a07c <fiprintf>
 800a068:	f000 fab2 	bl	800a5d0 <abort>
 800a06c:	2000004c 	.word	0x2000004c
 800a070:	0800b3d5 	.word	0x0800b3d5
 800a074:	0800b410 	.word	0x0800b410
 800a078:	0800b3e2 	.word	0x0800b3e2

0800a07c <fiprintf>:
 800a07c:	b40e      	push	{r1, r2, r3}
 800a07e:	b503      	push	{r0, r1, lr}
 800a080:	0001      	movs	r1, r0
 800a082:	ab03      	add	r3, sp, #12
 800a084:	4804      	ldr	r0, [pc, #16]	; (800a098 <fiprintf+0x1c>)
 800a086:	cb04      	ldmia	r3!, {r2}
 800a088:	6800      	ldr	r0, [r0, #0]
 800a08a:	9301      	str	r3, [sp, #4]
 800a08c:	f000 f88a 	bl	800a1a4 <_vfiprintf_r>
 800a090:	b002      	add	sp, #8
 800a092:	bc08      	pop	{r3}
 800a094:	b003      	add	sp, #12
 800a096:	4718      	bx	r3
 800a098:	2000004c 	.word	0x2000004c

0800a09c <__ascii_mbtowc>:
 800a09c:	b082      	sub	sp, #8
 800a09e:	2900      	cmp	r1, #0
 800a0a0:	d100      	bne.n	800a0a4 <__ascii_mbtowc+0x8>
 800a0a2:	a901      	add	r1, sp, #4
 800a0a4:	1e10      	subs	r0, r2, #0
 800a0a6:	d006      	beq.n	800a0b6 <__ascii_mbtowc+0x1a>
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d006      	beq.n	800a0ba <__ascii_mbtowc+0x1e>
 800a0ac:	7813      	ldrb	r3, [r2, #0]
 800a0ae:	600b      	str	r3, [r1, #0]
 800a0b0:	7810      	ldrb	r0, [r2, #0]
 800a0b2:	1e43      	subs	r3, r0, #1
 800a0b4:	4198      	sbcs	r0, r3
 800a0b6:	b002      	add	sp, #8
 800a0b8:	4770      	bx	lr
 800a0ba:	2002      	movs	r0, #2
 800a0bc:	4240      	negs	r0, r0
 800a0be:	e7fa      	b.n	800a0b6 <__ascii_mbtowc+0x1a>

0800a0c0 <memmove>:
 800a0c0:	b510      	push	{r4, lr}
 800a0c2:	4288      	cmp	r0, r1
 800a0c4:	d902      	bls.n	800a0cc <memmove+0xc>
 800a0c6:	188b      	adds	r3, r1, r2
 800a0c8:	4298      	cmp	r0, r3
 800a0ca:	d303      	bcc.n	800a0d4 <memmove+0x14>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	e007      	b.n	800a0e0 <memmove+0x20>
 800a0d0:	5c8b      	ldrb	r3, [r1, r2]
 800a0d2:	5483      	strb	r3, [r0, r2]
 800a0d4:	3a01      	subs	r2, #1
 800a0d6:	d2fb      	bcs.n	800a0d0 <memmove+0x10>
 800a0d8:	bd10      	pop	{r4, pc}
 800a0da:	5ccc      	ldrb	r4, [r1, r3]
 800a0dc:	54c4      	strb	r4, [r0, r3]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d1fa      	bne.n	800a0da <memmove+0x1a>
 800a0e4:	e7f8      	b.n	800a0d8 <memmove+0x18>
	...

0800a0e8 <__malloc_lock>:
 800a0e8:	b510      	push	{r4, lr}
 800a0ea:	4802      	ldr	r0, [pc, #8]	; (800a0f4 <__malloc_lock+0xc>)
 800a0ec:	f000 fc47 	bl	800a97e <__retarget_lock_acquire_recursive>
 800a0f0:	bd10      	pop	{r4, pc}
 800a0f2:	46c0      	nop			; (mov r8, r8)
 800a0f4:	200005f8 	.word	0x200005f8

0800a0f8 <__malloc_unlock>:
 800a0f8:	b510      	push	{r4, lr}
 800a0fa:	4802      	ldr	r0, [pc, #8]	; (800a104 <__malloc_unlock+0xc>)
 800a0fc:	f000 fc40 	bl	800a980 <__retarget_lock_release_recursive>
 800a100:	bd10      	pop	{r4, pc}
 800a102:	46c0      	nop			; (mov r8, r8)
 800a104:	200005f8 	.word	0x200005f8

0800a108 <_realloc_r>:
 800a108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10a:	0007      	movs	r7, r0
 800a10c:	000d      	movs	r5, r1
 800a10e:	0016      	movs	r6, r2
 800a110:	2900      	cmp	r1, #0
 800a112:	d105      	bne.n	800a120 <_realloc_r+0x18>
 800a114:	0011      	movs	r1, r2
 800a116:	f7ff fdc1 	bl	8009c9c <_malloc_r>
 800a11a:	0004      	movs	r4, r0
 800a11c:	0020      	movs	r0, r4
 800a11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a120:	2a00      	cmp	r2, #0
 800a122:	d103      	bne.n	800a12c <_realloc_r+0x24>
 800a124:	f7ff fd70 	bl	8009c08 <_free_r>
 800a128:	0034      	movs	r4, r6
 800a12a:	e7f7      	b.n	800a11c <_realloc_r+0x14>
 800a12c:	f000 fc96 	bl	800aa5c <_malloc_usable_size_r>
 800a130:	002c      	movs	r4, r5
 800a132:	42b0      	cmp	r0, r6
 800a134:	d2f2      	bcs.n	800a11c <_realloc_r+0x14>
 800a136:	0031      	movs	r1, r6
 800a138:	0038      	movs	r0, r7
 800a13a:	f7ff fdaf 	bl	8009c9c <_malloc_r>
 800a13e:	1e04      	subs	r4, r0, #0
 800a140:	d0ec      	beq.n	800a11c <_realloc_r+0x14>
 800a142:	0029      	movs	r1, r5
 800a144:	0032      	movs	r2, r6
 800a146:	f7ff f9aa 	bl	800949e <memcpy>
 800a14a:	0029      	movs	r1, r5
 800a14c:	0038      	movs	r0, r7
 800a14e:	f7ff fd5b 	bl	8009c08 <_free_r>
 800a152:	e7e3      	b.n	800a11c <_realloc_r+0x14>

0800a154 <__sfputc_r>:
 800a154:	6893      	ldr	r3, [r2, #8]
 800a156:	b510      	push	{r4, lr}
 800a158:	3b01      	subs	r3, #1
 800a15a:	6093      	str	r3, [r2, #8]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	da04      	bge.n	800a16a <__sfputc_r+0x16>
 800a160:	6994      	ldr	r4, [r2, #24]
 800a162:	42a3      	cmp	r3, r4
 800a164:	db07      	blt.n	800a176 <__sfputc_r+0x22>
 800a166:	290a      	cmp	r1, #10
 800a168:	d005      	beq.n	800a176 <__sfputc_r+0x22>
 800a16a:	6813      	ldr	r3, [r2, #0]
 800a16c:	1c58      	adds	r0, r3, #1
 800a16e:	6010      	str	r0, [r2, #0]
 800a170:	7019      	strb	r1, [r3, #0]
 800a172:	0008      	movs	r0, r1
 800a174:	bd10      	pop	{r4, pc}
 800a176:	f000 f94f 	bl	800a418 <__swbuf_r>
 800a17a:	0001      	movs	r1, r0
 800a17c:	e7f9      	b.n	800a172 <__sfputc_r+0x1e>

0800a17e <__sfputs_r>:
 800a17e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a180:	0006      	movs	r6, r0
 800a182:	000f      	movs	r7, r1
 800a184:	0014      	movs	r4, r2
 800a186:	18d5      	adds	r5, r2, r3
 800a188:	42ac      	cmp	r4, r5
 800a18a:	d101      	bne.n	800a190 <__sfputs_r+0x12>
 800a18c:	2000      	movs	r0, #0
 800a18e:	e007      	b.n	800a1a0 <__sfputs_r+0x22>
 800a190:	7821      	ldrb	r1, [r4, #0]
 800a192:	003a      	movs	r2, r7
 800a194:	0030      	movs	r0, r6
 800a196:	f7ff ffdd 	bl	800a154 <__sfputc_r>
 800a19a:	3401      	adds	r4, #1
 800a19c:	1c43      	adds	r3, r0, #1
 800a19e:	d1f3      	bne.n	800a188 <__sfputs_r+0xa>
 800a1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1a4 <_vfiprintf_r>:
 800a1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1a6:	b0a1      	sub	sp, #132	; 0x84
 800a1a8:	0006      	movs	r6, r0
 800a1aa:	000c      	movs	r4, r1
 800a1ac:	001f      	movs	r7, r3
 800a1ae:	9203      	str	r2, [sp, #12]
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	d004      	beq.n	800a1be <_vfiprintf_r+0x1a>
 800a1b4:	6983      	ldr	r3, [r0, #24]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <_vfiprintf_r+0x1a>
 800a1ba:	f000 fb3f 	bl	800a83c <__sinit>
 800a1be:	4b8e      	ldr	r3, [pc, #568]	; (800a3f8 <_vfiprintf_r+0x254>)
 800a1c0:	429c      	cmp	r4, r3
 800a1c2:	d11c      	bne.n	800a1fe <_vfiprintf_r+0x5a>
 800a1c4:	6874      	ldr	r4, [r6, #4]
 800a1c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1c8:	07db      	lsls	r3, r3, #31
 800a1ca:	d405      	bmi.n	800a1d8 <_vfiprintf_r+0x34>
 800a1cc:	89a3      	ldrh	r3, [r4, #12]
 800a1ce:	059b      	lsls	r3, r3, #22
 800a1d0:	d402      	bmi.n	800a1d8 <_vfiprintf_r+0x34>
 800a1d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1d4:	f000 fbd3 	bl	800a97e <__retarget_lock_acquire_recursive>
 800a1d8:	89a3      	ldrh	r3, [r4, #12]
 800a1da:	071b      	lsls	r3, r3, #28
 800a1dc:	d502      	bpl.n	800a1e4 <_vfiprintf_r+0x40>
 800a1de:	6923      	ldr	r3, [r4, #16]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d11d      	bne.n	800a220 <_vfiprintf_r+0x7c>
 800a1e4:	0021      	movs	r1, r4
 800a1e6:	0030      	movs	r0, r6
 800a1e8:	f000 f97a 	bl	800a4e0 <__swsetup_r>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	d017      	beq.n	800a220 <_vfiprintf_r+0x7c>
 800a1f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1f2:	07db      	lsls	r3, r3, #31
 800a1f4:	d50d      	bpl.n	800a212 <_vfiprintf_r+0x6e>
 800a1f6:	2001      	movs	r0, #1
 800a1f8:	4240      	negs	r0, r0
 800a1fa:	b021      	add	sp, #132	; 0x84
 800a1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1fe:	4b7f      	ldr	r3, [pc, #508]	; (800a3fc <_vfiprintf_r+0x258>)
 800a200:	429c      	cmp	r4, r3
 800a202:	d101      	bne.n	800a208 <_vfiprintf_r+0x64>
 800a204:	68b4      	ldr	r4, [r6, #8]
 800a206:	e7de      	b.n	800a1c6 <_vfiprintf_r+0x22>
 800a208:	4b7d      	ldr	r3, [pc, #500]	; (800a400 <_vfiprintf_r+0x25c>)
 800a20a:	429c      	cmp	r4, r3
 800a20c:	d1db      	bne.n	800a1c6 <_vfiprintf_r+0x22>
 800a20e:	68f4      	ldr	r4, [r6, #12]
 800a210:	e7d9      	b.n	800a1c6 <_vfiprintf_r+0x22>
 800a212:	89a3      	ldrh	r3, [r4, #12]
 800a214:	059b      	lsls	r3, r3, #22
 800a216:	d4ee      	bmi.n	800a1f6 <_vfiprintf_r+0x52>
 800a218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a21a:	f000 fbb1 	bl	800a980 <__retarget_lock_release_recursive>
 800a21e:	e7ea      	b.n	800a1f6 <_vfiprintf_r+0x52>
 800a220:	2300      	movs	r3, #0
 800a222:	ad08      	add	r5, sp, #32
 800a224:	616b      	str	r3, [r5, #20]
 800a226:	3320      	adds	r3, #32
 800a228:	766b      	strb	r3, [r5, #25]
 800a22a:	3310      	adds	r3, #16
 800a22c:	76ab      	strb	r3, [r5, #26]
 800a22e:	9707      	str	r7, [sp, #28]
 800a230:	9f03      	ldr	r7, [sp, #12]
 800a232:	783b      	ldrb	r3, [r7, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d001      	beq.n	800a23c <_vfiprintf_r+0x98>
 800a238:	2b25      	cmp	r3, #37	; 0x25
 800a23a:	d14e      	bne.n	800a2da <_vfiprintf_r+0x136>
 800a23c:	9b03      	ldr	r3, [sp, #12]
 800a23e:	1afb      	subs	r3, r7, r3
 800a240:	9305      	str	r3, [sp, #20]
 800a242:	9b03      	ldr	r3, [sp, #12]
 800a244:	429f      	cmp	r7, r3
 800a246:	d00d      	beq.n	800a264 <_vfiprintf_r+0xc0>
 800a248:	9b05      	ldr	r3, [sp, #20]
 800a24a:	0021      	movs	r1, r4
 800a24c:	0030      	movs	r0, r6
 800a24e:	9a03      	ldr	r2, [sp, #12]
 800a250:	f7ff ff95 	bl	800a17e <__sfputs_r>
 800a254:	1c43      	adds	r3, r0, #1
 800a256:	d100      	bne.n	800a25a <_vfiprintf_r+0xb6>
 800a258:	e0b5      	b.n	800a3c6 <_vfiprintf_r+0x222>
 800a25a:	696a      	ldr	r2, [r5, #20]
 800a25c:	9b05      	ldr	r3, [sp, #20]
 800a25e:	4694      	mov	ip, r2
 800a260:	4463      	add	r3, ip
 800a262:	616b      	str	r3, [r5, #20]
 800a264:	783b      	ldrb	r3, [r7, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d100      	bne.n	800a26c <_vfiprintf_r+0xc8>
 800a26a:	e0ac      	b.n	800a3c6 <_vfiprintf_r+0x222>
 800a26c:	2201      	movs	r2, #1
 800a26e:	1c7b      	adds	r3, r7, #1
 800a270:	9303      	str	r3, [sp, #12]
 800a272:	2300      	movs	r3, #0
 800a274:	4252      	negs	r2, r2
 800a276:	606a      	str	r2, [r5, #4]
 800a278:	a904      	add	r1, sp, #16
 800a27a:	3254      	adds	r2, #84	; 0x54
 800a27c:	1852      	adds	r2, r2, r1
 800a27e:	602b      	str	r3, [r5, #0]
 800a280:	60eb      	str	r3, [r5, #12]
 800a282:	60ab      	str	r3, [r5, #8]
 800a284:	7013      	strb	r3, [r2, #0]
 800a286:	65ab      	str	r3, [r5, #88]	; 0x58
 800a288:	9b03      	ldr	r3, [sp, #12]
 800a28a:	2205      	movs	r2, #5
 800a28c:	7819      	ldrb	r1, [r3, #0]
 800a28e:	485d      	ldr	r0, [pc, #372]	; (800a404 <_vfiprintf_r+0x260>)
 800a290:	f7ff f8fa 	bl	8009488 <memchr>
 800a294:	9b03      	ldr	r3, [sp, #12]
 800a296:	1c5f      	adds	r7, r3, #1
 800a298:	2800      	cmp	r0, #0
 800a29a:	d120      	bne.n	800a2de <_vfiprintf_r+0x13a>
 800a29c:	682a      	ldr	r2, [r5, #0]
 800a29e:	06d3      	lsls	r3, r2, #27
 800a2a0:	d504      	bpl.n	800a2ac <_vfiprintf_r+0x108>
 800a2a2:	2353      	movs	r3, #83	; 0x53
 800a2a4:	a904      	add	r1, sp, #16
 800a2a6:	185b      	adds	r3, r3, r1
 800a2a8:	2120      	movs	r1, #32
 800a2aa:	7019      	strb	r1, [r3, #0]
 800a2ac:	0713      	lsls	r3, r2, #28
 800a2ae:	d504      	bpl.n	800a2ba <_vfiprintf_r+0x116>
 800a2b0:	2353      	movs	r3, #83	; 0x53
 800a2b2:	a904      	add	r1, sp, #16
 800a2b4:	185b      	adds	r3, r3, r1
 800a2b6:	212b      	movs	r1, #43	; 0x2b
 800a2b8:	7019      	strb	r1, [r3, #0]
 800a2ba:	9b03      	ldr	r3, [sp, #12]
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	2b2a      	cmp	r3, #42	; 0x2a
 800a2c0:	d016      	beq.n	800a2f0 <_vfiprintf_r+0x14c>
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	68eb      	ldr	r3, [r5, #12]
 800a2c6:	9f03      	ldr	r7, [sp, #12]
 800a2c8:	783a      	ldrb	r2, [r7, #0]
 800a2ca:	1c78      	adds	r0, r7, #1
 800a2cc:	3a30      	subs	r2, #48	; 0x30
 800a2ce:	4684      	mov	ip, r0
 800a2d0:	2a09      	cmp	r2, #9
 800a2d2:	d94f      	bls.n	800a374 <_vfiprintf_r+0x1d0>
 800a2d4:	2900      	cmp	r1, #0
 800a2d6:	d111      	bne.n	800a2fc <_vfiprintf_r+0x158>
 800a2d8:	e017      	b.n	800a30a <_vfiprintf_r+0x166>
 800a2da:	3701      	adds	r7, #1
 800a2dc:	e7a9      	b.n	800a232 <_vfiprintf_r+0x8e>
 800a2de:	4b49      	ldr	r3, [pc, #292]	; (800a404 <_vfiprintf_r+0x260>)
 800a2e0:	682a      	ldr	r2, [r5, #0]
 800a2e2:	1ac0      	subs	r0, r0, r3
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	4083      	lsls	r3, r0
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	602b      	str	r3, [r5, #0]
 800a2ec:	9703      	str	r7, [sp, #12]
 800a2ee:	e7cb      	b.n	800a288 <_vfiprintf_r+0xe4>
 800a2f0:	9b07      	ldr	r3, [sp, #28]
 800a2f2:	1d19      	adds	r1, r3, #4
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	9107      	str	r1, [sp, #28]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	db01      	blt.n	800a300 <_vfiprintf_r+0x15c>
 800a2fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2fe:	e004      	b.n	800a30a <_vfiprintf_r+0x166>
 800a300:	425b      	negs	r3, r3
 800a302:	60eb      	str	r3, [r5, #12]
 800a304:	2302      	movs	r3, #2
 800a306:	4313      	orrs	r3, r2
 800a308:	602b      	str	r3, [r5, #0]
 800a30a:	783b      	ldrb	r3, [r7, #0]
 800a30c:	2b2e      	cmp	r3, #46	; 0x2e
 800a30e:	d10a      	bne.n	800a326 <_vfiprintf_r+0x182>
 800a310:	787b      	ldrb	r3, [r7, #1]
 800a312:	2b2a      	cmp	r3, #42	; 0x2a
 800a314:	d137      	bne.n	800a386 <_vfiprintf_r+0x1e2>
 800a316:	9b07      	ldr	r3, [sp, #28]
 800a318:	3702      	adds	r7, #2
 800a31a:	1d1a      	adds	r2, r3, #4
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	9207      	str	r2, [sp, #28]
 800a320:	2b00      	cmp	r3, #0
 800a322:	db2d      	blt.n	800a380 <_vfiprintf_r+0x1dc>
 800a324:	9309      	str	r3, [sp, #36]	; 0x24
 800a326:	2203      	movs	r2, #3
 800a328:	7839      	ldrb	r1, [r7, #0]
 800a32a:	4837      	ldr	r0, [pc, #220]	; (800a408 <_vfiprintf_r+0x264>)
 800a32c:	f7ff f8ac 	bl	8009488 <memchr>
 800a330:	2800      	cmp	r0, #0
 800a332:	d007      	beq.n	800a344 <_vfiprintf_r+0x1a0>
 800a334:	4b34      	ldr	r3, [pc, #208]	; (800a408 <_vfiprintf_r+0x264>)
 800a336:	682a      	ldr	r2, [r5, #0]
 800a338:	1ac0      	subs	r0, r0, r3
 800a33a:	2340      	movs	r3, #64	; 0x40
 800a33c:	4083      	lsls	r3, r0
 800a33e:	4313      	orrs	r3, r2
 800a340:	3701      	adds	r7, #1
 800a342:	602b      	str	r3, [r5, #0]
 800a344:	7839      	ldrb	r1, [r7, #0]
 800a346:	1c7b      	adds	r3, r7, #1
 800a348:	2206      	movs	r2, #6
 800a34a:	4830      	ldr	r0, [pc, #192]	; (800a40c <_vfiprintf_r+0x268>)
 800a34c:	9303      	str	r3, [sp, #12]
 800a34e:	7629      	strb	r1, [r5, #24]
 800a350:	f7ff f89a 	bl	8009488 <memchr>
 800a354:	2800      	cmp	r0, #0
 800a356:	d045      	beq.n	800a3e4 <_vfiprintf_r+0x240>
 800a358:	4b2d      	ldr	r3, [pc, #180]	; (800a410 <_vfiprintf_r+0x26c>)
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d127      	bne.n	800a3ae <_vfiprintf_r+0x20a>
 800a35e:	2207      	movs	r2, #7
 800a360:	9b07      	ldr	r3, [sp, #28]
 800a362:	3307      	adds	r3, #7
 800a364:	4393      	bics	r3, r2
 800a366:	3308      	adds	r3, #8
 800a368:	9307      	str	r3, [sp, #28]
 800a36a:	696b      	ldr	r3, [r5, #20]
 800a36c:	9a04      	ldr	r2, [sp, #16]
 800a36e:	189b      	adds	r3, r3, r2
 800a370:	616b      	str	r3, [r5, #20]
 800a372:	e75d      	b.n	800a230 <_vfiprintf_r+0x8c>
 800a374:	210a      	movs	r1, #10
 800a376:	434b      	muls	r3, r1
 800a378:	4667      	mov	r7, ip
 800a37a:	189b      	adds	r3, r3, r2
 800a37c:	3909      	subs	r1, #9
 800a37e:	e7a3      	b.n	800a2c8 <_vfiprintf_r+0x124>
 800a380:	2301      	movs	r3, #1
 800a382:	425b      	negs	r3, r3
 800a384:	e7ce      	b.n	800a324 <_vfiprintf_r+0x180>
 800a386:	2300      	movs	r3, #0
 800a388:	001a      	movs	r2, r3
 800a38a:	3701      	adds	r7, #1
 800a38c:	606b      	str	r3, [r5, #4]
 800a38e:	7839      	ldrb	r1, [r7, #0]
 800a390:	1c78      	adds	r0, r7, #1
 800a392:	3930      	subs	r1, #48	; 0x30
 800a394:	4684      	mov	ip, r0
 800a396:	2909      	cmp	r1, #9
 800a398:	d903      	bls.n	800a3a2 <_vfiprintf_r+0x1fe>
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d0c3      	beq.n	800a326 <_vfiprintf_r+0x182>
 800a39e:	9209      	str	r2, [sp, #36]	; 0x24
 800a3a0:	e7c1      	b.n	800a326 <_vfiprintf_r+0x182>
 800a3a2:	230a      	movs	r3, #10
 800a3a4:	435a      	muls	r2, r3
 800a3a6:	4667      	mov	r7, ip
 800a3a8:	1852      	adds	r2, r2, r1
 800a3aa:	3b09      	subs	r3, #9
 800a3ac:	e7ef      	b.n	800a38e <_vfiprintf_r+0x1ea>
 800a3ae:	ab07      	add	r3, sp, #28
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	0022      	movs	r2, r4
 800a3b4:	0029      	movs	r1, r5
 800a3b6:	0030      	movs	r0, r6
 800a3b8:	4b16      	ldr	r3, [pc, #88]	; (800a414 <_vfiprintf_r+0x270>)
 800a3ba:	f7fd fd63 	bl	8007e84 <_printf_float>
 800a3be:	9004      	str	r0, [sp, #16]
 800a3c0:	9b04      	ldr	r3, [sp, #16]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	d1d1      	bne.n	800a36a <_vfiprintf_r+0x1c6>
 800a3c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3c8:	07db      	lsls	r3, r3, #31
 800a3ca:	d405      	bmi.n	800a3d8 <_vfiprintf_r+0x234>
 800a3cc:	89a3      	ldrh	r3, [r4, #12]
 800a3ce:	059b      	lsls	r3, r3, #22
 800a3d0:	d402      	bmi.n	800a3d8 <_vfiprintf_r+0x234>
 800a3d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3d4:	f000 fad4 	bl	800a980 <__retarget_lock_release_recursive>
 800a3d8:	89a3      	ldrh	r3, [r4, #12]
 800a3da:	065b      	lsls	r3, r3, #25
 800a3dc:	d500      	bpl.n	800a3e0 <_vfiprintf_r+0x23c>
 800a3de:	e70a      	b.n	800a1f6 <_vfiprintf_r+0x52>
 800a3e0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a3e2:	e70a      	b.n	800a1fa <_vfiprintf_r+0x56>
 800a3e4:	ab07      	add	r3, sp, #28
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	0022      	movs	r2, r4
 800a3ea:	0029      	movs	r1, r5
 800a3ec:	0030      	movs	r0, r6
 800a3ee:	4b09      	ldr	r3, [pc, #36]	; (800a414 <_vfiprintf_r+0x270>)
 800a3f0:	f7fe f806 	bl	8008400 <_printf_i>
 800a3f4:	e7e3      	b.n	800a3be <_vfiprintf_r+0x21a>
 800a3f6:	46c0      	nop			; (mov r8, r8)
 800a3f8:	0800b53c 	.word	0x0800b53c
 800a3fc:	0800b55c 	.word	0x0800b55c
 800a400:	0800b51c 	.word	0x0800b51c
 800a404:	0800b3c4 	.word	0x0800b3c4
 800a408:	0800b3ca 	.word	0x0800b3ca
 800a40c:	0800b3ce 	.word	0x0800b3ce
 800a410:	08007e85 	.word	0x08007e85
 800a414:	0800a17f 	.word	0x0800a17f

0800a418 <__swbuf_r>:
 800a418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41a:	0005      	movs	r5, r0
 800a41c:	000e      	movs	r6, r1
 800a41e:	0014      	movs	r4, r2
 800a420:	2800      	cmp	r0, #0
 800a422:	d004      	beq.n	800a42e <__swbuf_r+0x16>
 800a424:	6983      	ldr	r3, [r0, #24]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d101      	bne.n	800a42e <__swbuf_r+0x16>
 800a42a:	f000 fa07 	bl	800a83c <__sinit>
 800a42e:	4b22      	ldr	r3, [pc, #136]	; (800a4b8 <__swbuf_r+0xa0>)
 800a430:	429c      	cmp	r4, r3
 800a432:	d12e      	bne.n	800a492 <__swbuf_r+0x7a>
 800a434:	686c      	ldr	r4, [r5, #4]
 800a436:	69a3      	ldr	r3, [r4, #24]
 800a438:	60a3      	str	r3, [r4, #8]
 800a43a:	89a3      	ldrh	r3, [r4, #12]
 800a43c:	071b      	lsls	r3, r3, #28
 800a43e:	d532      	bpl.n	800a4a6 <__swbuf_r+0x8e>
 800a440:	6923      	ldr	r3, [r4, #16]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d02f      	beq.n	800a4a6 <__swbuf_r+0x8e>
 800a446:	6823      	ldr	r3, [r4, #0]
 800a448:	6922      	ldr	r2, [r4, #16]
 800a44a:	b2f7      	uxtb	r7, r6
 800a44c:	1a98      	subs	r0, r3, r2
 800a44e:	6963      	ldr	r3, [r4, #20]
 800a450:	b2f6      	uxtb	r6, r6
 800a452:	4283      	cmp	r3, r0
 800a454:	dc05      	bgt.n	800a462 <__swbuf_r+0x4a>
 800a456:	0021      	movs	r1, r4
 800a458:	0028      	movs	r0, r5
 800a45a:	f000 f94d 	bl	800a6f8 <_fflush_r>
 800a45e:	2800      	cmp	r0, #0
 800a460:	d127      	bne.n	800a4b2 <__swbuf_r+0x9a>
 800a462:	68a3      	ldr	r3, [r4, #8]
 800a464:	3001      	adds	r0, #1
 800a466:	3b01      	subs	r3, #1
 800a468:	60a3      	str	r3, [r4, #8]
 800a46a:	6823      	ldr	r3, [r4, #0]
 800a46c:	1c5a      	adds	r2, r3, #1
 800a46e:	6022      	str	r2, [r4, #0]
 800a470:	701f      	strb	r7, [r3, #0]
 800a472:	6963      	ldr	r3, [r4, #20]
 800a474:	4283      	cmp	r3, r0
 800a476:	d004      	beq.n	800a482 <__swbuf_r+0x6a>
 800a478:	89a3      	ldrh	r3, [r4, #12]
 800a47a:	07db      	lsls	r3, r3, #31
 800a47c:	d507      	bpl.n	800a48e <__swbuf_r+0x76>
 800a47e:	2e0a      	cmp	r6, #10
 800a480:	d105      	bne.n	800a48e <__swbuf_r+0x76>
 800a482:	0021      	movs	r1, r4
 800a484:	0028      	movs	r0, r5
 800a486:	f000 f937 	bl	800a6f8 <_fflush_r>
 800a48a:	2800      	cmp	r0, #0
 800a48c:	d111      	bne.n	800a4b2 <__swbuf_r+0x9a>
 800a48e:	0030      	movs	r0, r6
 800a490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a492:	4b0a      	ldr	r3, [pc, #40]	; (800a4bc <__swbuf_r+0xa4>)
 800a494:	429c      	cmp	r4, r3
 800a496:	d101      	bne.n	800a49c <__swbuf_r+0x84>
 800a498:	68ac      	ldr	r4, [r5, #8]
 800a49a:	e7cc      	b.n	800a436 <__swbuf_r+0x1e>
 800a49c:	4b08      	ldr	r3, [pc, #32]	; (800a4c0 <__swbuf_r+0xa8>)
 800a49e:	429c      	cmp	r4, r3
 800a4a0:	d1c9      	bne.n	800a436 <__swbuf_r+0x1e>
 800a4a2:	68ec      	ldr	r4, [r5, #12]
 800a4a4:	e7c7      	b.n	800a436 <__swbuf_r+0x1e>
 800a4a6:	0021      	movs	r1, r4
 800a4a8:	0028      	movs	r0, r5
 800a4aa:	f000 f819 	bl	800a4e0 <__swsetup_r>
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	d0c9      	beq.n	800a446 <__swbuf_r+0x2e>
 800a4b2:	2601      	movs	r6, #1
 800a4b4:	4276      	negs	r6, r6
 800a4b6:	e7ea      	b.n	800a48e <__swbuf_r+0x76>
 800a4b8:	0800b53c 	.word	0x0800b53c
 800a4bc:	0800b55c 	.word	0x0800b55c
 800a4c0:	0800b51c 	.word	0x0800b51c

0800a4c4 <__ascii_wctomb>:
 800a4c4:	0003      	movs	r3, r0
 800a4c6:	1e08      	subs	r0, r1, #0
 800a4c8:	d005      	beq.n	800a4d6 <__ascii_wctomb+0x12>
 800a4ca:	2aff      	cmp	r2, #255	; 0xff
 800a4cc:	d904      	bls.n	800a4d8 <__ascii_wctomb+0x14>
 800a4ce:	228a      	movs	r2, #138	; 0x8a
 800a4d0:	2001      	movs	r0, #1
 800a4d2:	601a      	str	r2, [r3, #0]
 800a4d4:	4240      	negs	r0, r0
 800a4d6:	4770      	bx	lr
 800a4d8:	2001      	movs	r0, #1
 800a4da:	700a      	strb	r2, [r1, #0]
 800a4dc:	e7fb      	b.n	800a4d6 <__ascii_wctomb+0x12>
	...

0800a4e0 <__swsetup_r>:
 800a4e0:	4b37      	ldr	r3, [pc, #220]	; (800a5c0 <__swsetup_r+0xe0>)
 800a4e2:	b570      	push	{r4, r5, r6, lr}
 800a4e4:	681d      	ldr	r5, [r3, #0]
 800a4e6:	0006      	movs	r6, r0
 800a4e8:	000c      	movs	r4, r1
 800a4ea:	2d00      	cmp	r5, #0
 800a4ec:	d005      	beq.n	800a4fa <__swsetup_r+0x1a>
 800a4ee:	69ab      	ldr	r3, [r5, #24]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d102      	bne.n	800a4fa <__swsetup_r+0x1a>
 800a4f4:	0028      	movs	r0, r5
 800a4f6:	f000 f9a1 	bl	800a83c <__sinit>
 800a4fa:	4b32      	ldr	r3, [pc, #200]	; (800a5c4 <__swsetup_r+0xe4>)
 800a4fc:	429c      	cmp	r4, r3
 800a4fe:	d10f      	bne.n	800a520 <__swsetup_r+0x40>
 800a500:	686c      	ldr	r4, [r5, #4]
 800a502:	230c      	movs	r3, #12
 800a504:	5ee2      	ldrsh	r2, [r4, r3]
 800a506:	b293      	uxth	r3, r2
 800a508:	0711      	lsls	r1, r2, #28
 800a50a:	d42d      	bmi.n	800a568 <__swsetup_r+0x88>
 800a50c:	06d9      	lsls	r1, r3, #27
 800a50e:	d411      	bmi.n	800a534 <__swsetup_r+0x54>
 800a510:	2309      	movs	r3, #9
 800a512:	2001      	movs	r0, #1
 800a514:	6033      	str	r3, [r6, #0]
 800a516:	3337      	adds	r3, #55	; 0x37
 800a518:	4313      	orrs	r3, r2
 800a51a:	81a3      	strh	r3, [r4, #12]
 800a51c:	4240      	negs	r0, r0
 800a51e:	bd70      	pop	{r4, r5, r6, pc}
 800a520:	4b29      	ldr	r3, [pc, #164]	; (800a5c8 <__swsetup_r+0xe8>)
 800a522:	429c      	cmp	r4, r3
 800a524:	d101      	bne.n	800a52a <__swsetup_r+0x4a>
 800a526:	68ac      	ldr	r4, [r5, #8]
 800a528:	e7eb      	b.n	800a502 <__swsetup_r+0x22>
 800a52a:	4b28      	ldr	r3, [pc, #160]	; (800a5cc <__swsetup_r+0xec>)
 800a52c:	429c      	cmp	r4, r3
 800a52e:	d1e8      	bne.n	800a502 <__swsetup_r+0x22>
 800a530:	68ec      	ldr	r4, [r5, #12]
 800a532:	e7e6      	b.n	800a502 <__swsetup_r+0x22>
 800a534:	075b      	lsls	r3, r3, #29
 800a536:	d513      	bpl.n	800a560 <__swsetup_r+0x80>
 800a538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a53a:	2900      	cmp	r1, #0
 800a53c:	d008      	beq.n	800a550 <__swsetup_r+0x70>
 800a53e:	0023      	movs	r3, r4
 800a540:	3344      	adds	r3, #68	; 0x44
 800a542:	4299      	cmp	r1, r3
 800a544:	d002      	beq.n	800a54c <__swsetup_r+0x6c>
 800a546:	0030      	movs	r0, r6
 800a548:	f7ff fb5e 	bl	8009c08 <_free_r>
 800a54c:	2300      	movs	r3, #0
 800a54e:	6363      	str	r3, [r4, #52]	; 0x34
 800a550:	2224      	movs	r2, #36	; 0x24
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	4393      	bics	r3, r2
 800a556:	81a3      	strh	r3, [r4, #12]
 800a558:	2300      	movs	r3, #0
 800a55a:	6063      	str	r3, [r4, #4]
 800a55c:	6923      	ldr	r3, [r4, #16]
 800a55e:	6023      	str	r3, [r4, #0]
 800a560:	2308      	movs	r3, #8
 800a562:	89a2      	ldrh	r2, [r4, #12]
 800a564:	4313      	orrs	r3, r2
 800a566:	81a3      	strh	r3, [r4, #12]
 800a568:	6923      	ldr	r3, [r4, #16]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10b      	bne.n	800a586 <__swsetup_r+0xa6>
 800a56e:	21a0      	movs	r1, #160	; 0xa0
 800a570:	2280      	movs	r2, #128	; 0x80
 800a572:	89a3      	ldrh	r3, [r4, #12]
 800a574:	0089      	lsls	r1, r1, #2
 800a576:	0092      	lsls	r2, r2, #2
 800a578:	400b      	ands	r3, r1
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d003      	beq.n	800a586 <__swsetup_r+0xa6>
 800a57e:	0021      	movs	r1, r4
 800a580:	0030      	movs	r0, r6
 800a582:	f000 fa27 	bl	800a9d4 <__smakebuf_r>
 800a586:	220c      	movs	r2, #12
 800a588:	5ea3      	ldrsh	r3, [r4, r2]
 800a58a:	2001      	movs	r0, #1
 800a58c:	001a      	movs	r2, r3
 800a58e:	b299      	uxth	r1, r3
 800a590:	4002      	ands	r2, r0
 800a592:	4203      	tst	r3, r0
 800a594:	d00f      	beq.n	800a5b6 <__swsetup_r+0xd6>
 800a596:	2200      	movs	r2, #0
 800a598:	60a2      	str	r2, [r4, #8]
 800a59a:	6962      	ldr	r2, [r4, #20]
 800a59c:	4252      	negs	r2, r2
 800a59e:	61a2      	str	r2, [r4, #24]
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	6922      	ldr	r2, [r4, #16]
 800a5a4:	4282      	cmp	r2, r0
 800a5a6:	d1ba      	bne.n	800a51e <__swsetup_r+0x3e>
 800a5a8:	060a      	lsls	r2, r1, #24
 800a5aa:	d5b8      	bpl.n	800a51e <__swsetup_r+0x3e>
 800a5ac:	2240      	movs	r2, #64	; 0x40
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	81a3      	strh	r3, [r4, #12]
 800a5b2:	3801      	subs	r0, #1
 800a5b4:	e7b3      	b.n	800a51e <__swsetup_r+0x3e>
 800a5b6:	0788      	lsls	r0, r1, #30
 800a5b8:	d400      	bmi.n	800a5bc <__swsetup_r+0xdc>
 800a5ba:	6962      	ldr	r2, [r4, #20]
 800a5bc:	60a2      	str	r2, [r4, #8]
 800a5be:	e7ef      	b.n	800a5a0 <__swsetup_r+0xc0>
 800a5c0:	2000004c 	.word	0x2000004c
 800a5c4:	0800b53c 	.word	0x0800b53c
 800a5c8:	0800b55c 	.word	0x0800b55c
 800a5cc:	0800b51c 	.word	0x0800b51c

0800a5d0 <abort>:
 800a5d0:	2006      	movs	r0, #6
 800a5d2:	b510      	push	{r4, lr}
 800a5d4:	f000 fa74 	bl	800aac0 <raise>
 800a5d8:	2001      	movs	r0, #1
 800a5da:	f7f8 fb2f 	bl	8002c3c <_exit>
	...

0800a5e0 <__sflush_r>:
 800a5e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5e2:	898b      	ldrh	r3, [r1, #12]
 800a5e4:	0005      	movs	r5, r0
 800a5e6:	000c      	movs	r4, r1
 800a5e8:	071a      	lsls	r2, r3, #28
 800a5ea:	d45f      	bmi.n	800a6ac <__sflush_r+0xcc>
 800a5ec:	684a      	ldr	r2, [r1, #4]
 800a5ee:	2a00      	cmp	r2, #0
 800a5f0:	dc04      	bgt.n	800a5fc <__sflush_r+0x1c>
 800a5f2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a5f4:	2a00      	cmp	r2, #0
 800a5f6:	dc01      	bgt.n	800a5fc <__sflush_r+0x1c>
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a5fc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a5fe:	2f00      	cmp	r7, #0
 800a600:	d0fa      	beq.n	800a5f8 <__sflush_r+0x18>
 800a602:	2200      	movs	r2, #0
 800a604:	2180      	movs	r1, #128	; 0x80
 800a606:	682e      	ldr	r6, [r5, #0]
 800a608:	602a      	str	r2, [r5, #0]
 800a60a:	001a      	movs	r2, r3
 800a60c:	0149      	lsls	r1, r1, #5
 800a60e:	400a      	ands	r2, r1
 800a610:	420b      	tst	r3, r1
 800a612:	d034      	beq.n	800a67e <__sflush_r+0x9e>
 800a614:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	075b      	lsls	r3, r3, #29
 800a61a:	d506      	bpl.n	800a62a <__sflush_r+0x4a>
 800a61c:	6863      	ldr	r3, [r4, #4]
 800a61e:	1ac0      	subs	r0, r0, r3
 800a620:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a622:	2b00      	cmp	r3, #0
 800a624:	d001      	beq.n	800a62a <__sflush_r+0x4a>
 800a626:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a628:	1ac0      	subs	r0, r0, r3
 800a62a:	0002      	movs	r2, r0
 800a62c:	6a21      	ldr	r1, [r4, #32]
 800a62e:	2300      	movs	r3, #0
 800a630:	0028      	movs	r0, r5
 800a632:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a634:	47b8      	blx	r7
 800a636:	89a1      	ldrh	r1, [r4, #12]
 800a638:	1c43      	adds	r3, r0, #1
 800a63a:	d106      	bne.n	800a64a <__sflush_r+0x6a>
 800a63c:	682b      	ldr	r3, [r5, #0]
 800a63e:	2b1d      	cmp	r3, #29
 800a640:	d831      	bhi.n	800a6a6 <__sflush_r+0xc6>
 800a642:	4a2c      	ldr	r2, [pc, #176]	; (800a6f4 <__sflush_r+0x114>)
 800a644:	40da      	lsrs	r2, r3
 800a646:	07d3      	lsls	r3, r2, #31
 800a648:	d52d      	bpl.n	800a6a6 <__sflush_r+0xc6>
 800a64a:	2300      	movs	r3, #0
 800a64c:	6063      	str	r3, [r4, #4]
 800a64e:	6923      	ldr	r3, [r4, #16]
 800a650:	6023      	str	r3, [r4, #0]
 800a652:	04cb      	lsls	r3, r1, #19
 800a654:	d505      	bpl.n	800a662 <__sflush_r+0x82>
 800a656:	1c43      	adds	r3, r0, #1
 800a658:	d102      	bne.n	800a660 <__sflush_r+0x80>
 800a65a:	682b      	ldr	r3, [r5, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d100      	bne.n	800a662 <__sflush_r+0x82>
 800a660:	6560      	str	r0, [r4, #84]	; 0x54
 800a662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a664:	602e      	str	r6, [r5, #0]
 800a666:	2900      	cmp	r1, #0
 800a668:	d0c6      	beq.n	800a5f8 <__sflush_r+0x18>
 800a66a:	0023      	movs	r3, r4
 800a66c:	3344      	adds	r3, #68	; 0x44
 800a66e:	4299      	cmp	r1, r3
 800a670:	d002      	beq.n	800a678 <__sflush_r+0x98>
 800a672:	0028      	movs	r0, r5
 800a674:	f7ff fac8 	bl	8009c08 <_free_r>
 800a678:	2000      	movs	r0, #0
 800a67a:	6360      	str	r0, [r4, #52]	; 0x34
 800a67c:	e7bd      	b.n	800a5fa <__sflush_r+0x1a>
 800a67e:	2301      	movs	r3, #1
 800a680:	0028      	movs	r0, r5
 800a682:	6a21      	ldr	r1, [r4, #32]
 800a684:	47b8      	blx	r7
 800a686:	1c43      	adds	r3, r0, #1
 800a688:	d1c5      	bne.n	800a616 <__sflush_r+0x36>
 800a68a:	682b      	ldr	r3, [r5, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d0c2      	beq.n	800a616 <__sflush_r+0x36>
 800a690:	2b1d      	cmp	r3, #29
 800a692:	d001      	beq.n	800a698 <__sflush_r+0xb8>
 800a694:	2b16      	cmp	r3, #22
 800a696:	d101      	bne.n	800a69c <__sflush_r+0xbc>
 800a698:	602e      	str	r6, [r5, #0]
 800a69a:	e7ad      	b.n	800a5f8 <__sflush_r+0x18>
 800a69c:	2340      	movs	r3, #64	; 0x40
 800a69e:	89a2      	ldrh	r2, [r4, #12]
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	81a3      	strh	r3, [r4, #12]
 800a6a4:	e7a9      	b.n	800a5fa <__sflush_r+0x1a>
 800a6a6:	2340      	movs	r3, #64	; 0x40
 800a6a8:	430b      	orrs	r3, r1
 800a6aa:	e7fa      	b.n	800a6a2 <__sflush_r+0xc2>
 800a6ac:	690f      	ldr	r7, [r1, #16]
 800a6ae:	2f00      	cmp	r7, #0
 800a6b0:	d0a2      	beq.n	800a5f8 <__sflush_r+0x18>
 800a6b2:	680a      	ldr	r2, [r1, #0]
 800a6b4:	600f      	str	r7, [r1, #0]
 800a6b6:	1bd2      	subs	r2, r2, r7
 800a6b8:	9201      	str	r2, [sp, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	079b      	lsls	r3, r3, #30
 800a6be:	d100      	bne.n	800a6c2 <__sflush_r+0xe2>
 800a6c0:	694a      	ldr	r2, [r1, #20]
 800a6c2:	60a2      	str	r2, [r4, #8]
 800a6c4:	9b01      	ldr	r3, [sp, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	dc00      	bgt.n	800a6cc <__sflush_r+0xec>
 800a6ca:	e795      	b.n	800a5f8 <__sflush_r+0x18>
 800a6cc:	003a      	movs	r2, r7
 800a6ce:	0028      	movs	r0, r5
 800a6d0:	9b01      	ldr	r3, [sp, #4]
 800a6d2:	6a21      	ldr	r1, [r4, #32]
 800a6d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a6d6:	47b0      	blx	r6
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	dc06      	bgt.n	800a6ea <__sflush_r+0x10a>
 800a6dc:	2340      	movs	r3, #64	; 0x40
 800a6de:	2001      	movs	r0, #1
 800a6e0:	89a2      	ldrh	r2, [r4, #12]
 800a6e2:	4240      	negs	r0, r0
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	81a3      	strh	r3, [r4, #12]
 800a6e8:	e787      	b.n	800a5fa <__sflush_r+0x1a>
 800a6ea:	9b01      	ldr	r3, [sp, #4]
 800a6ec:	183f      	adds	r7, r7, r0
 800a6ee:	1a1b      	subs	r3, r3, r0
 800a6f0:	9301      	str	r3, [sp, #4]
 800a6f2:	e7e7      	b.n	800a6c4 <__sflush_r+0xe4>
 800a6f4:	20400001 	.word	0x20400001

0800a6f8 <_fflush_r>:
 800a6f8:	690b      	ldr	r3, [r1, #16]
 800a6fa:	b570      	push	{r4, r5, r6, lr}
 800a6fc:	0005      	movs	r5, r0
 800a6fe:	000c      	movs	r4, r1
 800a700:	2b00      	cmp	r3, #0
 800a702:	d102      	bne.n	800a70a <_fflush_r+0x12>
 800a704:	2500      	movs	r5, #0
 800a706:	0028      	movs	r0, r5
 800a708:	bd70      	pop	{r4, r5, r6, pc}
 800a70a:	2800      	cmp	r0, #0
 800a70c:	d004      	beq.n	800a718 <_fflush_r+0x20>
 800a70e:	6983      	ldr	r3, [r0, #24]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d101      	bne.n	800a718 <_fflush_r+0x20>
 800a714:	f000 f892 	bl	800a83c <__sinit>
 800a718:	4b14      	ldr	r3, [pc, #80]	; (800a76c <_fflush_r+0x74>)
 800a71a:	429c      	cmp	r4, r3
 800a71c:	d11b      	bne.n	800a756 <_fflush_r+0x5e>
 800a71e:	686c      	ldr	r4, [r5, #4]
 800a720:	220c      	movs	r2, #12
 800a722:	5ea3      	ldrsh	r3, [r4, r2]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d0ed      	beq.n	800a704 <_fflush_r+0xc>
 800a728:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a72a:	07d2      	lsls	r2, r2, #31
 800a72c:	d404      	bmi.n	800a738 <_fflush_r+0x40>
 800a72e:	059b      	lsls	r3, r3, #22
 800a730:	d402      	bmi.n	800a738 <_fflush_r+0x40>
 800a732:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a734:	f000 f923 	bl	800a97e <__retarget_lock_acquire_recursive>
 800a738:	0028      	movs	r0, r5
 800a73a:	0021      	movs	r1, r4
 800a73c:	f7ff ff50 	bl	800a5e0 <__sflush_r>
 800a740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a742:	0005      	movs	r5, r0
 800a744:	07db      	lsls	r3, r3, #31
 800a746:	d4de      	bmi.n	800a706 <_fflush_r+0xe>
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	059b      	lsls	r3, r3, #22
 800a74c:	d4db      	bmi.n	800a706 <_fflush_r+0xe>
 800a74e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a750:	f000 f916 	bl	800a980 <__retarget_lock_release_recursive>
 800a754:	e7d7      	b.n	800a706 <_fflush_r+0xe>
 800a756:	4b06      	ldr	r3, [pc, #24]	; (800a770 <_fflush_r+0x78>)
 800a758:	429c      	cmp	r4, r3
 800a75a:	d101      	bne.n	800a760 <_fflush_r+0x68>
 800a75c:	68ac      	ldr	r4, [r5, #8]
 800a75e:	e7df      	b.n	800a720 <_fflush_r+0x28>
 800a760:	4b04      	ldr	r3, [pc, #16]	; (800a774 <_fflush_r+0x7c>)
 800a762:	429c      	cmp	r4, r3
 800a764:	d1dc      	bne.n	800a720 <_fflush_r+0x28>
 800a766:	68ec      	ldr	r4, [r5, #12]
 800a768:	e7da      	b.n	800a720 <_fflush_r+0x28>
 800a76a:	46c0      	nop			; (mov r8, r8)
 800a76c:	0800b53c 	.word	0x0800b53c
 800a770:	0800b55c 	.word	0x0800b55c
 800a774:	0800b51c 	.word	0x0800b51c

0800a778 <std>:
 800a778:	2300      	movs	r3, #0
 800a77a:	b510      	push	{r4, lr}
 800a77c:	0004      	movs	r4, r0
 800a77e:	6003      	str	r3, [r0, #0]
 800a780:	6043      	str	r3, [r0, #4]
 800a782:	6083      	str	r3, [r0, #8]
 800a784:	8181      	strh	r1, [r0, #12]
 800a786:	6643      	str	r3, [r0, #100]	; 0x64
 800a788:	0019      	movs	r1, r3
 800a78a:	81c2      	strh	r2, [r0, #14]
 800a78c:	6103      	str	r3, [r0, #16]
 800a78e:	6143      	str	r3, [r0, #20]
 800a790:	6183      	str	r3, [r0, #24]
 800a792:	2208      	movs	r2, #8
 800a794:	305c      	adds	r0, #92	; 0x5c
 800a796:	f7fd fac3 	bl	8007d20 <memset>
 800a79a:	4b05      	ldr	r3, [pc, #20]	; (800a7b0 <std+0x38>)
 800a79c:	6263      	str	r3, [r4, #36]	; 0x24
 800a79e:	4b05      	ldr	r3, [pc, #20]	; (800a7b4 <std+0x3c>)
 800a7a0:	6224      	str	r4, [r4, #32]
 800a7a2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7a4:	4b04      	ldr	r3, [pc, #16]	; (800a7b8 <std+0x40>)
 800a7a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7a8:	4b04      	ldr	r3, [pc, #16]	; (800a7bc <std+0x44>)
 800a7aa:	6323      	str	r3, [r4, #48]	; 0x30
 800a7ac:	bd10      	pop	{r4, pc}
 800a7ae:	46c0      	nop			; (mov r8, r8)
 800a7b0:	0800ab01 	.word	0x0800ab01
 800a7b4:	0800ab29 	.word	0x0800ab29
 800a7b8:	0800ab61 	.word	0x0800ab61
 800a7bc:	0800ab8d 	.word	0x0800ab8d

0800a7c0 <_cleanup_r>:
 800a7c0:	b510      	push	{r4, lr}
 800a7c2:	4902      	ldr	r1, [pc, #8]	; (800a7cc <_cleanup_r+0xc>)
 800a7c4:	f000 f8ba 	bl	800a93c <_fwalk_reent>
 800a7c8:	bd10      	pop	{r4, pc}
 800a7ca:	46c0      	nop			; (mov r8, r8)
 800a7cc:	0800a6f9 	.word	0x0800a6f9

0800a7d0 <__sfmoreglue>:
 800a7d0:	b570      	push	{r4, r5, r6, lr}
 800a7d2:	2568      	movs	r5, #104	; 0x68
 800a7d4:	1e4a      	subs	r2, r1, #1
 800a7d6:	4355      	muls	r5, r2
 800a7d8:	000e      	movs	r6, r1
 800a7da:	0029      	movs	r1, r5
 800a7dc:	3174      	adds	r1, #116	; 0x74
 800a7de:	f7ff fa5d 	bl	8009c9c <_malloc_r>
 800a7e2:	1e04      	subs	r4, r0, #0
 800a7e4:	d008      	beq.n	800a7f8 <__sfmoreglue+0x28>
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	002a      	movs	r2, r5
 800a7ea:	6001      	str	r1, [r0, #0]
 800a7ec:	6046      	str	r6, [r0, #4]
 800a7ee:	300c      	adds	r0, #12
 800a7f0:	60a0      	str	r0, [r4, #8]
 800a7f2:	3268      	adds	r2, #104	; 0x68
 800a7f4:	f7fd fa94 	bl	8007d20 <memset>
 800a7f8:	0020      	movs	r0, r4
 800a7fa:	bd70      	pop	{r4, r5, r6, pc}

0800a7fc <__sfp_lock_acquire>:
 800a7fc:	b510      	push	{r4, lr}
 800a7fe:	4802      	ldr	r0, [pc, #8]	; (800a808 <__sfp_lock_acquire+0xc>)
 800a800:	f000 f8bd 	bl	800a97e <__retarget_lock_acquire_recursive>
 800a804:	bd10      	pop	{r4, pc}
 800a806:	46c0      	nop			; (mov r8, r8)
 800a808:	200005fc 	.word	0x200005fc

0800a80c <__sfp_lock_release>:
 800a80c:	b510      	push	{r4, lr}
 800a80e:	4802      	ldr	r0, [pc, #8]	; (800a818 <__sfp_lock_release+0xc>)
 800a810:	f000 f8b6 	bl	800a980 <__retarget_lock_release_recursive>
 800a814:	bd10      	pop	{r4, pc}
 800a816:	46c0      	nop			; (mov r8, r8)
 800a818:	200005fc 	.word	0x200005fc

0800a81c <__sinit_lock_acquire>:
 800a81c:	b510      	push	{r4, lr}
 800a81e:	4802      	ldr	r0, [pc, #8]	; (800a828 <__sinit_lock_acquire+0xc>)
 800a820:	f000 f8ad 	bl	800a97e <__retarget_lock_acquire_recursive>
 800a824:	bd10      	pop	{r4, pc}
 800a826:	46c0      	nop			; (mov r8, r8)
 800a828:	200005f7 	.word	0x200005f7

0800a82c <__sinit_lock_release>:
 800a82c:	b510      	push	{r4, lr}
 800a82e:	4802      	ldr	r0, [pc, #8]	; (800a838 <__sinit_lock_release+0xc>)
 800a830:	f000 f8a6 	bl	800a980 <__retarget_lock_release_recursive>
 800a834:	bd10      	pop	{r4, pc}
 800a836:	46c0      	nop			; (mov r8, r8)
 800a838:	200005f7 	.word	0x200005f7

0800a83c <__sinit>:
 800a83c:	b513      	push	{r0, r1, r4, lr}
 800a83e:	0004      	movs	r4, r0
 800a840:	f7ff ffec 	bl	800a81c <__sinit_lock_acquire>
 800a844:	69a3      	ldr	r3, [r4, #24]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d002      	beq.n	800a850 <__sinit+0x14>
 800a84a:	f7ff ffef 	bl	800a82c <__sinit_lock_release>
 800a84e:	bd13      	pop	{r0, r1, r4, pc}
 800a850:	64a3      	str	r3, [r4, #72]	; 0x48
 800a852:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a854:	6523      	str	r3, [r4, #80]	; 0x50
 800a856:	4b13      	ldr	r3, [pc, #76]	; (800a8a4 <__sinit+0x68>)
 800a858:	4a13      	ldr	r2, [pc, #76]	; (800a8a8 <__sinit+0x6c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a85e:	9301      	str	r3, [sp, #4]
 800a860:	42a3      	cmp	r3, r4
 800a862:	d101      	bne.n	800a868 <__sinit+0x2c>
 800a864:	2301      	movs	r3, #1
 800a866:	61a3      	str	r3, [r4, #24]
 800a868:	0020      	movs	r0, r4
 800a86a:	f000 f81f 	bl	800a8ac <__sfp>
 800a86e:	6060      	str	r0, [r4, #4]
 800a870:	0020      	movs	r0, r4
 800a872:	f000 f81b 	bl	800a8ac <__sfp>
 800a876:	60a0      	str	r0, [r4, #8]
 800a878:	0020      	movs	r0, r4
 800a87a:	f000 f817 	bl	800a8ac <__sfp>
 800a87e:	2200      	movs	r2, #0
 800a880:	2104      	movs	r1, #4
 800a882:	60e0      	str	r0, [r4, #12]
 800a884:	6860      	ldr	r0, [r4, #4]
 800a886:	f7ff ff77 	bl	800a778 <std>
 800a88a:	2201      	movs	r2, #1
 800a88c:	2109      	movs	r1, #9
 800a88e:	68a0      	ldr	r0, [r4, #8]
 800a890:	f7ff ff72 	bl	800a778 <std>
 800a894:	2202      	movs	r2, #2
 800a896:	2112      	movs	r1, #18
 800a898:	68e0      	ldr	r0, [r4, #12]
 800a89a:	f7ff ff6d 	bl	800a778 <std>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	61a3      	str	r3, [r4, #24]
 800a8a2:	e7d2      	b.n	800a84a <__sinit+0xe>
 800a8a4:	0800b198 	.word	0x0800b198
 800a8a8:	0800a7c1 	.word	0x0800a7c1

0800a8ac <__sfp>:
 800a8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ae:	0007      	movs	r7, r0
 800a8b0:	f7ff ffa4 	bl	800a7fc <__sfp_lock_acquire>
 800a8b4:	4b1f      	ldr	r3, [pc, #124]	; (800a934 <__sfp+0x88>)
 800a8b6:	681e      	ldr	r6, [r3, #0]
 800a8b8:	69b3      	ldr	r3, [r6, #24]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d102      	bne.n	800a8c4 <__sfp+0x18>
 800a8be:	0030      	movs	r0, r6
 800a8c0:	f7ff ffbc 	bl	800a83c <__sinit>
 800a8c4:	3648      	adds	r6, #72	; 0x48
 800a8c6:	68b4      	ldr	r4, [r6, #8]
 800a8c8:	6873      	ldr	r3, [r6, #4]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	d504      	bpl.n	800a8d8 <__sfp+0x2c>
 800a8ce:	6833      	ldr	r3, [r6, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d022      	beq.n	800a91a <__sfp+0x6e>
 800a8d4:	6836      	ldr	r6, [r6, #0]
 800a8d6:	e7f6      	b.n	800a8c6 <__sfp+0x1a>
 800a8d8:	220c      	movs	r2, #12
 800a8da:	5ea5      	ldrsh	r5, [r4, r2]
 800a8dc:	2d00      	cmp	r5, #0
 800a8de:	d11a      	bne.n	800a916 <__sfp+0x6a>
 800a8e0:	0020      	movs	r0, r4
 800a8e2:	4b15      	ldr	r3, [pc, #84]	; (800a938 <__sfp+0x8c>)
 800a8e4:	3058      	adds	r0, #88	; 0x58
 800a8e6:	60e3      	str	r3, [r4, #12]
 800a8e8:	6665      	str	r5, [r4, #100]	; 0x64
 800a8ea:	f000 f847 	bl	800a97c <__retarget_lock_init_recursive>
 800a8ee:	f7ff ff8d 	bl	800a80c <__sfp_lock_release>
 800a8f2:	0020      	movs	r0, r4
 800a8f4:	2208      	movs	r2, #8
 800a8f6:	0029      	movs	r1, r5
 800a8f8:	6025      	str	r5, [r4, #0]
 800a8fa:	60a5      	str	r5, [r4, #8]
 800a8fc:	6065      	str	r5, [r4, #4]
 800a8fe:	6125      	str	r5, [r4, #16]
 800a900:	6165      	str	r5, [r4, #20]
 800a902:	61a5      	str	r5, [r4, #24]
 800a904:	305c      	adds	r0, #92	; 0x5c
 800a906:	f7fd fa0b 	bl	8007d20 <memset>
 800a90a:	6365      	str	r5, [r4, #52]	; 0x34
 800a90c:	63a5      	str	r5, [r4, #56]	; 0x38
 800a90e:	64a5      	str	r5, [r4, #72]	; 0x48
 800a910:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a912:	0020      	movs	r0, r4
 800a914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a916:	3468      	adds	r4, #104	; 0x68
 800a918:	e7d7      	b.n	800a8ca <__sfp+0x1e>
 800a91a:	2104      	movs	r1, #4
 800a91c:	0038      	movs	r0, r7
 800a91e:	f7ff ff57 	bl	800a7d0 <__sfmoreglue>
 800a922:	1e04      	subs	r4, r0, #0
 800a924:	6030      	str	r0, [r6, #0]
 800a926:	d1d5      	bne.n	800a8d4 <__sfp+0x28>
 800a928:	f7ff ff70 	bl	800a80c <__sfp_lock_release>
 800a92c:	230c      	movs	r3, #12
 800a92e:	603b      	str	r3, [r7, #0]
 800a930:	e7ef      	b.n	800a912 <__sfp+0x66>
 800a932:	46c0      	nop			; (mov r8, r8)
 800a934:	0800b198 	.word	0x0800b198
 800a938:	ffff0001 	.word	0xffff0001

0800a93c <_fwalk_reent>:
 800a93c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a93e:	0004      	movs	r4, r0
 800a940:	0006      	movs	r6, r0
 800a942:	2700      	movs	r7, #0
 800a944:	9101      	str	r1, [sp, #4]
 800a946:	3448      	adds	r4, #72	; 0x48
 800a948:	6863      	ldr	r3, [r4, #4]
 800a94a:	68a5      	ldr	r5, [r4, #8]
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	9b00      	ldr	r3, [sp, #0]
 800a950:	3b01      	subs	r3, #1
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	d504      	bpl.n	800a960 <_fwalk_reent+0x24>
 800a956:	6824      	ldr	r4, [r4, #0]
 800a958:	2c00      	cmp	r4, #0
 800a95a:	d1f5      	bne.n	800a948 <_fwalk_reent+0xc>
 800a95c:	0038      	movs	r0, r7
 800a95e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a960:	89ab      	ldrh	r3, [r5, #12]
 800a962:	2b01      	cmp	r3, #1
 800a964:	d908      	bls.n	800a978 <_fwalk_reent+0x3c>
 800a966:	220e      	movs	r2, #14
 800a968:	5eab      	ldrsh	r3, [r5, r2]
 800a96a:	3301      	adds	r3, #1
 800a96c:	d004      	beq.n	800a978 <_fwalk_reent+0x3c>
 800a96e:	0029      	movs	r1, r5
 800a970:	0030      	movs	r0, r6
 800a972:	9b01      	ldr	r3, [sp, #4]
 800a974:	4798      	blx	r3
 800a976:	4307      	orrs	r7, r0
 800a978:	3568      	adds	r5, #104	; 0x68
 800a97a:	e7e8      	b.n	800a94e <_fwalk_reent+0x12>

0800a97c <__retarget_lock_init_recursive>:
 800a97c:	4770      	bx	lr

0800a97e <__retarget_lock_acquire_recursive>:
 800a97e:	4770      	bx	lr

0800a980 <__retarget_lock_release_recursive>:
 800a980:	4770      	bx	lr
	...

0800a984 <__swhatbuf_r>:
 800a984:	b570      	push	{r4, r5, r6, lr}
 800a986:	000e      	movs	r6, r1
 800a988:	001d      	movs	r5, r3
 800a98a:	230e      	movs	r3, #14
 800a98c:	5ec9      	ldrsh	r1, [r1, r3]
 800a98e:	0014      	movs	r4, r2
 800a990:	b096      	sub	sp, #88	; 0x58
 800a992:	2900      	cmp	r1, #0
 800a994:	da07      	bge.n	800a9a6 <__swhatbuf_r+0x22>
 800a996:	2300      	movs	r3, #0
 800a998:	602b      	str	r3, [r5, #0]
 800a99a:	89b3      	ldrh	r3, [r6, #12]
 800a99c:	061b      	lsls	r3, r3, #24
 800a99e:	d411      	bmi.n	800a9c4 <__swhatbuf_r+0x40>
 800a9a0:	2380      	movs	r3, #128	; 0x80
 800a9a2:	00db      	lsls	r3, r3, #3
 800a9a4:	e00f      	b.n	800a9c6 <__swhatbuf_r+0x42>
 800a9a6:	466a      	mov	r2, sp
 800a9a8:	f000 f91c 	bl	800abe4 <_fstat_r>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	dbf2      	blt.n	800a996 <__swhatbuf_r+0x12>
 800a9b0:	23f0      	movs	r3, #240	; 0xf0
 800a9b2:	9901      	ldr	r1, [sp, #4]
 800a9b4:	021b      	lsls	r3, r3, #8
 800a9b6:	4019      	ands	r1, r3
 800a9b8:	4b05      	ldr	r3, [pc, #20]	; (800a9d0 <__swhatbuf_r+0x4c>)
 800a9ba:	18c9      	adds	r1, r1, r3
 800a9bc:	424b      	negs	r3, r1
 800a9be:	4159      	adcs	r1, r3
 800a9c0:	6029      	str	r1, [r5, #0]
 800a9c2:	e7ed      	b.n	800a9a0 <__swhatbuf_r+0x1c>
 800a9c4:	2340      	movs	r3, #64	; 0x40
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	b016      	add	sp, #88	; 0x58
 800a9cc:	bd70      	pop	{r4, r5, r6, pc}
 800a9ce:	46c0      	nop			; (mov r8, r8)
 800a9d0:	ffffe000 	.word	0xffffe000

0800a9d4 <__smakebuf_r>:
 800a9d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9d6:	2602      	movs	r6, #2
 800a9d8:	898b      	ldrh	r3, [r1, #12]
 800a9da:	0005      	movs	r5, r0
 800a9dc:	000c      	movs	r4, r1
 800a9de:	4233      	tst	r3, r6
 800a9e0:	d006      	beq.n	800a9f0 <__smakebuf_r+0x1c>
 800a9e2:	0023      	movs	r3, r4
 800a9e4:	3347      	adds	r3, #71	; 0x47
 800a9e6:	6023      	str	r3, [r4, #0]
 800a9e8:	6123      	str	r3, [r4, #16]
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	6163      	str	r3, [r4, #20]
 800a9ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a9f0:	466a      	mov	r2, sp
 800a9f2:	ab01      	add	r3, sp, #4
 800a9f4:	f7ff ffc6 	bl	800a984 <__swhatbuf_r>
 800a9f8:	9900      	ldr	r1, [sp, #0]
 800a9fa:	0007      	movs	r7, r0
 800a9fc:	0028      	movs	r0, r5
 800a9fe:	f7ff f94d 	bl	8009c9c <_malloc_r>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	d108      	bne.n	800aa18 <__smakebuf_r+0x44>
 800aa06:	220c      	movs	r2, #12
 800aa08:	5ea3      	ldrsh	r3, [r4, r2]
 800aa0a:	059a      	lsls	r2, r3, #22
 800aa0c:	d4ef      	bmi.n	800a9ee <__smakebuf_r+0x1a>
 800aa0e:	2203      	movs	r2, #3
 800aa10:	4393      	bics	r3, r2
 800aa12:	431e      	orrs	r6, r3
 800aa14:	81a6      	strh	r6, [r4, #12]
 800aa16:	e7e4      	b.n	800a9e2 <__smakebuf_r+0xe>
 800aa18:	4b0f      	ldr	r3, [pc, #60]	; (800aa58 <__smakebuf_r+0x84>)
 800aa1a:	62ab      	str	r3, [r5, #40]	; 0x28
 800aa1c:	2380      	movs	r3, #128	; 0x80
 800aa1e:	89a2      	ldrh	r2, [r4, #12]
 800aa20:	6020      	str	r0, [r4, #0]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	81a3      	strh	r3, [r4, #12]
 800aa26:	9b00      	ldr	r3, [sp, #0]
 800aa28:	6120      	str	r0, [r4, #16]
 800aa2a:	6163      	str	r3, [r4, #20]
 800aa2c:	9b01      	ldr	r3, [sp, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00d      	beq.n	800aa4e <__smakebuf_r+0x7a>
 800aa32:	0028      	movs	r0, r5
 800aa34:	230e      	movs	r3, #14
 800aa36:	5ee1      	ldrsh	r1, [r4, r3]
 800aa38:	f000 f8e6 	bl	800ac08 <_isatty_r>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d006      	beq.n	800aa4e <__smakebuf_r+0x7a>
 800aa40:	2203      	movs	r2, #3
 800aa42:	89a3      	ldrh	r3, [r4, #12]
 800aa44:	4393      	bics	r3, r2
 800aa46:	001a      	movs	r2, r3
 800aa48:	2301      	movs	r3, #1
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	81a3      	strh	r3, [r4, #12]
 800aa4e:	89a0      	ldrh	r0, [r4, #12]
 800aa50:	4307      	orrs	r7, r0
 800aa52:	81a7      	strh	r7, [r4, #12]
 800aa54:	e7cb      	b.n	800a9ee <__smakebuf_r+0x1a>
 800aa56:	46c0      	nop			; (mov r8, r8)
 800aa58:	0800a7c1 	.word	0x0800a7c1

0800aa5c <_malloc_usable_size_r>:
 800aa5c:	1f0b      	subs	r3, r1, #4
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	1f18      	subs	r0, r3, #4
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	da01      	bge.n	800aa6a <_malloc_usable_size_r+0xe>
 800aa66:	580b      	ldr	r3, [r1, r0]
 800aa68:	18c0      	adds	r0, r0, r3
 800aa6a:	4770      	bx	lr

0800aa6c <_raise_r>:
 800aa6c:	b570      	push	{r4, r5, r6, lr}
 800aa6e:	0004      	movs	r4, r0
 800aa70:	000d      	movs	r5, r1
 800aa72:	291f      	cmp	r1, #31
 800aa74:	d904      	bls.n	800aa80 <_raise_r+0x14>
 800aa76:	2316      	movs	r3, #22
 800aa78:	6003      	str	r3, [r0, #0]
 800aa7a:	2001      	movs	r0, #1
 800aa7c:	4240      	negs	r0, r0
 800aa7e:	bd70      	pop	{r4, r5, r6, pc}
 800aa80:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d004      	beq.n	800aa90 <_raise_r+0x24>
 800aa86:	008a      	lsls	r2, r1, #2
 800aa88:	189b      	adds	r3, r3, r2
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	2a00      	cmp	r2, #0
 800aa8e:	d108      	bne.n	800aaa2 <_raise_r+0x36>
 800aa90:	0020      	movs	r0, r4
 800aa92:	f000 f831 	bl	800aaf8 <_getpid_r>
 800aa96:	002a      	movs	r2, r5
 800aa98:	0001      	movs	r1, r0
 800aa9a:	0020      	movs	r0, r4
 800aa9c:	f000 f81a 	bl	800aad4 <_kill_r>
 800aaa0:	e7ed      	b.n	800aa7e <_raise_r+0x12>
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	2a01      	cmp	r2, #1
 800aaa6:	d0ea      	beq.n	800aa7e <_raise_r+0x12>
 800aaa8:	1c51      	adds	r1, r2, #1
 800aaaa:	d103      	bne.n	800aab4 <_raise_r+0x48>
 800aaac:	2316      	movs	r3, #22
 800aaae:	3001      	adds	r0, #1
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	e7e4      	b.n	800aa7e <_raise_r+0x12>
 800aab4:	2400      	movs	r4, #0
 800aab6:	0028      	movs	r0, r5
 800aab8:	601c      	str	r4, [r3, #0]
 800aaba:	4790      	blx	r2
 800aabc:	0020      	movs	r0, r4
 800aabe:	e7de      	b.n	800aa7e <_raise_r+0x12>

0800aac0 <raise>:
 800aac0:	b510      	push	{r4, lr}
 800aac2:	4b03      	ldr	r3, [pc, #12]	; (800aad0 <raise+0x10>)
 800aac4:	0001      	movs	r1, r0
 800aac6:	6818      	ldr	r0, [r3, #0]
 800aac8:	f7ff ffd0 	bl	800aa6c <_raise_r>
 800aacc:	bd10      	pop	{r4, pc}
 800aace:	46c0      	nop			; (mov r8, r8)
 800aad0:	2000004c 	.word	0x2000004c

0800aad4 <_kill_r>:
 800aad4:	2300      	movs	r3, #0
 800aad6:	b570      	push	{r4, r5, r6, lr}
 800aad8:	4d06      	ldr	r5, [pc, #24]	; (800aaf4 <_kill_r+0x20>)
 800aada:	0004      	movs	r4, r0
 800aadc:	0008      	movs	r0, r1
 800aade:	0011      	movs	r1, r2
 800aae0:	602b      	str	r3, [r5, #0]
 800aae2:	f7f8 f89b 	bl	8002c1c <_kill>
 800aae6:	1c43      	adds	r3, r0, #1
 800aae8:	d103      	bne.n	800aaf2 <_kill_r+0x1e>
 800aaea:	682b      	ldr	r3, [r5, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d000      	beq.n	800aaf2 <_kill_r+0x1e>
 800aaf0:	6023      	str	r3, [r4, #0]
 800aaf2:	bd70      	pop	{r4, r5, r6, pc}
 800aaf4:	200005f0 	.word	0x200005f0

0800aaf8 <_getpid_r>:
 800aaf8:	b510      	push	{r4, lr}
 800aafa:	f7f8 f889 	bl	8002c10 <_getpid>
 800aafe:	bd10      	pop	{r4, pc}

0800ab00 <__sread>:
 800ab00:	b570      	push	{r4, r5, r6, lr}
 800ab02:	000c      	movs	r4, r1
 800ab04:	250e      	movs	r5, #14
 800ab06:	5f49      	ldrsh	r1, [r1, r5]
 800ab08:	f000 f8a4 	bl	800ac54 <_read_r>
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	db03      	blt.n	800ab18 <__sread+0x18>
 800ab10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ab12:	181b      	adds	r3, r3, r0
 800ab14:	6563      	str	r3, [r4, #84]	; 0x54
 800ab16:	bd70      	pop	{r4, r5, r6, pc}
 800ab18:	89a3      	ldrh	r3, [r4, #12]
 800ab1a:	4a02      	ldr	r2, [pc, #8]	; (800ab24 <__sread+0x24>)
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	81a3      	strh	r3, [r4, #12]
 800ab20:	e7f9      	b.n	800ab16 <__sread+0x16>
 800ab22:	46c0      	nop			; (mov r8, r8)
 800ab24:	ffffefff 	.word	0xffffefff

0800ab28 <__swrite>:
 800ab28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab2a:	001f      	movs	r7, r3
 800ab2c:	898b      	ldrh	r3, [r1, #12]
 800ab2e:	0005      	movs	r5, r0
 800ab30:	000c      	movs	r4, r1
 800ab32:	0016      	movs	r6, r2
 800ab34:	05db      	lsls	r3, r3, #23
 800ab36:	d505      	bpl.n	800ab44 <__swrite+0x1c>
 800ab38:	230e      	movs	r3, #14
 800ab3a:	5ec9      	ldrsh	r1, [r1, r3]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	2302      	movs	r3, #2
 800ab40:	f000 f874 	bl	800ac2c <_lseek_r>
 800ab44:	89a3      	ldrh	r3, [r4, #12]
 800ab46:	4a05      	ldr	r2, [pc, #20]	; (800ab5c <__swrite+0x34>)
 800ab48:	0028      	movs	r0, r5
 800ab4a:	4013      	ands	r3, r2
 800ab4c:	81a3      	strh	r3, [r4, #12]
 800ab4e:	0032      	movs	r2, r6
 800ab50:	230e      	movs	r3, #14
 800ab52:	5ee1      	ldrsh	r1, [r4, r3]
 800ab54:	003b      	movs	r3, r7
 800ab56:	f000 f81f 	bl	800ab98 <_write_r>
 800ab5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab5c:	ffffefff 	.word	0xffffefff

0800ab60 <__sseek>:
 800ab60:	b570      	push	{r4, r5, r6, lr}
 800ab62:	000c      	movs	r4, r1
 800ab64:	250e      	movs	r5, #14
 800ab66:	5f49      	ldrsh	r1, [r1, r5]
 800ab68:	f000 f860 	bl	800ac2c <_lseek_r>
 800ab6c:	89a3      	ldrh	r3, [r4, #12]
 800ab6e:	1c42      	adds	r2, r0, #1
 800ab70:	d103      	bne.n	800ab7a <__sseek+0x1a>
 800ab72:	4a05      	ldr	r2, [pc, #20]	; (800ab88 <__sseek+0x28>)
 800ab74:	4013      	ands	r3, r2
 800ab76:	81a3      	strh	r3, [r4, #12]
 800ab78:	bd70      	pop	{r4, r5, r6, pc}
 800ab7a:	2280      	movs	r2, #128	; 0x80
 800ab7c:	0152      	lsls	r2, r2, #5
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	81a3      	strh	r3, [r4, #12]
 800ab82:	6560      	str	r0, [r4, #84]	; 0x54
 800ab84:	e7f8      	b.n	800ab78 <__sseek+0x18>
 800ab86:	46c0      	nop			; (mov r8, r8)
 800ab88:	ffffefff 	.word	0xffffefff

0800ab8c <__sclose>:
 800ab8c:	b510      	push	{r4, lr}
 800ab8e:	230e      	movs	r3, #14
 800ab90:	5ec9      	ldrsh	r1, [r1, r3]
 800ab92:	f000 f815 	bl	800abc0 <_close_r>
 800ab96:	bd10      	pop	{r4, pc}

0800ab98 <_write_r>:
 800ab98:	b570      	push	{r4, r5, r6, lr}
 800ab9a:	0004      	movs	r4, r0
 800ab9c:	0008      	movs	r0, r1
 800ab9e:	0011      	movs	r1, r2
 800aba0:	001a      	movs	r2, r3
 800aba2:	2300      	movs	r3, #0
 800aba4:	4d05      	ldr	r5, [pc, #20]	; (800abbc <_write_r+0x24>)
 800aba6:	602b      	str	r3, [r5, #0]
 800aba8:	f7f8 f871 	bl	8002c8e <_write>
 800abac:	1c43      	adds	r3, r0, #1
 800abae:	d103      	bne.n	800abb8 <_write_r+0x20>
 800abb0:	682b      	ldr	r3, [r5, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d000      	beq.n	800abb8 <_write_r+0x20>
 800abb6:	6023      	str	r3, [r4, #0]
 800abb8:	bd70      	pop	{r4, r5, r6, pc}
 800abba:	46c0      	nop			; (mov r8, r8)
 800abbc:	200005f0 	.word	0x200005f0

0800abc0 <_close_r>:
 800abc0:	2300      	movs	r3, #0
 800abc2:	b570      	push	{r4, r5, r6, lr}
 800abc4:	4d06      	ldr	r5, [pc, #24]	; (800abe0 <_close_r+0x20>)
 800abc6:	0004      	movs	r4, r0
 800abc8:	0008      	movs	r0, r1
 800abca:	602b      	str	r3, [r5, #0]
 800abcc:	f7f8 f87b 	bl	8002cc6 <_close>
 800abd0:	1c43      	adds	r3, r0, #1
 800abd2:	d103      	bne.n	800abdc <_close_r+0x1c>
 800abd4:	682b      	ldr	r3, [r5, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d000      	beq.n	800abdc <_close_r+0x1c>
 800abda:	6023      	str	r3, [r4, #0]
 800abdc:	bd70      	pop	{r4, r5, r6, pc}
 800abde:	46c0      	nop			; (mov r8, r8)
 800abe0:	200005f0 	.word	0x200005f0

0800abe4 <_fstat_r>:
 800abe4:	2300      	movs	r3, #0
 800abe6:	b570      	push	{r4, r5, r6, lr}
 800abe8:	4d06      	ldr	r5, [pc, #24]	; (800ac04 <_fstat_r+0x20>)
 800abea:	0004      	movs	r4, r0
 800abec:	0008      	movs	r0, r1
 800abee:	0011      	movs	r1, r2
 800abf0:	602b      	str	r3, [r5, #0]
 800abf2:	f7f8 f872 	bl	8002cda <_fstat>
 800abf6:	1c43      	adds	r3, r0, #1
 800abf8:	d103      	bne.n	800ac02 <_fstat_r+0x1e>
 800abfa:	682b      	ldr	r3, [r5, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d000      	beq.n	800ac02 <_fstat_r+0x1e>
 800ac00:	6023      	str	r3, [r4, #0]
 800ac02:	bd70      	pop	{r4, r5, r6, pc}
 800ac04:	200005f0 	.word	0x200005f0

0800ac08 <_isatty_r>:
 800ac08:	2300      	movs	r3, #0
 800ac0a:	b570      	push	{r4, r5, r6, lr}
 800ac0c:	4d06      	ldr	r5, [pc, #24]	; (800ac28 <_isatty_r+0x20>)
 800ac0e:	0004      	movs	r4, r0
 800ac10:	0008      	movs	r0, r1
 800ac12:	602b      	str	r3, [r5, #0]
 800ac14:	f7f8 f86f 	bl	8002cf6 <_isatty>
 800ac18:	1c43      	adds	r3, r0, #1
 800ac1a:	d103      	bne.n	800ac24 <_isatty_r+0x1c>
 800ac1c:	682b      	ldr	r3, [r5, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d000      	beq.n	800ac24 <_isatty_r+0x1c>
 800ac22:	6023      	str	r3, [r4, #0]
 800ac24:	bd70      	pop	{r4, r5, r6, pc}
 800ac26:	46c0      	nop			; (mov r8, r8)
 800ac28:	200005f0 	.word	0x200005f0

0800ac2c <_lseek_r>:
 800ac2c:	b570      	push	{r4, r5, r6, lr}
 800ac2e:	0004      	movs	r4, r0
 800ac30:	0008      	movs	r0, r1
 800ac32:	0011      	movs	r1, r2
 800ac34:	001a      	movs	r2, r3
 800ac36:	2300      	movs	r3, #0
 800ac38:	4d05      	ldr	r5, [pc, #20]	; (800ac50 <_lseek_r+0x24>)
 800ac3a:	602b      	str	r3, [r5, #0]
 800ac3c:	f7f8 f864 	bl	8002d08 <_lseek>
 800ac40:	1c43      	adds	r3, r0, #1
 800ac42:	d103      	bne.n	800ac4c <_lseek_r+0x20>
 800ac44:	682b      	ldr	r3, [r5, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d000      	beq.n	800ac4c <_lseek_r+0x20>
 800ac4a:	6023      	str	r3, [r4, #0]
 800ac4c:	bd70      	pop	{r4, r5, r6, pc}
 800ac4e:	46c0      	nop			; (mov r8, r8)
 800ac50:	200005f0 	.word	0x200005f0

0800ac54 <_read_r>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	0004      	movs	r4, r0
 800ac58:	0008      	movs	r0, r1
 800ac5a:	0011      	movs	r1, r2
 800ac5c:	001a      	movs	r2, r3
 800ac5e:	2300      	movs	r3, #0
 800ac60:	4d05      	ldr	r5, [pc, #20]	; (800ac78 <_read_r+0x24>)
 800ac62:	602b      	str	r3, [r5, #0]
 800ac64:	f7f7 fff6 	bl	8002c54 <_read>
 800ac68:	1c43      	adds	r3, r0, #1
 800ac6a:	d103      	bne.n	800ac74 <_read_r+0x20>
 800ac6c:	682b      	ldr	r3, [r5, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d000      	beq.n	800ac74 <_read_r+0x20>
 800ac72:	6023      	str	r3, [r4, #0]
 800ac74:	bd70      	pop	{r4, r5, r6, pc}
 800ac76:	46c0      	nop			; (mov r8, r8)
 800ac78:	200005f0 	.word	0x200005f0

0800ac7c <_init>:
 800ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7e:	46c0      	nop			; (mov r8, r8)
 800ac80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac82:	bc08      	pop	{r3}
 800ac84:	469e      	mov	lr, r3
 800ac86:	4770      	bx	lr

0800ac88 <_fini>:
 800ac88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8a:	46c0      	nop			; (mov r8, r8)
 800ac8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac8e:	bc08      	pop	{r3}
 800ac90:	469e      	mov	lr, r3
 800ac92:	4770      	bx	lr
