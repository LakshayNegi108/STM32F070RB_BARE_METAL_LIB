
TFT_FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a348  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e8  0800a408  0800a408  0001a408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abf0  0800abf0  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  0800abf0  0800abf0  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800abf0  0800abf0  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abf0  0800abf0  0001abf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abf4  0800abf4  0001abf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800abf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016cc  2000010c  0800ad04  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017d8  0800ad04  000217d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179ed  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003baa  00000000  00000000  00037b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  0003b6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001440  00000000  00000000  0003ccd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015929  00000000  00000000  0003e118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a3ae  00000000  00000000  00053a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007691a  00000000  00000000  0006ddef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4709  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053ec  00000000  00000000  000e475c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000010c 	.word	0x2000010c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a3f0 	.word	0x0800a3f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000110 	.word	0x20000110
 8000104:	0800a3f0 	.word	0x0800a3f0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	60b9      	str	r1, [r7, #8]
 8000422:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	4a06      	ldr	r2, [pc, #24]	; (8000440 <vApplicationGetIdleTaskMemory+0x28>)
 8000428:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	4a05      	ldr	r2, [pc, #20]	; (8000444 <vApplicationGetIdleTaskMemory+0x2c>)
 800042e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2280      	movs	r2, #128	; 0x80
 8000434:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b004      	add	sp, #16
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	20000128 	.word	0x20000128
 8000444:	200001dc 	.word	0x200001dc

08000448 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000448:	b5b0      	push	{r4, r5, r7, lr}
 800044a:	b0ae      	sub	sp, #184	; 0xb8
 800044c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800044e:	f001 fdc5 	bl	8001fdc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000452:	f000 f961 	bl	8000718 <SystemClock_Config>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_USART2_UART_Init();
	MX_SPI1_Init();
 8000456:	f000 f9ab 	bl	80007b0 <MX_SPI1_Init>
	MX_FATFS_Init();
 800045a:	f003 fb2d 	bl	8003ab8 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */

//=================== SD Card Select Pin ==================================//
	gpio_config(PORTB, 6, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 800045e:	489c      	ldr	r0, [pc, #624]	; (80006d0 <main+0x288>)
 8000460:	2300      	movs	r3, #0
 8000462:	9301      	str	r3, [sp, #4]
 8000464:	2300      	movs	r3, #0
 8000466:	9300      	str	r3, [sp, #0]
 8000468:	2300      	movs	r3, #0
 800046a:	2201      	movs	r2, #1
 800046c:	2106      	movs	r1, #6
 800046e:	f004 f9a7 	bl	80047c0 <gpio_config>
	gpio_write(PORTB, 6, LOW);
 8000472:	4b97      	ldr	r3, [pc, #604]	; (80006d0 <main+0x288>)
 8000474:	2200      	movs	r2, #0
 8000476:	2106      	movs	r1, #6
 8000478:	0018      	movs	r0, r3
 800047a:	f004 fa8d 	bl	8004998 <gpio_write>
//=========================================================================//

//======================== USART Pin Config ===============================//
	USART_INIT(USART2, 48, PORTA, PORTA, 2, 3, 9600);
 800047e:	2390      	movs	r3, #144	; 0x90
 8000480:	05d9      	lsls	r1, r3, #23
 8000482:	2390      	movs	r3, #144	; 0x90
 8000484:	05da      	lsls	r2, r3, #23
 8000486:	4893      	ldr	r0, [pc, #588]	; (80006d4 <main+0x28c>)
 8000488:	2396      	movs	r3, #150	; 0x96
 800048a:	019b      	lsls	r3, r3, #6
 800048c:	9302      	str	r3, [sp, #8]
 800048e:	2303      	movs	r3, #3
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2302      	movs	r3, #2
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	000b      	movs	r3, r1
 8000498:	2130      	movs	r1, #48	; 0x30
 800049a:	f004 fe83 	bl	80051a4 <USART_INIT>
	USART_IT_EN(USART2, 0, 1, 0);
 800049e:	488d      	ldr	r0, [pc, #564]	; (80006d4 <main+0x28c>)
 80004a0:	2300      	movs	r3, #0
 80004a2:	2201      	movs	r2, #1
 80004a4:	2100      	movs	r1, #0
 80004a6:	f004 fea5 	bl	80051f4 <USART_IT_EN>
	USART_INIT(USART3, 48, PORTC, PORTC, 10, 11, 9600);
 80004aa:	498b      	ldr	r1, [pc, #556]	; (80006d8 <main+0x290>)
 80004ac:	4a8a      	ldr	r2, [pc, #552]	; (80006d8 <main+0x290>)
 80004ae:	488b      	ldr	r0, [pc, #556]	; (80006dc <main+0x294>)
 80004b0:	2396      	movs	r3, #150	; 0x96
 80004b2:	019b      	lsls	r3, r3, #6
 80004b4:	9302      	str	r3, [sp, #8]
 80004b6:	230b      	movs	r3, #11
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	230a      	movs	r3, #10
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	000b      	movs	r3, r1
 80004c0:	2130      	movs	r1, #48	; 0x30
 80004c2:	f004 fe6f 	bl	80051a4 <USART_INIT>
	USART_IT_EN(USART3, 0, 1, 0);
 80004c6:	4885      	ldr	r0, [pc, #532]	; (80006dc <main+0x294>)
 80004c8:	2300      	movs	r3, #0
 80004ca:	2201      	movs	r2, #1
 80004cc:	2100      	movs	r1, #0
 80004ce:	f004 fe91 	bl	80051f4 <USART_IT_EN>
	USART_WRITE(USART2, "Working\n", 8);
 80004d2:	4b83      	ldr	r3, [pc, #524]	; (80006e0 <main+0x298>)
 80004d4:	487f      	ldr	r0, [pc, #508]	; (80006d4 <main+0x28c>)
 80004d6:	2208      	movs	r2, #8
 80004d8:	0019      	movs	r1, r3
 80004da:	f005 f8a9 	bl	8005630 <USART_WRITE>
	USART_WRITE(USART3, "Working\n", 8);
 80004de:	4b80      	ldr	r3, [pc, #512]	; (80006e0 <main+0x298>)
 80004e0:	487e      	ldr	r0, [pc, #504]	; (80006dc <main+0x294>)
 80004e2:	2208      	movs	r2, #8
 80004e4:	0019      	movs	r1, r3
 80004e6:	f005 f8a3 	bl	8005630 <USART_WRITE>
//=========================================================================//
	LCD_Begin();
 80004ea:	f005 fad1 	bl	8005a90 <LCD_Begin>
	LCD_SetRotation(1);
 80004ee:	2001      	movs	r0, #1
 80004f0:	f006 ffc6 	bl	8007480 <LCD_SetRotation>
//	uint16_t bgColor = LCD_Color565(172, 0, 255);
	LCD_FillScreen(BLACK);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f006 fc87 	bl	8006e08 <LCD_FillScreen>
	Touch_Begin();
 80004fa:	f007 f958 	bl	80077ae <Touch_Begin>

//======================== Analog Pin Config ===============================//
	gpio_config(PORTC, 4, ANALOG_MODE, LOW_SPEED, DI_PUPD, PHPL);
 80004fe:	4876      	ldr	r0, [pc, #472]	; (80006d8 <main+0x290>)
 8000500:	2300      	movs	r3, #0
 8000502:	9301      	str	r3, [sp, #4]
 8000504:	2300      	movs	r3, #0
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	2300      	movs	r3, #0
 800050a:	2203      	movs	r2, #3
 800050c:	2104      	movs	r1, #4
 800050e:	f004 f957 	bl	80047c0 <gpio_config>
	gpio_config(PORTC, 5, ANALOG_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8000512:	4871      	ldr	r0, [pc, #452]	; (80006d8 <main+0x290>)
 8000514:	2300      	movs	r3, #0
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	2300      	movs	r3, #0
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2300      	movs	r3, #0
 800051e:	2203      	movs	r2, #3
 8000520:	2105      	movs	r1, #5
 8000522:	f004 f94d 	bl	80047c0 <gpio_config>
	gpio_config(PORTC, 2, ANALOG_MODE, LOW_SPEED, DI_PUPD, PHPL);
 8000526:	486c      	ldr	r0, [pc, #432]	; (80006d8 <main+0x290>)
 8000528:	2300      	movs	r3, #0
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	2300      	movs	r3, #0
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2300      	movs	r3, #0
 8000532:	2203      	movs	r2, #3
 8000534:	2102      	movs	r1, #2
 8000536:	f004 f943 	bl	80047c0 <gpio_config>
	gpio_config(PORTC, 3, ANALOG_MODE, LOW_SPEED, DI_PUPD, PHPL);
 800053a:	4867      	ldr	r0, [pc, #412]	; (80006d8 <main+0x290>)
 800053c:	2300      	movs	r3, #0
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	2300      	movs	r3, #0
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	2300      	movs	r3, #0
 8000546:	2203      	movs	r2, #3
 8000548:	2103      	movs	r1, #3
 800054a:	f004 f939 	bl	80047c0 <gpio_config>
//=========================================================================//

//======================== GPIO IT Pin Config ===============================//
	gpio_config(PORTA, 11, INPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 800054e:	2390      	movs	r3, #144	; 0x90
 8000550:	05d8      	lsls	r0, r3, #23
 8000552:	2300      	movs	r3, #0
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2300      	movs	r3, #0
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2200      	movs	r2, #0
 800055e:	210b      	movs	r1, #11
 8000560:	f004 f92e 	bl	80047c0 <gpio_config>
	gpio_IT_config(PORTA, 11, RISING_FALLING_EDGE);
 8000564:	2390      	movs	r3, #144	; 0x90
 8000566:	05db      	lsls	r3, r3, #23
 8000568:	2202      	movs	r2, #2
 800056a:	210b      	movs	r1, #11
 800056c:	0018      	movs	r0, r3
 800056e:	f004 fa33 	bl	80049d8 <gpio_IT_config>
	gpio_IT_EN(11, EXTI4_15_IRQn);
 8000572:	2107      	movs	r1, #7
 8000574:	200b      	movs	r0, #11
 8000576:	f004 fbdb 	bl	8004d30 <gpio_IT_EN>
	gpio_config(PORTA, 12, INPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 800057a:	2390      	movs	r3, #144	; 0x90
 800057c:	05d8      	lsls	r0, r3, #23
 800057e:	2300      	movs	r3, #0
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	2300      	movs	r3, #0
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	2200      	movs	r2, #0
 800058a:	210c      	movs	r1, #12
 800058c:	f004 f918 	bl	80047c0 <gpio_config>
	gpio_IT_config(PORTA, 12, RISING_FALLING_EDGE);
 8000590:	2390      	movs	r3, #144	; 0x90
 8000592:	05db      	lsls	r3, r3, #23
 8000594:	2202      	movs	r2, #2
 8000596:	210c      	movs	r1, #12
 8000598:	0018      	movs	r0, r3
 800059a:	f004 fa1d 	bl	80049d8 <gpio_IT_config>
	gpio_IT_EN(12, EXTI4_15_IRQn);
 800059e:	2107      	movs	r1, #7
 80005a0:	200c      	movs	r0, #12
 80005a2:	f004 fbc5 	bl	8004d30 <gpio_IT_EN>
	gpio_config(PORTC, 8, INPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 80005a6:	484c      	ldr	r0, [pc, #304]	; (80006d8 <main+0x290>)
 80005a8:	2300      	movs	r3, #0
 80005aa:	9301      	str	r3, [sp, #4]
 80005ac:	2300      	movs	r3, #0
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2300      	movs	r3, #0
 80005b2:	2200      	movs	r2, #0
 80005b4:	2108      	movs	r1, #8
 80005b6:	f004 f903 	bl	80047c0 <gpio_config>
	gpio_IT_config(PORTC, 8, RISING_EDGE);
 80005ba:	4b47      	ldr	r3, [pc, #284]	; (80006d8 <main+0x290>)
 80005bc:	2200      	movs	r2, #0
 80005be:	2108      	movs	r1, #8
 80005c0:	0018      	movs	r0, r3
 80005c2:	f004 fa09 	bl	80049d8 <gpio_IT_config>
	gpio_IT_EN(8, EXTI4_15_IRQn);
 80005c6:	2107      	movs	r1, #7
 80005c8:	2008      	movs	r0, #8
 80005ca:	f004 fbb1 	bl	8004d30 <gpio_IT_EN>
//===========================================================================//

//=================== || CMD BOX || ==============//
	drawCMDBox();
 80005ce:	f000 fcad 	bl	8000f2c <drawCMDBox>
//	LCD_DrawButton1("Connected", 18, 80, 160, 40, 2, GREEN, WHITE, 1, 25, 11,
//			2);
	//========================================================================//

	//===================== Pink White Box ====================//
	drawPinkWhiteBox();
 80005d2:	f000 fd79 	bl	80010c8 <drawPinkWhiteBox>
	//=============================================================//

	//=================== || Yellow BOX || ==============================////
	drawYellowBox();
 80005d6:	f000 fdd7 	bl	8001188 <drawYellowBox>
	//===================================================////

	HAL_Delay(1000);
 80005da:	23fa      	movs	r3, #250	; 0xfa
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	0018      	movs	r0, r3
 80005e0:	f001 fd2c 	bl	800203c <HAL_Delay>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of myBinarySem01 */
	osSemaphoreDef(myBinarySem01);
 80005e4:	21a0      	movs	r1, #160	; 0xa0
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2200      	movs	r2, #0
 80005f0:	605a      	str	r2, [r3, #4]
	myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2101      	movs	r1, #1
 80005f6:	0018      	movs	r0, r3
 80005f8:	f007 f9d4 	bl	80079a4 <osSemaphoreCreate>
 80005fc:	0002      	movs	r2, r0
 80005fe:	4b39      	ldr	r3, [pc, #228]	; (80006e4 <main+0x29c>)
 8000600:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of myQueue01 */
	osMessageQDef(myQueue01, 16, uint16_t);
 8000602:	2190      	movs	r1, #144	; 0x90
 8000604:	187b      	adds	r3, r7, r1
 8000606:	4a38      	ldr	r2, [pc, #224]	; (80006e8 <main+0x2a0>)
 8000608:	ca31      	ldmia	r2!, {r0, r4, r5}
 800060a:	c331      	stmia	r3!, {r0, r4, r5}
 800060c:	6812      	ldr	r2, [r2, #0]
 800060e:	601a      	str	r2, [r3, #0]
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2100      	movs	r1, #0
 8000614:	0018      	movs	r0, r3
 8000616:	f007 fa75 	bl	8007b04 <osMessageCreate>
 800061a:	0002      	movs	r2, r0
 800061c:	4b33      	ldr	r3, [pc, #204]	; (80006ec <main+0x2a4>)
 800061e:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000620:	2174      	movs	r1, #116	; 0x74
 8000622:	187b      	adds	r3, r7, r1
 8000624:	4a32      	ldr	r2, [pc, #200]	; (80006f0 <main+0x2a8>)
 8000626:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000628:	c331      	stmia	r3!, {r0, r4, r5}
 800062a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800062c:	c331      	stmia	r3!, {r0, r4, r5}
 800062e:	6812      	ldr	r2, [r2, #0]
 8000630:	601a      	str	r2, [r3, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2100      	movs	r1, #0
 8000636:	0018      	movs	r0, r3
 8000638:	f007 f953 	bl	80078e2 <osThreadCreate>
 800063c:	0002      	movs	r2, r0
 800063e:	4b2d      	ldr	r3, [pc, #180]	; (80006f4 <main+0x2ac>)
 8000640:	601a      	str	r2, [r3, #0]

	/* definition and creation of myTask02 */
	osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8000642:	2158      	movs	r1, #88	; 0x58
 8000644:	187b      	adds	r3, r7, r1
 8000646:	4a2c      	ldr	r2, [pc, #176]	; (80006f8 <main+0x2b0>)
 8000648:	ca31      	ldmia	r2!, {r0, r4, r5}
 800064a:	c331      	stmia	r3!, {r0, r4, r5}
 800064c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800064e:	c331      	stmia	r3!, {r0, r4, r5}
 8000650:	6812      	ldr	r2, [r2, #0]
 8000652:	601a      	str	r2, [r3, #0]
	myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2100      	movs	r1, #0
 8000658:	0018      	movs	r0, r3
 800065a:	f007 f942 	bl	80078e2 <osThreadCreate>
 800065e:	0002      	movs	r2, r0
 8000660:	4b26      	ldr	r3, [pc, #152]	; (80006fc <main+0x2b4>)
 8000662:	601a      	str	r2, [r3, #0]

	/* definition and creation of myTask03 */
	osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8000664:	213c      	movs	r1, #60	; 0x3c
 8000666:	187b      	adds	r3, r7, r1
 8000668:	4a25      	ldr	r2, [pc, #148]	; (8000700 <main+0x2b8>)
 800066a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800066c:	c331      	stmia	r3!, {r0, r4, r5}
 800066e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000670:	c331      	stmia	r3!, {r0, r4, r5}
 8000672:	6812      	ldr	r2, [r2, #0]
 8000674:	601a      	str	r2, [r3, #0]
	myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2100      	movs	r1, #0
 800067a:	0018      	movs	r0, r3
 800067c:	f007 f931 	bl	80078e2 <osThreadCreate>
 8000680:	0002      	movs	r2, r0
 8000682:	4b20      	ldr	r3, [pc, #128]	; (8000704 <main+0x2bc>)
 8000684:	601a      	str	r2, [r3, #0]

	/* definition and creation of myTask04 */
	osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 8000686:	2120      	movs	r1, #32
 8000688:	187b      	adds	r3, r7, r1
 800068a:	4a1f      	ldr	r2, [pc, #124]	; (8000708 <main+0x2c0>)
 800068c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800068e:	c331      	stmia	r3!, {r0, r4, r5}
 8000690:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000692:	c331      	stmia	r3!, {r0, r4, r5}
 8000694:	6812      	ldr	r2, [r2, #0]
 8000696:	601a      	str	r2, [r3, #0]
	myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2100      	movs	r1, #0
 800069c:	0018      	movs	r0, r3
 800069e:	f007 f920 	bl	80078e2 <osThreadCreate>
 80006a2:	0002      	movs	r2, r0
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <main+0x2c4>)
 80006a6:	601a      	str	r2, [r3, #0]

	/* definition and creation of myTask05 */
	osThreadDef(myTask05, StartTask05, osPriorityIdle, 0, 128);
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4a19      	ldr	r2, [pc, #100]	; (8000710 <main+0x2c8>)
 80006ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006ae:	c313      	stmia	r3!, {r0, r1, r4}
 80006b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006b2:	c313      	stmia	r3!, {r0, r1, r4}
 80006b4:	6812      	ldr	r2, [r2, #0]
 80006b6:	601a      	str	r2, [r3, #0]
	myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2100      	movs	r1, #0
 80006bc:	0018      	movs	r0, r3
 80006be:	f007 f910 	bl	80078e2 <osThreadCreate>
 80006c2:	0002      	movs	r2, r0
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <main+0x2cc>)
 80006c6:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80006c8:	f007 f903 	bl	80078d2 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 80006cc:	e7fe      	b.n	80006cc <main+0x284>
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	48000400 	.word	0x48000400
 80006d4:	40004400 	.word	0x40004400
 80006d8:	48000800 	.word	0x48000800
 80006dc:	40004800 	.word	0x40004800
 80006e0:	0800a4dc 	.word	0x0800a4dc
 80006e4:	20000458 	.word	0x20000458
 80006e8:	0800a4e8 	.word	0x0800a4e8
 80006ec:	20000454 	.word	0x20000454
 80006f0:	0800a4f8 	.word	0x0800a4f8
 80006f4:	20000440 	.word	0x20000440
 80006f8:	0800a514 	.word	0x0800a514
 80006fc:	20000444 	.word	0x20000444
 8000700:	0800a530 	.word	0x0800a530
 8000704:	20000448 	.word	0x20000448
 8000708:	0800a54c 	.word	0x0800a54c
 800070c:	2000044c 	.word	0x2000044c
 8000710:	0800a568 	.word	0x0800a568
 8000714:	20000450 	.word	0x20000450

08000718 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b091      	sub	sp, #68	; 0x44
 800071c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800071e:	2410      	movs	r4, #16
 8000720:	193b      	adds	r3, r7, r4
 8000722:	0018      	movs	r0, r3
 8000724:	2330      	movs	r3, #48	; 0x30
 8000726:	001a      	movs	r2, r3
 8000728:	2100      	movs	r1, #0
 800072a:	f009 f97c 	bl	8009a26 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800072e:	003b      	movs	r3, r7
 8000730:	0018      	movs	r0, r3
 8000732:	2310      	movs	r3, #16
 8000734:	001a      	movs	r2, r3
 8000736:	2100      	movs	r1, #0
 8000738:	f009 f975 	bl	8009a26 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073c:	0021      	movs	r1, r4
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2202      	movs	r2, #2
 8000742:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2201      	movs	r2, #1
 8000748:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2210      	movs	r2, #16
 800074e:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2202      	movs	r2, #2
 8000754:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	0212      	lsls	r2, r2, #8
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2280      	movs	r2, #128	; 0x80
 8000762:	0352      	lsls	r2, r2, #13
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800076c:	187b      	adds	r3, r7, r1
 800076e:	0018      	movs	r0, r3
 8000770:	f001 fea6 	bl	80024c0 <HAL_RCC_OscConfig>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x64>
		Error_Handler();
 8000778:	f001 fab8 	bl	8001cec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800077c:	003b      	movs	r3, r7
 800077e:	2207      	movs	r2, #7
 8000780:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000782:	003b      	movs	r3, r7
 8000784:	2202      	movs	r2, #2
 8000786:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	003b      	movs	r3, r7
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078e:	003b      	movs	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000794:	003b      	movs	r3, r7
 8000796:	2101      	movs	r1, #1
 8000798:	0018      	movs	r0, r3
 800079a:	f002 f9af 	bl	8002afc <HAL_RCC_ClockConfig>
 800079e:	1e03      	subs	r3, r0, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x8e>
		Error_Handler();
 80007a2:	f001 faa3 	bl	8001cec <Error_Handler>
	}
}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b011      	add	sp, #68	; 0x44
 80007ac:	bd90      	pop	{r4, r7, pc}
	...

080007b0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_SPI1_Init+0x74>)
 80007b6:	4a1c      	ldr	r2, [pc, #112]	; (8000828 <MX_SPI1_Init+0x78>)
 80007b8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <MX_SPI1_Init+0x74>)
 80007bc:	2282      	movs	r2, #130	; 0x82
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_SPI1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_SPI1_Init+0x74>)
 80007ca:	22e0      	movs	r2, #224	; 0xe0
 80007cc:	00d2      	lsls	r2, r2, #3
 80007ce:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_SPI1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_SPI1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_SPI1_Init+0x74>)
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	0092      	lsls	r2, r2, #2
 80007e2:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_SPI1_Init+0x74>)
 80007e6:	2230      	movs	r2, #48	; 0x30
 80007e8:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_SPI1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_SPI1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_SPI1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_SPI1_Init+0x74>)
 80007fe:	2207      	movs	r2, #7
 8000800:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_SPI1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_SPI1_Init+0x74>)
 800080a:	2208      	movs	r2, #8
 800080c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <MX_SPI1_Init+0x74>)
 8000810:	0018      	movs	r0, r3
 8000812:	f002 faf1 	bl	8002df8 <HAL_SPI_Init>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <MX_SPI1_Init+0x6e>
		Error_Handler();
 800081a:	f001 fa67 	bl	8001cec <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200003dc 	.word	0x200003dc
 8000828:	40013000 	.word	0x40013000

0800082c <USART2_IRQHandler>:

/* USER CODE BEGIN 4 */

void USART2_IRQHandler() {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
	uint8_t chr;
//	USART_WRITE(USART2, "Hello\n", 6);
	if (USART2->ISR & USART_ISR_RXNE) {
 8000832:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <USART2_IRQHandler+0x94>)
 8000834:	69db      	ldr	r3, [r3, #28]
 8000836:	2220      	movs	r2, #32
 8000838:	4013      	ands	r3, r2
 800083a:	d03c      	beq.n	80008b6 <USART2_IRQHandler+0x8a>
		chr = USART2->RDR;
 800083c:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <USART2_IRQHandler+0x94>)
 800083e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000840:	b29a      	uxth	r2, r3
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	701a      	strb	r2, [r3, #0]
		if (chr == '\n' || idx > 19) {
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b0a      	cmp	r3, #10
 800084c:	d003      	beq.n	8000856 <USART2_IRQHandler+0x2a>
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <USART2_IRQHandler+0x98>)
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	2b13      	cmp	r3, #19
 8000854:	d922      	bls.n	800089c <USART2_IRQHandler+0x70>
//			USART_WRITE(USART3, chArray, idx);
//			USART_WRITE(USART3, '\n', 1);
			strcpy(placeHolder, chArray);
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <USART2_IRQHandler+0x9c>)
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <USART2_IRQHandler+0xa0>)
 800085a:	0011      	movs	r1, r2
 800085c:	0018      	movs	r0, r3
 800085e:	f009 fa09 	bl	8009c74 <strcpy>
			USART_WRITE(USART2, placeHolder, strlen(placeHolder));
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <USART2_IRQHandler+0xa0>)
 8000864:	0018      	movs	r0, r3
 8000866:	f7ff fc4f 	bl	8000108 <strlen>
 800086a:	0002      	movs	r2, r0
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <USART2_IRQHandler+0xa0>)
 800086e:	4814      	ldr	r0, [pc, #80]	; (80008c0 <USART2_IRQHandler+0x94>)
 8000870:	0019      	movs	r1, r3
 8000872:	f004 fedd 	bl	8005630 <USART_WRITE>
			USART_WRITE(USART2, '\n', 1);
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <USART2_IRQHandler+0x94>)
 8000878:	2201      	movs	r2, #1
 800087a:	210a      	movs	r1, #10
 800087c:	0018      	movs	r0, r3
 800087e:	f004 fed7 	bl	8005630 <USART_WRITE>
			cmdrecFlag = true;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <USART2_IRQHandler+0xa4>)
 8000884:	2201      	movs	r2, #1
 8000886:	701a      	strb	r2, [r3, #0]
			idx = 0;
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <USART2_IRQHandler+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	801a      	strh	r2, [r3, #0]
			memset(chArray, 0, 20);
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <USART2_IRQHandler+0x9c>)
 8000890:	2214      	movs	r2, #20
 8000892:	2100      	movs	r1, #0
 8000894:	0018      	movs	r0, r3
 8000896:	f009 f8c6 	bl	8009a26 <memset>
		} else {
			chArray[idx] = chr;
			idx++;
		}
	}
}
 800089a:	e00c      	b.n	80008b6 <USART2_IRQHandler+0x8a>
			chArray[idx] = chr;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <USART2_IRQHandler+0x98>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	0019      	movs	r1, r3
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <USART2_IRQHandler+0x9c>)
 80008a4:	1dfa      	adds	r2, r7, #7
 80008a6:	7812      	ldrb	r2, [r2, #0]
 80008a8:	545a      	strb	r2, [r3, r1]
			idx++;
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <USART2_IRQHandler+0x98>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	3301      	adds	r3, #1
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <USART2_IRQHandler+0x98>)
 80008b4:	801a      	strh	r2, [r3, #0]
}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	40004400 	.word	0x40004400
 80008c4:	2000048c 	.word	0x2000048c
 80008c8:	20000464 	.word	0x20000464
 80008cc:	20000498 	.word	0x20000498
 80008d0:	200004fd 	.word	0x200004fd

080008d4 <USART3_4_IRQHandler>:

void USART3_4_IRQHandler() {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
	uint8_t chr;
	if (USART3->ISR & USART_ISR_RXNE) {
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <USART3_4_IRQHandler+0x7c>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	2220      	movs	r2, #32
 80008e0:	4013      	ands	r3, r2
 80008e2:	d031      	beq.n	8000948 <USART3_4_IRQHandler+0x74>
		chr = USART3->RDR;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <USART3_4_IRQHandler+0x7c>)
 80008e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	701a      	strb	r2, [r3, #0]
		if (chr == '\n' || idx > 19) {
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b0a      	cmp	r3, #10
 80008f4:	d003      	beq.n	80008fe <USART3_4_IRQHandler+0x2a>
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <USART3_4_IRQHandler+0x80>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	2b13      	cmp	r3, #19
 80008fc:	d917      	bls.n	800092e <USART3_4_IRQHandler+0x5a>
			USART_WRITE(USART2, chArray2, idx);
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <USART3_4_IRQHandler+0x80>)
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	001a      	movs	r2, r3
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <USART3_4_IRQHandler+0x84>)
 8000906:	4815      	ldr	r0, [pc, #84]	; (800095c <USART3_4_IRQHandler+0x88>)
 8000908:	0019      	movs	r1, r3
 800090a:	f004 fe91 	bl	8005630 <USART_WRITE>
			USART_WRITE(USART2, '\n', 1);
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <USART3_4_IRQHandler+0x88>)
 8000910:	2201      	movs	r2, #1
 8000912:	210a      	movs	r1, #10
 8000914:	0018      	movs	r0, r3
 8000916:	f004 fe8b 	bl	8005630 <USART_WRITE>
			idx = 0;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <USART3_4_IRQHandler+0x80>)
 800091c:	2200      	movs	r2, #0
 800091e:	801a      	strh	r2, [r3, #0]
			memset(chArray2, 0, 20);
 8000920:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <USART3_4_IRQHandler+0x84>)
 8000922:	2214      	movs	r2, #20
 8000924:	2100      	movs	r1, #0
 8000926:	0018      	movs	r0, r3
 8000928:	f009 f87d 	bl	8009a26 <memset>
		} else {
			chArray2[idx] = chr;
			idx++;
		}
	}
}
 800092c:	e00c      	b.n	8000948 <USART3_4_IRQHandler+0x74>
			chArray2[idx] = chr;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <USART3_4_IRQHandler+0x80>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	0019      	movs	r1, r3
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <USART3_4_IRQHandler+0x84>)
 8000936:	1dfa      	adds	r2, r7, #7
 8000938:	7812      	ldrb	r2, [r2, #0]
 800093a:	545a      	strb	r2, [r3, r1]
			idx++;
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <USART3_4_IRQHandler+0x80>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	b29a      	uxth	r2, r3
 8000944:	4b03      	ldr	r3, [pc, #12]	; (8000954 <USART3_4_IRQHandler+0x80>)
 8000946:	801a      	strh	r2, [r3, #0]
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b002      	add	sp, #8
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40004800 	.word	0x40004800
 8000954:	2000048c 	.word	0x2000048c
 8000958:	20000478 	.word	0x20000478
 800095c:	40004400 	.word	0x40004400

08000960 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler() {
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	if (gpio_IT_CHK(8)) {
 8000964:	2008      	movs	r0, #8
 8000966:	f004 fa03 	bl	8004d70 <gpio_IT_CHK>
 800096a:	1e03      	subs	r3, r0, #0
 800096c:	d006      	beq.n	800097c <EXTI4_15_IRQHandler+0x1c>
		button1Flag = true;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <EXTI4_15_IRQHandler+0x50>)
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
		gpio_IT_CLR(8);
 8000974:	2008      	movs	r0, #8
 8000976:	f004 fa13 	bl	8004da0 <gpio_IT_CLR>
		gpio_IT_CLR(9);
	} else if (gpio_IT_CHK(12)) {
		button3Flag = true;
		gpio_IT_CLR(9);
	}
}
 800097a:	e016      	b.n	80009aa <EXTI4_15_IRQHandler+0x4a>
	} else if (gpio_IT_CHK(11)) {
 800097c:	200b      	movs	r0, #11
 800097e:	f004 f9f7 	bl	8004d70 <gpio_IT_CHK>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d006      	beq.n	8000994 <EXTI4_15_IRQHandler+0x34>
		button2Flag = true;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <EXTI4_15_IRQHandler+0x54>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
		gpio_IT_CLR(9);
 800098c:	2009      	movs	r0, #9
 800098e:	f004 fa07 	bl	8004da0 <gpio_IT_CLR>
}
 8000992:	e00a      	b.n	80009aa <EXTI4_15_IRQHandler+0x4a>
	} else if (gpio_IT_CHK(12)) {
 8000994:	200c      	movs	r0, #12
 8000996:	f004 f9eb 	bl	8004d70 <gpio_IT_CHK>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d005      	beq.n	80009aa <EXTI4_15_IRQHandler+0x4a>
		button3Flag = true;
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <EXTI4_15_IRQHandler+0x58>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
		gpio_IT_CLR(9);
 80009a4:	2009      	movs	r0, #9
 80009a6:	f004 f9fb 	bl	8004da0 <gpio_IT_CLR>
}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000045c 	.word	0x2000045c
 80009b4:	2000045d 	.word	0x2000045d
 80009b8:	2000045e 	.word	0x2000045e

080009bc <drawScale>:

void drawScale() {
 80009bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
	uint16_t frontX, midX, backX;
	uint16_t posY1, posY2, lineSize1, lineSize2, lineSize3;
	frontX = 20;
 80009c2:	2114      	movs	r1, #20
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2214      	movs	r2, #20
 80009c8:	801a      	strh	r2, [r3, #0]
	midX = 115;
 80009ca:	2312      	movs	r3, #18
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	2273      	movs	r2, #115	; 0x73
 80009d0:	801a      	strh	r2, [r3, #0]
	backX = 209;
 80009d2:	2210      	movs	r2, #16
 80009d4:	18bb      	adds	r3, r7, r2
 80009d6:	22d1      	movs	r2, #209	; 0xd1
 80009d8:	801a      	strh	r2, [r3, #0]
	posY1 = 150;
 80009da:	250e      	movs	r5, #14
 80009dc:	197b      	adds	r3, r7, r5
 80009de:	2296      	movs	r2, #150	; 0x96
 80009e0:	801a      	strh	r2, [r3, #0]
	posY2 = 190;
 80009e2:	260c      	movs	r6, #12
 80009e4:	19bb      	adds	r3, r7, r6
 80009e6:	22be      	movs	r2, #190	; 0xbe
 80009e8:	801a      	strh	r2, [r3, #0]
	lineSize1 = 10;
 80009ea:	240a      	movs	r4, #10
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	220a      	movs	r2, #10
 80009f0:	801a      	strh	r2, [r3, #0]
	lineSize2 = 7;
 80009f2:	2008      	movs	r0, #8
 80009f4:	183b      	adds	r3, r7, r0
 80009f6:	2207      	movs	r2, #7
 80009f8:	801a      	strh	r2, [r3, #0]
	lineSize3 = 5;
 80009fa:	1dbb      	adds	r3, r7, #6
 80009fc:	2205      	movs	r2, #5
 80009fe:	801a      	strh	r2, [r3, #0]

	LCD_DrawFastVLine(frontX, posY1 - 11, lineSize1, BLACK);
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2000      	movs	r0, #0
 8000a04:	5e18      	ldrsh	r0, [r3, r0]
 8000a06:	197b      	adds	r3, r7, r5
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	3b0b      	subs	r3, #11
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	b219      	sxth	r1, r3
 8000a10:	193b      	adds	r3, r7, r4
 8000a12:	2200      	movs	r2, #0
 8000a14:	5e9a      	ldrsh	r2, [r3, r2]
 8000a16:	2300      	movs	r3, #0
 8000a18:	f005 fadc 	bl	8005fd4 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(frontX, posY2 - 11, lineSize1, BLACK);
 8000a1c:	2114      	movs	r1, #20
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2100      	movs	r1, #0
 8000a22:	5e58      	ldrsh	r0, [r3, r1]
 8000a24:	19bb      	adds	r3, r7, r6
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	3b0b      	subs	r3, #11
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	b219      	sxth	r1, r3
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	2200      	movs	r2, #0
 8000a32:	5e9a      	ldrsh	r2, [r3, r2]
 8000a34:	2300      	movs	r3, #0
 8000a36:	f005 facd 	bl	8005fd4 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(midX, posY1 - 11, lineSize1, BLACK);
 8000a3a:	2312      	movs	r3, #18
 8000a3c:	18fb      	adds	r3, r7, r3
 8000a3e:	2100      	movs	r1, #0
 8000a40:	5e58      	ldrsh	r0, [r3, r1]
 8000a42:	197b      	adds	r3, r7, r5
 8000a44:	881b      	ldrh	r3, [r3, #0]
 8000a46:	3b0b      	subs	r3, #11
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	b219      	sxth	r1, r3
 8000a4c:	193b      	adds	r3, r7, r4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	5e9a      	ldrsh	r2, [r3, r2]
 8000a52:	2300      	movs	r3, #0
 8000a54:	f005 fabe 	bl	8005fd4 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(midX, posY2 - 11, lineSize1, BLACK);
 8000a58:	2312      	movs	r3, #18
 8000a5a:	18fb      	adds	r3, r7, r3
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	5e18      	ldrsh	r0, [r3, r0]
 8000a60:	19bb      	adds	r3, r7, r6
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	3b0b      	subs	r3, #11
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	b219      	sxth	r1, r3
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	5e9a      	ldrsh	r2, [r3, r2]
 8000a70:	2300      	movs	r3, #0
 8000a72:	f005 faaf 	bl	8005fd4 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(backX, posY1 - 11, lineSize1, BLACK);
 8000a76:	2210      	movs	r2, #16
 8000a78:	18bb      	adds	r3, r7, r2
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	5e18      	ldrsh	r0, [r3, r0]
 8000a7e:	197b      	adds	r3, r7, r5
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	3b0b      	subs	r3, #11
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	b219      	sxth	r1, r3
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	5e9a      	ldrsh	r2, [r3, r2]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f005 faa0 	bl	8005fd4 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(backX, posY2 - 11, lineSize1, BLACK);
 8000a94:	2210      	movs	r2, #16
 8000a96:	18bb      	adds	r3, r7, r2
 8000a98:	2000      	movs	r0, #0
 8000a9a:	5e18      	ldrsh	r0, [r3, r0]
 8000a9c:	19bb      	adds	r3, r7, r6
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	3b0b      	subs	r3, #11
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	b219      	sxth	r1, r3
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	5e9a      	ldrsh	r2, [r3, r2]
 8000aac:	2300      	movs	r3, #0
 8000aae:	f005 fa91 	bl	8005fd4 <LCD_DrawFastVLine>

	for (uint8_t i = 1; i < 3; i++) {
 8000ab2:	2317      	movs	r3, #23
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
 8000aba:	e068      	b.n	8000b8e <drawScale+0x1d2>
		LCD_DrawFastVLine(frontX + 31 * i, posY1 - 8, lineSize2, BLACK);
 8000abc:	2417      	movs	r4, #23
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	1c1a      	adds	r2, r3, #0
 8000ac6:	0152      	lsls	r2, r2, #5
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	2614      	movs	r6, #20
 8000ace:	19bb      	adds	r3, r7, r6
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	18d3      	adds	r3, r2, r3
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	b218      	sxth	r0, r3
 8000ad8:	230e      	movs	r3, #14
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	3b08      	subs	r3, #8
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b219      	sxth	r1, r3
 8000ae4:	2508      	movs	r5, #8
 8000ae6:	197b      	adds	r3, r7, r5
 8000ae8:	2200      	movs	r2, #0
 8000aea:	5e9a      	ldrsh	r2, [r3, r2]
 8000aec:	2300      	movs	r3, #0
 8000aee:	f005 fa71 	bl	8005fd4 <LCD_DrawFastVLine>
		LCD_DrawFastVLine(frontX + 31 * i, posY2 - 8, lineSize2, BLACK);
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	1c1a      	adds	r2, r3, #0
 8000afa:	0152      	lsls	r2, r2, #5
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	19bb      	adds	r3, r7, r6
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	18d3      	adds	r3, r2, r3
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	b218      	sxth	r0, r3
 8000b0a:	260c      	movs	r6, #12
 8000b0c:	19bb      	adds	r3, r7, r6
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	3b08      	subs	r3, #8
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	b219      	sxth	r1, r3
 8000b16:	197b      	adds	r3, r7, r5
 8000b18:	2200      	movs	r2, #0
 8000b1a:	5e9a      	ldrsh	r2, [r3, r2]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f005 fa59 	bl	8005fd4 <LCD_DrawFastVLine>
		LCD_DrawFastVLine(midX + 31 * i, posY1 - 8, lineSize2, BLACK);
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	1c1a      	adds	r2, r3, #0
 8000b2a:	0152      	lsls	r2, r2, #5
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	2112      	movs	r1, #18
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	18d3      	adds	r3, r2, r3
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	b218      	sxth	r0, r3
 8000b3c:	230e      	movs	r3, #14
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	3b08      	subs	r3, #8
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	b219      	sxth	r1, r3
 8000b48:	197b      	adds	r3, r7, r5
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	5e9a      	ldrsh	r2, [r3, r2]
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f005 fa40 	bl	8005fd4 <LCD_DrawFastVLine>
		LCD_DrawFastVLine(midX + 31 * i, posY2 - 8, lineSize2, BLACK);
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	1c1a      	adds	r2, r3, #0
 8000b5c:	0152      	lsls	r2, r2, #5
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	2112      	movs	r1, #18
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	18d3      	adds	r3, r2, r3
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	b218      	sxth	r0, r3
 8000b6e:	19bb      	adds	r3, r7, r6
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	3b08      	subs	r3, #8
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	b219      	sxth	r1, r3
 8000b78:	197b      	adds	r3, r7, r5
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	5e9a      	ldrsh	r2, [r3, r2]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f005 fa28 	bl	8005fd4 <LCD_DrawFastVLine>
	for (uint8_t i = 1; i < 3; i++) {
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	781a      	ldrb	r2, [r3, #0]
 8000b88:	193b      	adds	r3, r7, r4
 8000b8a:	3201      	adds	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	2317      	movs	r3, #23
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d991      	bls.n	8000abc <drawScale+0x100>
	}

	for (uint8_t i = 1; i < 5; i++) {
 8000b98:	2316      	movs	r3, #22
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	e148      	b.n	8000e34 <drawScale+0x478>
		LCD_DrawFastVLine(frontX + 6 * i, posY1 - 6, lineSize3, BLACK);
 8000ba2:	2416      	movs	r4, #22
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	1c1a      	adds	r2, r3, #0
 8000bac:	1c13      	adds	r3, r2, #0
 8000bae:	18db      	adds	r3, r3, r3
 8000bb0:	189b      	adds	r3, r3, r2
 8000bb2:	18db      	adds	r3, r3, r3
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	2514      	movs	r5, #20
 8000bb8:	197b      	adds	r3, r7, r5
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	18d3      	adds	r3, r2, r3
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	b218      	sxth	r0, r3
 8000bc2:	260e      	movs	r6, #14
 8000bc4:	19bb      	adds	r3, r7, r6
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	3b06      	subs	r3, #6
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	b219      	sxth	r1, r3
 8000bce:	1dbb      	adds	r3, r7, #6
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	5e9a      	ldrsh	r2, [r3, r2]
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f005 f9fd 	bl	8005fd4 <LCD_DrawFastVLine>
		LCD_DrawFastVLine(frontX + 31 + 6 * i, posY1 - 6, lineSize3, BLACK);
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	1c1a      	adds	r2, r3, #0
 8000be2:	1c13      	adds	r3, r2, #0
 8000be4:	18db      	adds	r3, r3, r3
 8000be6:	189b      	adds	r3, r3, r2
 8000be8:	18db      	adds	r3, r3, r3
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	197b      	adds	r3, r7, r5
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	18d3      	adds	r3, r2, r3
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	331f      	adds	r3, #31
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	b218      	sxth	r0, r3
 8000bfa:	19bb      	adds	r3, r7, r6
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	3b06      	subs	r3, #6
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	b219      	sxth	r1, r3
 8000c04:	1dbb      	adds	r3, r7, #6
 8000c06:	2200      	movs	r2, #0
 8000c08:	5e9a      	ldrsh	r2, [r3, r2]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f005 f9e2 	bl	8005fd4 <LCD_DrawFastVLine>
		LCD_DrawFastVLine(frontX + 61 + 6 * i, posY1 - 6, lineSize3, BLACK);
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	1c1a      	adds	r2, r3, #0
 8000c18:	1c13      	adds	r3, r2, #0
 8000c1a:	18db      	adds	r3, r3, r3
 8000c1c:	189b      	adds	r3, r3, r2
 8000c1e:	18db      	adds	r3, r3, r3
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	197b      	adds	r3, r7, r5
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	18d3      	adds	r3, r2, r3
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	333d      	adds	r3, #61	; 0x3d
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b218      	sxth	r0, r3
 8000c30:	19bb      	adds	r3, r7, r6
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	3b06      	subs	r3, #6
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	b219      	sxth	r1, r3
 8000c3a:	1dbb      	adds	r3, r7, #6
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	5e9a      	ldrsh	r2, [r3, r2]
 8000c40:	2300      	movs	r3, #0
 8000c42:	f005 f9c7 	bl	8005fd4 <LCD_DrawFastVLine>

		LCD_DrawFastVLine(midX + 6 * i, posY1 - 6, lineSize3, BLACK);
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	1c1a      	adds	r2, r3, #0
 8000c4e:	1c13      	adds	r3, r2, #0
 8000c50:	18db      	adds	r3, r3, r3
 8000c52:	189b      	adds	r3, r3, r2
 8000c54:	18db      	adds	r3, r3, r3
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	2312      	movs	r3, #18
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	18d3      	adds	r3, r2, r3
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	b218      	sxth	r0, r3
 8000c64:	19bb      	adds	r3, r7, r6
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	3b06      	subs	r3, #6
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	b219      	sxth	r1, r3
 8000c6e:	1dbb      	adds	r3, r7, #6
 8000c70:	2200      	movs	r2, #0
 8000c72:	5e9a      	ldrsh	r2, [r3, r2]
 8000c74:	2300      	movs	r3, #0
 8000c76:	f005 f9ad 	bl	8005fd4 <LCD_DrawFastVLine>
		LCD_DrawFastVLine(midX + 31 + 6 * i, posY1 - 6, lineSize3, BLACK);
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	1c1a      	adds	r2, r3, #0
 8000c82:	1c13      	adds	r3, r2, #0
 8000c84:	18db      	adds	r3, r3, r3
 8000c86:	189b      	adds	r3, r3, r2
 8000c88:	18db      	adds	r3, r3, r3
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	2312      	movs	r3, #18
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	18d3      	adds	r3, r2, r3
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	331f      	adds	r3, #31
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	b218      	sxth	r0, r3
 8000c9c:	19bb      	adds	r3, r7, r6
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	3b06      	subs	r3, #6
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	b219      	sxth	r1, r3
 8000ca6:	1dbb      	adds	r3, r7, #6
 8000ca8:	2200      	movs	r2, #0
 8000caa:	5e9a      	ldrsh	r2, [r3, r2]
 8000cac:	2300      	movs	r3, #0
 8000cae:	f005 f991 	bl	8005fd4 <LCD_DrawFastVLine>
		LCD_DrawFastVLine(midX + 61 + 6 * i, posY1 - 6, lineSize3, BLACK);
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	1c1a      	adds	r2, r3, #0
 8000cba:	1c13      	adds	r3, r2, #0
 8000cbc:	18db      	adds	r3, r3, r3
 8000cbe:	189b      	adds	r3, r3, r2
 8000cc0:	18db      	adds	r3, r3, r3
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	2312      	movs	r3, #18
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	18d3      	adds	r3, r2, r3
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	333d      	adds	r3, #61	; 0x3d
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	b218      	sxth	r0, r3
 8000cd4:	19bb      	adds	r3, r7, r6
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	3b06      	subs	r3, #6
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	b219      	sxth	r1, r3
 8000cde:	1dbb      	adds	r3, r7, #6
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	5f9a      	ldrsh	r2, [r3, r6]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f005 f975 	bl	8005fd4 <LCD_DrawFastVLine>

		LCD_DrawFastVLine(frontX + 6 * i, posY2 - 6, lineSize3, BLACK);
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	1c1a      	adds	r2, r3, #0
 8000cf2:	1c13      	adds	r3, r2, #0
 8000cf4:	18db      	adds	r3, r3, r3
 8000cf6:	189b      	adds	r3, r3, r2
 8000cf8:	18db      	adds	r3, r3, r3
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	197b      	adds	r3, r7, r5
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	18d3      	adds	r3, r2, r3
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	b218      	sxth	r0, r3
 8000d06:	260c      	movs	r6, #12
 8000d08:	19bb      	adds	r3, r7, r6
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	3b06      	subs	r3, #6
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	b219      	sxth	r1, r3
 8000d12:	1dbb      	adds	r3, r7, #6
 8000d14:	2200      	movs	r2, #0
 8000d16:	5e9a      	ldrsh	r2, [r3, r2]
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f005 f95b 	bl	8005fd4 <LCD_DrawFastVLine>
		LCD_DrawFastVLine(frontX + 31 + 6 * i, posY2 - 6, lineSize3, BLACK);
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	1c1a      	adds	r2, r3, #0
 8000d26:	1c13      	adds	r3, r2, #0
 8000d28:	18db      	adds	r3, r3, r3
 8000d2a:	189b      	adds	r3, r3, r2
 8000d2c:	18db      	adds	r3, r3, r3
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	197b      	adds	r3, r7, r5
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	18d3      	adds	r3, r2, r3
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	331f      	adds	r3, #31
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	b218      	sxth	r0, r3
 8000d3e:	19bb      	adds	r3, r7, r6
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	3b06      	subs	r3, #6
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	b219      	sxth	r1, r3
 8000d48:	1dbb      	adds	r3, r7, #6
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	5e9a      	ldrsh	r2, [r3, r2]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f005 f940 	bl	8005fd4 <LCD_DrawFastVLine>
		LCD_DrawFastVLine(frontX + 61 + 6 * i, posY2 - 6, lineSize3, BLACK);
 8000d54:	193b      	adds	r3, r7, r4
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	1c1a      	adds	r2, r3, #0
 8000d5c:	1c13      	adds	r3, r2, #0
 8000d5e:	18db      	adds	r3, r3, r3
 8000d60:	189b      	adds	r3, r3, r2
 8000d62:	18db      	adds	r3, r3, r3
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	197b      	adds	r3, r7, r5
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	18d3      	adds	r3, r2, r3
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	333d      	adds	r3, #61	; 0x3d
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	b218      	sxth	r0, r3
 8000d74:	19bb      	adds	r3, r7, r6
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	3b06      	subs	r3, #6
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	b219      	sxth	r1, r3
 8000d7e:	1dbb      	adds	r3, r7, #6
 8000d80:	2200      	movs	r2, #0
 8000d82:	5e9a      	ldrsh	r2, [r3, r2]
 8000d84:	2300      	movs	r3, #0
 8000d86:	f005 f925 	bl	8005fd4 <LCD_DrawFastVLine>

		LCD_DrawFastVLine(midX + 6 * i, posY2 - 6, lineSize3, BLACK);
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	1c1a      	adds	r2, r3, #0
 8000d92:	1c13      	adds	r3, r2, #0
 8000d94:	18db      	adds	r3, r3, r3
 8000d96:	189b      	adds	r3, r3, r2
 8000d98:	18db      	adds	r3, r3, r3
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	2512      	movs	r5, #18
 8000d9e:	197b      	adds	r3, r7, r5
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	18d3      	adds	r3, r2, r3
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	b218      	sxth	r0, r3
 8000da8:	19bb      	adds	r3, r7, r6
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	3b06      	subs	r3, #6
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	b219      	sxth	r1, r3
 8000db2:	1dbb      	adds	r3, r7, #6
 8000db4:	2200      	movs	r2, #0
 8000db6:	5e9a      	ldrsh	r2, [r3, r2]
 8000db8:	2300      	movs	r3, #0
 8000dba:	f005 f90b 	bl	8005fd4 <LCD_DrawFastVLine>
		LCD_DrawFastVLine(midX + 31 + 6 * i, posY2 - 6, lineSize3, BLACK);
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	1c1a      	adds	r2, r3, #0
 8000dc6:	1c13      	adds	r3, r2, #0
 8000dc8:	18db      	adds	r3, r3, r3
 8000dca:	189b      	adds	r3, r3, r2
 8000dcc:	18db      	adds	r3, r3, r3
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	197b      	adds	r3, r7, r5
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	18d3      	adds	r3, r2, r3
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	331f      	adds	r3, #31
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	b218      	sxth	r0, r3
 8000dde:	19bb      	adds	r3, r7, r6
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	3b06      	subs	r3, #6
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	b219      	sxth	r1, r3
 8000de8:	1dbb      	adds	r3, r7, #6
 8000dea:	2200      	movs	r2, #0
 8000dec:	5e9a      	ldrsh	r2, [r3, r2]
 8000dee:	2300      	movs	r3, #0
 8000df0:	f005 f8f0 	bl	8005fd4 <LCD_DrawFastVLine>
		LCD_DrawFastVLine(midX + 61 + 6 * i, posY2 - 6, lineSize3, BLACK);
 8000df4:	193b      	adds	r3, r7, r4
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	1c1a      	adds	r2, r3, #0
 8000dfc:	1c13      	adds	r3, r2, #0
 8000dfe:	18db      	adds	r3, r3, r3
 8000e00:	189b      	adds	r3, r3, r2
 8000e02:	18db      	adds	r3, r3, r3
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	197b      	adds	r3, r7, r5
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	18d3      	adds	r3, r2, r3
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	333d      	adds	r3, #61	; 0x3d
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	b218      	sxth	r0, r3
 8000e14:	19bb      	adds	r3, r7, r6
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	3b06      	subs	r3, #6
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	b219      	sxth	r1, r3
 8000e1e:	1dbb      	adds	r3, r7, #6
 8000e20:	2200      	movs	r2, #0
 8000e22:	5e9a      	ldrsh	r2, [r3, r2]
 8000e24:	2300      	movs	r3, #0
 8000e26:	f005 f8d5 	bl	8005fd4 <LCD_DrawFastVLine>
	for (uint8_t i = 1; i < 5; i++) {
 8000e2a:	193b      	adds	r3, r7, r4
 8000e2c:	781a      	ldrb	r2, [r3, #0]
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	3201      	adds	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	2316      	movs	r3, #22
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	d800      	bhi.n	8000e40 <drawScale+0x484>
 8000e3e:	e6b0      	b.n	8000ba2 <drawScale+0x1e6>
	}

	LCD_SetTextSize(1);
 8000e40:	2001      	movs	r0, #1
 8000e42:	f006 faed 	bl	8007420 <LCD_SetTextSize>
	LCD_SetTextColor(BLACK, YELLOW);
 8000e46:	4b35      	ldr	r3, [pc, #212]	; (8000f1c <drawScale+0x560>)
 8000e48:	0019      	movs	r1, r3
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f006 fafe 	bl	800744c <LCD_SetTextColor>
	LCD_SetCursor(midX - 15, posY1 + 23);
 8000e50:	2512      	movs	r5, #18
 8000e52:	197b      	adds	r3, r7, r5
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	3b0f      	subs	r3, #15
 8000e58:	001a      	movs	r2, r3
 8000e5a:	240e      	movs	r4, #14
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	3317      	adds	r3, #23
 8000e62:	0019      	movs	r1, r3
 8000e64:	0010      	movs	r0, r2
 8000e66:	f006 fac5 	bl	80073f4 <LCD_SetCursor>
	LCD_Printf(B3_dispStr[0]);
 8000e6a:	4b2d      	ldr	r3, [pc, #180]	; (8000f20 <drawScale+0x564>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f006 f9c4 	bl	80071fc <LCD_Printf>
	LCD_SetCursor(midX - 10, posY2 + 23);
 8000e74:	197b      	adds	r3, r7, r5
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	3b0a      	subs	r3, #10
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	250c      	movs	r5, #12
 8000e7e:	197b      	adds	r3, r7, r5
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	3317      	adds	r3, #23
 8000e84:	0019      	movs	r1, r3
 8000e86:	0010      	movs	r0, r2
 8000e88:	f006 fab4 	bl	80073f4 <LCD_SetCursor>
	LCD_Printf(B3_dispStr[1]);
 8000e8c:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <drawScale+0x564>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	0018      	movs	r0, r3
 8000e92:	f006 f9b3 	bl	80071fc <LCD_Printf>
	LCD_SetCursor(frontX - 10, posY1 + 23);
 8000e96:	2614      	movs	r6, #20
 8000e98:	19bb      	adds	r3, r7, r6
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	3b0a      	subs	r3, #10
 8000e9e:	001a      	movs	r2, r3
 8000ea0:	193b      	adds	r3, r7, r4
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	3317      	adds	r3, #23
 8000ea6:	0019      	movs	r1, r3
 8000ea8:	0010      	movs	r0, r2
 8000eaa:	f006 faa3 	bl	80073f4 <LCD_SetCursor>
	LCD_Printf("-100");
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <drawScale+0x568>)
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f006 f9a3 	bl	80071fc <LCD_Printf>
	LCD_SetCursor(backX - 15, posY1 + 23);
 8000eb6:	2310      	movs	r3, #16
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	3b0f      	subs	r3, #15
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	193b      	adds	r3, r7, r4
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	3317      	adds	r3, #23
 8000ec6:	0019      	movs	r1, r3
 8000ec8:	0010      	movs	r0, r2
 8000eca:	f006 fa93 	bl	80073f4 <LCD_SetCursor>
	LCD_Printf("+100");
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <drawScale+0x56c>)
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f006 f993 	bl	80071fc <LCD_Printf>
	LCD_SetCursor(frontX - 10, posY2 + 23);
 8000ed6:	19bb      	adds	r3, r7, r6
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	3b0a      	subs	r3, #10
 8000edc:	001a      	movs	r2, r3
 8000ede:	197b      	adds	r3, r7, r5
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	3317      	adds	r3, #23
 8000ee4:	0019      	movs	r1, r3
 8000ee6:	0010      	movs	r0, r2
 8000ee8:	f006 fa84 	bl	80073f4 <LCD_SetCursor>
	LCD_Printf("-100");
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <drawScale+0x568>)
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f006 f984 	bl	80071fc <LCD_Printf>
	LCD_SetCursor(backX - 15, posY2 + 23);
 8000ef4:	2310      	movs	r3, #16
 8000ef6:	18fb      	adds	r3, r7, r3
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	3b0f      	subs	r3, #15
 8000efc:	001a      	movs	r2, r3
 8000efe:	197b      	adds	r3, r7, r5
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	3317      	adds	r3, #23
 8000f04:	0019      	movs	r1, r3
 8000f06:	0010      	movs	r0, r2
 8000f08:	f006 fa74 	bl	80073f4 <LCD_SetCursor>
	LCD_Printf("+100");
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <drawScale+0x56c>)
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f006 f974 	bl	80071fc <LCD_Printf>

}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b007      	add	sp, #28
 8000f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f1c:	0000ffe0 	.word	0x0000ffe0
 8000f20:	20000020 	.word	0x20000020
 8000f24:	0800a584 	.word	0x0800a584
 8000f28:	0800a58c 	.word	0x0800a58c

08000f2c <drawCMDBox>:

void drawCMDBox() {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af08      	add	r7, sp, #32
	LCD_DrawRoundRect(10, 10, 180, 119, 2, LIGHTGRAY);
 8000f32:	4b5c      	ldr	r3, [pc, #368]	; (80010a4 <drawCMDBox+0x178>)
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	2302      	movs	r3, #2
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2377      	movs	r3, #119	; 0x77
 8000f3c:	22b4      	movs	r2, #180	; 0xb4
 8000f3e:	210a      	movs	r1, #10
 8000f40:	200a      	movs	r0, #10
 8000f42:	f005 f8d2 	bl	80060ea <LCD_DrawRoundRect>
	LCD_DrawButton1("COMMAND", 135, 15, 50, 17, 2, LIGHTGRAY, BLACK, 0, 5, 5,
 8000f46:	4858      	ldr	r0, [pc, #352]	; (80010a8 <drawCMDBox+0x17c>)
 8000f48:	2301      	movs	r3, #1
 8000f4a:	9307      	str	r3, [sp, #28]
 8000f4c:	2305      	movs	r3, #5
 8000f4e:	9306      	str	r3, [sp, #24]
 8000f50:	2305      	movs	r3, #5
 8000f52:	9305      	str	r3, [sp, #20]
 8000f54:	2300      	movs	r3, #0
 8000f56:	9304      	str	r3, [sp, #16]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	9303      	str	r3, [sp, #12]
 8000f5c:	4b51      	ldr	r3, [pc, #324]	; (80010a4 <drawCMDBox+0x178>)
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	2302      	movs	r3, #2
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	2311      	movs	r3, #17
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2332      	movs	r3, #50	; 0x32
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	2187      	movs	r1, #135	; 0x87
 8000f6e:	f004 fb93 	bl	8005698 <LCD_DrawButton1>
			1);
	LCD_DrawButton1("ERROR", 135, 35, 50, 17, 2, RED, BLACK, 0, 5, 5, 1);
 8000f72:	484e      	ldr	r0, [pc, #312]	; (80010ac <drawCMDBox+0x180>)
 8000f74:	2301      	movs	r3, #1
 8000f76:	9307      	str	r3, [sp, #28]
 8000f78:	2305      	movs	r3, #5
 8000f7a:	9306      	str	r3, [sp, #24]
 8000f7c:	2305      	movs	r3, #5
 8000f7e:	9305      	str	r3, [sp, #20]
 8000f80:	2300      	movs	r3, #0
 8000f82:	9304      	str	r3, [sp, #16]
 8000f84:	2300      	movs	r3, #0
 8000f86:	9303      	str	r3, [sp, #12]
 8000f88:	23f8      	movs	r3, #248	; 0xf8
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	9302      	str	r3, [sp, #8]
 8000f8e:	2302      	movs	r3, #2
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	2311      	movs	r3, #17
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2332      	movs	r3, #50	; 0x32
 8000f98:	2223      	movs	r2, #35	; 0x23
 8000f9a:	2187      	movs	r1, #135	; 0x87
 8000f9c:	f004 fb7c 	bl	8005698 <LCD_DrawButton1>

	LCD_SetTextSize(1);
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f006 fa3d 	bl	8007420 <LCD_SetTextSize>
	LCD_SetTextColor(GREEN, BLACK);
 8000fa6:	23fc      	movs	r3, #252	; 0xfc
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	2100      	movs	r1, #0
 8000fac:	0018      	movs	r0, r3
 8000fae:	f006 fa4d 	bl	800744c <LCD_SetTextColor>

	LCD_DrawFastHLine(10, 58, 180, LIGHTGRAY);
 8000fb2:	4b3c      	ldr	r3, [pc, #240]	; (80010a4 <drawCMDBox+0x178>)
 8000fb4:	22b4      	movs	r2, #180	; 0xb4
 8000fb6:	213a      	movs	r1, #58	; 0x3a
 8000fb8:	200a      	movs	r0, #10
 8000fba:	f004 ff73 	bl	8005ea4 <LCD_DrawFastHLine>
	for (uint8_t i = 0; i < 4; i++) {
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
 8000fc4:	e014      	b.n	8000ff0 <drawCMDBox+0xc4>
		LCD_DrawFastHLine(10, 73 + i * 14, 180, LIGHTGRAY);
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	1c1a      	adds	r2, r3, #0
 8000fce:	00d2      	lsls	r2, r2, #3
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	18db      	adds	r3, r3, r3
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	3349      	adds	r3, #73	; 0x49
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	b219      	sxth	r1, r3
 8000fdc:	4b31      	ldr	r3, [pc, #196]	; (80010a4 <drawCMDBox+0x178>)
 8000fde:	22b4      	movs	r2, #180	; 0xb4
 8000fe0:	200a      	movs	r0, #10
 8000fe2:	f004 ff5f 	bl	8005ea4 <LCD_DrawFastHLine>
	for (uint8_t i = 0; i < 4; i++) {
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	781a      	ldrb	r2, [r3, #0]
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	3201      	adds	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
 8000ff0:	1dfb      	adds	r3, r7, #7
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d9e6      	bls.n	8000fc6 <drawCMDBox+0x9a>
	}
	LCD_DrawFastVLine(90, 59, 70, LIGHTGRAY);
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <drawCMDBox+0x178>)
 8000ffa:	2246      	movs	r2, #70	; 0x46
 8000ffc:	213b      	movs	r1, #59	; 0x3b
 8000ffe:	205a      	movs	r0, #90	; 0x5a
 8001000:	f004 ffe8 	bl	8005fd4 <LCD_DrawFastVLine>

	LCD_SetTextColor(ORANGE, BLACK);
 8001004:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <drawCMDBox+0x184>)
 8001006:	2100      	movs	r1, #0
 8001008:	0018      	movs	r0, r3
 800100a:	f006 fa1f 	bl	800744c <LCD_SetTextColor>
	for (uint8_t i = 0; i < 5; i++) {
 800100e:	1dbb      	adds	r3, r7, #6
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e017      	b.n	8001046 <drawCMDBox+0x11a>
		LCD_SetCursor(20, 63 + i * 14);
 8001016:	1dbb      	adds	r3, r7, #6
 8001018:	781a      	ldrb	r2, [r3, #0]
 800101a:	0013      	movs	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	1a9b      	subs	r3, r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	333f      	adds	r3, #63	; 0x3f
 8001024:	0019      	movs	r1, r3
 8001026:	2014      	movs	r0, #20
 8001028:	f006 f9e4 	bl	80073f4 <LCD_SetCursor>
		LCD_Printf(B1_dispStr[i]);
 800102c:	1dbb      	adds	r3, r7, #6
 800102e:	781a      	ldrb	r2, [r3, #0]
 8001030:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <drawCMDBox+0x188>)
 8001032:	0092      	lsls	r2, r2, #2
 8001034:	58d3      	ldr	r3, [r2, r3]
 8001036:	0018      	movs	r0, r3
 8001038:	f006 f8e0 	bl	80071fc <LCD_Printf>
	for (uint8_t i = 0; i < 5; i++) {
 800103c:	1dbb      	adds	r3, r7, #6
 800103e:	781a      	ldrb	r2, [r3, #0]
 8001040:	1dbb      	adds	r3, r7, #6
 8001042:	3201      	adds	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	1dbb      	adds	r3, r7, #6
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b04      	cmp	r3, #4
 800104c:	d9e3      	bls.n	8001016 <drawCMDBox+0xea>
	}

	LCD_SetTextColor(GREEN, BLACK);
 800104e:	23fc      	movs	r3, #252	; 0xfc
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	2100      	movs	r1, #0
 8001054:	0018      	movs	r0, r3
 8001056:	f006 f9f9 	bl	800744c <LCD_SetTextColor>
	LCD_SetCursor(20, 20);
 800105a:	2114      	movs	r1, #20
 800105c:	2014      	movs	r0, #20
 800105e:	f006 f9c9 	bl	80073f4 <LCD_SetCursor>
	LCD_Printf("                   ");
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <drawCMDBox+0x18c>)
 8001064:	0018      	movs	r0, r3
 8001066:	f006 f8c9 	bl	80071fc <LCD_Printf>
	LCD_SetCursor(20, 20);
 800106a:	2114      	movs	r1, #20
 800106c:	2014      	movs	r0, #20
 800106e:	f006 f9c1 	bl	80073f4 <LCD_SetCursor>
	LCD_Printf("Device CNF MODE(DI)");
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <drawCMDBox+0x190>)
 8001074:	0018      	movs	r0, r3
 8001076:	f006 f8c1 	bl	80071fc <LCD_Printf>
	LCD_SetCursor(20, 30);
 800107a:	211e      	movs	r1, #30
 800107c:	2014      	movs	r0, #20
 800107e:	f006 f9b9 	bl	80073f4 <LCD_SetCursor>
	LCD_Printf("..$ ");
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <drawCMDBox+0x194>)
 8001084:	0018      	movs	r0, r3
 8001086:	f006 f8b9 	bl	80071fc <LCD_Printf>
	LCD_SetCursor(20, 45);
 800108a:	212d      	movs	r1, #45	; 0x2d
 800108c:	2014      	movs	r0, #20
 800108e:	f006 f9b1 	bl	80073f4 <LCD_SetCursor>
	LCD_Printf("Battery:78 percent");
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <drawCMDBox+0x198>)
 8001094:	0018      	movs	r0, r3
 8001096:	f006 f8b1 	bl	80071fc <LCD_Printf>
}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	b002      	add	sp, #8
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	0000cdb6 	.word	0x0000cdb6
 80010a8:	0800a594 	.word	0x0800a594
 80010ac:	0800a59c 	.word	0x0800a59c
 80010b0:	0000fc80 	.word	0x0000fc80
 80010b4:	20000000 	.word	0x20000000
 80010b8:	0800a5a4 	.word	0x0800a5a4
 80010bc:	0800a5b8 	.word	0x0800a5b8
 80010c0:	0800a5cc 	.word	0x0800a5cc
 80010c4:	0800a5d4 	.word	0x0800a5d4

080010c8 <drawPinkWhiteBox>:

void drawPinkWhiteBox() {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af02      	add	r7, sp, #8

	//=================== || PINK BOX || ==============//
	LCD_FillRoundRect(200, 10, 120, 115, 3, NAVY);
 80010ce:	230f      	movs	r3, #15
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	2303      	movs	r3, #3
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2373      	movs	r3, #115	; 0x73
 80010d8:	2278      	movs	r2, #120	; 0x78
 80010da:	210a      	movs	r1, #10
 80010dc:	20c8      	movs	r0, #200	; 0xc8
 80010de:	f005 fdfd 	bl	8006cdc <LCD_FillRoundRect>
	//=================================================//

	//=================== ||PINK WHITE BOX || ==============//
	LCD_FillRoundRect(210, 20, 100, 90, 1, WHITE);
 80010e2:	4b24      	ldr	r3, [pc, #144]	; (8001174 <drawPinkWhiteBox+0xac>)
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	2301      	movs	r3, #1
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	235a      	movs	r3, #90	; 0x5a
 80010ec:	2264      	movs	r2, #100	; 0x64
 80010ee:	2114      	movs	r1, #20
 80010f0:	20d2      	movs	r0, #210	; 0xd2
 80010f2:	f005 fdf3 	bl	8006cdc <LCD_FillRoundRect>
	//======================================================//

	LCD_SetTextSize(2);
 80010f6:	2002      	movs	r0, #2
 80010f8:	f006 f992 	bl	8007420 <LCD_SetTextSize>
	LCD_SetTextColor(BLACK, WHITE);
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <drawPinkWhiteBox+0xac>)
 80010fe:	0019      	movs	r1, r3
 8001100:	2000      	movs	r0, #0
 8001102:	f006 f9a3 	bl	800744c <LCD_SetTextColor>

	LCD_SetCursor(220, 30);
 8001106:	211e      	movs	r1, #30
 8001108:	20dc      	movs	r0, #220	; 0xdc
 800110a:	f006 f973 	bl	80073f4 <LCD_SetCursor>
	LCD_Printf("  ID: ");
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <drawPinkWhiteBox+0xb0>)
 8001110:	0018      	movs	r0, r3
 8001112:	f006 f873 	bl	80071fc <LCD_Printf>

	LCD_SetTextColor(BLUE3, WHITE);
 8001116:	4a17      	ldr	r2, [pc, #92]	; (8001174 <drawPinkWhiteBox+0xac>)
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <drawPinkWhiteBox+0xb4>)
 800111a:	0011      	movs	r1, r2
 800111c:	0018      	movs	r0, r3
 800111e:	f006 f995 	bl	800744c <LCD_SetTextColor>
	LCD_SetCursor(220, 50);
 8001122:	2132      	movs	r1, #50	; 0x32
 8001124:	20dc      	movs	r0, #220	; 0xdc
 8001126:	f006 f965 	bl	80073f4 <LCD_SetCursor>
	LCD_Printf(B2_dispStr[0]);
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <drawPinkWhiteBox+0xb8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	0018      	movs	r0, r3
 8001130:	f006 f864 	bl	80071fc <LCD_Printf>

	LCD_SetCursor(220, 70);
 8001134:	2146      	movs	r1, #70	; 0x46
 8001136:	20dc      	movs	r0, #220	; 0xdc
 8001138:	f006 f95c 	bl	80073f4 <LCD_SetCursor>
	LCD_SetTextColor(BLACK, WHITE);
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <drawPinkWhiteBox+0xac>)
 800113e:	0019      	movs	r1, r3
 8001140:	2000      	movs	r0, #0
 8001142:	f006 f983 	bl	800744c <LCD_SetTextColor>
	LCD_Printf("STATUS:");
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <drawPinkWhiteBox+0xbc>)
 8001148:	0018      	movs	r0, r3
 800114a:	f006 f857 	bl	80071fc <LCD_Printf>

	LCD_SetCursor(220, 90);
 800114e:	215a      	movs	r1, #90	; 0x5a
 8001150:	20dc      	movs	r0, #220	; 0xdc
 8001152:	f006 f94f 	bl	80073f4 <LCD_SetCursor>
	LCD_SetTextColor(RED, WHITE);
 8001156:	4a07      	ldr	r2, [pc, #28]	; (8001174 <drawPinkWhiteBox+0xac>)
 8001158:	23f8      	movs	r3, #248	; 0xf8
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	0011      	movs	r1, r2
 800115e:	0018      	movs	r0, r3
 8001160:	f006 f974 	bl	800744c <LCD_SetTextColor>
	LCD_Printf(B2_dispStr[2]);
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <drawPinkWhiteBox+0xb8>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	0018      	movs	r0, r3
 800116a:	f006 f847 	bl	80071fc <LCD_Printf>
}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	0000ffff 	.word	0x0000ffff
 8001178:	0800a5e8 	.word	0x0800a5e8
 800117c:	000003ff 	.word	0x000003ff
 8001180:	20000014 	.word	0x20000014
 8001184:	0800a5f0 	.word	0x0800a5f0

08001188 <drawYellowBox>:

void drawYellowBox() {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af02      	add	r7, sp, #8
	LCD_FillRoundRect(0, 130, 320, 110, 1, YELLOW);
 800118e:	23a0      	movs	r3, #160	; 0xa0
 8001190:	005a      	lsls	r2, r3, #1
 8001192:	4b45      	ldr	r3, [pc, #276]	; (80012a8 <drawYellowBox+0x120>)
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	2301      	movs	r3, #1
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	236e      	movs	r3, #110	; 0x6e
 800119c:	2182      	movs	r1, #130	; 0x82
 800119e:	2000      	movs	r0, #0
 80011a0:	f005 fd9c 	bl	8006cdc <LCD_FillRoundRect>

	LCD_DrawHBorder(0, 130, 320, BROWN1, 5);
 80011a4:	4941      	ldr	r1, [pc, #260]	; (80012ac <drawYellowBox+0x124>)
 80011a6:	23a0      	movs	r3, #160	; 0xa0
 80011a8:	005a      	lsls	r2, r3, #1
 80011aa:	2305      	movs	r3, #5
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	000b      	movs	r3, r1
 80011b0:	2182      	movs	r1, #130	; 0x82
 80011b2:	2000      	movs	r0, #0
 80011b4:	f004 fb1c 	bl	80057f0 <LCD_DrawHBorder>
	LCD_DrawHBorder(0, 234, 320, BROWN1, 5);
 80011b8:	493c      	ldr	r1, [pc, #240]	; (80012ac <drawYellowBox+0x124>)
 80011ba:	23a0      	movs	r3, #160	; 0xa0
 80011bc:	005a      	lsls	r2, r3, #1
 80011be:	2305      	movs	r3, #5
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	000b      	movs	r3, r1
 80011c4:	21ea      	movs	r1, #234	; 0xea
 80011c6:	2000      	movs	r0, #0
 80011c8:	f004 fb12 	bl	80057f0 <LCD_DrawHBorder>

	LCD_DrawVBorder(0, 130, 110, BROWN1, 5);
 80011cc:	4a37      	ldr	r2, [pc, #220]	; (80012ac <drawYellowBox+0x124>)
 80011ce:	2305      	movs	r3, #5
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	0013      	movs	r3, r2
 80011d4:	226e      	movs	r2, #110	; 0x6e
 80011d6:	2182      	movs	r1, #130	; 0x82
 80011d8:	2000      	movs	r0, #0
 80011da:	f004 fb48 	bl	800586e <LCD_DrawVBorder>
	LCD_DrawVBorder(225, 130, 110, BROWN1, 5);
 80011de:	4a33      	ldr	r2, [pc, #204]	; (80012ac <drawYellowBox+0x124>)
 80011e0:	2305      	movs	r3, #5
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	0013      	movs	r3, r2
 80011e6:	226e      	movs	r2, #110	; 0x6e
 80011e8:	2182      	movs	r1, #130	; 0x82
 80011ea:	20e1      	movs	r0, #225	; 0xe1
 80011ec:	f004 fb3f 	bl	800586e <LCD_DrawVBorder>

	//=================== || Yellow Side Data box || =================//
	LCD_SetCursor(235, 139);
 80011f0:	218b      	movs	r1, #139	; 0x8b
 80011f2:	20eb      	movs	r0, #235	; 0xeb
 80011f4:	f006 f8fe 	bl	80073f4 <LCD_SetCursor>
	LCD_SetTextSize(2);
 80011f8:	2002      	movs	r0, #2
 80011fa:	f006 f911 	bl	8007420 <LCD_SetTextSize>
	LCD_SetTextColor(BLACK, YELLOW);
 80011fe:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <drawYellowBox+0x120>)
 8001200:	0019      	movs	r1, r3
 8001202:	2000      	movs	r0, #0
 8001204:	f006 f922 	bl	800744c <LCD_SetTextColor>
	LCD_Printf(B3_dispStr[2]);
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <drawYellowBox+0x128>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	0018      	movs	r0, r3
 800120e:	f005 fff5 	bl	80071fc <LCD_Printf>

	//	LCD_DrawFastHLine(230, 125, 70, BLACK);
	LCD_FillRect(235, 157, 80, 25, WHITE);
 8001212:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <drawYellowBox+0x12c>)
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2319      	movs	r3, #25
 8001218:	2250      	movs	r2, #80	; 0x50
 800121a:	219d      	movs	r1, #157	; 0x9d
 800121c:	20eb      	movs	r0, #235	; 0xeb
 800121e:	f005 fc81 	bl	8006b24 <LCD_FillRect>

	LCD_SetCursor(235, 188);
 8001222:	21bc      	movs	r1, #188	; 0xbc
 8001224:	20eb      	movs	r0, #235	; 0xeb
 8001226:	f006 f8e5 	bl	80073f4 <LCD_SetCursor>
	//	LCD_SetTextSize(2);
	LCD_SetTextColor(BLACK, YELLOW);
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <drawYellowBox+0x120>)
 800122c:	0019      	movs	r1, r3
 800122e:	2000      	movs	r0, #0
 8001230:	f006 f90c 	bl	800744c <LCD_SetTextColor>
	LCD_Printf(B3_dispStr[3]);
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <drawYellowBox+0x128>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0018      	movs	r0, r3
 800123a:	f005 ffdf 	bl	80071fc <LCD_Printf>
	LCD_FillRect(235, 207, 80, 25, WHITE);
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <drawYellowBox+0x12c>)
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2319      	movs	r3, #25
 8001244:	2250      	movs	r2, #80	; 0x50
 8001246:	21cf      	movs	r1, #207	; 0xcf
 8001248:	20eb      	movs	r0, #235	; 0xeb
 800124a:	f005 fc6b 	bl	8006b24 <LCD_FillRect>

	//=============================================================//

	//=================== || Graphs || =================//
	LCD_DrawRect(20, 150, 190, 20, BLACK);
 800124e:	2300      	movs	r3, #0
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2314      	movs	r3, #20
 8001254:	22be      	movs	r2, #190	; 0xbe
 8001256:	2196      	movs	r1, #150	; 0x96
 8001258:	2014      	movs	r0, #20
 800125a:	f004 feea 	bl	8006032 <LCD_DrawRect>
	LCD_DrawRect(20, 190, 190, 20, BLACK);
 800125e:	2300      	movs	r3, #0
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2314      	movs	r3, #20
 8001264:	22be      	movs	r2, #190	; 0xbe
 8001266:	21be      	movs	r1, #190	; 0xbe
 8001268:	2014      	movs	r0, #20
 800126a:	f004 fee2 	bl	8006032 <LCD_DrawRect>

	drawScale();
 800126e:	f7ff fba5 	bl	80009bc <drawScale>

	LCD_DrawFastVLine(115, 150, 20, BLACK);
 8001272:	2300      	movs	r3, #0
 8001274:	2214      	movs	r2, #20
 8001276:	2196      	movs	r1, #150	; 0x96
 8001278:	2073      	movs	r0, #115	; 0x73
 800127a:	f004 feab 	bl	8005fd4 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(115, 190, 20, BLACK);
 800127e:	2300      	movs	r3, #0
 8001280:	2214      	movs	r2, #20
 8001282:	21be      	movs	r1, #190	; 0xbe
 8001284:	2073      	movs	r0, #115	; 0x73
 8001286:	f004 fea5 	bl	8005fd4 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(114, 150, 20, BLACK);
 800128a:	2300      	movs	r3, #0
 800128c:	2214      	movs	r2, #20
 800128e:	2196      	movs	r1, #150	; 0x96
 8001290:	2072      	movs	r0, #114	; 0x72
 8001292:	f004 fe9f 	bl	8005fd4 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(114, 190, 20, BLACK);
 8001296:	2300      	movs	r3, #0
 8001298:	2214      	movs	r2, #20
 800129a:	21be      	movs	r1, #190	; 0xbe
 800129c:	2072      	movs	r0, #114	; 0x72
 800129e:	f004 fe99 	bl	8005fd4 <LCD_DrawFastVLine>
}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	0000ffe0 	.word	0x0000ffe0
 80012ac:	00007083 	.word	0x00007083
 80012b0:	20000020 	.word	0x20000020
 80012b4:	0000ffff 	.word	0x0000ffff

080012b8 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af02      	add	r7, sp, #8
 80012be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */

	for (;;) {

		adc_read(adcData, 4);
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <StartDefaultTask+0x88>)
 80012c2:	2104      	movs	r1, #4
 80012c4:	0018      	movs	r0, r3
 80012c6:	f003 fe2d 	bl	8004f24 <adc_read>
		adcData[0] = map(adcData[0], 0, 4095, 0, 500);
 80012ca:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <StartDefaultTask+0x88>)
 80012cc:	8818      	ldrh	r0, [r3, #0]
 80012ce:	4a1d      	ldr	r2, [pc, #116]	; (8001344 <StartDefaultTask+0x8c>)
 80012d0:	23fa      	movs	r3, #250	; 0xfa
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2300      	movs	r3, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	f003 f9f7 	bl	80046cc <map>
 80012de:	0003      	movs	r3, r0
 80012e0:	001a      	movs	r2, r3
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <StartDefaultTask+0x88>)
 80012e4:	801a      	strh	r2, [r3, #0]
		adcData[1] = map(adcData[1], 0, 4095, 0, 500);
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <StartDefaultTask+0x88>)
 80012e8:	8858      	ldrh	r0, [r3, #2]
 80012ea:	4a16      	ldr	r2, [pc, #88]	; (8001344 <StartDefaultTask+0x8c>)
 80012ec:	23fa      	movs	r3, #250	; 0xfa
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2300      	movs	r3, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	f003 f9e9 	bl	80046cc <map>
 80012fa:	0003      	movs	r3, r0
 80012fc:	001a      	movs	r2, r3
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <StartDefaultTask+0x88>)
 8001300:	805a      	strh	r2, [r3, #2]
		adcData[2] = map(adcData[2], 0, 4095, 0, 100);
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <StartDefaultTask+0x88>)
 8001304:	8898      	ldrh	r0, [r3, #4]
 8001306:	4a0f      	ldr	r2, [pc, #60]	; (8001344 <StartDefaultTask+0x8c>)
 8001308:	2364      	movs	r3, #100	; 0x64
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2300      	movs	r3, #0
 800130e:	2100      	movs	r1, #0
 8001310:	f003 f9dc 	bl	80046cc <map>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <StartDefaultTask+0x88>)
 800131a:	809a      	strh	r2, [r3, #4]
		adcData[3] = map(adcData[3], 0, 4095, 0, 360);
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <StartDefaultTask+0x88>)
 800131e:	88d8      	ldrh	r0, [r3, #6]
 8001320:	4a08      	ldr	r2, [pc, #32]	; (8001344 <StartDefaultTask+0x8c>)
 8001322:	23b4      	movs	r3, #180	; 0xb4
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2300      	movs	r3, #0
 800132a:	2100      	movs	r1, #0
 800132c:	f003 f9ce 	bl	80046cc <map>
 8001330:	0003      	movs	r3, r0
 8001332:	001a      	movs	r2, r3
 8001334:	4b02      	ldr	r3, [pc, #8]	; (8001340 <StartDefaultTask+0x88>)
 8001336:	80da      	strh	r2, [r3, #6]

//		x = TOUCH_VAL('x');
//		y = TOUCH_VAL('y');
//		print("%d, %d\n", TOUCH_VAL('x'), TOUCH_VAL('y'));
		osDelay(50);
 8001338:	2032      	movs	r0, #50	; 0x32
 800133a:	f006 fb1f 	bl	800797c <osDelay>
		adc_read(adcData, 4);
 800133e:	e7bf      	b.n	80012c0 <StartDefaultTask+0x8>
 8001340:	20000490 	.word	0x20000490
 8001344:	00000fff 	.word	0x00000fff

08001348 <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const *argument) {
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b08f      	sub	sp, #60	; 0x3c
 800134c:	af08      	add	r7, sp, #32
 800134e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */

	for (;;) {
		LCD_SetTextSize(2);
 8001350:	2002      	movs	r0, #2
 8001352:	f006 f865 	bl	8007420 <LCD_SetTextSize>
		osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 8001356:	4bcf      	ldr	r3, [pc, #828]	; (8001694 <StartTask02+0x34c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2201      	movs	r2, #1
 800135c:	4252      	negs	r2, r2
 800135e:	0011      	movs	r1, r2
 8001360:	0018      	movs	r0, r3
 8001362:	f006 fb53 	bl	8007a0c <osSemaphoreWait>
		LCD_SetCursor(240, 162);
 8001366:	21a2      	movs	r1, #162	; 0xa2
 8001368:	20f0      	movs	r0, #240	; 0xf0
 800136a:	f006 f843 	bl	80073f4 <LCD_SetCursor>
		LCD_SetTextColor(BLACK, WHITE);
 800136e:	4bca      	ldr	r3, [pc, #808]	; (8001698 <StartTask02+0x350>)
 8001370:	0019      	movs	r1, r3
 8001372:	2000      	movs	r0, #0
 8001374:	f006 f86a 	bl	800744c <LCD_SetTextColor>
		//		sprintf(placeHolder, "%d", adcData[0]);
		//		LCD_Printf("    ");
		LCD_SetCursor(240, 162);
 8001378:	21a2      	movs	r1, #162	; 0xa2
 800137a:	20f0      	movs	r0, #240	; 0xf0
 800137c:	f006 f83a 	bl	80073f4 <LCD_SetCursor>

		if (adcData[2] >= 1000)
 8001380:	4bc6      	ldr	r3, [pc, #792]	; (800169c <StartTask02+0x354>)
 8001382:	889a      	ldrh	r2, [r3, #4]
 8001384:	23fa      	movs	r3, #250	; 0xfa
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	429a      	cmp	r2, r3
 800138a:	d308      	bcc.n	800139e <StartTask02+0x56>
			LCD_Printf(" %d", adcData[2]);
 800138c:	4bc3      	ldr	r3, [pc, #780]	; (800169c <StartTask02+0x354>)
 800138e:	889b      	ldrh	r3, [r3, #4]
 8001390:	001a      	movs	r2, r3
 8001392:	4bc3      	ldr	r3, [pc, #780]	; (80016a0 <StartTask02+0x358>)
 8001394:	0011      	movs	r1, r2
 8001396:	0018      	movs	r0, r3
 8001398:	f005 ff30 	bl	80071fc <LCD_Printf>
 800139c:	e014      	b.n	80013c8 <StartTask02+0x80>
		else if (adcData[2] >= 100)
 800139e:	4bbf      	ldr	r3, [pc, #764]	; (800169c <StartTask02+0x354>)
 80013a0:	889b      	ldrh	r3, [r3, #4]
 80013a2:	2b63      	cmp	r3, #99	; 0x63
 80013a4:	d908      	bls.n	80013b8 <StartTask02+0x70>
			LCD_Printf(" %d ", adcData[2]);
 80013a6:	4bbd      	ldr	r3, [pc, #756]	; (800169c <StartTask02+0x354>)
 80013a8:	889b      	ldrh	r3, [r3, #4]
 80013aa:	001a      	movs	r2, r3
 80013ac:	4bbd      	ldr	r3, [pc, #756]	; (80016a4 <StartTask02+0x35c>)
 80013ae:	0011      	movs	r1, r2
 80013b0:	0018      	movs	r0, r3
 80013b2:	f005 ff23 	bl	80071fc <LCD_Printf>
 80013b6:	e007      	b.n	80013c8 <StartTask02+0x80>
		else
			LCD_Printf("  %d ", adcData[2]);
 80013b8:	4bb8      	ldr	r3, [pc, #736]	; (800169c <StartTask02+0x354>)
 80013ba:	889b      	ldrh	r3, [r3, #4]
 80013bc:	001a      	movs	r2, r3
 80013be:	4bba      	ldr	r3, [pc, #744]	; (80016a8 <StartTask02+0x360>)
 80013c0:	0011      	movs	r1, r2
 80013c2:	0018      	movs	r0, r3
 80013c4:	f005 ff1a 	bl	80071fc <LCD_Printf>

		LCD_SetCursor(240, 212);
 80013c8:	21d4      	movs	r1, #212	; 0xd4
 80013ca:	20f0      	movs	r0, #240	; 0xf0
 80013cc:	f006 f812 	bl	80073f4 <LCD_SetCursor>
		LCD_SetTextColor(BLACK, WHITE);
 80013d0:	4bb1      	ldr	r3, [pc, #708]	; (8001698 <StartTask02+0x350>)
 80013d2:	0019      	movs	r1, r3
 80013d4:	2000      	movs	r0, #0
 80013d6:	f006 f839 	bl	800744c <LCD_SetTextColor>

		int16_t degreeVal;
		if (adcData[3] > 180) {
 80013da:	4bb0      	ldr	r3, [pc, #704]	; (800169c <StartTask02+0x354>)
 80013dc:	88db      	ldrh	r3, [r3, #6]
 80013de:	2bb4      	cmp	r3, #180	; 0xb4
 80013e0:	d907      	bls.n	80013f2 <StartTask02+0xaa>
			degreeVal = adcData[3] - 180;
 80013e2:	4bae      	ldr	r3, [pc, #696]	; (800169c <StartTask02+0x354>)
 80013e4:	88db      	ldrh	r3, [r3, #6]
 80013e6:	3bb4      	subs	r3, #180	; 0xb4
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	2316      	movs	r3, #22
 80013ec:	18fb      	adds	r3, r7, r3
 80013ee:	801a      	strh	r2, [r3, #0]
 80013f0:	e00a      	b.n	8001408 <StartTask02+0xc0>
		} else if (adcData[3] <= 180) {
 80013f2:	4baa      	ldr	r3, [pc, #680]	; (800169c <StartTask02+0x354>)
 80013f4:	88db      	ldrh	r3, [r3, #6]
 80013f6:	2bb4      	cmp	r3, #180	; 0xb4
 80013f8:	d806      	bhi.n	8001408 <StartTask02+0xc0>
			degreeVal = (180 - adcData[3]) * (-1);
 80013fa:	4ba8      	ldr	r3, [pc, #672]	; (800169c <StartTask02+0x354>)
 80013fc:	88db      	ldrh	r3, [r3, #6]
 80013fe:	3bb4      	subs	r3, #180	; 0xb4
 8001400:	b29a      	uxth	r2, r3
 8001402:	2316      	movs	r3, #22
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	801a      	strh	r2, [r3, #0]
		}
		if (degreeVal >= 100)
 8001408:	2216      	movs	r2, #22
 800140a:	18bb      	adds	r3, r7, r2
 800140c:	2100      	movs	r1, #0
 800140e:	5e5b      	ldrsh	r3, [r3, r1]
 8001410:	2b63      	cmp	r3, #99	; 0x63
 8001412:	dd08      	ble.n	8001426 <StartTask02+0xde>
			LCD_Printf(" %d", degreeVal);
 8001414:	18bb      	adds	r3, r7, r2
 8001416:	2200      	movs	r2, #0
 8001418:	5e9a      	ldrsh	r2, [r3, r2]
 800141a:	4ba1      	ldr	r3, [pc, #644]	; (80016a0 <StartTask02+0x358>)
 800141c:	0011      	movs	r1, r2
 800141e:	0018      	movs	r0, r3
 8001420:	f005 feec 	bl	80071fc <LCD_Printf>
 8001424:	e017      	b.n	8001456 <StartTask02+0x10e>
		else if (degreeVal >= 0)
 8001426:	2216      	movs	r2, #22
 8001428:	18bb      	adds	r3, r7, r2
 800142a:	2100      	movs	r1, #0
 800142c:	5e5b      	ldrsh	r3, [r3, r1]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db08      	blt.n	8001444 <StartTask02+0xfc>
			LCD_Printf("  %d ", degreeVal);
 8001432:	18bb      	adds	r3, r7, r2
 8001434:	2200      	movs	r2, #0
 8001436:	5e9a      	ldrsh	r2, [r3, r2]
 8001438:	4b9b      	ldr	r3, [pc, #620]	; (80016a8 <StartTask02+0x360>)
 800143a:	0011      	movs	r1, r2
 800143c:	0018      	movs	r0, r3
 800143e:	f005 fedd 	bl	80071fc <LCD_Printf>
 8001442:	e008      	b.n	8001456 <StartTask02+0x10e>
		else
			LCD_Printf(" %d ", degreeVal);
 8001444:	2316      	movs	r3, #22
 8001446:	18fb      	adds	r3, r7, r3
 8001448:	2200      	movs	r2, #0
 800144a:	5e9a      	ldrsh	r2, [r3, r2]
 800144c:	4b95      	ldr	r3, [pc, #596]	; (80016a4 <StartTask02+0x35c>)
 800144e:	0011      	movs	r1, r2
 8001450:	0018      	movs	r0, r3
 8001452:	f005 fed3 	bl	80071fc <LCD_Printf>

		//==================================================//
		if ((cmdprintFlag == true) && (cmdrecFlag == true)) {
 8001456:	4b95      	ldr	r3, [pc, #596]	; (80016ac <StartTask02+0x364>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d100      	bne.n	8001460 <StartTask02+0x118>
 800145e:	e18e      	b.n	800177e <StartTask02+0x436>
 8001460:	4b93      	ldr	r3, [pc, #588]	; (80016b0 <StartTask02+0x368>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d100      	bne.n	800146a <StartTask02+0x122>
 8001468:	e189      	b.n	800177e <StartTask02+0x436>
			uint8_t plLen = strlen(placeHolder);
 800146a:	4b92      	ldr	r3, [pc, #584]	; (80016b4 <StartTask02+0x36c>)
 800146c:	0018      	movs	r0, r3
 800146e:	f7fe fe4b 	bl	8000108 <strlen>
 8001472:	0002      	movs	r2, r0
 8001474:	2415      	movs	r4, #21
 8001476:	193b      	adds	r3, r7, r4
 8001478:	701a      	strb	r2, [r3, #0]
			LCD_SetCursor(20, 30);
 800147a:	211e      	movs	r1, #30
 800147c:	2014      	movs	r0, #20
 800147e:	f005 ffb9 	bl	80073f4 <LCD_SetCursor>
			LCD_SetTextSize(1);
 8001482:	2001      	movs	r0, #1
 8001484:	f005 ffcc 	bl	8007420 <LCD_SetTextSize>
			LCD_SetTextColor(GREEN, BLACK);
 8001488:	23fc      	movs	r3, #252	; 0xfc
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	2100      	movs	r1, #0
 800148e:	0018      	movs	r0, r3
 8001490:	f005 ffdc 	bl	800744c <LCD_SetTextColor>
			LCD_Printf("--             ");
 8001494:	4b88      	ldr	r3, [pc, #544]	; (80016b8 <StartTask02+0x370>)
 8001496:	0018      	movs	r0, r3
 8001498:	f005 feb0 	bl	80071fc <LCD_Printf>
			if (plLen < 16) {
 800149c:	193b      	adds	r3, r7, r4
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d808      	bhi.n	80014b6 <StartTask02+0x16e>
				LCD_SetCursor(20, 30);
 80014a4:	211e      	movs	r1, #30
 80014a6:	2014      	movs	r0, #20
 80014a8:	f005 ffa4 	bl	80073f4 <LCD_SetCursor>
				LCD_Printf(placeHolder);
 80014ac:	4b81      	ldr	r3, [pc, #516]	; (80016b4 <StartTask02+0x36c>)
 80014ae:	0018      	movs	r0, r3
 80014b0:	f005 fea4 	bl	80071fc <LCD_Printf>
 80014b4:	e007      	b.n	80014c6 <StartTask02+0x17e>
			} else {
				LCD_SetCursor(20, 30);
 80014b6:	211e      	movs	r1, #30
 80014b8:	2014      	movs	r0, #20
 80014ba:	f005 ff9b 	bl	80073f4 <LCD_SetCursor>
				LCD_Printf("--             ");
 80014be:	4b7e      	ldr	r3, [pc, #504]	; (80016b8 <StartTask02+0x370>)
 80014c0:	0018      	movs	r0, r3
 80014c2:	f005 fe9b 	bl	80071fc <LCD_Printf>
			}
			if (plLen > 3) {
 80014c6:	2315      	movs	r3, #21
 80014c8:	18fb      	adds	r3, r7, r3
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d800      	bhi.n	80014d2 <StartTask02+0x18a>
 80014d0:	e106      	b.n	80016e0 <StartTask02+0x398>
				if (placeHolder[0] == 'A' && placeHolder[1] == 'T'
 80014d2:	4b78      	ldr	r3, [pc, #480]	; (80016b4 <StartTask02+0x36c>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b41      	cmp	r3, #65	; 0x41
 80014d8:	d000      	beq.n	80014dc <StartTask02+0x194>
 80014da:	e0bc      	b.n	8001656 <StartTask02+0x30e>
 80014dc:	4b75      	ldr	r3, [pc, #468]	; (80016b4 <StartTask02+0x36c>)
 80014de:	785b      	ldrb	r3, [r3, #1]
 80014e0:	2b54      	cmp	r3, #84	; 0x54
 80014e2:	d000      	beq.n	80014e6 <StartTask02+0x19e>
 80014e4:	e0b7      	b.n	8001656 <StartTask02+0x30e>
						&& placeHolder[2] == '+') {
 80014e6:	4b73      	ldr	r3, [pc, #460]	; (80016b4 <StartTask02+0x36c>)
 80014e8:	789b      	ldrb	r3, [r3, #2]
 80014ea:	2b2b      	cmp	r3, #43	; 0x2b
 80014ec:	d000      	beq.n	80014f0 <StartTask02+0x1a8>
 80014ee:	e0b2      	b.n	8001656 <StartTask02+0x30e>
					char tempC[10] = { 0 };
 80014f0:	2308      	movs	r3, #8
 80014f2:	18fb      	adds	r3, r7, r3
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2206      	movs	r2, #6
 80014fc:	2100      	movs	r1, #0
 80014fe:	0018      	movs	r0, r3
 8001500:	f008 fa91 	bl	8009a26 <memset>
					if (placeHolder[3] == 'I' && placeHolder[4] == 'D') {// ID Char read
 8001504:	4b6b      	ldr	r3, [pc, #428]	; (80016b4 <StartTask02+0x36c>)
 8001506:	78db      	ldrb	r3, [r3, #3]
 8001508:	2b49      	cmp	r3, #73	; 0x49
 800150a:	d139      	bne.n	8001580 <StartTask02+0x238>
 800150c:	4b69      	ldr	r3, [pc, #420]	; (80016b4 <StartTask02+0x36c>)
 800150e:	791b      	ldrb	r3, [r3, #4]
 8001510:	2b44      	cmp	r3, #68	; 0x44
 8001512:	d135      	bne.n	8001580 <StartTask02+0x238>
//						uint8_t idchar[5] = "12345";
						B2_dispStr[0] = (placeHolder + 5);
 8001514:	4a69      	ldr	r2, [pc, #420]	; (80016bc <StartTask02+0x374>)
 8001516:	4b6a      	ldr	r3, [pc, #424]	; (80016c0 <StartTask02+0x378>)
 8001518:	601a      	str	r2, [r3, #0]
						LCD_SetTextSize(2);
 800151a:	2002      	movs	r0, #2
 800151c:	f005 ff80 	bl	8007420 <LCD_SetTextSize>
						LCD_SetTextColor(BLUE3, WHITE);
 8001520:	4a5d      	ldr	r2, [pc, #372]	; (8001698 <StartTask02+0x350>)
 8001522:	4b68      	ldr	r3, [pc, #416]	; (80016c4 <StartTask02+0x37c>)
 8001524:	0011      	movs	r1, r2
 8001526:	0018      	movs	r0, r3
 8001528:	f005 ff90 	bl	800744c <LCD_SetTextColor>
						LCD_SetCursor(220, 50);
 800152c:	2132      	movs	r1, #50	; 0x32
 800152e:	20dc      	movs	r0, #220	; 0xdc
 8001530:	f005 ff60 	bl	80073f4 <LCD_SetCursor>
						LCD_Printf(B2_dispStr[0]);
 8001534:	4b62      	ldr	r3, [pc, #392]	; (80016c0 <StartTask02+0x378>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0018      	movs	r0, r3
 800153a:	f005 fe5f 	bl	80071fc <LCD_Printf>
						LCD_DrawButton1("  OK", 135, 35, 50, 17, 2, GREEN,
 800153e:	4862      	ldr	r0, [pc, #392]	; (80016c8 <StartTask02+0x380>)
 8001540:	2301      	movs	r3, #1
 8001542:	9307      	str	r3, [sp, #28]
 8001544:	2305      	movs	r3, #5
 8001546:	9306      	str	r3, [sp, #24]
 8001548:	2305      	movs	r3, #5
 800154a:	9305      	str	r3, [sp, #20]
 800154c:	2300      	movs	r3, #0
 800154e:	9304      	str	r3, [sp, #16]
 8001550:	2300      	movs	r3, #0
 8001552:	9303      	str	r3, [sp, #12]
 8001554:	23fc      	movs	r3, #252	; 0xfc
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	2302      	movs	r3, #2
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	2311      	movs	r3, #17
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2332      	movs	r3, #50	; 0x32
 8001564:	2223      	movs	r2, #35	; 0x23
 8001566:	2187      	movs	r1, #135	; 0x87
 8001568:	f004 f896 	bl	8005698 <LCD_DrawButton1>
						BLACK, 0, 5, 5, 1);
						USART_WRITE(USART2, "OK\n", 3);
 800156c:	4b57      	ldr	r3, [pc, #348]	; (80016cc <StartTask02+0x384>)
 800156e:	4858      	ldr	r0, [pc, #352]	; (80016d0 <StartTask02+0x388>)
 8001570:	2203      	movs	r2, #3
 8001572:	0019      	movs	r1, r3
 8001574:	f004 f85c 	bl	8005630 <USART_WRITE>
						connectFlag = true;
 8001578:	4b56      	ldr	r3, [pc, #344]	; (80016d4 <StartTask02+0x38c>)
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
 800157e:	e069      	b.n	8001654 <StartTask02+0x30c>
					} else if (placeHolder[3] == 'C' && placeHolder[4] == 'F') {
 8001580:	4b4c      	ldr	r3, [pc, #304]	; (80016b4 <StartTask02+0x36c>)
 8001582:	78db      	ldrb	r3, [r3, #3]
 8001584:	2b43      	cmp	r3, #67	; 0x43
 8001586:	d121      	bne.n	80015cc <StartTask02+0x284>
 8001588:	4b4a      	ldr	r3, [pc, #296]	; (80016b4 <StartTask02+0x36c>)
 800158a:	791b      	ldrb	r3, [r3, #4]
 800158c:	2b46      	cmp	r3, #70	; 0x46
 800158e:	d11d      	bne.n	80015cc <StartTask02+0x284>
						LCD_DrawButton1("  OK", 135, 35, 50, 17, 2, GREEN,
 8001590:	484d      	ldr	r0, [pc, #308]	; (80016c8 <StartTask02+0x380>)
 8001592:	2301      	movs	r3, #1
 8001594:	9307      	str	r3, [sp, #28]
 8001596:	2305      	movs	r3, #5
 8001598:	9306      	str	r3, [sp, #24]
 800159a:	2305      	movs	r3, #5
 800159c:	9305      	str	r3, [sp, #20]
 800159e:	2300      	movs	r3, #0
 80015a0:	9304      	str	r3, [sp, #16]
 80015a2:	2300      	movs	r3, #0
 80015a4:	9303      	str	r3, [sp, #12]
 80015a6:	23fc      	movs	r3, #252	; 0xfc
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	9302      	str	r3, [sp, #8]
 80015ac:	2302      	movs	r3, #2
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	2311      	movs	r3, #17
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2332      	movs	r3, #50	; 0x32
 80015b6:	2223      	movs	r2, #35	; 0x23
 80015b8:	2187      	movs	r1, #135	; 0x87
 80015ba:	f004 f86d 	bl	8005698 <LCD_DrawButton1>
						BLACK, 0, 5, 5, 1);
						USART_WRITE(USART2, "OK\n", 3);
 80015be:	4b43      	ldr	r3, [pc, #268]	; (80016cc <StartTask02+0x384>)
 80015c0:	4843      	ldr	r0, [pc, #268]	; (80016d0 <StartTask02+0x388>)
 80015c2:	2203      	movs	r2, #3
 80015c4:	0019      	movs	r1, r3
 80015c6:	f004 f833 	bl	8005630 <USART_WRITE>
 80015ca:	e043      	b.n	8001654 <StartTask02+0x30c>
					} else if (placeHolder[3] == 'C' && placeHolder[4] == 'H') {
 80015cc:	4b39      	ldr	r3, [pc, #228]	; (80016b4 <StartTask02+0x36c>)
 80015ce:	78db      	ldrb	r3, [r3, #3]
 80015d0:	2b43      	cmp	r3, #67	; 0x43
 80015d2:	d121      	bne.n	8001618 <StartTask02+0x2d0>
 80015d4:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <StartTask02+0x36c>)
 80015d6:	791b      	ldrb	r3, [r3, #4]
 80015d8:	2b48      	cmp	r3, #72	; 0x48
 80015da:	d11d      	bne.n	8001618 <StartTask02+0x2d0>

						LCD_DrawButton1("  OK", 135, 35, 50, 17, 2, GREEN,
 80015dc:	483a      	ldr	r0, [pc, #232]	; (80016c8 <StartTask02+0x380>)
 80015de:	2301      	movs	r3, #1
 80015e0:	9307      	str	r3, [sp, #28]
 80015e2:	2305      	movs	r3, #5
 80015e4:	9306      	str	r3, [sp, #24]
 80015e6:	2305      	movs	r3, #5
 80015e8:	9305      	str	r3, [sp, #20]
 80015ea:	2300      	movs	r3, #0
 80015ec:	9304      	str	r3, [sp, #16]
 80015ee:	2300      	movs	r3, #0
 80015f0:	9303      	str	r3, [sp, #12]
 80015f2:	23fc      	movs	r3, #252	; 0xfc
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	9302      	str	r3, [sp, #8]
 80015f8:	2302      	movs	r3, #2
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	2311      	movs	r3, #17
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2332      	movs	r3, #50	; 0x32
 8001602:	2223      	movs	r2, #35	; 0x23
 8001604:	2187      	movs	r1, #135	; 0x87
 8001606:	f004 f847 	bl	8005698 <LCD_DrawButton1>
						BLACK, 0, 5, 5, 1);
						USART_WRITE(USART2, "OK\n", 3);
 800160a:	4b30      	ldr	r3, [pc, #192]	; (80016cc <StartTask02+0x384>)
 800160c:	4830      	ldr	r0, [pc, #192]	; (80016d0 <StartTask02+0x388>)
 800160e:	2203      	movs	r2, #3
 8001610:	0019      	movs	r1, r3
 8001612:	f004 f80d 	bl	8005630 <USART_WRITE>
 8001616:	e01d      	b.n	8001654 <StartTask02+0x30c>
					} else {
						LCD_DrawButton1("ERROR", 135, 35, 50, 17, 2, RED, BLACK,
 8001618:	482f      	ldr	r0, [pc, #188]	; (80016d8 <StartTask02+0x390>)
 800161a:	2301      	movs	r3, #1
 800161c:	9307      	str	r3, [sp, #28]
 800161e:	2305      	movs	r3, #5
 8001620:	9306      	str	r3, [sp, #24]
 8001622:	2305      	movs	r3, #5
 8001624:	9305      	str	r3, [sp, #20]
 8001626:	2300      	movs	r3, #0
 8001628:	9304      	str	r3, [sp, #16]
 800162a:	2300      	movs	r3, #0
 800162c:	9303      	str	r3, [sp, #12]
 800162e:	23f8      	movs	r3, #248	; 0xf8
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	2302      	movs	r3, #2
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	2311      	movs	r3, #17
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2332      	movs	r3, #50	; 0x32
 800163e:	2223      	movs	r2, #35	; 0x23
 8001640:	2187      	movs	r1, #135	; 0x87
 8001642:	f004 f829 	bl	8005698 <LCD_DrawButton1>
								0, 5, 5, 1);
						USART_WRITE(USART2, "ERROR\n", 6);
 8001646:	4b25      	ldr	r3, [pc, #148]	; (80016dc <StartTask02+0x394>)
 8001648:	4821      	ldr	r0, [pc, #132]	; (80016d0 <StartTask02+0x388>)
 800164a:	2206      	movs	r2, #6
 800164c:	0019      	movs	r1, r3
 800164e:	f003 ffef 	bl	8005630 <USART_WRITE>
						&& placeHolder[2] == '+') {
 8001652:	e091      	b.n	8001778 <StartTask02+0x430>
 8001654:	e090      	b.n	8001778 <StartTask02+0x430>
					}
				} else {
					LCD_DrawButton1("ERROR", 135, 35, 50, 17, 2, RED, BLACK, 0,
 8001656:	4820      	ldr	r0, [pc, #128]	; (80016d8 <StartTask02+0x390>)
 8001658:	2301      	movs	r3, #1
 800165a:	9307      	str	r3, [sp, #28]
 800165c:	2305      	movs	r3, #5
 800165e:	9306      	str	r3, [sp, #24]
 8001660:	2305      	movs	r3, #5
 8001662:	9305      	str	r3, [sp, #20]
 8001664:	2300      	movs	r3, #0
 8001666:	9304      	str	r3, [sp, #16]
 8001668:	2300      	movs	r3, #0
 800166a:	9303      	str	r3, [sp, #12]
 800166c:	23f8      	movs	r3, #248	; 0xf8
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	2302      	movs	r3, #2
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	2311      	movs	r3, #17
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2332      	movs	r3, #50	; 0x32
 800167c:	2223      	movs	r2, #35	; 0x23
 800167e:	2187      	movs	r1, #135	; 0x87
 8001680:	f004 f80a 	bl	8005698 <LCD_DrawButton1>
							5, 5, 1);
					USART_WRITE(USART2, "ERROR\n", 6);
 8001684:	4b15      	ldr	r3, [pc, #84]	; (80016dc <StartTask02+0x394>)
 8001686:	4812      	ldr	r0, [pc, #72]	; (80016d0 <StartTask02+0x388>)
 8001688:	2206      	movs	r2, #6
 800168a:	0019      	movs	r1, r3
 800168c:	f003 ffd0 	bl	8005630 <USART_WRITE>
 8001690:	e072      	b.n	8001778 <StartTask02+0x430>
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	20000458 	.word	0x20000458
 8001698:	0000ffff 	.word	0x0000ffff
 800169c:	20000490 	.word	0x20000490
 80016a0:	0800a5f8 	.word	0x0800a5f8
 80016a4:	0800a5fc 	.word	0x0800a5fc
 80016a8:	0800a604 	.word	0x0800a604
 80016ac:	200004fc 	.word	0x200004fc
 80016b0:	200004fd 	.word	0x200004fd
 80016b4:	20000498 	.word	0x20000498
 80016b8:	0800a60c 	.word	0x0800a60c
 80016bc:	2000049d 	.word	0x2000049d
 80016c0:	20000014 	.word	0x20000014
 80016c4:	000003ff 	.word	0x000003ff
 80016c8:	0800a61c 	.word	0x0800a61c
 80016cc:	0800a624 	.word	0x0800a624
 80016d0:	40004400 	.word	0x40004400
 80016d4:	2000045f 	.word	0x2000045f
 80016d8:	0800a59c 	.word	0x0800a59c
 80016dc:	0800a628 	.word	0x0800a628
				}

			} else if (plLen <= 3) {
 80016e0:	2315      	movs	r3, #21
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d846      	bhi.n	8001778 <StartTask02+0x430>
				if (placeHolder[0] == 'A' && placeHolder[1] == 'T') {
 80016ea:	4b44      	ldr	r3, [pc, #272]	; (80017fc <StartTask02+0x4b4>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b41      	cmp	r3, #65	; 0x41
 80016f0:	d121      	bne.n	8001736 <StartTask02+0x3ee>
 80016f2:	4b42      	ldr	r3, [pc, #264]	; (80017fc <StartTask02+0x4b4>)
 80016f4:	785b      	ldrb	r3, [r3, #1]
 80016f6:	2b54      	cmp	r3, #84	; 0x54
 80016f8:	d11d      	bne.n	8001736 <StartTask02+0x3ee>
					USART_WRITE(USART2, "OK\n", 3);
 80016fa:	4b41      	ldr	r3, [pc, #260]	; (8001800 <StartTask02+0x4b8>)
 80016fc:	4841      	ldr	r0, [pc, #260]	; (8001804 <StartTask02+0x4bc>)
 80016fe:	2203      	movs	r2, #3
 8001700:	0019      	movs	r1, r3
 8001702:	f003 ff95 	bl	8005630 <USART_WRITE>
					LCD_DrawButton1("  OK", 135, 35, 50, 17, 2, GREEN, BLACK, 0,
 8001706:	4840      	ldr	r0, [pc, #256]	; (8001808 <StartTask02+0x4c0>)
 8001708:	2301      	movs	r3, #1
 800170a:	9307      	str	r3, [sp, #28]
 800170c:	2305      	movs	r3, #5
 800170e:	9306      	str	r3, [sp, #24]
 8001710:	2305      	movs	r3, #5
 8001712:	9305      	str	r3, [sp, #20]
 8001714:	2300      	movs	r3, #0
 8001716:	9304      	str	r3, [sp, #16]
 8001718:	2300      	movs	r3, #0
 800171a:	9303      	str	r3, [sp, #12]
 800171c:	23fc      	movs	r3, #252	; 0xfc
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	9302      	str	r3, [sp, #8]
 8001722:	2302      	movs	r3, #2
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	2311      	movs	r3, #17
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2332      	movs	r3, #50	; 0x32
 800172c:	2223      	movs	r2, #35	; 0x23
 800172e:	2187      	movs	r1, #135	; 0x87
 8001730:	f003 ffb2 	bl	8005698 <LCD_DrawButton1>
 8001734:	e020      	b.n	8001778 <StartTask02+0x430>
							5, 5, 1);
				} else if (placeHolder[0] != 'A') {
 8001736:	4b31      	ldr	r3, [pc, #196]	; (80017fc <StartTask02+0x4b4>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b41      	cmp	r3, #65	; 0x41
 800173c:	d01c      	beq.n	8001778 <StartTask02+0x430>
					LCD_DrawButton1("ERROR", 135, 35, 50, 17, 2, RED, BLACK, 0,
 800173e:	4833      	ldr	r0, [pc, #204]	; (800180c <StartTask02+0x4c4>)
 8001740:	2301      	movs	r3, #1
 8001742:	9307      	str	r3, [sp, #28]
 8001744:	2305      	movs	r3, #5
 8001746:	9306      	str	r3, [sp, #24]
 8001748:	2305      	movs	r3, #5
 800174a:	9305      	str	r3, [sp, #20]
 800174c:	2300      	movs	r3, #0
 800174e:	9304      	str	r3, [sp, #16]
 8001750:	2300      	movs	r3, #0
 8001752:	9303      	str	r3, [sp, #12]
 8001754:	23f8      	movs	r3, #248	; 0xf8
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	9302      	str	r3, [sp, #8]
 800175a:	2302      	movs	r3, #2
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	2311      	movs	r3, #17
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2332      	movs	r3, #50	; 0x32
 8001764:	2223      	movs	r2, #35	; 0x23
 8001766:	2187      	movs	r1, #135	; 0x87
 8001768:	f003 ff96 	bl	8005698 <LCD_DrawButton1>
							5, 5, 1);
					USART_WRITE(USART2, "ERROR\n", 6);
 800176c:	4b28      	ldr	r3, [pc, #160]	; (8001810 <StartTask02+0x4c8>)
 800176e:	4825      	ldr	r0, [pc, #148]	; (8001804 <StartTask02+0x4bc>)
 8001770:	2206      	movs	r2, #6
 8001772:	0019      	movs	r1, r3
 8001774:	f003 ff5c 	bl	8005630 <USART_WRITE>
				}
			}
			cmdrecFlag = false;
 8001778:	4b26      	ldr	r3, [pc, #152]	; (8001814 <StartTask02+0x4cc>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
		}
		//==================================================//
		if (button3Flag) {
 800177e:	4b26      	ldr	r3, [pc, #152]	; (8001818 <StartTask02+0x4d0>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d030      	beq.n	80017e8 <StartTask02+0x4a0>
//			cnfModeFlag ^= cnfModeFlag;
			LCD_SetTextSize(1);
 8001786:	2001      	movs	r0, #1
 8001788:	f005 fe4a 	bl	8007420 <LCD_SetTextSize>
			LCD_SetTextColor(GREEN, BLACK);
 800178c:	23fc      	movs	r3, #252	; 0xfc
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	2100      	movs	r1, #0
 8001792:	0018      	movs	r0, r3
 8001794:	f005 fe5a 	bl	800744c <LCD_SetTextColor>
			LCD_SetCursor(20, 20);
 8001798:	2114      	movs	r1, #20
 800179a:	2014      	movs	r0, #20
 800179c:	f005 fe2a 	bl	80073f4 <LCD_SetCursor>
			LCD_Printf("                   ");
 80017a0:	4b1e      	ldr	r3, [pc, #120]	; (800181c <StartTask02+0x4d4>)
 80017a2:	0018      	movs	r0, r3
 80017a4:	f005 fd2a 	bl	80071fc <LCD_Printf>
			LCD_SetCursor(20, 20);
 80017a8:	2114      	movs	r1, #20
 80017aa:	2014      	movs	r0, #20
 80017ac:	f005 fe22 	bl	80073f4 <LCD_SetCursor>
			if (cnfModeFlag) {
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <StartTask02+0x4d8>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00a      	beq.n	80017ce <StartTask02+0x486>
				LCD_Printf("Device CNF MODE(DI)");
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <StartTask02+0x4dc>)
 80017ba:	0018      	movs	r0, r3
 80017bc:	f005 fd1e 	bl	80071fc <LCD_Printf>
				cnfModeFlag = false;
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <StartTask02+0x4d8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
				cmdprintFlag = false;
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <StartTask02+0x4e0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
 80017cc:	e009      	b.n	80017e2 <StartTask02+0x49a>
			} else {
				LCD_Printf("Device CNF MODE(EN)");
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <StartTask02+0x4e4>)
 80017d0:	0018      	movs	r0, r3
 80017d2:	f005 fd13 	bl	80071fc <LCD_Printf>
				cnfModeFlag = true;
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <StartTask02+0x4d8>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]
				cmdprintFlag = true;
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <StartTask02+0x4e0>)
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
			}
			button3Flag = false;
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <StartTask02+0x4d0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]

		}
		osSemaphoreRelease(myBinarySem01Handle);
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <StartTask02+0x4e8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	0018      	movs	r0, r3
 80017ee:	f006 f957 	bl	8007aa0 <osSemaphoreRelease>
		osDelay(50);
 80017f2:	2032      	movs	r0, #50	; 0x32
 80017f4:	f006 f8c2 	bl	800797c <osDelay>
	for (;;) {
 80017f8:	e5aa      	b.n	8001350 <StartTask02+0x8>
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	20000498 	.word	0x20000498
 8001800:	0800a624 	.word	0x0800a624
 8001804:	40004400 	.word	0x40004400
 8001808:	0800a61c 	.word	0x0800a61c
 800180c:	0800a59c 	.word	0x0800a59c
 8001810:	0800a628 	.word	0x0800a628
 8001814:	200004fd 	.word	0x200004fd
 8001818:	2000045e 	.word	0x2000045e
 800181c:	0800a5a4 	.word	0x0800a5a4
 8001820:	200004fe 	.word	0x200004fe
 8001824:	0800a5b8 	.word	0x0800a5b8
 8001828:	200004fc 	.word	0x200004fc
 800182c:	0800a630 	.word	0x0800a630
 8001830:	20000458 	.word	0x20000458

08001834 <StartTask03>:
 * @brief Function implementing the myTask03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const *argument) {
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b087      	sub	sp, #28
 8001838:	af02      	add	r7, sp, #8
 800183a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */

	for (;;) {
		osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 800183c:	4bc9      	ldr	r3, [pc, #804]	; (8001b64 <StartTask03+0x330>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2201      	movs	r2, #1
 8001842:	4252      	negs	r2, r2
 8001844:	0011      	movs	r1, r2
 8001846:	0018      	movs	r0, r3
 8001848:	f006 f8e0 	bl	8007a0c <osSemaphoreWait>
		int16_t w1, w2;
		uint16_t color1, color2;
		if (adcData[0] > 250 && adcData[0] < 501) {
 800184c:	4bc6      	ldr	r3, [pc, #792]	; (8001b68 <StartTask03+0x334>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	2bfa      	cmp	r3, #250	; 0xfa
 8001852:	d800      	bhi.n	8001856 <StartTask03+0x22>
 8001854:	e06b      	b.n	800192e <StartTask03+0xfa>
 8001856:	4bc4      	ldr	r3, [pc, #784]	; (8001b68 <StartTask03+0x334>)
 8001858:	881a      	ldrh	r2, [r3, #0]
 800185a:	23fa      	movs	r3, #250	; 0xfa
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	429a      	cmp	r2, r3
 8001860:	d865      	bhi.n	800192e <StartTask03+0xfa>
			w1 = map(adcData[0], 251, 500, 0, 92);
 8001862:	4bc1      	ldr	r3, [pc, #772]	; (8001b68 <StartTask03+0x334>)
 8001864:	8818      	ldrh	r0, [r3, #0]
 8001866:	23fa      	movs	r3, #250	; 0xfa
 8001868:	005a      	lsls	r2, r3, #1
 800186a:	235c      	movs	r3, #92	; 0x5c
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2300      	movs	r3, #0
 8001870:	21fb      	movs	r1, #251	; 0xfb
 8001872:	f002 ff2b 	bl	80046cc <map>
 8001876:	0003      	movs	r3, r0
 8001878:	001a      	movs	r2, r3
 800187a:	210a      	movs	r1, #10
 800187c:	187b      	adds	r3, r7, r1
 800187e:	801a      	strh	r2, [r3, #0]
			if (w1 <= 35 && w1 > 0)
 8001880:	000a      	movs	r2, r1
 8001882:	18bb      	adds	r3, r7, r2
 8001884:	2100      	movs	r1, #0
 8001886:	5e5b      	ldrsh	r3, [r3, r1]
 8001888:	2b23      	cmp	r3, #35	; 0x23
 800188a:	dc09      	bgt.n	80018a0 <StartTask03+0x6c>
 800188c:	18bb      	adds	r3, r7, r2
 800188e:	2200      	movs	r2, #0
 8001890:	5e9b      	ldrsh	r3, [r3, r2]
 8001892:	2b00      	cmp	r3, #0
 8001894:	dd04      	ble.n	80018a0 <StartTask03+0x6c>
				color1 = PINK;
 8001896:	230e      	movs	r3, #14
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	4ab4      	ldr	r2, [pc, #720]	; (8001b6c <StartTask03+0x338>)
 800189c:	801a      	strh	r2, [r3, #0]
 800189e:	e01e      	b.n	80018de <StartTask03+0xaa>
			else if (w1 <= 75 && w1 > 35)
 80018a0:	220a      	movs	r2, #10
 80018a2:	18bb      	adds	r3, r7, r2
 80018a4:	2100      	movs	r1, #0
 80018a6:	5e5b      	ldrsh	r3, [r3, r1]
 80018a8:	2b4b      	cmp	r3, #75	; 0x4b
 80018aa:	dc09      	bgt.n	80018c0 <StartTask03+0x8c>
 80018ac:	18bb      	adds	r3, r7, r2
 80018ae:	2200      	movs	r2, #0
 80018b0:	5e9b      	ldrsh	r3, [r3, r2]
 80018b2:	2b23      	cmp	r3, #35	; 0x23
 80018b4:	dd04      	ble.n	80018c0 <StartTask03+0x8c>
				color1 = ORANGE;
 80018b6:	230e      	movs	r3, #14
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	4aad      	ldr	r2, [pc, #692]	; (8001b70 <StartTask03+0x33c>)
 80018bc:	801a      	strh	r2, [r3, #0]
 80018be:	e00e      	b.n	80018de <StartTask03+0xaa>
			else if (w1 < 92 && w1 > 75)
 80018c0:	220a      	movs	r2, #10
 80018c2:	18bb      	adds	r3, r7, r2
 80018c4:	2100      	movs	r1, #0
 80018c6:	5e5b      	ldrsh	r3, [r3, r1]
 80018c8:	2b5b      	cmp	r3, #91	; 0x5b
 80018ca:	dc08      	bgt.n	80018de <StartTask03+0xaa>
 80018cc:	18bb      	adds	r3, r7, r2
 80018ce:	2200      	movs	r2, #0
 80018d0:	5e9b      	ldrsh	r3, [r3, r2]
 80018d2:	2b4b      	cmp	r3, #75	; 0x4b
 80018d4:	dd03      	ble.n	80018de <StartTask03+0xaa>
				color1 = RED;
 80018d6:	230e      	movs	r3, #14
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	4aa6      	ldr	r2, [pc, #664]	; (8001b74 <StartTask03+0x340>)
 80018dc:	801a      	strh	r2, [r3, #0]
			LCD_FillRect(116, 150 + 1, w1, 20 - 2, color1);
 80018de:	240a      	movs	r4, #10
 80018e0:	193b      	adds	r3, r7, r4
 80018e2:	2200      	movs	r2, #0
 80018e4:	5e9a      	ldrsh	r2, [r3, r2]
 80018e6:	230e      	movs	r3, #14
 80018e8:	18fb      	adds	r3, r7, r3
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2312      	movs	r3, #18
 80018f0:	2197      	movs	r1, #151	; 0x97
 80018f2:	2074      	movs	r0, #116	; 0x74
 80018f4:	f005 f916 	bl	8006b24 <LCD_FillRect>
			LCD_FillRect(116 + w1, 150 + 1, 210 - 118 - w1, 20 - 2, YELLOW);
 80018f8:	0022      	movs	r2, r4
 80018fa:	18bb      	adds	r3, r7, r2
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	3374      	adds	r3, #116	; 0x74
 8001900:	b29b      	uxth	r3, r3
 8001902:	b218      	sxth	r0, r3
 8001904:	18bb      	adds	r3, r7, r2
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	225c      	movs	r2, #92	; 0x5c
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	b29b      	uxth	r3, r3
 800190e:	b21a      	sxth	r2, r3
 8001910:	4b99      	ldr	r3, [pc, #612]	; (8001b78 <StartTask03+0x344>)
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2312      	movs	r3, #18
 8001916:	2197      	movs	r1, #151	; 0x97
 8001918:	f005 f904 	bl	8006b24 <LCD_FillRect>
			LCD_FillRect(21, 150 + 1, 94, 20 - 2, YELLOW);
 800191c:	4b96      	ldr	r3, [pc, #600]	; (8001b78 <StartTask03+0x344>)
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2312      	movs	r3, #18
 8001922:	225e      	movs	r2, #94	; 0x5e
 8001924:	2197      	movs	r1, #151	; 0x97
 8001926:	2015      	movs	r0, #21
 8001928:	f005 f8fc 	bl	8006b24 <LCD_FillRect>
 800192c:	e065      	b.n	80019fa <StartTask03+0x1c6>
		} else if (adcData[0] <= 250 && adcData[0] >= 0) {
 800192e:	4b8e      	ldr	r3, [pc, #568]	; (8001b68 <StartTask03+0x334>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	2bfa      	cmp	r3, #250	; 0xfa
 8001934:	d861      	bhi.n	80019fa <StartTask03+0x1c6>
			w1 = map(adcData[0], 0, 250, 0, 92);
 8001936:	4b8c      	ldr	r3, [pc, #560]	; (8001b68 <StartTask03+0x334>)
 8001938:	8818      	ldrh	r0, [r3, #0]
 800193a:	235c      	movs	r3, #92	; 0x5c
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2300      	movs	r3, #0
 8001940:	22fa      	movs	r2, #250	; 0xfa
 8001942:	2100      	movs	r1, #0
 8001944:	f002 fec2 	bl	80046cc <map>
 8001948:	0003      	movs	r3, r0
 800194a:	001a      	movs	r2, r3
 800194c:	240a      	movs	r4, #10
 800194e:	193b      	adds	r3, r7, r4
 8001950:	801a      	strh	r2, [r3, #0]
			LCD_FillRect(116, 150 + 1, 93, 20 - 2, YELLOW);
 8001952:	4b89      	ldr	r3, [pc, #548]	; (8001b78 <StartTask03+0x344>)
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2312      	movs	r3, #18
 8001958:	225d      	movs	r2, #93	; 0x5d
 800195a:	2197      	movs	r1, #151	; 0x97
 800195c:	2074      	movs	r0, #116	; 0x74
 800195e:	f005 f8e1 	bl	8006b24 <LCD_FillRect>
			LCD_FillRect(21, 150 + 1, w1, 20 - 2, YELLOW);
 8001962:	193b      	adds	r3, r7, r4
 8001964:	2200      	movs	r2, #0
 8001966:	5e9a      	ldrsh	r2, [r3, r2]
 8001968:	4b83      	ldr	r3, [pc, #524]	; (8001b78 <StartTask03+0x344>)
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2312      	movs	r3, #18
 800196e:	2197      	movs	r1, #151	; 0x97
 8001970:	2015      	movs	r0, #21
 8001972:	f005 f8d7 	bl	8006b24 <LCD_FillRect>
			if (w1 <= 20 && w1 > 0)
 8001976:	193b      	adds	r3, r7, r4
 8001978:	2200      	movs	r2, #0
 800197a:	5e9b      	ldrsh	r3, [r3, r2]
 800197c:	2b14      	cmp	r3, #20
 800197e:	dc09      	bgt.n	8001994 <StartTask03+0x160>
 8001980:	193b      	adds	r3, r7, r4
 8001982:	2200      	movs	r2, #0
 8001984:	5e9b      	ldrsh	r3, [r3, r2]
 8001986:	2b00      	cmp	r3, #0
 8001988:	dd04      	ble.n	8001994 <StartTask03+0x160>
				color1 = NAVY;
 800198a:	230e      	movs	r3, #14
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	220f      	movs	r2, #15
 8001990:	801a      	strh	r2, [r3, #0]
 8001992:	e01e      	b.n	80019d2 <StartTask03+0x19e>
			else if (w1 <= 58 && w1 > 20)
 8001994:	220a      	movs	r2, #10
 8001996:	18bb      	adds	r3, r7, r2
 8001998:	2100      	movs	r1, #0
 800199a:	5e5b      	ldrsh	r3, [r3, r1]
 800199c:	2b3a      	cmp	r3, #58	; 0x3a
 800199e:	dc09      	bgt.n	80019b4 <StartTask03+0x180>
 80019a0:	18bb      	adds	r3, r7, r2
 80019a2:	2200      	movs	r2, #0
 80019a4:	5e9b      	ldrsh	r3, [r3, r2]
 80019a6:	2b14      	cmp	r3, #20
 80019a8:	dd04      	ble.n	80019b4 <StartTask03+0x180>
				color1 = BLUE;
 80019aa:	230e      	movs	r3, #14
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	221f      	movs	r2, #31
 80019b0:	801a      	strh	r2, [r3, #0]
 80019b2:	e00e      	b.n	80019d2 <StartTask03+0x19e>
			else if (w1 < 92 && w1 > 58)
 80019b4:	220a      	movs	r2, #10
 80019b6:	18bb      	adds	r3, r7, r2
 80019b8:	2100      	movs	r1, #0
 80019ba:	5e5b      	ldrsh	r3, [r3, r1]
 80019bc:	2b5b      	cmp	r3, #91	; 0x5b
 80019be:	dc08      	bgt.n	80019d2 <StartTask03+0x19e>
 80019c0:	18bb      	adds	r3, r7, r2
 80019c2:	2200      	movs	r2, #0
 80019c4:	5e9b      	ldrsh	r3, [r3, r2]
 80019c6:	2b3a      	cmp	r3, #58	; 0x3a
 80019c8:	dd03      	ble.n	80019d2 <StartTask03+0x19e>
				color1 = CYAN;
 80019ca:	230e      	movs	r3, #14
 80019cc:	18fb      	adds	r3, r7, r3
 80019ce:	4a6b      	ldr	r2, [pc, #428]	; (8001b7c <StartTask03+0x348>)
 80019d0:	801a      	strh	r2, [r3, #0]
			LCD_FillRect(21 + w1, 150 + 1, 94 - w1, 20 - 2, color1);
 80019d2:	220a      	movs	r2, #10
 80019d4:	18bb      	adds	r3, r7, r2
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	3315      	adds	r3, #21
 80019da:	b29b      	uxth	r3, r3
 80019dc:	b218      	sxth	r0, r3
 80019de:	18bb      	adds	r3, r7, r2
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	225e      	movs	r2, #94	; 0x5e
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	b21a      	sxth	r2, r3
 80019ea:	230e      	movs	r3, #14
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2312      	movs	r3, #18
 80019f4:	2197      	movs	r1, #151	; 0x97
 80019f6:	f005 f895 	bl	8006b24 <LCD_FillRect>
		}

		if (adcData[1] > 250 && adcData[1] < 501) {
 80019fa:	4b5b      	ldr	r3, [pc, #364]	; (8001b68 <StartTask03+0x334>)
 80019fc:	885b      	ldrh	r3, [r3, #2]
 80019fe:	2bfa      	cmp	r3, #250	; 0xfa
 8001a00:	d800      	bhi.n	8001a04 <StartTask03+0x1d0>
 8001a02:	e06b      	b.n	8001adc <StartTask03+0x2a8>
 8001a04:	4b58      	ldr	r3, [pc, #352]	; (8001b68 <StartTask03+0x334>)
 8001a06:	885a      	ldrh	r2, [r3, #2]
 8001a08:	23fa      	movs	r3, #250	; 0xfa
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d865      	bhi.n	8001adc <StartTask03+0x2a8>
			w2 = map(adcData[1], 251, 500, 0, 92);
 8001a10:	4b55      	ldr	r3, [pc, #340]	; (8001b68 <StartTask03+0x334>)
 8001a12:	8858      	ldrh	r0, [r3, #2]
 8001a14:	23fa      	movs	r3, #250	; 0xfa
 8001a16:	005a      	lsls	r2, r3, #1
 8001a18:	235c      	movs	r3, #92	; 0x5c
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	21fb      	movs	r1, #251	; 0xfb
 8001a20:	f002 fe54 	bl	80046cc <map>
 8001a24:	0003      	movs	r3, r0
 8001a26:	001a      	movs	r2, r3
 8001a28:	2108      	movs	r1, #8
 8001a2a:	187b      	adds	r3, r7, r1
 8001a2c:	801a      	strh	r2, [r3, #0]
			if (w2 <= 35 && w2 > 0)
 8001a2e:	000a      	movs	r2, r1
 8001a30:	18bb      	adds	r3, r7, r2
 8001a32:	2100      	movs	r1, #0
 8001a34:	5e5b      	ldrsh	r3, [r3, r1]
 8001a36:	2b23      	cmp	r3, #35	; 0x23
 8001a38:	dc09      	bgt.n	8001a4e <StartTask03+0x21a>
 8001a3a:	18bb      	adds	r3, r7, r2
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	5e9b      	ldrsh	r3, [r3, r2]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	dd04      	ble.n	8001a4e <StartTask03+0x21a>
				color2 = PINK;
 8001a44:	230c      	movs	r3, #12
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	4a48      	ldr	r2, [pc, #288]	; (8001b6c <StartTask03+0x338>)
 8001a4a:	801a      	strh	r2, [r3, #0]
 8001a4c:	e01e      	b.n	8001a8c <StartTask03+0x258>
			else if (w2 <= 75 && w2 > 35)
 8001a4e:	2208      	movs	r2, #8
 8001a50:	18bb      	adds	r3, r7, r2
 8001a52:	2100      	movs	r1, #0
 8001a54:	5e5b      	ldrsh	r3, [r3, r1]
 8001a56:	2b4b      	cmp	r3, #75	; 0x4b
 8001a58:	dc09      	bgt.n	8001a6e <StartTask03+0x23a>
 8001a5a:	18bb      	adds	r3, r7, r2
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	5e9b      	ldrsh	r3, [r3, r2]
 8001a60:	2b23      	cmp	r3, #35	; 0x23
 8001a62:	dd04      	ble.n	8001a6e <StartTask03+0x23a>
				color2 = ORANGE;
 8001a64:	230c      	movs	r3, #12
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	4a41      	ldr	r2, [pc, #260]	; (8001b70 <StartTask03+0x33c>)
 8001a6a:	801a      	strh	r2, [r3, #0]
 8001a6c:	e00e      	b.n	8001a8c <StartTask03+0x258>
			else if (w2 < 92 && w2 > 75)
 8001a6e:	2208      	movs	r2, #8
 8001a70:	18bb      	adds	r3, r7, r2
 8001a72:	2100      	movs	r1, #0
 8001a74:	5e5b      	ldrsh	r3, [r3, r1]
 8001a76:	2b5b      	cmp	r3, #91	; 0x5b
 8001a78:	dc08      	bgt.n	8001a8c <StartTask03+0x258>
 8001a7a:	18bb      	adds	r3, r7, r2
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	5e9b      	ldrsh	r3, [r3, r2]
 8001a80:	2b4b      	cmp	r3, #75	; 0x4b
 8001a82:	dd03      	ble.n	8001a8c <StartTask03+0x258>
				color2 = RED;
 8001a84:	230c      	movs	r3, #12
 8001a86:	18fb      	adds	r3, r7, r3
 8001a88:	4a3a      	ldr	r2, [pc, #232]	; (8001b74 <StartTask03+0x340>)
 8001a8a:	801a      	strh	r2, [r3, #0]
			LCD_FillRect(116, 190 + 1, w2, 20 - 2, color2);
 8001a8c:	2408      	movs	r4, #8
 8001a8e:	193b      	adds	r3, r7, r4
 8001a90:	2200      	movs	r2, #0
 8001a92:	5e9a      	ldrsh	r2, [r3, r2]
 8001a94:	230c      	movs	r3, #12
 8001a96:	18fb      	adds	r3, r7, r3
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2312      	movs	r3, #18
 8001a9e:	21bf      	movs	r1, #191	; 0xbf
 8001aa0:	2074      	movs	r0, #116	; 0x74
 8001aa2:	f005 f83f 	bl	8006b24 <LCD_FillRect>
			LCD_FillRect(116 + w2, 190 + 1, 210 - 118 - w2, 20 - 2, YELLOW);
 8001aa6:	0022      	movs	r2, r4
 8001aa8:	18bb      	adds	r3, r7, r2
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	3374      	adds	r3, #116	; 0x74
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b218      	sxth	r0, r3
 8001ab2:	18bb      	adds	r3, r7, r2
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	225c      	movs	r2, #92	; 0x5c
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <StartTask03+0x344>)
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2312      	movs	r3, #18
 8001ac4:	21bf      	movs	r1, #191	; 0xbf
 8001ac6:	f005 f82d 	bl	8006b24 <LCD_FillRect>
			LCD_FillRect(21, 190 + 1, 94, 20 - 2, YELLOW);
 8001aca:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <StartTask03+0x344>)
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2312      	movs	r3, #18
 8001ad0:	225e      	movs	r2, #94	; 0x5e
 8001ad2:	21bf      	movs	r1, #191	; 0xbf
 8001ad4:	2015      	movs	r0, #21
 8001ad6:	f005 f825 	bl	8006b24 <LCD_FillRect>
 8001ada:	e074      	b.n	8001bc6 <StartTask03+0x392>
		} else if (adcData[1] <= 250 && adcData[1] >= 0) {
 8001adc:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <StartTask03+0x334>)
 8001ade:	885b      	ldrh	r3, [r3, #2]
 8001ae0:	2bfa      	cmp	r3, #250	; 0xfa
 8001ae2:	d900      	bls.n	8001ae6 <StartTask03+0x2b2>
 8001ae4:	e06f      	b.n	8001bc6 <StartTask03+0x392>
			w2 = map(adcData[1], 0, 250, 0, 92);
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <StartTask03+0x334>)
 8001ae8:	8858      	ldrh	r0, [r3, #2]
 8001aea:	235c      	movs	r3, #92	; 0x5c
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2300      	movs	r3, #0
 8001af0:	22fa      	movs	r2, #250	; 0xfa
 8001af2:	2100      	movs	r1, #0
 8001af4:	f002 fdea 	bl	80046cc <map>
 8001af8:	0003      	movs	r3, r0
 8001afa:	001a      	movs	r2, r3
 8001afc:	2408      	movs	r4, #8
 8001afe:	193b      	adds	r3, r7, r4
 8001b00:	801a      	strh	r2, [r3, #0]
			LCD_FillRect(116, 190 + 1, 93, 20 - 2, YELLOW);
 8001b02:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <StartTask03+0x344>)
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2312      	movs	r3, #18
 8001b08:	225d      	movs	r2, #93	; 0x5d
 8001b0a:	21bf      	movs	r1, #191	; 0xbf
 8001b0c:	2074      	movs	r0, #116	; 0x74
 8001b0e:	f005 f809 	bl	8006b24 <LCD_FillRect>
			LCD_FillRect(21, 190 + 1, w2, 20 - 2, YELLOW);
 8001b12:	193b      	adds	r3, r7, r4
 8001b14:	2200      	movs	r2, #0
 8001b16:	5e9a      	ldrsh	r2, [r3, r2]
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <StartTask03+0x344>)
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2312      	movs	r3, #18
 8001b1e:	21bf      	movs	r1, #191	; 0xbf
 8001b20:	2015      	movs	r0, #21
 8001b22:	f004 ffff 	bl	8006b24 <LCD_FillRect>
			if (w2 <= 20 && w2 > 0)
 8001b26:	193b      	adds	r3, r7, r4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	5e9b      	ldrsh	r3, [r3, r2]
 8001b2c:	2b14      	cmp	r3, #20
 8001b2e:	dc09      	bgt.n	8001b44 <StartTask03+0x310>
 8001b30:	193b      	adds	r3, r7, r4
 8001b32:	2200      	movs	r2, #0
 8001b34:	5e9b      	ldrsh	r3, [r3, r2]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	dd04      	ble.n	8001b44 <StartTask03+0x310>
				color2 = NAVY;
 8001b3a:	230c      	movs	r3, #12
 8001b3c:	18fb      	adds	r3, r7, r3
 8001b3e:	220f      	movs	r2, #15
 8001b40:	801a      	strh	r2, [r3, #0]
 8001b42:	e02c      	b.n	8001b9e <StartTask03+0x36a>
			else if (w2 <= 58 && w2 > 20)
 8001b44:	2208      	movs	r2, #8
 8001b46:	18bb      	adds	r3, r7, r2
 8001b48:	2100      	movs	r1, #0
 8001b4a:	5e5b      	ldrsh	r3, [r3, r1]
 8001b4c:	2b3a      	cmp	r3, #58	; 0x3a
 8001b4e:	dc17      	bgt.n	8001b80 <StartTask03+0x34c>
 8001b50:	18bb      	adds	r3, r7, r2
 8001b52:	2200      	movs	r2, #0
 8001b54:	5e9b      	ldrsh	r3, [r3, r2]
 8001b56:	2b14      	cmp	r3, #20
 8001b58:	dd12      	ble.n	8001b80 <StartTask03+0x34c>
				color2 = BLUE;
 8001b5a:	230c      	movs	r3, #12
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	221f      	movs	r2, #31
 8001b60:	801a      	strh	r2, [r3, #0]
 8001b62:	e01c      	b.n	8001b9e <StartTask03+0x36a>
 8001b64:	20000458 	.word	0x20000458
 8001b68:	20000490 	.word	0x20000490
 8001b6c:	fffffadf 	.word	0xfffffadf
 8001b70:	fffffc80 	.word	0xfffffc80
 8001b74:	fffff800 	.word	0xfffff800
 8001b78:	0000ffe0 	.word	0x0000ffe0
 8001b7c:	000007ff 	.word	0x000007ff
			else if (w2 < 92 && w2 > 58)
 8001b80:	2208      	movs	r2, #8
 8001b82:	18bb      	adds	r3, r7, r2
 8001b84:	2100      	movs	r1, #0
 8001b86:	5e5b      	ldrsh	r3, [r3, r1]
 8001b88:	2b5b      	cmp	r3, #91	; 0x5b
 8001b8a:	dc08      	bgt.n	8001b9e <StartTask03+0x36a>
 8001b8c:	18bb      	adds	r3, r7, r2
 8001b8e:	2200      	movs	r2, #0
 8001b90:	5e9b      	ldrsh	r3, [r3, r2]
 8001b92:	2b3a      	cmp	r3, #58	; 0x3a
 8001b94:	dd03      	ble.n	8001b9e <StartTask03+0x36a>
				color2 = CYAN;
 8001b96:	230c      	movs	r3, #12
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	4a36      	ldr	r2, [pc, #216]	; (8001c74 <StartTask03+0x440>)
 8001b9c:	801a      	strh	r2, [r3, #0]
			LCD_FillRect(21 + w2, 190 + 1, 94 - w2, 20 - 2, color2);
 8001b9e:	2208      	movs	r2, #8
 8001ba0:	18bb      	adds	r3, r7, r2
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	3315      	adds	r3, #21
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	b218      	sxth	r0, r3
 8001baa:	18bb      	adds	r3, r7, r2
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	225e      	movs	r2, #94	; 0x5e
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	230c      	movs	r3, #12
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2312      	movs	r3, #18
 8001bc0:	21bf      	movs	r1, #191	; 0xbf
 8001bc2:	f004 ffaf 	bl	8006b24 <LCD_FillRect>
		}

		if (button1Flag == true) {
 8001bc6:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <StartTask03+0x444>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <StartTask03+0x3a0>
			button1Flag = false;
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <StartTask03+0x444>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
		}
		if (button2Flag == true) {
 8001bd4:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <StartTask03+0x448>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d037      	beq.n	8001c4c <StartTask03+0x418>
			USART_WRITE(USART2, "Button2 Ok\n", 11);
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <StartTask03+0x44c>)
 8001bde:	4829      	ldr	r0, [pc, #164]	; (8001c84 <StartTask03+0x450>)
 8001be0:	220b      	movs	r2, #11
 8001be2:	0019      	movs	r1, r3
 8001be4:	f003 fd24 	bl	8005630 <USART_WRITE>
			if (connectFlag) {
 8001be8:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <StartTask03+0x454>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d02a      	beq.n	8001c46 <StartTask03+0x412>
				if (connectbuttontoggleFlag) {
 8001bf0:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <StartTask03+0x458>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d013      	beq.n	8001c20 <StartTask03+0x3ec>
					LCD_SetCursor(220, 90);
 8001bf8:	215a      	movs	r1, #90	; 0x5a
 8001bfa:	20dc      	movs	r0, #220	; 0xdc
 8001bfc:	f005 fbfa 	bl	80073f4 <LCD_SetCursor>
					LCD_SetTextColor(RED, WHITE);
 8001c00:	4a23      	ldr	r2, [pc, #140]	; (8001c90 <StartTask03+0x45c>)
 8001c02:	23f8      	movs	r3, #248	; 0xf8
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	0011      	movs	r1, r2
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f005 fc1f 	bl	800744c <LCD_SetTextColor>
					LCD_Printf(B2_dispStr[2]);
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <StartTask03+0x460>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	0018      	movs	r0, r3
 8001c14:	f005 faf2 	bl	80071fc <LCD_Printf>
					connectbuttontoggleFlag = false;
 8001c18:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <StartTask03+0x458>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	e012      	b.n	8001c46 <StartTask03+0x412>
				} else {
					LCD_SetCursor(220, 90);
 8001c20:	215a      	movs	r1, #90	; 0x5a
 8001c22:	20dc      	movs	r0, #220	; 0xdc
 8001c24:	f005 fbe6 	bl	80073f4 <LCD_SetCursor>
					LCD_SetTextColor(GREEN, WHITE);
 8001c28:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <StartTask03+0x45c>)
 8001c2a:	23fc      	movs	r3, #252	; 0xfc
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	0011      	movs	r1, r2
 8001c30:	0018      	movs	r0, r3
 8001c32:	f005 fc0b 	bl	800744c <LCD_SetTextColor>
					LCD_Printf(B2_dispStr[1]);
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <StartTask03+0x460>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f005 fade 	bl	80071fc <LCD_Printf>
					connectbuttontoggleFlag = true;
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <StartTask03+0x458>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
				}
			}
			button2Flag = false;
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <StartTask03+0x448>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
		}
		if (button3Flag == true) {
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <StartTask03+0x464>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <StartTask03+0x42c>
			USART_WRITE(USART2, "Button3 Ok\n", 11);
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <StartTask03+0x468>)
 8001c56:	480b      	ldr	r0, [pc, #44]	; (8001c84 <StartTask03+0x450>)
 8001c58:	220b      	movs	r2, #11
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	f003 fce8 	bl	8005630 <USART_WRITE>
			//			button3Flag = false;
		}

		osSemaphoreRelease(myBinarySem01Handle);
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <StartTask03+0x46c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	0018      	movs	r0, r3
 8001c66:	f005 ff1b 	bl	8007aa0 <osSemaphoreRelease>
		osDelay(10);
 8001c6a:	200a      	movs	r0, #10
 8001c6c:	f005 fe86 	bl	800797c <osDelay>
	for (;;) {
 8001c70:	e5e4      	b.n	800183c <StartTask03+0x8>
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	000007ff 	.word	0x000007ff
 8001c78:	2000045c 	.word	0x2000045c
 8001c7c:	2000045d 	.word	0x2000045d
 8001c80:	0800a644 	.word	0x0800a644
 8001c84:	40004400 	.word	0x40004400
 8001c88:	2000045f 	.word	0x2000045f
 8001c8c:	20000460 	.word	0x20000460
 8001c90:	0000ffff 	.word	0x0000ffff
 8001c94:	20000014 	.word	0x20000014
 8001c98:	2000045e 	.word	0x2000045e
 8001c9c:	0800a650 	.word	0x0800a650
 8001ca0:	20000458 	.word	0x20000458

08001ca4 <StartTask04>:
 * @brief Function implementing the myTask04 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void const *argument) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask04 */
	/* Infinite loop */
	for (;;) {
//		xl++;

		osDelay(500);
 8001cac:	23fa      	movs	r3, #250	; 0xfa
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f005 fe63 	bl	800797c <osDelay>
 8001cb6:	e7f9      	b.n	8001cac <StartTask04+0x8>

08001cb8 <StartTask05>:
 * @brief Function implementing the myTask05 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask05 */
void StartTask05(void const *argument) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask05 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f005 fe5b 	bl	800797c <osDelay>
 8001cc6:	e7fb      	b.n	8001cc0 <StartTask05+0x8>

08001cc8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001cda:	f000 f993 	bl	8002004 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b002      	add	sp, #8
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			; (mov r8, r8)
 8001ce8:	40001400 	.word	0x40001400

08001cec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
}
 8001cf2:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001cf4:	e7fe      	b.n	8001cf4 <Error_Handler+0x8>
	...

08001cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_MspInit+0x50>)
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <HAL_MspInit+0x50>)
 8001d04:	2101      	movs	r1, #1
 8001d06:	430a      	orrs	r2, r1
 8001d08:	619a      	str	r2, [r3, #24]
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_MspInit+0x50>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4013      	ands	r3, r2
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_MspInit+0x50>)
 8001d18:	69da      	ldr	r2, [r3, #28]
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_MspInit+0x50>)
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	0549      	lsls	r1, r1, #21
 8001d20:	430a      	orrs	r2, r1
 8001d22:	61da      	str	r2, [r3, #28]
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <HAL_MspInit+0x50>)
 8001d26:	69da      	ldr	r2, [r3, #28]
 8001d28:	2380      	movs	r3, #128	; 0x80
 8001d2a:	055b      	lsls	r3, r3, #21
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001d32:	2302      	movs	r3, #2
 8001d34:	425b      	negs	r3, r3
 8001d36:	2200      	movs	r2, #0
 8001d38:	2103      	movs	r1, #3
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f000 fa2a 	bl	8002194 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b002      	add	sp, #8
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000

08001d4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b08b      	sub	sp, #44	; 0x2c
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	2414      	movs	r4, #20
 8001d56:	193b      	adds	r3, r7, r4
 8001d58:	0018      	movs	r0, r3
 8001d5a:	2314      	movs	r3, #20
 8001d5c:	001a      	movs	r2, r3
 8001d5e:	2100      	movs	r1, #0
 8001d60:	f007 fe61 	bl	8009a26 <memset>
  if(hspi->Instance==SPI1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a1c      	ldr	r2, [pc, #112]	; (8001ddc <HAL_SPI_MspInit+0x90>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d132      	bne.n	8001dd4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <HAL_SPI_MspInit+0x94>)
 8001d70:	699a      	ldr	r2, [r3, #24]
 8001d72:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <HAL_SPI_MspInit+0x94>)
 8001d74:	2180      	movs	r1, #128	; 0x80
 8001d76:	0149      	lsls	r1, r1, #5
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	619a      	str	r2, [r3, #24]
 8001d7c:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <HAL_SPI_MspInit+0x94>)
 8001d7e:	699a      	ldr	r2, [r3, #24]
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	015b      	lsls	r3, r3, #5
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <HAL_SPI_MspInit+0x94>)
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <HAL_SPI_MspInit+0x94>)
 8001d90:	2180      	movs	r1, #128	; 0x80
 8001d92:	0289      	lsls	r1, r1, #10
 8001d94:	430a      	orrs	r2, r1
 8001d96:	615a      	str	r2, [r3, #20]
 8001d98:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_SPI_MspInit+0x94>)
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	029b      	lsls	r3, r3, #10
 8001da0:	4013      	ands	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001da6:	0021      	movs	r1, r4
 8001da8:	187b      	adds	r3, r7, r1
 8001daa:	22e0      	movs	r2, #224	; 0xe0
 8001dac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	187b      	adds	r3, r7, r1
 8001db0:	2202      	movs	r2, #2
 8001db2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	187b      	adds	r3, r7, r1
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dba:	187b      	adds	r3, r7, r1
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001dc0:	187b      	adds	r3, r7, r1
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	187a      	adds	r2, r7, r1
 8001dc8:	2390      	movs	r3, #144	; 0x90
 8001dca:	05db      	lsls	r3, r3, #23
 8001dcc:	0011      	movs	r1, r2
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f000 fa06 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001dd4:	46c0      	nop			; (mov r8, r8)
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b00b      	add	sp, #44	; 0x2c
 8001dda:	bd90      	pop	{r4, r7, pc}
 8001ddc:	40013000 	.word	0x40013000
 8001de0:	40021000 	.word	0x40021000

08001de4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de4:	b5b0      	push	{r4, r5, r7, lr}
 8001de6:	b08c      	sub	sp, #48	; 0x30
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001df4:	4b37      	ldr	r3, [pc, #220]	; (8001ed4 <HAL_InitTick+0xf0>)
 8001df6:	69da      	ldr	r2, [r3, #28]
 8001df8:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <HAL_InitTick+0xf0>)
 8001dfa:	2120      	movs	r1, #32
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	61da      	str	r2, [r3, #28]
 8001e00:	4b34      	ldr	r3, [pc, #208]	; (8001ed4 <HAL_InitTick+0xf0>)
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	2220      	movs	r2, #32
 8001e06:	4013      	ands	r3, r2
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e0c:	230c      	movs	r3, #12
 8001e0e:	18fa      	adds	r2, r7, r3
 8001e10:	2410      	movs	r4, #16
 8001e12:	193b      	adds	r3, r7, r4
 8001e14:	0011      	movs	r1, r2
 8001e16:	0018      	movs	r0, r3
 8001e18:	f000 ffc4 	bl	8002da4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e1c:	193b      	adds	r3, r7, r4
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d104      	bne.n	8001e32 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e28:	f000 ffa6 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e30:	e004      	b.n	8001e3c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e32:	f000 ffa1 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 8001e36:	0003      	movs	r3, r0
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3e:	4926      	ldr	r1, [pc, #152]	; (8001ed8 <HAL_InitTick+0xf4>)
 8001e40:	0018      	movs	r0, r3
 8001e42:	f7fe f973 	bl	800012c <__udivsi3>
 8001e46:	0003      	movs	r3, r0
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001e4c:	4b23      	ldr	r3, [pc, #140]	; (8001edc <HAL_InitTick+0xf8>)
 8001e4e:	4a24      	ldr	r2, [pc, #144]	; (8001ee0 <HAL_InitTick+0xfc>)
 8001e50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001e52:	4b22      	ldr	r3, [pc, #136]	; (8001edc <HAL_InitTick+0xf8>)
 8001e54:	4a23      	ldr	r2, [pc, #140]	; (8001ee4 <HAL_InitTick+0x100>)
 8001e56:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001e58:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_InitTick+0xf8>)
 8001e5a:	6a3a      	ldr	r2, [r7, #32]
 8001e5c:	605a      	str	r2, [r3, #4]
  htim7.Init.ClockDivision = 0;
 8001e5e:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <HAL_InitTick+0xf8>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_InitTick+0xf8>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <HAL_InitTick+0xf8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001e70:	252b      	movs	r5, #43	; 0x2b
 8001e72:	197c      	adds	r4, r7, r5
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_InitTick+0xf8>)
 8001e76:	0018      	movs	r0, r3
 8001e78:	f001 fbbe 	bl	80035f8 <HAL_TIM_Base_Init>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8001e80:	197b      	adds	r3, r7, r5
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d11e      	bne.n	8001ec6 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001e88:	197c      	adds	r4, r7, r5
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <HAL_InitTick+0xf8>)
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f001 fc0b 	bl	80036a8 <HAL_TIM_Base_Start_IT>
 8001e92:	0003      	movs	r3, r0
 8001e94:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8001e96:	197b      	adds	r3, r7, r5
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d113      	bne.n	8001ec6 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e9e:	2012      	movs	r0, #18
 8001ea0:	f000 f98d 	bl	80021be <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d809      	bhi.n	8001ebe <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	0019      	movs	r1, r3
 8001eb0:	2012      	movs	r0, #18
 8001eb2:	f000 f96f 	bl	8002194 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_InitTick+0x104>)
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	e003      	b.n	8001ec6 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8001ebe:	232b      	movs	r3, #43	; 0x2b
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8001ec6:	232b      	movs	r3, #43	; 0x2b
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	781b      	ldrb	r3, [r3, #0]
}
 8001ecc:	0018      	movs	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b00c      	add	sp, #48	; 0x30
 8001ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	000f4240 	.word	0x000f4240
 8001edc:	20000500 	.word	0x20000500
 8001ee0:	40001400 	.word	0x40001400
 8001ee4:	000003e7 	.word	0x000003e7
 8001ee8:	20000044 	.word	0x20000044

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <NMI_Handler+0x4>

08001ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <HardFault_Handler+0x4>

08001ef8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <TIM7_IRQHandler+0x14>)
 8001efe:	0018      	movs	r0, r3
 8001f00:	f001 fc1e 	bl	8003740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f04:	46c0      	nop			; (mov r8, r8)
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	20000500 	.word	0x20000500

08001f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f18:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <_sbrk+0x5c>)
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <_sbrk+0x60>)
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d102      	bne.n	8001f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <_sbrk+0x64>)
 8001f2e:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <_sbrk+0x68>)
 8001f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	18d3      	adds	r3, r2, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d207      	bcs.n	8001f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f40:	f007 fd3c 	bl	80099bc <__errno>
 8001f44:	0003      	movs	r3, r0
 8001f46:	220c      	movs	r2, #12
 8001f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	425b      	negs	r3, r3
 8001f4e:	e009      	b.n	8001f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <_sbrk+0x64>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	18d2      	adds	r2, r2, r3
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <_sbrk+0x64>)
 8001f60:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001f62:	68fb      	ldr	r3, [r7, #12]
}
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b006      	add	sp, #24
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20004000 	.word	0x20004000
 8001f70:	00000400 	.word	0x00000400
 8001f74:	20000548 	.word	0x20000548
 8001f78:	200017d8 	.word	0x200017d8

08001f7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f88:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f8c:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f8e:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f90:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <LoopForever+0xe>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f94:	e002      	b.n	8001f9c <LoopCopyDataInit>

08001f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9a:	3304      	adds	r3, #4

08001f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa0:	d3f9      	bcc.n	8001f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa2:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fa4:	4c0b      	ldr	r4, [pc, #44]	; (8001fd4 <LoopForever+0x16>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa8:	e001      	b.n	8001fae <LoopFillZerobss>

08001faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fac:	3204      	adds	r2, #4

08001fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb0:	d3fb      	bcc.n	8001faa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001fb2:	f7ff ffe3 	bl	8001f7c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001fb6:	f007 fd07 	bl	80099c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fba:	f7fe fa45 	bl	8000448 <main>

08001fbe <LoopForever>:

LoopForever:
    b LoopForever
 8001fbe:	e7fe      	b.n	8001fbe <LoopForever>
  ldr   r0, =_estack
 8001fc0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc8:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8001fcc:	0800abf8 	.word	0x0800abf8
  ldr r2, =_sbss
 8001fd0:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8001fd4:	200017d8 	.word	0x200017d8

08001fd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fd8:	e7fe      	b.n	8001fd8 <ADC1_IRQHandler>
	...

08001fdc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe0:	4b07      	ldr	r3, [pc, #28]	; (8002000 <HAL_Init+0x24>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_Init+0x24>)
 8001fe6:	2110      	movs	r1, #16
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001fec:	2003      	movs	r0, #3
 8001fee:	f7ff fef9 	bl	8001de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff2:	f7ff fe81 	bl	8001cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	40022000 	.word	0x40022000

08002004 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_IncTick+0x1c>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	001a      	movs	r2, r3
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_IncTick+0x20>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	18d2      	adds	r2, r2, r3
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <HAL_IncTick+0x20>)
 8002016:	601a      	str	r2, [r3, #0]
}
 8002018:	46c0      	nop			; (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	20000048 	.word	0x20000048
 8002024:	2000054c 	.word	0x2000054c

08002028 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  return uwTick;
 800202c:	4b02      	ldr	r3, [pc, #8]	; (8002038 <HAL_GetTick+0x10>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	0018      	movs	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	2000054c 	.word	0x2000054c

0800203c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7ff fff0 	bl	8002028 <HAL_GetTick>
 8002048:	0003      	movs	r3, r0
 800204a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3301      	adds	r3, #1
 8002054:	d005      	beq.n	8002062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_Delay+0x44>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	001a      	movs	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	189b      	adds	r3, r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	f7ff ffe0 	bl	8002028 <HAL_GetTick>
 8002068:	0002      	movs	r2, r0
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	429a      	cmp	r2, r3
 8002072:	d8f7      	bhi.n	8002064 <HAL_Delay+0x28>
  {
  }
}
 8002074:	46c0      	nop			; (mov r8, r8)
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	b004      	add	sp, #16
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	20000048 	.word	0x20000048

08002084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	0002      	movs	r2, r0
 800208c:	1dfb      	adds	r3, r7, #7
 800208e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002090:	1dfb      	adds	r3, r7, #7
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b7f      	cmp	r3, #127	; 0x7f
 8002096:	d809      	bhi.n	80020ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002098:	1dfb      	adds	r3, r7, #7
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	001a      	movs	r2, r3
 800209e:	231f      	movs	r3, #31
 80020a0:	401a      	ands	r2, r3
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <__NVIC_EnableIRQ+0x30>)
 80020a4:	2101      	movs	r1, #1
 80020a6:	4091      	lsls	r1, r2
 80020a8:	000a      	movs	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]
  }
}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b002      	add	sp, #8
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	e000e100 	.word	0xe000e100

080020b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	0002      	movs	r2, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	1dfb      	adds	r3, r7, #7
 80020c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020c6:	1dfb      	adds	r3, r7, #7
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b7f      	cmp	r3, #127	; 0x7f
 80020cc:	d828      	bhi.n	8002120 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020ce:	4a2f      	ldr	r2, [pc, #188]	; (800218c <__NVIC_SetPriority+0xd4>)
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	b25b      	sxtb	r3, r3
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	33c0      	adds	r3, #192	; 0xc0
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	589b      	ldr	r3, [r3, r2]
 80020de:	1dfa      	adds	r2, r7, #7
 80020e0:	7812      	ldrb	r2, [r2, #0]
 80020e2:	0011      	movs	r1, r2
 80020e4:	2203      	movs	r2, #3
 80020e6:	400a      	ands	r2, r1
 80020e8:	00d2      	lsls	r2, r2, #3
 80020ea:	21ff      	movs	r1, #255	; 0xff
 80020ec:	4091      	lsls	r1, r2
 80020ee:	000a      	movs	r2, r1
 80020f0:	43d2      	mvns	r2, r2
 80020f2:	401a      	ands	r2, r3
 80020f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	019b      	lsls	r3, r3, #6
 80020fa:	22ff      	movs	r2, #255	; 0xff
 80020fc:	401a      	ands	r2, r3
 80020fe:	1dfb      	adds	r3, r7, #7
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	0018      	movs	r0, r3
 8002104:	2303      	movs	r3, #3
 8002106:	4003      	ands	r3, r0
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800210c:	481f      	ldr	r0, [pc, #124]	; (800218c <__NVIC_SetPriority+0xd4>)
 800210e:	1dfb      	adds	r3, r7, #7
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	b25b      	sxtb	r3, r3
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	430a      	orrs	r2, r1
 8002118:	33c0      	adds	r3, #192	; 0xc0
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800211e:	e031      	b.n	8002184 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002120:	4a1b      	ldr	r2, [pc, #108]	; (8002190 <__NVIC_SetPriority+0xd8>)
 8002122:	1dfb      	adds	r3, r7, #7
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	0019      	movs	r1, r3
 8002128:	230f      	movs	r3, #15
 800212a:	400b      	ands	r3, r1
 800212c:	3b08      	subs	r3, #8
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	3306      	adds	r3, #6
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	18d3      	adds	r3, r2, r3
 8002136:	3304      	adds	r3, #4
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	1dfa      	adds	r2, r7, #7
 800213c:	7812      	ldrb	r2, [r2, #0]
 800213e:	0011      	movs	r1, r2
 8002140:	2203      	movs	r2, #3
 8002142:	400a      	ands	r2, r1
 8002144:	00d2      	lsls	r2, r2, #3
 8002146:	21ff      	movs	r1, #255	; 0xff
 8002148:	4091      	lsls	r1, r2
 800214a:	000a      	movs	r2, r1
 800214c:	43d2      	mvns	r2, r2
 800214e:	401a      	ands	r2, r3
 8002150:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	019b      	lsls	r3, r3, #6
 8002156:	22ff      	movs	r2, #255	; 0xff
 8002158:	401a      	ands	r2, r3
 800215a:	1dfb      	adds	r3, r7, #7
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	0018      	movs	r0, r3
 8002160:	2303      	movs	r3, #3
 8002162:	4003      	ands	r3, r0
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002168:	4809      	ldr	r0, [pc, #36]	; (8002190 <__NVIC_SetPriority+0xd8>)
 800216a:	1dfb      	adds	r3, r7, #7
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	001c      	movs	r4, r3
 8002170:	230f      	movs	r3, #15
 8002172:	4023      	ands	r3, r4
 8002174:	3b08      	subs	r3, #8
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	430a      	orrs	r2, r1
 800217a:	3306      	adds	r3, #6
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	18c3      	adds	r3, r0, r3
 8002180:	3304      	adds	r3, #4
 8002182:	601a      	str	r2, [r3, #0]
}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	b003      	add	sp, #12
 800218a:	bd90      	pop	{r4, r7, pc}
 800218c:	e000e100 	.word	0xe000e100
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	210f      	movs	r1, #15
 80021a0:	187b      	adds	r3, r7, r1
 80021a2:	1c02      	adds	r2, r0, #0
 80021a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	187b      	adds	r3, r7, r1
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	b25b      	sxtb	r3, r3
 80021ae:	0011      	movs	r1, r2
 80021b0:	0018      	movs	r0, r3
 80021b2:	f7ff ff81 	bl	80020b8 <__NVIC_SetPriority>
}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b004      	add	sp, #16
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	0002      	movs	r2, r0
 80021c6:	1dfb      	adds	r3, r7, #7
 80021c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ca:	1dfb      	adds	r3, r7, #7
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	b25b      	sxtb	r3, r3
 80021d0:	0018      	movs	r0, r3
 80021d2:	f7ff ff57 	bl	8002084 <__NVIC_EnableIRQ>
}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	46bd      	mov	sp, r7
 80021da:	b002      	add	sp, #8
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ee:	e14f      	b.n	8002490 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2101      	movs	r1, #1
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4091      	lsls	r1, r2
 80021fa:	000a      	movs	r2, r1
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <HAL_GPIO_Init+0x28>
 8002206:	e140      	b.n	800248a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2203      	movs	r2, #3
 800220e:	4013      	ands	r3, r2
 8002210:	2b01      	cmp	r3, #1
 8002212:	d005      	beq.n	8002220 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2203      	movs	r2, #3
 800221a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800221c:	2b02      	cmp	r3, #2
 800221e:	d130      	bne.n	8002282 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	409a      	lsls	r2, r3
 800222e:	0013      	movs	r3, r2
 8002230:	43da      	mvns	r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	409a      	lsls	r2, r3
 8002242:	0013      	movs	r3, r2
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002256:	2201      	movs	r2, #1
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	409a      	lsls	r2, r3
 800225c:	0013      	movs	r3, r2
 800225e:	43da      	mvns	r2, r3
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	2201      	movs	r2, #1
 800226e:	401a      	ands	r2, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	409a      	lsls	r2, r3
 8002274:	0013      	movs	r3, r2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2203      	movs	r2, #3
 8002288:	4013      	ands	r3, r2
 800228a:	2b03      	cmp	r3, #3
 800228c:	d017      	beq.n	80022be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	2203      	movs	r2, #3
 800229a:	409a      	lsls	r2, r3
 800229c:	0013      	movs	r3, r2
 800229e:	43da      	mvns	r2, r3
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	409a      	lsls	r2, r3
 80022b0:	0013      	movs	r3, r2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2203      	movs	r2, #3
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d123      	bne.n	8002312 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	08da      	lsrs	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3208      	adds	r2, #8
 80022d2:	0092      	lsls	r2, r2, #2
 80022d4:	58d3      	ldr	r3, [r2, r3]
 80022d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2207      	movs	r2, #7
 80022dc:	4013      	ands	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	220f      	movs	r2, #15
 80022e2:	409a      	lsls	r2, r3
 80022e4:	0013      	movs	r3, r2
 80022e6:	43da      	mvns	r2, r3
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2107      	movs	r1, #7
 80022f6:	400b      	ands	r3, r1
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	409a      	lsls	r2, r3
 80022fc:	0013      	movs	r3, r2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	08da      	lsrs	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3208      	adds	r2, #8
 800230c:	0092      	lsls	r2, r2, #2
 800230e:	6939      	ldr	r1, [r7, #16]
 8002310:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	409a      	lsls	r2, r3
 8002320:	0013      	movs	r3, r2
 8002322:	43da      	mvns	r2, r3
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2203      	movs	r2, #3
 8002330:	401a      	ands	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	409a      	lsls	r2, r3
 8002338:	0013      	movs	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	23c0      	movs	r3, #192	; 0xc0
 800234c:	029b      	lsls	r3, r3, #10
 800234e:	4013      	ands	r3, r2
 8002350:	d100      	bne.n	8002354 <HAL_GPIO_Init+0x174>
 8002352:	e09a      	b.n	800248a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002354:	4b54      	ldr	r3, [pc, #336]	; (80024a8 <HAL_GPIO_Init+0x2c8>)
 8002356:	699a      	ldr	r2, [r3, #24]
 8002358:	4b53      	ldr	r3, [pc, #332]	; (80024a8 <HAL_GPIO_Init+0x2c8>)
 800235a:	2101      	movs	r1, #1
 800235c:	430a      	orrs	r2, r1
 800235e:	619a      	str	r2, [r3, #24]
 8002360:	4b51      	ldr	r3, [pc, #324]	; (80024a8 <HAL_GPIO_Init+0x2c8>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	2201      	movs	r2, #1
 8002366:	4013      	ands	r3, r2
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800236c:	4a4f      	ldr	r2, [pc, #316]	; (80024ac <HAL_GPIO_Init+0x2cc>)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	3302      	adds	r3, #2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	589b      	ldr	r3, [r3, r2]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2203      	movs	r2, #3
 800237e:	4013      	ands	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	220f      	movs	r2, #15
 8002384:	409a      	lsls	r2, r3
 8002386:	0013      	movs	r3, r2
 8002388:	43da      	mvns	r2, r3
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	2390      	movs	r3, #144	; 0x90
 8002394:	05db      	lsls	r3, r3, #23
 8002396:	429a      	cmp	r2, r3
 8002398:	d013      	beq.n	80023c2 <HAL_GPIO_Init+0x1e2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a44      	ldr	r2, [pc, #272]	; (80024b0 <HAL_GPIO_Init+0x2d0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00d      	beq.n	80023be <HAL_GPIO_Init+0x1de>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a43      	ldr	r2, [pc, #268]	; (80024b4 <HAL_GPIO_Init+0x2d4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d007      	beq.n	80023ba <HAL_GPIO_Init+0x1da>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a42      	ldr	r2, [pc, #264]	; (80024b8 <HAL_GPIO_Init+0x2d8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d101      	bne.n	80023b6 <HAL_GPIO_Init+0x1d6>
 80023b2:	2303      	movs	r3, #3
 80023b4:	e006      	b.n	80023c4 <HAL_GPIO_Init+0x1e4>
 80023b6:	2305      	movs	r3, #5
 80023b8:	e004      	b.n	80023c4 <HAL_GPIO_Init+0x1e4>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e002      	b.n	80023c4 <HAL_GPIO_Init+0x1e4>
 80023be:	2301      	movs	r3, #1
 80023c0:	e000      	b.n	80023c4 <HAL_GPIO_Init+0x1e4>
 80023c2:	2300      	movs	r3, #0
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	2103      	movs	r1, #3
 80023c8:	400a      	ands	r2, r1
 80023ca:	0092      	lsls	r2, r2, #2
 80023cc:	4093      	lsls	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023d4:	4935      	ldr	r1, [pc, #212]	; (80024ac <HAL_GPIO_Init+0x2cc>)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e2:	4b36      	ldr	r3, [pc, #216]	; (80024bc <HAL_GPIO_Init+0x2dc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	43da      	mvns	r2, r3
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	025b      	lsls	r3, r3, #9
 80023fa:	4013      	ands	r3, r2
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002406:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_GPIO_Init+0x2dc>)
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800240c:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <HAL_GPIO_Init+0x2dc>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	43da      	mvns	r2, r3
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	029b      	lsls	r3, r3, #10
 8002424:	4013      	ands	r3, r2
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002430:	4b22      	ldr	r3, [pc, #136]	; (80024bc <HAL_GPIO_Init+0x2dc>)
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002436:	4b21      	ldr	r3, [pc, #132]	; (80024bc <HAL_GPIO_Init+0x2dc>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	43da      	mvns	r2, r3
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	035b      	lsls	r3, r3, #13
 800244e:	4013      	ands	r3, r2
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800245a:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_GPIO_Init+0x2dc>)
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002460:	4b16      	ldr	r3, [pc, #88]	; (80024bc <HAL_GPIO_Init+0x2dc>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	43da      	mvns	r2, r3
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	039b      	lsls	r3, r3, #14
 8002478:	4013      	ands	r3, r2
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002484:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <HAL_GPIO_Init+0x2dc>)
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	3301      	adds	r3, #1
 800248e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	40da      	lsrs	r2, r3
 8002498:	1e13      	subs	r3, r2, #0
 800249a:	d000      	beq.n	800249e <HAL_GPIO_Init+0x2be>
 800249c:	e6a8      	b.n	80021f0 <HAL_GPIO_Init+0x10>
  } 
}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	46c0      	nop			; (mov r8, r8)
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b006      	add	sp, #24
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40010000 	.word	0x40010000
 80024b0:	48000400 	.word	0x48000400
 80024b4:	48000800 	.word	0x48000800
 80024b8:	48000c00 	.word	0x48000c00
 80024bc:	40010400 	.word	0x40010400

080024c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e305      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2201      	movs	r2, #1
 80024d8:	4013      	ands	r3, r2
 80024da:	d100      	bne.n	80024de <HAL_RCC_OscConfig+0x1e>
 80024dc:	e08d      	b.n	80025fa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024de:	4bc5      	ldr	r3, [pc, #788]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	220c      	movs	r2, #12
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d00e      	beq.n	8002508 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024ea:	4bc2      	ldr	r3, [pc, #776]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	220c      	movs	r2, #12
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d116      	bne.n	8002524 <HAL_RCC_OscConfig+0x64>
 80024f6:	4bbf      	ldr	r3, [pc, #764]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	23c0      	movs	r3, #192	; 0xc0
 80024fc:	025b      	lsls	r3, r3, #9
 80024fe:	401a      	ands	r2, r3
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	025b      	lsls	r3, r3, #9
 8002504:	429a      	cmp	r2, r3
 8002506:	d10d      	bne.n	8002524 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002508:	4bba      	ldr	r3, [pc, #744]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	029b      	lsls	r3, r3, #10
 8002510:	4013      	ands	r3, r2
 8002512:	d100      	bne.n	8002516 <HAL_RCC_OscConfig+0x56>
 8002514:	e070      	b.n	80025f8 <HAL_RCC_OscConfig+0x138>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d000      	beq.n	8002520 <HAL_RCC_OscConfig+0x60>
 800251e:	e06b      	b.n	80025f8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e2dc      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d107      	bne.n	800253c <HAL_RCC_OscConfig+0x7c>
 800252c:	4bb1      	ldr	r3, [pc, #708]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4bb0      	ldr	r3, [pc, #704]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002532:	2180      	movs	r1, #128	; 0x80
 8002534:	0249      	lsls	r1, r1, #9
 8002536:	430a      	orrs	r2, r1
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e02f      	b.n	800259c <HAL_RCC_OscConfig+0xdc>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10c      	bne.n	800255e <HAL_RCC_OscConfig+0x9e>
 8002544:	4bab      	ldr	r3, [pc, #684]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4baa      	ldr	r3, [pc, #680]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 800254a:	49ab      	ldr	r1, [pc, #684]	; (80027f8 <HAL_RCC_OscConfig+0x338>)
 800254c:	400a      	ands	r2, r1
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	4ba8      	ldr	r3, [pc, #672]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4ba7      	ldr	r3, [pc, #668]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002556:	49a9      	ldr	r1, [pc, #676]	; (80027fc <HAL_RCC_OscConfig+0x33c>)
 8002558:	400a      	ands	r2, r1
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e01e      	b.n	800259c <HAL_RCC_OscConfig+0xdc>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b05      	cmp	r3, #5
 8002564:	d10e      	bne.n	8002584 <HAL_RCC_OscConfig+0xc4>
 8002566:	4ba3      	ldr	r3, [pc, #652]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4ba2      	ldr	r3, [pc, #648]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 800256c:	2180      	movs	r1, #128	; 0x80
 800256e:	02c9      	lsls	r1, r1, #11
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	4b9f      	ldr	r3, [pc, #636]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b9e      	ldr	r3, [pc, #632]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 800257a:	2180      	movs	r1, #128	; 0x80
 800257c:	0249      	lsls	r1, r1, #9
 800257e:	430a      	orrs	r2, r1
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	e00b      	b.n	800259c <HAL_RCC_OscConfig+0xdc>
 8002584:	4b9b      	ldr	r3, [pc, #620]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b9a      	ldr	r3, [pc, #616]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 800258a:	499b      	ldr	r1, [pc, #620]	; (80027f8 <HAL_RCC_OscConfig+0x338>)
 800258c:	400a      	ands	r2, r1
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	4b98      	ldr	r3, [pc, #608]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b97      	ldr	r3, [pc, #604]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002596:	4999      	ldr	r1, [pc, #612]	; (80027fc <HAL_RCC_OscConfig+0x33c>)
 8002598:	400a      	ands	r2, r1
 800259a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d014      	beq.n	80025ce <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7ff fd40 	bl	8002028 <HAL_GetTick>
 80025a8:	0003      	movs	r3, r0
 80025aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ae:	f7ff fd3b 	bl	8002028 <HAL_GetTick>
 80025b2:	0002      	movs	r2, r0
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b64      	cmp	r3, #100	; 0x64
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e28e      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c0:	4b8c      	ldr	r3, [pc, #560]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	029b      	lsls	r3, r3, #10
 80025c8:	4013      	ands	r3, r2
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0xee>
 80025cc:	e015      	b.n	80025fa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7ff fd2b 	bl	8002028 <HAL_GetTick>
 80025d2:	0003      	movs	r3, r0
 80025d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d8:	f7ff fd26 	bl	8002028 <HAL_GetTick>
 80025dc:	0002      	movs	r2, r0
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	; 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e279      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ea:	4b82      	ldr	r3, [pc, #520]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	029b      	lsls	r3, r3, #10
 80025f2:	4013      	ands	r3, r2
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x118>
 80025f6:	e000      	b.n	80025fa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2202      	movs	r2, #2
 8002600:	4013      	ands	r3, r2
 8002602:	d100      	bne.n	8002606 <HAL_RCC_OscConfig+0x146>
 8002604:	e06c      	b.n	80026e0 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002606:	4b7b      	ldr	r3, [pc, #492]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	220c      	movs	r2, #12
 800260c:	4013      	ands	r3, r2
 800260e:	d00e      	beq.n	800262e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002610:	4b78      	ldr	r3, [pc, #480]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	220c      	movs	r2, #12
 8002616:	4013      	ands	r3, r2
 8002618:	2b08      	cmp	r3, #8
 800261a:	d11f      	bne.n	800265c <HAL_RCC_OscConfig+0x19c>
 800261c:	4b75      	ldr	r3, [pc, #468]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	23c0      	movs	r3, #192	; 0xc0
 8002622:	025b      	lsls	r3, r3, #9
 8002624:	401a      	ands	r2, r3
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	429a      	cmp	r2, r3
 800262c:	d116      	bne.n	800265c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	4b71      	ldr	r3, [pc, #452]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2202      	movs	r2, #2
 8002634:	4013      	ands	r3, r2
 8002636:	d005      	beq.n	8002644 <HAL_RCC_OscConfig+0x184>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d001      	beq.n	8002644 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e24c      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b6b      	ldr	r3, [pc, #428]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	22f8      	movs	r2, #248	; 0xf8
 800264a:	4393      	bics	r3, r2
 800264c:	0019      	movs	r1, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00da      	lsls	r2, r3, #3
 8002654:	4b67      	ldr	r3, [pc, #412]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002656:	430a      	orrs	r2, r1
 8002658:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	e041      	b.n	80026e0 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d024      	beq.n	80026ae <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002664:	4b63      	ldr	r3, [pc, #396]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b62      	ldr	r3, [pc, #392]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 800266a:	2101      	movs	r1, #1
 800266c:	430a      	orrs	r2, r1
 800266e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7ff fcda 	bl	8002028 <HAL_GetTick>
 8002674:	0003      	movs	r3, r0
 8002676:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267a:	f7ff fcd5 	bl	8002028 <HAL_GetTick>
 800267e:	0002      	movs	r2, r0
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e228      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268c:	4b59      	ldr	r3, [pc, #356]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2202      	movs	r2, #2
 8002692:	4013      	ands	r3, r2
 8002694:	d0f1      	beq.n	800267a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002696:	4b57      	ldr	r3, [pc, #348]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	22f8      	movs	r2, #248	; 0xf8
 800269c:	4393      	bics	r3, r2
 800269e:	0019      	movs	r1, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	00da      	lsls	r2, r3, #3
 80026a6:	4b53      	ldr	r3, [pc, #332]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	e018      	b.n	80026e0 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ae:	4b51      	ldr	r3, [pc, #324]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	4b50      	ldr	r3, [pc, #320]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 80026b4:	2101      	movs	r1, #1
 80026b6:	438a      	bics	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ba:	f7ff fcb5 	bl	8002028 <HAL_GetTick>
 80026be:	0003      	movs	r3, r0
 80026c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c4:	f7ff fcb0 	bl	8002028 <HAL_GetTick>
 80026c8:	0002      	movs	r2, r0
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e203      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d6:	4b47      	ldr	r3, [pc, #284]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2202      	movs	r2, #2
 80026dc:	4013      	ands	r3, r2
 80026de:	d1f1      	bne.n	80026c4 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2208      	movs	r2, #8
 80026e6:	4013      	ands	r3, r2
 80026e8:	d036      	beq.n	8002758 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d019      	beq.n	8002726 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f2:	4b40      	ldr	r3, [pc, #256]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 80026f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026f6:	4b3f      	ldr	r3, [pc, #252]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 80026f8:	2101      	movs	r1, #1
 80026fa:	430a      	orrs	r2, r1
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fe:	f7ff fc93 	bl	8002028 <HAL_GetTick>
 8002702:	0003      	movs	r3, r0
 8002704:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002708:	f7ff fc8e 	bl	8002028 <HAL_GetTick>
 800270c:	0002      	movs	r2, r0
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e1e1      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271a:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	2202      	movs	r2, #2
 8002720:	4013      	ands	r3, r2
 8002722:	d0f1      	beq.n	8002708 <HAL_RCC_OscConfig+0x248>
 8002724:	e018      	b.n	8002758 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002726:	4b33      	ldr	r3, [pc, #204]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800272a:	4b32      	ldr	r3, [pc, #200]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 800272c:	2101      	movs	r1, #1
 800272e:	438a      	bics	r2, r1
 8002730:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7ff fc79 	bl	8002028 <HAL_GetTick>
 8002736:	0003      	movs	r3, r0
 8002738:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273c:	f7ff fc74 	bl	8002028 <HAL_GetTick>
 8002740:	0002      	movs	r2, r0
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e1c7      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274e:	4b29      	ldr	r3, [pc, #164]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	2202      	movs	r2, #2
 8002754:	4013      	ands	r3, r2
 8002756:	d1f1      	bne.n	800273c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2204      	movs	r2, #4
 800275e:	4013      	ands	r3, r2
 8002760:	d100      	bne.n	8002764 <HAL_RCC_OscConfig+0x2a4>
 8002762:	e0b5      	b.n	80028d0 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002764:	201f      	movs	r0, #31
 8002766:	183b      	adds	r3, r7, r0
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276c:	4b21      	ldr	r3, [pc, #132]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	055b      	lsls	r3, r3, #21
 8002774:	4013      	ands	r3, r2
 8002776:	d110      	bne.n	800279a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002778:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 800277a:	69da      	ldr	r2, [r3, #28]
 800277c:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 800277e:	2180      	movs	r1, #128	; 0x80
 8002780:	0549      	lsls	r1, r1, #21
 8002782:	430a      	orrs	r2, r1
 8002784:	61da      	str	r2, [r3, #28]
 8002786:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 8002788:	69da      	ldr	r2, [r3, #28]
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	055b      	lsls	r3, r3, #21
 800278e:	4013      	ands	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002794:	183b      	adds	r3, r7, r0
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_RCC_OscConfig+0x340>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4013      	ands	r3, r2
 80027a4:	d11a      	bne.n	80027dc <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <HAL_RCC_OscConfig+0x340>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	4b15      	ldr	r3, [pc, #84]	; (8002800 <HAL_RCC_OscConfig+0x340>)
 80027ac:	2180      	movs	r1, #128	; 0x80
 80027ae:	0049      	lsls	r1, r1, #1
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b4:	f7ff fc38 	bl	8002028 <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027be:	f7ff fc33 	bl	8002028 <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	; 0x64
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e186      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_RCC_OscConfig+0x340>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4013      	ands	r3, r2
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10f      	bne.n	8002804 <HAL_RCC_OscConfig+0x344>
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 80027e6:	6a1a      	ldr	r2, [r3, #32]
 80027e8:	4b02      	ldr	r3, [pc, #8]	; (80027f4 <HAL_RCC_OscConfig+0x334>)
 80027ea:	2101      	movs	r1, #1
 80027ec:	430a      	orrs	r2, r1
 80027ee:	621a      	str	r2, [r3, #32]
 80027f0:	e036      	b.n	8002860 <HAL_RCC_OscConfig+0x3a0>
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	40021000 	.word	0x40021000
 80027f8:	fffeffff 	.word	0xfffeffff
 80027fc:	fffbffff 	.word	0xfffbffff
 8002800:	40007000 	.word	0x40007000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10c      	bne.n	8002826 <HAL_RCC_OscConfig+0x366>
 800280c:	4bb6      	ldr	r3, [pc, #728]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 800280e:	6a1a      	ldr	r2, [r3, #32]
 8002810:	4bb5      	ldr	r3, [pc, #724]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002812:	2101      	movs	r1, #1
 8002814:	438a      	bics	r2, r1
 8002816:	621a      	str	r2, [r3, #32]
 8002818:	4bb3      	ldr	r3, [pc, #716]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 800281a:	6a1a      	ldr	r2, [r3, #32]
 800281c:	4bb2      	ldr	r3, [pc, #712]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 800281e:	2104      	movs	r1, #4
 8002820:	438a      	bics	r2, r1
 8002822:	621a      	str	r2, [r3, #32]
 8002824:	e01c      	b.n	8002860 <HAL_RCC_OscConfig+0x3a0>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b05      	cmp	r3, #5
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0x388>
 800282e:	4bae      	ldr	r3, [pc, #696]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002830:	6a1a      	ldr	r2, [r3, #32]
 8002832:	4bad      	ldr	r3, [pc, #692]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002834:	2104      	movs	r1, #4
 8002836:	430a      	orrs	r2, r1
 8002838:	621a      	str	r2, [r3, #32]
 800283a:	4bab      	ldr	r3, [pc, #684]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 800283c:	6a1a      	ldr	r2, [r3, #32]
 800283e:	4baa      	ldr	r3, [pc, #680]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002840:	2101      	movs	r1, #1
 8002842:	430a      	orrs	r2, r1
 8002844:	621a      	str	r2, [r3, #32]
 8002846:	e00b      	b.n	8002860 <HAL_RCC_OscConfig+0x3a0>
 8002848:	4ba7      	ldr	r3, [pc, #668]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 800284a:	6a1a      	ldr	r2, [r3, #32]
 800284c:	4ba6      	ldr	r3, [pc, #664]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 800284e:	2101      	movs	r1, #1
 8002850:	438a      	bics	r2, r1
 8002852:	621a      	str	r2, [r3, #32]
 8002854:	4ba4      	ldr	r3, [pc, #656]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002856:	6a1a      	ldr	r2, [r3, #32]
 8002858:	4ba3      	ldr	r3, [pc, #652]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 800285a:	2104      	movs	r1, #4
 800285c:	438a      	bics	r2, r1
 800285e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d014      	beq.n	8002892 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002868:	f7ff fbde 	bl	8002028 <HAL_GetTick>
 800286c:	0003      	movs	r3, r0
 800286e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002870:	e009      	b.n	8002886 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002872:	f7ff fbd9 	bl	8002028 <HAL_GetTick>
 8002876:	0002      	movs	r2, r0
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	4a9b      	ldr	r2, [pc, #620]	; (8002aec <HAL_RCC_OscConfig+0x62c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e12b      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	4b98      	ldr	r3, [pc, #608]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	2202      	movs	r2, #2
 800288c:	4013      	ands	r3, r2
 800288e:	d0f0      	beq.n	8002872 <HAL_RCC_OscConfig+0x3b2>
 8002890:	e013      	b.n	80028ba <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002892:	f7ff fbc9 	bl	8002028 <HAL_GetTick>
 8002896:	0003      	movs	r3, r0
 8002898:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289a:	e009      	b.n	80028b0 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800289c:	f7ff fbc4 	bl	8002028 <HAL_GetTick>
 80028a0:	0002      	movs	r2, r0
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	4a91      	ldr	r2, [pc, #580]	; (8002aec <HAL_RCC_OscConfig+0x62c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e116      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b0:	4b8d      	ldr	r3, [pc, #564]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	2202      	movs	r2, #2
 80028b6:	4013      	ands	r3, r2
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028ba:	231f      	movs	r3, #31
 80028bc:	18fb      	adds	r3, r7, r3
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d105      	bne.n	80028d0 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c4:	4b88      	ldr	r3, [pc, #544]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 80028c6:	69da      	ldr	r2, [r3, #28]
 80028c8:	4b87      	ldr	r3, [pc, #540]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 80028ca:	4989      	ldr	r1, [pc, #548]	; (8002af0 <HAL_RCC_OscConfig+0x630>)
 80028cc:	400a      	ands	r2, r1
 80028ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2210      	movs	r2, #16
 80028d6:	4013      	ands	r3, r2
 80028d8:	d063      	beq.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d12a      	bne.n	8002938 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028e2:	4b81      	ldr	r3, [pc, #516]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 80028e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e6:	4b80      	ldr	r3, [pc, #512]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 80028e8:	2104      	movs	r1, #4
 80028ea:	430a      	orrs	r2, r1
 80028ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80028ee:	4b7e      	ldr	r3, [pc, #504]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 80028f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f2:	4b7d      	ldr	r3, [pc, #500]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 80028f4:	2101      	movs	r1, #1
 80028f6:	430a      	orrs	r2, r1
 80028f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fa:	f7ff fb95 	bl	8002028 <HAL_GetTick>
 80028fe:	0003      	movs	r3, r0
 8002900:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002904:	f7ff fb90 	bl	8002028 <HAL_GetTick>
 8002908:	0002      	movs	r2, r0
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e0e3      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002916:	4b74      	ldr	r3, [pc, #464]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291a:	2202      	movs	r2, #2
 800291c:	4013      	ands	r3, r2
 800291e:	d0f1      	beq.n	8002904 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002920:	4b71      	ldr	r3, [pc, #452]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002924:	22f8      	movs	r2, #248	; 0xf8
 8002926:	4393      	bics	r3, r2
 8002928:	0019      	movs	r1, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	00da      	lsls	r2, r3, #3
 8002930:	4b6d      	ldr	r3, [pc, #436]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002932:	430a      	orrs	r2, r1
 8002934:	635a      	str	r2, [r3, #52]	; 0x34
 8002936:	e034      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	3305      	adds	r3, #5
 800293e:	d111      	bne.n	8002964 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002940:	4b69      	ldr	r3, [pc, #420]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002944:	4b68      	ldr	r3, [pc, #416]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002946:	2104      	movs	r1, #4
 8002948:	438a      	bics	r2, r1
 800294a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800294c:	4b66      	ldr	r3, [pc, #408]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	22f8      	movs	r2, #248	; 0xf8
 8002952:	4393      	bics	r3, r2
 8002954:	0019      	movs	r1, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	00da      	lsls	r2, r3, #3
 800295c:	4b62      	ldr	r3, [pc, #392]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 800295e:	430a      	orrs	r2, r1
 8002960:	635a      	str	r2, [r3, #52]	; 0x34
 8002962:	e01e      	b.n	80029a2 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002964:	4b60      	ldr	r3, [pc, #384]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002968:	4b5f      	ldr	r3, [pc, #380]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 800296a:	2104      	movs	r1, #4
 800296c:	430a      	orrs	r2, r1
 800296e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002970:	4b5d      	ldr	r3, [pc, #372]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002974:	4b5c      	ldr	r3, [pc, #368]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002976:	2101      	movs	r1, #1
 8002978:	438a      	bics	r2, r1
 800297a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297c:	f7ff fb54 	bl	8002028 <HAL_GetTick>
 8002980:	0003      	movs	r3, r0
 8002982:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002986:	f7ff fb4f 	bl	8002028 <HAL_GetTick>
 800298a:	0002      	movs	r2, r0
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e0a2      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002998:	4b53      	ldr	r3, [pc, #332]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 800299a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299c:	2202      	movs	r2, #2
 800299e:	4013      	ands	r3, r2
 80029a0:	d1f1      	bne.n	8002986 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d100      	bne.n	80029ac <HAL_RCC_OscConfig+0x4ec>
 80029aa:	e097      	b.n	8002adc <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ac:	4b4e      	ldr	r3, [pc, #312]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	220c      	movs	r2, #12
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d100      	bne.n	80029ba <HAL_RCC_OscConfig+0x4fa>
 80029b8:	e06b      	b.n	8002a92 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d14c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	4b49      	ldr	r3, [pc, #292]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4b48      	ldr	r3, [pc, #288]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 80029c8:	494a      	ldr	r1, [pc, #296]	; (8002af4 <HAL_RCC_OscConfig+0x634>)
 80029ca:	400a      	ands	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7ff fb2b 	bl	8002028 <HAL_GetTick>
 80029d2:	0003      	movs	r3, r0
 80029d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d8:	f7ff fb26 	bl	8002028 <HAL_GetTick>
 80029dc:	0002      	movs	r2, r0
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e079      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ea:	4b3f      	ldr	r3, [pc, #252]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	049b      	lsls	r3, r3, #18
 80029f2:	4013      	ands	r3, r2
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029f6:	4b3c      	ldr	r3, [pc, #240]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	220f      	movs	r2, #15
 80029fc:	4393      	bics	r3, r2
 80029fe:	0019      	movs	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a04:	4b38      	ldr	r3, [pc, #224]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002a06:	430a      	orrs	r2, r1
 8002a08:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a0a:	4b37      	ldr	r3, [pc, #220]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4a3a      	ldr	r2, [pc, #232]	; (8002af8 <HAL_RCC_OscConfig+0x638>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	0019      	movs	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	4b32      	ldr	r3, [pc, #200]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002a20:	430a      	orrs	r2, r1
 8002a22:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a24:	4b30      	ldr	r3, [pc, #192]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b2f      	ldr	r3, [pc, #188]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002a2a:	2180      	movs	r1, #128	; 0x80
 8002a2c:	0449      	lsls	r1, r1, #17
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a32:	f7ff faf9 	bl	8002028 <HAL_GetTick>
 8002a36:	0003      	movs	r3, r0
 8002a38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7ff faf4 	bl	8002028 <HAL_GetTick>
 8002a40:	0002      	movs	r2, r0
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e047      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a4e:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	2380      	movs	r3, #128	; 0x80
 8002a54:	049b      	lsls	r3, r3, #18
 8002a56:	4013      	ands	r3, r2
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x57c>
 8002a5a:	e03f      	b.n	8002adc <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5c:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002a62:	4924      	ldr	r1, [pc, #144]	; (8002af4 <HAL_RCC_OscConfig+0x634>)
 8002a64:	400a      	ands	r2, r1
 8002a66:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7ff fade 	bl	8002028 <HAL_GetTick>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a72:	f7ff fad9 	bl	8002028 <HAL_GetTick>
 8002a76:	0002      	movs	r2, r0
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e02c      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a84:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	049b      	lsls	r3, r3, #18
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d1f0      	bne.n	8002a72 <HAL_RCC_OscConfig+0x5b2>
 8002a90:	e024      	b.n	8002adc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e01f      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a9e:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002aa4:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <HAL_RCC_OscConfig+0x628>)
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	23c0      	movs	r3, #192	; 0xc0
 8002aae:	025b      	lsls	r3, r3, #9
 8002ab0:	401a      	ands	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d10e      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	220f      	movs	r2, #15
 8002abe:	401a      	ands	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d107      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	23f0      	movs	r3, #240	; 0xf0
 8002acc:	039b      	lsls	r3, r3, #14
 8002ace:	401a      	ands	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	0018      	movs	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b008      	add	sp, #32
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	00001388 	.word	0x00001388
 8002af0:	efffffff 	.word	0xefffffff
 8002af4:	feffffff 	.word	0xfeffffff
 8002af8:	ffc27fff 	.word	0xffc27fff

08002afc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0b3      	b.n	8002c78 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b10:	4b5b      	ldr	r3, [pc, #364]	; (8002c80 <HAL_RCC_ClockConfig+0x184>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2201      	movs	r2, #1
 8002b16:	4013      	ands	r3, r2
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d911      	bls.n	8002b42 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b58      	ldr	r3, [pc, #352]	; (8002c80 <HAL_RCC_ClockConfig+0x184>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2201      	movs	r2, #1
 8002b24:	4393      	bics	r3, r2
 8002b26:	0019      	movs	r1, r3
 8002b28:	4b55      	ldr	r3, [pc, #340]	; (8002c80 <HAL_RCC_ClockConfig+0x184>)
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b30:	4b53      	ldr	r3, [pc, #332]	; (8002c80 <HAL_RCC_ClockConfig+0x184>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2201      	movs	r2, #1
 8002b36:	4013      	ands	r3, r2
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e09a      	b.n	8002c78 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2202      	movs	r2, #2
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d015      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2204      	movs	r2, #4
 8002b52:	4013      	ands	r3, r2
 8002b54:	d006      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b56:	4b4b      	ldr	r3, [pc, #300]	; (8002c84 <HAL_RCC_ClockConfig+0x188>)
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	4b4a      	ldr	r3, [pc, #296]	; (8002c84 <HAL_RCC_ClockConfig+0x188>)
 8002b5c:	21e0      	movs	r1, #224	; 0xe0
 8002b5e:	00c9      	lsls	r1, r1, #3
 8002b60:	430a      	orrs	r2, r1
 8002b62:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b64:	4b47      	ldr	r3, [pc, #284]	; (8002c84 <HAL_RCC_ClockConfig+0x188>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	22f0      	movs	r2, #240	; 0xf0
 8002b6a:	4393      	bics	r3, r2
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	4b44      	ldr	r3, [pc, #272]	; (8002c84 <HAL_RCC_ClockConfig+0x188>)
 8002b74:	430a      	orrs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d040      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	4b3e      	ldr	r3, [pc, #248]	; (8002c84 <HAL_RCC_ClockConfig+0x188>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	029b      	lsls	r3, r3, #10
 8002b92:	4013      	ands	r3, r2
 8002b94:	d114      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e06e      	b.n	8002c78 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d107      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba2:	4b38      	ldr	r3, [pc, #224]	; (8002c84 <HAL_RCC_ClockConfig+0x188>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	049b      	lsls	r3, r3, #18
 8002baa:	4013      	ands	r3, r2
 8002bac:	d108      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e062      	b.n	8002c78 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb2:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <HAL_RCC_ClockConfig+0x188>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e05b      	b.n	8002c78 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc0:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <HAL_RCC_ClockConfig+0x188>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	4393      	bics	r3, r2
 8002bc8:	0019      	movs	r1, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	4b2d      	ldr	r3, [pc, #180]	; (8002c84 <HAL_RCC_ClockConfig+0x188>)
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd4:	f7ff fa28 	bl	8002028 <HAL_GetTick>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bdc:	e009      	b.n	8002bf2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bde:	f7ff fa23 	bl	8002028 <HAL_GetTick>
 8002be2:	0002      	movs	r2, r0
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	4a27      	ldr	r2, [pc, #156]	; (8002c88 <HAL_RCC_ClockConfig+0x18c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e042      	b.n	8002c78 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf2:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <HAL_RCC_ClockConfig+0x188>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	220c      	movs	r2, #12
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d1ec      	bne.n	8002bde <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c04:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <HAL_RCC_ClockConfig+0x184>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d211      	bcs.n	8002c36 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_RCC_ClockConfig+0x184>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2201      	movs	r2, #1
 8002c18:	4393      	bics	r3, r2
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <HAL_RCC_ClockConfig+0x184>)
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c24:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <HAL_RCC_ClockConfig+0x184>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e020      	b.n	8002c78 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d009      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c40:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <HAL_RCC_ClockConfig+0x188>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a11      	ldr	r2, [pc, #68]	; (8002c8c <HAL_RCC_ClockConfig+0x190>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	0019      	movs	r1, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <HAL_RCC_ClockConfig+0x188>)
 8002c50:	430a      	orrs	r2, r1
 8002c52:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c54:	f000 f820 	bl	8002c98 <HAL_RCC_GetSysClockFreq>
 8002c58:	0001      	movs	r1, r0
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <HAL_RCC_ClockConfig+0x188>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	220f      	movs	r2, #15
 8002c62:	4013      	ands	r3, r2
 8002c64:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <HAL_RCC_ClockConfig+0x194>)
 8002c66:	5cd3      	ldrb	r3, [r2, r3]
 8002c68:	000a      	movs	r2, r1
 8002c6a:	40da      	lsrs	r2, r3
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x198>)
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c70:	2003      	movs	r0, #3
 8002c72:	f7ff f8b7 	bl	8001de4 <HAL_InitTick>
  
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b004      	add	sp, #16
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40022000 	.word	0x40022000
 8002c84:	40021000 	.word	0x40021000
 8002c88:	00001388 	.word	0x00001388
 8002c8c:	fffff8ff 	.word	0xfffff8ff
 8002c90:	0800a684 	.word	0x0800a684
 8002c94:	20000040 	.word	0x20000040

08002c98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b08f      	sub	sp, #60	; 0x3c
 8002c9c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002c9e:	2314      	movs	r3, #20
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	4a2c      	ldr	r2, [pc, #176]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ca4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ca6:	c313      	stmia	r3!, {r0, r1, r4}
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002cac:	1d3b      	adds	r3, r7, #4
 8002cae:	4a2a      	ldr	r2, [pc, #168]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cb0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002cb2:	c313      	stmia	r3!, {r0, r1, r4}
 8002cb4:	6812      	ldr	r2, [r2, #0]
 8002cb6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002ccc:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd4:	220c      	movs	r2, #12
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d002      	beq.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x4a>
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d003      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x50>
 8002ce0:	e02f      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ce2:	4b1f      	ldr	r3, [pc, #124]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ce4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ce6:	e02f      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cea:	0c9b      	lsrs	r3, r3, #18
 8002cec:	220f      	movs	r2, #15
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2214      	movs	r2, #20
 8002cf2:	18ba      	adds	r2, r7, r2
 8002cf4:	5cd3      	ldrb	r3, [r2, r3]
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002cf8:	4b18      	ldr	r3, [pc, #96]	; (8002d5c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	220f      	movs	r2, #15
 8002cfe:	4013      	ands	r3, r2
 8002d00:	1d3a      	adds	r2, r7, #4
 8002d02:	5cd3      	ldrb	r3, [r2, r3]
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d08:	23c0      	movs	r3, #192	; 0xc0
 8002d0a:	025b      	lsls	r3, r3, #9
 8002d0c:	401a      	ands	r2, r3
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	025b      	lsls	r3, r3, #9
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d109      	bne.n	8002d2a <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d18:	4811      	ldr	r0, [pc, #68]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d1a:	f7fd fa07 	bl	800012c <__udivsi3>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	001a      	movs	r2, r3
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	4353      	muls	r3, r2
 8002d26:	637b      	str	r3, [r7, #52]	; 0x34
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002d2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d2c:	480c      	ldr	r0, [pc, #48]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d2e:	f7fd f9fd 	bl	800012c <__udivsi3>
 8002d32:	0003      	movs	r3, r0
 8002d34:	001a      	movs	r2, r3
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	4353      	muls	r3, r2
 8002d3a:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d40:	e002      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002d44:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d46:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b00f      	add	sp, #60	; 0x3c
 8002d50:	bd90      	pop	{r4, r7, pc}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	0800a65c 	.word	0x0800a65c
 8002d58:	0800a66c 	.word	0x0800a66c
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	007a1200 	.word	0x007a1200

08002d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d68:	4b02      	ldr	r3, [pc, #8]	; (8002d74 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
}
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	20000040 	.word	0x20000040

08002d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002d7c:	f7ff fff2 	bl	8002d64 <HAL_RCC_GetHCLKFreq>
 8002d80:	0001      	movs	r1, r0
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	0a1b      	lsrs	r3, r3, #8
 8002d88:	2207      	movs	r2, #7
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	4a04      	ldr	r2, [pc, #16]	; (8002da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d8e:	5cd3      	ldrb	r3, [r2, r3]
 8002d90:	40d9      	lsrs	r1, r3
 8002d92:	000b      	movs	r3, r1
}    
 8002d94:	0018      	movs	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	0800a694 	.word	0x0800a694

08002da4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2207      	movs	r2, #7
 8002db2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <HAL_RCC_GetClockConfig+0x4c>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2203      	movs	r2, #3
 8002dba:	401a      	ands	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_GetClockConfig+0x4c>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	22f0      	movs	r2, #240	; 0xf0
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_RCC_GetClockConfig+0x4c>)
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	23e0      	movs	r3, #224	; 0xe0
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	401a      	ands	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <HAL_RCC_GetClockConfig+0x50>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2201      	movs	r2, #1
 8002de0:	401a      	ands	r2, r3
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	601a      	str	r2, [r3, #0]
}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b002      	add	sp, #8
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40022000 	.word	0x40022000

08002df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e0a8      	b.n	8002f5c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	2382      	movs	r3, #130	; 0x82
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d009      	beq.n	8002e32 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	61da      	str	r2, [r3, #28]
 8002e24:	e005      	b.n	8002e32 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	225d      	movs	r2, #93	; 0x5d
 8002e3c:	5c9b      	ldrb	r3, [r3, r2]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d107      	bne.n	8002e54 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	225c      	movs	r2, #92	; 0x5c
 8002e48:	2100      	movs	r1, #0
 8002e4a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f7fe ff7c 	bl	8001d4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	225d      	movs	r2, #93	; 0x5d
 8002e58:	2102      	movs	r1, #2
 8002e5a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2140      	movs	r1, #64	; 0x40
 8002e68:	438a      	bics	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	23e0      	movs	r3, #224	; 0xe0
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d902      	bls.n	8002e7e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	e002      	b.n	8002e84 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	015b      	lsls	r3, r3, #5
 8002e82:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	23f0      	movs	r3, #240	; 0xf0
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d008      	beq.n	8002ea2 <HAL_SPI_Init+0xaa>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	23e0      	movs	r3, #224	; 0xe0
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d002      	beq.n	8002ea2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	2382      	movs	r3, #130	; 0x82
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	401a      	ands	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6899      	ldr	r1, [r3, #8]
 8002eb0:	2384      	movs	r3, #132	; 0x84
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	400b      	ands	r3, r1
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	2102      	movs	r1, #2
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	400b      	ands	r3, r1
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6999      	ldr	r1, [r3, #24]
 8002ed0:	2380      	movs	r3, #128	; 0x80
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	400b      	ands	r3, r1
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	2138      	movs	r1, #56	; 0x38
 8002ede:	400b      	ands	r3, r1
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	2180      	movs	r1, #128	; 0x80
 8002ee8:	400b      	ands	r3, r1
 8002eea:	431a      	orrs	r2, r3
 8002eec:	0011      	movs	r1, r2
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	019b      	lsls	r3, r3, #6
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	2204      	movs	r2, #4
 8002f08:	401a      	ands	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	2110      	movs	r1, #16
 8002f10:	400b      	ands	r3, r1
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f18:	2108      	movs	r1, #8
 8002f1a:	400b      	ands	r3, r1
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68d9      	ldr	r1, [r3, #12]
 8002f22:	23f0      	movs	r3, #240	; 0xf0
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	400b      	ands	r3, r1
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	0011      	movs	r1, r2
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	015b      	lsls	r3, r3, #5
 8002f32:	401a      	ands	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69da      	ldr	r2, [r3, #28]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4907      	ldr	r1, [pc, #28]	; (8002f64 <HAL_SPI_Init+0x16c>)
 8002f48:	400a      	ands	r2, r1
 8002f4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	225d      	movs	r2, #93	; 0x5d
 8002f56:	2101      	movs	r1, #1
 8002f58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b004      	add	sp, #16
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	fffff7ff 	.word	0xfffff7ff

08002f68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	001a      	movs	r2, r3
 8002f76:	1cbb      	adds	r3, r7, #2
 8002f78:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f7e:	2323      	movs	r3, #35	; 0x23
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	225c      	movs	r2, #92	; 0x5c
 8002f8a:	5c9b      	ldrb	r3, [r3, r2]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_SPI_TransmitReceive+0x2c>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e1b5      	b.n	8003300 <HAL_SPI_TransmitReceive+0x398>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	225c      	movs	r2, #92	; 0x5c
 8002f98:	2101      	movs	r1, #1
 8002f9a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f9c:	f7ff f844 	bl	8002028 <HAL_GetTick>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002fa4:	201b      	movs	r0, #27
 8002fa6:	183b      	adds	r3, r7, r0
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	215d      	movs	r1, #93	; 0x5d
 8002fac:	5c52      	ldrb	r2, [r2, r1]
 8002fae:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002fb6:	2312      	movs	r3, #18
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	1cba      	adds	r2, r7, #2
 8002fbc:	8812      	ldrh	r2, [r2, #0]
 8002fbe:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fc0:	183b      	adds	r3, r7, r0
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d011      	beq.n	8002fec <HAL_SPI_TransmitReceive+0x84>
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	2382      	movs	r3, #130	; 0x82
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d107      	bne.n	8002fe2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d103      	bne.n	8002fe2 <HAL_SPI_TransmitReceive+0x7a>
 8002fda:	183b      	adds	r3, r7, r0
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d004      	beq.n	8002fec <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002fe2:	2323      	movs	r3, #35	; 0x23
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	701a      	strb	r2, [r3, #0]
    goto error;
 8002fea:	e17e      	b.n	80032ea <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d006      	beq.n	8003000 <HAL_SPI_TransmitReceive+0x98>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_SPI_TransmitReceive+0x98>
 8002ff8:	1cbb      	adds	r3, r7, #2
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d104      	bne.n	800300a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003000:	2323      	movs	r3, #35	; 0x23
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]
    goto error;
 8003008:	e16f      	b.n	80032ea <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	225d      	movs	r2, #93	; 0x5d
 800300e:	5c9b      	ldrb	r3, [r3, r2]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b04      	cmp	r3, #4
 8003014:	d003      	beq.n	800301e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	225d      	movs	r2, #93	; 0x5d
 800301a:	2105      	movs	r1, #5
 800301c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1cba      	adds	r2, r7, #2
 800302e:	2146      	movs	r1, #70	; 0x46
 8003030:	8812      	ldrh	r2, [r2, #0]
 8003032:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1cba      	adds	r2, r7, #2
 8003038:	2144      	movs	r1, #68	; 0x44
 800303a:	8812      	ldrh	r2, [r2, #0]
 800303c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1cba      	adds	r2, r7, #2
 8003048:	8812      	ldrh	r2, [r2, #0]
 800304a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1cba      	adds	r2, r7, #2
 8003050:	8812      	ldrh	r2, [r2, #0]
 8003052:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	23e0      	movs	r3, #224	; 0xe0
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	429a      	cmp	r2, r3
 800306a:	d908      	bls.n	800307e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	49a4      	ldr	r1, [pc, #656]	; (8003308 <HAL_SPI_TransmitReceive+0x3a0>)
 8003078:	400a      	ands	r2, r1
 800307a:	605a      	str	r2, [r3, #4]
 800307c:	e008      	b.n	8003090 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	0149      	lsls	r1, r1, #5
 800308c:	430a      	orrs	r2, r1
 800308e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2240      	movs	r2, #64	; 0x40
 8003098:	4013      	ands	r3, r2
 800309a:	2b40      	cmp	r3, #64	; 0x40
 800309c:	d007      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2140      	movs	r1, #64	; 0x40
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	23e0      	movs	r3, #224	; 0xe0
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d800      	bhi.n	80030bc <HAL_SPI_TransmitReceive+0x154>
 80030ba:	e07f      	b.n	80031bc <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_SPI_TransmitReceive+0x168>
 80030c4:	2312      	movs	r3, #18
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d000      	beq.n	80030d0 <HAL_SPI_TransmitReceive+0x168>
 80030ce:	e069      	b.n	80031a4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	881a      	ldrh	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	1c9a      	adds	r2, r3, #2
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030f4:	e056      	b.n	80031a4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2202      	movs	r2, #2
 80030fe:	4013      	ands	r3, r2
 8003100:	2b02      	cmp	r3, #2
 8003102:	d11b      	bne.n	800313c <HAL_SPI_TransmitReceive+0x1d4>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d016      	beq.n	800313c <HAL_SPI_TransmitReceive+0x1d4>
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	2b01      	cmp	r3, #1
 8003112:	d113      	bne.n	800313c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003118:	881a      	ldrh	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	1c9a      	adds	r2, r3, #2
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2201      	movs	r2, #1
 8003144:	4013      	ands	r3, r2
 8003146:	2b01      	cmp	r3, #1
 8003148:	d11c      	bne.n	8003184 <HAL_SPI_TransmitReceive+0x21c>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2246      	movs	r2, #70	; 0x46
 800314e:	5a9b      	ldrh	r3, [r3, r2]
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d016      	beq.n	8003184 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	b292      	uxth	r2, r2
 8003162:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	1c9a      	adds	r2, r3, #2
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2246      	movs	r2, #70	; 0x46
 8003172:	5a9b      	ldrh	r3, [r3, r2]
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b299      	uxth	r1, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2246      	movs	r2, #70	; 0x46
 800317e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003180:	2301      	movs	r3, #1
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003184:	f7fe ff50 	bl	8002028 <HAL_GetTick>
 8003188:	0002      	movs	r2, r0
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003190:	429a      	cmp	r2, r3
 8003192:	d807      	bhi.n	80031a4 <HAL_SPI_TransmitReceive+0x23c>
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	3301      	adds	r3, #1
 8003198:	d004      	beq.n	80031a4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800319a:	2323      	movs	r3, #35	; 0x23
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	2203      	movs	r2, #3
 80031a0:	701a      	strb	r2, [r3, #0]
        goto error;
 80031a2:	e0a2      	b.n	80032ea <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1a3      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x18e>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2246      	movs	r2, #70	; 0x46
 80031b2:	5a9b      	ldrh	r3, [r3, r2]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d19d      	bne.n	80030f6 <HAL_SPI_TransmitReceive+0x18e>
 80031ba:	e085      	b.n	80032c8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_SPI_TransmitReceive+0x268>
 80031c4:	2312      	movs	r3, #18
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d000      	beq.n	80031d0 <HAL_SPI_TransmitReceive+0x268>
 80031ce:	e070      	b.n	80032b2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	330c      	adds	r3, #12
 80031da:	7812      	ldrb	r2, [r2, #0]
 80031dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031f6:	e05c      	b.n	80032b2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2202      	movs	r2, #2
 8003200:	4013      	ands	r3, r2
 8003202:	2b02      	cmp	r3, #2
 8003204:	d11c      	bne.n	8003240 <HAL_SPI_TransmitReceive+0x2d8>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d017      	beq.n	8003240 <HAL_SPI_TransmitReceive+0x2d8>
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	2b01      	cmp	r3, #1
 8003214:	d114      	bne.n	8003240 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	330c      	adds	r3, #12
 8003220:	7812      	ldrb	r2, [r2, #0]
 8003222:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2201      	movs	r2, #1
 8003248:	4013      	ands	r3, r2
 800324a:	2b01      	cmp	r3, #1
 800324c:	d11e      	bne.n	800328c <HAL_SPI_TransmitReceive+0x324>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2246      	movs	r2, #70	; 0x46
 8003252:	5a9b      	ldrh	r3, [r3, r2]
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d018      	beq.n	800328c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	330c      	adds	r3, #12
 8003260:	001a      	movs	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	7812      	ldrb	r2, [r2, #0]
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2246      	movs	r2, #70	; 0x46
 800327a:	5a9b      	ldrh	r3, [r3, r2]
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b299      	uxth	r1, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2246      	movs	r2, #70	; 0x46
 8003286:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003288:	2301      	movs	r3, #1
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800328c:	f7fe fecc 	bl	8002028 <HAL_GetTick>
 8003290:	0002      	movs	r2, r0
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003298:	429a      	cmp	r2, r3
 800329a:	d802      	bhi.n	80032a2 <HAL_SPI_TransmitReceive+0x33a>
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	3301      	adds	r3, #1
 80032a0:	d102      	bne.n	80032a8 <HAL_SPI_TransmitReceive+0x340>
 80032a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d104      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80032a8:	2323      	movs	r3, #35	; 0x23
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	2203      	movs	r2, #3
 80032ae:	701a      	strb	r2, [r3, #0]
        goto error;
 80032b0:	e01b      	b.n	80032ea <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d19d      	bne.n	80031f8 <HAL_SPI_TransmitReceive+0x290>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2246      	movs	r2, #70	; 0x46
 80032c0:	5a9b      	ldrh	r3, [r3, r2]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d197      	bne.n	80031f8 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	0018      	movs	r0, r3
 80032d0:	f000 f94c 	bl	800356c <SPI_EndRxTxTransaction>
 80032d4:	1e03      	subs	r3, r0, #0
 80032d6:	d007      	beq.n	80032e8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80032d8:	2323      	movs	r3, #35	; 0x23
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	661a      	str	r2, [r3, #96]	; 0x60
 80032e6:	e000      	b.n	80032ea <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80032e8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	225d      	movs	r2, #93	; 0x5d
 80032ee:	2101      	movs	r1, #1
 80032f0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	225c      	movs	r2, #92	; 0x5c
 80032f6:	2100      	movs	r1, #0
 80032f8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80032fa:	2323      	movs	r3, #35	; 0x23
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	781b      	ldrb	r3, [r3, #0]
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b00a      	add	sp, #40	; 0x28
 8003306:	bd80      	pop	{r7, pc}
 8003308:	ffffefff 	.word	0xffffefff

0800330c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	1dfb      	adds	r3, r7, #7
 800331a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800331c:	f7fe fe84 	bl	8002028 <HAL_GetTick>
 8003320:	0002      	movs	r2, r0
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	18d3      	adds	r3, r2, r3
 800332a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800332c:	f7fe fe7c 	bl	8002028 <HAL_GetTick>
 8003330:	0003      	movs	r3, r0
 8003332:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003334:	4b3a      	ldr	r3, [pc, #232]	; (8003420 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	015b      	lsls	r3, r3, #5
 800333a:	0d1b      	lsrs	r3, r3, #20
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	4353      	muls	r3, r2
 8003340:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003342:	e058      	b.n	80033f6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	3301      	adds	r3, #1
 8003348:	d055      	beq.n	80033f6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800334a:	f7fe fe6d 	bl	8002028 <HAL_GetTick>
 800334e:	0002      	movs	r2, r0
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	69fa      	ldr	r2, [r7, #28]
 8003356:	429a      	cmp	r2, r3
 8003358:	d902      	bls.n	8003360 <SPI_WaitFlagStateUntilTimeout+0x54>
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d142      	bne.n	80033e6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	21e0      	movs	r1, #224	; 0xe0
 800336c:	438a      	bics	r2, r1
 800336e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	2382      	movs	r3, #130	; 0x82
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	429a      	cmp	r2, r3
 800337a:	d113      	bne.n	80033a4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	429a      	cmp	r2, r3
 8003386:	d005      	beq.n	8003394 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	429a      	cmp	r2, r3
 8003392:	d107      	bne.n	80033a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2140      	movs	r1, #64	; 0x40
 80033a0:	438a      	bics	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	019b      	lsls	r3, r3, #6
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d110      	bne.n	80033d2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	491a      	ldr	r1, [pc, #104]	; (8003424 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80033bc:	400a      	ands	r2, r1
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2180      	movs	r1, #128	; 0x80
 80033cc:	0189      	lsls	r1, r1, #6
 80033ce:	430a      	orrs	r2, r1
 80033d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	225d      	movs	r2, #93	; 0x5d
 80033d6:	2101      	movs	r1, #1
 80033d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	225c      	movs	r2, #92	; 0x5c
 80033de:	2100      	movs	r1, #0
 80033e0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e017      	b.n	8003416 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	4013      	ands	r3, r2
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	425a      	negs	r2, r3
 8003406:	4153      	adcs	r3, r2
 8003408:	b2db      	uxtb	r3, r3
 800340a:	001a      	movs	r2, r3
 800340c:	1dfb      	adds	r3, r7, #7
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d197      	bne.n	8003344 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	0018      	movs	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	b008      	add	sp, #32
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	20000040 	.word	0x20000040
 8003424:	ffffdfff 	.word	0xffffdfff

08003428 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08a      	sub	sp, #40	; 0x28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003436:	2317      	movs	r3, #23
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800343e:	f7fe fdf3 	bl	8002028 <HAL_GetTick>
 8003442:	0002      	movs	r2, r0
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	18d3      	adds	r3, r2, r3
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800344e:	f7fe fdeb 	bl	8002028 <HAL_GetTick>
 8003452:	0003      	movs	r3, r0
 8003454:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	330c      	adds	r3, #12
 800345c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800345e:	4b41      	ldr	r3, [pc, #260]	; (8003564 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	0013      	movs	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	189b      	adds	r3, r3, r2
 8003468:	00da      	lsls	r2, r3, #3
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	0d1b      	lsrs	r3, r3, #20
 800346e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003470:	4353      	muls	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003474:	e068      	b.n	8003548 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	23c0      	movs	r3, #192	; 0xc0
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	429a      	cmp	r2, r3
 800347e:	d10a      	bne.n	8003496 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d107      	bne.n	8003496 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	b2da      	uxtb	r2, r3
 800348c:	2117      	movs	r1, #23
 800348e:	187b      	adds	r3, r7, r1
 8003490:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003492:	187b      	adds	r3, r7, r1
 8003494:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	3301      	adds	r3, #1
 800349a:	d055      	beq.n	8003548 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800349c:	f7fe fdc4 	bl	8002028 <HAL_GetTick>
 80034a0:	0002      	movs	r2, r0
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d902      	bls.n	80034b2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d142      	bne.n	8003538 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	21e0      	movs	r1, #224	; 0xe0
 80034be:	438a      	bics	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	2382      	movs	r3, #130	; 0x82
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d113      	bne.n	80034f6 <SPI_WaitFifoStateUntilTimeout+0xce>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	2380      	movs	r3, #128	; 0x80
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d005      	beq.n	80034e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	2380      	movs	r3, #128	; 0x80
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d107      	bne.n	80034f6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2140      	movs	r1, #64	; 0x40
 80034f2:	438a      	bics	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	019b      	lsls	r3, r3, #6
 80034fe:	429a      	cmp	r2, r3
 8003500:	d110      	bne.n	8003524 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4916      	ldr	r1, [pc, #88]	; (8003568 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800350e:	400a      	ands	r2, r1
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2180      	movs	r1, #128	; 0x80
 800351e:	0189      	lsls	r1, r1, #6
 8003520:	430a      	orrs	r2, r1
 8003522:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	225d      	movs	r2, #93	; 0x5d
 8003528:	2101      	movs	r1, #1
 800352a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	225c      	movs	r2, #92	; 0x5c
 8003530:	2100      	movs	r1, #0
 8003532:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e010      	b.n	800355a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	3b01      	subs	r3, #1
 8003546:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	4013      	ands	r3, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	429a      	cmp	r2, r3
 8003556:	d18e      	bne.n	8003476 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	0018      	movs	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	b00a      	add	sp, #40	; 0x28
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	20000040 	.word	0x20000040
 8003568:	ffffdfff 	.word	0xffffdfff

0800356c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af02      	add	r7, sp, #8
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	23c0      	movs	r3, #192	; 0xc0
 800357c:	0159      	lsls	r1, r3, #5
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	0013      	movs	r3, r2
 8003586:	2200      	movs	r2, #0
 8003588:	f7ff ff4e 	bl	8003428 <SPI_WaitFifoStateUntilTimeout>
 800358c:	1e03      	subs	r3, r0, #0
 800358e:	d007      	beq.n	80035a0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003594:	2220      	movs	r2, #32
 8003596:	431a      	orrs	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e027      	b.n	80035f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	0013      	movs	r3, r2
 80035aa:	2200      	movs	r2, #0
 80035ac:	2180      	movs	r1, #128	; 0x80
 80035ae:	f7ff fead 	bl	800330c <SPI_WaitFlagStateUntilTimeout>
 80035b2:	1e03      	subs	r3, r0, #0
 80035b4:	d007      	beq.n	80035c6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ba:	2220      	movs	r2, #32
 80035bc:	431a      	orrs	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e014      	b.n	80035f0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	23c0      	movs	r3, #192	; 0xc0
 80035ca:	00d9      	lsls	r1, r3, #3
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	0013      	movs	r3, r2
 80035d4:	2200      	movs	r2, #0
 80035d6:	f7ff ff27 	bl	8003428 <SPI_WaitFifoStateUntilTimeout>
 80035da:	1e03      	subs	r3, r0, #0
 80035dc:	d007      	beq.n	80035ee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e2:	2220      	movs	r2, #32
 80035e4:	431a      	orrs	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e000      	b.n	80035f0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	0018      	movs	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b004      	add	sp, #16
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e042      	b.n	8003690 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	223d      	movs	r2, #61	; 0x3d
 800360e:	5c9b      	ldrb	r3, [r3, r2]
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d107      	bne.n	8003626 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	223c      	movs	r2, #60	; 0x3c
 800361a:	2100      	movs	r1, #0
 800361c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	0018      	movs	r0, r3
 8003622:	f000 f839 	bl	8003698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	223d      	movs	r2, #61	; 0x3d
 800362a:	2102      	movs	r1, #2
 800362c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3304      	adds	r3, #4
 8003636:	0019      	movs	r1, r3
 8003638:	0010      	movs	r0, r2
 800363a:	f000 f9b7 	bl	80039ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2246      	movs	r2, #70	; 0x46
 8003642:	2101      	movs	r1, #1
 8003644:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	223e      	movs	r2, #62	; 0x3e
 800364a:	2101      	movs	r1, #1
 800364c:	5499      	strb	r1, [r3, r2]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	223f      	movs	r2, #63	; 0x3f
 8003652:	2101      	movs	r1, #1
 8003654:	5499      	strb	r1, [r3, r2]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2240      	movs	r2, #64	; 0x40
 800365a:	2101      	movs	r1, #1
 800365c:	5499      	strb	r1, [r3, r2]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2241      	movs	r2, #65	; 0x41
 8003662:	2101      	movs	r1, #1
 8003664:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2242      	movs	r2, #66	; 0x42
 800366a:	2101      	movs	r1, #1
 800366c:	5499      	strb	r1, [r3, r2]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2243      	movs	r2, #67	; 0x43
 8003672:	2101      	movs	r1, #1
 8003674:	5499      	strb	r1, [r3, r2]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2244      	movs	r2, #68	; 0x44
 800367a:	2101      	movs	r1, #1
 800367c:	5499      	strb	r1, [r3, r2]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2245      	movs	r2, #69	; 0x45
 8003682:	2101      	movs	r1, #1
 8003684:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	223d      	movs	r2, #61	; 0x3d
 800368a:	2101      	movs	r1, #1
 800368c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	0018      	movs	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	b002      	add	sp, #8
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b002      	add	sp, #8
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	223d      	movs	r2, #61	; 0x3d
 80036b4:	5c9b      	ldrb	r3, [r3, r2]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d001      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e035      	b.n	800372c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	223d      	movs	r2, #61	; 0x3d
 80036c4:	2102      	movs	r1, #2
 80036c6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2101      	movs	r1, #1
 80036d4:	430a      	orrs	r2, r1
 80036d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a15      	ldr	r2, [pc, #84]	; (8003734 <HAL_TIM_Base_Start_IT+0x8c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d009      	beq.n	80036f6 <HAL_TIM_Base_Start_IT+0x4e>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a14      	ldr	r2, [pc, #80]	; (8003738 <HAL_TIM_Base_Start_IT+0x90>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <HAL_TIM_Base_Start_IT+0x4e>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a12      	ldr	r2, [pc, #72]	; (800373c <HAL_TIM_Base_Start_IT+0x94>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d111      	bne.n	800371a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2207      	movs	r2, #7
 80036fe:	4013      	ands	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b06      	cmp	r3, #6
 8003706:	d010      	beq.n	800372a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2101      	movs	r1, #1
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003718:	e007      	b.n	800372a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2101      	movs	r1, #1
 8003726:	430a      	orrs	r2, r1
 8003728:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b004      	add	sp, #16
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40012c00 	.word	0x40012c00
 8003738:	40000400 	.word	0x40000400
 800373c:	40014000 	.word	0x40014000

08003740 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2202      	movs	r2, #2
 8003750:	4013      	ands	r3, r2
 8003752:	2b02      	cmp	r3, #2
 8003754:	d124      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	2202      	movs	r2, #2
 800375e:	4013      	ands	r3, r2
 8003760:	2b02      	cmp	r3, #2
 8003762:	d11d      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2203      	movs	r2, #3
 800376a:	4252      	negs	r2, r2
 800376c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	2203      	movs	r2, #3
 800377c:	4013      	ands	r3, r2
 800377e:	d004      	beq.n	800378a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	0018      	movs	r0, r3
 8003784:	f000 f8fa 	bl	800397c <HAL_TIM_IC_CaptureCallback>
 8003788:	e007      	b.n	800379a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	0018      	movs	r0, r3
 800378e:	f000 f8ed 	bl	800396c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	0018      	movs	r0, r3
 8003796:	f000 f8f9 	bl	800398c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2204      	movs	r2, #4
 80037a8:	4013      	ands	r3, r2
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d125      	bne.n	80037fa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2204      	movs	r2, #4
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d11e      	bne.n	80037fa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2205      	movs	r2, #5
 80037c2:	4252      	negs	r2, r2
 80037c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2202      	movs	r2, #2
 80037ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699a      	ldr	r2, [r3, #24]
 80037d2:	23c0      	movs	r3, #192	; 0xc0
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4013      	ands	r3, r2
 80037d8:	d004      	beq.n	80037e4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	0018      	movs	r0, r3
 80037de:	f000 f8cd 	bl	800397c <HAL_TIM_IC_CaptureCallback>
 80037e2:	e007      	b.n	80037f4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f000 f8c0 	bl	800396c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	0018      	movs	r0, r3
 80037f0:	f000 f8cc 	bl	800398c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2208      	movs	r2, #8
 8003802:	4013      	ands	r3, r2
 8003804:	2b08      	cmp	r3, #8
 8003806:	d124      	bne.n	8003852 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2208      	movs	r2, #8
 8003810:	4013      	ands	r3, r2
 8003812:	2b08      	cmp	r3, #8
 8003814:	d11d      	bne.n	8003852 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2209      	movs	r2, #9
 800381c:	4252      	negs	r2, r2
 800381e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2204      	movs	r2, #4
 8003824:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	2203      	movs	r2, #3
 800382e:	4013      	ands	r3, r2
 8003830:	d004      	beq.n	800383c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	0018      	movs	r0, r3
 8003836:	f000 f8a1 	bl	800397c <HAL_TIM_IC_CaptureCallback>
 800383a:	e007      	b.n	800384c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	0018      	movs	r0, r3
 8003840:	f000 f894 	bl	800396c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	0018      	movs	r0, r3
 8003848:	f000 f8a0 	bl	800398c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	2210      	movs	r2, #16
 800385a:	4013      	ands	r3, r2
 800385c:	2b10      	cmp	r3, #16
 800385e:	d125      	bne.n	80038ac <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	2210      	movs	r2, #16
 8003868:	4013      	ands	r3, r2
 800386a:	2b10      	cmp	r3, #16
 800386c:	d11e      	bne.n	80038ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2211      	movs	r2, #17
 8003874:	4252      	negs	r2, r2
 8003876:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2208      	movs	r2, #8
 800387c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	23c0      	movs	r3, #192	; 0xc0
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4013      	ands	r3, r2
 800388a:	d004      	beq.n	8003896 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	0018      	movs	r0, r3
 8003890:	f000 f874 	bl	800397c <HAL_TIM_IC_CaptureCallback>
 8003894:	e007      	b.n	80038a6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	0018      	movs	r0, r3
 800389a:	f000 f867 	bl	800396c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	0018      	movs	r0, r3
 80038a2:	f000 f873 	bl	800398c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2201      	movs	r2, #1
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d10f      	bne.n	80038da <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d108      	bne.n	80038da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2202      	movs	r2, #2
 80038ce:	4252      	negs	r2, r2
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f7fe f9f7 	bl	8001cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	2280      	movs	r2, #128	; 0x80
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b80      	cmp	r3, #128	; 0x80
 80038e6:	d10f      	bne.n	8003908 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2280      	movs	r2, #128	; 0x80
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b80      	cmp	r3, #128	; 0x80
 80038f4:	d108      	bne.n	8003908 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2281      	movs	r2, #129	; 0x81
 80038fc:	4252      	negs	r2, r2
 80038fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	0018      	movs	r0, r3
 8003904:	f000 f8d0 	bl	8003aa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2240      	movs	r2, #64	; 0x40
 8003910:	4013      	ands	r3, r2
 8003912:	2b40      	cmp	r3, #64	; 0x40
 8003914:	d10f      	bne.n	8003936 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	2240      	movs	r2, #64	; 0x40
 800391e:	4013      	ands	r3, r2
 8003920:	2b40      	cmp	r3, #64	; 0x40
 8003922:	d108      	bne.n	8003936 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2241      	movs	r2, #65	; 0x41
 800392a:	4252      	negs	r2, r2
 800392c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	0018      	movs	r0, r3
 8003932:	f000 f833 	bl	800399c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2220      	movs	r2, #32
 800393e:	4013      	ands	r3, r2
 8003940:	2b20      	cmp	r3, #32
 8003942:	d10f      	bne.n	8003964 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	4013      	ands	r3, r2
 800394e:	2b20      	cmp	r3, #32
 8003950:	d108      	bne.n	8003964 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2221      	movs	r2, #33	; 0x21
 8003958:	4252      	negs	r2, r2
 800395a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	0018      	movs	r0, r3
 8003960:	f000 f89a 	bl	8003a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	46bd      	mov	sp, r7
 8003968:	b002      	add	sp, #8
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003974:	46c0      	nop			; (mov r8, r8)
 8003976:	46bd      	mov	sp, r7
 8003978:	b002      	add	sp, #8
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003984:	46c0      	nop			; (mov r8, r8)
 8003986:	46bd      	mov	sp, r7
 8003988:	b002      	add	sp, #8
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003994:	46c0      	nop			; (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b002      	add	sp, #8
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039a4:	46c0      	nop			; (mov r8, r8)
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b002      	add	sp, #8
 80039aa:	bd80      	pop	{r7, pc}

080039ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a2f      	ldr	r2, [pc, #188]	; (8003a7c <TIM_Base_SetConfig+0xd0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d003      	beq.n	80039cc <TIM_Base_SetConfig+0x20>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a2e      	ldr	r2, [pc, #184]	; (8003a80 <TIM_Base_SetConfig+0xd4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d108      	bne.n	80039de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2270      	movs	r2, #112	; 0x70
 80039d0:	4393      	bics	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a26      	ldr	r2, [pc, #152]	; (8003a7c <TIM_Base_SetConfig+0xd0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <TIM_Base_SetConfig+0x62>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a25      	ldr	r2, [pc, #148]	; (8003a80 <TIM_Base_SetConfig+0xd4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00f      	beq.n	8003a0e <TIM_Base_SetConfig+0x62>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a24      	ldr	r2, [pc, #144]	; (8003a84 <TIM_Base_SetConfig+0xd8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00b      	beq.n	8003a0e <TIM_Base_SetConfig+0x62>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a23      	ldr	r2, [pc, #140]	; (8003a88 <TIM_Base_SetConfig+0xdc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d007      	beq.n	8003a0e <TIM_Base_SetConfig+0x62>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a22      	ldr	r2, [pc, #136]	; (8003a8c <TIM_Base_SetConfig+0xe0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d003      	beq.n	8003a0e <TIM_Base_SetConfig+0x62>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a21      	ldr	r2, [pc, #132]	; (8003a90 <TIM_Base_SetConfig+0xe4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d108      	bne.n	8003a20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4a20      	ldr	r2, [pc, #128]	; (8003a94 <TIM_Base_SetConfig+0xe8>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2280      	movs	r2, #128	; 0x80
 8003a24:	4393      	bics	r3, r2
 8003a26:	001a      	movs	r2, r3
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a0c      	ldr	r2, [pc, #48]	; (8003a7c <TIM_Base_SetConfig+0xd0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00b      	beq.n	8003a66 <TIM_Base_SetConfig+0xba>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a0d      	ldr	r2, [pc, #52]	; (8003a88 <TIM_Base_SetConfig+0xdc>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d007      	beq.n	8003a66 <TIM_Base_SetConfig+0xba>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a0c      	ldr	r2, [pc, #48]	; (8003a8c <TIM_Base_SetConfig+0xe0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d003      	beq.n	8003a66 <TIM_Base_SetConfig+0xba>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <TIM_Base_SetConfig+0xe4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d103      	bne.n	8003a6e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	615a      	str	r2, [r3, #20]
}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b004      	add	sp, #16
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40012c00 	.word	0x40012c00
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40002000 	.word	0x40002000
 8003a88:	40014000 	.word	0x40014000
 8003a8c:	40014400 	.word	0x40014400
 8003a90:	40014800 	.word	0x40014800
 8003a94:	fffffcff 	.word	0xfffffcff

08003a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aa0:	46c0      	nop			; (mov r8, r8)
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b002      	add	sp, #8
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b002      	add	sp, #8
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003abc:	4a06      	ldr	r2, [pc, #24]	; (8003ad8 <MX_FATFS_Init+0x20>)
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <MX_FATFS_Init+0x24>)
 8003ac0:	0011      	movs	r1, r2
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f003 fece 	bl	8007864 <FATFS_LinkDriver>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	001a      	movs	r2, r3
 8003acc:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <MX_FATFS_Init+0x28>)
 8003ace:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003ad0:	46c0      	nop			; (mov r8, r8)
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	20000554 	.word	0x20000554
 8003adc:	2000004c 	.word	0x2000004c
 8003ae0:	20000550 	.word	0x20000550

08003ae4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	0002      	movs	r2, r0
 8003aec:	1dfb      	adds	r3, r7, #7
 8003aee:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv);
 8003af0:	1dfb      	adds	r3, r7, #7
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	0018      	movs	r0, r3
 8003af6:	f000 fa21 	bl	8003f3c <USER_SPI_initialize>
 8003afa:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 8003afc:	0018      	movs	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b002      	add	sp, #8
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	1dfb      	adds	r3, r7, #7
 8003b0e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 8003b10:	1dfb      	adds	r3, r7, #7
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f000 fb29 	bl	800416c <USER_SPI_status>
 8003b1a:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b002      	add	sp, #8
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003b24:	b5b0      	push	{r4, r5, r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	250f      	movs	r5, #15
 8003b32:	197b      	adds	r3, r7, r5
 8003b34:	1c02      	adds	r2, r0, #0
 8003b36:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 8003b38:	683c      	ldr	r4, [r7, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	197b      	adds	r3, r7, r5
 8003b40:	7818      	ldrb	r0, [r3, #0]
 8003b42:	0023      	movs	r3, r4
 8003b44:	f000 fb28 	bl	8004198 <USER_SPI_read>
 8003b48:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b004      	add	sp, #16
 8003b50:	bdb0      	pop	{r4, r5, r7, pc}

08003b52 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003b52:	b5b0      	push	{r4, r5, r7, lr}
 8003b54:	b084      	sub	sp, #16
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
 8003b5e:	250f      	movs	r5, #15
 8003b60:	197b      	adds	r3, r7, r5
 8003b62:	1c02      	adds	r2, r0, #0
 8003b64:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 8003b66:	683c      	ldr	r4, [r7, #0]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	197b      	adds	r3, r7, r5
 8003b6e:	7818      	ldrb	r0, [r3, #0]
 8003b70:	0023      	movs	r3, r4
 8003b72:	f000 fb7d 	bl	8004270 <USER_SPI_write>
 8003b76:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b004      	add	sp, #16
 8003b7e:	bdb0      	pop	{r4, r5, r7, pc}

08003b80 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	603a      	str	r2, [r7, #0]
 8003b88:	1dfb      	adds	r3, r7, #7
 8003b8a:	1c02      	adds	r2, r0, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	1dbb      	adds	r3, r7, #6
 8003b90:	1c0a      	adds	r2, r1, #0
 8003b92:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	1dbb      	adds	r3, r7, #6
 8003b98:	7819      	ldrb	r1, [r3, #0]
 8003b9a:	1dfb      	adds	r3, r7, #7
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f000 fbe6 	bl	8004370 <USER_SPI_ioctl>
 8003ba4:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b002      	add	sp, #8
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <SPI_Timer_On>:
static BYTE CardType; /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	spiTimerTickStart = HAL_GetTick();
 8003bb8:	f7fe fa36 	bl	8002028 <HAL_GetTick>
 8003bbc:	0002      	movs	r2, r0
 8003bbe:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <SPI_Timer_On+0x20>)
 8003bc0:	601a      	str	r2, [r3, #0]
	spiTimerTickDelay = waitTicks;
 8003bc2:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <SPI_Timer_On+0x24>)
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	601a      	str	r2, [r3, #0]
}
 8003bc8:	46c0      	nop			; (mov r8, r8)
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b002      	add	sp, #8
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	2000055c 	.word	0x2000055c
 8003bd4:	20000560 	.word	0x20000560

08003bd8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
	return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003bdc:	f7fe fa24 	bl	8002028 <HAL_GetTick>
 8003be0:	0002      	movs	r2, r0
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <SPI_Timer_Status+0x24>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	1ad2      	subs	r2, r2, r3
 8003be8:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <SPI_Timer_Status+0x28>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	419b      	sbcs	r3, r3
 8003bf0:	425b      	negs	r3, r3
 8003bf2:	b2db      	uxtb	r3, r3
}
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	2000055c 	.word	0x2000055c
 8003c00:	20000560 	.word	0x20000560

08003c04 <xchg_spi>:
/* SPI controls (Platform dependent)                                     */
/*-----------------------------------------------------------------------*/

/* Exchange a byte */
static BYTE xchg_spi(BYTE dat /* Data to send */
) {
 8003c04:	b590      	push	{r4, r7, lr}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	0002      	movs	r2, r0
 8003c0c:	1dfb      	adds	r3, r7, #7
 8003c0e:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
	HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8003c10:	240f      	movs	r4, #15
 8003c12:	193a      	adds	r2, r7, r4
 8003c14:	1df9      	adds	r1, r7, #7
 8003c16:	4806      	ldr	r0, [pc, #24]	; (8003c30 <xchg_spi+0x2c>)
 8003c18:	2332      	movs	r3, #50	; 0x32
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f7ff f9a3 	bl	8002f68 <HAL_SPI_TransmitReceive>
	return rxDat;
 8003c22:	193b      	adds	r3, r7, r4
 8003c24:	781b      	ldrb	r3, [r3, #0]
}
 8003c26:	0018      	movs	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b005      	add	sp, #20
 8003c2c:	bd90      	pop	{r4, r7, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	200003dc 	.word	0x200003dc

08003c34 <rcvr_spi_multi>:

/* Receive multiple byte */
static
void rcvr_spi_multi(BYTE *buff, /* Pointer to data buffer */
UINT btr /* Number of bytes to receive (even number) */
) {
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
	for (UINT i = 0; i < btr; i++) {
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	e00a      	b.n	8003c5a <rcvr_spi_multi+0x26>
		*(buff + i) = xchg_spi(0xFF);
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	18d4      	adds	r4, r2, r3
 8003c4a:	20ff      	movs	r0, #255	; 0xff
 8003c4c:	f7ff ffda 	bl	8003c04 <xchg_spi>
 8003c50:	0003      	movs	r3, r0
 8003c52:	7023      	strb	r3, [r4, #0]
	for (UINT i = 0; i < btr; i++) {
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3301      	adds	r3, #1
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d3f0      	bcc.n	8003c44 <rcvr_spi_multi+0x10>
	}
}
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b005      	add	sp, #20
 8003c6a:	bd90      	pop	{r4, r7, pc}

08003c6c <xmit_spi_multi>:
#if _USE_WRITE
/* Send multiple byte */
static
void xmit_spi_multi(const BYTE *buff, /* Pointer to the data */
UINT btx /* Number of bytes to send (even number) */
) {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
	for (UINT i = 0; i < btx; i++) {
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	e009      	b.n	8003c90 <xmit_spi_multi+0x24>
		xchg_spi(*(buff + i));
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	18d3      	adds	r3, r2, r3
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	0018      	movs	r0, r3
 8003c86:	f7ff ffbd 	bl	8003c04 <xchg_spi>
	for (UINT i = 0; i < btx; i++) {
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d3f1      	bcc.n	8003c7c <xmit_spi_multi+0x10>
	}
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	b004      	add	sp, #16
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <wait_ready>:
/*-----------------------------------------------------------------------*/

static
int wait_ready( /* 1:Ready, 0:Timeout */
UINT wt /* Timeout [ms] */
) {
 8003ca2:	b5b0      	push	{r4, r5, r7, lr}
 8003ca4:	b086      	sub	sp, #24
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003caa:	f7fe f9bd 	bl	8002028 <HAL_GetTick>
 8003cae:	0003      	movs	r3, r0
 8003cb0:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t) wt;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003cb6:	250f      	movs	r5, #15
 8003cb8:	197c      	adds	r4, r7, r5
 8003cba:	20ff      	movs	r0, #255	; 0xff
 8003cbc:	f7ff ffa2 	bl	8003c04 <xchg_spi>
 8003cc0:	0003      	movs	r3, r0
 8003cc2:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF
			&& ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay)); /* Wait for card goes ready or timeout */
 8003cc4:	197b      	adds	r3, r7, r5
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2bff      	cmp	r3, #255	; 0xff
 8003cca:	d007      	beq.n	8003cdc <wait_ready+0x3a>
 8003ccc:	f7fe f9ac 	bl	8002028 <HAL_GetTick>
 8003cd0:	0002      	movs	r2, r0
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d8ec      	bhi.n	8003cb6 <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 8003cdc:	230f      	movs	r3, #15
 8003cde:	18fb      	adds	r3, r7, r3
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	3bff      	subs	r3, #255	; 0xff
 8003ce4:	425a      	negs	r2, r3
 8003ce6:	4153      	adcs	r3, r2
 8003ce8:	b2db      	uxtb	r3, r3
}
 8003cea:	0018      	movs	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	b006      	add	sp, #24
 8003cf0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003cf4 <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect(void) {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
	CS_HIGH(); /* Set CS# high */
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <despiselect+0x1c>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	2140      	movs	r1, #64	; 0x40
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f000 fe4a 	bl	8004998 <gpio_write>
	xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003d04:	20ff      	movs	r0, #255	; 0xff
 8003d06:	f7ff ff7d 	bl	8003c04 <xchg_spi>

}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	48000400 	.word	0x48000400

08003d14 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect(void) /* 1:OK, 0:Timeout */
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
	CS_LOW(); /* Set CS# low */
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <spiselect+0x34>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2140      	movs	r1, #64	; 0x40
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f000 fe3a 	bl	8004998 <gpio_write>
	xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 8003d24:	20ff      	movs	r0, #255	; 0xff
 8003d26:	f7ff ff6d 	bl	8003c04 <xchg_spi>
	if (wait_ready(500))
 8003d2a:	23fa      	movs	r3, #250	; 0xfa
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7ff ffb7 	bl	8003ca2 <wait_ready>
 8003d34:	1e03      	subs	r3, r0, #0
 8003d36:	d001      	beq.n	8003d3c <spiselect+0x28>
		return 1; /* Wait for card ready */
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e002      	b.n	8003d42 <spiselect+0x2e>

	despiselect();
 8003d3c:	f7ff ffda 	bl	8003cf4 <despiselect>
	return 0; /* Timeout */
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	0018      	movs	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	48000400 	.word	0x48000400

08003d4c <rcvr_datablock>:

static
int rcvr_datablock( /* 1:OK, 0:Error */
BYTE *buff, /* Data buffer */
UINT btr /* Data block length (byte) */
) {
 8003d4c:	b5b0      	push	{r4, r5, r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
	BYTE token;

	SPI_Timer_On(200);
 8003d56:	20c8      	movs	r0, #200	; 0xc8
 8003d58:	f7ff ff2a 	bl	8003bb0 <SPI_Timer_On>
	do { /* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003d5c:	250f      	movs	r5, #15
 8003d5e:	197c      	adds	r4, r7, r5
 8003d60:	20ff      	movs	r0, #255	; 0xff
 8003d62:	f7ff ff4f 	bl	8003c04 <xchg_spi>
 8003d66:	0003      	movs	r3, r0
 8003d68:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003d6a:	197b      	adds	r3, r7, r5
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2bff      	cmp	r3, #255	; 0xff
 8003d70:	d103      	bne.n	8003d7a <rcvr_datablock+0x2e>
 8003d72:	f7ff ff31 	bl	8003bd8 <SPI_Timer_Status>
 8003d76:	1e03      	subs	r3, r0, #0
 8003d78:	d1f0      	bne.n	8003d5c <rcvr_datablock+0x10>
	if (token != 0xFE)
 8003d7a:	230f      	movs	r3, #15
 8003d7c:	18fb      	adds	r3, r7, r3
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2bfe      	cmp	r3, #254	; 0xfe
 8003d82:	d001      	beq.n	8003d88 <rcvr_datablock+0x3c>
		return 0; /* Function fails if invalid DataStart token or timeout */
 8003d84:	2300      	movs	r3, #0
 8003d86:	e00c      	b.n	8003da2 <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr); /* Store trailing data to the buffer */
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	0011      	movs	r1, r2
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f7ff ff50 	bl	8003c34 <rcvr_spi_multi>
	xchg_spi(0xFF);
 8003d94:	20ff      	movs	r0, #255	; 0xff
 8003d96:	f7ff ff35 	bl	8003c04 <xchg_spi>
	xchg_spi(0xFF); /* Discard CRC */
 8003d9a:	20ff      	movs	r0, #255	; 0xff
 8003d9c:	f7ff ff32 	bl	8003c04 <xchg_spi>

	return 1; /* Function succeeded */
 8003da0:	2301      	movs	r3, #1
}
 8003da2:	0018      	movs	r0, r3
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b004      	add	sp, #16
 8003da8:	bdb0      	pop	{r4, r5, r7, pc}

08003daa <xmit_datablock>:
#if _USE_WRITE
static
int xmit_datablock( /* 1:OK, 0:Failed */
const BYTE *buff, /* Ponter to 512 byte data to be sent */
BYTE token /* Token */
) {
 8003daa:	b5b0      	push	{r4, r5, r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	000a      	movs	r2, r1
 8003db4:	1cfb      	adds	r3, r7, #3
 8003db6:	701a      	strb	r2, [r3, #0]
	BYTE resp;

	if (!wait_ready(500))
 8003db8:	23fa      	movs	r3, #250	; 0xfa
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f7ff ff70 	bl	8003ca2 <wait_ready>
 8003dc2:	1e03      	subs	r3, r0, #0
 8003dc4:	d101      	bne.n	8003dca <xmit_datablock+0x20>
		return 0; /* Wait for card ready */
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e025      	b.n	8003e16 <xmit_datablock+0x6c>

	xchg_spi(token); /* Send token */
 8003dca:	1cfb      	adds	r3, r7, #3
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f7ff ff18 	bl	8003c04 <xchg_spi>
	if (token != 0xFD) { /* Send data if token is other than StopTran */
 8003dd4:	1cfb      	adds	r3, r7, #3
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2bfd      	cmp	r3, #253	; 0xfd
 8003dda:	d01b      	beq.n	8003e14 <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512); /* Data */
 8003ddc:	2380      	movs	r3, #128	; 0x80
 8003dde:	009a      	lsls	r2, r3, #2
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	0011      	movs	r1, r2
 8003de4:	0018      	movs	r0, r3
 8003de6:	f7ff ff41 	bl	8003c6c <xmit_spi_multi>
		xchg_spi(0xFF);
 8003dea:	20ff      	movs	r0, #255	; 0xff
 8003dec:	f7ff ff0a 	bl	8003c04 <xchg_spi>
		xchg_spi(0xFF); /* Dummy CRC */
 8003df0:	20ff      	movs	r0, #255	; 0xff
 8003df2:	f7ff ff07 	bl	8003c04 <xchg_spi>

		resp = xchg_spi(0xFF); /* Receive data resp */
 8003df6:	250f      	movs	r5, #15
 8003df8:	197c      	adds	r4, r7, r5
 8003dfa:	20ff      	movs	r0, #255	; 0xff
 8003dfc:	f7ff ff02 	bl	8003c04 <xchg_spi>
 8003e00:	0003      	movs	r3, r0
 8003e02:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05)
 8003e04:	197b      	adds	r3, r7, r5
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	221f      	movs	r2, #31
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	d001      	beq.n	8003e14 <xmit_datablock+0x6a>
			return 0; /* Function fails if the data packet was not accepted */
 8003e10:	2300      	movs	r3, #0
 8003e12:	e000      	b.n	8003e16 <xmit_datablock+0x6c>
	}
	return 1;
 8003e14:	2301      	movs	r3, #1
}
 8003e16:	0018      	movs	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b004      	add	sp, #16
 8003e1c:	bdb0      	pop	{r4, r5, r7, pc}

08003e1e <send_cmd>:
/*-----------------------------------------------------------------------*/

static BYTE send_cmd( /* Return value: R1 resp (bit7==1:Failed to send) */
BYTE cmd, /* Command index */
DWORD arg /* Argument */
) {
 8003e1e:	b5b0      	push	{r4, r5, r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	0002      	movs	r2, r0
 8003e26:	6039      	str	r1, [r7, #0]
 8003e28:	1dfb      	adds	r3, r7, #7
 8003e2a:	701a      	strb	r2, [r3, #0]
	BYTE n, res;

	if (cmd & 0x80) { /* Send a CMD55 prior to ACMD<n> */
 8003e2c:	1dfb      	adds	r3, r7, #7
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	b25b      	sxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	da15      	bge.n	8003e62 <send_cmd+0x44>
		cmd &= 0x7F;
 8003e36:	1dfb      	adds	r3, r7, #7
 8003e38:	1dfa      	adds	r2, r7, #7
 8003e3a:	7812      	ldrb	r2, [r2, #0]
 8003e3c:	217f      	movs	r1, #127	; 0x7f
 8003e3e:	400a      	ands	r2, r1
 8003e40:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 8003e42:	250e      	movs	r5, #14
 8003e44:	197c      	adds	r4, r7, r5
 8003e46:	2100      	movs	r1, #0
 8003e48:	2037      	movs	r0, #55	; 0x37
 8003e4a:	f7ff ffe8 	bl	8003e1e <send_cmd>
 8003e4e:	0003      	movs	r3, r0
 8003e50:	7023      	strb	r3, [r4, #0]
		if (res > 1)
 8003e52:	002a      	movs	r2, r5
 8003e54:	18bb      	adds	r3, r7, r2
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d902      	bls.n	8003e62 <send_cmd+0x44>
			return res;
 8003e5c:	18bb      	adds	r3, r7, r2
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	e067      	b.n	8003f32 <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003e62:	1dfb      	adds	r3, r7, #7
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b0c      	cmp	r3, #12
 8003e68:	d007      	beq.n	8003e7a <send_cmd+0x5c>
		despiselect();
 8003e6a:	f7ff ff43 	bl	8003cf4 <despiselect>
		if (!spiselect())
 8003e6e:	f7ff ff51 	bl	8003d14 <spiselect>
 8003e72:	1e03      	subs	r3, r0, #0
 8003e74:	d101      	bne.n	8003e7a <send_cmd+0x5c>
			return 0xFF;
 8003e76:	23ff      	movs	r3, #255	; 0xff
 8003e78:	e05b      	b.n	8003f32 <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd); /* Start + command index */
 8003e7a:	1dfb      	adds	r3, r7, #7
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2240      	movs	r2, #64	; 0x40
 8003e80:	4313      	orrs	r3, r2
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	0018      	movs	r0, r3
 8003e86:	f7ff febd 	bl	8003c04 <xchg_spi>
	xchg_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	0e1b      	lsrs	r3, r3, #24
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7ff feb7 	bl	8003c04 <xchg_spi>
	xchg_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f7ff feb1 	bl	8003c04 <xchg_spi>
	xchg_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	0a1b      	lsrs	r3, r3, #8
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f7ff feab 	bl	8003c04 <xchg_spi>
	xchg_spi((BYTE) arg); /* Argument[7..0] */
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f7ff fea6 	bl	8003c04 <xchg_spi>
	n = 0x01; /* Dummy CRC + Stop */
 8003eb8:	210f      	movs	r1, #15
 8003eba:	187b      	adds	r3, r7, r1
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0)
 8003ec0:	1dfb      	adds	r3, r7, #7
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <send_cmd+0xb0>
		n = 0x95; /* Valid CRC for CMD0(0) */
 8003ec8:	187b      	adds	r3, r7, r1
 8003eca:	2295      	movs	r2, #149	; 0x95
 8003ecc:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8)
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d103      	bne.n	8003ede <send_cmd+0xc0>
		n = 0x87; /* Valid CRC for CMD8(0x1AA) */
 8003ed6:	230f      	movs	r3, #15
 8003ed8:	18fb      	adds	r3, r7, r3
 8003eda:	2287      	movs	r2, #135	; 0x87
 8003edc:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 8003ede:	230f      	movs	r3, #15
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7ff fe8d 	bl	8003c04 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12)
 8003eea:	1dfb      	adds	r3, r7, #7
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b0c      	cmp	r3, #12
 8003ef0:	d102      	bne.n	8003ef8 <send_cmd+0xda>
		xchg_spi(0xFF); /* Diacard following one byte when CMD12 */
 8003ef2:	20ff      	movs	r0, #255	; 0xff
 8003ef4:	f7ff fe86 	bl	8003c04 <xchg_spi>
	n = 10; /* Wait for response (10 bytes max) */
 8003ef8:	230f      	movs	r3, #15
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	220a      	movs	r2, #10
 8003efe:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 8003f00:	250e      	movs	r5, #14
 8003f02:	197c      	adds	r4, r7, r5
 8003f04:	20ff      	movs	r0, #255	; 0xff
 8003f06:	f7ff fe7d 	bl	8003c04 <xchg_spi>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8003f0e:	197b      	adds	r3, r7, r5
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	b25b      	sxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	da09      	bge.n	8003f2c <send_cmd+0x10e>
 8003f18:	210f      	movs	r1, #15
 8003f1a:	187b      	adds	r3, r7, r1
 8003f1c:	187a      	adds	r2, r7, r1
 8003f1e:	7812      	ldrb	r2, [r2, #0]
 8003f20:	3a01      	subs	r2, #1
 8003f22:	701a      	strb	r2, [r3, #0]
 8003f24:	187b      	adds	r3, r7, r1
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e9      	bne.n	8003f00 <send_cmd+0xe2>

	return res; /* Return received response */
 8003f2c:	230e      	movs	r3, #14
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	781b      	ldrb	r3, [r3, #0]
}
 8003f32:	0018      	movs	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b004      	add	sp, #16
 8003f38:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003f3c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize(BYTE drv /* Physical drive number (0) */
) {
 8003f3c:	b5b0      	push	{r4, r5, r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	0002      	movs	r2, r0
 8003f44:	1dfb      	adds	r3, r7, #7
 8003f46:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0)
 8003f48:	1dfb      	adds	r3, r7, #7
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <USER_SPI_initialize+0x18>
		return STA_NOINIT; /* Supports only drive 0 */
 8003f50:	2301      	movs	r3, #1
 8003f52:	e100      	b.n	8004156 <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK)
 8003f54:	4b82      	ldr	r3, [pc, #520]	; (8004160 <USER_SPI_initialize+0x224>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	001a      	movs	r2, r3
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d003      	beq.n	8003f6a <USER_SPI_initialize+0x2e>
		return Stat; /* Is card existing in the soket? */
 8003f62:	4b7f      	ldr	r3, [pc, #508]	; (8004160 <USER_SPI_initialize+0x224>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	e0f5      	b.n	8004156 <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 8003f6a:	4b7e      	ldr	r3, [pc, #504]	; (8004164 <USER_SPI_initialize+0x228>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2238      	movs	r2, #56	; 0x38
 8003f72:	4393      	bics	r3, r2
 8003f74:	001a      	movs	r2, r3
 8003f76:	4b7b      	ldr	r3, [pc, #492]	; (8004164 <USER_SPI_initialize+0x228>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2130      	movs	r1, #48	; 0x30
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--)
 8003f80:	230f      	movs	r3, #15
 8003f82:	18fb      	adds	r3, r7, r3
 8003f84:	220a      	movs	r2, #10
 8003f86:	701a      	strb	r2, [r3, #0]
 8003f88:	e008      	b.n	8003f9c <USER_SPI_initialize+0x60>
		xchg_spi(0xFF); /* Send 80 dummy clocks */
 8003f8a:	20ff      	movs	r0, #255	; 0xff
 8003f8c:	f7ff fe3a 	bl	8003c04 <xchg_spi>
	for (n = 10; n; n--)
 8003f90:	210f      	movs	r1, #15
 8003f92:	187b      	adds	r3, r7, r1
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	187b      	adds	r3, r7, r1
 8003f98:	3a01      	subs	r2, #1
 8003f9a:	701a      	strb	r2, [r3, #0]
 8003f9c:	240f      	movs	r4, #15
 8003f9e:	193b      	adds	r3, r7, r4
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f1      	bne.n	8003f8a <USER_SPI_initialize+0x4e>

	ty = 0;
 8003fa6:	230d      	movs	r3, #13
 8003fa8:	18fb      	adds	r3, r7, r3
 8003faa:	2200      	movs	r2, #0
 8003fac:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) { /* Put the card SPI/Idle state */
 8003fae:	2100      	movs	r1, #0
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	f7ff ff34 	bl	8003e1e <send_cmd>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d000      	beq.n	8003fbe <USER_SPI_initialize+0x82>
 8003fbc:	e0a6      	b.n	800410c <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000); /* Initialization timeout = 1 sec */
 8003fbe:	23fa      	movs	r3, #250	; 0xfa
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f7ff fdf4 	bl	8003bb0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2? */
 8003fc8:	23d5      	movs	r3, #213	; 0xd5
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	0019      	movs	r1, r3
 8003fce:	2008      	movs	r0, #8
 8003fd0:	f7ff ff25 	bl	8003e1e <send_cmd>
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d162      	bne.n	80040a0 <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++)
 8003fda:	193b      	adds	r3, r7, r4
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
 8003fe0:	e00f      	b.n	8004002 <USER_SPI_initialize+0xc6>
				ocr[n] = xchg_spi(0xFF); /* Get 32 bit return value of R7 resp */
 8003fe2:	250f      	movs	r5, #15
 8003fe4:	197b      	adds	r3, r7, r5
 8003fe6:	781c      	ldrb	r4, [r3, #0]
 8003fe8:	20ff      	movs	r0, #255	; 0xff
 8003fea:	f7ff fe0b 	bl	8003c04 <xchg_spi>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	001a      	movs	r2, r3
 8003ff2:	2308      	movs	r3, #8
 8003ff4:	18fb      	adds	r3, r7, r3
 8003ff6:	551a      	strb	r2, [r3, r4]
			for (n = 0; n < 4; n++)
 8003ff8:	197b      	adds	r3, r7, r5
 8003ffa:	781a      	ldrb	r2, [r3, #0]
 8003ffc:	197b      	adds	r3, r7, r5
 8003ffe:	3201      	adds	r2, #1
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	230f      	movs	r3, #15
 8004004:	18fb      	adds	r3, r7, r3
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b03      	cmp	r3, #3
 800400a:	d9ea      	bls.n	8003fe2 <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* Is the card supports vcc of 2.7-3.6V? */
 800400c:	2208      	movs	r2, #8
 800400e:	18bb      	adds	r3, r7, r2
 8004010:	789b      	ldrb	r3, [r3, #2]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d000      	beq.n	8004018 <USER_SPI_initialize+0xdc>
 8004016:	e079      	b.n	800410c <USER_SPI_initialize+0x1d0>
 8004018:	18bb      	adds	r3, r7, r2
 800401a:	78db      	ldrb	r3, [r3, #3]
 800401c:	2baa      	cmp	r3, #170	; 0xaa
 800401e:	d000      	beq.n	8004022 <USER_SPI_initialize+0xe6>
 8004020:	e074      	b.n	800410c <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30))
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	f7ff fdd8 	bl	8003bd8 <SPI_Timer_Status>
 8004028:	1e03      	subs	r3, r0, #0
 800402a:	d007      	beq.n	800403c <USER_SPI_initialize+0x100>
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	05db      	lsls	r3, r3, #23
 8004030:	0019      	movs	r1, r3
 8004032:	20a9      	movs	r0, #169	; 0xa9
 8004034:	f7ff fef3 	bl	8003e1e <send_cmd>
 8004038:	1e03      	subs	r3, r0, #0
 800403a:	d1f3      	bne.n	8004024 <USER_SPI_initialize+0xe8>
					; /* Wait for end of initialization with ACMD41(HCS) */
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
 800403c:	f7ff fdcc 	bl	8003bd8 <SPI_Timer_Status>
 8004040:	1e03      	subs	r3, r0, #0
 8004042:	d063      	beq.n	800410c <USER_SPI_initialize+0x1d0>
 8004044:	2100      	movs	r1, #0
 8004046:	203a      	movs	r0, #58	; 0x3a
 8004048:	f7ff fee9 	bl	8003e1e <send_cmd>
 800404c:	1e03      	subs	r3, r0, #0
 800404e:	d15d      	bne.n	800410c <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++)
 8004050:	230f      	movs	r3, #15
 8004052:	18fb      	adds	r3, r7, r3
 8004054:	2200      	movs	r2, #0
 8004056:	701a      	strb	r2, [r3, #0]
 8004058:	e00f      	b.n	800407a <USER_SPI_initialize+0x13e>
						ocr[n] = xchg_spi(0xFF);
 800405a:	250f      	movs	r5, #15
 800405c:	197b      	adds	r3, r7, r5
 800405e:	781c      	ldrb	r4, [r3, #0]
 8004060:	20ff      	movs	r0, #255	; 0xff
 8004062:	f7ff fdcf 	bl	8003c04 <xchg_spi>
 8004066:	0003      	movs	r3, r0
 8004068:	001a      	movs	r2, r3
 800406a:	2308      	movs	r3, #8
 800406c:	18fb      	adds	r3, r7, r3
 800406e:	551a      	strb	r2, [r3, r4]
					for (n = 0; n < 4; n++)
 8004070:	197b      	adds	r3, r7, r5
 8004072:	781a      	ldrb	r2, [r3, #0]
 8004074:	197b      	adds	r3, r7, r5
 8004076:	3201      	adds	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	230f      	movs	r3, #15
 800407c:	18fb      	adds	r3, r7, r3
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d9ea      	bls.n	800405a <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* Card id SDv2 */
 8004084:	2308      	movs	r3, #8
 8004086:	18fb      	adds	r3, r7, r3
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	001a      	movs	r2, r3
 800408c:	2340      	movs	r3, #64	; 0x40
 800408e:	4013      	ands	r3, r2
 8004090:	d001      	beq.n	8004096 <USER_SPI_initialize+0x15a>
 8004092:	220c      	movs	r2, #12
 8004094:	e000      	b.n	8004098 <USER_SPI_initialize+0x15c>
 8004096:	2204      	movs	r2, #4
 8004098:	230d      	movs	r3, #13
 800409a:	18fb      	adds	r3, r7, r3
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	e035      	b.n	800410c <USER_SPI_initialize+0x1d0>
				}
			}
		} else { /* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) { /* SDv1 or MMC? */
 80040a0:	2100      	movs	r1, #0
 80040a2:	20a9      	movs	r0, #169	; 0xa9
 80040a4:	f7ff febb 	bl	8003e1e <send_cmd>
 80040a8:	0003      	movs	r3, r0
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d808      	bhi.n	80040c0 <USER_SPI_initialize+0x184>
				ty = CT_SD1;
 80040ae:	230d      	movs	r3, #13
 80040b0:	18fb      	adds	r3, r7, r3
 80040b2:	2202      	movs	r2, #2
 80040b4:	701a      	strb	r2, [r3, #0]
				cmd = ACMD41; /* SDv1 (ACMD41(0)) */
 80040b6:	230e      	movs	r3, #14
 80040b8:	18fb      	adds	r3, r7, r3
 80040ba:	22a9      	movs	r2, #169	; 0xa9
 80040bc:	701a      	strb	r2, [r3, #0]
 80040be:	e007      	b.n	80040d0 <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC;
 80040c0:	230d      	movs	r3, #13
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	2201      	movs	r2, #1
 80040c6:	701a      	strb	r2, [r3, #0]
				cmd = CMD1; /* MMCv3 (CMD1(0)) */
 80040c8:	230e      	movs	r3, #14
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	2201      	movs	r2, #1
 80040ce:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0))
 80040d0:	46c0      	nop			; (mov r8, r8)
 80040d2:	f7ff fd81 	bl	8003bd8 <SPI_Timer_Status>
 80040d6:	1e03      	subs	r3, r0, #0
 80040d8:	d008      	beq.n	80040ec <USER_SPI_initialize+0x1b0>
 80040da:	230e      	movs	r3, #14
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2100      	movs	r1, #0
 80040e2:	0018      	movs	r0, r3
 80040e4:	f7ff fe9b 	bl	8003e1e <send_cmd>
 80040e8:	1e03      	subs	r3, r0, #0
 80040ea:	d1f2      	bne.n	80040d2 <USER_SPI_initialize+0x196>
				; /* Wait for end of initialization */
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0) /* Set block length: 512 */
 80040ec:	f7ff fd74 	bl	8003bd8 <SPI_Timer_Status>
 80040f0:	1e03      	subs	r3, r0, #0
 80040f2:	d007      	beq.n	8004104 <USER_SPI_initialize+0x1c8>
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	0019      	movs	r1, r3
 80040fa:	2010      	movs	r0, #16
 80040fc:	f7ff fe8f 	bl	8003e1e <send_cmd>
 8004100:	1e03      	subs	r3, r0, #0
 8004102:	d003      	beq.n	800410c <USER_SPI_initialize+0x1d0>
				ty = 0;
 8004104:	230d      	movs	r3, #13
 8004106:	18fb      	adds	r3, r7, r3
 8004108:	2200      	movs	r2, #0
 800410a:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty; /* Card type */
 800410c:	4b16      	ldr	r3, [pc, #88]	; (8004168 <USER_SPI_initialize+0x22c>)
 800410e:	240d      	movs	r4, #13
 8004110:	193a      	adds	r2, r7, r4
 8004112:	7812      	ldrb	r2, [r2, #0]
 8004114:	701a      	strb	r2, [r3, #0]
	despiselect();
 8004116:	f7ff fded 	bl	8003cf4 <despiselect>

	if (ty) { /* OK */
 800411a:	193b      	adds	r3, r7, r4
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d013      	beq.n	800414a <USER_SPI_initialize+0x20e>
		FCLK_FAST(); /* Set fast clock */
 8004122:	4b10      	ldr	r3, [pc, #64]	; (8004164 <USER_SPI_initialize+0x228>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2238      	movs	r2, #56	; 0x38
 800412a:	4393      	bics	r3, r2
 800412c:	001a      	movs	r2, r3
 800412e:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <USER_SPI_initialize+0x228>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2118      	movs	r1, #24
 8004134:	430a      	orrs	r2, r1
 8004136:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT flag */
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <USER_SPI_initialize+0x224>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2201      	movs	r2, #1
 8004140:	4393      	bics	r3, r2
 8004142:	b2da      	uxtb	r2, r3
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <USER_SPI_initialize+0x224>)
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	e002      	b.n	8004150 <USER_SPI_initialize+0x214>
	} else { /* Failed */
		Stat = STA_NOINIT;
 800414a:	4b05      	ldr	r3, [pc, #20]	; (8004160 <USER_SPI_initialize+0x224>)
 800414c:	2201      	movs	r2, #1
 800414e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004150:	4b03      	ldr	r3, [pc, #12]	; (8004160 <USER_SPI_initialize+0x224>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	b2db      	uxtb	r3, r3
}
 8004156:	0018      	movs	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	b004      	add	sp, #16
 800415c:	bdb0      	pop	{r4, r5, r7, pc}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	20000060 	.word	0x20000060
 8004164:	200003dc 	.word	0x200003dc
 8004168:	20000558 	.word	0x20000558

0800416c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/
/* Get disk status                                                       */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status(BYTE drv /* Physical drive number (0) */
) {
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	0002      	movs	r2, r0
 8004174:	1dfb      	adds	r3, r7, #7
 8004176:	701a      	strb	r2, [r3, #0]
	if (drv)
 8004178:	1dfb      	adds	r3, r7, #7
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <USER_SPI_status+0x18>
		return STA_NOINIT; /* Supports only drive 0 */
 8004180:	2301      	movs	r3, #1
 8004182:	e002      	b.n	800418a <USER_SPI_status+0x1e>

	return Stat; /* Return disk status */
 8004184:	4b03      	ldr	r3, [pc, #12]	; (8004194 <USER_SPI_status+0x28>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	b2db      	uxtb	r3, r3
}
 800418a:	0018      	movs	r0, r3
 800418c:	46bd      	mov	sp, r7
 800418e:	b002      	add	sp, #8
 8004190:	bd80      	pop	{r7, pc}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	20000060 	.word	0x20000060

08004198 <USER_SPI_read>:

inline DRESULT USER_SPI_read(BYTE drv, /* Physical drive number (0) */
BYTE *buff, /* Pointer to the data buffer to store read data */
DWORD sector, /* Start sector number (LBA) */
UINT count /* Number of sectors to read (1..128) */
) {
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	210f      	movs	r1, #15
 80041a6:	187b      	adds	r3, r7, r1
 80041a8:	1c02      	adds	r2, r0, #0
 80041aa:	701a      	strb	r2, [r3, #0]
	if (drv || !count)
 80041ac:	187b      	adds	r3, r7, r1
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <USER_SPI_read+0x22>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <USER_SPI_read+0x26>
		return RES_PARERR; /* Check parameter */
 80041ba:	2304      	movs	r3, #4
 80041bc:	e04f      	b.n	800425e <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT)
 80041be:	4b2a      	ldr	r3, [pc, #168]	; (8004268 <USER_SPI_read+0xd0>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	001a      	movs	r2, r3
 80041c6:	2301      	movs	r3, #1
 80041c8:	4013      	ands	r3, r2
 80041ca:	d001      	beq.n	80041d0 <USER_SPI_read+0x38>
		return RES_NOTRDY; /* Check if drive is ready */
 80041cc:	2303      	movs	r3, #3
 80041ce:	e046      	b.n	800425e <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK))
 80041d0:	4b26      	ldr	r3, [pc, #152]	; (800426c <USER_SPI_read+0xd4>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	001a      	movs	r2, r3
 80041d6:	2308      	movs	r3, #8
 80041d8:	4013      	ands	r3, r2
 80041da:	d102      	bne.n	80041e2 <USER_SPI_read+0x4a>
		sector *= 512; /* LBA ot BA conversion (byte addressing cards) */
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	025b      	lsls	r3, r3, #9
 80041e0:	607b      	str	r3, [r7, #4]

	if (count == 1) { /* Single sector read */
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d112      	bne.n	800420e <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	0019      	movs	r1, r3
 80041ec:	2011      	movs	r0, #17
 80041ee:	f7ff fe16 	bl	8003e1e <send_cmd>
 80041f2:	1e03      	subs	r3, r0, #0
 80041f4:	d12d      	bne.n	8004252 <USER_SPI_read+0xba>
		&& rcvr_datablock(buff, 512)) {
 80041f6:	2380      	movs	r3, #128	; 0x80
 80041f8:	009a      	lsls	r2, r3, #2
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	0011      	movs	r1, r2
 80041fe:	0018      	movs	r0, r3
 8004200:	f7ff fda4 	bl	8003d4c <rcvr_datablock>
 8004204:	1e03      	subs	r3, r0, #0
 8004206:	d024      	beq.n	8004252 <USER_SPI_read+0xba>
			count = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	e021      	b.n	8004252 <USER_SPI_read+0xba>
		}
	} else { /* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	0019      	movs	r1, r3
 8004212:	2012      	movs	r0, #18
 8004214:	f7ff fe03 	bl	8003e1e <send_cmd>
 8004218:	1e03      	subs	r3, r0, #0
 800421a:	d11a      	bne.n	8004252 <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512))
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	009a      	lsls	r2, r3, #2
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	0011      	movs	r1, r2
 8004224:	0018      	movs	r0, r3
 8004226:	f7ff fd91 	bl	8003d4c <rcvr_datablock>
 800422a:	1e03      	subs	r3, r0, #0
 800422c:	d00c      	beq.n	8004248 <USER_SPI_read+0xb0>
					break;
				buff += 512;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2280      	movs	r2, #128	; 0x80
 8004232:	0092      	lsls	r2, r2, #2
 8004234:	4694      	mov	ip, r2
 8004236:	4463      	add	r3, ip
 8004238:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	3b01      	subs	r3, #1
 800423e:	603b      	str	r3, [r7, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1ea      	bne.n	800421c <USER_SPI_read+0x84>
 8004246:	e000      	b.n	800424a <USER_SPI_read+0xb2>
					break;
 8004248:	46c0      	nop			; (mov r8, r8)
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 800424a:	2100      	movs	r1, #0
 800424c:	200c      	movs	r0, #12
 800424e:	f7ff fde6 	bl	8003e1e <send_cmd>
		}
	}
	despiselect();
 8004252:	f7ff fd4f 	bl	8003cf4 <despiselect>

	return count ? RES_ERROR : RES_OK; /* Return result */
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	1e5a      	subs	r2, r3, #1
 800425a:	4193      	sbcs	r3, r2
 800425c:	b2db      	uxtb	r3, r3
}
 800425e:	0018      	movs	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	b004      	add	sp, #16
 8004264:	bd80      	pop	{r7, pc}
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	20000060 	.word	0x20000060
 800426c:	20000558 	.word	0x20000558

08004270 <USER_SPI_write>:
#if _USE_WRITE
inline DRESULT USER_SPI_write(BYTE drv, /* Physical drive number (0) */
const BYTE *buff, /* Ponter to the data to write */
DWORD sector, /* Start sector number (LBA) */
UINT count /* Number of sectors to write (1..128) */
) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	607a      	str	r2, [r7, #4]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	210f      	movs	r1, #15
 800427e:	187b      	adds	r3, r7, r1
 8004280:	1c02      	adds	r2, r0, #0
 8004282:	701a      	strb	r2, [r3, #0]
	if (drv || !count)
 8004284:	187b      	adds	r3, r7, r1
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d102      	bne.n	8004292 <USER_SPI_write+0x22>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <USER_SPI_write+0x26>
		return RES_PARERR; /* Check parameter */
 8004292:	2304      	movs	r3, #4
 8004294:	e063      	b.n	800435e <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT)
 8004296:	4b34      	ldr	r3, [pc, #208]	; (8004368 <USER_SPI_write+0xf8>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	001a      	movs	r2, r3
 800429e:	2301      	movs	r3, #1
 80042a0:	4013      	ands	r3, r2
 80042a2:	d001      	beq.n	80042a8 <USER_SPI_write+0x38>
		return RES_NOTRDY; /* Check drive status */
 80042a4:	2303      	movs	r3, #3
 80042a6:	e05a      	b.n	800435e <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT)
 80042a8:	4b2f      	ldr	r3, [pc, #188]	; (8004368 <USER_SPI_write+0xf8>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	001a      	movs	r2, r3
 80042b0:	2304      	movs	r3, #4
 80042b2:	4013      	ands	r3, r2
 80042b4:	d001      	beq.n	80042ba <USER_SPI_write+0x4a>
		return RES_WRPRT; /* Check write protect */
 80042b6:	2302      	movs	r3, #2
 80042b8:	e051      	b.n	800435e <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK))
 80042ba:	4b2c      	ldr	r3, [pc, #176]	; (800436c <USER_SPI_write+0xfc>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	001a      	movs	r2, r3
 80042c0:	2308      	movs	r3, #8
 80042c2:	4013      	ands	r3, r2
 80042c4:	d102      	bne.n	80042cc <USER_SPI_write+0x5c>
		sector *= 512; /* LBA ==> BA conversion (byte addressing cards) */
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	025b      	lsls	r3, r3, #9
 80042ca:	607b      	str	r3, [r7, #4]

	if (count == 1) { /* Single sector write */
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d110      	bne.n	80042f4 <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	0019      	movs	r1, r3
 80042d6:	2018      	movs	r0, #24
 80042d8:	f7ff fda1 	bl	8003e1e <send_cmd>
 80042dc:	1e03      	subs	r3, r0, #0
 80042de:	d138      	bne.n	8004352 <USER_SPI_write+0xe2>
		&& xmit_datablock(buff, 0xFE)) {
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	21fe      	movs	r1, #254	; 0xfe
 80042e4:	0018      	movs	r0, r3
 80042e6:	f7ff fd60 	bl	8003daa <xmit_datablock>
 80042ea:	1e03      	subs	r3, r0, #0
 80042ec:	d031      	beq.n	8004352 <USER_SPI_write+0xe2>
			count = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	603b      	str	r3, [r7, #0]
 80042f2:	e02e      	b.n	8004352 <USER_SPI_write+0xe2>
		}
	} else { /* Multiple sector write */
		if (CardType & CT_SDC)
 80042f4:	4b1d      	ldr	r3, [pc, #116]	; (800436c <USER_SPI_write+0xfc>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	001a      	movs	r2, r3
 80042fa:	2306      	movs	r3, #6
 80042fc:	4013      	ands	r3, r2
 80042fe:	d004      	beq.n	800430a <USER_SPI_write+0x9a>
			send_cmd(ACMD23, count); /* Predefine number of sectors */
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	0019      	movs	r1, r3
 8004304:	2097      	movs	r0, #151	; 0x97
 8004306:	f7ff fd8a 	bl	8003e1e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	0019      	movs	r1, r3
 800430e:	2019      	movs	r0, #25
 8004310:	f7ff fd85 	bl	8003e1e <send_cmd>
 8004314:	1e03      	subs	r3, r0, #0
 8004316:	d11c      	bne.n	8004352 <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	21fc      	movs	r1, #252	; 0xfc
 800431c:	0018      	movs	r0, r3
 800431e:	f7ff fd44 	bl	8003daa <xmit_datablock>
 8004322:	1e03      	subs	r3, r0, #0
 8004324:	d00c      	beq.n	8004340 <USER_SPI_write+0xd0>
					break;
				buff += 512;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2280      	movs	r2, #128	; 0x80
 800432a:	0092      	lsls	r2, r2, #2
 800432c:	4694      	mov	ip, r2
 800432e:	4463      	add	r3, ip
 8004330:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	3b01      	subs	r3, #1
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1ec      	bne.n	8004318 <USER_SPI_write+0xa8>
 800433e:	e000      	b.n	8004342 <USER_SPI_write+0xd2>
					break;
 8004340:	46c0      	nop			; (mov r8, r8)
			if (!xmit_datablock(0, 0xFD))
 8004342:	21fd      	movs	r1, #253	; 0xfd
 8004344:	2000      	movs	r0, #0
 8004346:	f7ff fd30 	bl	8003daa <xmit_datablock>
 800434a:	1e03      	subs	r3, r0, #0
 800434c:	d101      	bne.n	8004352 <USER_SPI_write+0xe2>
				count = 1; /* STOP_TRAN token */
 800434e:	2301      	movs	r3, #1
 8004350:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8004352:	f7ff fccf 	bl	8003cf4 <despiselect>

	return count ? RES_ERROR : RES_OK; /* Return result */
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	1e5a      	subs	r2, r3, #1
 800435a:	4193      	sbcs	r3, r2
 800435c:	b2db      	uxtb	r3, r3
}
 800435e:	0018      	movs	r0, r3
 8004360:	46bd      	mov	sp, r7
 8004362:	b004      	add	sp, #16
 8004364:	bd80      	pop	{r7, pc}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	20000060 	.word	0x20000060
 800436c:	20000558 	.word	0x20000558

08004370 <USER_SPI_ioctl>:

#if _USE_IOCTL
inline DRESULT USER_SPI_ioctl(BYTE drv, /* Physical drive number (0) */
BYTE cmd, /* Control command code */
void *buff /* Pointer to the conrtol data */
) {
 8004370:	b590      	push	{r4, r7, lr}
 8004372:	b08d      	sub	sp, #52	; 0x34
 8004374:	af00      	add	r7, sp, #0
 8004376:	603a      	str	r2, [r7, #0]
 8004378:	1dfb      	adds	r3, r7, #7
 800437a:	1c02      	adds	r2, r0, #0
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	1dbb      	adds	r3, r7, #6
 8004380:	1c0a      	adds	r2, r1, #0
 8004382:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;

	if (drv)
 8004384:	1dfb      	adds	r3, r7, #7
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <USER_SPI_ioctl+0x20>
		return RES_PARERR; /* Check parameter */
 800438c:	2304      	movs	r3, #4
 800438e:	e178      	b.n	8004682 <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT)
 8004390:	4bbe      	ldr	r3, [pc, #760]	; (800468c <USER_SPI_ioctl+0x31c>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	001a      	movs	r2, r3
 8004398:	2301      	movs	r3, #1
 800439a:	4013      	ands	r3, r2
 800439c:	d001      	beq.n	80043a2 <USER_SPI_ioctl+0x32>
		return RES_NOTRDY; /* Check if drive is ready */
 800439e:	2303      	movs	r3, #3
 80043a0:	e16f      	b.n	8004682 <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 80043a2:	232f      	movs	r3, #47	; 0x2f
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	2201      	movs	r2, #1
 80043a8:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 80043aa:	1dbb      	adds	r3, r7, #6
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d100      	bne.n	80043b4 <USER_SPI_ioctl+0x44>
 80043b2:	e100      	b.n	80045b6 <USER_SPI_ioctl+0x246>
 80043b4:	dd00      	ble.n	80043b8 <USER_SPI_ioctl+0x48>
 80043b6:	e14d      	b.n	8004654 <USER_SPI_ioctl+0x2e4>
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d100      	bne.n	80043be <USER_SPI_ioctl+0x4e>
 80043bc:	e074      	b.n	80044a8 <USER_SPI_ioctl+0x138>
 80043be:	dd00      	ble.n	80043c2 <USER_SPI_ioctl+0x52>
 80043c0:	e148      	b.n	8004654 <USER_SPI_ioctl+0x2e4>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <USER_SPI_ioctl+0x5c>
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d00a      	beq.n	80043e0 <USER_SPI_ioctl+0x70>
 80043ca:	e143      	b.n	8004654 <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC: /* Wait for end of internal write process of the drive */
		if (spiselect())
 80043cc:	f7ff fca2 	bl	8003d14 <spiselect>
 80043d0:	1e03      	subs	r3, r0, #0
 80043d2:	d100      	bne.n	80043d6 <USER_SPI_ioctl+0x66>
 80043d4:	e143      	b.n	800465e <USER_SPI_ioctl+0x2ee>
			res = RES_OK;
 80043d6:	232f      	movs	r3, #47	; 0x2f
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	2200      	movs	r2, #0
 80043dc:	701a      	strb	r2, [r3, #0]
		break;
 80043de:	e13e      	b.n	800465e <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT: /* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80043e0:	2100      	movs	r1, #0
 80043e2:	2009      	movs	r0, #9
 80043e4:	f7ff fd1b 	bl	8003e1e <send_cmd>
 80043e8:	1e03      	subs	r3, r0, #0
 80043ea:	d000      	beq.n	80043ee <USER_SPI_ioctl+0x7e>
 80043ec:	e139      	b.n	8004662 <USER_SPI_ioctl+0x2f2>
 80043ee:	240c      	movs	r4, #12
 80043f0:	193b      	adds	r3, r7, r4
 80043f2:	2110      	movs	r1, #16
 80043f4:	0018      	movs	r0, r3
 80043f6:	f7ff fca9 	bl	8003d4c <rcvr_datablock>
 80043fa:	1e03      	subs	r3, r0, #0
 80043fc:	d100      	bne.n	8004400 <USER_SPI_ioctl+0x90>
 80043fe:	e130      	b.n	8004662 <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8004400:	0020      	movs	r0, r4
 8004402:	183b      	adds	r3, r7, r0
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	099b      	lsrs	r3, r3, #6
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b01      	cmp	r3, #1
 800440c:	d115      	bne.n	800443a <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD) csd[8] << 8)
 800440e:	183b      	adds	r3, r7, r0
 8004410:	7a5b      	ldrb	r3, [r3, #9]
 8004412:	001a      	movs	r2, r3
 8004414:	183b      	adds	r3, r7, r0
 8004416:	7a1b      	ldrb	r3, [r3, #8]
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	18d3      	adds	r3, r2, r3
 800441c:	0019      	movs	r1, r3
						+ ((DWORD) (csd[7] & 63) << 16) + 1;
 800441e:	183b      	adds	r3, r7, r0
 8004420:	79db      	ldrb	r3, [r3, #7]
 8004422:	041a      	lsls	r2, r3, #16
 8004424:	23fc      	movs	r3, #252	; 0xfc
 8004426:	039b      	lsls	r3, r3, #14
 8004428:	4013      	ands	r3, r2
 800442a:	18cb      	adds	r3, r1, r3
				csize = csd[9] + ((WORD) csd[8] << 8)
 800442c:	3301      	adds	r3, #1
 800442e:	61fb      	str	r3, [r7, #28]
				*(DWORD*) buff = csize << 10;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	029a      	lsls	r2, r3, #10
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	e031      	b.n	800449e <USER_SPI_ioctl+0x12e>
			} else { /* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1)
 800443a:	200c      	movs	r0, #12
 800443c:	183b      	adds	r3, r7, r0
 800443e:	795b      	ldrb	r3, [r3, #5]
 8004440:	220f      	movs	r2, #15
 8004442:	4013      	ands	r3, r2
 8004444:	b2da      	uxtb	r2, r3
 8004446:	183b      	adds	r3, r7, r0
 8004448:	7a9b      	ldrb	r3, [r3, #10]
 800444a:	09db      	lsrs	r3, r3, #7
 800444c:	b2db      	uxtb	r3, r3
 800444e:	18d3      	adds	r3, r2, r3
 8004450:	b2da      	uxtb	r2, r3
 8004452:	183b      	adds	r3, r7, r0
 8004454:	7a5b      	ldrb	r3, [r3, #9]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2106      	movs	r1, #6
 800445c:	400b      	ands	r3, r1
 800445e:	b2db      	uxtb	r3, r3
 8004460:	18d3      	adds	r3, r2, r3
 8004462:	b2da      	uxtb	r2, r3
 8004464:	242e      	movs	r4, #46	; 0x2e
 8004466:	193b      	adds	r3, r7, r4
 8004468:	3202      	adds	r2, #2
 800446a:	701a      	strb	r2, [r3, #0]
						+ 2;
				csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 800446c:	183b      	adds	r3, r7, r0
 800446e:	7a1b      	ldrb	r3, [r3, #8]
 8004470:	099b      	lsrs	r3, r3, #6
 8004472:	b2db      	uxtb	r3, r3
 8004474:	001a      	movs	r2, r3
 8004476:	183b      	adds	r3, r7, r0
 8004478:	79db      	ldrb	r3, [r3, #7]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	18d2      	adds	r2, r2, r3
						+ ((WORD) (csd[6] & 3) << 10) + 1;
 800447e:	183b      	adds	r3, r7, r0
 8004480:	799b      	ldrb	r3, [r3, #6]
 8004482:	0299      	lsls	r1, r3, #10
 8004484:	23c0      	movs	r3, #192	; 0xc0
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	400b      	ands	r3, r1
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	3301      	adds	r3, #1
				csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 800448e:	61fb      	str	r3, [r7, #28]
				*(DWORD*) buff = csize << (n - 9);
 8004490:	193b      	adds	r3, r7, r4
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	3b09      	subs	r3, #9
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	409a      	lsls	r2, r3
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800449e:	232f      	movs	r3, #47	; 0x2f
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80044a6:	e0dc      	b.n	8004662 <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE: /* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) { /* SDC ver 2.00 */
 80044a8:	4b79      	ldr	r3, [pc, #484]	; (8004690 <USER_SPI_ioctl+0x320>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	001a      	movs	r2, r3
 80044ae:	2304      	movs	r3, #4
 80044b0:	4013      	ands	r3, r2
 80044b2:	d035      	beq.n	8004520 <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 80044b4:	2100      	movs	r1, #0
 80044b6:	208d      	movs	r0, #141	; 0x8d
 80044b8:	f7ff fcb1 	bl	8003e1e <send_cmd>
 80044bc:	1e03      	subs	r3, r0, #0
 80044be:	d000      	beq.n	80044c2 <USER_SPI_ioctl+0x152>
 80044c0:	e0d1      	b.n	8004666 <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 80044c2:	20ff      	movs	r0, #255	; 0xff
 80044c4:	f7ff fb9e 	bl	8003c04 <xchg_spi>
				if (rcvr_datablock(csd, 16)) { /* Read partial block */
 80044c8:	230c      	movs	r3, #12
 80044ca:	18fb      	adds	r3, r7, r3
 80044cc:	2110      	movs	r1, #16
 80044ce:	0018      	movs	r0, r3
 80044d0:	f7ff fc3c 	bl	8003d4c <rcvr_datablock>
 80044d4:	1e03      	subs	r3, r0, #0
 80044d6:	d100      	bne.n	80044da <USER_SPI_ioctl+0x16a>
 80044d8:	e0c5      	b.n	8004666 <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--)
 80044da:	232e      	movs	r3, #46	; 0x2e
 80044dc:	18fb      	adds	r3, r7, r3
 80044de:	2230      	movs	r2, #48	; 0x30
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	e008      	b.n	80044f6 <USER_SPI_ioctl+0x186>
						xchg_spi(0xFF); /* Purge trailing data */
 80044e4:	20ff      	movs	r0, #255	; 0xff
 80044e6:	f7ff fb8d 	bl	8003c04 <xchg_spi>
					for (n = 64 - 16; n; n--)
 80044ea:	212e      	movs	r1, #46	; 0x2e
 80044ec:	187b      	adds	r3, r7, r1
 80044ee:	781a      	ldrb	r2, [r3, #0]
 80044f0:	187b      	adds	r3, r7, r1
 80044f2:	3a01      	subs	r2, #1
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	232e      	movs	r3, #46	; 0x2e
 80044f8:	18fb      	adds	r3, r7, r3
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f1      	bne.n	80044e4 <USER_SPI_ioctl+0x174>
					*(DWORD*) buff = 16UL << (csd[10] >> 4);
 8004500:	230c      	movs	r3, #12
 8004502:	18fb      	adds	r3, r7, r3
 8004504:	7a9b      	ldrb	r3, [r3, #10]
 8004506:	091b      	lsrs	r3, r3, #4
 8004508:	b2db      	uxtb	r3, r3
 800450a:	001a      	movs	r2, r3
 800450c:	2310      	movs	r3, #16
 800450e:	4093      	lsls	r3, r2
 8004510:	001a      	movs	r2, r3
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004516:	232f      	movs	r3, #47	; 0x2f
 8004518:	18fb      	adds	r3, r7, r3
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
											+ ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800451e:	e0a2      	b.n	8004666 <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) { /* Read CSD */
 8004520:	2100      	movs	r1, #0
 8004522:	2009      	movs	r0, #9
 8004524:	f7ff fc7b 	bl	8003e1e <send_cmd>
 8004528:	1e03      	subs	r3, r0, #0
 800452a:	d000      	beq.n	800452e <USER_SPI_ioctl+0x1be>
 800452c:	e09b      	b.n	8004666 <USER_SPI_ioctl+0x2f6>
 800452e:	240c      	movs	r4, #12
 8004530:	193b      	adds	r3, r7, r4
 8004532:	2110      	movs	r1, #16
 8004534:	0018      	movs	r0, r3
 8004536:	f7ff fc09 	bl	8003d4c <rcvr_datablock>
 800453a:	1e03      	subs	r3, r0, #0
 800453c:	d100      	bne.n	8004540 <USER_SPI_ioctl+0x1d0>
 800453e:	e092      	b.n	8004666 <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) { /* SDC ver 1.XX */
 8004540:	4b53      	ldr	r3, [pc, #332]	; (8004690 <USER_SPI_ioctl+0x320>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	001a      	movs	r2, r3
 8004546:	2302      	movs	r3, #2
 8004548:	4013      	ands	r3, r2
 800454a:	d016      	beq.n	800457a <USER_SPI_ioctl+0x20a>
					*(DWORD*) buff = (((csd[10] & 63) << 1)
 800454c:	0021      	movs	r1, r4
 800454e:	187b      	adds	r3, r7, r1
 8004550:	7a9b      	ldrb	r3, [r3, #10]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	227e      	movs	r2, #126	; 0x7e
 8004556:	4013      	ands	r3, r2
							+ ((WORD) (csd[11] & 128) >> 7) + 1)
 8004558:	187a      	adds	r2, r7, r1
 800455a:	7ad2      	ldrb	r2, [r2, #11]
 800455c:	09d2      	lsrs	r2, r2, #7
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	189b      	adds	r3, r3, r2
 8004562:	1c5a      	adds	r2, r3, #1
							<< ((csd[13] >> 6) - 1);
 8004564:	187b      	adds	r3, r7, r1
 8004566:	7b5b      	ldrb	r3, [r3, #13]
 8004568:	099b      	lsrs	r3, r3, #6
 800456a:	b2db      	uxtb	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	409a      	lsls	r2, r3
 8004570:	0013      	movs	r3, r2
 8004572:	001a      	movs	r2, r3
					*(DWORD*) buff = (((csd[10] & 63) << 1)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	e018      	b.n	80045ac <USER_SPI_ioctl+0x23c>
							((WORD) ((csd[10] & 124) >> 2) + 1)
 800457a:	210c      	movs	r1, #12
 800457c:	187b      	adds	r3, r7, r1
 800457e:	7a9b      	ldrb	r3, [r3, #10]
 8004580:	109b      	asrs	r3, r3, #2
 8004582:	b29b      	uxth	r3, r3
 8004584:	001a      	movs	r2, r3
 8004586:	231f      	movs	r3, #31
 8004588:	4013      	ands	r3, r2
 800458a:	3301      	adds	r3, #1
									* (((csd[11] & 3) << 3)
 800458c:	0008      	movs	r0, r1
 800458e:	187a      	adds	r2, r7, r1
 8004590:	7ad2      	ldrb	r2, [r2, #11]
 8004592:	00d2      	lsls	r2, r2, #3
 8004594:	2118      	movs	r1, #24
 8004596:	400a      	ands	r2, r1
											+ ((csd[11] & 224) >> 5) + 1);
 8004598:	1839      	adds	r1, r7, r0
 800459a:	7ac9      	ldrb	r1, [r1, #11]
 800459c:	0949      	lsrs	r1, r1, #5
 800459e:	b2c9      	uxtb	r1, r1
 80045a0:	1852      	adds	r2, r2, r1
 80045a2:	3201      	adds	r2, #1
									* (((csd[11] & 3) << 3)
 80045a4:	4353      	muls	r3, r2
 80045a6:	001a      	movs	r2, r3
					*(DWORD*) buff =
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80045ac:	232f      	movs	r3, #47	; 0x2f
 80045ae:	18fb      	adds	r3, r7, r3
 80045b0:	2200      	movs	r2, #0
 80045b2:	701a      	strb	r2, [r3, #0]
		break;
 80045b4:	e057      	b.n	8004666 <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM: /* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC))
 80045b6:	4b36      	ldr	r3, [pc, #216]	; (8004690 <USER_SPI_ioctl+0x320>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	001a      	movs	r2, r3
 80045bc:	2306      	movs	r3, #6
 80045be:	4013      	ands	r3, r2
 80045c0:	d053      	beq.n	800466a <USER_SPI_ioctl+0x2fa>
			break; /* Check if the card is SDC */
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd))
 80045c2:	240c      	movs	r4, #12
 80045c4:	193a      	adds	r2, r7, r4
 80045c6:	1dfb      	adds	r3, r7, #7
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	210b      	movs	r1, #11
 80045cc:	0018      	movs	r0, r3
 80045ce:	f7ff fecf 	bl	8004370 <USER_SPI_ioctl>
 80045d2:	1e03      	subs	r3, r0, #0
 80045d4:	d14b      	bne.n	800466e <USER_SPI_ioctl+0x2fe>
			break; /* Get CSD */
		if (!(csd[0] >> 6) && !(csd[10] & 0x40))
 80045d6:	193b      	adds	r3, r7, r4
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	099b      	lsrs	r3, r3, #6
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d105      	bne.n	80045ee <USER_SPI_ioctl+0x27e>
 80045e2:	193b      	adds	r3, r7, r4
 80045e4:	7a9b      	ldrb	r3, [r3, #10]
 80045e6:	001a      	movs	r2, r3
 80045e8:	2340      	movs	r3, #64	; 0x40
 80045ea:	4013      	ands	r3, r2
 80045ec:	d041      	beq.n	8004672 <USER_SPI_ioctl+0x302>
			break; /* Check if sector erase can be applied to the card */
		dp = buff;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	623b      	str	r3, [r7, #32]
		st = dp[0];
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
		ed = dp[1]; /* Load sector block */
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80045fe:	4b24      	ldr	r3, [pc, #144]	; (8004690 <USER_SPI_ioctl+0x320>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	001a      	movs	r2, r3
 8004604:	2308      	movs	r3, #8
 8004606:	4013      	ands	r3, r2
 8004608:	d105      	bne.n	8004616 <USER_SPI_ioctl+0x2a6>
			st *= 512;
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	025b      	lsls	r3, r3, #9
 800460e:	62bb      	str	r3, [r7, #40]	; 0x28
			ed *= 512;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	025b      	lsls	r3, r3, #9
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	0019      	movs	r1, r3
 800461a:	2020      	movs	r0, #32
 800461c:	f7ff fbff 	bl	8003e1e <send_cmd>
 8004620:	1e03      	subs	r3, r0, #0
 8004622:	d128      	bne.n	8004676 <USER_SPI_ioctl+0x306>
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	0019      	movs	r1, r3
 8004628:	2021      	movs	r0, #33	; 0x21
 800462a:	f7ff fbf8 	bl	8003e1e <send_cmd>
 800462e:	1e03      	subs	r3, r0, #0
 8004630:	d121      	bne.n	8004676 <USER_SPI_ioctl+0x306>
				&& send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 8004632:	2100      	movs	r1, #0
 8004634:	2026      	movs	r0, #38	; 0x26
 8004636:	f7ff fbf2 	bl	8003e1e <send_cmd>
 800463a:	1e03      	subs	r3, r0, #0
 800463c:	d11b      	bne.n	8004676 <USER_SPI_ioctl+0x306>
 800463e:	4b15      	ldr	r3, [pc, #84]	; (8004694 <USER_SPI_ioctl+0x324>)
 8004640:	0018      	movs	r0, r3
 8004642:	f7ff fb2e 	bl	8003ca2 <wait_ready>
 8004646:	1e03      	subs	r3, r0, #0
 8004648:	d015      	beq.n	8004676 <USER_SPI_ioctl+0x306>
			res = RES_OK; /* FatFs does not check result of this command */
 800464a:	232f      	movs	r3, #47	; 0x2f
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004652:	e010      	b.n	8004676 <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 8004654:	232f      	movs	r3, #47	; 0x2f
 8004656:	18fb      	adds	r3, r7, r3
 8004658:	2204      	movs	r2, #4
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	e00c      	b.n	8004678 <USER_SPI_ioctl+0x308>
		break;
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	e00a      	b.n	8004678 <USER_SPI_ioctl+0x308>
		break;
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	e008      	b.n	8004678 <USER_SPI_ioctl+0x308>
		break;
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	e006      	b.n	8004678 <USER_SPI_ioctl+0x308>
			break; /* Check if the card is SDC */
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	e004      	b.n	8004678 <USER_SPI_ioctl+0x308>
			break; /* Get CSD */
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	e002      	b.n	8004678 <USER_SPI_ioctl+0x308>
			break; /* Check if sector erase can be applied to the card */
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	e000      	b.n	8004678 <USER_SPI_ioctl+0x308>
		break;
 8004676:	46c0      	nop			; (mov r8, r8)
	}

	despiselect();
 8004678:	f7ff fb3c 	bl	8003cf4 <despiselect>

	return res;
 800467c:	232f      	movs	r3, #47	; 0x2f
 800467e:	18fb      	adds	r3, r7, r3
 8004680:	781b      	ldrb	r3, [r3, #0]
}
 8004682:	0018      	movs	r0, r3
 8004684:	46bd      	mov	sp, r7
 8004686:	b00d      	add	sp, #52	; 0x34
 8004688:	bd90      	pop	{r4, r7, pc}
 800468a:	46c0      	nop			; (mov r8, r8)
 800468c:	20000060 	.word	0x20000060
 8004690:	20000558 	.word	0x20000558
 8004694:	00007530 	.word	0x00007530

08004698 <__NVIC_EnableIRQ>:
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	0002      	movs	r2, r0
 80046a0:	1dfb      	adds	r3, r7, #7
 80046a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80046a4:	1dfb      	adds	r3, r7, #7
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b7f      	cmp	r3, #127	; 0x7f
 80046aa:	d809      	bhi.n	80046c0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ac:	1dfb      	adds	r3, r7, #7
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	001a      	movs	r2, r3
 80046b2:	231f      	movs	r3, #31
 80046b4:	401a      	ands	r2, r3
 80046b6:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <__NVIC_EnableIRQ+0x30>)
 80046b8:	2101      	movs	r1, #1
 80046ba:	4091      	lsls	r1, r2
 80046bc:	000a      	movs	r2, r1
 80046be:	601a      	str	r2, [r3, #0]
}
 80046c0:	46c0      	nop			; (mov r8, r8)
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b002      	add	sp, #8
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	e000e100 	.word	0xe000e100

080046cc <map>:
		(0x07) };

uint16_t ticks = 0;

uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min,
		uint16_t out_max) {
 80046cc:	b5b0      	push	{r4, r5, r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	0005      	movs	r5, r0
 80046d4:	000c      	movs	r4, r1
 80046d6:	0010      	movs	r0, r2
 80046d8:	0019      	movs	r1, r3
 80046da:	1dbb      	adds	r3, r7, #6
 80046dc:	1c2a      	adds	r2, r5, #0
 80046de:	801a      	strh	r2, [r3, #0]
 80046e0:	1d3b      	adds	r3, r7, #4
 80046e2:	1c22      	adds	r2, r4, #0
 80046e4:	801a      	strh	r2, [r3, #0]
 80046e6:	1cbb      	adds	r3, r7, #2
 80046e8:	1c02      	adds	r2, r0, #0
 80046ea:	801a      	strh	r2, [r3, #0]
 80046ec:	003b      	movs	r3, r7
 80046ee:	1c0a      	adds	r2, r1, #0
 80046f0:	801a      	strh	r2, [r3, #0]
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
 80046f2:	1dbb      	adds	r3, r7, #6
 80046f4:	881a      	ldrh	r2, [r3, #0]
 80046f6:	1d3b      	adds	r3, r7, #4
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	1ad2      	subs	r2, r2, r3
 80046fc:	2318      	movs	r3, #24
 80046fe:	18fb      	adds	r3, r7, r3
 8004700:	8819      	ldrh	r1, [r3, #0]
 8004702:	003b      	movs	r3, r7
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	1acb      	subs	r3, r1, r3
 8004708:	4353      	muls	r3, r2
 800470a:	0018      	movs	r0, r3
 800470c:	1cbb      	adds	r3, r7, #2
 800470e:	881a      	ldrh	r2, [r3, #0]
 8004710:	1d3b      	adds	r3, r7, #4
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	1ad2      	subs	r2, r2, r3
 8004716:	003b      	movs	r3, r7
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	18d3      	adds	r3, r2, r3
 800471c:	0019      	movs	r1, r3
 800471e:	f7fb fd8f 	bl	8000240 <__divsi3>
 8004722:	0003      	movs	r3, r0
 8004724:	b29b      	uxth	r3, r3
}
 8004726:	0018      	movs	r0, r3
 8004728:	46bd      	mov	sp, r7
 800472a:	b002      	add	sp, #8
 800472c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004730 <gpio_clk_en>:

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	2390      	movs	r3, #144	; 0x90
 800473c:	05db      	lsls	r3, r3, #23
 800473e:	429a      	cmp	r2, r3
 8004740:	d107      	bne.n	8004752 <gpio_clk_en+0x22>
		GPIOA_CLK_EN;
 8004742:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <gpio_clk_en+0x80>)
 8004744:	695a      	ldr	r2, [r3, #20]
 8004746:	4b1a      	ldr	r3, [pc, #104]	; (80047b0 <gpio_clk_en+0x80>)
 8004748:	2180      	movs	r1, #128	; 0x80
 800474a:	0289      	lsls	r1, r1, #10
 800474c:	430a      	orrs	r2, r1
 800474e:	615a      	str	r2, [r3, #20]
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOF_CLK_EN;
	}
}
 8004750:	e02a      	b.n	80047a8 <gpio_clk_en+0x78>
	} else if (port == GPIOB) {
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <gpio_clk_en+0x84>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d107      	bne.n	800476a <gpio_clk_en+0x3a>
		GPIOB_CLK_EN;
 800475a:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <gpio_clk_en+0x80>)
 800475c:	695a      	ldr	r2, [r3, #20]
 800475e:	4b14      	ldr	r3, [pc, #80]	; (80047b0 <gpio_clk_en+0x80>)
 8004760:	2180      	movs	r1, #128	; 0x80
 8004762:	02c9      	lsls	r1, r1, #11
 8004764:	430a      	orrs	r2, r1
 8004766:	615a      	str	r2, [r3, #20]
}
 8004768:	e01e      	b.n	80047a8 <gpio_clk_en+0x78>
	} else if (port == GPIOC) {
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a12      	ldr	r2, [pc, #72]	; (80047b8 <gpio_clk_en+0x88>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d107      	bne.n	8004782 <gpio_clk_en+0x52>
		GPIOC_CLK_EN;
 8004772:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <gpio_clk_en+0x80>)
 8004774:	695a      	ldr	r2, [r3, #20]
 8004776:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <gpio_clk_en+0x80>)
 8004778:	2180      	movs	r1, #128	; 0x80
 800477a:	0309      	lsls	r1, r1, #12
 800477c:	430a      	orrs	r2, r1
 800477e:	615a      	str	r2, [r3, #20]
}
 8004780:	e012      	b.n	80047a8 <gpio_clk_en+0x78>
	} else if (port == GPIOD) {
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a0d      	ldr	r2, [pc, #52]	; (80047bc <gpio_clk_en+0x8c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d107      	bne.n	800479a <gpio_clk_en+0x6a>
		GPIOD_CLK_EN;
 800478a:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <gpio_clk_en+0x80>)
 800478c:	695a      	ldr	r2, [r3, #20]
 800478e:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <gpio_clk_en+0x80>)
 8004790:	2180      	movs	r1, #128	; 0x80
 8004792:	0349      	lsls	r1, r1, #13
 8004794:	430a      	orrs	r2, r1
 8004796:	615a      	str	r2, [r3, #20]
}
 8004798:	e006      	b.n	80047a8 <gpio_clk_en+0x78>
		GPIOF_CLK_EN;
 800479a:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <gpio_clk_en+0x80>)
 800479c:	695a      	ldr	r2, [r3, #20]
 800479e:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <gpio_clk_en+0x80>)
 80047a0:	2180      	movs	r1, #128	; 0x80
 80047a2:	03c9      	lsls	r1, r1, #15
 80047a4:	430a      	orrs	r2, r1
 80047a6:	615a      	str	r2, [r3, #20]
}
 80047a8:	46c0      	nop			; (mov r8, r8)
 80047aa:	46bd      	mov	sp, r7
 80047ac:	b002      	add	sp, #8
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40021000 	.word	0x40021000
 80047b4:	48000400 	.word	0x48000400
 80047b8:	48000800 	.word	0x48000800
 80047bc:	48000c00 	.word	0x48000c00

080047c0 <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d11c      	bne.n	800480e <gpio_config+0x4e>
		gpio_clk_en(port);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	0018      	movs	r0, r3
 80047d8:	f7ff ffaa 	bl	8004730 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	68b9      	ldr	r1, [r7, #8]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	0018      	movs	r0, r3
 80047e4:	f000 f85a 	bl	800489c <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	68b9      	ldr	r1, [r7, #8]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	0018      	movs	r0, r3
 80047f0:	f000 f86c 	bl	80048cc <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	0018      	movs	r0, r3
 80047fc:	f000 f87e 	bl	80048fc <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	68b9      	ldr	r1, [r7, #8]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	0018      	movs	r0, r3
 8004808:	f000 f890 	bl	800492c <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
		adc_chsel(port, pinNumber);
	}
}
 800480c:	e041      	b.n	8004892 <gpio_config+0xd2>
	} else if (pinMode == INPUT_MODE) {
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d110      	bne.n	8004836 <gpio_config+0x76>
		gpio_clk_en(port);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	0018      	movs	r0, r3
 8004818:	f7ff ff8a 	bl	8004730 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	68b9      	ldr	r1, [r7, #8]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	0018      	movs	r0, r3
 8004824:	f000 f83a 	bl	800489c <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	68b9      	ldr	r1, [r7, #8]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	0018      	movs	r0, r3
 8004830:	f000 f864 	bl	80048fc <gpio_PUPD>
}
 8004834:	e02d      	b.n	8004892 <gpio_config+0xd2>
	} else if (pinMode == ALT_MODE) {
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d116      	bne.n	800486a <gpio_config+0xaa>
		gpio_clk_en(port);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	0018      	movs	r0, r3
 8004840:	f7ff ff76 	bl	8004730 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	0018      	movs	r0, r3
 800484c:	f000 f826 	bl	800489c <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	0018      	movs	r0, r3
 8004858:	f000 f850 	bl	80048fc <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	0018      	movs	r0, r3
 8004864:	f000 f862 	bl	800492c <gpio_PHPL_OD>
}
 8004868:	e013      	b.n	8004892 <gpio_config+0xd2>
	} else if (pinMode == ANALOG_MODE) {
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b03      	cmp	r3, #3
 800486e:	d110      	bne.n	8004892 <gpio_config+0xd2>
		gpio_clk_en(port);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	0018      	movs	r0, r3
 8004874:	f7ff ff5c 	bl	8004730 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	0018      	movs	r0, r3
 8004880:	f000 f80c 	bl	800489c <gpio_moder>
		adc_chsel(port, pinNumber);
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	0011      	movs	r1, r2
 800488c:	0018      	movs	r0, r3
 800488e:	f000 fb7b 	bl	8004f88 <adc_chsel>
}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	46bd      	mov	sp, r7
 8004896:	b004      	add	sp, #16
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <gpio_moder+0x2c>)
 80048ae:	68b9      	ldr	r1, [r7, #8]
 80048b0:	0089      	lsls	r1, r1, #2
 80048b2:	58cb      	ldr	r3, [r1, r3]
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	4099      	lsls	r1, r3
 80048b8:	000b      	movs	r3, r1
 80048ba:	431a      	orrs	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]
}
 80048c0:	46c0      	nop			; (mov r8, r8)
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b004      	add	sp, #16
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20000064 	.word	0x20000064

080048cc <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <gpio_speed+0x2c>)
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	0089      	lsls	r1, r1, #2
 80048e2:	58cb      	ldr	r3, [r1, r3]
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	4099      	lsls	r1, r3
 80048e8:	000b      	movs	r3, r1
 80048ea:	431a      	orrs	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	609a      	str	r2, [r3, #8]
}
 80048f0:	46c0      	nop			; (mov r8, r8)
 80048f2:	46bd      	mov	sp, r7
 80048f4:	b004      	add	sp, #16
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	20000064 	.word	0x20000064

080048fc <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	4b06      	ldr	r3, [pc, #24]	; (8004928 <gpio_PUPD+0x2c>)
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	0089      	lsls	r1, r1, #2
 8004912:	58cb      	ldr	r3, [r1, r3]
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	4099      	lsls	r1, r3
 8004918:	000b      	movs	r3, r1
 800491a:	431a      	orrs	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	60da      	str	r2, [r3, #12]
}
 8004920:	46c0      	nop			; (mov r8, r8)
 8004922:	46bd      	mov	sp, r7
 8004924:	b004      	add	sp, #16
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20000064 	.word	0x20000064

0800492c <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	4099      	lsls	r1, r3
 8004942:	000b      	movs	r3, r1
 8004944:	431a      	orrs	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	605a      	str	r2, [r3, #4]
}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	46bd      	mov	sp, r7
 800494e:	b004      	add	sp, #16
 8004950:	bd80      	pop	{r7, pc}

08004952 <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b07      	cmp	r3, #7
 8004962:	d80a      	bhi.n	800497a <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a1a      	ldr	r2, [r3, #32]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	4099      	lsls	r1, r3
 8004970:	000b      	movs	r3, r1
 8004972:	431a      	orrs	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 8004978:	e00a      	b.n	8004990 <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	3b08      	subs	r3, #8
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4099      	lsls	r1, r3
 8004988:	000b      	movs	r3, r1
 800498a:	431a      	orrs	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004990:	46c0      	nop			; (mov r8, r8)
 8004992:	46bd      	mov	sp, r7
 8004994:	b004      	add	sp, #16
 8004996:	bd80      	pop	{r7, pc}

08004998 <gpio_write>:

/************************************************************************************/

/************************GPIO OPERATION FUNCTION*************************************/
void gpio_write(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t state) {
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	1dfb      	adds	r3, r7, #7
 80049a4:	701a      	strb	r2, [r3, #0]
	if (state) {
 80049a6:	1dfb      	adds	r3, r7, #7
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d007      	beq.n	80049be <gpio_write+0x26>
		port->BSRR = (1 << pinNumber);
 80049ae:	2201      	movs	r2, #1
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	409a      	lsls	r2, r3
 80049b4:	0013      	movs	r3, r2
 80049b6:	001a      	movs	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	619a      	str	r2, [r3, #24]
	} else {
		port->BSRR = (1 << (pinNumber + 16));
	}
}
 80049bc:	e007      	b.n	80049ce <gpio_write+0x36>
		port->BSRR = (1 << (pinNumber + 16));
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	3310      	adds	r3, #16
 80049c2:	2201      	movs	r2, #1
 80049c4:	409a      	lsls	r2, r3
 80049c6:	0013      	movs	r3, r2
 80049c8:	001a      	movs	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	619a      	str	r2, [r3, #24]
}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b004      	add	sp, #16
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <gpio_IT_config>:
	return flag;
}
/**************************************************************************************/

/*******************************INTERRUPT CONFIGURATION*********************************/
void gpio_IT_config(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t edge) {
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	1dfb      	adds	r3, r7, #7
 80049e4:	701a      	strb	r2, [r3, #0]
	SYSCFG_CLK_EN;
 80049e6:	4bc8      	ldr	r3, [pc, #800]	; (8004d08 <gpio_IT_config+0x330>)
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	4bc7      	ldr	r3, [pc, #796]	; (8004d08 <gpio_IT_config+0x330>)
 80049ec:	2101      	movs	r1, #1
 80049ee:	430a      	orrs	r2, r1
 80049f0:	619a      	str	r2, [r3, #24]
	if (port == GPIOA) {
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	2390      	movs	r3, #144	; 0x90
 80049f6:	05db      	lsls	r3, r3, #23
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d149      	bne.n	8004a90 <gpio_IT_config+0xb8>
		switch (pinNumber) {
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2b0f      	cmp	r3, #15
 8004a00:	d900      	bls.n	8004a04 <gpio_IT_config+0x2c>
 8004a02:	e147      	b.n	8004c94 <gpio_IT_config+0x2bc>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	009a      	lsls	r2, r3, #2
 8004a08:	4bc0      	ldr	r3, [pc, #768]	; (8004d0c <gpio_IT_config+0x334>)
 8004a0a:	18d3      	adds	r3, r2, r3
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	469f      	mov	pc, r3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8004a10:	4bbf      	ldr	r3, [pc, #764]	; (8004d10 <gpio_IT_config+0x338>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	609a      	str	r2, [r3, #8]
			break;
 8004a16:	e13d      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PA;
 8004a18:	4bbd      	ldr	r3, [pc, #756]	; (8004d10 <gpio_IT_config+0x338>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	609a      	str	r2, [r3, #8]
			break;
 8004a1e:	e139      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PA;
 8004a20:	4bbb      	ldr	r3, [pc, #748]	; (8004d10 <gpio_IT_config+0x338>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	609a      	str	r2, [r3, #8]
			break;
 8004a26:	e135      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PA;
 8004a28:	4bb9      	ldr	r3, [pc, #740]	; (8004d10 <gpio_IT_config+0x338>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	609a      	str	r2, [r3, #8]
			break;
 8004a2e:	e131      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PA;
 8004a30:	4bb7      	ldr	r3, [pc, #732]	; (8004d10 <gpio_IT_config+0x338>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	60da      	str	r2, [r3, #12]
			break;
 8004a36:	e12d      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PA;
 8004a38:	4bb5      	ldr	r3, [pc, #724]	; (8004d10 <gpio_IT_config+0x338>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	60da      	str	r2, [r3, #12]
			break;
 8004a3e:	e129      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PA;
 8004a40:	4bb3      	ldr	r3, [pc, #716]	; (8004d10 <gpio_IT_config+0x338>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	60da      	str	r2, [r3, #12]
			break;
 8004a46:	e125      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PA;
 8004a48:	4bb1      	ldr	r3, [pc, #708]	; (8004d10 <gpio_IT_config+0x338>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	60da      	str	r2, [r3, #12]
			break;
 8004a4e:	e121      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PA;
 8004a50:	4baf      	ldr	r3, [pc, #700]	; (8004d10 <gpio_IT_config+0x338>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	611a      	str	r2, [r3, #16]
			break;
 8004a56:	e11d      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PA;
 8004a58:	4bad      	ldr	r3, [pc, #692]	; (8004d10 <gpio_IT_config+0x338>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	611a      	str	r2, [r3, #16]
			break;
 8004a5e:	e119      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PA;
 8004a60:	4bab      	ldr	r3, [pc, #684]	; (8004d10 <gpio_IT_config+0x338>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	611a      	str	r2, [r3, #16]
			break;
 8004a66:	e115      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PA;
 8004a68:	4ba9      	ldr	r3, [pc, #676]	; (8004d10 <gpio_IT_config+0x338>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	611a      	str	r2, [r3, #16]
			break;
 8004a6e:	e111      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PA;
 8004a70:	4ba7      	ldr	r3, [pc, #668]	; (8004d10 <gpio_IT_config+0x338>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	615a      	str	r2, [r3, #20]
			break;
 8004a76:	e10d      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PA;
 8004a78:	4ba5      	ldr	r3, [pc, #660]	; (8004d10 <gpio_IT_config+0x338>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	615a      	str	r2, [r3, #20]
			break;
 8004a7e:	e109      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PA;
 8004a80:	4ba3      	ldr	r3, [pc, #652]	; (8004d10 <gpio_IT_config+0x338>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	615a      	str	r2, [r3, #20]
			break;
 8004a86:	e105      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PA;
 8004a88:	4ba1      	ldr	r3, [pc, #644]	; (8004d10 <gpio_IT_config+0x338>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	615a      	str	r2, [r3, #20]
			break;
 8004a8e:	e101      	b.n	8004c94 <gpio_IT_config+0x2bc>
		}	// end of Port A
	} else if (port == GPIOB) {
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4aa0      	ldr	r2, [pc, #640]	; (8004d14 <gpio_IT_config+0x33c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d151      	bne.n	8004b3c <gpio_IT_config+0x164>
		switch (pinNumber) {
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b0f      	cmp	r3, #15
 8004a9c:	d900      	bls.n	8004aa0 <gpio_IT_config+0xc8>
 8004a9e:	e0f9      	b.n	8004c94 <gpio_IT_config+0x2bc>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	009a      	lsls	r2, r3, #2
 8004aa4:	4b9c      	ldr	r3, [pc, #624]	; (8004d18 <gpio_IT_config+0x340>)
 8004aa6:	18d3      	adds	r3, r2, r3
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	469f      	mov	pc, r3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PB;
 8004aac:	4b98      	ldr	r3, [pc, #608]	; (8004d10 <gpio_IT_config+0x338>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	609a      	str	r2, [r3, #8]
			break;
 8004ab2:	e0ef      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PB;
 8004ab4:	4b96      	ldr	r3, [pc, #600]	; (8004d10 <gpio_IT_config+0x338>)
 8004ab6:	2210      	movs	r2, #16
 8004ab8:	609a      	str	r2, [r3, #8]
			break;
 8004aba:	e0eb      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PB;
 8004abc:	4b94      	ldr	r3, [pc, #592]	; (8004d10 <gpio_IT_config+0x338>)
 8004abe:	2280      	movs	r2, #128	; 0x80
 8004ac0:	0052      	lsls	r2, r2, #1
 8004ac2:	609a      	str	r2, [r3, #8]
			break;
 8004ac4:	e0e6      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PB;
 8004ac6:	4b92      	ldr	r3, [pc, #584]	; (8004d10 <gpio_IT_config+0x338>)
 8004ac8:	2280      	movs	r2, #128	; 0x80
 8004aca:	0152      	lsls	r2, r2, #5
 8004acc:	609a      	str	r2, [r3, #8]
			break;
 8004ace:	e0e1      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PB;
 8004ad0:	4b8f      	ldr	r3, [pc, #572]	; (8004d10 <gpio_IT_config+0x338>)
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	60da      	str	r2, [r3, #12]
			break;
 8004ad6:	e0dd      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PB;
 8004ad8:	4b8d      	ldr	r3, [pc, #564]	; (8004d10 <gpio_IT_config+0x338>)
 8004ada:	2210      	movs	r2, #16
 8004adc:	60da      	str	r2, [r3, #12]
			break;
 8004ade:	e0d9      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PB;
 8004ae0:	4b8b      	ldr	r3, [pc, #556]	; (8004d10 <gpio_IT_config+0x338>)
 8004ae2:	2280      	movs	r2, #128	; 0x80
 8004ae4:	0052      	lsls	r2, r2, #1
 8004ae6:	60da      	str	r2, [r3, #12]
			break;
 8004ae8:	e0d4      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PB;
 8004aea:	4b89      	ldr	r3, [pc, #548]	; (8004d10 <gpio_IT_config+0x338>)
 8004aec:	2280      	movs	r2, #128	; 0x80
 8004aee:	0152      	lsls	r2, r2, #5
 8004af0:	60da      	str	r2, [r3, #12]
			break;
 8004af2:	e0cf      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PB;
 8004af4:	4b86      	ldr	r3, [pc, #536]	; (8004d10 <gpio_IT_config+0x338>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	611a      	str	r2, [r3, #16]
			break;
 8004afa:	e0cb      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PB;
 8004afc:	4b84      	ldr	r3, [pc, #528]	; (8004d10 <gpio_IT_config+0x338>)
 8004afe:	2210      	movs	r2, #16
 8004b00:	611a      	str	r2, [r3, #16]
			break;
 8004b02:	e0c7      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PB;
 8004b04:	4b82      	ldr	r3, [pc, #520]	; (8004d10 <gpio_IT_config+0x338>)
 8004b06:	2280      	movs	r2, #128	; 0x80
 8004b08:	0052      	lsls	r2, r2, #1
 8004b0a:	611a      	str	r2, [r3, #16]
			break;
 8004b0c:	e0c2      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PB;
 8004b0e:	4b80      	ldr	r3, [pc, #512]	; (8004d10 <gpio_IT_config+0x338>)
 8004b10:	2280      	movs	r2, #128	; 0x80
 8004b12:	0152      	lsls	r2, r2, #5
 8004b14:	611a      	str	r2, [r3, #16]
			break;
 8004b16:	e0bd      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PB;
 8004b18:	4b7d      	ldr	r3, [pc, #500]	; (8004d10 <gpio_IT_config+0x338>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	615a      	str	r2, [r3, #20]
			break;
 8004b1e:	e0b9      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PB;
 8004b20:	4b7b      	ldr	r3, [pc, #492]	; (8004d10 <gpio_IT_config+0x338>)
 8004b22:	2210      	movs	r2, #16
 8004b24:	615a      	str	r2, [r3, #20]
			break;
 8004b26:	e0b5      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PB;
 8004b28:	4b79      	ldr	r3, [pc, #484]	; (8004d10 <gpio_IT_config+0x338>)
 8004b2a:	2280      	movs	r2, #128	; 0x80
 8004b2c:	0052      	lsls	r2, r2, #1
 8004b2e:	615a      	str	r2, [r3, #20]
			break;
 8004b30:	e0b0      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PB;
 8004b32:	4b77      	ldr	r3, [pc, #476]	; (8004d10 <gpio_IT_config+0x338>)
 8004b34:	2280      	movs	r2, #128	; 0x80
 8004b36:	0152      	lsls	r2, r2, #5
 8004b38:	615a      	str	r2, [r3, #20]
			break;
 8004b3a:	e0ab      	b.n	8004c94 <gpio_IT_config+0x2bc>
		}	// end of Port B
	} else if (port == GPIOC) {
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a77      	ldr	r2, [pc, #476]	; (8004d1c <gpio_IT_config+0x344>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d151      	bne.n	8004be8 <gpio_IT_config+0x210>
		switch (pinNumber) {
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b0f      	cmp	r3, #15
 8004b48:	d900      	bls.n	8004b4c <gpio_IT_config+0x174>
 8004b4a:	e0a3      	b.n	8004c94 <gpio_IT_config+0x2bc>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	009a      	lsls	r2, r3, #2
 8004b50:	4b73      	ldr	r3, [pc, #460]	; (8004d20 <gpio_IT_config+0x348>)
 8004b52:	18d3      	adds	r3, r2, r3
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	469f      	mov	pc, r3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PC;
 8004b58:	4b6d      	ldr	r3, [pc, #436]	; (8004d10 <gpio_IT_config+0x338>)
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	609a      	str	r2, [r3, #8]
			break;
 8004b5e:	e099      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PC;
 8004b60:	4b6b      	ldr	r3, [pc, #428]	; (8004d10 <gpio_IT_config+0x338>)
 8004b62:	2220      	movs	r2, #32
 8004b64:	609a      	str	r2, [r3, #8]
			break;
 8004b66:	e095      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PC;
 8004b68:	4b69      	ldr	r3, [pc, #420]	; (8004d10 <gpio_IT_config+0x338>)
 8004b6a:	2280      	movs	r2, #128	; 0x80
 8004b6c:	0092      	lsls	r2, r2, #2
 8004b6e:	609a      	str	r2, [r3, #8]
			break;
 8004b70:	e090      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PC;
 8004b72:	4b67      	ldr	r3, [pc, #412]	; (8004d10 <gpio_IT_config+0x338>)
 8004b74:	2280      	movs	r2, #128	; 0x80
 8004b76:	0192      	lsls	r2, r2, #6
 8004b78:	609a      	str	r2, [r3, #8]
			break;
 8004b7a:	e08b      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PC;
 8004b7c:	4b64      	ldr	r3, [pc, #400]	; (8004d10 <gpio_IT_config+0x338>)
 8004b7e:	2202      	movs	r2, #2
 8004b80:	60da      	str	r2, [r3, #12]
			break;
 8004b82:	e087      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PC;
 8004b84:	4b62      	ldr	r3, [pc, #392]	; (8004d10 <gpio_IT_config+0x338>)
 8004b86:	2220      	movs	r2, #32
 8004b88:	60da      	str	r2, [r3, #12]
			break;
 8004b8a:	e083      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PC;
 8004b8c:	4b60      	ldr	r3, [pc, #384]	; (8004d10 <gpio_IT_config+0x338>)
 8004b8e:	2280      	movs	r2, #128	; 0x80
 8004b90:	0092      	lsls	r2, r2, #2
 8004b92:	60da      	str	r2, [r3, #12]
			break;
 8004b94:	e07e      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PC;
 8004b96:	4b5e      	ldr	r3, [pc, #376]	; (8004d10 <gpio_IT_config+0x338>)
 8004b98:	2280      	movs	r2, #128	; 0x80
 8004b9a:	0192      	lsls	r2, r2, #6
 8004b9c:	60da      	str	r2, [r3, #12]
			break;
 8004b9e:	e079      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PC;
 8004ba0:	4b5b      	ldr	r3, [pc, #364]	; (8004d10 <gpio_IT_config+0x338>)
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	611a      	str	r2, [r3, #16]
			break;
 8004ba6:	e075      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PC;
 8004ba8:	4b59      	ldr	r3, [pc, #356]	; (8004d10 <gpio_IT_config+0x338>)
 8004baa:	2220      	movs	r2, #32
 8004bac:	611a      	str	r2, [r3, #16]
			break;
 8004bae:	e071      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PC;
 8004bb0:	4b57      	ldr	r3, [pc, #348]	; (8004d10 <gpio_IT_config+0x338>)
 8004bb2:	2280      	movs	r2, #128	; 0x80
 8004bb4:	0092      	lsls	r2, r2, #2
 8004bb6:	611a      	str	r2, [r3, #16]
			break;
 8004bb8:	e06c      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PC;
 8004bba:	4b55      	ldr	r3, [pc, #340]	; (8004d10 <gpio_IT_config+0x338>)
 8004bbc:	2280      	movs	r2, #128	; 0x80
 8004bbe:	0192      	lsls	r2, r2, #6
 8004bc0:	611a      	str	r2, [r3, #16]
			break;
 8004bc2:	e067      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PC;
 8004bc4:	4b52      	ldr	r3, [pc, #328]	; (8004d10 <gpio_IT_config+0x338>)
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	615a      	str	r2, [r3, #20]
			break;
 8004bca:	e063      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PC;
 8004bcc:	4b50      	ldr	r3, [pc, #320]	; (8004d10 <gpio_IT_config+0x338>)
 8004bce:	2220      	movs	r2, #32
 8004bd0:	615a      	str	r2, [r3, #20]
			break;
 8004bd2:	e05f      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PC;
 8004bd4:	4b4e      	ldr	r3, [pc, #312]	; (8004d10 <gpio_IT_config+0x338>)
 8004bd6:	2280      	movs	r2, #128	; 0x80
 8004bd8:	0092      	lsls	r2, r2, #2
 8004bda:	615a      	str	r2, [r3, #20]
			break;
 8004bdc:	e05a      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PC;
 8004bde:	4b4c      	ldr	r3, [pc, #304]	; (8004d10 <gpio_IT_config+0x338>)
 8004be0:	2280      	movs	r2, #128	; 0x80
 8004be2:	0192      	lsls	r2, r2, #6
 8004be4:	615a      	str	r2, [r3, #20]
			break;
 8004be6:	e055      	b.n	8004c94 <gpio_IT_config+0x2bc>
		}	// end of Port C
	} else if (port == GPIOD) {
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4a4e      	ldr	r2, [pc, #312]	; (8004d24 <gpio_IT_config+0x34c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d150      	bne.n	8004c92 <gpio_IT_config+0x2ba>
		switch (pinNumber) {
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b0f      	cmp	r3, #15
 8004bf4:	d84e      	bhi.n	8004c94 <gpio_IT_config+0x2bc>
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	009a      	lsls	r2, r3, #2
 8004bfa:	4b4b      	ldr	r3, [pc, #300]	; (8004d28 <gpio_IT_config+0x350>)
 8004bfc:	18d3      	adds	r3, r2, r3
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	469f      	mov	pc, r3
		case 0:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PD;
 8004c02:	4b43      	ldr	r3, [pc, #268]	; (8004d10 <gpio_IT_config+0x338>)
 8004c04:	2203      	movs	r2, #3
 8004c06:	609a      	str	r2, [r3, #8]
			break;
 8004c08:	e044      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 1:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PD;
 8004c0a:	4b41      	ldr	r3, [pc, #260]	; (8004d10 <gpio_IT_config+0x338>)
 8004c0c:	2230      	movs	r2, #48	; 0x30
 8004c0e:	609a      	str	r2, [r3, #8]
			break;
 8004c10:	e040      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 2:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI2_PD;
 8004c12:	4b3f      	ldr	r3, [pc, #252]	; (8004d10 <gpio_IT_config+0x338>)
 8004c14:	22c0      	movs	r2, #192	; 0xc0
 8004c16:	0092      	lsls	r2, r2, #2
 8004c18:	609a      	str	r2, [r3, #8]
			break;
 8004c1a:	e03b      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 3:
			SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI3_PD;
 8004c1c:	4b3c      	ldr	r3, [pc, #240]	; (8004d10 <gpio_IT_config+0x338>)
 8004c1e:	22c0      	movs	r2, #192	; 0xc0
 8004c20:	0192      	lsls	r2, r2, #6
 8004c22:	609a      	str	r2, [r3, #8]
			break;
 8004c24:	e036      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 4:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI4_PD;
 8004c26:	4b3a      	ldr	r3, [pc, #232]	; (8004d10 <gpio_IT_config+0x338>)
 8004c28:	2203      	movs	r2, #3
 8004c2a:	60da      	str	r2, [r3, #12]
			break;
 8004c2c:	e032      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 5:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI5_PD;
 8004c2e:	4b38      	ldr	r3, [pc, #224]	; (8004d10 <gpio_IT_config+0x338>)
 8004c30:	2230      	movs	r2, #48	; 0x30
 8004c32:	60da      	str	r2, [r3, #12]
			break;
 8004c34:	e02e      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 6:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI6_PD;
 8004c36:	4b36      	ldr	r3, [pc, #216]	; (8004d10 <gpio_IT_config+0x338>)
 8004c38:	22c0      	movs	r2, #192	; 0xc0
 8004c3a:	0092      	lsls	r2, r2, #2
 8004c3c:	60da      	str	r2, [r3, #12]
			break;
 8004c3e:	e029      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 7:
			SYSCFG->EXTICR[1] = SYSCFG_EXTICR2_EXTI7_PD;
 8004c40:	4b33      	ldr	r3, [pc, #204]	; (8004d10 <gpio_IT_config+0x338>)
 8004c42:	22c0      	movs	r2, #192	; 0xc0
 8004c44:	0192      	lsls	r2, r2, #6
 8004c46:	60da      	str	r2, [r3, #12]
			break;
 8004c48:	e024      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 8:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI8_PD;
 8004c4a:	4b31      	ldr	r3, [pc, #196]	; (8004d10 <gpio_IT_config+0x338>)
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	611a      	str	r2, [r3, #16]
			break;
 8004c50:	e020      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 9:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI9_PD;
 8004c52:	4b2f      	ldr	r3, [pc, #188]	; (8004d10 <gpio_IT_config+0x338>)
 8004c54:	2230      	movs	r2, #48	; 0x30
 8004c56:	611a      	str	r2, [r3, #16]
			break;
 8004c58:	e01c      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 10:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI10_PD;
 8004c5a:	4b2d      	ldr	r3, [pc, #180]	; (8004d10 <gpio_IT_config+0x338>)
 8004c5c:	22c0      	movs	r2, #192	; 0xc0
 8004c5e:	0092      	lsls	r2, r2, #2
 8004c60:	611a      	str	r2, [r3, #16]
			break;
 8004c62:	e017      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 11:
			SYSCFG->EXTICR[2] = SYSCFG_EXTICR3_EXTI11_PD;
 8004c64:	4b2a      	ldr	r3, [pc, #168]	; (8004d10 <gpio_IT_config+0x338>)
 8004c66:	22c0      	movs	r2, #192	; 0xc0
 8004c68:	0192      	lsls	r2, r2, #6
 8004c6a:	611a      	str	r2, [r3, #16]
			break;
 8004c6c:	e012      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 12:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI12_PD;
 8004c6e:	4b28      	ldr	r3, [pc, #160]	; (8004d10 <gpio_IT_config+0x338>)
 8004c70:	2203      	movs	r2, #3
 8004c72:	615a      	str	r2, [r3, #20]
			break;
 8004c74:	e00e      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 13:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI13_PD;
 8004c76:	4b26      	ldr	r3, [pc, #152]	; (8004d10 <gpio_IT_config+0x338>)
 8004c78:	2230      	movs	r2, #48	; 0x30
 8004c7a:	615a      	str	r2, [r3, #20]
			break;
 8004c7c:	e00a      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 14:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI14_PD;
 8004c7e:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <gpio_IT_config+0x338>)
 8004c80:	22c0      	movs	r2, #192	; 0xc0
 8004c82:	0092      	lsls	r2, r2, #2
 8004c84:	615a      	str	r2, [r3, #20]
			break;
 8004c86:	e005      	b.n	8004c94 <gpio_IT_config+0x2bc>
		case 15:
			SYSCFG->EXTICR[3] = SYSCFG_EXTICR4_EXTI15_PD;
 8004c88:	4b21      	ldr	r3, [pc, #132]	; (8004d10 <gpio_IT_config+0x338>)
 8004c8a:	22c0      	movs	r2, #192	; 0xc0
 8004c8c:	0192      	lsls	r2, r2, #6
 8004c8e:	615a      	str	r2, [r3, #20]
			break;
 8004c90:	e000      	b.n	8004c94 <gpio_IT_config+0x2bc>
		}	// end of Port D
	}
 8004c92:	46c0      	nop			; (mov r8, r8)

	if (edge == RISING_EDGE) {
 8004c94:	1dfb      	adds	r3, r7, #7
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10a      	bne.n	8004cb2 <gpio_IT_config+0x2da>
		EXTI->RTSR |= 1 << pinNumber;
 8004c9c:	4b23      	ldr	r3, [pc, #140]	; (8004d2c <gpio_IT_config+0x354>)
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4099      	lsls	r1, r3
 8004ca6:	000b      	movs	r3, r1
 8004ca8:	0019      	movs	r1, r3
 8004caa:	4b20      	ldr	r3, [pc, #128]	; (8004d2c <gpio_IT_config+0x354>)
 8004cac:	430a      	orrs	r2, r1
 8004cae:	609a      	str	r2, [r3, #8]
		EXTI->FTSR |= 1 << pinNumber;
	} else if (edge == RISING_FALLING_EDGE) {
		EXTI->RTSR |= 1 << pinNumber;
		EXTI->FTSR |= 1 << pinNumber;
	}
}
 8004cb0:	e026      	b.n	8004d00 <gpio_IT_config+0x328>
	} else if (edge == FALLING_EDGE) {
 8004cb2:	1dfb      	adds	r3, r7, #7
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d10a      	bne.n	8004cd0 <gpio_IT_config+0x2f8>
		EXTI->FTSR |= 1 << pinNumber;
 8004cba:	4b1c      	ldr	r3, [pc, #112]	; (8004d2c <gpio_IT_config+0x354>)
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4099      	lsls	r1, r3
 8004cc4:	000b      	movs	r3, r1
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	4b18      	ldr	r3, [pc, #96]	; (8004d2c <gpio_IT_config+0x354>)
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	60da      	str	r2, [r3, #12]
}
 8004cce:	e017      	b.n	8004d00 <gpio_IT_config+0x328>
	} else if (edge == RISING_FALLING_EDGE) {
 8004cd0:	1dfb      	adds	r3, r7, #7
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d113      	bne.n	8004d00 <gpio_IT_config+0x328>
		EXTI->RTSR |= 1 << pinNumber;
 8004cd8:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <gpio_IT_config+0x354>)
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	2101      	movs	r1, #1
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	4099      	lsls	r1, r3
 8004ce2:	000b      	movs	r3, r1
 8004ce4:	0019      	movs	r1, r3
 8004ce6:	4b11      	ldr	r3, [pc, #68]	; (8004d2c <gpio_IT_config+0x354>)
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	609a      	str	r2, [r3, #8]
		EXTI->FTSR |= 1 << pinNumber;
 8004cec:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <gpio_IT_config+0x354>)
 8004cee:	68da      	ldr	r2, [r3, #12]
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	4099      	lsls	r1, r3
 8004cf6:	000b      	movs	r3, r1
 8004cf8:	0019      	movs	r1, r3
 8004cfa:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <gpio_IT_config+0x354>)
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	60da      	str	r2, [r3, #12]
}
 8004d00:	46c0      	nop			; (mov r8, r8)
 8004d02:	46bd      	mov	sp, r7
 8004d04:	b004      	add	sp, #16
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	0800a69c 	.word	0x0800a69c
 8004d10:	40010000 	.word	0x40010000
 8004d14:	48000400 	.word	0x48000400
 8004d18:	0800a6dc 	.word	0x0800a6dc
 8004d1c:	48000800 	.word	0x48000800
 8004d20:	0800a71c 	.word	0x0800a71c
 8004d24:	48000c00 	.word	0x48000c00
 8004d28:	0800a75c 	.word	0x0800a75c
 8004d2c:	40010400 	.word	0x40010400

08004d30 <gpio_IT_EN>:

void gpio_IT_EN(uint8_t pinNumber, IRQn_Type irqNumber) {//Interrupt Enable Function
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	0002      	movs	r2, r0
 8004d38:	1dfb      	adds	r3, r7, #7
 8004d3a:	701a      	strb	r2, [r3, #0]
 8004d3c:	1dbb      	adds	r3, r7, #6
 8004d3e:	1c0a      	adds	r2, r1, #0
 8004d40:	701a      	strb	r2, [r3, #0]
	EXTI->IMR |= 1 << pinNumber;	//enable interrupt in EXTI
 8004d42:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <gpio_IT_EN+0x3c>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	1dfb      	adds	r3, r7, #7
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	4099      	lsls	r1, r3
 8004d4e:	000b      	movs	r3, r1
 8004d50:	0019      	movs	r1, r3
 8004d52:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <gpio_IT_EN+0x3c>)
 8004d54:	430a      	orrs	r2, r1
 8004d56:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(irqNumber);		//enable interrupt in NVIC
 8004d58:	1dbb      	adds	r3, r7, #6
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	b25b      	sxtb	r3, r3
 8004d5e:	0018      	movs	r0, r3
 8004d60:	f7ff fc9a 	bl	8004698 <__NVIC_EnableIRQ>
}
 8004d64:	46c0      	nop			; (mov r8, r8)
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b002      	add	sp, #8
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40010400 	.word	0x40010400

08004d70 <gpio_IT_CHK>:

void gpio_IT_SW(uint8_t pinNumber) {			//Interrupt Software generate
	EXTI->SWIER |= 1 << pinNumber;				//TODO: Not Done for now
}

uint8_t gpio_IT_CHK(uint8_t pinNumber) {			//Interrupt check function
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	0002      	movs	r2, r0
 8004d78:	1dfb      	adds	r3, r7, #7
 8004d7a:	701a      	strb	r2, [r3, #0]
	if ((EXTI->PR) & (1 << pinNumber)) {				//Check pending register
 8004d7c:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <gpio_IT_CHK+0x2c>)
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	1dfa      	adds	r2, r7, #7
 8004d82:	7812      	ldrb	r2, [r2, #0]
 8004d84:	2101      	movs	r1, #1
 8004d86:	4091      	lsls	r1, r2
 8004d88:	000a      	movs	r2, r1
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	d001      	beq.n	8004d92 <gpio_IT_CHK+0x22>
		return 1;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e000      	b.n	8004d94 <gpio_IT_CHK+0x24>
	} else {
		return 0;
 8004d92:	2300      	movs	r3, #0
	}					//Check pending register
}
 8004d94:	0018      	movs	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	b002      	add	sp, #8
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40010400 	.word	0x40010400

08004da0 <gpio_IT_CLR>:

void gpio_IT_CLR(uint8_t pinNumber) {				//Interrupt clear function
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	0002      	movs	r2, r0
 8004da8:	1dfb      	adds	r3, r7, #7
 8004daa:	701a      	strb	r2, [r3, #0]
	EXTI->PR |= 1 << pinNumber;		//clear pending register
 8004dac:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <gpio_IT_CLR+0x2c>)
 8004dae:	695a      	ldr	r2, [r3, #20]
 8004db0:	1dfb      	adds	r3, r7, #7
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2101      	movs	r1, #1
 8004db6:	4099      	lsls	r1, r3
 8004db8:	000b      	movs	r3, r1
 8004dba:	0019      	movs	r1, r3
 8004dbc:	4b03      	ldr	r3, [pc, #12]	; (8004dcc <gpio_IT_CLR+0x2c>)
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	615a      	str	r2, [r3, #20]
}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	b002      	add	sp, #8
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	40010400 	.word	0x40010400

08004dd0 <ticks_reset>:
	timer_EN(TIM6);
}
uint16_t ticks_val() {
	return ticks;
}
void ticks_reset() {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
	ticks = 0;
 8004dd4:	4b02      	ldr	r3, [pc, #8]	; (8004de0 <ticks_reset+0x10>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	801a      	strh	r2, [r3, #0]
}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	20000564 	.word	0x20000564

08004de4 <TIM6_IRQHandler>:
void TIM6_IRQHandler(void) {		// Timer Interrupt helping in delay
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
	ticks++;
 8004de8:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <TIM6_IRQHandler+0x24>)
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	3301      	adds	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <TIM6_IRQHandler+0x24>)
 8004df2:	801a      	strh	r2, [r3, #0]
	TIM6->SR &= ~TIM_SR_UIF;
 8004df4:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <TIM6_IRQHandler+0x28>)
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	4b04      	ldr	r3, [pc, #16]	; (8004e0c <TIM6_IRQHandler+0x28>)
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	438a      	bics	r2, r1
 8004dfe:	611a      	str	r2, [r3, #16]
}
 8004e00:	46c0      	nop			; (mov r8, r8)
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	20000564 	.word	0x20000564
 8004e0c:	40001000 	.word	0x40001000

08004e10 <adc_calib>:
//************************** General Purpose TIMER FUNCTIONS ********************//

//*******************************************************************************//

//********************************| ADC FUNCTIONS |******************************//
void adc_calib() {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
	// Calibrate ADC
	if ((ADC1->CR & ADC_CR_ADEN) != 0) /* (1) */
 8004e14:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <adc_calib+0x54>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d005      	beq.n	8004e2a <adc_calib+0x1a>
	{
		ADC1->CR |= ADC_CR_ADDIS; /* (2) */
 8004e1e:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <adc_calib+0x54>)
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	4b10      	ldr	r3, [pc, #64]	; (8004e64 <adc_calib+0x54>)
 8004e24:	2102      	movs	r1, #2
 8004e26:	430a      	orrs	r2, r1
 8004e28:	609a      	str	r2, [r3, #8]
	}
	while ((ADC1->CR & ADC_CR_ADEN) != 0) {
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <adc_calib+0x54>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	2201      	movs	r2, #1
 8004e32:	4013      	ands	r3, r2
 8004e34:	d1fa      	bne.n	8004e2c <adc_calib+0x1c>
		/* For robust implementation, add here time-out management */
	}
	ADC1->CFGR1 &= ~ADC_CFGR1_DMAEN; /* (3) */
 8004e36:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <adc_calib+0x54>)
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <adc_calib+0x54>)
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	438a      	bics	r2, r1
 8004e40:	60da      	str	r2, [r3, #12]
	ADC1->CR |= ADC_CR_ADCAL; /* (4) */
 8004e42:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <adc_calib+0x54>)
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <adc_calib+0x54>)
 8004e48:	2180      	movs	r1, #128	; 0x80
 8004e4a:	0609      	lsls	r1, r1, #24
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	609a      	str	r2, [r3, #8]
	while ((ADC1->CR & ADC_CR_ADCAL) != 0) /* (5) */
 8004e50:	46c0      	nop			; (mov r8, r8)
 8004e52:	4b04      	ldr	r3, [pc, #16]	; (8004e64 <adc_calib+0x54>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	dbfb      	blt.n	8004e52 <adc_calib+0x42>
	{
	}
}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	46c0      	nop			; (mov r8, r8)
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	40012400 	.word	0x40012400

08004e68 <adc_ready>:
void adc_ready() {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
	// ADC ENABLE
	if ((ADC1->ISR & ADC_ISR_ADRDY) != 0) /* (1) */
 8004e6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ea8 <adc_ready+0x40>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2201      	movs	r2, #1
 8004e72:	4013      	ands	r3, r2
 8004e74:	d005      	beq.n	8004e82 <adc_ready+0x1a>
	{
		ADC1->ISR |= ADC_ISR_ADRDY; /* (2) */
 8004e76:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <adc_ready+0x40>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <adc_ready+0x40>)
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	601a      	str	r2, [r3, #0]
	}
	ADC1->CR |= ADC_CR_ADEN; /* (3) */
 8004e82:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <adc_ready+0x40>)
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	4b08      	ldr	r3, [pc, #32]	; (8004ea8 <adc_ready+0x40>)
 8004e88:	2101      	movs	r1, #1
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	609a      	str	r2, [r3, #8]
	ticks_reset();
 8004e8e:	f7ff ff9f 	bl	8004dd0 <ticks_reset>
//	while (ticks_val() < 50)
//		;
	while ((ADC1->ISR & ADC_ISR_ADRDY) == 0) /* (4) */
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <adc_ready+0x40>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d0fa      	beq.n	8004e94 <adc_ready+0x2c>
	{
		/* For robust implementation, add here time-out management */
	}
}
 8004e9e:	46c0      	nop			; (mov r8, r8)
 8004ea0:	46c0      	nop			; (mov r8, r8)
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	46c0      	nop			; (mov r8, r8)
 8004ea8:	40012400 	.word	0x40012400

08004eac <adc_clk_config>:
void adc_clk_config() {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; /* (1) */
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <adc_clk_config+0x34>)
 8004eb2:	699a      	ldr	r2, [r3, #24]
 8004eb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ee0 <adc_clk_config+0x34>)
 8004eb6:	2180      	movs	r1, #128	; 0x80
 8004eb8:	0089      	lsls	r1, r1, #2
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	619a      	str	r2, [r3, #24]
	RCC->CR2 |= RCC_CR2_HSI14ON; /* (2) */
 8004ebe:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <adc_clk_config+0x34>)
 8004ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ec2:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <adc_clk_config+0x34>)
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	635a      	str	r2, [r3, #52]	; 0x34
	while ((RCC->CR2 & RCC_CR2_HSI14RDY) == 0) /* (3) */
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	4b04      	ldr	r3, [pc, #16]	; (8004ee0 <adc_clk_config+0x34>)
 8004ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	d0fa      	beq.n	8004ecc <adc_clk_config+0x20>
	{
		/* For robust implementation, add here time-out management */
	}
}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	40021000 	.word	0x40021000

08004ee4 <adc_sample_time>:
void adc_sample_time(uint8_t sample_time) {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	0002      	movs	r2, r0
 8004eec:	1dfb      	adds	r3, r7, #7
 8004eee:	701a      	strb	r2, [r3, #0]
	ADC1->SMPR |= sample_time;
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <adc_sample_time+0x24>)
 8004ef2:	6959      	ldr	r1, [r3, #20]
 8004ef4:	1dfb      	adds	r3, r7, #7
 8004ef6:	781a      	ldrb	r2, [r3, #0]
 8004ef8:	4b03      	ldr	r3, [pc, #12]	; (8004f08 <adc_sample_time+0x24>)
 8004efa:	430a      	orrs	r2, r1
 8004efc:	615a      	str	r2, [r3, #20]
}
 8004efe:	46c0      	nop			; (mov r8, r8)
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b002      	add	sp, #8
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	40012400 	.word	0x40012400

08004f0c <adc_en>:
void adc_en() {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
	adc_clk_config();
 8004f10:	f7ff ffcc 	bl	8004eac <adc_clk_config>
	adc_calib();
 8004f14:	f7ff ff7c 	bl	8004e10 <adc_calib>
	adc_ready();
 8004f18:	f7ff ffa6 	bl	8004e68 <adc_ready>
}
 8004f1c:	46c0      	nop			; (mov r8, r8)
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
	...

08004f24 <adc_read>:
void adc_read(uint16_t *arr, uint8_t arr_len) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	000a      	movs	r2, r1
 8004f2e:	1cfb      	adds	r3, r7, #3
 8004f30:	701a      	strb	r2, [r3, #0]
	ADC1->CR |= ADC_CR_ADSTART;
 8004f32:	4b14      	ldr	r3, [pc, #80]	; (8004f84 <adc_read+0x60>)
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	4b13      	ldr	r3, [pc, #76]	; (8004f84 <adc_read+0x60>)
 8004f38:	2104      	movs	r1, #4
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < arr_len; i++) {
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	e010      	b.n	8004f66 <adc_read+0x42>
		while ((ADC1->ISR & ADC_ISR_EOC) == 0)
 8004f44:	46c0      	nop			; (mov r8, r8)
 8004f46:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <adc_read+0x60>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d0fa      	beq.n	8004f46 <adc_read+0x22>
			;
		*(arr + i) = ADC1->DR;
 8004f50:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <adc_read+0x60>)
 8004f52:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	18d3      	adds	r3, r2, r3
 8004f5c:	b28a      	uxth	r2, r1
 8004f5e:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < arr_len; i++) {
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3301      	adds	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	1cfb      	adds	r3, r7, #3
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	dbe9      	blt.n	8004f44 <adc_read+0x20>
	}
	ADC1->CR |= ADC_CR_ADSTP;
 8004f70:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <adc_read+0x60>)
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	4b03      	ldr	r3, [pc, #12]	; (8004f84 <adc_read+0x60>)
 8004f76:	2110      	movs	r1, #16
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	609a      	str	r2, [r3, #8]
}
 8004f7c:	46c0      	nop			; (mov r8, r8)
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b004      	add	sp, #16
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40012400 	.word	0x40012400

08004f88 <adc_chsel>:
	while ((ADC1->CR & ADC_CR_ADEN) != 0) /* (4) */
	{
		/* For robust implementation, add here time-out management */
	}
}
void adc_chsel(GPIO_TypeDef *port, uint16_t pin) {
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	000a      	movs	r2, r1
 8004f92:	1cbb      	adds	r3, r7, #2
 8004f94:	801a      	strh	r2, [r3, #0]

	if (port == GPIOA) {
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	2390      	movs	r3, #144	; 0x90
 8004f9a:	05db      	lsls	r3, r3, #23
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d133      	bne.n	8005008 <adc_chsel+0x80>
		switch (pin) {
 8004fa0:	1cbb      	adds	r3, r7, #2
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	2b07      	cmp	r3, #7
 8004fa6:	d900      	bls.n	8004faa <adc_chsel+0x22>
 8004fa8:	e086      	b.n	80050b8 <adc_chsel+0x130>
 8004faa:	009a      	lsls	r2, r3, #2
 8004fac:	4b47      	ldr	r3, [pc, #284]	; (80050cc <adc_chsel+0x144>)
 8004fae:	18d3      	adds	r3, r2, r3
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	469f      	mov	pc, r3
		case 0:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL0;
 8004fb4:	4b46      	ldr	r3, [pc, #280]	; (80050d0 <adc_chsel+0x148>)
 8004fb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fb8:	4b45      	ldr	r3, [pc, #276]	; (80050d0 <adc_chsel+0x148>)
 8004fba:	2101      	movs	r1, #1
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8004fc0:	e07f      	b.n	80050c2 <adc_chsel+0x13a>
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL1;
 8004fc2:	4b43      	ldr	r3, [pc, #268]	; (80050d0 <adc_chsel+0x148>)
 8004fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fc6:	4b42      	ldr	r3, [pc, #264]	; (80050d0 <adc_chsel+0x148>)
 8004fc8:	2102      	movs	r1, #2
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8004fce:	e078      	b.n	80050c2 <adc_chsel+0x13a>
		case 4:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL4;
 8004fd0:	4b3f      	ldr	r3, [pc, #252]	; (80050d0 <adc_chsel+0x148>)
 8004fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fd4:	4b3e      	ldr	r3, [pc, #248]	; (80050d0 <adc_chsel+0x148>)
 8004fd6:	2110      	movs	r1, #16
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8004fdc:	e071      	b.n	80050c2 <adc_chsel+0x13a>
		case 5:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL5;
 8004fde:	4b3c      	ldr	r3, [pc, #240]	; (80050d0 <adc_chsel+0x148>)
 8004fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe2:	4b3b      	ldr	r3, [pc, #236]	; (80050d0 <adc_chsel+0x148>)
 8004fe4:	2120      	movs	r1, #32
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8004fea:	e06a      	b.n	80050c2 <adc_chsel+0x13a>
		case 6:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL6;
 8004fec:	4b38      	ldr	r3, [pc, #224]	; (80050d0 <adc_chsel+0x148>)
 8004fee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ff0:	4b37      	ldr	r3, [pc, #220]	; (80050d0 <adc_chsel+0x148>)
 8004ff2:	2140      	movs	r1, #64	; 0x40
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8004ff8:	e063      	b.n	80050c2 <adc_chsel+0x13a>
		case 7:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL7;
 8004ffa:	4b35      	ldr	r3, [pc, #212]	; (80050d0 <adc_chsel+0x148>)
 8004ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ffe:	4b34      	ldr	r3, [pc, #208]	; (80050d0 <adc_chsel+0x148>)
 8005000:	2180      	movs	r1, #128	; 0x80
 8005002:	430a      	orrs	r2, r1
 8005004:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8005006:	e05c      	b.n	80050c2 <adc_chsel+0x13a>
		default:
			break;
		}
	} else if (port == GPIOB) {
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a32      	ldr	r2, [pc, #200]	; (80050d4 <adc_chsel+0x14c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d116      	bne.n	800503e <adc_chsel+0xb6>
		switch (pin) {
 8005010:	1cbb      	adds	r3, r7, #2
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <adc_chsel+0x96>
 8005018:	2b01      	cmp	r3, #1
 800501a:	d008      	beq.n	800502e <adc_chsel+0xa6>
			break;
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL9;
			break;
		default:
			break;
 800501c:	e051      	b.n	80050c2 <adc_chsel+0x13a>
			ADC1->CHSELR |= ADC_CHSELR_CHSEL8;
 800501e:	4b2c      	ldr	r3, [pc, #176]	; (80050d0 <adc_chsel+0x148>)
 8005020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005022:	4b2b      	ldr	r3, [pc, #172]	; (80050d0 <adc_chsel+0x148>)
 8005024:	2180      	movs	r1, #128	; 0x80
 8005026:	0049      	lsls	r1, r1, #1
 8005028:	430a      	orrs	r2, r1
 800502a:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800502c:	e049      	b.n	80050c2 <adc_chsel+0x13a>
			ADC1->CHSELR |= ADC_CHSELR_CHSEL9;
 800502e:	4b28      	ldr	r3, [pc, #160]	; (80050d0 <adc_chsel+0x148>)
 8005030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005032:	4b27      	ldr	r3, [pc, #156]	; (80050d0 <adc_chsel+0x148>)
 8005034:	2180      	movs	r1, #128	; 0x80
 8005036:	0089      	lsls	r1, r1, #2
 8005038:	430a      	orrs	r2, r1
 800503a:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 800503c:	e041      	b.n	80050c2 <adc_chsel+0x13a>
		}
	} else if (port == GPIOC) {
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a25      	ldr	r2, [pc, #148]	; (80050d8 <adc_chsel+0x150>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d13a      	bne.n	80050bc <adc_chsel+0x134>
		switch (pin) {
 8005046:	1cbb      	adds	r3, r7, #2
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	2b05      	cmp	r3, #5
 800504c:	d838      	bhi.n	80050c0 <adc_chsel+0x138>
 800504e:	009a      	lsls	r2, r3, #2
 8005050:	4b22      	ldr	r3, [pc, #136]	; (80050dc <adc_chsel+0x154>)
 8005052:	18d3      	adds	r3, r2, r3
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	469f      	mov	pc, r3
		case 0:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL10;
 8005058:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <adc_chsel+0x148>)
 800505a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800505c:	4b1c      	ldr	r3, [pc, #112]	; (80050d0 <adc_chsel+0x148>)
 800505e:	2180      	movs	r1, #128	; 0x80
 8005060:	00c9      	lsls	r1, r1, #3
 8005062:	430a      	orrs	r2, r1
 8005064:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8005066:	e02c      	b.n	80050c2 <adc_chsel+0x13a>
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL11;
 8005068:	4b19      	ldr	r3, [pc, #100]	; (80050d0 <adc_chsel+0x148>)
 800506a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800506c:	4b18      	ldr	r3, [pc, #96]	; (80050d0 <adc_chsel+0x148>)
 800506e:	2180      	movs	r1, #128	; 0x80
 8005070:	0109      	lsls	r1, r1, #4
 8005072:	430a      	orrs	r2, r1
 8005074:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8005076:	e024      	b.n	80050c2 <adc_chsel+0x13a>
		case 2:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL12;
 8005078:	4b15      	ldr	r3, [pc, #84]	; (80050d0 <adc_chsel+0x148>)
 800507a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800507c:	4b14      	ldr	r3, [pc, #80]	; (80050d0 <adc_chsel+0x148>)
 800507e:	2180      	movs	r1, #128	; 0x80
 8005080:	0149      	lsls	r1, r1, #5
 8005082:	430a      	orrs	r2, r1
 8005084:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8005086:	e01c      	b.n	80050c2 <adc_chsel+0x13a>
		case 3:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL13;
 8005088:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <adc_chsel+0x148>)
 800508a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800508c:	4b10      	ldr	r3, [pc, #64]	; (80050d0 <adc_chsel+0x148>)
 800508e:	2180      	movs	r1, #128	; 0x80
 8005090:	0189      	lsls	r1, r1, #6
 8005092:	430a      	orrs	r2, r1
 8005094:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8005096:	e014      	b.n	80050c2 <adc_chsel+0x13a>
		case 4:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL14;
 8005098:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <adc_chsel+0x148>)
 800509a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800509c:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <adc_chsel+0x148>)
 800509e:	2180      	movs	r1, #128	; 0x80
 80050a0:	01c9      	lsls	r1, r1, #7
 80050a2:	430a      	orrs	r2, r1
 80050a4:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80050a6:	e00c      	b.n	80050c2 <adc_chsel+0x13a>
		case 5:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL15;
 80050a8:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <adc_chsel+0x148>)
 80050aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ac:	4b08      	ldr	r3, [pc, #32]	; (80050d0 <adc_chsel+0x148>)
 80050ae:	2180      	movs	r1, #128	; 0x80
 80050b0:	0209      	lsls	r1, r1, #8
 80050b2:	430a      	orrs	r2, r1
 80050b4:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80050b6:	e004      	b.n	80050c2 <adc_chsel+0x13a>
			break;
 80050b8:	46c0      	nop			; (mov r8, r8)
 80050ba:	e002      	b.n	80050c2 <adc_chsel+0x13a>
		default:
			break;
		}
	}
 80050bc:	46c0      	nop			; (mov r8, r8)
 80050be:	e000      	b.n	80050c2 <adc_chsel+0x13a>
			break;
 80050c0:	46c0      	nop			; (mov r8, r8)
}
 80050c2:	46c0      	nop			; (mov r8, r8)
 80050c4:	46bd      	mov	sp, r7
 80050c6:	b002      	add	sp, #8
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	0800a79c 	.word	0x0800a79c
 80050d0:	40012400 	.word	0x40012400
 80050d4:	48000400 	.word	0x48000400
 80050d8:	48000800 	.word	0x48000800
 80050dc:	0800a7bc 	.word	0x0800a7bc

080050e0 <adc_config>:
void adc_config(uint8_t sample_time, uint8_t CONT, uint8_t SCANDIR,
		uint8_t AUTOFF, uint8_t WAIT, uint8_t DISCEN, uint8_t OVRMOD) {
 80050e0:	b5b0      	push	{r4, r5, r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	0005      	movs	r5, r0
 80050e8:	000c      	movs	r4, r1
 80050ea:	0010      	movs	r0, r2
 80050ec:	0019      	movs	r1, r3
 80050ee:	1dfb      	adds	r3, r7, #7
 80050f0:	1c2a      	adds	r2, r5, #0
 80050f2:	701a      	strb	r2, [r3, #0]
 80050f4:	1dbb      	adds	r3, r7, #6
 80050f6:	1c22      	adds	r2, r4, #0
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	1d7b      	adds	r3, r7, #5
 80050fc:	1c02      	adds	r2, r0, #0
 80050fe:	701a      	strb	r2, [r3, #0]
 8005100:	1d3b      	adds	r3, r7, #4
 8005102:	1c0a      	adds	r2, r1, #0
 8005104:	701a      	strb	r2, [r3, #0]
	adc_sample_time(sample_time);
 8005106:	1dfb      	adds	r3, r7, #7
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	0018      	movs	r0, r3
 800510c:	f7ff feea 	bl	8004ee4 <adc_sample_time>
	if (DISCEN) {
 8005110:	231c      	movs	r3, #28
 8005112:	18fb      	adds	r3, r7, r3
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d006      	beq.n	8005128 <adc_config+0x48>
		ADC1->CFGR1 |= ADC_CFGR1_DISCEN;
 800511a:	4b21      	ldr	r3, [pc, #132]	; (80051a0 <adc_config+0xc0>)
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <adc_config+0xc0>)
 8005120:	2180      	movs	r1, #128	; 0x80
 8005122:	0249      	lsls	r1, r1, #9
 8005124:	430a      	orrs	r2, r1
 8005126:	60da      	str	r2, [r3, #12]
	}
	if (AUTOFF) {
 8005128:	1d3b      	adds	r3, r7, #4
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d006      	beq.n	800513e <adc_config+0x5e>
		ADC1->CFGR1 |= ADC_CFGR1_AUTOFF;
 8005130:	4b1b      	ldr	r3, [pc, #108]	; (80051a0 <adc_config+0xc0>)
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	4b1a      	ldr	r3, [pc, #104]	; (80051a0 <adc_config+0xc0>)
 8005136:	2180      	movs	r1, #128	; 0x80
 8005138:	0209      	lsls	r1, r1, #8
 800513a:	430a      	orrs	r2, r1
 800513c:	60da      	str	r2, [r3, #12]
	}
	if (WAIT) {
 800513e:	2318      	movs	r3, #24
 8005140:	18fb      	adds	r3, r7, r3
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d006      	beq.n	8005156 <adc_config+0x76>
		ADC1->CFGR1 |= ADC_CFGR1_WAIT;
 8005148:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <adc_config+0xc0>)
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	4b14      	ldr	r3, [pc, #80]	; (80051a0 <adc_config+0xc0>)
 800514e:	2180      	movs	r1, #128	; 0x80
 8005150:	01c9      	lsls	r1, r1, #7
 8005152:	430a      	orrs	r2, r1
 8005154:	60da      	str	r2, [r3, #12]
	}
	if (CONT) {
 8005156:	1dbb      	adds	r3, r7, #6
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d006      	beq.n	800516c <adc_config+0x8c>
		ADC1->CFGR1 |= ADC_CFGR1_CONT;
 800515e:	4b10      	ldr	r3, [pc, #64]	; (80051a0 <adc_config+0xc0>)
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <adc_config+0xc0>)
 8005164:	2180      	movs	r1, #128	; 0x80
 8005166:	0189      	lsls	r1, r1, #6
 8005168:	430a      	orrs	r2, r1
 800516a:	60da      	str	r2, [r3, #12]
	}
	if (OVRMOD) {
 800516c:	2320      	movs	r3, #32
 800516e:	18fb      	adds	r3, r7, r3
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d006      	beq.n	8005184 <adc_config+0xa4>
		ADC1->CFGR1 |= ADC_CFGR1_OVRMOD;
 8005176:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <adc_config+0xc0>)
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <adc_config+0xc0>)
 800517c:	2180      	movs	r1, #128	; 0x80
 800517e:	0149      	lsls	r1, r1, #5
 8005180:	430a      	orrs	r2, r1
 8005182:	60da      	str	r2, [r3, #12]
	}
	if (SCANDIR) {
 8005184:	1d7b      	adds	r3, r7, #5
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <adc_config+0xb8>
		ADC1->CFGR1 |= ADC_CFGR1_SCANDIR;
 800518c:	4b04      	ldr	r3, [pc, #16]	; (80051a0 <adc_config+0xc0>)
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	4b03      	ldr	r3, [pc, #12]	; (80051a0 <adc_config+0xc0>)
 8005192:	2104      	movs	r1, #4
 8005194:	430a      	orrs	r2, r1
 8005196:	60da      	str	r2, [r3, #12]
	}
}
 8005198:	46c0      	nop			; (mov r8, r8)
 800519a:	46bd      	mov	sp, r7
 800519c:	b002      	add	sp, #8
 800519e:	bdb0      	pop	{r4, r5, r7, pc}
 80051a0:	40012400 	.word	0x40012400

080051a4 <USART_INIT>:

//*******************************| USART FUNCTIONS |*****************************//

void USART_INIT(USART_TypeDef *usart, uint8_t clk_speed, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber,
		uint32_t bd_rate) {
 80051a4:	b5b0      	push	{r4, r5, r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	607a      	str	r2, [r7, #4]
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	250b      	movs	r5, #11
 80051b2:	197b      	adds	r3, r7, r5
 80051b4:	1c0a      	adds	r2, r1, #0
 80051b6:	701a      	strb	r2, [r3, #0]

	USART_CLK_EN(usart);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	0018      	movs	r0, r3
 80051bc:	f000 f870 	bl	80052a0 <USART_CLK_EN>

	USART_PIN_CONFIG(usart, tx_port, rx_port, tx_pinNumber, rx_pinNumber);
 80051c0:	6a3c      	ldr	r4, [r7, #32]
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	0023      	movs	r3, r4
 80051ce:	f000 f8a9 	bl	8005324 <USART_PIN_CONFIG>

	USART_BDR_SEL(usart, clk_speed, bd_rate);
 80051d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d4:	197b      	adds	r3, r7, r5
 80051d6:	7819      	ldrb	r1, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	0018      	movs	r0, r3
 80051dc:	f000 f9b6 	bl	800554c <USART_BDR_SEL>

	usart->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	220d      	movs	r2, #13
 80051e6:	431a      	orrs	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	601a      	str	r2, [r3, #0]

}
 80051ec:	46c0      	nop			; (mov r8, r8)
 80051ee:	46bd      	mov	sp, r7
 80051f0:	b004      	add	sp, #16
 80051f2:	bdb0      	pop	{r4, r5, r7, pc}

080051f4 <USART_IT_EN>:

void USART_IT_EN(USART_TypeDef *usart, uint8_t TX_IT, uint8_t RX_IT,
		uint8_t IDLE_IT) {
 80051f4:	b590      	push	{r4, r7, lr}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	000c      	movs	r4, r1
 80051fe:	0010      	movs	r0, r2
 8005200:	0019      	movs	r1, r3
 8005202:	1cfb      	adds	r3, r7, #3
 8005204:	1c22      	adds	r2, r4, #0
 8005206:	701a      	strb	r2, [r3, #0]
 8005208:	1cbb      	adds	r3, r7, #2
 800520a:	1c02      	adds	r2, r0, #0
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	1c7b      	adds	r3, r7, #1
 8005210:	1c0a      	adds	r2, r1, #0
 8005212:	701a      	strb	r2, [r3, #0]
	if (usart == USART1) {
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a1e      	ldr	r2, [pc, #120]	; (8005290 <USART_IT_EN+0x9c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d103      	bne.n	8005224 <USART_IT_EN+0x30>
		NVIC_EnableIRQ(USART1_IRQn);
 800521c:	201b      	movs	r0, #27
 800521e:	f7ff fa3b 	bl	8004698 <__NVIC_EnableIRQ>
 8005222:	e012      	b.n	800524a <USART_IT_EN+0x56>
	} else if (usart == USART2) {
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a1b      	ldr	r2, [pc, #108]	; (8005294 <USART_IT_EN+0xa0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d103      	bne.n	8005234 <USART_IT_EN+0x40>
		NVIC_EnableIRQ(USART2_IRQn);
 800522c:	201c      	movs	r0, #28
 800522e:	f7ff fa33 	bl	8004698 <__NVIC_EnableIRQ>
 8005232:	e00a      	b.n	800524a <USART_IT_EN+0x56>
	} else if (usart == USART3 || usart == USART4) {
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a18      	ldr	r2, [pc, #96]	; (8005298 <USART_IT_EN+0xa4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d003      	beq.n	8005244 <USART_IT_EN+0x50>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a17      	ldr	r2, [pc, #92]	; (800529c <USART_IT_EN+0xa8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d102      	bne.n	800524a <USART_IT_EN+0x56>
		NVIC_EnableIRQ(USART3_4_IRQn);
 8005244:	201d      	movs	r0, #29
 8005246:	f7ff fa27 	bl	8004698 <__NVIC_EnableIRQ>
	}

	if (TX_IT) {
 800524a:	1cfb      	adds	r3, r7, #3
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <USART_IT_EN+0x6a>
		usart->CR1 |= USART_CR1_TXEIE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2280      	movs	r2, #128	; 0x80
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	601a      	str	r2, [r3, #0]
	}
	if (RX_IT) {
 800525e:	1cbb      	adds	r3, r7, #2
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d005      	beq.n	8005272 <USART_IT_EN+0x7e>
		usart->CR1 |= USART_CR1_RXNEIE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2220      	movs	r2, #32
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	601a      	str	r2, [r3, #0]
	}
	if (IDLE_IT) {
 8005272:	1c7b      	adds	r3, r7, #1
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d005      	beq.n	8005286 <USART_IT_EN+0x92>
		usart->CR1 |= USART_CR1_IDLEIE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2210      	movs	r2, #16
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	601a      	str	r2, [r3, #0]
	}
}
 8005286:	46c0      	nop			; (mov r8, r8)
 8005288:	46bd      	mov	sp, r7
 800528a:	b003      	add	sp, #12
 800528c:	bd90      	pop	{r4, r7, pc}
 800528e:	46c0      	nop			; (mov r8, r8)
 8005290:	40013800 	.word	0x40013800
 8005294:	40004400 	.word	0x40004400
 8005298:	40004800 	.word	0x40004800
 800529c:	40004c00 	.word	0x40004c00

080052a0 <USART_CLK_EN>:
// Initialize UART pins, Baudrate
void USART_CLK_EN(USART_TypeDef *usart) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	if (usart == USART1) {
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a19      	ldr	r2, [pc, #100]	; (8005310 <USART_CLK_EN+0x70>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d107      	bne.n	80052c0 <USART_CLK_EN+0x20>
		USART1_CLK_EN;
 80052b0:	4b18      	ldr	r3, [pc, #96]	; (8005314 <USART_CLK_EN+0x74>)
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	4b17      	ldr	r3, [pc, #92]	; (8005314 <USART_CLK_EN+0x74>)
 80052b6:	2180      	movs	r1, #128	; 0x80
 80052b8:	01c9      	lsls	r1, r1, #7
 80052ba:	430a      	orrs	r2, r1
 80052bc:	61da      	str	r2, [r3, #28]
	} else if (usart == USART3) {
		USART3_CLK_EN;
	} else if (usart == USART4) {
		USART4_CLK_EN;
	}
}
 80052be:	e022      	b.n	8005306 <USART_CLK_EN+0x66>
	} else if (usart == USART2) {
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a15      	ldr	r2, [pc, #84]	; (8005318 <USART_CLK_EN+0x78>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d107      	bne.n	80052d8 <USART_CLK_EN+0x38>
		USART2_CLK_EN;
 80052c8:	4b12      	ldr	r3, [pc, #72]	; (8005314 <USART_CLK_EN+0x74>)
 80052ca:	69da      	ldr	r2, [r3, #28]
 80052cc:	4b11      	ldr	r3, [pc, #68]	; (8005314 <USART_CLK_EN+0x74>)
 80052ce:	2180      	movs	r1, #128	; 0x80
 80052d0:	0289      	lsls	r1, r1, #10
 80052d2:	430a      	orrs	r2, r1
 80052d4:	61da      	str	r2, [r3, #28]
}
 80052d6:	e016      	b.n	8005306 <USART_CLK_EN+0x66>
	} else if (usart == USART3) {
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a10      	ldr	r2, [pc, #64]	; (800531c <USART_CLK_EN+0x7c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d107      	bne.n	80052f0 <USART_CLK_EN+0x50>
		USART3_CLK_EN;
 80052e0:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <USART_CLK_EN+0x74>)
 80052e2:	69da      	ldr	r2, [r3, #28]
 80052e4:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <USART_CLK_EN+0x74>)
 80052e6:	2180      	movs	r1, #128	; 0x80
 80052e8:	02c9      	lsls	r1, r1, #11
 80052ea:	430a      	orrs	r2, r1
 80052ec:	61da      	str	r2, [r3, #28]
}
 80052ee:	e00a      	b.n	8005306 <USART_CLK_EN+0x66>
	} else if (usart == USART4) {
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a0b      	ldr	r2, [pc, #44]	; (8005320 <USART_CLK_EN+0x80>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d106      	bne.n	8005306 <USART_CLK_EN+0x66>
		USART4_CLK_EN;
 80052f8:	4b06      	ldr	r3, [pc, #24]	; (8005314 <USART_CLK_EN+0x74>)
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	4b05      	ldr	r3, [pc, #20]	; (8005314 <USART_CLK_EN+0x74>)
 80052fe:	2180      	movs	r1, #128	; 0x80
 8005300:	0309      	lsls	r1, r1, #12
 8005302:	430a      	orrs	r2, r1
 8005304:	61da      	str	r2, [r3, #28]
}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	46bd      	mov	sp, r7
 800530a:	b002      	add	sp, #8
 800530c:	bd80      	pop	{r7, pc}
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	40013800 	.word	0x40013800
 8005314:	40021000 	.word	0x40021000
 8005318:	40004400 	.word	0x40004400
 800531c:	40004800 	.word	0x40004800
 8005320:	40004c00 	.word	0x40004c00

08005324 <USART_PIN_CONFIG>:

void USART_PIN_CONFIG(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber) {
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	603b      	str	r3, [r7, #0]

	gpio_config(tx_port, tx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8005332:	6839      	ldr	r1, [r7, #0]
 8005334:	68b8      	ldr	r0, [r7, #8]
 8005336:	2300      	movs	r3, #0
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	2300      	movs	r3, #0
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	2302      	movs	r3, #2
 8005340:	2202      	movs	r2, #2
 8005342:	f7ff fa3d 	bl	80047c0 <gpio_config>
	gpio_config(rx_port, rx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8005346:	69b9      	ldr	r1, [r7, #24]
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	2300      	movs	r3, #0
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	2300      	movs	r3, #0
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	2302      	movs	r3, #2
 8005354:	2202      	movs	r2, #2
 8005356:	f7ff fa33 	bl	80047c0 <gpio_config>

	if (usart == USART1) {
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4a75      	ldr	r2, [pc, #468]	; (8005534 <USART_PIN_CONFIG+0x210>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d13a      	bne.n	80053d8 <USART_PIN_CONFIG+0xb4>
		// TX
		if (tx_port == PORTA && tx_pinNumber == 9) {
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	2390      	movs	r3, #144	; 0x90
 8005366:	05db      	lsls	r3, r3, #23
 8005368:	429a      	cmp	r2, r3
 800536a:	d109      	bne.n	8005380 <USART_PIN_CONFIG+0x5c>
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	2b09      	cmp	r3, #9
 8005370:	d106      	bne.n	8005380 <USART_PIN_CONFIG+0x5c>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PA9);
 8005372:	6839      	ldr	r1, [r7, #0]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2201      	movs	r2, #1
 8005378:	0018      	movs	r0, r3
 800537a:	f7ff faea 	bl	8004952 <gpio_altfn>
 800537e:	e00c      	b.n	800539a <USART_PIN_CONFIG+0x76>
		} else if (tx_port == PORTB && tx_pinNumber == 6) {
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4a6d      	ldr	r2, [pc, #436]	; (8005538 <USART_PIN_CONFIG+0x214>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d108      	bne.n	800539a <USART_PIN_CONFIG+0x76>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	2b06      	cmp	r3, #6
 800538c:	d105      	bne.n	800539a <USART_PIN_CONFIG+0x76>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PB6);
 800538e:	6839      	ldr	r1, [r7, #0]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2200      	movs	r2, #0
 8005394:	0018      	movs	r0, r3
 8005396:	f7ff fadc 	bl	8004952 <gpio_altfn>
		}

		// RX
		if (rx_port == PORTA && rx_pinNumber == 10) {
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	2390      	movs	r3, #144	; 0x90
 800539e:	05db      	lsls	r3, r3, #23
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d109      	bne.n	80053b8 <USART_PIN_CONFIG+0x94>
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2b0a      	cmp	r3, #10
 80053a8:	d106      	bne.n	80053b8 <USART_PIN_CONFIG+0x94>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PA10);
 80053aa:	69b9      	ldr	r1, [r7, #24]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	0018      	movs	r0, r3
 80053b2:	f7ff face 	bl	8004952 <gpio_altfn>
 80053b6:	e0b8      	b.n	800552a <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTB && rx_pinNumber == 7) {
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a5f      	ldr	r2, [pc, #380]	; (8005538 <USART_PIN_CONFIG+0x214>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d000      	beq.n	80053c2 <USART_PIN_CONFIG+0x9e>
 80053c0:	e0b3      	b.n	800552a <USART_PIN_CONFIG+0x206>
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2b07      	cmp	r3, #7
 80053c6:	d000      	beq.n	80053ca <USART_PIN_CONFIG+0xa6>
 80053c8:	e0af      	b.n	800552a <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PB7);
 80053ca:	69b9      	ldr	r1, [r7, #24]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	0018      	movs	r0, r3
 80053d2:	f7ff fabe 	bl	8004952 <gpio_altfn>
		}
	} else if (usart == USART4) {
		gpio_altfn(tx_port, tx_pinNumber, USART4_TX_PA0);
		gpio_altfn(rx_port, rx_pinNumber, USART4_RX_PA1);
	}
}
 80053d6:	e0a8      	b.n	800552a <USART_PIN_CONFIG+0x206>
	} else if (usart == USART2) {
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4a58      	ldr	r2, [pc, #352]	; (800553c <USART_PIN_CONFIG+0x218>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d13c      	bne.n	800545a <USART_PIN_CONFIG+0x136>
		if (tx_port == PORTA && tx_pinNumber == 2) {
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	2390      	movs	r3, #144	; 0x90
 80053e4:	05db      	lsls	r3, r3, #23
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d109      	bne.n	80053fe <USART_PIN_CONFIG+0xda>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d106      	bne.n	80053fe <USART_PIN_CONFIG+0xda>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA2);
 80053f0:	6839      	ldr	r1, [r7, #0]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2201      	movs	r2, #1
 80053f6:	0018      	movs	r0, r3
 80053f8:	f7ff faab 	bl	8004952 <gpio_altfn>
 80053fc:	e00d      	b.n	800541a <USART_PIN_CONFIG+0xf6>
		} else if (tx_port == PORTA && tx_pinNumber == 14) {
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	2390      	movs	r3, #144	; 0x90
 8005402:	05db      	lsls	r3, r3, #23
 8005404:	429a      	cmp	r2, r3
 8005406:	d108      	bne.n	800541a <USART_PIN_CONFIG+0xf6>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b0e      	cmp	r3, #14
 800540c:	d105      	bne.n	800541a <USART_PIN_CONFIG+0xf6>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA14);
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2201      	movs	r2, #1
 8005414:	0018      	movs	r0, r3
 8005416:	f7ff fa9c 	bl	8004952 <gpio_altfn>
		if (rx_port == PORTA && rx_pinNumber == 3) {
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	2390      	movs	r3, #144	; 0x90
 800541e:	05db      	lsls	r3, r3, #23
 8005420:	429a      	cmp	r2, r3
 8005422:	d109      	bne.n	8005438 <USART_PIN_CONFIG+0x114>
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b03      	cmp	r3, #3
 8005428:	d106      	bne.n	8005438 <USART_PIN_CONFIG+0x114>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA3);
 800542a:	69b9      	ldr	r1, [r7, #24]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	0018      	movs	r0, r3
 8005432:	f7ff fa8e 	bl	8004952 <gpio_altfn>
 8005436:	e078      	b.n	800552a <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTA && rx_pinNumber == 15) {
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	2390      	movs	r3, #144	; 0x90
 800543c:	05db      	lsls	r3, r3, #23
 800543e:	429a      	cmp	r2, r3
 8005440:	d000      	beq.n	8005444 <USART_PIN_CONFIG+0x120>
 8005442:	e072      	b.n	800552a <USART_PIN_CONFIG+0x206>
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2b0f      	cmp	r3, #15
 8005448:	d000      	beq.n	800544c <USART_PIN_CONFIG+0x128>
 800544a:	e06e      	b.n	800552a <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA15);
 800544c:	69b9      	ldr	r1, [r7, #24]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	0018      	movs	r0, r3
 8005454:	f7ff fa7d 	bl	8004952 <gpio_altfn>
}
 8005458:	e067      	b.n	800552a <USART_PIN_CONFIG+0x206>
	} else if (usart == USART3) {
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4a38      	ldr	r2, [pc, #224]	; (8005540 <USART_PIN_CONFIG+0x21c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d152      	bne.n	8005508 <USART_PIN_CONFIG+0x1e4>
		if (tx_port == PORTC && tx_pinNumber == 4) {
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	4a37      	ldr	r2, [pc, #220]	; (8005544 <USART_PIN_CONFIG+0x220>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d109      	bne.n	800547e <USART_PIN_CONFIG+0x15a>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b04      	cmp	r3, #4
 800546e:	d106      	bne.n	800547e <USART_PIN_CONFIG+0x15a>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PC4);
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2201      	movs	r2, #1
 8005476:	0018      	movs	r0, r3
 8005478:	f7ff fa6b 	bl	8004952 <gpio_altfn>
 800547c:	e01a      	b.n	80054b4 <USART_PIN_CONFIG+0x190>
		} else if (tx_port == PORTB && tx_pinNumber == 10) {
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	4a2d      	ldr	r2, [pc, #180]	; (8005538 <USART_PIN_CONFIG+0x214>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d109      	bne.n	800549a <USART_PIN_CONFIG+0x176>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b0a      	cmp	r3, #10
 800548a:	d106      	bne.n	800549a <USART_PIN_CONFIG+0x176>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PB10);
 800548c:	6839      	ldr	r1, [r7, #0]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2204      	movs	r2, #4
 8005492:	0018      	movs	r0, r3
 8005494:	f7ff fa5d 	bl	8004952 <gpio_altfn>
 8005498:	e00c      	b.n	80054b4 <USART_PIN_CONFIG+0x190>
		} else if (tx_port == PORTC && tx_pinNumber == 10) {
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	4a29      	ldr	r2, [pc, #164]	; (8005544 <USART_PIN_CONFIG+0x220>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d108      	bne.n	80054b4 <USART_PIN_CONFIG+0x190>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b0a      	cmp	r3, #10
 80054a6:	d105      	bne.n	80054b4 <USART_PIN_CONFIG+0x190>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PC10);
 80054a8:	6839      	ldr	r1, [r7, #0]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2201      	movs	r2, #1
 80054ae:	0018      	movs	r0, r3
 80054b0:	f7ff fa4f 	bl	8004952 <gpio_altfn>
		if (rx_port == PORTC && rx_pinNumber == 5) {
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a23      	ldr	r2, [pc, #140]	; (8005544 <USART_PIN_CONFIG+0x220>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d109      	bne.n	80054d0 <USART_PIN_CONFIG+0x1ac>
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b05      	cmp	r3, #5
 80054c0:	d106      	bne.n	80054d0 <USART_PIN_CONFIG+0x1ac>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC5);
 80054c2:	69b9      	ldr	r1, [r7, #24]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	0018      	movs	r0, r3
 80054ca:	f7ff fa42 	bl	8004952 <gpio_altfn>
 80054ce:	e02c      	b.n	800552a <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTC && rx_pinNumber == 11) {
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a1c      	ldr	r2, [pc, #112]	; (8005544 <USART_PIN_CONFIG+0x220>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d109      	bne.n	80054ec <USART_PIN_CONFIG+0x1c8>
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	2b0b      	cmp	r3, #11
 80054dc:	d106      	bne.n	80054ec <USART_PIN_CONFIG+0x1c8>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC11);
 80054de:	69b9      	ldr	r1, [r7, #24]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	0018      	movs	r0, r3
 80054e6:	f7ff fa34 	bl	8004952 <gpio_altfn>
 80054ea:	e01e      	b.n	800552a <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTB && rx_pinNumber == 11) {
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a12      	ldr	r2, [pc, #72]	; (8005538 <USART_PIN_CONFIG+0x214>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d11a      	bne.n	800552a <USART_PIN_CONFIG+0x206>
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	2b0b      	cmp	r3, #11
 80054f8:	d117      	bne.n	800552a <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PB11);
 80054fa:	69b9      	ldr	r1, [r7, #24]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2204      	movs	r2, #4
 8005500:	0018      	movs	r0, r3
 8005502:	f7ff fa26 	bl	8004952 <gpio_altfn>
}
 8005506:	e010      	b.n	800552a <USART_PIN_CONFIG+0x206>
	} else if (usart == USART4) {
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4a0f      	ldr	r2, [pc, #60]	; (8005548 <USART_PIN_CONFIG+0x224>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d10c      	bne.n	800552a <USART_PIN_CONFIG+0x206>
		gpio_altfn(tx_port, tx_pinNumber, USART4_TX_PA0);
 8005510:	6839      	ldr	r1, [r7, #0]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2204      	movs	r2, #4
 8005516:	0018      	movs	r0, r3
 8005518:	f7ff fa1b 	bl	8004952 <gpio_altfn>
		gpio_altfn(rx_port, rx_pinNumber, USART4_RX_PA1);
 800551c:	69b9      	ldr	r1, [r7, #24]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2204      	movs	r2, #4
 8005522:	0018      	movs	r0, r3
 8005524:	f7ff fa15 	bl	8004952 <gpio_altfn>
}
 8005528:	e7ff      	b.n	800552a <USART_PIN_CONFIG+0x206>
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	46bd      	mov	sp, r7
 800552e:	b004      	add	sp, #16
 8005530:	bd80      	pop	{r7, pc}
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	40013800 	.word	0x40013800
 8005538:	48000400 	.word	0x48000400
 800553c:	40004400 	.word	0x40004400
 8005540:	40004800 	.word	0x40004800
 8005544:	48000800 	.word	0x48000800
 8005548:	40004c00 	.word	0x40004c00

0800554c <USART_BDR_SEL>:

void USART_BDR_SEL(USART_TypeDef *usart, uint8_t clk_speed, uint32_t bd_rate) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	607a      	str	r2, [r7, #4]
 8005556:	200b      	movs	r0, #11
 8005558:	183b      	adds	r3, r7, r0
 800555a:	1c0a      	adds	r2, r1, #0
 800555c:	701a      	strb	r2, [r3, #0]

//==============================================================//
// clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388   //
//==============================================================//

	if (clk_speed == 8) {
 800555e:	183b      	adds	r3, r7, r0
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b08      	cmp	r3, #8
 8005564:	d108      	bne.n	8005578 <USART_BDR_SEL+0x2c>
		if (bd_rate == 9600) {
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	2396      	movs	r3, #150	; 0x96
 800556a:	019b      	lsls	r3, r3, #6
 800556c:	429a      	cmp	r2, r3
 800556e:	d150      	bne.n	8005612 <USART_BDR_SEL+0xc6>
			usart->BRR = 0x341;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4a2a      	ldr	r2, [pc, #168]	; (800561c <USART_BDR_SEL+0xd0>)
 8005574:	60da      	str	r2, [r3, #12]
			USART_BDR_48_230400;
		} else if (bd_rate == 460800) {
			USART_BDR_48_460800;
		}
	}
}
 8005576:	e04c      	b.n	8005612 <USART_BDR_SEL+0xc6>
	} else if (clk_speed == 48) {
 8005578:	230b      	movs	r3, #11
 800557a:	18fb      	adds	r3, r7, r3
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b30      	cmp	r3, #48	; 0x30
 8005580:	d147      	bne.n	8005612 <USART_BDR_SEL+0xc6>
		if (bd_rate == 4800) {
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	2396      	movs	r3, #150	; 0x96
 8005586:	015b      	lsls	r3, r3, #5
 8005588:	429a      	cmp	r2, r3
 800558a:	d103      	bne.n	8005594 <USART_BDR_SEL+0x48>
			USART_BDR_48_4800;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4a24      	ldr	r2, [pc, #144]	; (8005620 <USART_BDR_SEL+0xd4>)
 8005590:	60da      	str	r2, [r3, #12]
}
 8005592:	e03e      	b.n	8005612 <USART_BDR_SEL+0xc6>
		} else if (bd_rate == 9600) {
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	2396      	movs	r3, #150	; 0x96
 8005598:	019b      	lsls	r3, r3, #6
 800559a:	429a      	cmp	r2, r3
 800559c:	d103      	bne.n	80055a6 <USART_BDR_SEL+0x5a>
			USART_BDR_48_9600;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4a20      	ldr	r2, [pc, #128]	; (8005624 <USART_BDR_SEL+0xd8>)
 80055a2:	60da      	str	r2, [r3, #12]
}
 80055a4:	e035      	b.n	8005612 <USART_BDR_SEL+0xc6>
		} else if (bd_rate == 19200) {
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	2396      	movs	r3, #150	; 0x96
 80055aa:	01db      	lsls	r3, r3, #7
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d103      	bne.n	80055b8 <USART_BDR_SEL+0x6c>
			USART_BDR_48_19200;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4a1d      	ldr	r2, [pc, #116]	; (8005628 <USART_BDR_SEL+0xdc>)
 80055b4:	60da      	str	r2, [r3, #12]
}
 80055b6:	e02c      	b.n	8005612 <USART_BDR_SEL+0xc6>
		} else if (bd_rate == 38400) {
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	2396      	movs	r3, #150	; 0x96
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	429a      	cmp	r2, r3
 80055c0:	d103      	bne.n	80055ca <USART_BDR_SEL+0x7e>
			USART_BDR_48_38400;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4a19      	ldr	r2, [pc, #100]	; (800562c <USART_BDR_SEL+0xe0>)
 80055c6:	60da      	str	r2, [r3, #12]
}
 80055c8:	e023      	b.n	8005612 <USART_BDR_SEL+0xc6>
		} else if (bd_rate == 57600) {
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	23e1      	movs	r3, #225	; 0xe1
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d103      	bne.n	80055dc <USART_BDR_SEL+0x90>
			USART_BDR_48_57600;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4a11      	ldr	r2, [pc, #68]	; (800561c <USART_BDR_SEL+0xd0>)
 80055d8:	60da      	str	r2, [r3, #12]
}
 80055da:	e01a      	b.n	8005612 <USART_BDR_SEL+0xc6>
		} else if (bd_rate == 115200) {
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	23e1      	movs	r3, #225	; 0xe1
 80055e0:	025b      	lsls	r3, r3, #9
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d104      	bne.n	80055f0 <USART_BDR_SEL+0xa4>
			USART_BDR_48_115200;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	22a2      	movs	r2, #162	; 0xa2
 80055ea:	32ff      	adds	r2, #255	; 0xff
 80055ec:	60da      	str	r2, [r3, #12]
}
 80055ee:	e010      	b.n	8005612 <USART_BDR_SEL+0xc6>
		} else if (bd_rate == 230400) {
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	23e1      	movs	r3, #225	; 0xe1
 80055f4:	029b      	lsls	r3, r3, #10
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d103      	bne.n	8005602 <USART_BDR_SEL+0xb6>
			USART_BDR_48_230400;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	22d0      	movs	r2, #208	; 0xd0
 80055fe:	60da      	str	r2, [r3, #12]
}
 8005600:	e007      	b.n	8005612 <USART_BDR_SEL+0xc6>
		} else if (bd_rate == 460800) {
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	23e1      	movs	r3, #225	; 0xe1
 8005606:	02db      	lsls	r3, r3, #11
 8005608:	429a      	cmp	r2, r3
 800560a:	d102      	bne.n	8005612 <USART_BDR_SEL+0xc6>
			USART_BDR_48_460800;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2234      	movs	r2, #52	; 0x34
 8005610:	60da      	str	r2, [r3, #12]
}
 8005612:	46c0      	nop			; (mov r8, r8)
 8005614:	46bd      	mov	sp, r7
 8005616:	b004      	add	sp, #16
 8005618:	bd80      	pop	{r7, pc}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	00000341 	.word	0x00000341
 8005620:	00000271 	.word	0x00000271
 8005624:	00001388 	.word	0x00001388
 8005628:	000009c4 	.word	0x000009c4
 800562c:	000004e2 	.word	0x000004e2

08005630 <USART_WRITE>:

/* Write a character to USART1 */
void USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len) {
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
	for (uint8_t i = 0; i < len; i++) {
 800563c:	2317      	movs	r3, #23
 800563e:	18fb      	adds	r3, r7, r3
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
 8005644:	e01c      	b.n	8005680 <USART_WRITE+0x50>
		if (len == 1) {
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d104      	bne.n	8005656 <USART_WRITE+0x26>
			usart->TDR = ch;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	851a      	strh	r2, [r3, #40]	; 0x28
 8005654:	e008      	b.n	8005668 <USART_WRITE+0x38>
		} else {
			usart->TDR = ch[i];
 8005656:	2317      	movs	r3, #23
 8005658:	18fb      	adds	r3, r7, r3
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	18d3      	adds	r3, r2, r3
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	851a      	strh	r2, [r3, #40]	; 0x28
		}
		while (!(usart->ISR & USART_ISR_TXE))
 8005668:	46c0      	nop			; (mov r8, r8)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	2280      	movs	r2, #128	; 0x80
 8005670:	4013      	ands	r3, r2
 8005672:	d0fa      	beq.n	800566a <USART_WRITE+0x3a>
	for (uint8_t i = 0; i < len; i++) {
 8005674:	2117      	movs	r1, #23
 8005676:	187b      	adds	r3, r7, r1
 8005678:	781a      	ldrb	r2, [r3, #0]
 800567a:	187b      	adds	r3, r7, r1
 800567c:	3201      	adds	r2, #1
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	2317      	movs	r3, #23
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	429a      	cmp	r2, r3
 800568a:	d8dc      	bhi.n	8005646 <USART_WRITE+0x16>
			;
	}
}
 800568c:	46c0      	nop			; (mov r8, r8)
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	46bd      	mov	sp, r7
 8005692:	b006      	add	sp, #24
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <LCD_DrawButton1>:

#include "graphics.h"
#include "Pictures.h"

void LCD_DrawButton1(char *c, int16_t x, int16_t y, int16_t w, int16_t h,
		int16_t r, uint16_t bgColor, uint16_t textColor, uint8_t bg_draw, uint16_t xPadding, uint16_t yPadding, uint8_t textSize) {
 8005698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800569a:	b087      	sub	sp, #28
 800569c:	af02      	add	r7, sp, #8
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	000c      	movs	r4, r1
 80056a2:	0010      	movs	r0, r2
 80056a4:	0019      	movs	r1, r3
 80056a6:	250a      	movs	r5, #10
 80056a8:	197b      	adds	r3, r7, r5
 80056aa:	1c22      	adds	r2, r4, #0
 80056ac:	801a      	strh	r2, [r3, #0]
 80056ae:	2408      	movs	r4, #8
 80056b0:	193b      	adds	r3, r7, r4
 80056b2:	1c02      	adds	r2, r0, #0
 80056b4:	801a      	strh	r2, [r3, #0]
 80056b6:	1dbb      	adds	r3, r7, #6
 80056b8:	1c0a      	adds	r2, r1, #0
 80056ba:	801a      	strh	r2, [r3, #0]

	if (bg_draw == 1)
 80056bc:	2330      	movs	r3, #48	; 0x30
 80056be:	2208      	movs	r2, #8
 80056c0:	189b      	adds	r3, r3, r2
 80056c2:	19db      	adds	r3, r3, r7
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d120      	bne.n	800570c <LCD_DrawButton1+0x74>
		LCD_FillRoundRect(x + 5, y + 5, w, h, r, textColor);
 80056ca:	197b      	adds	r3, r7, r5
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	3305      	adds	r3, #5
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	b218      	sxth	r0, r3
 80056d4:	193b      	adds	r3, r7, r4
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	3305      	adds	r3, #5
 80056da:	b29b      	uxth	r3, r3
 80056dc:	b219      	sxth	r1, r3
 80056de:	2320      	movs	r3, #32
 80056e0:	0015      	movs	r5, r2
 80056e2:	189b      	adds	r3, r3, r2
 80056e4:	19db      	adds	r3, r3, r7
 80056e6:	2400      	movs	r4, #0
 80056e8:	5f1c      	ldrsh	r4, [r3, r4]
 80056ea:	1dbb      	adds	r3, r7, #6
 80056ec:	2200      	movs	r2, #0
 80056ee:	5e9a      	ldrsh	r2, [r3, r2]
 80056f0:	232c      	movs	r3, #44	; 0x2c
 80056f2:	195b      	adds	r3, r3, r5
 80056f4:	19db      	adds	r3, r3, r7
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	9301      	str	r3, [sp, #4]
 80056fa:	2324      	movs	r3, #36	; 0x24
 80056fc:	195b      	adds	r3, r3, r5
 80056fe:	19db      	adds	r3, r3, r7
 8005700:	2500      	movs	r5, #0
 8005702:	5f5b      	ldrsh	r3, [r3, r5]
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	0023      	movs	r3, r4
 8005708:	f001 fae8 	bl	8006cdc <LCD_FillRoundRect>

	LCD_FillRoundRect(x, y, w, h, r, bgColor);
 800570c:	2320      	movs	r3, #32
 800570e:	2208      	movs	r2, #8
 8005710:	189b      	adds	r3, r3, r2
 8005712:	19db      	adds	r3, r3, r7
 8005714:	2200      	movs	r2, #0
 8005716:	5e9c      	ldrsh	r4, [r3, r2]
 8005718:	1dbb      	adds	r3, r7, #6
 800571a:	2100      	movs	r1, #0
 800571c:	5e5b      	ldrsh	r3, [r3, r1]
 800571e:	469c      	mov	ip, r3
 8005720:	2508      	movs	r5, #8
 8005722:	197b      	adds	r3, r7, r5
 8005724:	2000      	movs	r0, #0
 8005726:	5e19      	ldrsh	r1, [r3, r0]
 8005728:	260a      	movs	r6, #10
 800572a:	19bb      	adds	r3, r7, r6
 800572c:	2000      	movs	r0, #0
 800572e:	5e18      	ldrsh	r0, [r3, r0]
 8005730:	2328      	movs	r3, #40	; 0x28
 8005732:	2208      	movs	r2, #8
 8005734:	189b      	adds	r3, r3, r2
 8005736:	19db      	adds	r3, r3, r7
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	9301      	str	r3, [sp, #4]
 800573c:	2324      	movs	r3, #36	; 0x24
 800573e:	189b      	adds	r3, r3, r2
 8005740:	19db      	adds	r3, r3, r7
 8005742:	2200      	movs	r2, #0
 8005744:	5e9b      	ldrsh	r3, [r3, r2]
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	0023      	movs	r3, r4
 800574a:	4662      	mov	r2, ip
 800574c:	f001 fac6 	bl	8006cdc <LCD_FillRoundRect>
	LCD_DrawRoundRect(x, y, w, h, r, WHITE);
 8005750:	2320      	movs	r3, #32
 8005752:	2208      	movs	r2, #8
 8005754:	189b      	adds	r3, r3, r2
 8005756:	19db      	adds	r3, r3, r7
 8005758:	2200      	movs	r2, #0
 800575a:	5e9c      	ldrsh	r4, [r3, r2]
 800575c:	1dbb      	adds	r3, r7, #6
 800575e:	2100      	movs	r1, #0
 8005760:	5e5b      	ldrsh	r3, [r3, r1]
 8005762:	469c      	mov	ip, r3
 8005764:	197b      	adds	r3, r7, r5
 8005766:	2000      	movs	r0, #0
 8005768:	5e19      	ldrsh	r1, [r3, r0]
 800576a:	19bb      	adds	r3, r7, r6
 800576c:	2000      	movs	r0, #0
 800576e:	5e18      	ldrsh	r0, [r3, r0]
 8005770:	4b1e      	ldr	r3, [pc, #120]	; (80057ec <LCD_DrawButton1+0x154>)
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	2324      	movs	r3, #36	; 0x24
 8005776:	2208      	movs	r2, #8
 8005778:	189b      	adds	r3, r3, r2
 800577a:	19db      	adds	r3, r3, r7
 800577c:	2200      	movs	r2, #0
 800577e:	5e9b      	ldrsh	r3, [r3, r2]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	0023      	movs	r3, r4
 8005784:	4662      	mov	r2, ip
 8005786:	f000 fcb0 	bl	80060ea <LCD_DrawRoundRect>
	LCD_SetCursor(x + xPadding, y + yPadding);
 800578a:	19bb      	adds	r3, r7, r6
 800578c:	2100      	movs	r1, #0
 800578e:	5e5a      	ldrsh	r2, [r3, r1]
 8005790:	2134      	movs	r1, #52	; 0x34
 8005792:	2408      	movs	r4, #8
 8005794:	190b      	adds	r3, r1, r4
 8005796:	19db      	adds	r3, r3, r7
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	18d3      	adds	r3, r2, r3
 800579c:	0018      	movs	r0, r3
 800579e:	197b      	adds	r3, r7, r5
 80057a0:	2100      	movs	r1, #0
 80057a2:	5e5a      	ldrsh	r2, [r3, r1]
 80057a4:	2138      	movs	r1, #56	; 0x38
 80057a6:	190b      	adds	r3, r1, r4
 80057a8:	19db      	adds	r3, r3, r7
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	18d3      	adds	r3, r2, r3
 80057ae:	0019      	movs	r1, r3
 80057b0:	f001 fe20 	bl	80073f4 <LCD_SetCursor>
	LCD_SetTextSize(textSize);
 80057b4:	223c      	movs	r2, #60	; 0x3c
 80057b6:	1913      	adds	r3, r2, r4
 80057b8:	19db      	adds	r3, r3, r7
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	0018      	movs	r0, r3
 80057be:	f001 fe2f 	bl	8007420 <LCD_SetTextSize>
	LCD_SetTextColor(textColor, bgColor);
 80057c2:	2328      	movs	r3, #40	; 0x28
 80057c4:	191b      	adds	r3, r3, r4
 80057c6:	19db      	adds	r3, r3, r7
 80057c8:	881a      	ldrh	r2, [r3, #0]
 80057ca:	232c      	movs	r3, #44	; 0x2c
 80057cc:	191b      	adds	r3, r3, r4
 80057ce:	19db      	adds	r3, r3, r7
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	0011      	movs	r1, r2
 80057d4:	0018      	movs	r0, r3
 80057d6:	f001 fe39 	bl	800744c <LCD_SetTextColor>
	LCD_Printf(c);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	0018      	movs	r0, r3
 80057de:	f001 fd0d 	bl	80071fc <LCD_Printf>

}
 80057e2:	46c0      	nop			; (mov r8, r8)
 80057e4:	46bd      	mov	sp, r7
 80057e6:	b005      	add	sp, #20
 80057e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	0000ffff 	.word	0x0000ffff

080057f0 <LCD_DrawHBorder>:

void LCD_DrawHBorder(int16_t x, int16_t y, int16_t w, uint16_t color, int16_t BorderSize){
 80057f0:	b5b0      	push	{r4, r5, r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	0005      	movs	r5, r0
 80057f8:	000c      	movs	r4, r1
 80057fa:	0010      	movs	r0, r2
 80057fc:	0019      	movs	r1, r3
 80057fe:	1dbb      	adds	r3, r7, #6
 8005800:	1c2a      	adds	r2, r5, #0
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	1d3b      	adds	r3, r7, #4
 8005806:	1c22      	adds	r2, r4, #0
 8005808:	801a      	strh	r2, [r3, #0]
 800580a:	1cbb      	adds	r3, r7, #2
 800580c:	1c02      	adds	r2, r0, #0
 800580e:	801a      	strh	r2, [r3, #0]
 8005810:	003b      	movs	r3, r7
 8005812:	1c0a      	adds	r2, r1, #0
 8005814:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < BorderSize; i++){
 8005816:	230f      	movs	r3, #15
 8005818:	18fb      	adds	r3, r7, r3
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	e018      	b.n	8005852 <LCD_DrawHBorder+0x62>
		LCD_DrawFastHLine(x, y + i, w, color);
 8005820:	250f      	movs	r5, #15
 8005822:	197b      	adds	r3, r7, r5
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	b29a      	uxth	r2, r3
 8005828:	1d3b      	adds	r3, r7, #4
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	18d3      	adds	r3, r2, r3
 800582e:	b29b      	uxth	r3, r3
 8005830:	b219      	sxth	r1, r3
 8005832:	003b      	movs	r3, r7
 8005834:	881c      	ldrh	r4, [r3, #0]
 8005836:	1cbb      	adds	r3, r7, #2
 8005838:	2200      	movs	r2, #0
 800583a:	5e9a      	ldrsh	r2, [r3, r2]
 800583c:	1dbb      	adds	r3, r7, #6
 800583e:	2000      	movs	r0, #0
 8005840:	5e18      	ldrsh	r0, [r3, r0]
 8005842:	0023      	movs	r3, r4
 8005844:	f000 fb2e 	bl	8005ea4 <LCD_DrawFastHLine>
	for(uint8_t i = 0; i < BorderSize; i++){
 8005848:	197b      	adds	r3, r7, r5
 800584a:	781a      	ldrb	r2, [r3, #0]
 800584c:	197b      	adds	r3, r7, r5
 800584e:	3201      	adds	r2, #1
 8005850:	701a      	strb	r2, [r3, #0]
 8005852:	230f      	movs	r3, #15
 8005854:	18fb      	adds	r3, r7, r3
 8005856:	781a      	ldrb	r2, [r3, #0]
 8005858:	2320      	movs	r3, #32
 800585a:	18fb      	adds	r3, r7, r3
 800585c:	2100      	movs	r1, #0
 800585e:	5e5b      	ldrsh	r3, [r3, r1]
 8005860:	429a      	cmp	r2, r3
 8005862:	dbdd      	blt.n	8005820 <LCD_DrawHBorder+0x30>
	}

}
 8005864:	46c0      	nop			; (mov r8, r8)
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	46bd      	mov	sp, r7
 800586a:	b004      	add	sp, #16
 800586c:	bdb0      	pop	{r4, r5, r7, pc}

0800586e <LCD_DrawVBorder>:

void LCD_DrawVBorder(int16_t x, int16_t y, int16_t h, uint16_t color, int16_t BorderSize){
 800586e:	b5b0      	push	{r4, r5, r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	0005      	movs	r5, r0
 8005876:	000c      	movs	r4, r1
 8005878:	0010      	movs	r0, r2
 800587a:	0019      	movs	r1, r3
 800587c:	1dbb      	adds	r3, r7, #6
 800587e:	1c2a      	adds	r2, r5, #0
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	1d3b      	adds	r3, r7, #4
 8005884:	1c22      	adds	r2, r4, #0
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	1cbb      	adds	r3, r7, #2
 800588a:	1c02      	adds	r2, r0, #0
 800588c:	801a      	strh	r2, [r3, #0]
 800588e:	003b      	movs	r3, r7
 8005890:	1c0a      	adds	r2, r1, #0
 8005892:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < BorderSize; i++){
 8005894:	230f      	movs	r3, #15
 8005896:	18fb      	adds	r3, r7, r3
 8005898:	2200      	movs	r2, #0
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	e018      	b.n	80058d0 <LCD_DrawVBorder+0x62>
		LCD_DrawFastVLine(x + i, y, h, color);
 800589e:	250f      	movs	r5, #15
 80058a0:	197b      	adds	r3, r7, r5
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	1dbb      	adds	r3, r7, #6
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	18d3      	adds	r3, r2, r3
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	b218      	sxth	r0, r3
 80058b0:	003b      	movs	r3, r7
 80058b2:	881c      	ldrh	r4, [r3, #0]
 80058b4:	1cbb      	adds	r3, r7, #2
 80058b6:	2200      	movs	r2, #0
 80058b8:	5e9a      	ldrsh	r2, [r3, r2]
 80058ba:	1d3b      	adds	r3, r7, #4
 80058bc:	2100      	movs	r1, #0
 80058be:	5e59      	ldrsh	r1, [r3, r1]
 80058c0:	0023      	movs	r3, r4
 80058c2:	f000 fb87 	bl	8005fd4 <LCD_DrawFastVLine>
	for(uint8_t i = 0; i < BorderSize; i++){
 80058c6:	197b      	adds	r3, r7, r5
 80058c8:	781a      	ldrb	r2, [r3, #0]
 80058ca:	197b      	adds	r3, r7, r5
 80058cc:	3201      	adds	r2, #1
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	230f      	movs	r3, #15
 80058d2:	18fb      	adds	r3, r7, r3
 80058d4:	781a      	ldrb	r2, [r3, #0]
 80058d6:	2320      	movs	r3, #32
 80058d8:	18fb      	adds	r3, r7, r3
 80058da:	2100      	movs	r1, #0
 80058dc:	5e5b      	ldrsh	r3, [r3, r1]
 80058de:	429a      	cmp	r2, r3
 80058e0:	dbdd      	blt.n	800589e <LCD_DrawVBorder+0x30>
	}

}
 80058e2:	46c0      	nop			; (mov r8, r8)
 80058e4:	46c0      	nop			; (mov r8, r8)
 80058e6:	46bd      	mov	sp, r7
 80058e8:	b004      	add	sp, #16
 80058ea:	bdb0      	pop	{r4, r5, r7, pc}

080058ec <delay>:
		//-----FRAME RATE SETTING-------//
		0x0060, 0xA700, 0x0061, 0x0001, 0x0090, 0x0033, //RTNI setting
		//-------DISPLAY ON------//
		0x0007, 0x0133, };

void delay(unsigned int t) {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
	for (; t > 0; t--) {
 80058f4:	e003      	b.n	80058fe <delay+0x12>
		__asm("nop");
 80058f6:	46c0      	nop			; (mov r8, r8)
	for (; t > 0; t--) {
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	607b      	str	r3, [r7, #4]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1f8      	bne.n	80058f6 <delay+0xa>
	}
}
 8005904:	46c0      	nop			; (mov r8, r8)
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	46bd      	mov	sp, r7
 800590a:	b002      	add	sp, #8
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <GPIO_Init>:
 * 
 * \param 
 * 
 * \return void
 */
static void GPIO_Init(void) {
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	; 0x28
 8005914:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOC_CLK_ENABLE()
 8005916:	4b5b      	ldr	r3, [pc, #364]	; (8005a84 <GPIO_Init+0x174>)
 8005918:	695a      	ldr	r2, [r3, #20]
 800591a:	4b5a      	ldr	r3, [pc, #360]	; (8005a84 <GPIO_Init+0x174>)
 800591c:	2180      	movs	r1, #128	; 0x80
 800591e:	0309      	lsls	r1, r1, #12
 8005920:	430a      	orrs	r2, r1
 8005922:	615a      	str	r2, [r3, #20]
 8005924:	4b57      	ldr	r3, [pc, #348]	; (8005a84 <GPIO_Init+0x174>)
 8005926:	695a      	ldr	r2, [r3, #20]
 8005928:	2380      	movs	r3, #128	; 0x80
 800592a:	031b      	lsls	r3, r3, #12
 800592c:	4013      	ands	r3, r2
 800592e:	60bb      	str	r3, [r7, #8]
 8005930:	68bb      	ldr	r3, [r7, #8]
	;
	__GPIOA_CLK_ENABLE()
 8005932:	4b54      	ldr	r3, [pc, #336]	; (8005a84 <GPIO_Init+0x174>)
 8005934:	695a      	ldr	r2, [r3, #20]
 8005936:	4b53      	ldr	r3, [pc, #332]	; (8005a84 <GPIO_Init+0x174>)
 8005938:	2180      	movs	r1, #128	; 0x80
 800593a:	0289      	lsls	r1, r1, #10
 800593c:	430a      	orrs	r2, r1
 800593e:	615a      	str	r2, [r3, #20]
 8005940:	4b50      	ldr	r3, [pc, #320]	; (8005a84 <GPIO_Init+0x174>)
 8005942:	695a      	ldr	r2, [r3, #20]
 8005944:	2380      	movs	r3, #128	; 0x80
 8005946:	029b      	lsls	r3, r3, #10
 8005948:	4013      	ands	r3, r2
 800594a:	607b      	str	r3, [r7, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
	;
	__GPIOB_CLK_ENABLE()
 800594e:	4b4d      	ldr	r3, [pc, #308]	; (8005a84 <GPIO_Init+0x174>)
 8005950:	695a      	ldr	r2, [r3, #20]
 8005952:	4b4c      	ldr	r3, [pc, #304]	; (8005a84 <GPIO_Init+0x174>)
 8005954:	2180      	movs	r1, #128	; 0x80
 8005956:	02c9      	lsls	r1, r1, #11
 8005958:	430a      	orrs	r2, r1
 800595a:	615a      	str	r2, [r3, #20]
 800595c:	4b49      	ldr	r3, [pc, #292]	; (8005a84 <GPIO_Init+0x174>)
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	2380      	movs	r3, #128	; 0x80
 8005962:	02db      	lsls	r3, r3, #11
 8005964:	4013      	ands	r3, r2
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	683b      	ldr	r3, [r7, #0]
	;

	/*Configure GPIO pins : PC1 PC7 */
	gpio_config(PORTC, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800596a:	4847      	ldr	r0, [pc, #284]	; (8005a88 <GPIO_Init+0x178>)
 800596c:	2300      	movs	r3, #0
 800596e:	9301      	str	r3, [sp, #4]
 8005970:	2300      	movs	r3, #0
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	2302      	movs	r3, #2
 8005976:	2201      	movs	r2, #1
 8005978:	2101      	movs	r1, #1
 800597a:	f7fe ff21 	bl	80047c0 <gpio_config>
	gpio_config(PORTC, 7, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800597e:	4842      	ldr	r0, [pc, #264]	; (8005a88 <GPIO_Init+0x178>)
 8005980:	2300      	movs	r3, #0
 8005982:	9301      	str	r3, [sp, #4]
 8005984:	2300      	movs	r3, #0
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	2302      	movs	r3, #2
 800598a:	2201      	movs	r2, #1
 800598c:	2107      	movs	r1, #7
 800598e:	f7fe ff17 	bl	80047c0 <gpio_config>

	/*Configure GPIO pins : PA0 PA1 PA4 PA8 PA9 PA10 */
	gpio_config(PORTA, 0, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8005992:	2390      	movs	r3, #144	; 0x90
 8005994:	05d8      	lsls	r0, r3, #23
 8005996:	2300      	movs	r3, #0
 8005998:	9301      	str	r3, [sp, #4]
 800599a:	2300      	movs	r3, #0
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	2302      	movs	r3, #2
 80059a0:	2201      	movs	r2, #1
 80059a2:	2100      	movs	r1, #0
 80059a4:	f7fe ff0c 	bl	80047c0 <gpio_config>
	gpio_config(PORTA, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 80059a8:	2390      	movs	r3, #144	; 0x90
 80059aa:	05d8      	lsls	r0, r3, #23
 80059ac:	2300      	movs	r3, #0
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	2300      	movs	r3, #0
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	2302      	movs	r3, #2
 80059b6:	2201      	movs	r2, #1
 80059b8:	2101      	movs	r1, #1
 80059ba:	f7fe ff01 	bl	80047c0 <gpio_config>
	gpio_config(PORTA, 4, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 80059be:	2390      	movs	r3, #144	; 0x90
 80059c0:	05d8      	lsls	r0, r3, #23
 80059c2:	2300      	movs	r3, #0
 80059c4:	9301      	str	r3, [sp, #4]
 80059c6:	2300      	movs	r3, #0
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	2302      	movs	r3, #2
 80059cc:	2201      	movs	r2, #1
 80059ce:	2104      	movs	r1, #4
 80059d0:	f7fe fef6 	bl	80047c0 <gpio_config>
	gpio_config(PORTA, 8, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 80059d4:	2390      	movs	r3, #144	; 0x90
 80059d6:	05d8      	lsls	r0, r3, #23
 80059d8:	2300      	movs	r3, #0
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	2300      	movs	r3, #0
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	2302      	movs	r3, #2
 80059e2:	2201      	movs	r2, #1
 80059e4:	2108      	movs	r1, #8
 80059e6:	f7fe feeb 	bl	80047c0 <gpio_config>
	gpio_config(PORTA, 9, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 80059ea:	2390      	movs	r3, #144	; 0x90
 80059ec:	05d8      	lsls	r0, r3, #23
 80059ee:	2300      	movs	r3, #0
 80059f0:	9301      	str	r3, [sp, #4]
 80059f2:	2300      	movs	r3, #0
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	2302      	movs	r3, #2
 80059f8:	2201      	movs	r2, #1
 80059fa:	2109      	movs	r1, #9
 80059fc:	f7fe fee0 	bl	80047c0 <gpio_config>
	gpio_config(PORTA, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8005a00:	2390      	movs	r3, #144	; 0x90
 8005a02:	05d8      	lsls	r0, r3, #23
 8005a04:	2300      	movs	r3, #0
 8005a06:	9301      	str	r3, [sp, #4]
 8005a08:	2300      	movs	r3, #0
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	2201      	movs	r2, #1
 8005a10:	210a      	movs	r1, #10
 8005a12:	f7fe fed5 	bl	80047c0 <gpio_config>

	/*Configure GPIO pins : PB0 PB3 PB4 PB5 PB10 */
	gpio_config(PORTB, 0, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8005a16:	481d      	ldr	r0, [pc, #116]	; (8005a8c <GPIO_Init+0x17c>)
 8005a18:	2300      	movs	r3, #0
 8005a1a:	9301      	str	r3, [sp, #4]
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	2302      	movs	r3, #2
 8005a22:	2201      	movs	r2, #1
 8005a24:	2100      	movs	r1, #0
 8005a26:	f7fe fecb 	bl	80047c0 <gpio_config>
	gpio_config(PORTB, 3, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8005a2a:	4818      	ldr	r0, [pc, #96]	; (8005a8c <GPIO_Init+0x17c>)
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	9301      	str	r3, [sp, #4]
 8005a30:	2300      	movs	r3, #0
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	2302      	movs	r3, #2
 8005a36:	2201      	movs	r2, #1
 8005a38:	2103      	movs	r1, #3
 8005a3a:	f7fe fec1 	bl	80047c0 <gpio_config>
	gpio_config(PORTB, 4, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8005a3e:	4813      	ldr	r0, [pc, #76]	; (8005a8c <GPIO_Init+0x17c>)
 8005a40:	2300      	movs	r3, #0
 8005a42:	9301      	str	r3, [sp, #4]
 8005a44:	2300      	movs	r3, #0
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	2302      	movs	r3, #2
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	2104      	movs	r1, #4
 8005a4e:	f7fe feb7 	bl	80047c0 <gpio_config>
	gpio_config(PORTB, 5, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8005a52:	480e      	ldr	r0, [pc, #56]	; (8005a8c <GPIO_Init+0x17c>)
 8005a54:	2300      	movs	r3, #0
 8005a56:	9301      	str	r3, [sp, #4]
 8005a58:	2300      	movs	r3, #0
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	2201      	movs	r2, #1
 8005a60:	2105      	movs	r1, #5
 8005a62:	f7fe fead 	bl	80047c0 <gpio_config>
	gpio_config(PORTB, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8005a66:	4809      	ldr	r0, [pc, #36]	; (8005a8c <GPIO_Init+0x17c>)
 8005a68:	2300      	movs	r3, #0
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	2302      	movs	r3, #2
 8005a72:	2201      	movs	r2, #1
 8005a74:	210a      	movs	r1, #10
 8005a76:	f7fe fea3 	bl	80047c0 <gpio_config>
}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	b008      	add	sp, #32
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	40021000 	.word	0x40021000
 8005a88:	48000800 	.word	0x48000800
 8005a8c:	48000400 	.word	0x48000400

08005a90 <LCD_Begin>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Begin(void) {
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 8005a96:	4b35      	ldr	r3, [pc, #212]	; (8005b6c <LCD_Begin+0xdc>)
 8005a98:	22f0      	movs	r2, #240	; 0xf0
 8005a9a:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8005a9c:	4b34      	ldr	r3, [pc, #208]	; (8005b70 <LCD_Begin+0xe0>)
 8005a9e:	22a0      	movs	r2, #160	; 0xa0
 8005aa0:	0052      	lsls	r2, r2, #1
 8005aa2:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 8005aa4:	4b33      	ldr	r3, [pc, #204]	; (8005b74 <LCD_Begin+0xe4>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 8005aaa:	4b33      	ldr	r3, [pc, #204]	; (8005b78 <LCD_Begin+0xe8>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	801a      	strh	r2, [r3, #0]
 8005ab0:	4b31      	ldr	r3, [pc, #196]	; (8005b78 <LCD_Begin+0xe8>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	5e9a      	ldrsh	r2, [r3, r2]
 8005ab6:	4b31      	ldr	r3, [pc, #196]	; (8005b7c <LCD_Begin+0xec>)
 8005ab8:	801a      	strh	r2, [r3, #0]
	m_textsize = 4;
 8005aba:	4b31      	ldr	r3, [pc, #196]	; (8005b80 <LCD_Begin+0xf0>)
 8005abc:	2204      	movs	r2, #4
 8005abe:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8005ac0:	4b30      	ldr	r3, [pc, #192]	; (8005b84 <LCD_Begin+0xf4>)
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	4252      	negs	r2, r2
 8005ac6:	801a      	strh	r2, [r3, #0]
 8005ac8:	4b2e      	ldr	r3, [pc, #184]	; (8005b84 <LCD_Begin+0xf4>)
 8005aca:	881a      	ldrh	r2, [r3, #0]
 8005acc:	4b2e      	ldr	r3, [pc, #184]	; (8005b88 <LCD_Begin+0xf8>)
 8005ace:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8005ad0:	4b2e      	ldr	r3, [pc, #184]	; (8005b8c <LCD_Begin+0xfc>)
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8005ad6:	1dfb      	adds	r3, r7, #7
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]
	uint16_t a, d;

	GPIO_Init();
 8005adc:	f7ff ff18 	bl	8005910 <GPIO_Init>

	LCD_Reset();
 8005ae0:	f001 fc22 	bl	8007328 <LCD_Reset>

	LCD_CS_LOW();
 8005ae4:	4b2a      	ldr	r3, [pc, #168]	; (8005b90 <LCD_Begin+0x100>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2100      	movs	r1, #0
 8005aea:	0018      	movs	r0, r3
 8005aec:	f7fe ff54 	bl	8004998 <gpio_write>

	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8005af0:	e027      	b.n	8005b42 <LCD_Begin+0xb2>
		a = ST7781_regValues[i++];
 8005af2:	1dfb      	adds	r3, r7, #7
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	1dfa      	adds	r2, r7, #7
 8005af8:	1c59      	adds	r1, r3, #1
 8005afa:	7011      	strb	r1, [r2, #0]
 8005afc:	0019      	movs	r1, r3
 8005afe:	1d3b      	adds	r3, r7, #4
 8005b00:	4a24      	ldr	r2, [pc, #144]	; (8005b94 <LCD_Begin+0x104>)
 8005b02:	0049      	lsls	r1, r1, #1
 8005b04:	5a8a      	ldrh	r2, [r1, r2]
 8005b06:	801a      	strh	r2, [r3, #0]
		d = ST7781_regValues[i++];
 8005b08:	1dfb      	adds	r3, r7, #7
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	1dfa      	adds	r2, r7, #7
 8005b0e:	1c59      	adds	r1, r3, #1
 8005b10:	7011      	strb	r1, [r2, #0]
 8005b12:	0019      	movs	r1, r3
 8005b14:	1cbb      	adds	r3, r7, #2
 8005b16:	4a1f      	ldr	r2, [pc, #124]	; (8005b94 <LCD_Begin+0x104>)
 8005b18:	0049      	lsls	r1, r1, #1
 8005b1a:	5a8a      	ldrh	r2, [r1, r2]
 8005b1c:	801a      	strh	r2, [r3, #0]
		if (a == TFTLCD_DELAY) {
 8005b1e:	1d3b      	adds	r3, r7, #4
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	2bff      	cmp	r3, #255	; 0xff
 8005b24:	d105      	bne.n	8005b32 <LCD_Begin+0xa2>
			delay(d);
 8005b26:	1cbb      	adds	r3, r7, #2
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	f7ff fede 	bl	80058ec <delay>
 8005b30:	e007      	b.n	8005b42 <LCD_Begin+0xb2>
		} else {
			LCD_WriteRegister16(a, d);
 8005b32:	1cbb      	adds	r3, r7, #2
 8005b34:	881a      	ldrh	r2, [r3, #0]
 8005b36:	1d3b      	adds	r3, r7, #4
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	0011      	movs	r1, r2
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f001 fddd 	bl	80076fc <LCD_WriteRegister16>
	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 8005b42:	1dfb      	adds	r3, r7, #7
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b83      	cmp	r3, #131	; 0x83
 8005b48:	d9d3      	bls.n	8005af2 <LCD_Begin+0x62>
		}
	}

	LCD_SetRotation(m_rotation);
 8005b4a:	4b0a      	ldr	r3, [pc, #40]	; (8005b74 <LCD_Begin+0xe4>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	0018      	movs	r0, r3
 8005b50:	f001 fc96 	bl	8007480 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
 8005b54:	2340      	movs	r3, #64	; 0x40
 8005b56:	33ff      	adds	r3, #255	; 0xff
 8005b58:	22ef      	movs	r2, #239	; 0xef
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	f001 fcc3 	bl	80074e8 <LCD_SetAddrWindow>
}
 8005b62:	46c0      	nop			; (mov r8, r8)
 8005b64:	46bd      	mov	sp, r7
 8005b66:	b002      	add	sp, #8
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	20000566 	.word	0x20000566
 8005b70:	20000568 	.word	0x20000568
 8005b74:	20000573 	.word	0x20000573
 8005b78:	2000056a 	.word	0x2000056a
 8005b7c:	2000056c 	.word	0x2000056c
 8005b80:	20000572 	.word	0x20000572
 8005b84:	20000570 	.word	0x20000570
 8005b88:	2000056e 	.word	0x2000056e
 8005b8c:	20000574 	.word	0x20000574
 8005b90:	48000400 	.word	0x48000400
 8005b94:	0800aa54 	.word	0x0800aa54

08005b98 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8005b98:	b590      	push	{r4, r7, lr}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	0004      	movs	r4, r0
 8005ba0:	0008      	movs	r0, r1
 8005ba2:	0011      	movs	r1, r2
 8005ba4:	1dbb      	adds	r3, r7, #6
 8005ba6:	1c22      	adds	r2, r4, #0
 8005ba8:	801a      	strh	r2, [r3, #0]
 8005baa:	1d3b      	adds	r3, r7, #4
 8005bac:	1c02      	adds	r2, r0, #0
 8005bae:	801a      	strh	r2, [r3, #0]
 8005bb0:	1cbb      	adds	r3, r7, #2
 8005bb2:	1c0a      	adds	r2, r1, #0
 8005bb4:	801a      	strh	r2, [r3, #0]
	// Clip
	if ((x < 0) || (y < 0) || (x >= TFTWIDTH) || (y >= TFTHEIGHT))
 8005bb6:	1dbb      	adds	r3, r7, #6
 8005bb8:	2200      	movs	r2, #0
 8005bba:	5e9b      	ldrsh	r3, [r3, r2]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	da00      	bge.n	8005bc2 <LCD_DrawPixel+0x2a>
 8005bc0:	e06d      	b.n	8005c9e <LCD_DrawPixel+0x106>
 8005bc2:	1d3b      	adds	r3, r7, #4
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	5e9b      	ldrsh	r3, [r3, r2]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	da00      	bge.n	8005bce <LCD_DrawPixel+0x36>
 8005bcc:	e067      	b.n	8005c9e <LCD_DrawPixel+0x106>
 8005bce:	1dbb      	adds	r3, r7, #6
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	5e9b      	ldrsh	r3, [r3, r2]
 8005bd4:	2bef      	cmp	r3, #239	; 0xef
 8005bd6:	dc62      	bgt.n	8005c9e <LCD_DrawPixel+0x106>
 8005bd8:	1d3b      	adds	r3, r7, #4
 8005bda:	2200      	movs	r2, #0
 8005bdc:	5e9a      	ldrsh	r2, [r3, r2]
 8005bde:	23a0      	movs	r3, #160	; 0xa0
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	429a      	cmp	r2, r3
 8005be4:	da5b      	bge.n	8005c9e <LCD_DrawPixel+0x106>
		return;

	LCD_CS_LOW();
 8005be6:	4b30      	ldr	r3, [pc, #192]	; (8005ca8 <LCD_DrawPixel+0x110>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	2100      	movs	r1, #0
 8005bec:	0018      	movs	r0, r3
 8005bee:	f7fe fed3 	bl	8004998 <gpio_write>

	int16_t t;
	switch (m_rotation) {
 8005bf2:	4b2e      	ldr	r3, [pc, #184]	; (8005cac <LCD_DrawPixel+0x114>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d026      	beq.n	8005c48 <LCD_DrawPixel+0xb0>
 8005bfa:	dc37      	bgt.n	8005c6c <LCD_DrawPixel+0xd4>
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d002      	beq.n	8005c06 <LCD_DrawPixel+0x6e>
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d011      	beq.n	8005c28 <LCD_DrawPixel+0x90>
 8005c04:	e032      	b.n	8005c6c <LCD_DrawPixel+0xd4>
	case 1:
		t = x;
 8005c06:	210e      	movs	r1, #14
 8005c08:	187b      	adds	r3, r7, r1
 8005c0a:	1dba      	adds	r2, r7, #6
 8005c0c:	8812      	ldrh	r2, [r2, #0]
 8005c0e:	801a      	strh	r2, [r3, #0]
		x = TFTWIDTH - 1 - y;
 8005c10:	1d3b      	adds	r3, r7, #4
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	22ef      	movs	r2, #239	; 0xef
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	1dbb      	adds	r3, r7, #6
 8005c1c:	801a      	strh	r2, [r3, #0]
		y = t;
 8005c1e:	1d3b      	adds	r3, r7, #4
 8005c20:	187a      	adds	r2, r7, r1
 8005c22:	8812      	ldrh	r2, [r2, #0]
 8005c24:	801a      	strh	r2, [r3, #0]
		break;
 8005c26:	e021      	b.n	8005c6c <LCD_DrawPixel+0xd4>
	case 2:
		x = TFTWIDTH - 1 - x;
 8005c28:	1dbb      	adds	r3, r7, #6
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	22ef      	movs	r2, #239	; 0xef
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	1dbb      	adds	r3, r7, #6
 8005c34:	801a      	strh	r2, [r3, #0]
		y = TFTHEIGHT - 1 - y;
 8005c36:	1d3b      	adds	r3, r7, #4
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	2240      	movs	r2, #64	; 0x40
 8005c3c:	32ff      	adds	r2, #255	; 0xff
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	1d3b      	adds	r3, r7, #4
 8005c44:	801a      	strh	r2, [r3, #0]
		break;
 8005c46:	e011      	b.n	8005c6c <LCD_DrawPixel+0xd4>
	case 3:
		t = x;
 8005c48:	210e      	movs	r1, #14
 8005c4a:	187b      	adds	r3, r7, r1
 8005c4c:	1dba      	adds	r2, r7, #6
 8005c4e:	8812      	ldrh	r2, [r2, #0]
 8005c50:	801a      	strh	r2, [r3, #0]
		x = y;
 8005c52:	1dbb      	adds	r3, r7, #6
 8005c54:	1d3a      	adds	r2, r7, #4
 8005c56:	8812      	ldrh	r2, [r2, #0]
 8005c58:	801a      	strh	r2, [r3, #0]
		y = TFTHEIGHT - 1 - t;
 8005c5a:	187b      	adds	r3, r7, r1
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	2240      	movs	r2, #64	; 0x40
 8005c60:	32ff      	adds	r2, #255	; 0xff
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	1d3b      	adds	r3, r7, #4
 8005c68:	801a      	strh	r2, [r3, #0]
		break;
 8005c6a:	46c0      	nop			; (mov r8, r8)
	}

	LCD_WriteRegister16(0x0020, x);
 8005c6c:	1dbb      	adds	r3, r7, #6
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	0019      	movs	r1, r3
 8005c72:	2020      	movs	r0, #32
 8005c74:	f001 fd42 	bl	80076fc <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8005c78:	1d3b      	adds	r3, r7, #4
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	0019      	movs	r1, r3
 8005c7e:	2021      	movs	r0, #33	; 0x21
 8005c80:	f001 fd3c 	bl	80076fc <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0022, color);
 8005c84:	1cbb      	adds	r3, r7, #2
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	0019      	movs	r1, r3
 8005c8a:	2022      	movs	r0, #34	; 0x22
 8005c8c:	f001 fd36 	bl	80076fc <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8005c90:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <LCD_DrawPixel+0x110>)
 8005c92:	2201      	movs	r2, #1
 8005c94:	2100      	movs	r1, #0
 8005c96:	0018      	movs	r0, r3
 8005c98:	f7fe fe7e 	bl	8004998 <gpio_write>
 8005c9c:	e000      	b.n	8005ca0 <LCD_DrawPixel+0x108>
		return;
 8005c9e:	46c0      	nop			; (mov r8, r8)
}
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	b005      	add	sp, #20
 8005ca4:	bd90      	pop	{r4, r7, pc}
 8005ca6:	46c0      	nop			; (mov r8, r8)
 8005ca8:	48000400 	.word	0x48000400
 8005cac:	20000573 	.word	0x20000573

08005cb0 <LCD_DrawLine>:
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2,
		uint16_t color) {
 8005cb0:	b5b0      	push	{r4, r5, r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	0005      	movs	r5, r0
 8005cb8:	000c      	movs	r4, r1
 8005cba:	0010      	movs	r0, r2
 8005cbc:	0019      	movs	r1, r3
 8005cbe:	1dbb      	adds	r3, r7, #6
 8005cc0:	1c2a      	adds	r2, r5, #0
 8005cc2:	801a      	strh	r2, [r3, #0]
 8005cc4:	1d3b      	adds	r3, r7, #4
 8005cc6:	1c22      	adds	r2, r4, #0
 8005cc8:	801a      	strh	r2, [r3, #0]
 8005cca:	1cbb      	adds	r3, r7, #2
 8005ccc:	1c02      	adds	r2, r0, #0
 8005cce:	801a      	strh	r2, [r3, #0]
 8005cd0:	003b      	movs	r3, r7
 8005cd2:	1c0a      	adds	r2, r1, #0
 8005cd4:	801a      	strh	r2, [r3, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8005cd6:	003b      	movs	r3, r7
 8005cd8:	2200      	movs	r2, #0
 8005cda:	5e9a      	ldrsh	r2, [r3, r2]
 8005cdc:	1d3b      	adds	r3, r7, #4
 8005cde:	2100      	movs	r1, #0
 8005ce0:	5e5b      	ldrsh	r3, [r3, r1]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	17d9      	asrs	r1, r3, #31
 8005ce6:	185a      	adds	r2, r3, r1
 8005ce8:	404a      	eors	r2, r1
 8005cea:	1cbb      	adds	r3, r7, #2
 8005cec:	2100      	movs	r1, #0
 8005cee:	5e59      	ldrsh	r1, [r3, r1]
 8005cf0:	1dbb      	adds	r3, r7, #6
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	5e1b      	ldrsh	r3, [r3, r0]
 8005cf6:	1acb      	subs	r3, r1, r3
 8005cf8:	17d9      	asrs	r1, r3, #31
 8005cfa:	185b      	adds	r3, r3, r1
 8005cfc:	404b      	eors	r3, r1
 8005cfe:	2101      	movs	r1, #1
 8005d00:	429a      	cmp	r2, r3
 8005d02:	dc01      	bgt.n	8005d08 <LCD_DrawLine+0x58>
 8005d04:	2300      	movs	r3, #0
 8005d06:	1c19      	adds	r1, r3, #0
 8005d08:	b2ca      	uxtb	r2, r1
 8005d0a:	211a      	movs	r1, #26
 8005d0c:	187b      	adds	r3, r7, r1
 8005d0e:	801a      	strh	r2, [r3, #0]
	if (steep) {
 8005d10:	187b      	adds	r3, r7, r1
 8005d12:	2200      	movs	r2, #0
 8005d14:	5e9b      	ldrsh	r3, [r3, r2]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d019      	beq.n	8005d4e <LCD_DrawLine+0x9e>
		swap(x1, y1);
 8005d1a:	2118      	movs	r1, #24
 8005d1c:	187b      	adds	r3, r7, r1
 8005d1e:	1dba      	adds	r2, r7, #6
 8005d20:	8812      	ldrh	r2, [r2, #0]
 8005d22:	801a      	strh	r2, [r3, #0]
 8005d24:	1dbb      	adds	r3, r7, #6
 8005d26:	1d3a      	adds	r2, r7, #4
 8005d28:	8812      	ldrh	r2, [r2, #0]
 8005d2a:	801a      	strh	r2, [r3, #0]
 8005d2c:	1d3b      	adds	r3, r7, #4
 8005d2e:	187a      	adds	r2, r7, r1
 8005d30:	8812      	ldrh	r2, [r2, #0]
 8005d32:	801a      	strh	r2, [r3, #0]
		swap(x2, y2);
 8005d34:	2116      	movs	r1, #22
 8005d36:	187b      	adds	r3, r7, r1
 8005d38:	1cba      	adds	r2, r7, #2
 8005d3a:	8812      	ldrh	r2, [r2, #0]
 8005d3c:	801a      	strh	r2, [r3, #0]
 8005d3e:	1cbb      	adds	r3, r7, #2
 8005d40:	003a      	movs	r2, r7
 8005d42:	8812      	ldrh	r2, [r2, #0]
 8005d44:	801a      	strh	r2, [r3, #0]
 8005d46:	003b      	movs	r3, r7
 8005d48:	187a      	adds	r2, r7, r1
 8005d4a:	8812      	ldrh	r2, [r2, #0]
 8005d4c:	801a      	strh	r2, [r3, #0]
	}

	if (x1 > x2) {
 8005d4e:	1dba      	adds	r2, r7, #6
 8005d50:	1cbb      	adds	r3, r7, #2
 8005d52:	2100      	movs	r1, #0
 8005d54:	5e52      	ldrsh	r2, [r2, r1]
 8005d56:	2100      	movs	r1, #0
 8005d58:	5e5b      	ldrsh	r3, [r3, r1]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	dd19      	ble.n	8005d92 <LCD_DrawLine+0xe2>
		swap(x1, x2);
 8005d5e:	2114      	movs	r1, #20
 8005d60:	187b      	adds	r3, r7, r1
 8005d62:	1dba      	adds	r2, r7, #6
 8005d64:	8812      	ldrh	r2, [r2, #0]
 8005d66:	801a      	strh	r2, [r3, #0]
 8005d68:	1dbb      	adds	r3, r7, #6
 8005d6a:	1cba      	adds	r2, r7, #2
 8005d6c:	8812      	ldrh	r2, [r2, #0]
 8005d6e:	801a      	strh	r2, [r3, #0]
 8005d70:	1cbb      	adds	r3, r7, #2
 8005d72:	187a      	adds	r2, r7, r1
 8005d74:	8812      	ldrh	r2, [r2, #0]
 8005d76:	801a      	strh	r2, [r3, #0]
		swap(y1, y2);
 8005d78:	2112      	movs	r1, #18
 8005d7a:	187b      	adds	r3, r7, r1
 8005d7c:	1d3a      	adds	r2, r7, #4
 8005d7e:	8812      	ldrh	r2, [r2, #0]
 8005d80:	801a      	strh	r2, [r3, #0]
 8005d82:	1d3b      	adds	r3, r7, #4
 8005d84:	003a      	movs	r2, r7
 8005d86:	8812      	ldrh	r2, [r2, #0]
 8005d88:	801a      	strh	r2, [r3, #0]
 8005d8a:	003b      	movs	r3, r7
 8005d8c:	187a      	adds	r2, r7, r1
 8005d8e:	8812      	ldrh	r2, [r2, #0]
 8005d90:	801a      	strh	r2, [r3, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 8005d92:	1cbb      	adds	r3, r7, #2
 8005d94:	881a      	ldrh	r2, [r3, #0]
 8005d96:	1dbb      	adds	r3, r7, #6
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	2110      	movs	r1, #16
 8005da0:	187b      	adds	r3, r7, r1
 8005da2:	801a      	strh	r2, [r3, #0]
	dy = abs(y2 - y1);
 8005da4:	003b      	movs	r3, r7
 8005da6:	2200      	movs	r2, #0
 8005da8:	5e9a      	ldrsh	r2, [r3, r2]
 8005daa:	1d3b      	adds	r3, r7, #4
 8005dac:	2000      	movs	r0, #0
 8005dae:	5e1b      	ldrsh	r3, [r3, r0]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	17d8      	asrs	r0, r3, #31
 8005db4:	181a      	adds	r2, r3, r0
 8005db6:	4042      	eors	r2, r0
 8005db8:	230e      	movs	r3, #14
 8005dba:	18fb      	adds	r3, r7, r3
 8005dbc:	801a      	strh	r2, [r3, #0]

	int16_t err = dx / 2;
 8005dbe:	231e      	movs	r3, #30
 8005dc0:	18fa      	adds	r2, r7, r3
 8005dc2:	187b      	adds	r3, r7, r1
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	5e5b      	ldrsh	r3, [r3, r1]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	da00      	bge.n	8005dce <LCD_DrawLine+0x11e>
 8005dcc:	3301      	adds	r3, #1
 8005dce:	105b      	asrs	r3, r3, #1
 8005dd0:	8013      	strh	r3, [r2, #0]
	int16_t ystep;

	if (y1 < y2) {
 8005dd2:	1d3a      	adds	r2, r7, #4
 8005dd4:	003b      	movs	r3, r7
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	5e52      	ldrsh	r2, [r2, r1]
 8005dda:	2100      	movs	r1, #0
 8005ddc:	5e5b      	ldrsh	r3, [r3, r1]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	da04      	bge.n	8005dec <LCD_DrawLine+0x13c>
		ystep = 1;
 8005de2:	231c      	movs	r3, #28
 8005de4:	18fb      	adds	r3, r7, r3
 8005de6:	2201      	movs	r2, #1
 8005de8:	801a      	strh	r2, [r3, #0]
 8005dea:	e04d      	b.n	8005e88 <LCD_DrawLine+0x1d8>
	} else {
		ystep = -1;
 8005dec:	231c      	movs	r3, #28
 8005dee:	18fb      	adds	r3, r7, r3
 8005df0:	2201      	movs	r2, #1
 8005df2:	4252      	negs	r2, r2
 8005df4:	801a      	strh	r2, [r3, #0]
	}

	for (; x1 <= x2; x1++) {
 8005df6:	e047      	b.n	8005e88 <LCD_DrawLine+0x1d8>
		if (steep) {
 8005df8:	231a      	movs	r3, #26
 8005dfa:	18fb      	adds	r3, r7, r3
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	5e9b      	ldrsh	r3, [r3, r2]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00c      	beq.n	8005e1e <LCD_DrawLine+0x16e>
			LCD_DrawPixel(y1, x1, color);
 8005e04:	2330      	movs	r3, #48	; 0x30
 8005e06:	18fb      	adds	r3, r7, r3
 8005e08:	881a      	ldrh	r2, [r3, #0]
 8005e0a:	1dbb      	adds	r3, r7, #6
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	5e59      	ldrsh	r1, [r3, r1]
 8005e10:	1d3b      	adds	r3, r7, #4
 8005e12:	2000      	movs	r0, #0
 8005e14:	5e1b      	ldrsh	r3, [r3, r0]
 8005e16:	0018      	movs	r0, r3
 8005e18:	f7ff febe 	bl	8005b98 <LCD_DrawPixel>
 8005e1c:	e00b      	b.n	8005e36 <LCD_DrawLine+0x186>
		} else {
			LCD_DrawPixel(x1, y1, color);
 8005e1e:	2330      	movs	r3, #48	; 0x30
 8005e20:	18fb      	adds	r3, r7, r3
 8005e22:	881a      	ldrh	r2, [r3, #0]
 8005e24:	1d3b      	adds	r3, r7, #4
 8005e26:	2100      	movs	r1, #0
 8005e28:	5e59      	ldrsh	r1, [r3, r1]
 8005e2a:	1dbb      	adds	r3, r7, #6
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	5e1b      	ldrsh	r3, [r3, r0]
 8005e30:	0018      	movs	r0, r3
 8005e32:	f7ff feb1 	bl	8005b98 <LCD_DrawPixel>
		}
		err -= dy;
 8005e36:	211e      	movs	r1, #30
 8005e38:	187b      	adds	r3, r7, r1
 8005e3a:	881a      	ldrh	r2, [r3, #0]
 8005e3c:	230e      	movs	r3, #14
 8005e3e:	18fb      	adds	r3, r7, r3
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	187b      	adds	r3, r7, r1
 8005e48:	801a      	strh	r2, [r3, #0]
		if (err < 0) {
 8005e4a:	187b      	adds	r3, r7, r1
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	5e9b      	ldrsh	r3, [r3, r2]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	da11      	bge.n	8005e78 <LCD_DrawLine+0x1c8>
			y1 += ystep;
 8005e54:	1d3b      	adds	r3, r7, #4
 8005e56:	881a      	ldrh	r2, [r3, #0]
 8005e58:	231c      	movs	r3, #28
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	18d3      	adds	r3, r2, r3
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	1d3b      	adds	r3, r7, #4
 8005e64:	801a      	strh	r2, [r3, #0]
			err += dx;
 8005e66:	187b      	adds	r3, r7, r1
 8005e68:	881a      	ldrh	r2, [r3, #0]
 8005e6a:	2310      	movs	r3, #16
 8005e6c:	18fb      	adds	r3, r7, r3
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	18d3      	adds	r3, r2, r3
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	187b      	adds	r3, r7, r1
 8005e76:	801a      	strh	r2, [r3, #0]
	for (; x1 <= x2; x1++) {
 8005e78:	1dbb      	adds	r3, r7, #6
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	5e9b      	ldrsh	r3, [r3, r2]
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	3301      	adds	r3, #1
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	1dbb      	adds	r3, r7, #6
 8005e86:	801a      	strh	r2, [r3, #0]
 8005e88:	1dba      	adds	r2, r7, #6
 8005e8a:	1cbb      	adds	r3, r7, #2
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	5e52      	ldrsh	r2, [r2, r1]
 8005e90:	2100      	movs	r1, #0
 8005e92:	5e5b      	ldrsh	r3, [r3, r1]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	ddaf      	ble.n	8005df8 <LCD_DrawLine+0x148>
		}
	}
}
 8005e98:	46c0      	nop			; (mov r8, r8)
 8005e9a:	46c0      	nop			; (mov r8, r8)
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	b008      	add	sp, #32
 8005ea0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005ea4 <LCD_DrawFastHLine>:
 * \param length	Length of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastHLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
 8005ea4:	b5b0      	push	{r4, r5, r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	0005      	movs	r5, r0
 8005eac:	000c      	movs	r4, r1
 8005eae:	0010      	movs	r0, r2
 8005eb0:	0019      	movs	r1, r3
 8005eb2:	1dbb      	adds	r3, r7, #6
 8005eb4:	1c2a      	adds	r2, r5, #0
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	1d3b      	adds	r3, r7, #4
 8005eba:	1c22      	adds	r2, r4, #0
 8005ebc:	801a      	strh	r2, [r3, #0]
 8005ebe:	1cbb      	adds	r3, r7, #2
 8005ec0:	1c02      	adds	r2, r0, #0
 8005ec2:	801a      	strh	r2, [r3, #0]
 8005ec4:	003b      	movs	r3, r7
 8005ec6:	1c0a      	adds	r2, r1, #0
 8005ec8:	801a      	strh	r2, [r3, #0]
	int16_t x2;

	// Initial off-screen clipping
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 8005eca:	1cbb      	adds	r3, r7, #2
 8005ecc:	2200      	movs	r2, #0
 8005ece:	5e9b      	ldrsh	r3, [r3, r2]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	dc00      	bgt.n	8005ed6 <LCD_DrawFastHLine+0x32>
 8005ed4:	e075      	b.n	8005fc2 <LCD_DrawFastHLine+0x11e>
 8005ed6:	1d3b      	adds	r3, r7, #4
 8005ed8:	2200      	movs	r2, #0
 8005eda:	5e9b      	ldrsh	r3, [r3, r2]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	da00      	bge.n	8005ee2 <LCD_DrawFastHLine+0x3e>
 8005ee0:	e06f      	b.n	8005fc2 <LCD_DrawFastHLine+0x11e>
 8005ee2:	4b3a      	ldr	r3, [pc, #232]	; (8005fcc <LCD_DrawFastHLine+0x128>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	5e9b      	ldrsh	r3, [r3, r2]
 8005ee8:	1d3a      	adds	r2, r7, #4
 8005eea:	2100      	movs	r1, #0
 8005eec:	5e52      	ldrsh	r2, [r2, r1]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	da67      	bge.n	8005fc2 <LCD_DrawFastHLine+0x11e>
 8005ef2:	4b37      	ldr	r3, [pc, #220]	; (8005fd0 <LCD_DrawFastHLine+0x12c>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	5e9b      	ldrsh	r3, [r3, r2]
 8005ef8:	1dba      	adds	r2, r7, #6
 8005efa:	2100      	movs	r1, #0
 8005efc:	5e52      	ldrsh	r2, [r2, r1]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	da5f      	bge.n	8005fc2 <LCD_DrawFastHLine+0x11e>
			(x + length - 1)) < 0))
 8005f02:	1dbb      	adds	r3, r7, #6
 8005f04:	881a      	ldrh	r2, [r3, #0]
 8005f06:	1cbb      	adds	r3, r7, #2
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	18d3      	adds	r3, r2, r3
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29a      	uxth	r2, r3
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 8005f12:	210e      	movs	r1, #14
 8005f14:	187b      	adds	r3, r7, r1
 8005f16:	801a      	strh	r2, [r3, #0]
 8005f18:	187b      	adds	r3, r7, r1
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	5e9b      	ldrsh	r3, [r3, r2]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	db4f      	blt.n	8005fc2 <LCD_DrawFastHLine+0x11e>
		return;

	if (x < 0) { // Clip left
 8005f22:	1dbb      	adds	r3, r7, #6
 8005f24:	2200      	movs	r2, #0
 8005f26:	5e9b      	ldrsh	r3, [r3, r2]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	da0a      	bge.n	8005f42 <LCD_DrawFastHLine+0x9e>
		length += x;
 8005f2c:	1cbb      	adds	r3, r7, #2
 8005f2e:	881a      	ldrh	r2, [r3, #0]
 8005f30:	1dbb      	adds	r3, r7, #6
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	18d3      	adds	r3, r2, r3
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	1cbb      	adds	r3, r7, #2
 8005f3a:	801a      	strh	r2, [r3, #0]
		x = 0;
 8005f3c:	1dbb      	adds	r3, r7, #6
 8005f3e:	2200      	movs	r2, #0
 8005f40:	801a      	strh	r2, [r3, #0]
	}

	if (x2 >= m_width) { // Clip right
 8005f42:	4b23      	ldr	r3, [pc, #140]	; (8005fd0 <LCD_DrawFastHLine+0x12c>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	5e9b      	ldrsh	r3, [r3, r2]
 8005f48:	210e      	movs	r1, #14
 8005f4a:	187a      	adds	r2, r7, r1
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	5e12      	ldrsh	r2, [r2, r0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	db11      	blt.n	8005f78 <LCD_DrawFastHLine+0xd4>
		x2 = m_width - 1;
 8005f54:	4b1e      	ldr	r3, [pc, #120]	; (8005fd0 <LCD_DrawFastHLine+0x12c>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	5e9b      	ldrsh	r3, [r3, r2]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	187b      	adds	r3, r7, r1
 8005f62:	801a      	strh	r2, [r3, #0]
		length = x2 - x + 1;
 8005f64:	187b      	adds	r3, r7, r1
 8005f66:	881a      	ldrh	r2, [r3, #0]
 8005f68:	1dbb      	adds	r3, r7, #6
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	3301      	adds	r3, #1
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	1cbb      	adds	r3, r7, #2
 8005f76:	801a      	strh	r2, [r3, #0]
	}

	LCD_SetAddrWindow(x, y, x2, y);
 8005f78:	1dbb      	adds	r3, r7, #6
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	5e18      	ldrsh	r0, [r3, r0]
 8005f7e:	1d3b      	adds	r3, r7, #4
 8005f80:	2100      	movs	r1, #0
 8005f82:	5e59      	ldrsh	r1, [r3, r1]
 8005f84:	230e      	movs	r3, #14
 8005f86:	18fb      	adds	r3, r7, r3
 8005f88:	2200      	movs	r2, #0
 8005f8a:	5e9a      	ldrsh	r2, [r3, r2]
 8005f8c:	1d3b      	adds	r3, r7, #4
 8005f8e:	2400      	movs	r4, #0
 8005f90:	5f1b      	ldrsh	r3, [r3, r4]
 8005f92:	f001 faa9 	bl	80074e8 <LCD_SetAddrWindow>
	LCD_Flood(color, length);
 8005f96:	1cbb      	adds	r3, r7, #2
 8005f98:	2200      	movs	r2, #0
 8005f9a:	5e9a      	ldrsh	r2, [r3, r2]
 8005f9c:	003b      	movs	r3, r7
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	0011      	movs	r1, r2
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f000 ff8a 	bl	8006ebc <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8005fa8:	4b09      	ldr	r3, [pc, #36]	; (8005fd0 <LCD_DrawFastHLine+0x12c>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	5e9b      	ldrsh	r3, [r3, r2]
 8005fae:	1e5a      	subs	r2, r3, #1
 8005fb0:	4b06      	ldr	r3, [pc, #24]	; (8005fcc <LCD_DrawFastHLine+0x128>)
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	5e5b      	ldrsh	r3, [r3, r1]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	2100      	movs	r1, #0
 8005fba:	2000      	movs	r0, #0
 8005fbc:	f001 fa94 	bl	80074e8 <LCD_SetAddrWindow>
 8005fc0:	e000      	b.n	8005fc4 <LCD_DrawFastHLine+0x120>
		return;
 8005fc2:	46c0      	nop			; (mov r8, r8)

}
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	b004      	add	sp, #16
 8005fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	20000568 	.word	0x20000568
 8005fd0:	20000566 	.word	0x20000566

08005fd4 <LCD_DrawFastVLine>:
 * \param h		High of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8005fd4:	b5b0      	push	{r4, r5, r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	0005      	movs	r5, r0
 8005fdc:	000c      	movs	r4, r1
 8005fde:	0010      	movs	r0, r2
 8005fe0:	0019      	movs	r1, r3
 8005fe2:	1dbb      	adds	r3, r7, #6
 8005fe4:	1c2a      	adds	r2, r5, #0
 8005fe6:	801a      	strh	r2, [r3, #0]
 8005fe8:	1d3b      	adds	r3, r7, #4
 8005fea:	1c22      	adds	r2, r4, #0
 8005fec:	801a      	strh	r2, [r3, #0]
 8005fee:	1cbb      	adds	r3, r7, #2
 8005ff0:	1c02      	adds	r2, r0, #0
 8005ff2:	801a      	strh	r2, [r3, #0]
 8005ff4:	003b      	movs	r3, r7
 8005ff6:	1c0a      	adds	r2, r1, #0
 8005ff8:	801a      	strh	r2, [r3, #0]
	// Update in subclasses if desired!
	LCD_DrawLine(x, y, x, y + h - 1, color);
 8005ffa:	1d3b      	adds	r3, r7, #4
 8005ffc:	881a      	ldrh	r2, [r3, #0]
 8005ffe:	1cbb      	adds	r3, r7, #2
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	18d3      	adds	r3, r2, r3
 8006004:	b29b      	uxth	r3, r3
 8006006:	3b01      	subs	r3, #1
 8006008:	b29b      	uxth	r3, r3
 800600a:	b21c      	sxth	r4, r3
 800600c:	1dbb      	adds	r3, r7, #6
 800600e:	2200      	movs	r2, #0
 8006010:	5e9a      	ldrsh	r2, [r3, r2]
 8006012:	1d3b      	adds	r3, r7, #4
 8006014:	2100      	movs	r1, #0
 8006016:	5e59      	ldrsh	r1, [r3, r1]
 8006018:	1dbb      	adds	r3, r7, #6
 800601a:	2000      	movs	r0, #0
 800601c:	5e18      	ldrsh	r0, [r3, r0]
 800601e:	003b      	movs	r3, r7
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	0023      	movs	r3, r4
 8006026:	f7ff fe43 	bl	8005cb0 <LCD_DrawLine>
}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	46bd      	mov	sp, r7
 800602e:	b002      	add	sp, #8
 8006030:	bdb0      	pop	{r4, r5, r7, pc}

08006032 <LCD_DrawRect>:
 * \param h			Height of the rectangle to draw
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8006032:	b5b0      	push	{r4, r5, r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	0005      	movs	r5, r0
 800603a:	000c      	movs	r4, r1
 800603c:	0010      	movs	r0, r2
 800603e:	0019      	movs	r1, r3
 8006040:	1dbb      	adds	r3, r7, #6
 8006042:	1c2a      	adds	r2, r5, #0
 8006044:	801a      	strh	r2, [r3, #0]
 8006046:	1d3b      	adds	r3, r7, #4
 8006048:	1c22      	adds	r2, r4, #0
 800604a:	801a      	strh	r2, [r3, #0]
 800604c:	1cbb      	adds	r3, r7, #2
 800604e:	1c02      	adds	r2, r0, #0
 8006050:	801a      	strh	r2, [r3, #0]
 8006052:	003b      	movs	r3, r7
 8006054:	1c0a      	adds	r2, r1, #0
 8006056:	801a      	strh	r2, [r3, #0]
	LCD_DrawFastHLine(x, y, w, color);
 8006058:	2518      	movs	r5, #24
 800605a:	197b      	adds	r3, r7, r5
 800605c:	881c      	ldrh	r4, [r3, #0]
 800605e:	1cbb      	adds	r3, r7, #2
 8006060:	2200      	movs	r2, #0
 8006062:	5e9a      	ldrsh	r2, [r3, r2]
 8006064:	1d3b      	adds	r3, r7, #4
 8006066:	2100      	movs	r1, #0
 8006068:	5e59      	ldrsh	r1, [r3, r1]
 800606a:	1dbb      	adds	r3, r7, #6
 800606c:	2000      	movs	r0, #0
 800606e:	5e18      	ldrsh	r0, [r3, r0]
 8006070:	0023      	movs	r3, r4
 8006072:	f7ff ff17 	bl	8005ea4 <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x, y + h - 1, w, color);
 8006076:	1d3b      	adds	r3, r7, #4
 8006078:	881a      	ldrh	r2, [r3, #0]
 800607a:	003b      	movs	r3, r7
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	18d3      	adds	r3, r2, r3
 8006080:	b29b      	uxth	r3, r3
 8006082:	3b01      	subs	r3, #1
 8006084:	b29b      	uxth	r3, r3
 8006086:	b219      	sxth	r1, r3
 8006088:	197b      	adds	r3, r7, r5
 800608a:	881c      	ldrh	r4, [r3, #0]
 800608c:	1cbb      	adds	r3, r7, #2
 800608e:	2200      	movs	r2, #0
 8006090:	5e9a      	ldrsh	r2, [r3, r2]
 8006092:	1dbb      	adds	r3, r7, #6
 8006094:	2000      	movs	r0, #0
 8006096:	5e18      	ldrsh	r0, [r3, r0]
 8006098:	0023      	movs	r3, r4
 800609a:	f7ff ff03 	bl	8005ea4 <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y, h, color);
 800609e:	197b      	adds	r3, r7, r5
 80060a0:	881c      	ldrh	r4, [r3, #0]
 80060a2:	003b      	movs	r3, r7
 80060a4:	2200      	movs	r2, #0
 80060a6:	5e9a      	ldrsh	r2, [r3, r2]
 80060a8:	1d3b      	adds	r3, r7, #4
 80060aa:	2100      	movs	r1, #0
 80060ac:	5e59      	ldrsh	r1, [r3, r1]
 80060ae:	1dbb      	adds	r3, r7, #6
 80060b0:	2000      	movs	r0, #0
 80060b2:	5e18      	ldrsh	r0, [r3, r0]
 80060b4:	0023      	movs	r3, r4
 80060b6:	f7ff ff8d 	bl	8005fd4 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y, h, color);
 80060ba:	1dbb      	adds	r3, r7, #6
 80060bc:	881a      	ldrh	r2, [r3, #0]
 80060be:	1cbb      	adds	r3, r7, #2
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	18d3      	adds	r3, r2, r3
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	b218      	sxth	r0, r3
 80060cc:	197b      	adds	r3, r7, r5
 80060ce:	881c      	ldrh	r4, [r3, #0]
 80060d0:	003b      	movs	r3, r7
 80060d2:	2200      	movs	r2, #0
 80060d4:	5e9a      	ldrsh	r2, [r3, r2]
 80060d6:	1d3b      	adds	r3, r7, #4
 80060d8:	2100      	movs	r1, #0
 80060da:	5e59      	ldrsh	r1, [r3, r1]
 80060dc:	0023      	movs	r3, r4
 80060de:	f7ff ff79 	bl	8005fd4 <LCD_DrawFastVLine>
}
 80060e2:	46c0      	nop			; (mov r8, r8)
 80060e4:	46bd      	mov	sp, r7
 80060e6:	b002      	add	sp, #8
 80060e8:	bdb0      	pop	{r4, r5, r7, pc}

080060ea <LCD_DrawRoundRect>:
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 80060ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ec:	b085      	sub	sp, #20
 80060ee:	af02      	add	r7, sp, #8
 80060f0:	0005      	movs	r5, r0
 80060f2:	000c      	movs	r4, r1
 80060f4:	0010      	movs	r0, r2
 80060f6:	0019      	movs	r1, r3
 80060f8:	1dbb      	adds	r3, r7, #6
 80060fa:	1c2a      	adds	r2, r5, #0
 80060fc:	801a      	strh	r2, [r3, #0]
 80060fe:	1d3b      	adds	r3, r7, #4
 8006100:	1c22      	adds	r2, r4, #0
 8006102:	801a      	strh	r2, [r3, #0]
 8006104:	1cbb      	adds	r3, r7, #2
 8006106:	1c02      	adds	r2, r0, #0
 8006108:	801a      	strh	r2, [r3, #0]
 800610a:	003b      	movs	r3, r7
 800610c:	1c0a      	adds	r2, r1, #0
 800610e:	801a      	strh	r2, [r3, #0]
	// smarter version
	LCD_DrawFastHLine(x + r, y, w - 2 * r, color); // Top
 8006110:	1dbb      	adds	r3, r7, #6
 8006112:	881a      	ldrh	r2, [r3, #0]
 8006114:	2518      	movs	r5, #24
 8006116:	2408      	movs	r4, #8
 8006118:	192b      	adds	r3, r5, r4
 800611a:	19db      	adds	r3, r3, r7
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	18d3      	adds	r3, r2, r3
 8006120:	b29b      	uxth	r3, r3
 8006122:	b218      	sxth	r0, r3
 8006124:	1cbb      	adds	r3, r7, #2
 8006126:	881a      	ldrh	r2, [r3, #0]
 8006128:	192b      	adds	r3, r5, r4
 800612a:	19db      	adds	r3, r3, r7
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	18db      	adds	r3, r3, r3
 8006130:	b29b      	uxth	r3, r3
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	b29b      	uxth	r3, r3
 8006136:	b21a      	sxth	r2, r3
 8006138:	261c      	movs	r6, #28
 800613a:	1933      	adds	r3, r6, r4
 800613c:	19db      	adds	r3, r3, r7
 800613e:	881c      	ldrh	r4, [r3, #0]
 8006140:	1d3b      	adds	r3, r7, #4
 8006142:	2100      	movs	r1, #0
 8006144:	5e59      	ldrsh	r1, [r3, r1]
 8006146:	0023      	movs	r3, r4
 8006148:	f7ff feac 	bl	8005ea4 <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 800614c:	1dbb      	adds	r3, r7, #6
 800614e:	881a      	ldrh	r2, [r3, #0]
 8006150:	2408      	movs	r4, #8
 8006152:	192b      	adds	r3, r5, r4
 8006154:	19db      	adds	r3, r3, r7
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	18d3      	adds	r3, r2, r3
 800615a:	b29b      	uxth	r3, r3
 800615c:	b218      	sxth	r0, r3
 800615e:	1d3b      	adds	r3, r7, #4
 8006160:	881a      	ldrh	r2, [r3, #0]
 8006162:	003b      	movs	r3, r7
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	18d3      	adds	r3, r2, r3
 8006168:	b29b      	uxth	r3, r3
 800616a:	3b01      	subs	r3, #1
 800616c:	b29b      	uxth	r3, r3
 800616e:	b219      	sxth	r1, r3
 8006170:	1cbb      	adds	r3, r7, #2
 8006172:	881a      	ldrh	r2, [r3, #0]
 8006174:	192b      	adds	r3, r5, r4
 8006176:	19db      	adds	r3, r3, r7
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	18db      	adds	r3, r3, r3
 800617c:	b29b      	uxth	r3, r3
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	b29b      	uxth	r3, r3
 8006182:	b21a      	sxth	r2, r3
 8006184:	1933      	adds	r3, r6, r4
 8006186:	19db      	adds	r3, r3, r7
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	f7ff fe8b 	bl	8005ea4 <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y + r, h - 2 * r, color); // Left
 800618e:	1d3b      	adds	r3, r7, #4
 8006190:	881a      	ldrh	r2, [r3, #0]
 8006192:	192b      	adds	r3, r5, r4
 8006194:	19db      	adds	r3, r3, r7
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	18d3      	adds	r3, r2, r3
 800619a:	b29b      	uxth	r3, r3
 800619c:	b219      	sxth	r1, r3
 800619e:	003b      	movs	r3, r7
 80061a0:	881a      	ldrh	r2, [r3, #0]
 80061a2:	192b      	adds	r3, r5, r4
 80061a4:	19db      	adds	r3, r3, r7
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	18db      	adds	r3, r3, r3
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	b21a      	sxth	r2, r3
 80061b2:	1933      	adds	r3, r6, r4
 80061b4:	19db      	adds	r3, r3, r7
 80061b6:	881c      	ldrh	r4, [r3, #0]
 80061b8:	1dbb      	adds	r3, r7, #6
 80061ba:	2000      	movs	r0, #0
 80061bc:	5e18      	ldrsh	r0, [r3, r0]
 80061be:	0023      	movs	r3, r4
 80061c0:	f7ff ff08 	bl	8005fd4 <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 80061c4:	1dbb      	adds	r3, r7, #6
 80061c6:	881a      	ldrh	r2, [r3, #0]
 80061c8:	1cbb      	adds	r3, r7, #2
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	18d3      	adds	r3, r2, r3
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	b218      	sxth	r0, r3
 80061d6:	1d3b      	adds	r3, r7, #4
 80061d8:	881a      	ldrh	r2, [r3, #0]
 80061da:	2408      	movs	r4, #8
 80061dc:	192b      	adds	r3, r5, r4
 80061de:	19db      	adds	r3, r3, r7
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	18d3      	adds	r3, r2, r3
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	b219      	sxth	r1, r3
 80061e8:	003b      	movs	r3, r7
 80061ea:	881a      	ldrh	r2, [r3, #0]
 80061ec:	192b      	adds	r3, r5, r4
 80061ee:	19db      	adds	r3, r3, r7
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	18db      	adds	r3, r3, r3
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	b21a      	sxth	r2, r3
 80061fc:	1933      	adds	r3, r6, r4
 80061fe:	19db      	adds	r3, r3, r7
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	f7ff fee7 	bl	8005fd4 <LCD_DrawFastVLine>
	// draw four corners
	LCD_DrawCircleHelper(x + r, y + r, r, 1, color);
 8006206:	1dbb      	adds	r3, r7, #6
 8006208:	881a      	ldrh	r2, [r3, #0]
 800620a:	192b      	adds	r3, r5, r4
 800620c:	19db      	adds	r3, r3, r7
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	18d3      	adds	r3, r2, r3
 8006212:	b29b      	uxth	r3, r3
 8006214:	b218      	sxth	r0, r3
 8006216:	1d3b      	adds	r3, r7, #4
 8006218:	881a      	ldrh	r2, [r3, #0]
 800621a:	1929      	adds	r1, r5, r4
 800621c:	19cb      	adds	r3, r1, r7
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	18d3      	adds	r3, r2, r3
 8006222:	b29b      	uxth	r3, r3
 8006224:	b219      	sxth	r1, r3
 8006226:	002c      	movs	r4, r5
 8006228:	2308      	movs	r3, #8
 800622a:	18ea      	adds	r2, r5, r3
 800622c:	19d3      	adds	r3, r2, r7
 800622e:	2200      	movs	r2, #0
 8006230:	5e9a      	ldrsh	r2, [r3, r2]
 8006232:	0035      	movs	r5, r6
 8006234:	2608      	movs	r6, #8
 8006236:	19ab      	adds	r3, r5, r6
 8006238:	19db      	adds	r3, r3, r7
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	2301      	movs	r3, #1
 8006240:	f000 f873 	bl	800632a <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 8006244:	1dbb      	adds	r3, r7, #6
 8006246:	881a      	ldrh	r2, [r3, #0]
 8006248:	1cbb      	adds	r3, r7, #2
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	18d3      	adds	r3, r2, r3
 800624e:	b29a      	uxth	r2, r3
 8006250:	0031      	movs	r1, r6
 8006252:	1863      	adds	r3, r4, r1
 8006254:	19db      	adds	r3, r3, r7
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	b29b      	uxth	r3, r3
 800625c:	3b01      	subs	r3, #1
 800625e:	b29b      	uxth	r3, r3
 8006260:	b218      	sxth	r0, r3
 8006262:	1d3b      	adds	r3, r7, #4
 8006264:	881a      	ldrh	r2, [r3, #0]
 8006266:	000e      	movs	r6, r1
 8006268:	19a3      	adds	r3, r4, r6
 800626a:	19db      	adds	r3, r3, r7
 800626c:	881b      	ldrh	r3, [r3, #0]
 800626e:	18d3      	adds	r3, r2, r3
 8006270:	b29b      	uxth	r3, r3
 8006272:	b219      	sxth	r1, r3
 8006274:	19a3      	adds	r3, r4, r6
 8006276:	19db      	adds	r3, r3, r7
 8006278:	2200      	movs	r2, #0
 800627a:	5e9a      	ldrsh	r2, [r3, r2]
 800627c:	19ab      	adds	r3, r5, r6
 800627e:	19db      	adds	r3, r3, r7
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	2302      	movs	r3, #2
 8006286:	f000 f850 	bl	800632a <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 800628a:	1dbb      	adds	r3, r7, #6
 800628c:	881a      	ldrh	r2, [r3, #0]
 800628e:	1cbb      	adds	r3, r7, #2
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	18d3      	adds	r3, r2, r3
 8006294:	b29a      	uxth	r2, r3
 8006296:	0021      	movs	r1, r4
 8006298:	198b      	adds	r3, r1, r6
 800629a:	19db      	adds	r3, r3, r7
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	b218      	sxth	r0, r3
 80062a8:	1d3b      	adds	r3, r7, #4
 80062aa:	881a      	ldrh	r2, [r3, #0]
 80062ac:	003b      	movs	r3, r7
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	18d3      	adds	r3, r2, r3
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	000c      	movs	r4, r1
 80062b6:	19a3      	adds	r3, r4, r6
 80062b8:	19db      	adds	r3, r3, r7
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	b219      	sxth	r1, r3
 80062c6:	19a3      	adds	r3, r4, r6
 80062c8:	19db      	adds	r3, r3, r7
 80062ca:	2200      	movs	r2, #0
 80062cc:	5e9a      	ldrsh	r2, [r3, r2]
 80062ce:	19ab      	adds	r3, r5, r6
 80062d0:	19db      	adds	r3, r3, r7
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	2304      	movs	r3, #4
 80062d8:	f000 f827 	bl	800632a <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 80062dc:	1dbb      	adds	r3, r7, #6
 80062de:	881a      	ldrh	r2, [r3, #0]
 80062e0:	0021      	movs	r1, r4
 80062e2:	198b      	adds	r3, r1, r6
 80062e4:	19db      	adds	r3, r3, r7
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	18d3      	adds	r3, r2, r3
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	b218      	sxth	r0, r3
 80062ee:	1d3b      	adds	r3, r7, #4
 80062f0:	881a      	ldrh	r2, [r3, #0]
 80062f2:	003b      	movs	r3, r7
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	18d3      	adds	r3, r2, r3
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	000c      	movs	r4, r1
 80062fc:	198b      	adds	r3, r1, r6
 80062fe:	19db      	adds	r3, r3, r7
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	b29b      	uxth	r3, r3
 8006306:	3b01      	subs	r3, #1
 8006308:	b29b      	uxth	r3, r3
 800630a:	b219      	sxth	r1, r3
 800630c:	19a3      	adds	r3, r4, r6
 800630e:	19db      	adds	r3, r3, r7
 8006310:	2200      	movs	r2, #0
 8006312:	5e9a      	ldrsh	r2, [r3, r2]
 8006314:	19ab      	adds	r3, r5, r6
 8006316:	19db      	adds	r3, r3, r7
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	2308      	movs	r3, #8
 800631e:	f000 f804 	bl	800632a <LCD_DrawCircleHelper>
}
 8006322:	46c0      	nop			; (mov r8, r8)
 8006324:	46bd      	mov	sp, r7
 8006326:	b003      	add	sp, #12
 8006328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800632a <LCD_DrawCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		uint16_t color) {
 800632a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800632c:	b087      	sub	sp, #28
 800632e:	af00      	add	r7, sp, #0
 8006330:	0005      	movs	r5, r0
 8006332:	000c      	movs	r4, r1
 8006334:	0010      	movs	r0, r2
 8006336:	0019      	movs	r1, r3
 8006338:	1dbb      	adds	r3, r7, #6
 800633a:	1c2a      	adds	r2, r5, #0
 800633c:	801a      	strh	r2, [r3, #0]
 800633e:	1d3b      	adds	r3, r7, #4
 8006340:	1c22      	adds	r2, r4, #0
 8006342:	801a      	strh	r2, [r3, #0]
 8006344:	1cbb      	adds	r3, r7, #2
 8006346:	1c02      	adds	r2, r0, #0
 8006348:	801a      	strh	r2, [r3, #0]
 800634a:	1c7b      	adds	r3, r7, #1
 800634c:	1c0a      	adds	r2, r1, #0
 800634e:	701a      	strb	r2, [r3, #0]
	int16_t f = 1 - r;
 8006350:	1cbb      	adds	r3, r7, #2
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	2201      	movs	r2, #1
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	b29a      	uxth	r2, r3
 800635a:	2316      	movs	r3, #22
 800635c:	18fb      	adds	r3, r7, r3
 800635e:	801a      	strh	r2, [r3, #0]
	int16_t ddF_x = 1;
 8006360:	2314      	movs	r3, #20
 8006362:	18fb      	adds	r3, r7, r3
 8006364:	2201      	movs	r2, #1
 8006366:	801a      	strh	r2, [r3, #0]
	int16_t ddF_y = -2 * r;
 8006368:	1cbb      	adds	r3, r7, #2
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	1c1a      	adds	r2, r3, #0
 800636e:	03d2      	lsls	r2, r2, #15
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	18db      	adds	r3, r3, r3
 8006374:	b29a      	uxth	r2, r3
 8006376:	2312      	movs	r3, #18
 8006378:	18fb      	adds	r3, r7, r3
 800637a:	801a      	strh	r2, [r3, #0]
	int16_t x = 0;
 800637c:	2310      	movs	r3, #16
 800637e:	18fb      	adds	r3, r7, r3
 8006380:	2200      	movs	r2, #0
 8006382:	801a      	strh	r2, [r3, #0]
	int16_t y = r;
 8006384:	230e      	movs	r3, #14
 8006386:	18fb      	adds	r3, r7, r3
 8006388:	1cba      	adds	r2, r7, #2
 800638a:	8812      	ldrh	r2, [r2, #0]
 800638c:	801a      	strh	r2, [r3, #0]

	while (x < y) {
 800638e:	e0fe      	b.n	800658e <LCD_DrawCircleHelper+0x264>
		if (f >= 0) {
 8006390:	2116      	movs	r1, #22
 8006392:	187b      	adds	r3, r7, r1
 8006394:	2200      	movs	r2, #0
 8006396:	5e9b      	ldrsh	r3, [r3, r2]
 8006398:	2b00      	cmp	r3, #0
 800639a:	db17      	blt.n	80063cc <LCD_DrawCircleHelper+0xa2>
			y--;
 800639c:	200e      	movs	r0, #14
 800639e:	183b      	adds	r3, r7, r0
 80063a0:	2200      	movs	r2, #0
 80063a2:	5e9b      	ldrsh	r3, [r3, r2]
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	3b01      	subs	r3, #1
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	183b      	adds	r3, r7, r0
 80063ac:	801a      	strh	r2, [r3, #0]
			ddF_y += 2;
 80063ae:	2012      	movs	r0, #18
 80063b0:	183b      	adds	r3, r7, r0
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	3302      	adds	r3, #2
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	183b      	adds	r3, r7, r0
 80063ba:	801a      	strh	r2, [r3, #0]
			f += ddF_y;
 80063bc:	187b      	adds	r3, r7, r1
 80063be:	881a      	ldrh	r2, [r3, #0]
 80063c0:	183b      	adds	r3, r7, r0
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	18d3      	adds	r3, r2, r3
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	187b      	adds	r3, r7, r1
 80063ca:	801a      	strh	r2, [r3, #0]
		}
		x++;
 80063cc:	2110      	movs	r1, #16
 80063ce:	187b      	adds	r3, r7, r1
 80063d0:	2200      	movs	r2, #0
 80063d2:	5e9b      	ldrsh	r3, [r3, r2]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3301      	adds	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	187b      	adds	r3, r7, r1
 80063dc:	801a      	strh	r2, [r3, #0]
		ddF_x += 2;
 80063de:	2014      	movs	r0, #20
 80063e0:	183b      	adds	r3, r7, r0
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	3302      	adds	r3, #2
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	183b      	adds	r3, r7, r0
 80063ea:	801a      	strh	r2, [r3, #0]
		f += ddF_x;
 80063ec:	2416      	movs	r4, #22
 80063ee:	193b      	adds	r3, r7, r4
 80063f0:	881a      	ldrh	r2, [r3, #0]
 80063f2:	183b      	adds	r3, r7, r0
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	18d3      	adds	r3, r2, r3
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	193b      	adds	r3, r7, r4
 80063fc:	801a      	strh	r2, [r3, #0]
		if (cornername & 0x4) {
 80063fe:	1c7b      	adds	r3, r7, #1
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2204      	movs	r2, #4
 8006404:	4013      	ands	r3, r2
 8006406:	d02c      	beq.n	8006462 <LCD_DrawCircleHelper+0x138>
			LCD_DrawPixel(x0 + x, y0 + y, color);
 8006408:	1dbb      	adds	r3, r7, #6
 800640a:	881a      	ldrh	r2, [r3, #0]
 800640c:	000c      	movs	r4, r1
 800640e:	187b      	adds	r3, r7, r1
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	18d3      	adds	r3, r2, r3
 8006414:	b29b      	uxth	r3, r3
 8006416:	b218      	sxth	r0, r3
 8006418:	1d3b      	adds	r3, r7, #4
 800641a:	881a      	ldrh	r2, [r3, #0]
 800641c:	250e      	movs	r5, #14
 800641e:	197b      	adds	r3, r7, r5
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	18d3      	adds	r3, r2, r3
 8006424:	b29b      	uxth	r3, r3
 8006426:	b219      	sxth	r1, r3
 8006428:	2628      	movs	r6, #40	; 0x28
 800642a:	2308      	movs	r3, #8
 800642c:	18f2      	adds	r2, r6, r3
 800642e:	19d3      	adds	r3, r2, r7
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	001a      	movs	r2, r3
 8006434:	f7ff fbb0 	bl	8005b98 <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 + x, color);
 8006438:	1dbb      	adds	r3, r7, #6
 800643a:	881a      	ldrh	r2, [r3, #0]
 800643c:	197b      	adds	r3, r7, r5
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	18d3      	adds	r3, r2, r3
 8006442:	b29b      	uxth	r3, r3
 8006444:	b218      	sxth	r0, r3
 8006446:	1d3b      	adds	r3, r7, #4
 8006448:	881a      	ldrh	r2, [r3, #0]
 800644a:	193b      	adds	r3, r7, r4
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	18d3      	adds	r3, r2, r3
 8006450:	b29b      	uxth	r3, r3
 8006452:	b219      	sxth	r1, r3
 8006454:	2308      	movs	r3, #8
 8006456:	18f3      	adds	r3, r6, r3
 8006458:	19db      	adds	r3, r3, r7
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	001a      	movs	r2, r3
 800645e:	f7ff fb9b 	bl	8005b98 <LCD_DrawPixel>
		}
		if (cornername & 0x2) {
 8006462:	1c7b      	adds	r3, r7, #1
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2202      	movs	r2, #2
 8006468:	4013      	ands	r3, r2
 800646a:	d02c      	beq.n	80064c6 <LCD_DrawCircleHelper+0x19c>
			LCD_DrawPixel(x0 + x, y0 - y, color);
 800646c:	1dbb      	adds	r3, r7, #6
 800646e:	881a      	ldrh	r2, [r3, #0]
 8006470:	2410      	movs	r4, #16
 8006472:	193b      	adds	r3, r7, r4
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	18d3      	adds	r3, r2, r3
 8006478:	b29b      	uxth	r3, r3
 800647a:	b218      	sxth	r0, r3
 800647c:	1d3b      	adds	r3, r7, #4
 800647e:	881a      	ldrh	r2, [r3, #0]
 8006480:	250e      	movs	r5, #14
 8006482:	197b      	adds	r3, r7, r5
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	b29b      	uxth	r3, r3
 800648a:	b219      	sxth	r1, r3
 800648c:	2628      	movs	r6, #40	; 0x28
 800648e:	2308      	movs	r3, #8
 8006490:	18f2      	adds	r2, r6, r3
 8006492:	19d3      	adds	r3, r2, r7
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	001a      	movs	r2, r3
 8006498:	f7ff fb7e 	bl	8005b98 <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 - x, color);
 800649c:	1dbb      	adds	r3, r7, #6
 800649e:	881a      	ldrh	r2, [r3, #0]
 80064a0:	197b      	adds	r3, r7, r5
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	18d3      	adds	r3, r2, r3
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	b218      	sxth	r0, r3
 80064aa:	1d3b      	adds	r3, r7, #4
 80064ac:	881a      	ldrh	r2, [r3, #0]
 80064ae:	193b      	adds	r3, r7, r4
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	b219      	sxth	r1, r3
 80064b8:	2308      	movs	r3, #8
 80064ba:	18f3      	adds	r3, r6, r3
 80064bc:	19db      	adds	r3, r3, r7
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	001a      	movs	r2, r3
 80064c2:	f7ff fb69 	bl	8005b98 <LCD_DrawPixel>
		}
		if (cornername & 0x8) {
 80064c6:	1c7b      	adds	r3, r7, #1
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2208      	movs	r2, #8
 80064cc:	4013      	ands	r3, r2
 80064ce:	d02c      	beq.n	800652a <LCD_DrawCircleHelper+0x200>
			LCD_DrawPixel(x0 - y, y0 + x, color);
 80064d0:	1dbb      	adds	r3, r7, #6
 80064d2:	881a      	ldrh	r2, [r3, #0]
 80064d4:	240e      	movs	r4, #14
 80064d6:	193b      	adds	r3, r7, r4
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	b29b      	uxth	r3, r3
 80064de:	b218      	sxth	r0, r3
 80064e0:	1d3b      	adds	r3, r7, #4
 80064e2:	881a      	ldrh	r2, [r3, #0]
 80064e4:	2510      	movs	r5, #16
 80064e6:	197b      	adds	r3, r7, r5
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	18d3      	adds	r3, r2, r3
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	b219      	sxth	r1, r3
 80064f0:	2628      	movs	r6, #40	; 0x28
 80064f2:	2308      	movs	r3, #8
 80064f4:	18f2      	adds	r2, r6, r3
 80064f6:	19d3      	adds	r3, r2, r7
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	001a      	movs	r2, r3
 80064fc:	f7ff fb4c 	bl	8005b98 <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 + y, color);
 8006500:	1dbb      	adds	r3, r7, #6
 8006502:	881a      	ldrh	r2, [r3, #0]
 8006504:	197b      	adds	r3, r7, r5
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	b29b      	uxth	r3, r3
 800650c:	b218      	sxth	r0, r3
 800650e:	1d3b      	adds	r3, r7, #4
 8006510:	881a      	ldrh	r2, [r3, #0]
 8006512:	193b      	adds	r3, r7, r4
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	18d3      	adds	r3, r2, r3
 8006518:	b29b      	uxth	r3, r3
 800651a:	b219      	sxth	r1, r3
 800651c:	2308      	movs	r3, #8
 800651e:	18f3      	adds	r3, r6, r3
 8006520:	19db      	adds	r3, r3, r7
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	001a      	movs	r2, r3
 8006526:	f7ff fb37 	bl	8005b98 <LCD_DrawPixel>
		}
		if (cornername & 0x1) {
 800652a:	1c7b      	adds	r3, r7, #1
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2201      	movs	r2, #1
 8006530:	4013      	ands	r3, r2
 8006532:	d02c      	beq.n	800658e <LCD_DrawCircleHelper+0x264>
			LCD_DrawPixel(x0 - y, y0 - x, color);
 8006534:	1dbb      	adds	r3, r7, #6
 8006536:	881a      	ldrh	r2, [r3, #0]
 8006538:	240e      	movs	r4, #14
 800653a:	193b      	adds	r3, r7, r4
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	b29b      	uxth	r3, r3
 8006542:	b218      	sxth	r0, r3
 8006544:	1d3b      	adds	r3, r7, #4
 8006546:	881a      	ldrh	r2, [r3, #0]
 8006548:	2510      	movs	r5, #16
 800654a:	197b      	adds	r3, r7, r5
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	b29b      	uxth	r3, r3
 8006552:	b219      	sxth	r1, r3
 8006554:	2628      	movs	r6, #40	; 0x28
 8006556:	2308      	movs	r3, #8
 8006558:	18f2      	adds	r2, r6, r3
 800655a:	19d3      	adds	r3, r2, r7
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	001a      	movs	r2, r3
 8006560:	f7ff fb1a 	bl	8005b98 <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 - y, color);
 8006564:	1dbb      	adds	r3, r7, #6
 8006566:	881a      	ldrh	r2, [r3, #0]
 8006568:	197b      	adds	r3, r7, r5
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	b29b      	uxth	r3, r3
 8006570:	b218      	sxth	r0, r3
 8006572:	1d3b      	adds	r3, r7, #4
 8006574:	881a      	ldrh	r2, [r3, #0]
 8006576:	193b      	adds	r3, r7, r4
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	b29b      	uxth	r3, r3
 800657e:	b219      	sxth	r1, r3
 8006580:	2308      	movs	r3, #8
 8006582:	18f3      	adds	r3, r6, r3
 8006584:	19db      	adds	r3, r3, r7
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	001a      	movs	r2, r3
 800658a:	f7ff fb05 	bl	8005b98 <LCD_DrawPixel>
	while (x < y) {
 800658e:	2310      	movs	r3, #16
 8006590:	18fa      	adds	r2, r7, r3
 8006592:	230e      	movs	r3, #14
 8006594:	18fb      	adds	r3, r7, r3
 8006596:	2100      	movs	r1, #0
 8006598:	5e52      	ldrsh	r2, [r2, r1]
 800659a:	2100      	movs	r1, #0
 800659c:	5e5b      	ldrsh	r3, [r3, r1]
 800659e:	429a      	cmp	r2, r3
 80065a0:	da00      	bge.n	80065a4 <LCD_DrawCircleHelper+0x27a>
 80065a2:	e6f5      	b.n	8006390 <LCD_DrawCircleHelper+0x66>
		}
	}
}
 80065a4:	46c0      	nop			; (mov r8, r8)
 80065a6:	46c0      	nop			; (mov r8, r8)
 80065a8:	46bd      	mov	sp, r7
 80065aa:	b007      	add	sp, #28
 80065ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080065b0 <LCD_DrawChar>:
 * \param size		Character Size
 * 
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
		uint16_t bg, uint8_t size) {
 80065b0:	b5b0      	push	{r4, r5, r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	0005      	movs	r5, r0
 80065b8:	000c      	movs	r4, r1
 80065ba:	0010      	movs	r0, r2
 80065bc:	0019      	movs	r1, r3
 80065be:	1dbb      	adds	r3, r7, #6
 80065c0:	1c2a      	adds	r2, r5, #0
 80065c2:	801a      	strh	r2, [r3, #0]
 80065c4:	1d3b      	adds	r3, r7, #4
 80065c6:	1c22      	adds	r2, r4, #0
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	1cfb      	adds	r3, r7, #3
 80065cc:	1c02      	adds	r2, r0, #0
 80065ce:	701a      	strb	r2, [r3, #0]
 80065d0:	003b      	movs	r3, r7
 80065d2:	1c0a      	adds	r2, r1, #0
 80065d4:	801a      	strh	r2, [r3, #0]
	if ((x >= m_width) || // Clip right
 80065d6:	4b8f      	ldr	r3, [pc, #572]	; (8006814 <LCD_DrawChar+0x264>)
 80065d8:	2200      	movs	r2, #0
 80065da:	5e9b      	ldrsh	r3, [r3, r2]
 80065dc:	1dba      	adds	r2, r7, #6
 80065de:	2100      	movs	r1, #0
 80065e0:	5e52      	ldrsh	r2, [r2, r1]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	db00      	blt.n	80065e8 <LCD_DrawChar+0x38>
 80065e6:	e110      	b.n	800680a <LCD_DrawChar+0x25a>
			(y >= m_height) || // Clip bottom
 80065e8:	4b8b      	ldr	r3, [pc, #556]	; (8006818 <LCD_DrawChar+0x268>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	5e9b      	ldrsh	r3, [r3, r2]
	if ((x >= m_width) || // Clip right
 80065ee:	1d3a      	adds	r2, r7, #4
 80065f0:	2100      	movs	r1, #0
 80065f2:	5e52      	ldrsh	r2, [r2, r1]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	db00      	blt.n	80065fa <LCD_DrawChar+0x4a>
 80065f8:	e107      	b.n	800680a <LCD_DrawChar+0x25a>
			((x + 6 * size - 1) < 0) || // Clip left
 80065fa:	1dbb      	adds	r3, r7, #6
 80065fc:	2100      	movs	r1, #0
 80065fe:	5e59      	ldrsh	r1, [r3, r1]
 8006600:	2024      	movs	r0, #36	; 0x24
 8006602:	183b      	adds	r3, r7, r0
 8006604:	781a      	ldrb	r2, [r3, #0]
 8006606:	0013      	movs	r3, r2
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	189b      	adds	r3, r3, r2
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	18cb      	adds	r3, r1, r3
			(y >= m_height) || // Clip bottom
 8006610:	2b00      	cmp	r3, #0
 8006612:	dc00      	bgt.n	8006616 <LCD_DrawChar+0x66>
 8006614:	e0f9      	b.n	800680a <LCD_DrawChar+0x25a>
			((y + 8 * size - 1) < 0))   // Clip top
 8006616:	1d3b      	adds	r3, r7, #4
 8006618:	2200      	movs	r2, #0
 800661a:	5e9a      	ldrsh	r2, [r3, r2]
 800661c:	183b      	adds	r3, r7, r0
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	00db      	lsls	r3, r3, #3
 8006622:	18d3      	adds	r3, r2, r3
			((x + 6 * size - 1) < 0) || // Clip left
 8006624:	2b00      	cmp	r3, #0
 8006626:	dc00      	bgt.n	800662a <LCD_DrawChar+0x7a>
 8006628:	e0ef      	b.n	800680a <LCD_DrawChar+0x25a>
		return;

	for (int8_t i = 0; i < 6; i++) {
 800662a:	230f      	movs	r3, #15
 800662c:	18fb      	adds	r3, r7, r3
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]
 8006632:	e0e2      	b.n	80067fa <LCD_DrawChar+0x24a>
		uint8_t line;
		if (i == 5) {
 8006634:	230f      	movs	r3, #15
 8006636:	18fb      	adds	r3, r7, r3
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	b25b      	sxtb	r3, r3
 800663c:	2b05      	cmp	r3, #5
 800663e:	d104      	bne.n	800664a <LCD_DrawChar+0x9a>
			line = 0x0;
 8006640:	230e      	movs	r3, #14
 8006642:	18fb      	adds	r3, r7, r3
 8006644:	2200      	movs	r2, #0
 8006646:	701a      	strb	r2, [r3, #0]
 8006648:	e0ce      	b.n	80067e8 <LCD_DrawChar+0x238>
		} else {
			line = font[c * 5 + i];   //pgm_read_byte(font+(c*5)+i);
 800664a:	1cfb      	adds	r3, r7, #3
 800664c:	781a      	ldrb	r2, [r3, #0]
 800664e:	0013      	movs	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	189a      	adds	r2, r3, r2
 8006654:	230f      	movs	r3, #15
 8006656:	18fb      	adds	r3, r7, r3
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	b25b      	sxtb	r3, r3
 800665c:	18d2      	adds	r2, r2, r3
 800665e:	230e      	movs	r3, #14
 8006660:	18fb      	adds	r3, r7, r3
 8006662:	496e      	ldr	r1, [pc, #440]	; (800681c <LCD_DrawChar+0x26c>)
 8006664:	5c8a      	ldrb	r2, [r1, r2]
 8006666:	701a      	strb	r2, [r3, #0]
			for (int8_t j = 0; j < 8; j++) {
 8006668:	230d      	movs	r3, #13
 800666a:	18fb      	adds	r3, r7, r3
 800666c:	2200      	movs	r2, #0
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	e0b3      	b.n	80067da <LCD_DrawChar+0x22a>
				if (line & 0x1) {
 8006672:	230e      	movs	r3, #14
 8006674:	18fb      	adds	r3, r7, r3
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2201      	movs	r2, #1
 800667a:	4013      	ands	r3, r2
 800667c:	d04b      	beq.n	8006716 <LCD_DrawChar+0x166>
					if (size == 1) { // default size
 800667e:	2324      	movs	r3, #36	; 0x24
 8006680:	18fb      	adds	r3, r7, r3
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d119      	bne.n	80066bc <LCD_DrawChar+0x10c>
						LCD_DrawPixel(x + i, y + j, color);
 8006688:	230f      	movs	r3, #15
 800668a:	18fb      	adds	r3, r7, r3
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	b25b      	sxtb	r3, r3
 8006690:	b29a      	uxth	r2, r3
 8006692:	1dbb      	adds	r3, r7, #6
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	18d3      	adds	r3, r2, r3
 8006698:	b29b      	uxth	r3, r3
 800669a:	b218      	sxth	r0, r3
 800669c:	230d      	movs	r3, #13
 800669e:	18fb      	adds	r3, r7, r3
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	b25b      	sxtb	r3, r3
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	1d3b      	adds	r3, r7, #4
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	18d3      	adds	r3, r2, r3
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	b219      	sxth	r1, r3
 80066b0:	003b      	movs	r3, r7
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	001a      	movs	r2, r3
 80066b6:	f7ff fa6f 	bl	8005b98 <LCD_DrawPixel>
 80066ba:	e07f      	b.n	80067bc <LCD_DrawChar+0x20c>
					} else {  // big size
						LCD_FillRect(x + (i * size), y + (j * size), size, size,
 80066bc:	230f      	movs	r3, #15
 80066be:	18fb      	adds	r3, r7, r3
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	b25b      	sxtb	r3, r3
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2124      	movs	r1, #36	; 0x24
 80066c8:	187a      	adds	r2, r7, r1
 80066ca:	7812      	ldrb	r2, [r2, #0]
 80066cc:	b292      	uxth	r2, r2
 80066ce:	4353      	muls	r3, r2
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	1dbb      	adds	r3, r7, #6
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	18d3      	adds	r3, r2, r3
 80066d8:	b29b      	uxth	r3, r3
 80066da:	b218      	sxth	r0, r3
 80066dc:	230d      	movs	r3, #13
 80066de:	18fb      	adds	r3, r7, r3
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	b25b      	sxtb	r3, r3
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	000c      	movs	r4, r1
 80066e8:	187a      	adds	r2, r7, r1
 80066ea:	7812      	ldrb	r2, [r2, #0]
 80066ec:	b292      	uxth	r2, r2
 80066ee:	4353      	muls	r3, r2
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	1d3b      	adds	r3, r7, #4
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	18d3      	adds	r3, r2, r3
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	b219      	sxth	r1, r3
 80066fc:	193b      	adds	r3, r7, r4
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	b21a      	sxth	r2, r3
 8006702:	193b      	adds	r3, r7, r4
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	b21c      	sxth	r4, r3
 8006708:	003b      	movs	r3, r7
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	0023      	movs	r3, r4
 8006710:	f000 fa08 	bl	8006b24 <LCD_FillRect>
 8006714:	e052      	b.n	80067bc <LCD_DrawChar+0x20c>
								color);
					}
				} else if (bg != color) {
 8006716:	2420      	movs	r4, #32
 8006718:	193b      	adds	r3, r7, r4
 800671a:	0039      	movs	r1, r7
 800671c:	881a      	ldrh	r2, [r3, #0]
 800671e:	880b      	ldrh	r3, [r1, #0]
 8006720:	429a      	cmp	r2, r3
 8006722:	d04b      	beq.n	80067bc <LCD_DrawChar+0x20c>
					if (size == 1) { // default size
 8006724:	2324      	movs	r3, #36	; 0x24
 8006726:	18fb      	adds	r3, r7, r3
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d119      	bne.n	8006762 <LCD_DrawChar+0x1b2>
						LCD_DrawPixel(x + i, y + j, bg);
 800672e:	230f      	movs	r3, #15
 8006730:	18fb      	adds	r3, r7, r3
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	b25b      	sxtb	r3, r3
 8006736:	b29a      	uxth	r2, r3
 8006738:	1dbb      	adds	r3, r7, #6
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	18d3      	adds	r3, r2, r3
 800673e:	b29b      	uxth	r3, r3
 8006740:	b218      	sxth	r0, r3
 8006742:	230d      	movs	r3, #13
 8006744:	18fb      	adds	r3, r7, r3
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	b25b      	sxtb	r3, r3
 800674a:	b29a      	uxth	r2, r3
 800674c:	1d3b      	adds	r3, r7, #4
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	18d3      	adds	r3, r2, r3
 8006752:	b29b      	uxth	r3, r3
 8006754:	b219      	sxth	r1, r3
 8006756:	193b      	adds	r3, r7, r4
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	001a      	movs	r2, r3
 800675c:	f7ff fa1c 	bl	8005b98 <LCD_DrawPixel>
 8006760:	e02c      	b.n	80067bc <LCD_DrawChar+0x20c>
					} else {  // big size
						LCD_FillRect(x + i * size, y + j * size, size, size,
 8006762:	230f      	movs	r3, #15
 8006764:	18fb      	adds	r3, r7, r3
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	b25b      	sxtb	r3, r3
 800676a:	b29b      	uxth	r3, r3
 800676c:	2124      	movs	r1, #36	; 0x24
 800676e:	187a      	adds	r2, r7, r1
 8006770:	7812      	ldrb	r2, [r2, #0]
 8006772:	b292      	uxth	r2, r2
 8006774:	4353      	muls	r3, r2
 8006776:	b29a      	uxth	r2, r3
 8006778:	1dbb      	adds	r3, r7, #6
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	18d3      	adds	r3, r2, r3
 800677e:	b29b      	uxth	r3, r3
 8006780:	b218      	sxth	r0, r3
 8006782:	230d      	movs	r3, #13
 8006784:	18fb      	adds	r3, r7, r3
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	b25b      	sxtb	r3, r3
 800678a:	b29b      	uxth	r3, r3
 800678c:	000c      	movs	r4, r1
 800678e:	187a      	adds	r2, r7, r1
 8006790:	7812      	ldrb	r2, [r2, #0]
 8006792:	b292      	uxth	r2, r2
 8006794:	4353      	muls	r3, r2
 8006796:	b29a      	uxth	r2, r3
 8006798:	1d3b      	adds	r3, r7, #4
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	18d3      	adds	r3, r2, r3
 800679e:	b29b      	uxth	r3, r3
 80067a0:	b219      	sxth	r1, r3
 80067a2:	193b      	adds	r3, r7, r4
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	b21a      	sxth	r2, r3
 80067a8:	193b      	adds	r3, r7, r4
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	b21c      	sxth	r4, r3
 80067ae:	2320      	movs	r3, #32
 80067b0:	18fb      	adds	r3, r7, r3
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	0023      	movs	r3, r4
 80067b8:	f000 f9b4 	bl	8006b24 <LCD_FillRect>
								bg);
					}
				}
				line >>= 1;
 80067bc:	220e      	movs	r2, #14
 80067be:	18bb      	adds	r3, r7, r2
 80067c0:	18ba      	adds	r2, r7, r2
 80067c2:	7812      	ldrb	r2, [r2, #0]
 80067c4:	0852      	lsrs	r2, r2, #1
 80067c6:	701a      	strb	r2, [r3, #0]
			for (int8_t j = 0; j < 8; j++) {
 80067c8:	210d      	movs	r1, #13
 80067ca:	187b      	adds	r3, r7, r1
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	b25b      	sxtb	r3, r3
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	3301      	adds	r3, #1
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	187b      	adds	r3, r7, r1
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	230d      	movs	r3, #13
 80067dc:	18fb      	adds	r3, r7, r3
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	b25b      	sxtb	r3, r3
 80067e2:	2b07      	cmp	r3, #7
 80067e4:	dc00      	bgt.n	80067e8 <LCD_DrawChar+0x238>
 80067e6:	e744      	b.n	8006672 <LCD_DrawChar+0xc2>
	for (int8_t i = 0; i < 6; i++) {
 80067e8:	210f      	movs	r1, #15
 80067ea:	187b      	adds	r3, r7, r1
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	b25b      	sxtb	r3, r3
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	3301      	adds	r3, #1
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	187b      	adds	r3, r7, r1
 80067f8:	701a      	strb	r2, [r3, #0]
 80067fa:	230f      	movs	r3, #15
 80067fc:	18fb      	adds	r3, r7, r3
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	b25b      	sxtb	r3, r3
 8006802:	2b05      	cmp	r3, #5
 8006804:	dc00      	bgt.n	8006808 <LCD_DrawChar+0x258>
 8006806:	e715      	b.n	8006634 <LCD_DrawChar+0x84>
 8006808:	e000      	b.n	800680c <LCD_DrawChar+0x25c>
		return;
 800680a:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
}
 800680c:	46bd      	mov	sp, r7
 800680e:	b004      	add	sp, #16
 8006810:	bdb0      	pop	{r4, r5, r7, pc}
 8006812:	46c0      	nop			; (mov r8, r8)
 8006814:	20000566 	.word	0x20000566
 8006818:	20000568 	.word	0x20000568
 800681c:	0800a7d4 	.word	0x0800a7d4

08006820 <LCD_FillCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		int16_t delta, uint16_t color) {
 8006820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006822:	b089      	sub	sp, #36	; 0x24
 8006824:	af00      	add	r7, sp, #0
 8006826:	0005      	movs	r5, r0
 8006828:	000c      	movs	r4, r1
 800682a:	0010      	movs	r0, r2
 800682c:	0019      	movs	r1, r3
 800682e:	230e      	movs	r3, #14
 8006830:	18fb      	adds	r3, r7, r3
 8006832:	1c2a      	adds	r2, r5, #0
 8006834:	801a      	strh	r2, [r3, #0]
 8006836:	230c      	movs	r3, #12
 8006838:	18fb      	adds	r3, r7, r3
 800683a:	1c22      	adds	r2, r4, #0
 800683c:	801a      	strh	r2, [r3, #0]
 800683e:	230a      	movs	r3, #10
 8006840:	18fb      	adds	r3, r7, r3
 8006842:	1c02      	adds	r2, r0, #0
 8006844:	801a      	strh	r2, [r3, #0]
 8006846:	2309      	movs	r3, #9
 8006848:	18fb      	adds	r3, r7, r3
 800684a:	1c0a      	adds	r2, r1, #0
 800684c:	701a      	strb	r2, [r3, #0]
	int16_t f = 1 - r;
 800684e:	230a      	movs	r3, #10
 8006850:	18fb      	adds	r3, r7, r3
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	2201      	movs	r2, #1
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	b29a      	uxth	r2, r3
 800685a:	2316      	movs	r3, #22
 800685c:	2108      	movs	r1, #8
 800685e:	185b      	adds	r3, r3, r1
 8006860:	19db      	adds	r3, r3, r7
 8006862:	801a      	strh	r2, [r3, #0]
	int16_t ddF_x = 1;
 8006864:	2314      	movs	r3, #20
 8006866:	2208      	movs	r2, #8
 8006868:	189b      	adds	r3, r3, r2
 800686a:	19db      	adds	r3, r3, r7
 800686c:	2201      	movs	r2, #1
 800686e:	801a      	strh	r2, [r3, #0]
	int16_t ddF_y = -2 * r;
 8006870:	230a      	movs	r3, #10
 8006872:	18fb      	adds	r3, r7, r3
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	1c1a      	adds	r2, r3, #0
 8006878:	03d2      	lsls	r2, r2, #15
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	18db      	adds	r3, r3, r3
 800687e:	b29a      	uxth	r2, r3
 8006880:	2312      	movs	r3, #18
 8006882:	2108      	movs	r1, #8
 8006884:	185b      	adds	r3, r3, r1
 8006886:	19db      	adds	r3, r3, r7
 8006888:	801a      	strh	r2, [r3, #0]
	int16_t x = 0;
 800688a:	2310      	movs	r3, #16
 800688c:	2208      	movs	r2, #8
 800688e:	189b      	adds	r3, r3, r2
 8006890:	19db      	adds	r3, r3, r7
 8006892:	2200      	movs	r2, #0
 8006894:	801a      	strh	r2, [r3, #0]
	int16_t y = r;
 8006896:	230e      	movs	r3, #14
 8006898:	2208      	movs	r2, #8
 800689a:	189b      	adds	r3, r3, r2
 800689c:	19db      	adds	r3, r3, r7
 800689e:	220a      	movs	r2, #10
 80068a0:	18ba      	adds	r2, r7, r2
 80068a2:	8812      	ldrh	r2, [r2, #0]
 80068a4:	801a      	strh	r2, [r3, #0]

	while (x < y) {
 80068a6:	e129      	b.n	8006afc <LCD_FillCircleHelper+0x2dc>
		if (f >= 0) {
 80068a8:	2116      	movs	r1, #22
 80068aa:	2308      	movs	r3, #8
 80068ac:	18cb      	adds	r3, r1, r3
 80068ae:	19db      	adds	r3, r3, r7
 80068b0:	2200      	movs	r2, #0
 80068b2:	5e9b      	ldrsh	r3, [r3, r2]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	db25      	blt.n	8006904 <LCD_FillCircleHelper+0xe4>
			y--;
 80068b8:	200e      	movs	r0, #14
 80068ba:	2308      	movs	r3, #8
 80068bc:	18c3      	adds	r3, r0, r3
 80068be:	19db      	adds	r3, r3, r7
 80068c0:	2200      	movs	r2, #0
 80068c2:	5e9b      	ldrsh	r3, [r3, r2]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	3b01      	subs	r3, #1
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	2308      	movs	r3, #8
 80068cc:	18c3      	adds	r3, r0, r3
 80068ce:	19db      	adds	r3, r3, r7
 80068d0:	801a      	strh	r2, [r3, #0]
			ddF_y += 2;
 80068d2:	2012      	movs	r0, #18
 80068d4:	2308      	movs	r3, #8
 80068d6:	18c3      	adds	r3, r0, r3
 80068d8:	19db      	adds	r3, r3, r7
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	3302      	adds	r3, #2
 80068de:	b29a      	uxth	r2, r3
 80068e0:	2308      	movs	r3, #8
 80068e2:	18c3      	adds	r3, r0, r3
 80068e4:	19db      	adds	r3, r3, r7
 80068e6:	801a      	strh	r2, [r3, #0]
			f += ddF_y;
 80068e8:	2308      	movs	r3, #8
 80068ea:	18cb      	adds	r3, r1, r3
 80068ec:	19db      	adds	r3, r3, r7
 80068ee:	881a      	ldrh	r2, [r3, #0]
 80068f0:	2308      	movs	r3, #8
 80068f2:	18c3      	adds	r3, r0, r3
 80068f4:	19db      	adds	r3, r3, r7
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	18d3      	adds	r3, r2, r3
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	2308      	movs	r3, #8
 80068fe:	18cb      	adds	r3, r1, r3
 8006900:	19db      	adds	r3, r3, r7
 8006902:	801a      	strh	r2, [r3, #0]
		}
		x++;
 8006904:	2410      	movs	r4, #16
 8006906:	2308      	movs	r3, #8
 8006908:	18e3      	adds	r3, r4, r3
 800690a:	19db      	adds	r3, r3, r7
 800690c:	2200      	movs	r2, #0
 800690e:	5e9b      	ldrsh	r3, [r3, r2]
 8006910:	b29b      	uxth	r3, r3
 8006912:	3301      	adds	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	2308      	movs	r3, #8
 8006918:	18e3      	adds	r3, r4, r3
 800691a:	19db      	adds	r3, r3, r7
 800691c:	801a      	strh	r2, [r3, #0]
		ddF_x += 2;
 800691e:	2114      	movs	r1, #20
 8006920:	2308      	movs	r3, #8
 8006922:	18cb      	adds	r3, r1, r3
 8006924:	19db      	adds	r3, r3, r7
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	3302      	adds	r3, #2
 800692a:	b29a      	uxth	r2, r3
 800692c:	2308      	movs	r3, #8
 800692e:	18cb      	adds	r3, r1, r3
 8006930:	19db      	adds	r3, r3, r7
 8006932:	801a      	strh	r2, [r3, #0]
		f += ddF_x;
 8006934:	2016      	movs	r0, #22
 8006936:	2308      	movs	r3, #8
 8006938:	18c3      	adds	r3, r0, r3
 800693a:	19db      	adds	r3, r3, r7
 800693c:	881a      	ldrh	r2, [r3, #0]
 800693e:	2308      	movs	r3, #8
 8006940:	18cb      	adds	r3, r1, r3
 8006942:	19db      	adds	r3, r3, r7
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	18d3      	adds	r3, r2, r3
 8006948:	b29a      	uxth	r2, r3
 800694a:	2308      	movs	r3, #8
 800694c:	18c3      	adds	r3, r0, r3
 800694e:	19db      	adds	r3, r3, r7
 8006950:	801a      	strh	r2, [r3, #0]

		if (cornername & 0x1) {
 8006952:	2309      	movs	r3, #9
 8006954:	18fb      	adds	r3, r7, r3
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2201      	movs	r2, #1
 800695a:	4013      	ands	r3, r2
 800695c:	d063      	beq.n	8006a26 <LCD_FillCircleHelper+0x206>
			LCD_DrawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 800695e:	230e      	movs	r3, #14
 8006960:	18fb      	adds	r3, r7, r3
 8006962:	881a      	ldrh	r2, [r3, #0]
 8006964:	607c      	str	r4, [r7, #4]
 8006966:	2308      	movs	r3, #8
 8006968:	18e3      	adds	r3, r4, r3
 800696a:	19db      	adds	r3, r3, r7
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	18d3      	adds	r3, r2, r3
 8006970:	b29b      	uxth	r3, r3
 8006972:	b218      	sxth	r0, r3
 8006974:	230c      	movs	r3, #12
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	881a      	ldrh	r2, [r3, #0]
 800697a:	250e      	movs	r5, #14
 800697c:	2308      	movs	r3, #8
 800697e:	18eb      	adds	r3, r5, r3
 8006980:	19db      	adds	r3, r3, r7
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	b29b      	uxth	r3, r3
 8006988:	b219      	sxth	r1, r3
 800698a:	2308      	movs	r3, #8
 800698c:	18eb      	adds	r3, r5, r3
 800698e:	19db      	adds	r3, r3, r7
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	18db      	adds	r3, r3, r3
 8006994:	b29a      	uxth	r2, r3
 8006996:	2628      	movs	r6, #40	; 0x28
 8006998:	2408      	movs	r4, #8
 800699a:	1933      	adds	r3, r6, r4
 800699c:	603b      	str	r3, [r7, #0]
 800699e:	2308      	movs	r3, #8
 80069a0:	469c      	mov	ip, r3
 80069a2:	44bc      	add	ip, r7
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	4463      	add	r3, ip
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	18d3      	adds	r3, r2, r3
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3301      	adds	r3, #1
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	b21a      	sxth	r2, r3
 80069b4:	232c      	movs	r3, #44	; 0x2c
 80069b6:	191b      	adds	r3, r3, r4
 80069b8:	2408      	movs	r4, #8
 80069ba:	46a4      	mov	ip, r4
 80069bc:	44bc      	add	ip, r7
 80069be:	4463      	add	r3, ip
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	f7ff fb07 	bl	8005fd4 <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color);
 80069c6:	230e      	movs	r3, #14
 80069c8:	18fb      	adds	r3, r7, r3
 80069ca:	881a      	ldrh	r2, [r3, #0]
 80069cc:	2308      	movs	r3, #8
 80069ce:	18eb      	adds	r3, r5, r3
 80069d0:	19db      	adds	r3, r3, r7
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	18d3      	adds	r3, r2, r3
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	b218      	sxth	r0, r3
 80069da:	230c      	movs	r3, #12
 80069dc:	18fb      	adds	r3, r7, r3
 80069de:	881a      	ldrh	r2, [r3, #0]
 80069e0:	687c      	ldr	r4, [r7, #4]
 80069e2:	2308      	movs	r3, #8
 80069e4:	18e3      	adds	r3, r4, r3
 80069e6:	19db      	adds	r3, r3, r7
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	b219      	sxth	r1, r3
 80069f0:	2308      	movs	r3, #8
 80069f2:	18e3      	adds	r3, r4, r3
 80069f4:	19db      	adds	r3, r3, r7
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	18db      	adds	r3, r3, r3
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	2408      	movs	r4, #8
 80069fe:	1933      	adds	r3, r6, r4
 8006a00:	2508      	movs	r5, #8
 8006a02:	46ac      	mov	ip, r5
 8006a04:	44bc      	add	ip, r7
 8006a06:	4463      	add	r3, ip
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	18d3      	adds	r3, r2, r3
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	3301      	adds	r3, #1
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	b21a      	sxth	r2, r3
 8006a14:	232c      	movs	r3, #44	; 0x2c
 8006a16:	191b      	adds	r3, r3, r4
 8006a18:	2408      	movs	r4, #8
 8006a1a:	46a4      	mov	ip, r4
 8006a1c:	44bc      	add	ip, r7
 8006a1e:	4463      	add	r3, ip
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	f7ff fad7 	bl	8005fd4 <LCD_DrawFastVLine>
		}
		if (cornername & 0x2) {
 8006a26:	2309      	movs	r3, #9
 8006a28:	18fb      	adds	r3, r7, r3
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	4013      	ands	r3, r2
 8006a30:	d064      	beq.n	8006afc <LCD_FillCircleHelper+0x2dc>
			LCD_DrawFastVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color);
 8006a32:	230e      	movs	r3, #14
 8006a34:	18fb      	adds	r3, r7, r3
 8006a36:	881a      	ldrh	r2, [r3, #0]
 8006a38:	2410      	movs	r4, #16
 8006a3a:	607c      	str	r4, [r7, #4]
 8006a3c:	2308      	movs	r3, #8
 8006a3e:	18e3      	adds	r3, r4, r3
 8006a40:	19db      	adds	r3, r3, r7
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	b218      	sxth	r0, r3
 8006a4a:	230c      	movs	r3, #12
 8006a4c:	18fb      	adds	r3, r7, r3
 8006a4e:	881a      	ldrh	r2, [r3, #0]
 8006a50:	250e      	movs	r5, #14
 8006a52:	2308      	movs	r3, #8
 8006a54:	18eb      	adds	r3, r5, r3
 8006a56:	19db      	adds	r3, r3, r7
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	b219      	sxth	r1, r3
 8006a60:	2308      	movs	r3, #8
 8006a62:	18eb      	adds	r3, r5, r3
 8006a64:	19db      	adds	r3, r3, r7
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	18db      	adds	r3, r3, r3
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	2628      	movs	r6, #40	; 0x28
 8006a6e:	2408      	movs	r4, #8
 8006a70:	1933      	adds	r3, r6, r4
 8006a72:	603b      	str	r3, [r7, #0]
 8006a74:	2308      	movs	r3, #8
 8006a76:	469c      	mov	ip, r3
 8006a78:	44bc      	add	ip, r7
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	4463      	add	r3, ip
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	18d3      	adds	r3, r2, r3
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	3301      	adds	r3, #1
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	b21a      	sxth	r2, r3
 8006a8a:	232c      	movs	r3, #44	; 0x2c
 8006a8c:	191b      	adds	r3, r3, r4
 8006a8e:	2408      	movs	r4, #8
 8006a90:	46a4      	mov	ip, r4
 8006a92:	44bc      	add	ip, r7
 8006a94:	4463      	add	r3, ip
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	f7ff fa9c 	bl	8005fd4 <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color);
 8006a9c:	230e      	movs	r3, #14
 8006a9e:	18fb      	adds	r3, r7, r3
 8006aa0:	881a      	ldrh	r2, [r3, #0]
 8006aa2:	2308      	movs	r3, #8
 8006aa4:	18eb      	adds	r3, r5, r3
 8006aa6:	19db      	adds	r3, r3, r7
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	b218      	sxth	r0, r3
 8006ab0:	230c      	movs	r3, #12
 8006ab2:	18fb      	adds	r3, r7, r3
 8006ab4:	881a      	ldrh	r2, [r3, #0]
 8006ab6:	687c      	ldr	r4, [r7, #4]
 8006ab8:	2308      	movs	r3, #8
 8006aba:	18e3      	adds	r3, r4, r3
 8006abc:	19db      	adds	r3, r3, r7
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	b219      	sxth	r1, r3
 8006ac6:	2308      	movs	r3, #8
 8006ac8:	18e3      	adds	r3, r4, r3
 8006aca:	19db      	adds	r3, r3, r7
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	18db      	adds	r3, r3, r3
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	2408      	movs	r4, #8
 8006ad4:	1933      	adds	r3, r6, r4
 8006ad6:	2508      	movs	r5, #8
 8006ad8:	46ac      	mov	ip, r5
 8006ada:	44bc      	add	ip, r7
 8006adc:	4463      	add	r3, ip
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	18d3      	adds	r3, r2, r3
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	b21a      	sxth	r2, r3
 8006aea:	232c      	movs	r3, #44	; 0x2c
 8006aec:	191b      	adds	r3, r3, r4
 8006aee:	2408      	movs	r4, #8
 8006af0:	46a4      	mov	ip, r4
 8006af2:	44bc      	add	ip, r7
 8006af4:	4463      	add	r3, ip
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	f7ff fa6c 	bl	8005fd4 <LCD_DrawFastVLine>
	while (x < y) {
 8006afc:	2310      	movs	r3, #16
 8006afe:	2208      	movs	r2, #8
 8006b00:	189b      	adds	r3, r3, r2
 8006b02:	19da      	adds	r2, r3, r7
 8006b04:	230e      	movs	r3, #14
 8006b06:	2108      	movs	r1, #8
 8006b08:	185b      	adds	r3, r3, r1
 8006b0a:	19db      	adds	r3, r3, r7
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	5e52      	ldrsh	r2, [r2, r1]
 8006b10:	2100      	movs	r1, #0
 8006b12:	5e5b      	ldrsh	r3, [r3, r1]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	da00      	bge.n	8006b1a <LCD_FillCircleHelper+0x2fa>
 8006b18:	e6c6      	b.n	80068a8 <LCD_FillCircleHelper+0x88>
		}
	}
}
 8006b1a:	46c0      	nop			; (mov r8, r8)
 8006b1c:	46c0      	nop			; (mov r8, r8)
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	b009      	add	sp, #36	; 0x24
 8006b22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b24 <LCD_FillRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRect(int16_t x, int16_t y1, int16_t w, int16_t h,
		uint16_t fillcolor) {
 8006b24:	b5b0      	push	{r4, r5, r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	0005      	movs	r5, r0
 8006b2c:	000c      	movs	r4, r1
 8006b2e:	0010      	movs	r0, r2
 8006b30:	0019      	movs	r1, r3
 8006b32:	1dbb      	adds	r3, r7, #6
 8006b34:	1c2a      	adds	r2, r5, #0
 8006b36:	801a      	strh	r2, [r3, #0]
 8006b38:	1d3b      	adds	r3, r7, #4
 8006b3a:	1c22      	adds	r2, r4, #0
 8006b3c:	801a      	strh	r2, [r3, #0]
 8006b3e:	1cbb      	adds	r3, r7, #2
 8006b40:	1c02      	adds	r2, r0, #0
 8006b42:	801a      	strh	r2, [r3, #0]
 8006b44:	003b      	movs	r3, r7
 8006b46:	1c0a      	adds	r2, r1, #0
 8006b48:	801a      	strh	r2, [r3, #0]
	int16_t x2, y2;

	// Initial off-screen clipping
	if ((w <= 0) || (h <= 0) || (x >= m_width) || (y1 >= m_height)
 8006b4a:	1cbb      	adds	r3, r7, #2
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	5e9b      	ldrsh	r3, [r3, r2]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	dc00      	bgt.n	8006b56 <LCD_FillRect+0x32>
 8006b54:	e0ba      	b.n	8006ccc <LCD_FillRect+0x1a8>
 8006b56:	003b      	movs	r3, r7
 8006b58:	2200      	movs	r2, #0
 8006b5a:	5e9b      	ldrsh	r3, [r3, r2]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	dc00      	bgt.n	8006b62 <LCD_FillRect+0x3e>
 8006b60:	e0b4      	b.n	8006ccc <LCD_FillRect+0x1a8>
 8006b62:	4b5c      	ldr	r3, [pc, #368]	; (8006cd4 <LCD_FillRect+0x1b0>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	5e9b      	ldrsh	r3, [r3, r2]
 8006b68:	1dba      	adds	r2, r7, #6
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	5e52      	ldrsh	r2, [r2, r1]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	db00      	blt.n	8006b74 <LCD_FillRect+0x50>
 8006b72:	e0ab      	b.n	8006ccc <LCD_FillRect+0x1a8>
 8006b74:	4b58      	ldr	r3, [pc, #352]	; (8006cd8 <LCD_FillRect+0x1b4>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	5e9b      	ldrsh	r3, [r3, r2]
 8006b7a:	1d3a      	adds	r2, r7, #4
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	5e52      	ldrsh	r2, [r2, r1]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	db00      	blt.n	8006b86 <LCD_FillRect+0x62>
 8006b84:	e0a2      	b.n	8006ccc <LCD_FillRect+0x1a8>
			|| ((x2 = x + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 8006b86:	1dbb      	adds	r3, r7, #6
 8006b88:	881a      	ldrh	r2, [r3, #0]
 8006b8a:	1cbb      	adds	r3, r7, #2
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	18d3      	adds	r3, r2, r3
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	3b01      	subs	r3, #1
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	210e      	movs	r1, #14
 8006b98:	187b      	adds	r3, r7, r1
 8006b9a:	801a      	strh	r2, [r3, #0]
 8006b9c:	187b      	adds	r3, r7, r1
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	5e9b      	ldrsh	r3, [r3, r2]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	da00      	bge.n	8006ba8 <LCD_FillRect+0x84>
 8006ba6:	e091      	b.n	8006ccc <LCD_FillRect+0x1a8>
 8006ba8:	1d3b      	adds	r3, r7, #4
 8006baa:	881a      	ldrh	r2, [r3, #0]
 8006bac:	003b      	movs	r3, r7
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	18d3      	adds	r3, r2, r3
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	210c      	movs	r1, #12
 8006bba:	187b      	adds	r3, r7, r1
 8006bbc:	801a      	strh	r2, [r3, #0]
 8006bbe:	187b      	adds	r3, r7, r1
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	5e9b      	ldrsh	r3, [r3, r2]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	da00      	bge.n	8006bca <LCD_FillRect+0xa6>
 8006bc8:	e080      	b.n	8006ccc <LCD_FillRect+0x1a8>
		return;
	if (x < 0) { // Clip left
 8006bca:	1dbb      	adds	r3, r7, #6
 8006bcc:	2200      	movs	r2, #0
 8006bce:	5e9b      	ldrsh	r3, [r3, r2]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	da0a      	bge.n	8006bea <LCD_FillRect+0xc6>
		w += x;
 8006bd4:	1cbb      	adds	r3, r7, #2
 8006bd6:	881a      	ldrh	r2, [r3, #0]
 8006bd8:	1dbb      	adds	r3, r7, #6
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	18d3      	adds	r3, r2, r3
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	1cbb      	adds	r3, r7, #2
 8006be2:	801a      	strh	r2, [r3, #0]
		x = 0;
 8006be4:	1dbb      	adds	r3, r7, #6
 8006be6:	2200      	movs	r2, #0
 8006be8:	801a      	strh	r2, [r3, #0]
	}
	if (y1 < 0) { // Clip top
 8006bea:	1d3b      	adds	r3, r7, #4
 8006bec:	2200      	movs	r2, #0
 8006bee:	5e9b      	ldrsh	r3, [r3, r2]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	da0a      	bge.n	8006c0a <LCD_FillRect+0xe6>
		h += y1;
 8006bf4:	003b      	movs	r3, r7
 8006bf6:	881a      	ldrh	r2, [r3, #0]
 8006bf8:	1d3b      	adds	r3, r7, #4
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	18d3      	adds	r3, r2, r3
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	003b      	movs	r3, r7
 8006c02:	801a      	strh	r2, [r3, #0]
		y1 = 0;
 8006c04:	1d3b      	adds	r3, r7, #4
 8006c06:	2200      	movs	r2, #0
 8006c08:	801a      	strh	r2, [r3, #0]
	}
	if (x2 >= m_width) { // Clip right
 8006c0a:	4b32      	ldr	r3, [pc, #200]	; (8006cd4 <LCD_FillRect+0x1b0>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	5e9b      	ldrsh	r3, [r3, r2]
 8006c10:	210e      	movs	r1, #14
 8006c12:	187a      	adds	r2, r7, r1
 8006c14:	2000      	movs	r0, #0
 8006c16:	5e12      	ldrsh	r2, [r2, r0]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	db11      	blt.n	8006c40 <LCD_FillRect+0x11c>
		x2 = m_width - 1;
 8006c1c:	4b2d      	ldr	r3, [pc, #180]	; (8006cd4 <LCD_FillRect+0x1b0>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	5e9b      	ldrsh	r3, [r3, r2]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	187b      	adds	r3, r7, r1
 8006c2a:	801a      	strh	r2, [r3, #0]
		w = x2 - x + 1;
 8006c2c:	187b      	adds	r3, r7, r1
 8006c2e:	881a      	ldrh	r2, [r3, #0]
 8006c30:	1dbb      	adds	r3, r7, #6
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	3301      	adds	r3, #1
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	1cbb      	adds	r3, r7, #2
 8006c3e:	801a      	strh	r2, [r3, #0]
	}
	if (y2 >= m_height) { // Clip bottom
 8006c40:	4b25      	ldr	r3, [pc, #148]	; (8006cd8 <LCD_FillRect+0x1b4>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	5e9b      	ldrsh	r3, [r3, r2]
 8006c46:	210c      	movs	r1, #12
 8006c48:	187a      	adds	r2, r7, r1
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	5e12      	ldrsh	r2, [r2, r0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	db11      	blt.n	8006c76 <LCD_FillRect+0x152>
		y2 = m_height - 1;
 8006c52:	4b21      	ldr	r3, [pc, #132]	; (8006cd8 <LCD_FillRect+0x1b4>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	5e9b      	ldrsh	r3, [r3, r2]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	187b      	adds	r3, r7, r1
 8006c60:	801a      	strh	r2, [r3, #0]
		h = y2 - y1 + 1;
 8006c62:	187b      	adds	r3, r7, r1
 8006c64:	881a      	ldrh	r2, [r3, #0]
 8006c66:	1d3b      	adds	r3, r7, #4
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	3301      	adds	r3, #1
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	003b      	movs	r3, r7
 8006c74:	801a      	strh	r2, [r3, #0]
	}

	LCD_SetAddrWindow(x, y1, x2, y2);
 8006c76:	1dbb      	adds	r3, r7, #6
 8006c78:	2000      	movs	r0, #0
 8006c7a:	5e18      	ldrsh	r0, [r3, r0]
 8006c7c:	1d3b      	adds	r3, r7, #4
 8006c7e:	2100      	movs	r1, #0
 8006c80:	5e59      	ldrsh	r1, [r3, r1]
 8006c82:	230e      	movs	r3, #14
 8006c84:	18fb      	adds	r3, r7, r3
 8006c86:	2200      	movs	r2, #0
 8006c88:	5e9a      	ldrsh	r2, [r3, r2]
 8006c8a:	230c      	movs	r3, #12
 8006c8c:	18fb      	adds	r3, r7, r3
 8006c8e:	2400      	movs	r4, #0
 8006c90:	5f1b      	ldrsh	r3, [r3, r4]
 8006c92:	f000 fc29 	bl	80074e8 <LCD_SetAddrWindow>
	LCD_Flood(fillcolor, (uint32_t) w * (uint32_t) h);
 8006c96:	1cbb      	adds	r3, r7, #2
 8006c98:	2200      	movs	r2, #0
 8006c9a:	5e9b      	ldrsh	r3, [r3, r2]
 8006c9c:	003a      	movs	r2, r7
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	5e52      	ldrsh	r2, [r2, r1]
 8006ca2:	435a      	muls	r2, r3
 8006ca4:	2320      	movs	r3, #32
 8006ca6:	18fb      	adds	r3, r7, r3
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	0011      	movs	r1, r2
 8006cac:	0018      	movs	r0, r3
 8006cae:	f000 f905 	bl	8006ebc <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8006cb2:	4b08      	ldr	r3, [pc, #32]	; (8006cd4 <LCD_FillRect+0x1b0>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	5e9b      	ldrsh	r3, [r3, r2]
 8006cb8:	1e5a      	subs	r2, r3, #1
 8006cba:	4b07      	ldr	r3, [pc, #28]	; (8006cd8 <LCD_FillRect+0x1b4>)
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	5e5b      	ldrsh	r3, [r3, r1]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	f000 fc0f 	bl	80074e8 <LCD_SetAddrWindow>
 8006cca:	e000      	b.n	8006cce <LCD_FillRect+0x1aa>
		return;
 8006ccc:	46c0      	nop			; (mov r8, r8)
}
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	b004      	add	sp, #16
 8006cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8006cd4:	20000566 	.word	0x20000566
 8006cd8:	20000568 	.word	0x20000568

08006cdc <LCD_FillRoundRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 8006cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af02      	add	r7, sp, #8
 8006ce2:	0005      	movs	r5, r0
 8006ce4:	000c      	movs	r4, r1
 8006ce6:	0010      	movs	r0, r2
 8006ce8:	0019      	movs	r1, r3
 8006cea:	1dbb      	adds	r3, r7, #6
 8006cec:	1c2a      	adds	r2, r5, #0
 8006cee:	801a      	strh	r2, [r3, #0]
 8006cf0:	1d3b      	adds	r3, r7, #4
 8006cf2:	1c22      	adds	r2, r4, #0
 8006cf4:	801a      	strh	r2, [r3, #0]
 8006cf6:	1cbb      	adds	r3, r7, #2
 8006cf8:	1c02      	adds	r2, r0, #0
 8006cfa:	801a      	strh	r2, [r3, #0]
 8006cfc:	003b      	movs	r3, r7
 8006cfe:	1c0a      	adds	r2, r1, #0
 8006d00:	801a      	strh	r2, [r3, #0]
	// smarter version
	LCD_FillRect(x + r, y, w - 2 * r, h, color);
 8006d02:	1dbb      	adds	r3, r7, #6
 8006d04:	881a      	ldrh	r2, [r3, #0]
 8006d06:	2518      	movs	r5, #24
 8006d08:	2408      	movs	r4, #8
 8006d0a:	192b      	adds	r3, r5, r4
 8006d0c:	19db      	adds	r3, r3, r7
 8006d0e:	881b      	ldrh	r3, [r3, #0]
 8006d10:	18d3      	adds	r3, r2, r3
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	b218      	sxth	r0, r3
 8006d16:	1cbb      	adds	r3, r7, #2
 8006d18:	881a      	ldrh	r2, [r3, #0]
 8006d1a:	1929      	adds	r1, r5, r4
 8006d1c:	19cb      	adds	r3, r1, r7
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	18db      	adds	r3, r3, r3
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	b21a      	sxth	r2, r3
 8006d2a:	003b      	movs	r3, r7
 8006d2c:	2400      	movs	r4, #0
 8006d2e:	5f1c      	ldrsh	r4, [r3, r4]
 8006d30:	1d3b      	adds	r3, r7, #4
 8006d32:	2100      	movs	r1, #0
 8006d34:	5e59      	ldrsh	r1, [r3, r1]
 8006d36:	261c      	movs	r6, #28
 8006d38:	2308      	movs	r3, #8
 8006d3a:	18f3      	adds	r3, r6, r3
 8006d3c:	19db      	adds	r3, r3, r7
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	9300      	str	r3, [sp, #0]
 8006d42:	0023      	movs	r3, r4
 8006d44:	f7ff feee 	bl	8006b24 <LCD_FillRect>

	// draw four corners
	LCD_FillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8006d48:	1dbb      	adds	r3, r7, #6
 8006d4a:	881a      	ldrh	r2, [r3, #0]
 8006d4c:	1cbb      	adds	r3, r7, #2
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	18d3      	adds	r3, r2, r3
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	2408      	movs	r4, #8
 8006d56:	192b      	adds	r3, r5, r4
 8006d58:	19db      	adds	r3, r3, r7
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	b218      	sxth	r0, r3
 8006d66:	1d3b      	adds	r3, r7, #4
 8006d68:	881a      	ldrh	r2, [r3, #0]
 8006d6a:	192b      	adds	r3, r5, r4
 8006d6c:	19db      	adds	r3, r3, r7
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	18d3      	adds	r3, r2, r3
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	b219      	sxth	r1, r3
 8006d76:	003b      	movs	r3, r7
 8006d78:	881a      	ldrh	r2, [r3, #0]
 8006d7a:	192b      	adds	r3, r5, r4
 8006d7c:	19db      	adds	r3, r3, r7
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	18db      	adds	r3, r3, r3
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	b21a      	sxth	r2, r3
 8006d8e:	192b      	adds	r3, r5, r4
 8006d90:	19db      	adds	r3, r3, r7
 8006d92:	2400      	movs	r4, #0
 8006d94:	5f1c      	ldrsh	r4, [r3, r4]
 8006d96:	2308      	movs	r3, #8
 8006d98:	18f3      	adds	r3, r6, r3
 8006d9a:	19db      	adds	r3, r3, r7
 8006d9c:	881b      	ldrh	r3, [r3, #0]
 8006d9e:	9301      	str	r3, [sp, #4]
 8006da0:	9200      	str	r2, [sp, #0]
 8006da2:	2301      	movs	r3, #1
 8006da4:	0022      	movs	r2, r4
 8006da6:	f7ff fd3b 	bl	8006820 <LCD_FillCircleHelper>
	LCD_FillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8006daa:	1dbb      	adds	r3, r7, #6
 8006dac:	881a      	ldrh	r2, [r3, #0]
 8006dae:	002c      	movs	r4, r5
 8006db0:	2508      	movs	r5, #8
 8006db2:	1963      	adds	r3, r4, r5
 8006db4:	19db      	adds	r3, r3, r7
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	18d3      	adds	r3, r2, r3
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	b218      	sxth	r0, r3
 8006dbe:	1d3b      	adds	r3, r7, #4
 8006dc0:	881a      	ldrh	r2, [r3, #0]
 8006dc2:	1963      	adds	r3, r4, r5
 8006dc4:	19db      	adds	r3, r3, r7
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	18d3      	adds	r3, r2, r3
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	b219      	sxth	r1, r3
 8006dce:	003b      	movs	r3, r7
 8006dd0:	881a      	ldrh	r2, [r3, #0]
 8006dd2:	1963      	adds	r3, r4, r5
 8006dd4:	19db      	adds	r3, r3, r7
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	18db      	adds	r3, r3, r3
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	b21a      	sxth	r2, r3
 8006de6:	1963      	adds	r3, r4, r5
 8006de8:	19db      	adds	r3, r3, r7
 8006dea:	2400      	movs	r4, #0
 8006dec:	5f1c      	ldrsh	r4, [r3, r4]
 8006dee:	1973      	adds	r3, r6, r5
 8006df0:	19db      	adds	r3, r3, r7
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	9301      	str	r3, [sp, #4]
 8006df6:	9200      	str	r2, [sp, #0]
 8006df8:	2302      	movs	r3, #2
 8006dfa:	0022      	movs	r2, r4
 8006dfc:	f7ff fd10 	bl	8006820 <LCD_FillCircleHelper>
}
 8006e00:	46c0      	nop			; (mov r8, r8)
 8006e02:	46bd      	mov	sp, r7
 8006e04:	b003      	add	sp, #12
 8006e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e08 <LCD_FillScreen>:
 * 
 * \param color	Color
 * 
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	0002      	movs	r2, r0
 8006e10:	1dbb      	adds	r3, r7, #6
 8006e12:	801a      	strh	r2, [r3, #0]
	// state, just need to set the address pointer to the top-left corner.
	// Although we could fill in any direction, the code uses the current
	// screen rotation because some users find it disconcerting when a
	// fill does not occur top-to-bottom.
	uint16_t x, y;
	switch (m_rotation) {
 8006e14:	4b27      	ldr	r3, [pc, #156]	; (8006eb4 <LCD_FillScreen+0xac>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d020      	beq.n	8006e5e <LCD_FillScreen+0x56>
 8006e1c:	dc03      	bgt.n	8006e26 <LCD_FillScreen+0x1e>
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d00a      	beq.n	8006e38 <LCD_FillScreen+0x30>
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d011      	beq.n	8006e4a <LCD_FillScreen+0x42>
	default:
		x = 0;
 8006e26:	230e      	movs	r3, #14
 8006e28:	18fb      	adds	r3, r7, r3
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	801a      	strh	r2, [r3, #0]
		y = 0;
 8006e2e:	230c      	movs	r3, #12
 8006e30:	18fb      	adds	r3, r7, r3
 8006e32:	2200      	movs	r2, #0
 8006e34:	801a      	strh	r2, [r3, #0]
		break;
 8006e36:	e01c      	b.n	8006e72 <LCD_FillScreen+0x6a>
	case 1:
		x = TFTWIDTH - 1;
 8006e38:	230e      	movs	r3, #14
 8006e3a:	18fb      	adds	r3, r7, r3
 8006e3c:	22ef      	movs	r2, #239	; 0xef
 8006e3e:	801a      	strh	r2, [r3, #0]
		y = 0;
 8006e40:	230c      	movs	r3, #12
 8006e42:	18fb      	adds	r3, r7, r3
 8006e44:	2200      	movs	r2, #0
 8006e46:	801a      	strh	r2, [r3, #0]
		break;
 8006e48:	e013      	b.n	8006e72 <LCD_FillScreen+0x6a>
	case 2:
		x = TFTWIDTH - 1;
 8006e4a:	230e      	movs	r3, #14
 8006e4c:	18fb      	adds	r3, r7, r3
 8006e4e:	22ef      	movs	r2, #239	; 0xef
 8006e50:	801a      	strh	r2, [r3, #0]
		y = TFTHEIGHT - 1;
 8006e52:	230c      	movs	r3, #12
 8006e54:	18fb      	adds	r3, r7, r3
 8006e56:	2240      	movs	r2, #64	; 0x40
 8006e58:	32ff      	adds	r2, #255	; 0xff
 8006e5a:	801a      	strh	r2, [r3, #0]
		break;
 8006e5c:	e009      	b.n	8006e72 <LCD_FillScreen+0x6a>
	case 3:
		x = 0;
 8006e5e:	230e      	movs	r3, #14
 8006e60:	18fb      	adds	r3, r7, r3
 8006e62:	2200      	movs	r2, #0
 8006e64:	801a      	strh	r2, [r3, #0]
		y = TFTHEIGHT - 1;
 8006e66:	230c      	movs	r3, #12
 8006e68:	18fb      	adds	r3, r7, r3
 8006e6a:	2240      	movs	r2, #64	; 0x40
 8006e6c:	32ff      	adds	r2, #255	; 0xff
 8006e6e:	801a      	strh	r2, [r3, #0]
		break;
 8006e70:	46c0      	nop			; (mov r8, r8)
	}
	LCD_CS_LOW();
 8006e72:	4b11      	ldr	r3, [pc, #68]	; (8006eb8 <LCD_FillScreen+0xb0>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	2100      	movs	r1, #0
 8006e78:	0018      	movs	r0, r3
 8006e7a:	f7fd fd8d 	bl	8004998 <gpio_write>
	LCD_WriteRegister16(0x0020, x);
 8006e7e:	230e      	movs	r3, #14
 8006e80:	18fb      	adds	r3, r7, r3
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	0019      	movs	r1, r3
 8006e86:	2020      	movs	r0, #32
 8006e88:	f000 fc38 	bl	80076fc <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8006e8c:	230c      	movs	r3, #12
 8006e8e:	18fb      	adds	r3, r7, r3
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	0019      	movs	r1, r3
 8006e94:	2021      	movs	r0, #33	; 0x21
 8006e96:	f000 fc31 	bl	80076fc <LCD_WriteRegister16>

	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 8006e9a:	2396      	movs	r3, #150	; 0x96
 8006e9c:	025a      	lsls	r2, r3, #9
 8006e9e:	1dbb      	adds	r3, r7, #6
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	0011      	movs	r1, r2
 8006ea4:	0018      	movs	r0, r3
 8006ea6:	f000 f809 	bl	8006ebc <LCD_Flood>
}
 8006eaa:	46c0      	nop			; (mov r8, r8)
 8006eac:	46bd      	mov	sp, r7
 8006eae:	b004      	add	sp, #16
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	46c0      	nop			; (mov r8, r8)
 8006eb4:	20000573 	.word	0x20000573
 8006eb8:	48000400 	.word	0x48000400

08006ebc <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 * 
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 8006ebc:	b5b0      	push	{r4, r5, r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	0002      	movs	r2, r0
 8006ec4:	6039      	str	r1, [r7, #0]
 8006ec6:	1dbb      	adds	r3, r7, #6
 8006ec8:	801a      	strh	r2, [r3, #0]
	uint16_t blocks;
	uint8_t i, hi = color >> 8, lo = color;
 8006eca:	1dbb      	adds	r3, r7, #6
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	0a1b      	lsrs	r3, r3, #8
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	240c      	movs	r4, #12
 8006ed4:	193b      	adds	r3, r7, r4
 8006ed6:	701a      	strb	r2, [r3, #0]
 8006ed8:	250b      	movs	r5, #11
 8006eda:	197b      	adds	r3, r7, r5
 8006edc:	1dba      	adds	r2, r7, #6
 8006ede:	8812      	ldrh	r2, [r2, #0]
 8006ee0:	701a      	strb	r2, [r3, #0]

	LCD_CS_LOW();
 8006ee2:	4bc5      	ldr	r3, [pc, #788]	; (80071f8 <LCD_Flood+0x33c>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	0018      	movs	r0, r3
 8006eea:	f7fd fd55 	bl	8004998 <gpio_write>
	LCD_CD_LOW();
 8006eee:	2390      	movs	r3, #144	; 0x90
 8006ef0:	05db      	lsls	r3, r3, #23
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	2104      	movs	r1, #4
 8006ef6:	0018      	movs	r0, r3
 8006ef8:	f7fd fd4e 	bl	8004998 <gpio_write>
	LCD_Write8(0x00); // High byte of GRAM register...
 8006efc:	2000      	movs	r0, #0
 8006efe:	f000 fb83 	bl	8007608 <LCD_Write8>
	LCD_Write8(0x22); // Write data to GRAM
 8006f02:	2022      	movs	r0, #34	; 0x22
 8006f04:	f000 fb80 	bl	8007608 <LCD_Write8>

	// Write first pixel normally, decrement counter by 1
	LCD_CD_HIGH();
 8006f08:	2390      	movs	r3, #144	; 0x90
 8006f0a:	05db      	lsls	r3, r3, #23
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	2104      	movs	r1, #4
 8006f10:	0018      	movs	r0, r3
 8006f12:	f7fd fd41 	bl	8004998 <gpio_write>
	LCD_Write8(hi);
 8006f16:	193b      	adds	r3, r7, r4
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	0018      	movs	r0, r3
 8006f1c:	f000 fb74 	bl	8007608 <LCD_Write8>
	LCD_Write8(lo);
 8006f20:	197b      	adds	r3, r7, r5
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	0018      	movs	r0, r3
 8006f26:	f000 fb6f 	bl	8007608 <LCD_Write8>
	len--;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	603b      	str	r3, [r7, #0]

	blocks = (uint16_t) (len / 64); // 64 pixels/block
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	099a      	lsrs	r2, r3, #6
 8006f34:	230e      	movs	r3, #14
 8006f36:	18fb      	adds	r3, r7, r3
 8006f38:	801a      	strh	r2, [r3, #0]
	if (hi == lo) {
 8006f3a:	193a      	adds	r2, r7, r4
 8006f3c:	197b      	adds	r3, r7, r5
 8006f3e:	7812      	ldrb	r2, [r2, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d000      	beq.n	8006f48 <LCD_Flood+0x8c>
 8006f46:	e129      	b.n	800719c <LCD_Flood+0x2e0>
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (blocks--) {
 8006f48:	e0ae      	b.n	80070a8 <LCD_Flood+0x1ec>
			i = 16; // 64 pixels/block / 4 pixels/pass
 8006f4a:	230d      	movs	r3, #13
 8006f4c:	18fb      	adds	r3, r7, r3
 8006f4e:	2210      	movs	r2, #16
 8006f50:	701a      	strb	r2, [r3, #0]
			do {
				LCD_WR_STROBE();
 8006f52:	2390      	movs	r3, #144	; 0x90
 8006f54:	05db      	lsls	r3, r3, #23
 8006f56:	2200      	movs	r2, #0
 8006f58:	2101      	movs	r1, #1
 8006f5a:	0018      	movs	r0, r3
 8006f5c:	f7fd fd1c 	bl	8004998 <gpio_write>
 8006f60:	2001      	movs	r0, #1
 8006f62:	f7fe fcc3 	bl	80058ec <delay>
 8006f66:	2390      	movs	r3, #144	; 0x90
 8006f68:	05db      	lsls	r3, r3, #23
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	0018      	movs	r0, r3
 8006f70:	f7fd fd12 	bl	8004998 <gpio_write>
 8006f74:	2001      	movs	r0, #1
 8006f76:	f7fe fcb9 	bl	80058ec <delay>
				LCD_WR_STROBE();
 8006f7a:	2390      	movs	r3, #144	; 0x90
 8006f7c:	05db      	lsls	r3, r3, #23
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2101      	movs	r1, #1
 8006f82:	0018      	movs	r0, r3
 8006f84:	f7fd fd08 	bl	8004998 <gpio_write>
 8006f88:	2001      	movs	r0, #1
 8006f8a:	f7fe fcaf 	bl	80058ec <delay>
 8006f8e:	2390      	movs	r3, #144	; 0x90
 8006f90:	05db      	lsls	r3, r3, #23
 8006f92:	2201      	movs	r2, #1
 8006f94:	2101      	movs	r1, #1
 8006f96:	0018      	movs	r0, r3
 8006f98:	f7fd fcfe 	bl	8004998 <gpio_write>
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	f7fe fca5 	bl	80058ec <delay>
				LCD_WR_STROBE();
 8006fa2:	2390      	movs	r3, #144	; 0x90
 8006fa4:	05db      	lsls	r3, r3, #23
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	2101      	movs	r1, #1
 8006faa:	0018      	movs	r0, r3
 8006fac:	f7fd fcf4 	bl	8004998 <gpio_write>
 8006fb0:	2001      	movs	r0, #1
 8006fb2:	f7fe fc9b 	bl	80058ec <delay>
 8006fb6:	2390      	movs	r3, #144	; 0x90
 8006fb8:	05db      	lsls	r3, r3, #23
 8006fba:	2201      	movs	r2, #1
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	0018      	movs	r0, r3
 8006fc0:	f7fd fcea 	bl	8004998 <gpio_write>
 8006fc4:	2001      	movs	r0, #1
 8006fc6:	f7fe fc91 	bl	80058ec <delay>
				LCD_WR_STROBE(); // 2 bytes/pixel
 8006fca:	2390      	movs	r3, #144	; 0x90
 8006fcc:	05db      	lsls	r3, r3, #23
 8006fce:	2200      	movs	r2, #0
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	f7fd fce0 	bl	8004998 <gpio_write>
 8006fd8:	2001      	movs	r0, #1
 8006fda:	f7fe fc87 	bl	80058ec <delay>
 8006fde:	2390      	movs	r3, #144	; 0x90
 8006fe0:	05db      	lsls	r3, r3, #23
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	f7fd fcd6 	bl	8004998 <gpio_write>
 8006fec:	2001      	movs	r0, #1
 8006fee:	f7fe fc7d 	bl	80058ec <delay>
				LCD_WR_STROBE();
 8006ff2:	2390      	movs	r3, #144	; 0x90
 8006ff4:	05db      	lsls	r3, r3, #23
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	f7fd fccc 	bl	8004998 <gpio_write>
 8007000:	2001      	movs	r0, #1
 8007002:	f7fe fc73 	bl	80058ec <delay>
 8007006:	2390      	movs	r3, #144	; 0x90
 8007008:	05db      	lsls	r3, r3, #23
 800700a:	2201      	movs	r2, #1
 800700c:	2101      	movs	r1, #1
 800700e:	0018      	movs	r0, r3
 8007010:	f7fd fcc2 	bl	8004998 <gpio_write>
 8007014:	2001      	movs	r0, #1
 8007016:	f7fe fc69 	bl	80058ec <delay>
				LCD_WR_STROBE();
 800701a:	2390      	movs	r3, #144	; 0x90
 800701c:	05db      	lsls	r3, r3, #23
 800701e:	2200      	movs	r2, #0
 8007020:	2101      	movs	r1, #1
 8007022:	0018      	movs	r0, r3
 8007024:	f7fd fcb8 	bl	8004998 <gpio_write>
 8007028:	2001      	movs	r0, #1
 800702a:	f7fe fc5f 	bl	80058ec <delay>
 800702e:	2390      	movs	r3, #144	; 0x90
 8007030:	05db      	lsls	r3, r3, #23
 8007032:	2201      	movs	r2, #1
 8007034:	2101      	movs	r1, #1
 8007036:	0018      	movs	r0, r3
 8007038:	f7fd fcae 	bl	8004998 <gpio_write>
 800703c:	2001      	movs	r0, #1
 800703e:	f7fe fc55 	bl	80058ec <delay>
				LCD_WR_STROBE();
 8007042:	2390      	movs	r3, #144	; 0x90
 8007044:	05db      	lsls	r3, r3, #23
 8007046:	2200      	movs	r2, #0
 8007048:	2101      	movs	r1, #1
 800704a:	0018      	movs	r0, r3
 800704c:	f7fd fca4 	bl	8004998 <gpio_write>
 8007050:	2001      	movs	r0, #1
 8007052:	f7fe fc4b 	bl	80058ec <delay>
 8007056:	2390      	movs	r3, #144	; 0x90
 8007058:	05db      	lsls	r3, r3, #23
 800705a:	2201      	movs	r2, #1
 800705c:	2101      	movs	r1, #1
 800705e:	0018      	movs	r0, r3
 8007060:	f7fd fc9a 	bl	8004998 <gpio_write>
 8007064:	2001      	movs	r0, #1
 8007066:	f7fe fc41 	bl	80058ec <delay>
				LCD_WR_STROBE(); // x 4 pixels
 800706a:	2390      	movs	r3, #144	; 0x90
 800706c:	05db      	lsls	r3, r3, #23
 800706e:	2200      	movs	r2, #0
 8007070:	2101      	movs	r1, #1
 8007072:	0018      	movs	r0, r3
 8007074:	f7fd fc90 	bl	8004998 <gpio_write>
 8007078:	2001      	movs	r0, #1
 800707a:	f7fe fc37 	bl	80058ec <delay>
 800707e:	2390      	movs	r3, #144	; 0x90
 8007080:	05db      	lsls	r3, r3, #23
 8007082:	2201      	movs	r2, #1
 8007084:	2101      	movs	r1, #1
 8007086:	0018      	movs	r0, r3
 8007088:	f7fd fc86 	bl	8004998 <gpio_write>
 800708c:	2001      	movs	r0, #1
 800708e:	f7fe fc2d 	bl	80058ec <delay>
			} while (--i);
 8007092:	210d      	movs	r1, #13
 8007094:	187b      	adds	r3, r7, r1
 8007096:	187a      	adds	r2, r7, r1
 8007098:	7812      	ldrb	r2, [r2, #0]
 800709a:	3a01      	subs	r2, #1
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	187b      	adds	r3, r7, r1
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d000      	beq.n	80070a8 <LCD_Flood+0x1ec>
 80070a6:	e754      	b.n	8006f52 <LCD_Flood+0x96>
		while (blocks--) {
 80070a8:	220e      	movs	r2, #14
 80070aa:	18bb      	adds	r3, r7, r2
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	18ba      	adds	r2, r7, r2
 80070b0:	1e59      	subs	r1, r3, #1
 80070b2:	8011      	strh	r1, [r2, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d000      	beq.n	80070ba <LCD_Flood+0x1fe>
 80070b8:	e747      	b.n	8006f4a <LCD_Flood+0x8e>
		}
		// Fill any remaining pixels (1 to 64)
		for (i = (uint8_t) len & 63; i--;) {
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	230d      	movs	r3, #13
 80070c0:	18fb      	adds	r3, r7, r3
 80070c2:	213f      	movs	r1, #63	; 0x3f
 80070c4:	400a      	ands	r2, r1
 80070c6:	701a      	strb	r2, [r3, #0]
 80070c8:	e027      	b.n	800711a <LCD_Flood+0x25e>
			LCD_WR_STROBE();
 80070ca:	2390      	movs	r3, #144	; 0x90
 80070cc:	05db      	lsls	r3, r3, #23
 80070ce:	2200      	movs	r2, #0
 80070d0:	2101      	movs	r1, #1
 80070d2:	0018      	movs	r0, r3
 80070d4:	f7fd fc60 	bl	8004998 <gpio_write>
 80070d8:	2001      	movs	r0, #1
 80070da:	f7fe fc07 	bl	80058ec <delay>
 80070de:	2390      	movs	r3, #144	; 0x90
 80070e0:	05db      	lsls	r3, r3, #23
 80070e2:	2201      	movs	r2, #1
 80070e4:	2101      	movs	r1, #1
 80070e6:	0018      	movs	r0, r3
 80070e8:	f7fd fc56 	bl	8004998 <gpio_write>
 80070ec:	2001      	movs	r0, #1
 80070ee:	f7fe fbfd 	bl	80058ec <delay>
			LCD_WR_STROBE();
 80070f2:	2390      	movs	r3, #144	; 0x90
 80070f4:	05db      	lsls	r3, r3, #23
 80070f6:	2200      	movs	r2, #0
 80070f8:	2101      	movs	r1, #1
 80070fa:	0018      	movs	r0, r3
 80070fc:	f7fd fc4c 	bl	8004998 <gpio_write>
 8007100:	2001      	movs	r0, #1
 8007102:	f7fe fbf3 	bl	80058ec <delay>
 8007106:	2390      	movs	r3, #144	; 0x90
 8007108:	05db      	lsls	r3, r3, #23
 800710a:	2201      	movs	r2, #1
 800710c:	2101      	movs	r1, #1
 800710e:	0018      	movs	r0, r3
 8007110:	f7fd fc42 	bl	8004998 <gpio_write>
 8007114:	2001      	movs	r0, #1
 8007116:	f7fe fbe9 	bl	80058ec <delay>
		for (i = (uint8_t) len & 63; i--;) {
 800711a:	220d      	movs	r2, #13
 800711c:	18bb      	adds	r3, r7, r2
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	18ba      	adds	r2, r7, r2
 8007122:	1e59      	subs	r1, r3, #1
 8007124:	7011      	strb	r1, [r2, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1cf      	bne.n	80070ca <LCD_Flood+0x20e>
 800712a:	e05b      	b.n	80071e4 <LCD_Flood+0x328>
		}
	} else {
		while (blocks--) {
			i = 16; // 64 pixels/block / 4 pixels/pass
 800712c:	230d      	movs	r3, #13
 800712e:	18fb      	adds	r3, r7, r3
 8007130:	2210      	movs	r2, #16
 8007132:	701a      	strb	r2, [r3, #0]
			do {
				LCD_Write8(hi);
 8007134:	240c      	movs	r4, #12
 8007136:	193b      	adds	r3, r7, r4
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	0018      	movs	r0, r3
 800713c:	f000 fa64 	bl	8007608 <LCD_Write8>
				LCD_Write8(lo);
 8007140:	250b      	movs	r5, #11
 8007142:	197b      	adds	r3, r7, r5
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	0018      	movs	r0, r3
 8007148:	f000 fa5e 	bl	8007608 <LCD_Write8>
				LCD_Write8(hi);
 800714c:	193b      	adds	r3, r7, r4
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	0018      	movs	r0, r3
 8007152:	f000 fa59 	bl	8007608 <LCD_Write8>
				LCD_Write8(lo);
 8007156:	197b      	adds	r3, r7, r5
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	0018      	movs	r0, r3
 800715c:	f000 fa54 	bl	8007608 <LCD_Write8>
				LCD_Write8(hi);
 8007160:	193b      	adds	r3, r7, r4
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	0018      	movs	r0, r3
 8007166:	f000 fa4f 	bl	8007608 <LCD_Write8>
				LCD_Write8(lo);
 800716a:	197b      	adds	r3, r7, r5
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	0018      	movs	r0, r3
 8007170:	f000 fa4a 	bl	8007608 <LCD_Write8>
				LCD_Write8(hi);
 8007174:	193b      	adds	r3, r7, r4
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	0018      	movs	r0, r3
 800717a:	f000 fa45 	bl	8007608 <LCD_Write8>
				LCD_Write8(lo);
 800717e:	197b      	adds	r3, r7, r5
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	0018      	movs	r0, r3
 8007184:	f000 fa40 	bl	8007608 <LCD_Write8>
			} while (--i);
 8007188:	210d      	movs	r1, #13
 800718a:	187b      	adds	r3, r7, r1
 800718c:	187a      	adds	r2, r7, r1
 800718e:	7812      	ldrb	r2, [r2, #0]
 8007190:	3a01      	subs	r2, #1
 8007192:	701a      	strb	r2, [r3, #0]
 8007194:	187b      	adds	r3, r7, r1
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1cb      	bne.n	8007134 <LCD_Flood+0x278>
		while (blocks--) {
 800719c:	220e      	movs	r2, #14
 800719e:	18bb      	adds	r3, r7, r2
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	18ba      	adds	r2, r7, r2
 80071a4:	1e59      	subs	r1, r3, #1
 80071a6:	8011      	strh	r1, [r2, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1bf      	bne.n	800712c <LCD_Flood+0x270>
		}
		for (i = (uint8_t) len & 63; i--;) {
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	230d      	movs	r3, #13
 80071b2:	18fb      	adds	r3, r7, r3
 80071b4:	213f      	movs	r1, #63	; 0x3f
 80071b6:	400a      	ands	r2, r1
 80071b8:	701a      	strb	r2, [r3, #0]
 80071ba:	e00b      	b.n	80071d4 <LCD_Flood+0x318>
			LCD_Write8(hi);
 80071bc:	230c      	movs	r3, #12
 80071be:	18fb      	adds	r3, r7, r3
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	0018      	movs	r0, r3
 80071c4:	f000 fa20 	bl	8007608 <LCD_Write8>
			LCD_Write8(lo);
 80071c8:	230b      	movs	r3, #11
 80071ca:	18fb      	adds	r3, r7, r3
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	0018      	movs	r0, r3
 80071d0:	f000 fa1a 	bl	8007608 <LCD_Write8>
		for (i = (uint8_t) len & 63; i--;) {
 80071d4:	220d      	movs	r2, #13
 80071d6:	18bb      	adds	r3, r7, r2
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	18ba      	adds	r2, r7, r2
 80071dc:	1e59      	subs	r1, r3, #1
 80071de:	7011      	strb	r1, [r2, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1eb      	bne.n	80071bc <LCD_Flood+0x300>
		}
	}
	LCD_CS_HIGH();
 80071e4:	4b04      	ldr	r3, [pc, #16]	; (80071f8 <LCD_Flood+0x33c>)
 80071e6:	2201      	movs	r2, #1
 80071e8:	2100      	movs	r1, #0
 80071ea:	0018      	movs	r0, r3
 80071ec:	f7fd fbd4 	bl	8004998 <gpio_write>
}
 80071f0:	46c0      	nop			; (mov r8, r8)
 80071f2:	46bd      	mov	sp, r7
 80071f4:	b004      	add	sp, #16
 80071f6:	bdb0      	pop	{r4, r5, r7, pc}
 80071f8:	48000400 	.word	0x48000400

080071fc <LCD_Printf>:
 * \param fmt	Format text
 * \param 
 * 
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 80071fc:	b40f      	push	{r0, r1, r2, r3}
 80071fe:	b5b0      	push	{r4, r5, r7, lr}
 8007200:	b084      	sub	sp, #16
 8007202:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8007204:	231c      	movs	r3, #28
 8007206:	18fb      	adds	r3, r7, r3
 8007208:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	69b9      	ldr	r1, [r7, #24]
 800720e:	4b3e      	ldr	r3, [pc, #248]	; (8007308 <LCD_Printf+0x10c>)
 8007210:	0018      	movs	r0, r3
 8007212:	f002 fd4d 	bl	8009cb0 <vsiprintf>
	va_end(lst);

	p = buf;
 8007216:	4b3c      	ldr	r3, [pc, #240]	; (8007308 <LCD_Printf+0x10c>)
 8007218:	607b      	str	r3, [r7, #4]
	while (*p) {
 800721a:	e069      	b.n	80072f0 <LCD_Printf+0xf4>
		if (*p == '\n') {
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	2b0a      	cmp	r3, #10
 8007222:	d111      	bne.n	8007248 <LCD_Printf+0x4c>
			m_cursor_y += m_textsize * 8;
 8007224:	4b39      	ldr	r3, [pc, #228]	; (800730c <LCD_Printf+0x110>)
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	b29b      	uxth	r3, r3
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	b29a      	uxth	r2, r3
 800722e:	4b38      	ldr	r3, [pc, #224]	; (8007310 <LCD_Printf+0x114>)
 8007230:	2100      	movs	r1, #0
 8007232:	5e5b      	ldrsh	r3, [r3, r1]
 8007234:	b29b      	uxth	r3, r3
 8007236:	18d3      	adds	r3, r2, r3
 8007238:	b29b      	uxth	r3, r3
 800723a:	b21a      	sxth	r2, r3
 800723c:	4b34      	ldr	r3, [pc, #208]	; (8007310 <LCD_Printf+0x114>)
 800723e:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8007240:	4b34      	ldr	r3, [pc, #208]	; (8007314 <LCD_Printf+0x118>)
 8007242:	2200      	movs	r2, #0
 8007244:	801a      	strh	r2, [r3, #0]
 8007246:	e050      	b.n	80072ea <LCD_Printf+0xee>
		} else if (*p == '\r') {
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	2b0d      	cmp	r3, #13
 800724e:	d04c      	beq.n	80072ea <LCD_Printf+0xee>
			// skip em
		} else {
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor,
 8007250:	4b30      	ldr	r3, [pc, #192]	; (8007314 <LCD_Printf+0x118>)
 8007252:	2000      	movs	r0, #0
 8007254:	5e18      	ldrsh	r0, [r3, r0]
 8007256:	4b2e      	ldr	r3, [pc, #184]	; (8007310 <LCD_Printf+0x114>)
 8007258:	2100      	movs	r1, #0
 800725a:	5e59      	ldrsh	r1, [r3, r1]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	781c      	ldrb	r4, [r3, #0]
 8007260:	4b2d      	ldr	r3, [pc, #180]	; (8007318 <LCD_Printf+0x11c>)
 8007262:	881d      	ldrh	r5, [r3, #0]
 8007264:	4b2d      	ldr	r3, [pc, #180]	; (800731c <LCD_Printf+0x120>)
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	4a28      	ldr	r2, [pc, #160]	; (800730c <LCD_Printf+0x110>)
 800726a:	7812      	ldrb	r2, [r2, #0]
 800726c:	9201      	str	r2, [sp, #4]
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	002b      	movs	r3, r5
 8007272:	0022      	movs	r2, r4
 8007274:	f7ff f99c 	bl	80065b0 <LCD_DrawChar>
					m_textsize);
			m_cursor_x += m_textsize * 6;
 8007278:	4b24      	ldr	r3, [pc, #144]	; (800730c <LCD_Printf+0x110>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	b29b      	uxth	r3, r3
 800727e:	1c1a      	adds	r2, r3, #0
 8007280:	1c13      	adds	r3, r2, #0
 8007282:	18db      	adds	r3, r3, r3
 8007284:	189b      	adds	r3, r3, r2
 8007286:	18db      	adds	r3, r3, r3
 8007288:	b29a      	uxth	r2, r3
 800728a:	4b22      	ldr	r3, [pc, #136]	; (8007314 <LCD_Printf+0x118>)
 800728c:	2100      	movs	r1, #0
 800728e:	5e5b      	ldrsh	r3, [r3, r1]
 8007290:	b29b      	uxth	r3, r3
 8007292:	18d3      	adds	r3, r2, r3
 8007294:	b29b      	uxth	r3, r3
 8007296:	b21a      	sxth	r2, r3
 8007298:	4b1e      	ldr	r3, [pc, #120]	; (8007314 <LCD_Printf+0x118>)
 800729a:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - m_textsize * 6))) {
 800729c:	4b20      	ldr	r3, [pc, #128]	; (8007320 <LCD_Printf+0x124>)
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d022      	beq.n	80072ea <LCD_Printf+0xee>
 80072a4:	4b1b      	ldr	r3, [pc, #108]	; (8007314 <LCD_Printf+0x118>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	5e9b      	ldrsh	r3, [r3, r2]
 80072aa:	0019      	movs	r1, r3
 80072ac:	4b1d      	ldr	r3, [pc, #116]	; (8007324 <LCD_Printf+0x128>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	5e9b      	ldrsh	r3, [r3, r2]
 80072b2:	0018      	movs	r0, r3
 80072b4:	4b15      	ldr	r3, [pc, #84]	; (800730c <LCD_Printf+0x110>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	001a      	movs	r2, r3
 80072ba:	0013      	movs	r3, r2
 80072bc:	0092      	lsls	r2, r2, #2
 80072be:	1a9b      	subs	r3, r3, r2
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	18c3      	adds	r3, r0, r3
 80072c4:	4299      	cmp	r1, r3
 80072c6:	dd10      	ble.n	80072ea <LCD_Printf+0xee>
				m_cursor_y += m_textsize * 8;
 80072c8:	4b10      	ldr	r3, [pc, #64]	; (800730c <LCD_Printf+0x110>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	4b0f      	ldr	r3, [pc, #60]	; (8007310 <LCD_Printf+0x114>)
 80072d4:	2100      	movs	r1, #0
 80072d6:	5e5b      	ldrsh	r3, [r3, r1]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	18d3      	adds	r3, r2, r3
 80072dc:	b29b      	uxth	r3, r3
 80072de:	b21a      	sxth	r2, r3
 80072e0:	4b0b      	ldr	r3, [pc, #44]	; (8007310 <LCD_Printf+0x114>)
 80072e2:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 80072e4:	4b0b      	ldr	r3, [pc, #44]	; (8007314 <LCD_Printf+0x118>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	3301      	adds	r3, #1
 80072ee:	607b      	str	r3, [r7, #4]
	while (*p) {
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d191      	bne.n	800721c <LCD_Printf+0x20>
	}
}
 80072f8:	46c0      	nop			; (mov r8, r8)
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	46bd      	mov	sp, r7
 80072fe:	b002      	add	sp, #8
 8007300:	bcb0      	pop	{r4, r5, r7}
 8007302:	bc08      	pop	{r3}
 8007304:	b004      	add	sp, #16
 8007306:	4718      	bx	r3
 8007308:	20000578 	.word	0x20000578
 800730c:	20000572 	.word	0x20000572
 8007310:	2000056c 	.word	0x2000056c
 8007314:	2000056a 	.word	0x2000056a
 8007318:	2000056e 	.word	0x2000056e
 800731c:	20000570 	.word	0x20000570
 8007320:	20000574 	.word	0x20000574
 8007324:	20000566 	.word	0x20000566

08007328 <LCD_Reset>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Reset(void) {
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 800732e:	4b2f      	ldr	r3, [pc, #188]	; (80073ec <LCD_Reset+0xc4>)
 8007330:	2201      	movs	r2, #1
 8007332:	2100      	movs	r1, #0
 8007334:	0018      	movs	r0, r3
 8007336:	f7fd fb2f 	bl	8004998 <gpio_write>
	LCD_WR_HIGH();
 800733a:	2390      	movs	r3, #144	; 0x90
 800733c:	05db      	lsls	r3, r3, #23
 800733e:	2201      	movs	r2, #1
 8007340:	2101      	movs	r1, #1
 8007342:	0018      	movs	r0, r3
 8007344:	f7fd fb28 	bl	8004998 <gpio_write>
	LCD_RD_HIGH();
 8007348:	2390      	movs	r3, #144	; 0x90
 800734a:	05db      	lsls	r3, r3, #23
 800734c:	2201      	movs	r2, #1
 800734e:	2100      	movs	r1, #0
 8007350:	0018      	movs	r0, r3
 8007352:	f7fd fb21 	bl	8004998 <gpio_write>

	LCD_RST_LOW();
 8007356:	4b26      	ldr	r3, [pc, #152]	; (80073f0 <LCD_Reset+0xc8>)
 8007358:	2200      	movs	r2, #0
 800735a:	2101      	movs	r1, #1
 800735c:	0018      	movs	r0, r3
 800735e:	f7fd fb1b 	bl	8004998 <gpio_write>
	delay(100);
 8007362:	2064      	movs	r0, #100	; 0x64
 8007364:	f7fe fac2 	bl	80058ec <delay>
	LCD_RST_HIGH();
 8007368:	4b21      	ldr	r3, [pc, #132]	; (80073f0 <LCD_Reset+0xc8>)
 800736a:	2201      	movs	r2, #1
 800736c:	2101      	movs	r1, #1
 800736e:	0018      	movs	r0, r3
 8007370:	f7fd fb12 	bl	8004998 <gpio_write>

	// Data transfer sync
	LCD_CS_LOW();
 8007374:	4b1d      	ldr	r3, [pc, #116]	; (80073ec <LCD_Reset+0xc4>)
 8007376:	2200      	movs	r2, #0
 8007378:	2100      	movs	r1, #0
 800737a:	0018      	movs	r0, r3
 800737c:	f7fd fb0c 	bl	8004998 <gpio_write>

	LCD_CD_LOW();
 8007380:	2390      	movs	r3, #144	; 0x90
 8007382:	05db      	lsls	r3, r3, #23
 8007384:	2200      	movs	r2, #0
 8007386:	2104      	movs	r1, #4
 8007388:	0018      	movs	r0, r3
 800738a:	f7fd fb05 	bl	8004998 <gpio_write>
	LCD_Write8(0x00);
 800738e:	2000      	movs	r0, #0
 8007390:	f000 f93a 	bl	8007608 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++)
 8007394:	1dfb      	adds	r3, r7, #7
 8007396:	2200      	movs	r2, #0
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	e018      	b.n	80073ce <LCD_Reset+0xa6>
		LCD_WR_STROBE(); // Three extra 0x00s
 800739c:	2390      	movs	r3, #144	; 0x90
 800739e:	05db      	lsls	r3, r3, #23
 80073a0:	2200      	movs	r2, #0
 80073a2:	2101      	movs	r1, #1
 80073a4:	0018      	movs	r0, r3
 80073a6:	f7fd faf7 	bl	8004998 <gpio_write>
 80073aa:	2001      	movs	r0, #1
 80073ac:	f7fe fa9e 	bl	80058ec <delay>
 80073b0:	2390      	movs	r3, #144	; 0x90
 80073b2:	05db      	lsls	r3, r3, #23
 80073b4:	2201      	movs	r2, #1
 80073b6:	2101      	movs	r1, #1
 80073b8:	0018      	movs	r0, r3
 80073ba:	f7fd faed 	bl	8004998 <gpio_write>
 80073be:	2001      	movs	r0, #1
 80073c0:	f7fe fa94 	bl	80058ec <delay>
	for (uint8_t i = 0; i < 3; i++)
 80073c4:	1dfb      	adds	r3, r7, #7
 80073c6:	781a      	ldrb	r2, [r3, #0]
 80073c8:	1dfb      	adds	r3, r7, #7
 80073ca:	3201      	adds	r2, #1
 80073cc:	701a      	strb	r2, [r3, #0]
 80073ce:	1dfb      	adds	r3, r7, #7
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d9e2      	bls.n	800739c <LCD_Reset+0x74>
	LCD_CS_HIGH();
 80073d6:	4b05      	ldr	r3, [pc, #20]	; (80073ec <LCD_Reset+0xc4>)
 80073d8:	2201      	movs	r2, #1
 80073da:	2100      	movs	r1, #0
 80073dc:	0018      	movs	r0, r3
 80073de:	f7fd fadb 	bl	8004998 <gpio_write>
}
 80073e2:	46c0      	nop			; (mov r8, r8)
 80073e4:	46bd      	mov	sp, r7
 80073e6:	b002      	add	sp, #8
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	46c0      	nop			; (mov r8, r8)
 80073ec:	48000400 	.word	0x48000400
 80073f0:	48000800 	.word	0x48000800

080073f4 <LCD_SetCursor>:
 * \param x		The x-coordinate
 * \param y		The y-coordinate
 * 
 * \return void
 */
void LCD_SetCursor(unsigned int x, unsigned int y) {
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
	m_cursor_x = x;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	b21a      	sxth	r2, r3
 8007402:	4b05      	ldr	r3, [pc, #20]	; (8007418 <LCD_SetCursor+0x24>)
 8007404:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	b21a      	sxth	r2, r3
 800740a:	4b04      	ldr	r3, [pc, #16]	; (800741c <LCD_SetCursor+0x28>)
 800740c:	801a      	strh	r2, [r3, #0]
}
 800740e:	46c0      	nop			; (mov r8, r8)
 8007410:	46bd      	mov	sp, r7
 8007412:	b002      	add	sp, #8
 8007414:	bd80      	pop	{r7, pc}
 8007416:	46c0      	nop			; (mov r8, r8)
 8007418:	2000056a 	.word	0x2000056a
 800741c:	2000056c 	.word	0x2000056c

08007420 <LCD_SetTextSize>:
 * 
 * \param s	Size
 * 
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	0002      	movs	r2, r0
 8007428:	1dfb      	adds	r3, r7, #7
 800742a:	701a      	strb	r2, [r3, #0]
	m_textsize = (s > 0) ? s : 1;
 800742c:	1dfb      	adds	r3, r7, #7
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <LCD_SetTextSize+0x1a>
 8007434:	1dfb      	adds	r3, r7, #7
 8007436:	781a      	ldrb	r2, [r3, #0]
 8007438:	e000      	b.n	800743c <LCD_SetTextSize+0x1c>
 800743a:	2201      	movs	r2, #1
 800743c:	4b02      	ldr	r3, [pc, #8]	; (8007448 <LCD_SetTextSize+0x28>)
 800743e:	701a      	strb	r2, [r3, #0]
}
 8007440:	46c0      	nop			; (mov r8, r8)
 8007442:	46bd      	mov	sp, r7
 8007444:	b002      	add	sp, #8
 8007446:	bd80      	pop	{r7, pc}
 8007448:	20000572 	.word	0x20000572

0800744c <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 * 
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	0002      	movs	r2, r0
 8007454:	1dbb      	adds	r3, r7, #6
 8007456:	801a      	strh	r2, [r3, #0]
 8007458:	1d3b      	adds	r3, r7, #4
 800745a:	1c0a      	adds	r2, r1, #0
 800745c:	801a      	strh	r2, [r3, #0]
	m_textcolor = c;
 800745e:	4b06      	ldr	r3, [pc, #24]	; (8007478 <LCD_SetTextColor+0x2c>)
 8007460:	1dba      	adds	r2, r7, #6
 8007462:	8812      	ldrh	r2, [r2, #0]
 8007464:	801a      	strh	r2, [r3, #0]
	m_textbgcolor = b;
 8007466:	4b05      	ldr	r3, [pc, #20]	; (800747c <LCD_SetTextColor+0x30>)
 8007468:	1d3a      	adds	r2, r7, #4
 800746a:	8812      	ldrh	r2, [r2, #0]
 800746c:	801a      	strh	r2, [r3, #0]
}
 800746e:	46c0      	nop			; (mov r8, r8)
 8007470:	46bd      	mov	sp, r7
 8007472:	b002      	add	sp, #8
 8007474:	bd80      	pop	{r7, pc}
 8007476:	46c0      	nop			; (mov r8, r8)
 8007478:	2000056e 	.word	0x2000056e
 800747c:	20000570 	.word	0x20000570

08007480 <LCD_SetRotation>:
 * 
 * \param x	rotation
 * 
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	0002      	movs	r2, r0
 8007488:	1dfb      	adds	r3, r7, #7
 800748a:	701a      	strb	r2, [r3, #0]
	m_rotation = (x & 3);
 800748c:	1dfb      	adds	r3, r7, #7
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	2203      	movs	r2, #3
 8007492:	4013      	ands	r3, r2
 8007494:	b2da      	uxtb	r2, r3
 8007496:	4b11      	ldr	r3, [pc, #68]	; (80074dc <LCD_SetRotation+0x5c>)
 8007498:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 800749a:	4b10      	ldr	r3, [pc, #64]	; (80074dc <LCD_SetRotation+0x5c>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d010      	beq.n	80074c4 <LCD_SetRotation+0x44>
 80074a2:	dc17      	bgt.n	80074d4 <LCD_SetRotation+0x54>
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d005      	beq.n	80074b4 <LCD_SetRotation+0x34>
 80074a8:	dc14      	bgt.n	80074d4 <LCD_SetRotation+0x54>
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <LCD_SetRotation+0x34>
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d008      	beq.n	80074c4 <LCD_SetRotation+0x44>
	case 3:
		m_width = TFTHEIGHT;
		m_height = TFTWIDTH;
		break;
	}
}
 80074b2:	e00f      	b.n	80074d4 <LCD_SetRotation+0x54>
		m_width = TFTWIDTH;
 80074b4:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <LCD_SetRotation+0x60>)
 80074b6:	22f0      	movs	r2, #240	; 0xf0
 80074b8:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 80074ba:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <LCD_SetRotation+0x64>)
 80074bc:	22a0      	movs	r2, #160	; 0xa0
 80074be:	0052      	lsls	r2, r2, #1
 80074c0:	801a      	strh	r2, [r3, #0]
		break;
 80074c2:	e007      	b.n	80074d4 <LCD_SetRotation+0x54>
		m_width = TFTHEIGHT;
 80074c4:	4b06      	ldr	r3, [pc, #24]	; (80074e0 <LCD_SetRotation+0x60>)
 80074c6:	22a0      	movs	r2, #160	; 0xa0
 80074c8:	0052      	lsls	r2, r2, #1
 80074ca:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 80074cc:	4b05      	ldr	r3, [pc, #20]	; (80074e4 <LCD_SetRotation+0x64>)
 80074ce:	22f0      	movs	r2, #240	; 0xf0
 80074d0:	801a      	strh	r2, [r3, #0]
		break;
 80074d2:	46c0      	nop			; (mov r8, r8)
}
 80074d4:	46c0      	nop			; (mov r8, r8)
 80074d6:	46bd      	mov	sp, r7
 80074d8:	b002      	add	sp, #8
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20000573 	.word	0x20000573
 80074e0:	20000566 	.word	0x20000566
 80074e4:	20000568 	.word	0x20000568

080074e8 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 * 
 * \return void
 */
void LCD_SetAddrWindow(int x1, int y1, int x2, int y2) {
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	603b      	str	r3, [r7, #0]

	LCD_CS_LOW();
 80074f6:	4b42      	ldr	r3, [pc, #264]	; (8007600 <LCD_SetAddrWindow+0x118>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	2100      	movs	r1, #0
 80074fc:	0018      	movs	r0, r3
 80074fe:	f7fd fa4b 	bl	8004998 <gpio_write>
	// set to the top-left corner -- although fill operations can be
	// done in any direction, the current screen rotation is applied
	// because some users find it disconcerting when a fill does not
	// occur top-to-bottom.
	int x, y, t;
	switch (m_rotation) {
 8007502:	4b40      	ldr	r3, [pc, #256]	; (8007604 <LCD_SetAddrWindow+0x11c>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b03      	cmp	r3, #3
 8007508:	d037      	beq.n	800757a <LCD_SetAddrWindow+0x92>
 800750a:	dc03      	bgt.n	8007514 <LCD_SetAddrWindow+0x2c>
 800750c:	2b01      	cmp	r3, #1
 800750e:	d006      	beq.n	800751e <LCD_SetAddrWindow+0x36>
 8007510:	2b02      	cmp	r3, #2
 8007512:	d017      	beq.n	8007544 <LCD_SetAddrWindow+0x5c>
	default:
		x = x1;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	61fb      	str	r3, [r7, #28]
		y = y1;
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	61bb      	str	r3, [r7, #24]
		break;
 800751c:	e042      	b.n	80075a4 <LCD_SetAddrWindow+0xbc>
	case 1:
		t = y1;
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	617b      	str	r3, [r7, #20]
		y1 = x1;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	60bb      	str	r3, [r7, #8]
		x1 = TFTWIDTH - 1 - y2;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	22ef      	movs	r2, #239	; 0xef
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	60fb      	str	r3, [r7, #12]
		y2 = x2;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	603b      	str	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	22ef      	movs	r2, #239	; 0xef
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	607b      	str	r3, [r7, #4]
		x = x2;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	61fb      	str	r3, [r7, #28]
		y = y1;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	61bb      	str	r3, [r7, #24]
		break;
 8007542:	e02f      	b.n	80075a4 <LCD_SetAddrWindow+0xbc>
	case 2:
		t = x1;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	617b      	str	r3, [r7, #20]
		x1 = TFTWIDTH - 1 - x2;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	22ef      	movs	r2, #239	; 0xef
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	60fb      	str	r3, [r7, #12]
		x2 = TFTWIDTH - 1 - t;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	22ef      	movs	r2, #239	; 0xef
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	607b      	str	r3, [r7, #4]
		t = y1;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	617b      	str	r3, [r7, #20]
		y1 = TFTHEIGHT - 1 - y2;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	2240      	movs	r2, #64	; 0x40
 8007560:	32ff      	adds	r2, #255	; 0xff
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	60bb      	str	r3, [r7, #8]
		y2 = TFTHEIGHT - 1 - t;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2240      	movs	r2, #64	; 0x40
 800756a:	32ff      	adds	r2, #255	; 0xff
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	603b      	str	r3, [r7, #0]
		x = x2;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	61fb      	str	r3, [r7, #28]
		y = y2;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	61bb      	str	r3, [r7, #24]
		break;
 8007578:	e014      	b.n	80075a4 <LCD_SetAddrWindow+0xbc>
	case 3:
		t = x1;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	617b      	str	r3, [r7, #20]
		x1 = y1;
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - x2;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2240      	movs	r2, #64	; 0x40
 8007586:	32ff      	adds	r2, #255	; 0xff
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	60bb      	str	r3, [r7, #8]
		x2 = y2;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	607b      	str	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	2240      	movs	r2, #64	; 0x40
 8007594:	32ff      	adds	r2, #255	; 0xff
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	603b      	str	r3, [r7, #0]
		x = x1;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	61fb      	str	r3, [r7, #28]
		y = y2;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	61bb      	str	r3, [r7, #24]
		break;
 80075a2:	46c0      	nop			; (mov r8, r8)
	}

	LCD_WriteRegister16(0x0050, x1); // Set address window
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	0019      	movs	r1, r3
 80075aa:	2050      	movs	r0, #80	; 0x50
 80075ac:	f000 f8a6 	bl	80076fc <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0051, x2);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	0019      	movs	r1, r3
 80075b6:	2051      	movs	r0, #81	; 0x51
 80075b8:	f000 f8a0 	bl	80076fc <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0052, y1);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	b29b      	uxth	r3, r3
 80075c0:	0019      	movs	r1, r3
 80075c2:	2052      	movs	r0, #82	; 0x52
 80075c4:	f000 f89a 	bl	80076fc <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0053, y2);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	0019      	movs	r1, r3
 80075ce:	2053      	movs	r0, #83	; 0x53
 80075d0:	f000 f894 	bl	80076fc <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0020, x); // Set address counter to top left
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	0019      	movs	r1, r3
 80075da:	2020      	movs	r0, #32
 80075dc:	f000 f88e 	bl	80076fc <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	0019      	movs	r1, r3
 80075e6:	2021      	movs	r0, #33	; 0x21
 80075e8:	f000 f888 	bl	80076fc <LCD_WriteRegister16>

	LCD_CS_HIGH();
 80075ec:	4b04      	ldr	r3, [pc, #16]	; (8007600 <LCD_SetAddrWindow+0x118>)
 80075ee:	2201      	movs	r2, #1
 80075f0:	2100      	movs	r1, #0
 80075f2:	0018      	movs	r0, r3
 80075f4:	f7fd f9d0 	bl	8004998 <gpio_write>
}
 80075f8:	46c0      	nop			; (mov r8, r8)
 80075fa:	46bd      	mov	sp, r7
 80075fc:	b008      	add	sp, #32
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	48000400 	.word	0x48000400
 8007604:	20000573 	.word	0x20000573

08007608 <LCD_Write8>:
 * 
 * \param data	8-Bit Data
 * 
 * \return void
 */
void LCD_Write8(uint8_t data) {
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	0002      	movs	r2, r0
 8007610:	1dfb      	adds	r3, r7, #7
 8007612:	701a      	strb	r2, [r3, #0]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8007614:	2390      	movs	r3, #144	; 0x90
 8007616:	05db      	lsls	r3, r3, #23
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	4a33      	ldr	r2, [pc, #204]	; (80076e8 <LCD_Write8+0xe0>)
 800761c:	401a      	ands	r2, r3
 800761e:	1dfb      	adds	r3, r7, #7
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	025b      	lsls	r3, r3, #9
 8007624:	0019      	movs	r1, r3
 8007626:	2380      	movs	r3, #128	; 0x80
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	400b      	ands	r3, r1
 800762c:	431a      	orrs	r2, r3
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 800762e:	1dfb      	adds	r3, r7, #7
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	021b      	lsls	r3, r3, #8
 8007634:	0019      	movs	r1, r3
 8007636:	2380      	movs	r3, #128	; 0x80
 8007638:	00db      	lsls	r3, r3, #3
 800763a:	400b      	ands	r3, r1
 800763c:	431a      	orrs	r2, r3
 800763e:	0011      	movs	r1, r2
 8007640:	1dfb      	adds	r3, r7, #7
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	001a      	movs	r2, r3
 8007648:	2380      	movs	r3, #128	; 0x80
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	401a      	ands	r2, r3
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 800764e:	2390      	movs	r3, #144	; 0x90
 8007650:	05db      	lsls	r3, r3, #23
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 8007652:	430a      	orrs	r2, r1
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8007654:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8007656:	4b25      	ldr	r3, [pc, #148]	; (80076ec <LCD_Write8+0xe4>)
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	4a25      	ldr	r2, [pc, #148]	; (80076f0 <LCD_Write8+0xe8>)
 800765c:	401a      	ands	r2, r3
 800765e:	1dfb      	adds	r3, r7, #7
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	2108      	movs	r1, #8
 8007664:	400b      	ands	r3, r1
 8007666:	431a      	orrs	r2, r3
 8007668:	1dfb      	adds	r3, r7, #7
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	0019      	movs	r1, r3
 8007670:	2320      	movs	r3, #32
 8007672:	400b      	ands	r3, r1
 8007674:	431a      	orrs	r2, r3
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 8007676:	1dfb      	adds	r3, r7, #7
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	105b      	asrs	r3, r3, #1
 800767c:	0019      	movs	r1, r3
 800767e:	2310      	movs	r3, #16
 8007680:	400b      	ands	r3, r1
 8007682:	431a      	orrs	r2, r3
 8007684:	0011      	movs	r1, r2
 8007686:	1dfb      	adds	r3, r7, #7
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	011b      	lsls	r3, r3, #4
 800768c:	001a      	movs	r2, r3
 800768e:	2380      	movs	r3, #128	; 0x80
 8007690:	00db      	lsls	r3, r3, #3
 8007692:	401a      	ands	r2, r3
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8007694:	4b15      	ldr	r3, [pc, #84]	; (80076ec <LCD_Write8+0xe4>)
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 8007696:	430a      	orrs	r2, r1
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8007698:	615a      	str	r2, [r3, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 800769a:	4b16      	ldr	r3, [pc, #88]	; (80076f4 <LCD_Write8+0xec>)
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	4a16      	ldr	r2, [pc, #88]	; (80076f8 <LCD_Write8+0xf0>)
 80076a0:	4013      	ands	r3, r2
 80076a2:	0019      	movs	r1, r3
 80076a4:	1dfb      	adds	r3, r7, #7
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	019b      	lsls	r3, r3, #6
 80076aa:	001a      	movs	r2, r3
 80076ac:	2380      	movs	r3, #128	; 0x80
 80076ae:	401a      	ands	r2, r3
 80076b0:	4b10      	ldr	r3, [pc, #64]	; (80076f4 <LCD_Write8+0xec>)
 80076b2:	430a      	orrs	r2, r1
 80076b4:	615a      	str	r2, [r3, #20]

	LCD_WR_STROBE();
 80076b6:	2390      	movs	r3, #144	; 0x90
 80076b8:	05db      	lsls	r3, r3, #23
 80076ba:	2200      	movs	r2, #0
 80076bc:	2101      	movs	r1, #1
 80076be:	0018      	movs	r0, r3
 80076c0:	f7fd f96a 	bl	8004998 <gpio_write>
 80076c4:	2001      	movs	r0, #1
 80076c6:	f7fe f911 	bl	80058ec <delay>
 80076ca:	2390      	movs	r3, #144	; 0x90
 80076cc:	05db      	lsls	r3, r3, #23
 80076ce:	2201      	movs	r2, #1
 80076d0:	2101      	movs	r1, #1
 80076d2:	0018      	movs	r0, r3
 80076d4:	f7fd f960 	bl	8004998 <gpio_write>
 80076d8:	2001      	movs	r0, #1
 80076da:	f7fe f907 	bl	80058ec <delay>
}
 80076de:	46c0      	nop			; (mov r8, r8)
 80076e0:	46bd      	mov	sp, r7
 80076e2:	b002      	add	sp, #8
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	46c0      	nop			; (mov r8, r8)
 80076e8:	0000f8ff 	.word	0x0000f8ff
 80076ec:	48000400 	.word	0x48000400
 80076f0:	0000fbc7 	.word	0x0000fbc7
 80076f4:	48000800 	.word	0x48000800
 80076f8:	0000ff7f 	.word	0x0000ff7f

080076fc <LCD_WriteRegister16>:
 * \param a		Register
 * \param d		Data
 * 
 * \return void
 */
void LCD_WriteRegister16(uint16_t a, uint16_t d) {
 80076fc:	b5b0      	push	{r4, r5, r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	0002      	movs	r2, r0
 8007704:	1dbb      	adds	r3, r7, #6
 8007706:	801a      	strh	r2, [r3, #0]
 8007708:	1d3b      	adds	r3, r7, #4
 800770a:	1c0a      	adds	r2, r1, #0
 800770c:	801a      	strh	r2, [r3, #0]
	uint8_t hi, lo;
	hi = (a) >> 8;
 800770e:	1dbb      	adds	r3, r7, #6
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	0a1b      	lsrs	r3, r3, #8
 8007714:	b29a      	uxth	r2, r3
 8007716:	240f      	movs	r4, #15
 8007718:	193b      	adds	r3, r7, r4
 800771a:	701a      	strb	r2, [r3, #0]
	lo = (a);
 800771c:	250e      	movs	r5, #14
 800771e:	197b      	adds	r3, r7, r5
 8007720:	1dba      	adds	r2, r7, #6
 8007722:	8812      	ldrh	r2, [r2, #0]
 8007724:	701a      	strb	r2, [r3, #0]
	LCD_CD_LOW();
 8007726:	2390      	movs	r3, #144	; 0x90
 8007728:	05db      	lsls	r3, r3, #23
 800772a:	2200      	movs	r2, #0
 800772c:	2104      	movs	r1, #4
 800772e:	0018      	movs	r0, r3
 8007730:	f7fd f932 	bl	8004998 <gpio_write>
	LCD_Write8(hi);
 8007734:	193b      	adds	r3, r7, r4
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	0018      	movs	r0, r3
 800773a:	f7ff ff65 	bl	8007608 <LCD_Write8>
	LCD_Write8(lo);
 800773e:	197b      	adds	r3, r7, r5
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	0018      	movs	r0, r3
 8007744:	f7ff ff60 	bl	8007608 <LCD_Write8>
	hi = (d) >> 8;
 8007748:	1d3b      	adds	r3, r7, #4
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	0a1b      	lsrs	r3, r3, #8
 800774e:	b29a      	uxth	r2, r3
 8007750:	193b      	adds	r3, r7, r4
 8007752:	701a      	strb	r2, [r3, #0]
	lo = (d);
 8007754:	197b      	adds	r3, r7, r5
 8007756:	1d3a      	adds	r2, r7, #4
 8007758:	8812      	ldrh	r2, [r2, #0]
 800775a:	701a      	strb	r2, [r3, #0]
	LCD_CD_HIGH();
 800775c:	2390      	movs	r3, #144	; 0x90
 800775e:	05db      	lsls	r3, r3, #23
 8007760:	2201      	movs	r2, #1
 8007762:	2104      	movs	r1, #4
 8007764:	0018      	movs	r0, r3
 8007766:	f7fd f917 	bl	8004998 <gpio_write>
	LCD_Write8(hi);
 800776a:	193b      	adds	r3, r7, r4
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	0018      	movs	r0, r3
 8007770:	f7ff ff4a 	bl	8007608 <LCD_Write8>
	LCD_Write8(lo);
 8007774:	197b      	adds	r3, r7, r5
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	0018      	movs	r0, r3
 800777a:	f7ff ff45 	bl	8007608 <LCD_Write8>
}
 800777e:	46c0      	nop			; (mov r8, r8)
 8007780:	46bd      	mov	sp, r7
 8007782:	b004      	add	sp, #16
 8007784:	bdb0      	pop	{r4, r5, r7, pc}

08007786 <adc_Init>:
			array[j] = array[j - 1];
		array[j] = save;
	}
}

void adc_Init(void) {
 8007786:	b580      	push	{r7, lr}
 8007788:	b084      	sub	sp, #16
 800778a:	af04      	add	r7, sp, #16
	adc_en();
 800778c:	f7fd fbbe 	bl	8004f0c <adc_en>
	adc_config(sample_time_7, CONT_off, SCANDIR_off, AUTOFF_off, WAIT_off,
 8007790:	2300      	movs	r3, #0
 8007792:	9302      	str	r3, [sp, #8]
 8007794:	2300      	movs	r3, #0
 8007796:	9301      	str	r3, [sp, #4]
 8007798:	2300      	movs	r3, #0
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	2300      	movs	r3, #0
 800779e:	2200      	movs	r2, #0
 80077a0:	2100      	movs	r1, #0
 80077a2:	2007      	movs	r0, #7
 80077a4:	f7fd fc9c 	bl	80050e0 <adc_config>
	DISCEN_off, OVRMOD_off);

}
 80077a8:	46c0      	nop			; (mov r8, r8)
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <Touch_Begin>:

void Touch_Begin(void) {
 80077ae:	b580      	push	{r7, lr}
 80077b0:	af00      	add	r7, sp, #0
//	ADCx_MspInit();
	adc_Init();
 80077b2:	f7ff ffe8 	bl	8007786 <adc_Init>
}
 80077b6:	46c0      	nop			; (mov r8, r8)
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80077bc:	b590      	push	{r4, r7, lr}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	1dfb      	adds	r3, r7, #7
 80077c8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 80077ca:	2417      	movs	r4, #23
 80077cc:	193b      	adds	r3, r7, r4
 80077ce:	2201      	movs	r2, #1
 80077d0:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 80077d2:	2016      	movs	r0, #22
 80077d4:	183b      	adds	r3, r7, r0
 80077d6:	2200      	movs	r2, #0
 80077d8:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 80077da:	4b21      	ldr	r3, [pc, #132]	; (8007860 <FATFS_LinkDriverEx+0xa4>)
 80077dc:	7a5b      	ldrb	r3, [r3, #9]
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d836      	bhi.n	8007852 <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 80077e4:	4b1e      	ldr	r3, [pc, #120]	; (8007860 <FATFS_LinkDriverEx+0xa4>)
 80077e6:	7a5b      	ldrb	r3, [r3, #9]
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	001a      	movs	r2, r3
 80077ec:	4b1c      	ldr	r3, [pc, #112]	; (8007860 <FATFS_LinkDriverEx+0xa4>)
 80077ee:	2100      	movs	r1, #0
 80077f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80077f2:	4b1b      	ldr	r3, [pc, #108]	; (8007860 <FATFS_LinkDriverEx+0xa4>)
 80077f4:	7a5b      	ldrb	r3, [r3, #9]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	4a19      	ldr	r2, [pc, #100]	; (8007860 <FATFS_LinkDriverEx+0xa4>)
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	18d3      	adds	r3, r2, r3
 80077fe:	3304      	adds	r3, #4
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 8007804:	4b16      	ldr	r3, [pc, #88]	; (8007860 <FATFS_LinkDriverEx+0xa4>)
 8007806:	7a5b      	ldrb	r3, [r3, #9]
 8007808:	b2db      	uxtb	r3, r3
 800780a:	001a      	movs	r2, r3
 800780c:	4b14      	ldr	r3, [pc, #80]	; (8007860 <FATFS_LinkDriverEx+0xa4>)
 800780e:	189b      	adds	r3, r3, r2
 8007810:	1dfa      	adds	r2, r7, #7
 8007812:	7812      	ldrb	r2, [r2, #0]
 8007814:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007816:	4b12      	ldr	r3, [pc, #72]	; (8007860 <FATFS_LinkDriverEx+0xa4>)
 8007818:	7a5b      	ldrb	r3, [r3, #9]
 800781a:	b2db      	uxtb	r3, r3
 800781c:	1c5a      	adds	r2, r3, #1
 800781e:	b2d1      	uxtb	r1, r2
 8007820:	4a0f      	ldr	r2, [pc, #60]	; (8007860 <FATFS_LinkDriverEx+0xa4>)
 8007822:	7251      	strb	r1, [r2, #9]
 8007824:	183a      	adds	r2, r7, r0
 8007826:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8007828:	183b      	adds	r3, r7, r0
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	3330      	adds	r3, #48	; 0x30
 800782e:	b2da      	uxtb	r2, r3
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	3301      	adds	r3, #1
 8007838:	223a      	movs	r2, #58	; 0x3a
 800783a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	3302      	adds	r3, #2
 8007840:	222f      	movs	r2, #47	; 0x2f
 8007842:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	3303      	adds	r3, #3
 8007848:	2200      	movs	r2, #0
 800784a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800784c:	193b      	adds	r3, r7, r4
 800784e:	2200      	movs	r2, #0
 8007850:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8007852:	2317      	movs	r3, #23
 8007854:	18fb      	adds	r3, r7, r3
 8007856:	781b      	ldrb	r3, [r3, #0]
}
 8007858:	0018      	movs	r0, r3
 800785a:	46bd      	mov	sp, r7
 800785c:	b007      	add	sp, #28
 800785e:	bd90      	pop	{r4, r7, pc}
 8007860:	20000678 	.word	0x20000678

08007864 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	0018      	movs	r0, r3
 8007876:	f7ff ffa1 	bl	80077bc <FATFS_LinkDriverEx>
 800787a:	0003      	movs	r3, r0
}
 800787c:	0018      	movs	r0, r3
 800787e:	46bd      	mov	sp, r7
 8007880:	b002      	add	sp, #8
 8007882:	bd80      	pop	{r7, pc}

08007884 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	0002      	movs	r2, r0
 800788c:	1dbb      	adds	r3, r7, #6
 800788e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007890:	2300      	movs	r3, #0
 8007892:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007894:	1dbb      	adds	r3, r7, #6
 8007896:	2200      	movs	r2, #0
 8007898:	5e9b      	ldrsh	r3, [r3, r2]
 800789a:	2b84      	cmp	r3, #132	; 0x84
 800789c:	d006      	beq.n	80078ac <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800789e:	1dbb      	adds	r3, r7, #6
 80078a0:	2200      	movs	r2, #0
 80078a2:	5e9a      	ldrsh	r2, [r3, r2]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	18d3      	adds	r3, r2, r3
 80078a8:	3303      	adds	r3, #3
 80078aa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80078ac:	68fb      	ldr	r3, [r7, #12]
}
 80078ae:	0018      	movs	r0, r3
 80078b0:	46bd      	mov	sp, r7
 80078b2:	b004      	add	sp, #16
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b082      	sub	sp, #8
 80078ba:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078bc:	f3ef 8305 	mrs	r3, IPSR
 80078c0:	607b      	str	r3, [r7, #4]
  return(result);
 80078c2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80078c4:	1e5a      	subs	r2, r3, #1
 80078c6:	4193      	sbcs	r3, r2
 80078c8:	b2db      	uxtb	r3, r3
}
 80078ca:	0018      	movs	r0, r3
 80078cc:	46bd      	mov	sp, r7
 80078ce:	b002      	add	sp, #8
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80078d6:	f001 f81f 	bl	8008918 <vTaskStartScheduler>
  
  return osOK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	0018      	movs	r0, r3
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80078e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078e4:	b089      	sub	sp, #36	; 0x24
 80078e6:	af04      	add	r7, sp, #16
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d020      	beq.n	8007936 <osThreadCreate+0x54>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d01c      	beq.n	8007936 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685c      	ldr	r4, [r3, #4]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681d      	ldr	r5, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	691e      	ldr	r6, [r3, #16]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2208      	movs	r2, #8
 800790c:	5e9b      	ldrsh	r3, [r3, r2]
 800790e:	0018      	movs	r0, r3
 8007910:	f7ff ffb8 	bl	8007884 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	695a      	ldr	r2, [r3, #20]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	9302      	str	r3, [sp, #8]
 8007920:	9201      	str	r2, [sp, #4]
 8007922:	9000      	str	r0, [sp, #0]
 8007924:	000b      	movs	r3, r1
 8007926:	0032      	movs	r2, r6
 8007928:	0029      	movs	r1, r5
 800792a:	0020      	movs	r0, r4
 800792c:	f000 fe4b 	bl	80085c6 <xTaskCreateStatic>
 8007930:	0003      	movs	r3, r0
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	e01d      	b.n	8007972 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685c      	ldr	r4, [r3, #4]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007942:	b29e      	uxth	r6, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2208      	movs	r2, #8
 8007948:	5e9b      	ldrsh	r3, [r3, r2]
 800794a:	0018      	movs	r0, r3
 800794c:	f7ff ff9a 	bl	8007884 <makeFreeRtosPriority>
 8007950:	0001      	movs	r1, r0
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	230c      	movs	r3, #12
 8007956:	18fb      	adds	r3, r7, r3
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	9100      	str	r1, [sp, #0]
 800795c:	0013      	movs	r3, r2
 800795e:	0032      	movs	r2, r6
 8007960:	0029      	movs	r1, r5
 8007962:	0020      	movs	r0, r4
 8007964:	f000 fe72 	bl	800864c <xTaskCreate>
 8007968:	0003      	movs	r3, r0
 800796a:	2b01      	cmp	r3, #1
 800796c:	d001      	beq.n	8007972 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800796e:	2300      	movs	r3, #0
 8007970:	e000      	b.n	8007974 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007972:	68fb      	ldr	r3, [r7, #12]
}
 8007974:	0018      	movs	r0, r3
 8007976:	46bd      	mov	sp, r7
 8007978:	b005      	add	sp, #20
 800797a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800797c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <osDelay+0x16>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	e000      	b.n	8007994 <osDelay+0x18>
 8007992:	2301      	movs	r3, #1
 8007994:	0018      	movs	r0, r3
 8007996:	f000 ff99 	bl	80088cc <vTaskDelay>
  
  return osOK;
 800799a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800799c:	0018      	movs	r0, r3
 800799e:	46bd      	mov	sp, r7
 80079a0:	b004      	add	sp, #16
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af02      	add	r7, sp, #8
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00f      	beq.n	80079d6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d10a      	bne.n	80079d2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	2203      	movs	r2, #3
 80079c2:	9200      	str	r2, [sp, #0]
 80079c4:	2200      	movs	r2, #0
 80079c6:	2100      	movs	r1, #0
 80079c8:	2001      	movs	r0, #1
 80079ca:	f000 f9c0 	bl	8007d4e <xQueueGenericCreateStatic>
 80079ce:	0003      	movs	r3, r0
 80079d0:	e017      	b.n	8007a02 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80079d2:	2300      	movs	r3, #0
 80079d4:	e015      	b.n	8007a02 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d111      	bne.n	8007a00 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80079dc:	2203      	movs	r2, #3
 80079de:	2100      	movs	r1, #0
 80079e0:	2001      	movs	r0, #1
 80079e2:	f000 f9ff 	bl	8007de4 <xQueueGenericCreate>
 80079e6:	0003      	movs	r3, r0
 80079e8:	60fb      	str	r3, [r7, #12]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d005      	beq.n	80079fc <osSemaphoreCreate+0x58>
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	2300      	movs	r3, #0
 80079f4:	2200      	movs	r2, #0
 80079f6:	2100      	movs	r1, #0
 80079f8:	f000 fa4c 	bl	8007e94 <xQueueGenericSend>
      return sema;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	e000      	b.n	8007a02 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007a00:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007a02:	0018      	movs	r0, r3
 8007a04:	46bd      	mov	sp, r7
 8007a06:	b004      	add	sp, #16
 8007a08:	bd80      	pop	{r7, pc}
	...

08007a0c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007a16:	2300      	movs	r3, #0
 8007a18:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007a20:	2380      	movs	r3, #128	; 0x80
 8007a22:	e036      	b.n	8007a92 <osSemaphoreWait+0x86>
  }
  
  ticks = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	d103      	bne.n	8007a36 <osSemaphoreWait+0x2a>
    ticks = portMAX_DELAY;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	425b      	negs	r3, r3
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	e009      	b.n	8007a4a <osSemaphoreWait+0x3e>
  }
  else if (millisec != 0) {
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d006      	beq.n	8007a4a <osSemaphoreWait+0x3e>
    ticks = millisec / portTICK_PERIOD_MS;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <osSemaphoreWait+0x3e>
      ticks = 1;
 8007a46:	2301      	movs	r3, #1
 8007a48:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007a4a:	f7ff ff34 	bl	80078b6 <inHandlerMode>
 8007a4e:	1e03      	subs	r3, r0, #0
 8007a50:	d013      	beq.n	8007a7a <osSemaphoreWait+0x6e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007a52:	2308      	movs	r3, #8
 8007a54:	18fa      	adds	r2, r7, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2100      	movs	r1, #0
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	f000 fc1d 	bl	800829a <xQueueReceiveFromISR>
 8007a60:	0003      	movs	r3, r0
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d001      	beq.n	8007a6a <osSemaphoreWait+0x5e>
      return osErrorOS;
 8007a66:	23ff      	movs	r3, #255	; 0xff
 8007a68:	e013      	b.n	8007a92 <osSemaphoreWait+0x86>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00f      	beq.n	8007a90 <osSemaphoreWait+0x84>
 8007a70:	4b0a      	ldr	r3, [pc, #40]	; (8007a9c <osSemaphoreWait+0x90>)
 8007a72:	2280      	movs	r2, #128	; 0x80
 8007a74:	0552      	lsls	r2, r2, #21
 8007a76:	601a      	str	r2, [r3, #0]
 8007a78:	e00a      	b.n	8007a90 <osSemaphoreWait+0x84>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	0011      	movs	r1, r2
 8007a80:	0018      	movs	r0, r3
 8007a82:	f000 fb30 	bl	80080e6 <xQueueSemaphoreTake>
 8007a86:	0003      	movs	r3, r0
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d001      	beq.n	8007a90 <osSemaphoreWait+0x84>
    return osErrorOS;
 8007a8c:	23ff      	movs	r3, #255	; 0xff
 8007a8e:	e000      	b.n	8007a92 <osSemaphoreWait+0x86>
  }
  
  return osOK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	0018      	movs	r0, r3
 8007a94:	46bd      	mov	sp, r7
 8007a96:	b004      	add	sp, #16
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	46c0      	nop			; (mov r8, r8)
 8007a9c:	e000ed04 	.word	0xe000ed04

08007aa0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007aac:	2300      	movs	r3, #0
 8007aae:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007ab0:	f7ff ff01 	bl	80078b6 <inHandlerMode>
 8007ab4:	1e03      	subs	r3, r0, #0
 8007ab6:	d013      	beq.n	8007ae0 <osSemaphoreRelease+0x40>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007ab8:	2308      	movs	r3, #8
 8007aba:	18fa      	adds	r2, r7, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	0011      	movs	r1, r2
 8007ac0:	0018      	movs	r0, r3
 8007ac2:	f000 faab 	bl	800801c <xQueueGiveFromISR>
 8007ac6:	0003      	movs	r3, r0
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d001      	beq.n	8007ad0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007acc:	23ff      	movs	r3, #255	; 0xff
 8007ace:	e013      	b.n	8007af8 <osSemaphoreRelease+0x58>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00f      	beq.n	8007af6 <osSemaphoreRelease+0x56>
 8007ad6:	4b0a      	ldr	r3, [pc, #40]	; (8007b00 <osSemaphoreRelease+0x60>)
 8007ad8:	2280      	movs	r2, #128	; 0x80
 8007ada:	0552      	lsls	r2, r2, #21
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	e00a      	b.n	8007af6 <osSemaphoreRelease+0x56>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	f000 f9d4 	bl	8007e94 <xQueueGenericSend>
 8007aec:	0003      	movs	r3, r0
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d001      	beq.n	8007af6 <osSemaphoreRelease+0x56>
      result = osErrorOS;
 8007af2:	23ff      	movs	r3, #255	; 0xff
 8007af4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007af6:	68fb      	ldr	r3, [r7, #12]
}
 8007af8:	0018      	movs	r0, r3
 8007afa:	46bd      	mov	sp, r7
 8007afc:	b004      	add	sp, #16
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	e000ed04 	.word	0xe000ed04

08007b04 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007b04:	b590      	push	{r4, r7, lr}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af02      	add	r7, sp, #8
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d011      	beq.n	8007b3a <osMessageCreate+0x36>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00d      	beq.n	8007b3a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6818      	ldr	r0, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6859      	ldr	r1, [r3, #4]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	689a      	ldr	r2, [r3, #8]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	2400      	movs	r4, #0
 8007b30:	9400      	str	r4, [sp, #0]
 8007b32:	f000 f90c 	bl	8007d4e <xQueueGenericCreateStatic>
 8007b36:	0003      	movs	r3, r0
 8007b38:	e008      	b.n	8007b4c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6818      	ldr	r0, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	0019      	movs	r1, r3
 8007b46:	f000 f94d 	bl	8007de4 <xQueueGenericCreate>
 8007b4a:	0003      	movs	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	b003      	add	sp, #12
 8007b52:	bd90      	pop	{r4, r7, pc}

08007b54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3308      	adds	r3, #8
 8007b60:	001a      	movs	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	4252      	negs	r2, r2
 8007b6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	3308      	adds	r3, #8
 8007b72:	001a      	movs	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	001a      	movs	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b88:	46c0      	nop			; (mov r8, r8)
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	b002      	add	sp, #8
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b9e:	46c0      	nop			; (mov r8, r8)
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	b002      	add	sp, #8
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	689a      	ldr	r2, [r3, #8]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	601a      	str	r2, [r3, #0]
}
 8007be2:	46c0      	nop			; (mov r8, r8)
 8007be4:	46bd      	mov	sp, r7
 8007be6:	b004      	add	sp, #16
 8007be8:	bd80      	pop	{r7, pc}

08007bea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	d103      	bne.n	8007c08 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	e00c      	b.n	8007c22 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	e002      	b.n	8007c16 <vListInsert+0x2c>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	60fb      	str	r3, [r7, #12]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d2f6      	bcs.n	8007c10 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	1c5a      	adds	r2, r3, #1
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	601a      	str	r2, [r3, #0]
}
 8007c4e:	46c0      	nop			; (mov r8, r8)
 8007c50:	46bd      	mov	sp, r7
 8007c52:	b004      	add	sp, #16
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	6892      	ldr	r2, [r2, #8]
 8007c6c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	6852      	ldr	r2, [r2, #4]
 8007c76:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d103      	bne.n	8007c8a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689a      	ldr	r2, [r3, #8]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	1e5a      	subs	r2, r3, #1
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
}
 8007c9e:	0018      	movs	r0, r3
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	b004      	add	sp, #16
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <xQueueGenericReset+0x18>
 8007cba:	b672      	cpsid	i
 8007cbc:	e7fe      	b.n	8007cbc <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8007cbe:	f001 fc3f 	bl	8009540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cce:	434b      	muls	r3, r1
 8007cd0:	18d2      	adds	r2, r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cec:	1e59      	subs	r1, r3, #1
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf2:	434b      	muls	r3, r1
 8007cf4:	18d2      	adds	r2, r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2244      	movs	r2, #68	; 0x44
 8007cfe:	21ff      	movs	r1, #255	; 0xff
 8007d00:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2245      	movs	r2, #69	; 0x45
 8007d06:	21ff      	movs	r1, #255	; 0xff
 8007d08:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10d      	bne.n	8007d2c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d013      	beq.n	8007d40 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3310      	adds	r3, #16
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	f001 f817 	bl	8008d50 <xTaskRemoveFromEventList>
 8007d22:	1e03      	subs	r3, r0, #0
 8007d24:	d00c      	beq.n	8007d40 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d26:	f001 fbfb 	bl	8009520 <vPortYield>
 8007d2a:	e009      	b.n	8007d40 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3310      	adds	r3, #16
 8007d30:	0018      	movs	r0, r3
 8007d32:	f7ff ff0f 	bl	8007b54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	3324      	adds	r3, #36	; 0x24
 8007d3a:	0018      	movs	r0, r3
 8007d3c:	f7ff ff0a 	bl	8007b54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d40:	f001 fc10 	bl	8009564 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d44:	2301      	movs	r3, #1
}
 8007d46:	0018      	movs	r0, r3
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	b004      	add	sp, #16
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d4e:	b590      	push	{r4, r7, lr}
 8007d50:	b089      	sub	sp, #36	; 0x24
 8007d52:	af02      	add	r7, sp, #8
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	60b9      	str	r1, [r7, #8]
 8007d58:	607a      	str	r2, [r7, #4]
 8007d5a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <xQueueGenericCreateStatic+0x18>
 8007d62:	b672      	cpsid	i
 8007d64:	e7fe      	b.n	8007d64 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <xQueueGenericCreateStatic+0x22>
 8007d6c:	b672      	cpsid	i
 8007d6e:	e7fe      	b.n	8007d6e <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d002      	beq.n	8007d7c <xQueueGenericCreateStatic+0x2e>
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <xQueueGenericCreateStatic+0x32>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e000      	b.n	8007d82 <xQueueGenericCreateStatic+0x34>
 8007d80:	2300      	movs	r3, #0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <xQueueGenericCreateStatic+0x3c>
 8007d86:	b672      	cpsid	i
 8007d88:	e7fe      	b.n	8007d88 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d102      	bne.n	8007d96 <xQueueGenericCreateStatic+0x48>
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <xQueueGenericCreateStatic+0x4c>
 8007d96:	2301      	movs	r3, #1
 8007d98:	e000      	b.n	8007d9c <xQueueGenericCreateStatic+0x4e>
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <xQueueGenericCreateStatic+0x56>
 8007da0:	b672      	cpsid	i
 8007da2:	e7fe      	b.n	8007da2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007da4:	2348      	movs	r3, #72	; 0x48
 8007da6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	2b48      	cmp	r3, #72	; 0x48
 8007dac:	d001      	beq.n	8007db2 <xQueueGenericCreateStatic+0x64>
 8007dae:	b672      	cpsid	i
 8007db0:	e7fe      	b.n	8007db0 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00e      	beq.n	8007dda <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	2246      	movs	r2, #70	; 0x46
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007dc4:	2328      	movs	r3, #40	; 0x28
 8007dc6:	18fb      	adds	r3, r7, r3
 8007dc8:	781c      	ldrb	r4, [r3, #0]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	68b9      	ldr	r1, [r7, #8]
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	0023      	movs	r3, r4
 8007dd6:	f000 f83b 	bl	8007e50 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007dda:	697b      	ldr	r3, [r7, #20]
	}
 8007ddc:	0018      	movs	r0, r3
 8007dde:	46bd      	mov	sp, r7
 8007de0:	b007      	add	sp, #28
 8007de2:	bd90      	pop	{r4, r7, pc}

08007de4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007de4:	b590      	push	{r4, r7, lr}
 8007de6:	b08b      	sub	sp, #44	; 0x2c
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	1dfb      	adds	r3, r7, #7
 8007df0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <xQueueGenericCreate+0x18>
 8007df8:	b672      	cpsid	i
 8007dfa:	e7fe      	b.n	8007dfa <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d102      	bne.n	8007e08 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	61fb      	str	r3, [r7, #28]
 8007e06:	e003      	b.n	8007e10 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	4353      	muls	r3, r2
 8007e0e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	3348      	adds	r3, #72	; 0x48
 8007e14:	0018      	movs	r0, r3
 8007e16:	f001 fc2b 	bl	8009670 <pvPortMalloc>
 8007e1a:	0003      	movs	r3, r0
 8007e1c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d010      	beq.n	8007e46 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	3348      	adds	r3, #72	; 0x48
 8007e28:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	2246      	movs	r2, #70	; 0x46
 8007e2e:	2100      	movs	r1, #0
 8007e30:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e32:	1dfb      	adds	r3, r7, #7
 8007e34:	781c      	ldrb	r4, [r3, #0]
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	68b9      	ldr	r1, [r7, #8]
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	0023      	movs	r3, r4
 8007e42:	f000 f805 	bl	8007e50 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007e46:	69bb      	ldr	r3, [r7, #24]
	}
 8007e48:	0018      	movs	r0, r3
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	b009      	add	sp, #36	; 0x24
 8007e4e:	bd90      	pop	{r4, r7, pc}

08007e50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
 8007e5c:	001a      	movs	r2, r3
 8007e5e:	1cfb      	adds	r3, r7, #3
 8007e60:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d103      	bne.n	8007e70 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	69ba      	ldr	r2, [r7, #24]
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	e002      	b.n	8007e76 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	2101      	movs	r1, #1
 8007e86:	0018      	movs	r0, r3
 8007e88:	f7ff ff0d 	bl	8007ca6 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e8c:	46c0      	nop			; (mov r8, r8)
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	b004      	add	sp, #16
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08a      	sub	sp, #40	; 0x28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <xQueueGenericSend+0x20>
 8007eb0:	b672      	cpsid	i
 8007eb2:	e7fe      	b.n	8007eb2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d103      	bne.n	8007ec2 <xQueueGenericSend+0x2e>
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <xQueueGenericSend+0x32>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e000      	b.n	8007ec8 <xQueueGenericSend+0x34>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <xQueueGenericSend+0x3c>
 8007ecc:	b672      	cpsid	i
 8007ece:	e7fe      	b.n	8007ece <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d103      	bne.n	8007ede <xQueueGenericSend+0x4a>
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d101      	bne.n	8007ee2 <xQueueGenericSend+0x4e>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e000      	b.n	8007ee4 <xQueueGenericSend+0x50>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <xQueueGenericSend+0x58>
 8007ee8:	b672      	cpsid	i
 8007eea:	e7fe      	b.n	8007eea <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007eec:	f001 f8ce 	bl	800908c <xTaskGetSchedulerState>
 8007ef0:	1e03      	subs	r3, r0, #0
 8007ef2:	d102      	bne.n	8007efa <xQueueGenericSend+0x66>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <xQueueGenericSend+0x6a>
 8007efa:	2301      	movs	r3, #1
 8007efc:	e000      	b.n	8007f00 <xQueueGenericSend+0x6c>
 8007efe:	2300      	movs	r3, #0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <xQueueGenericSend+0x74>
 8007f04:	b672      	cpsid	i
 8007f06:	e7fe      	b.n	8007f06 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f08:	f001 fb1a 	bl	8009540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d302      	bcc.n	8007f1e <xQueueGenericSend+0x8a>
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d11e      	bne.n	8007f5c <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	68b9      	ldr	r1, [r7, #8]
 8007f22:	6a3b      	ldr	r3, [r7, #32]
 8007f24:	0018      	movs	r0, r3
 8007f26:	f000 fa31 	bl	800838c <prvCopyDataToQueue>
 8007f2a:	0003      	movs	r3, r0
 8007f2c:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d009      	beq.n	8007f4a <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	3324      	adds	r3, #36	; 0x24
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	f000 ff08 	bl	8008d50 <xTaskRemoveFromEventList>
 8007f40:	1e03      	subs	r3, r0, #0
 8007f42:	d007      	beq.n	8007f54 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f44:	f001 faec 	bl	8009520 <vPortYield>
 8007f48:	e004      	b.n	8007f54 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f50:	f001 fae6 	bl	8009520 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f54:	f001 fb06 	bl	8009564 <vPortExitCritical>
				return pdPASS;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e05b      	b.n	8008014 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d103      	bne.n	8007f6a <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f62:	f001 faff 	bl	8009564 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f66:	2300      	movs	r3, #0
 8007f68:	e054      	b.n	8008014 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d106      	bne.n	8007f7e <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f70:	2314      	movs	r3, #20
 8007f72:	18fb      	adds	r3, r7, r3
 8007f74:	0018      	movs	r0, r3
 8007f76:	f000 ff47 	bl	8008e08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f7e:	f001 faf1 	bl	8009564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f82:	f000 fd21 	bl	80089c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f86:	f001 fadb 	bl	8009540 <vPortEnterCritical>
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	2244      	movs	r2, #68	; 0x44
 8007f8e:	5c9b      	ldrb	r3, [r3, r2]
 8007f90:	b25b      	sxtb	r3, r3
 8007f92:	3301      	adds	r3, #1
 8007f94:	d103      	bne.n	8007f9e <xQueueGenericSend+0x10a>
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	2244      	movs	r2, #68	; 0x44
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	5499      	strb	r1, [r3, r2]
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	2245      	movs	r2, #69	; 0x45
 8007fa2:	5c9b      	ldrb	r3, [r3, r2]
 8007fa4:	b25b      	sxtb	r3, r3
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	d103      	bne.n	8007fb2 <xQueueGenericSend+0x11e>
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	2245      	movs	r2, #69	; 0x45
 8007fae:	2100      	movs	r1, #0
 8007fb0:	5499      	strb	r1, [r3, r2]
 8007fb2:	f001 fad7 	bl	8009564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fb6:	1d3a      	adds	r2, r7, #4
 8007fb8:	2314      	movs	r3, #20
 8007fba:	18fb      	adds	r3, r7, r3
 8007fbc:	0011      	movs	r1, r2
 8007fbe:	0018      	movs	r0, r3
 8007fc0:	f000 ff36 	bl	8008e30 <xTaskCheckForTimeOut>
 8007fc4:	1e03      	subs	r3, r0, #0
 8007fc6:	d11e      	bne.n	8008006 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	0018      	movs	r0, r3
 8007fcc:	f000 fae3 	bl	8008596 <prvIsQueueFull>
 8007fd0:	1e03      	subs	r3, r0, #0
 8007fd2:	d011      	beq.n	8007ff8 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	3310      	adds	r3, #16
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	0011      	movs	r1, r2
 8007fdc:	0018      	movs	r0, r3
 8007fde:	f000 fe99 	bl	8008d14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	0018      	movs	r0, r3
 8007fe6:	f000 fa62 	bl	80084ae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007fea:	f000 fcf9 	bl	80089e0 <xTaskResumeAll>
 8007fee:	1e03      	subs	r3, r0, #0
 8007ff0:	d18a      	bne.n	8007f08 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8007ff2:	f001 fa95 	bl	8009520 <vPortYield>
 8007ff6:	e787      	b.n	8007f08 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	0018      	movs	r0, r3
 8007ffc:	f000 fa57 	bl	80084ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008000:	f000 fcee 	bl	80089e0 <xTaskResumeAll>
 8008004:	e780      	b.n	8007f08 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	0018      	movs	r0, r3
 800800a:	f000 fa50 	bl	80084ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800800e:	f000 fce7 	bl	80089e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008012:	2300      	movs	r3, #0
		}
	}
}
 8008014:	0018      	movs	r0, r3
 8008016:	46bd      	mov	sp, r7
 8008018:	b00a      	add	sp, #40	; 0x28
 800801a:	bd80      	pop	{r7, pc}

0800801c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b088      	sub	sp, #32
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <xQueueGiveFromISR+0x18>
 8008030:	b672      	cpsid	i
 8008032:	e7fe      	b.n	8008032 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <xQueueGiveFromISR+0x24>
 800803c:	b672      	cpsid	i
 800803e:	e7fe      	b.n	800803e <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d103      	bne.n	8008050 <xQueueGiveFromISR+0x34>
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <xQueueGiveFromISR+0x38>
 8008050:	2301      	movs	r3, #1
 8008052:	e000      	b.n	8008056 <xQueueGiveFromISR+0x3a>
 8008054:	2300      	movs	r3, #0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <xQueueGiveFromISR+0x42>
 800805a:	b672      	cpsid	i
 800805c:	e7fe      	b.n	800805c <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800805e:	f001 fa99 	bl	8009594 <ulSetInterruptMaskFromISR>
 8008062:	0003      	movs	r3, r0
 8008064:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806a:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	429a      	cmp	r2, r3
 8008074:	d22c      	bcs.n	80080d0 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008076:	200f      	movs	r0, #15
 8008078:	183b      	adds	r3, r7, r0
 800807a:	69ba      	ldr	r2, [r7, #24]
 800807c:	2145      	movs	r1, #69	; 0x45
 800807e:	5c52      	ldrb	r2, [r2, r1]
 8008080:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800808a:	183b      	adds	r3, r7, r0
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	b25b      	sxtb	r3, r3
 8008090:	3301      	adds	r3, #1
 8008092:	d111      	bne.n	80080b8 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	2b00      	cmp	r3, #0
 800809a:	d016      	beq.n	80080ca <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	3324      	adds	r3, #36	; 0x24
 80080a0:	0018      	movs	r0, r3
 80080a2:	f000 fe55 	bl	8008d50 <xTaskRemoveFromEventList>
 80080a6:	1e03      	subs	r3, r0, #0
 80080a8:	d00f      	beq.n	80080ca <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00c      	beq.n	80080ca <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2201      	movs	r2, #1
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	e008      	b.n	80080ca <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80080b8:	230f      	movs	r3, #15
 80080ba:	18fb      	adds	r3, r7, r3
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	3301      	adds	r3, #1
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	b259      	sxtb	r1, r3
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	2245      	movs	r2, #69	; 0x45
 80080c8:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80080ca:	2301      	movs	r3, #1
 80080cc:	61fb      	str	r3, [r7, #28]
 80080ce:	e001      	b.n	80080d4 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080d0:	2300      	movs	r3, #0
 80080d2:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	0018      	movs	r0, r3
 80080d8:	f001 fa62 	bl	80095a0 <vClearInterruptMaskFromISR>

	return xReturn;
 80080dc:	69fb      	ldr	r3, [r7, #28]
}
 80080de:	0018      	movs	r0, r3
 80080e0:	46bd      	mov	sp, r7
 80080e2:	b008      	add	sp, #32
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b08a      	sub	sp, #40	; 0x28
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80080f0:	2300      	movs	r3, #0
 80080f2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80080f8:	2300      	movs	r3, #0
 80080fa:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <xQueueSemaphoreTake+0x20>
 8008102:	b672      	cpsid	i
 8008104:	e7fe      	b.n	8008104 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <xQueueSemaphoreTake+0x2c>
 800810e:	b672      	cpsid	i
 8008110:	e7fe      	b.n	8008110 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008112:	f000 ffbb 	bl	800908c <xTaskGetSchedulerState>
 8008116:	1e03      	subs	r3, r0, #0
 8008118:	d102      	bne.n	8008120 <xQueueSemaphoreTake+0x3a>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d101      	bne.n	8008124 <xQueueSemaphoreTake+0x3e>
 8008120:	2301      	movs	r3, #1
 8008122:	e000      	b.n	8008126 <xQueueSemaphoreTake+0x40>
 8008124:	2300      	movs	r3, #0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <xQueueSemaphoreTake+0x48>
 800812a:	b672      	cpsid	i
 800812c:	e7fe      	b.n	800812c <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800812e:	f001 fa07 	bl	8009540 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008136:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d01d      	beq.n	800817a <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	1e5a      	subs	r2, r3, #1
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d104      	bne.n	8008158 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800814e:	f001 f8f7 	bl	8009340 <pvTaskIncrementMutexHeldCount>
 8008152:	0002      	movs	r2, r0
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d008      	beq.n	8008172 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	3310      	adds	r3, #16
 8008164:	0018      	movs	r0, r3
 8008166:	f000 fdf3 	bl	8008d50 <xTaskRemoveFromEventList>
 800816a:	1e03      	subs	r3, r0, #0
 800816c:	d001      	beq.n	8008172 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800816e:	f001 f9d7 	bl	8009520 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008172:	f001 f9f7 	bl	8009564 <vPortExitCritical>
				return pdPASS;
 8008176:	2301      	movs	r3, #1
 8008178:	e08b      	b.n	8008292 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d108      	bne.n	8008192 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <xQueueSemaphoreTake+0xa4>
 8008186:	b672      	cpsid	i
 8008188:	e7fe      	b.n	8008188 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800818a:	f001 f9eb 	bl	8009564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800818e:	2300      	movs	r3, #0
 8008190:	e07f      	b.n	8008292 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	2b00      	cmp	r3, #0
 8008196:	d106      	bne.n	80081a6 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008198:	230c      	movs	r3, #12
 800819a:	18fb      	adds	r3, r7, r3
 800819c:	0018      	movs	r0, r3
 800819e:	f000 fe33 	bl	8008e08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081a2:	2301      	movs	r3, #1
 80081a4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081a6:	f001 f9dd 	bl	8009564 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081aa:	f000 fc0d 	bl	80089c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081ae:	f001 f9c7 	bl	8009540 <vPortEnterCritical>
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	2244      	movs	r2, #68	; 0x44
 80081b6:	5c9b      	ldrb	r3, [r3, r2]
 80081b8:	b25b      	sxtb	r3, r3
 80081ba:	3301      	adds	r3, #1
 80081bc:	d103      	bne.n	80081c6 <xQueueSemaphoreTake+0xe0>
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	2244      	movs	r2, #68	; 0x44
 80081c2:	2100      	movs	r1, #0
 80081c4:	5499      	strb	r1, [r3, r2]
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	2245      	movs	r2, #69	; 0x45
 80081ca:	5c9b      	ldrb	r3, [r3, r2]
 80081cc:	b25b      	sxtb	r3, r3
 80081ce:	3301      	adds	r3, #1
 80081d0:	d103      	bne.n	80081da <xQueueSemaphoreTake+0xf4>
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	2245      	movs	r2, #69	; 0x45
 80081d6:	2100      	movs	r1, #0
 80081d8:	5499      	strb	r1, [r3, r2]
 80081da:	f001 f9c3 	bl	8009564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081de:	003a      	movs	r2, r7
 80081e0:	230c      	movs	r3, #12
 80081e2:	18fb      	adds	r3, r7, r3
 80081e4:	0011      	movs	r1, r2
 80081e6:	0018      	movs	r0, r3
 80081e8:	f000 fe22 	bl	8008e30 <xTaskCheckForTimeOut>
 80081ec:	1e03      	subs	r3, r0, #0
 80081ee:	d12e      	bne.n	800824e <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	0018      	movs	r0, r3
 80081f4:	f000 f9b9 	bl	800856a <prvIsQueueEmpty>
 80081f8:	1e03      	subs	r3, r0, #0
 80081fa:	d021      	beq.n	8008240 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8008204:	f001 f99c 	bl	8009540 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	0018      	movs	r0, r3
 800820e:	f000 ff59 	bl	80090c4 <xTaskPriorityInherit>
 8008212:	0003      	movs	r3, r0
 8008214:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8008216:	f001 f9a5 	bl	8009564 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	3324      	adds	r3, #36	; 0x24
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	0011      	movs	r1, r2
 8008222:	0018      	movs	r0, r3
 8008224:	f000 fd76 	bl	8008d14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	0018      	movs	r0, r3
 800822c:	f000 f93f 	bl	80084ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008230:	f000 fbd6 	bl	80089e0 <xTaskResumeAll>
 8008234:	1e03      	subs	r3, r0, #0
 8008236:	d000      	beq.n	800823a <xQueueSemaphoreTake+0x154>
 8008238:	e779      	b.n	800812e <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 800823a:	f001 f971 	bl	8009520 <vPortYield>
 800823e:	e776      	b.n	800812e <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	0018      	movs	r0, r3
 8008244:	f000 f933 	bl	80084ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008248:	f000 fbca 	bl	80089e0 <xTaskResumeAll>
 800824c:	e76f      	b.n	800812e <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	0018      	movs	r0, r3
 8008252:	f000 f92c 	bl	80084ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008256:	f000 fbc3 	bl	80089e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	0018      	movs	r0, r3
 800825e:	f000 f984 	bl	800856a <prvIsQueueEmpty>
 8008262:	1e03      	subs	r3, r0, #0
 8008264:	d100      	bne.n	8008268 <xQueueSemaphoreTake+0x182>
 8008266:	e762      	b.n	800812e <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d010      	beq.n	8008290 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 800826e:	f001 f967 	bl	8009540 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	0018      	movs	r0, r3
 8008276:	f000 f873 	bl	8008360 <prvGetDisinheritPriorityAfterTimeout>
 800827a:	0003      	movs	r3, r0
 800827c:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	0011      	movs	r1, r2
 8008286:	0018      	movs	r0, r3
 8008288:	f000 ffe6 	bl	8009258 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800828c:	f001 f96a 	bl	8009564 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008290:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008292:	0018      	movs	r0, r3
 8008294:	46bd      	mov	sp, r7
 8008296:	b00a      	add	sp, #40	; 0x28
 8008298:	bd80      	pop	{r7, pc}

0800829a <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800829a:	b590      	push	{r4, r7, lr}
 800829c:	b08b      	sub	sp, #44	; 0x2c
 800829e:	af00      	add	r7, sp, #0
 80082a0:	60f8      	str	r0, [r7, #12]
 80082a2:	60b9      	str	r1, [r7, #8]
 80082a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80082aa:	6a3b      	ldr	r3, [r7, #32]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <xQueueReceiveFromISR+0x1a>
 80082b0:	b672      	cpsid	i
 80082b2:	e7fe      	b.n	80082b2 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d103      	bne.n	80082c2 <xQueueReceiveFromISR+0x28>
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d101      	bne.n	80082c6 <xQueueReceiveFromISR+0x2c>
 80082c2:	2301      	movs	r3, #1
 80082c4:	e000      	b.n	80082c8 <xQueueReceiveFromISR+0x2e>
 80082c6:	2300      	movs	r3, #0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <xQueueReceiveFromISR+0x36>
 80082cc:	b672      	cpsid	i
 80082ce:	e7fe      	b.n	80082ce <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082d0:	f001 f960 	bl	8009594 <ulSetInterruptMaskFromISR>
 80082d4:	0003      	movs	r3, r0
 80082d6:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082d8:	6a3b      	ldr	r3, [r7, #32]
 80082da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082dc:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d032      	beq.n	800834a <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80082e4:	2417      	movs	r4, #23
 80082e6:	193b      	adds	r3, r7, r4
 80082e8:	6a3a      	ldr	r2, [r7, #32]
 80082ea:	2144      	movs	r1, #68	; 0x44
 80082ec:	5c52      	ldrb	r2, [r2, r1]
 80082ee:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	6a3b      	ldr	r3, [r7, #32]
 80082f4:	0011      	movs	r1, r2
 80082f6:	0018      	movs	r0, r3
 80082f8:	f000 f8b3 	bl	8008462 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	1e5a      	subs	r2, r3, #1
 8008300:	6a3b      	ldr	r3, [r7, #32]
 8008302:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008304:	193b      	adds	r3, r7, r4
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	b25b      	sxtb	r3, r3
 800830a:	3301      	adds	r3, #1
 800830c:	d111      	bne.n	8008332 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d016      	beq.n	8008344 <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	3310      	adds	r3, #16
 800831a:	0018      	movs	r0, r3
 800831c:	f000 fd18 	bl	8008d50 <xTaskRemoveFromEventList>
 8008320:	1e03      	subs	r3, r0, #0
 8008322:	d00f      	beq.n	8008344 <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00c      	beq.n	8008344 <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	601a      	str	r2, [r3, #0]
 8008330:	e008      	b.n	8008344 <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008332:	2317      	movs	r3, #23
 8008334:	18fb      	adds	r3, r7, r3
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	3301      	adds	r3, #1
 800833a:	b2db      	uxtb	r3, r3
 800833c:	b259      	sxtb	r1, r3
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	2244      	movs	r2, #68	; 0x44
 8008342:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8008344:	2301      	movs	r3, #1
 8008346:	627b      	str	r3, [r7, #36]	; 0x24
 8008348:	e001      	b.n	800834e <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 800834a:	2300      	movs	r3, #0
 800834c:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	0018      	movs	r0, r3
 8008352:	f001 f925 	bl	80095a0 <vClearInterruptMaskFromISR>

	return xReturn;
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008358:	0018      	movs	r0, r3
 800835a:	46bd      	mov	sp, r7
 800835c:	b00b      	add	sp, #44	; 0x2c
 800835e:	bd90      	pop	{r4, r7, pc}

08008360 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	2b00      	cmp	r3, #0
 800836e:	d006      	beq.n	800837e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2207      	movs	r2, #7
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	60fb      	str	r3, [r7, #12]
 800837c:	e001      	b.n	8008382 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800837e:	2300      	movs	r3, #0
 8008380:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008382:	68fb      	ldr	r3, [r7, #12]
	}
 8008384:	0018      	movs	r0, r3
 8008386:	46bd      	mov	sp, r7
 8008388:	b004      	add	sp, #16
 800838a:	bd80      	pop	{r7, pc}

0800838c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008398:	2300      	movs	r3, #0
 800839a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10e      	bne.n	80083c8 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d14e      	bne.n	8008450 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	0018      	movs	r0, r3
 80083b8:	f000 fef2 	bl	80091a0 <xTaskPriorityDisinherit>
 80083bc:	0003      	movs	r3, r0
 80083be:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	605a      	str	r2, [r3, #4]
 80083c6:	e043      	b.n	8008450 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d119      	bne.n	8008402 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6898      	ldr	r0, [r3, #8]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	0019      	movs	r1, r3
 80083da:	f001 fb1b 	bl	8009a14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	689a      	ldr	r2, [r3, #8]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e6:	18d2      	adds	r2, r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	689a      	ldr	r2, [r3, #8]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d32b      	bcc.n	8008450 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	609a      	str	r2, [r3, #8]
 8008400:	e026      	b.n	8008450 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	68d8      	ldr	r0, [r3, #12]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	0019      	movs	r1, r3
 800840e:	f001 fb01 	bl	8009a14 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	68da      	ldr	r2, [r3, #12]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841a:	425b      	negs	r3, r3
 800841c:	18d2      	adds	r2, r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	68da      	ldr	r2, [r3, #12]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	429a      	cmp	r2, r3
 800842c:	d207      	bcs.n	800843e <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008436:	425b      	negs	r3, r3
 8008438:	18d2      	adds	r2, r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b02      	cmp	r3, #2
 8008442:	d105      	bne.n	8008450 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	3b01      	subs	r3, #1
 800844e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	1c5a      	adds	r2, r3, #1
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008458:	697b      	ldr	r3, [r7, #20]
}
 800845a:	0018      	movs	r0, r3
 800845c:	46bd      	mov	sp, r7
 800845e:	b006      	add	sp, #24
 8008460:	bd80      	pop	{r7, pc}

08008462 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b082      	sub	sp, #8
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008470:	2b00      	cmp	r3, #0
 8008472:	d018      	beq.n	80084a6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68da      	ldr	r2, [r3, #12]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847c:	18d2      	adds	r2, r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68da      	ldr	r2, [r3, #12]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	429a      	cmp	r2, r3
 800848c:	d303      	bcc.n	8008496 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68d9      	ldr	r1, [r3, #12]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	0018      	movs	r0, r3
 80084a2:	f001 fab7 	bl	8009a14 <memcpy>
	}
}
 80084a6:	46c0      	nop			; (mov r8, r8)
 80084a8:	46bd      	mov	sp, r7
 80084aa:	b002      	add	sp, #8
 80084ac:	bd80      	pop	{r7, pc}

080084ae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b084      	sub	sp, #16
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084b6:	f001 f843 	bl	8009540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084ba:	230f      	movs	r3, #15
 80084bc:	18fb      	adds	r3, r7, r3
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	2145      	movs	r1, #69	; 0x45
 80084c2:	5c52      	ldrb	r2, [r2, r1]
 80084c4:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084c6:	e013      	b.n	80084f0 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d016      	beq.n	80084fe <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3324      	adds	r3, #36	; 0x24
 80084d4:	0018      	movs	r0, r3
 80084d6:	f000 fc3b 	bl	8008d50 <xTaskRemoveFromEventList>
 80084da:	1e03      	subs	r3, r0, #0
 80084dc:	d001      	beq.n	80084e2 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084de:	f000 fcf7 	bl	8008ed0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084e2:	210f      	movs	r1, #15
 80084e4:	187b      	adds	r3, r7, r1
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	187b      	adds	r3, r7, r1
 80084ee:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084f0:	230f      	movs	r3, #15
 80084f2:	18fb      	adds	r3, r7, r3
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	b25b      	sxtb	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	dce5      	bgt.n	80084c8 <prvUnlockQueue+0x1a>
 80084fc:	e000      	b.n	8008500 <prvUnlockQueue+0x52>
					break;
 80084fe:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2245      	movs	r2, #69	; 0x45
 8008504:	21ff      	movs	r1, #255	; 0xff
 8008506:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8008508:	f001 f82c 	bl	8009564 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800850c:	f001 f818 	bl	8009540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008510:	230e      	movs	r3, #14
 8008512:	18fb      	adds	r3, r7, r3
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	2144      	movs	r1, #68	; 0x44
 8008518:	5c52      	ldrb	r2, [r2, r1]
 800851a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800851c:	e013      	b.n	8008546 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d016      	beq.n	8008554 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3310      	adds	r3, #16
 800852a:	0018      	movs	r0, r3
 800852c:	f000 fc10 	bl	8008d50 <xTaskRemoveFromEventList>
 8008530:	1e03      	subs	r3, r0, #0
 8008532:	d001      	beq.n	8008538 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8008534:	f000 fccc 	bl	8008ed0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008538:	210e      	movs	r1, #14
 800853a:	187b      	adds	r3, r7, r1
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	3b01      	subs	r3, #1
 8008540:	b2da      	uxtb	r2, r3
 8008542:	187b      	adds	r3, r7, r1
 8008544:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008546:	230e      	movs	r3, #14
 8008548:	18fb      	adds	r3, r7, r3
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	b25b      	sxtb	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	dce5      	bgt.n	800851e <prvUnlockQueue+0x70>
 8008552:	e000      	b.n	8008556 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8008554:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2244      	movs	r2, #68	; 0x44
 800855a:	21ff      	movs	r1, #255	; 0xff
 800855c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800855e:	f001 f801 	bl	8009564 <vPortExitCritical>
}
 8008562:	46c0      	nop			; (mov r8, r8)
 8008564:	46bd      	mov	sp, r7
 8008566:	b004      	add	sp, #16
 8008568:	bd80      	pop	{r7, pc}

0800856a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008572:	f000 ffe5 	bl	8009540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857a:	2b00      	cmp	r3, #0
 800857c:	d102      	bne.n	8008584 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800857e:	2301      	movs	r3, #1
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	e001      	b.n	8008588 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008584:	2300      	movs	r3, #0
 8008586:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008588:	f000 ffec 	bl	8009564 <vPortExitCritical>

	return xReturn;
 800858c:	68fb      	ldr	r3, [r7, #12]
}
 800858e:	0018      	movs	r0, r3
 8008590:	46bd      	mov	sp, r7
 8008592:	b004      	add	sp, #16
 8008594:	bd80      	pop	{r7, pc}

08008596 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b084      	sub	sp, #16
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800859e:	f000 ffcf 	bl	8009540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d102      	bne.n	80085b4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085ae:	2301      	movs	r3, #1
 80085b0:	60fb      	str	r3, [r7, #12]
 80085b2:	e001      	b.n	80085b8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085b4:	2300      	movs	r3, #0
 80085b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085b8:	f000 ffd4 	bl	8009564 <vPortExitCritical>

	return xReturn;
 80085bc:	68fb      	ldr	r3, [r7, #12]
}
 80085be:	0018      	movs	r0, r3
 80085c0:	46bd      	mov	sp, r7
 80085c2:	b004      	add	sp, #16
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80085c6:	b590      	push	{r4, r7, lr}
 80085c8:	b08d      	sub	sp, #52	; 0x34
 80085ca:	af04      	add	r7, sp, #16
 80085cc:	60f8      	str	r0, [r7, #12]
 80085ce:	60b9      	str	r1, [r7, #8]
 80085d0:	607a      	str	r2, [r7, #4]
 80085d2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80085d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d101      	bne.n	80085de <xTaskCreateStatic+0x18>
 80085da:	b672      	cpsid	i
 80085dc:	e7fe      	b.n	80085dc <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80085de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <xTaskCreateStatic+0x22>
 80085e4:	b672      	cpsid	i
 80085e6:	e7fe      	b.n	80085e6 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80085e8:	23b4      	movs	r3, #180	; 0xb4
 80085ea:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	2bb4      	cmp	r3, #180	; 0xb4
 80085f0:	d001      	beq.n	80085f6 <xTaskCreateStatic+0x30>
 80085f2:	b672      	cpsid	i
 80085f4:	e7fe      	b.n	80085f4 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80085f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d020      	beq.n	800863e <xTaskCreateStatic+0x78>
 80085fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d01d      	beq.n	800863e <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008604:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800860a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	22b1      	movs	r2, #177	; 0xb1
 8008610:	2102      	movs	r1, #2
 8008612:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008614:	683c      	ldr	r4, [r7, #0]
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	68b9      	ldr	r1, [r7, #8]
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	2300      	movs	r3, #0
 800861e:	9303      	str	r3, [sp, #12]
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	9302      	str	r3, [sp, #8]
 8008624:	2318      	movs	r3, #24
 8008626:	18fb      	adds	r3, r7, r3
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	0023      	movs	r3, r4
 8008630:	f000 f858 	bl	80086e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	0018      	movs	r0, r3
 8008638:	f000 f8e4 	bl	8008804 <prvAddNewTaskToReadyList>
 800863c:	e001      	b.n	8008642 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 800863e:	2300      	movs	r3, #0
 8008640:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008642:	69bb      	ldr	r3, [r7, #24]
	}
 8008644:	0018      	movs	r0, r3
 8008646:	46bd      	mov	sp, r7
 8008648:	b009      	add	sp, #36	; 0x24
 800864a:	bd90      	pop	{r4, r7, pc}

0800864c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800864c:	b590      	push	{r4, r7, lr}
 800864e:	b08d      	sub	sp, #52	; 0x34
 8008650:	af04      	add	r7, sp, #16
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	603b      	str	r3, [r7, #0]
 8008658:	1dbb      	adds	r3, r7, #6
 800865a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800865c:	1dbb      	adds	r3, r7, #6
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	0018      	movs	r0, r3
 8008664:	f001 f804 	bl	8009670 <pvPortMalloc>
 8008668:	0003      	movs	r3, r0
 800866a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d010      	beq.n	8008694 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008672:	20b4      	movs	r0, #180	; 0xb4
 8008674:	f000 fffc 	bl	8009670 <pvPortMalloc>
 8008678:	0003      	movs	r3, r0
 800867a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	631a      	str	r2, [r3, #48]	; 0x30
 8008688:	e006      	b.n	8008698 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	0018      	movs	r0, r3
 800868e:	f001 f895 	bl	80097bc <vPortFree>
 8008692:	e001      	b.n	8008698 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008694:	2300      	movs	r3, #0
 8008696:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d01a      	beq.n	80086d4 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	22b1      	movs	r2, #177	; 0xb1
 80086a2:	2100      	movs	r1, #0
 80086a4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80086a6:	1dbb      	adds	r3, r7, #6
 80086a8:	881a      	ldrh	r2, [r3, #0]
 80086aa:	683c      	ldr	r4, [r7, #0]
 80086ac:	68b9      	ldr	r1, [r7, #8]
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	2300      	movs	r3, #0
 80086b2:	9303      	str	r3, [sp, #12]
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	9302      	str	r3, [sp, #8]
 80086b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ba:	9301      	str	r3, [sp, #4]
 80086bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	0023      	movs	r3, r4
 80086c2:	f000 f80f 	bl	80086e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	0018      	movs	r0, r3
 80086ca:	f000 f89b 	bl	8008804 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80086ce:	2301      	movs	r3, #1
 80086d0:	61bb      	str	r3, [r7, #24]
 80086d2:	e002      	b.n	80086da <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80086d4:	2301      	movs	r3, #1
 80086d6:	425b      	negs	r3, r3
 80086d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80086da:	69bb      	ldr	r3, [r7, #24]
	}
 80086dc:	0018      	movs	r0, r3
 80086de:	46bd      	mov	sp, r7
 80086e0:	b009      	add	sp, #36	; 0x24
 80086e2:	bd90      	pop	{r4, r7, pc}

080086e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
 80086f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	493e      	ldr	r1, [pc, #248]	; (80087f4 <prvInitialiseNewTask+0x110>)
 80086fa:	468c      	mov	ip, r1
 80086fc:	4463      	add	r3, ip
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	18d3      	adds	r3, r2, r3
 8008702:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	2207      	movs	r2, #7
 8008708:	4393      	bics	r3, r2
 800870a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	2207      	movs	r2, #7
 8008710:	4013      	ands	r3, r2
 8008712:	d001      	beq.n	8008718 <prvInitialiseNewTask+0x34>
 8008714:	b672      	cpsid	i
 8008716:	e7fe      	b.n	8008716 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008718:	2300      	movs	r3, #0
 800871a:	617b      	str	r3, [r7, #20]
 800871c:	e013      	b.n	8008746 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800871e:	68ba      	ldr	r2, [r7, #8]
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	18d3      	adds	r3, r2, r3
 8008724:	7818      	ldrb	r0, [r3, #0]
 8008726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008728:	2134      	movs	r1, #52	; 0x34
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	18d3      	adds	r3, r2, r3
 800872e:	185b      	adds	r3, r3, r1
 8008730:	1c02      	adds	r2, r0, #0
 8008732:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	18d3      	adds	r3, r2, r3
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d006      	beq.n	800874e <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	3301      	adds	r3, #1
 8008744:	617b      	str	r3, [r7, #20]
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2b0f      	cmp	r3, #15
 800874a:	d9e8      	bls.n	800871e <prvInitialiseNewTask+0x3a>
 800874c:	e000      	b.n	8008750 <prvInitialiseNewTask+0x6c>
		{
			break;
 800874e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008752:	2243      	movs	r2, #67	; 0x43
 8008754:	2100      	movs	r1, #0
 8008756:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	2b06      	cmp	r3, #6
 800875c:	d901      	bls.n	8008762 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800875e:	2306      	movs	r3, #6
 8008760:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	6a3a      	ldr	r2, [r7, #32]
 8008766:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	6a3a      	ldr	r2, [r7, #32]
 800876c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800876e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008770:	2200      	movs	r2, #0
 8008772:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008776:	3304      	adds	r3, #4
 8008778:	0018      	movs	r0, r3
 800877a:	f7ff fa09 	bl	8007b90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800877e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008780:	3318      	adds	r3, #24
 8008782:	0018      	movs	r0, r3
 8008784:	f7ff fa04 	bl	8007b90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800878c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	2207      	movs	r2, #7
 8008792:	1ad2      	subs	r2, r2, r3
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800879c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800879e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a0:	22ac      	movs	r2, #172	; 0xac
 80087a2:	2100      	movs	r1, #0
 80087a4:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	22b0      	movs	r2, #176	; 0xb0
 80087aa:	2100      	movs	r1, #0
 80087ac:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80087ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b0:	334c      	adds	r3, #76	; 0x4c
 80087b2:	2260      	movs	r2, #96	; 0x60
 80087b4:	2100      	movs	r1, #0
 80087b6:	0018      	movs	r0, r3
 80087b8:	f001 f935 	bl	8009a26 <memset>
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	4a0e      	ldr	r2, [pc, #56]	; (80087f8 <prvInitialiseNewTask+0x114>)
 80087c0:	651a      	str	r2, [r3, #80]	; 0x50
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	4a0d      	ldr	r2, [pc, #52]	; (80087fc <prvInitialiseNewTask+0x118>)
 80087c6:	655a      	str	r2, [r3, #84]	; 0x54
 80087c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ca:	4a0d      	ldr	r2, [pc, #52]	; (8008800 <prvInitialiseNewTask+0x11c>)
 80087cc:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	68f9      	ldr	r1, [r7, #12]
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	0018      	movs	r0, r3
 80087d6:	f000 fe19 	bl	800940c <pxPortInitialiseStack>
 80087da:	0002      	movs	r2, r0
 80087dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087de:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087ec:	46c0      	nop			; (mov r8, r8)
 80087ee:	46bd      	mov	sp, r7
 80087f0:	b006      	add	sp, #24
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	3fffffff 	.word	0x3fffffff
 80087f8:	0800ab7c 	.word	0x0800ab7c
 80087fc:	0800ab9c 	.word	0x0800ab9c
 8008800:	0800ab5c 	.word	0x0800ab5c

08008804 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800880c:	f000 fe98 	bl	8009540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008810:	4b28      	ldr	r3, [pc, #160]	; (80088b4 <prvAddNewTaskToReadyList+0xb0>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	1c5a      	adds	r2, r3, #1
 8008816:	4b27      	ldr	r3, [pc, #156]	; (80088b4 <prvAddNewTaskToReadyList+0xb0>)
 8008818:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800881a:	4b27      	ldr	r3, [pc, #156]	; (80088b8 <prvAddNewTaskToReadyList+0xb4>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d109      	bne.n	8008836 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008822:	4b25      	ldr	r3, [pc, #148]	; (80088b8 <prvAddNewTaskToReadyList+0xb4>)
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008828:	4b22      	ldr	r3, [pc, #136]	; (80088b4 <prvAddNewTaskToReadyList+0xb0>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d110      	bne.n	8008852 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008830:	f000 fb68 	bl	8008f04 <prvInitialiseTaskLists>
 8008834:	e00d      	b.n	8008852 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008836:	4b21      	ldr	r3, [pc, #132]	; (80088bc <prvAddNewTaskToReadyList+0xb8>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d109      	bne.n	8008852 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800883e:	4b1e      	ldr	r3, [pc, #120]	; (80088b8 <prvAddNewTaskToReadyList+0xb4>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008848:	429a      	cmp	r2, r3
 800884a:	d802      	bhi.n	8008852 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800884c:	4b1a      	ldr	r3, [pc, #104]	; (80088b8 <prvAddNewTaskToReadyList+0xb4>)
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008852:	4b1b      	ldr	r3, [pc, #108]	; (80088c0 <prvAddNewTaskToReadyList+0xbc>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	1c5a      	adds	r2, r3, #1
 8008858:	4b19      	ldr	r3, [pc, #100]	; (80088c0 <prvAddNewTaskToReadyList+0xbc>)
 800885a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008860:	4b18      	ldr	r3, [pc, #96]	; (80088c4 <prvAddNewTaskToReadyList+0xc0>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	429a      	cmp	r2, r3
 8008866:	d903      	bls.n	8008870 <prvAddNewTaskToReadyList+0x6c>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800886c:	4b15      	ldr	r3, [pc, #84]	; (80088c4 <prvAddNewTaskToReadyList+0xc0>)
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008874:	0013      	movs	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	189b      	adds	r3, r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4a12      	ldr	r2, [pc, #72]	; (80088c8 <prvAddNewTaskToReadyList+0xc4>)
 800887e:	189a      	adds	r2, r3, r2
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	3304      	adds	r3, #4
 8008884:	0019      	movs	r1, r3
 8008886:	0010      	movs	r0, r2
 8008888:	f7ff f98d 	bl	8007ba6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800888c:	f000 fe6a 	bl	8009564 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008890:	4b0a      	ldr	r3, [pc, #40]	; (80088bc <prvAddNewTaskToReadyList+0xb8>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d008      	beq.n	80088aa <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008898:	4b07      	ldr	r3, [pc, #28]	; (80088b8 <prvAddNewTaskToReadyList+0xb4>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d201      	bcs.n	80088aa <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80088a6:	f000 fe3b 	bl	8009520 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088aa:	46c0      	nop			; (mov r8, r8)
 80088ac:	46bd      	mov	sp, r7
 80088ae:	b002      	add	sp, #8
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	46c0      	nop			; (mov r8, r8)
 80088b4:	20000784 	.word	0x20000784
 80088b8:	20000684 	.word	0x20000684
 80088bc:	20000790 	.word	0x20000790
 80088c0:	200007a0 	.word	0x200007a0
 80088c4:	2000078c 	.word	0x2000078c
 80088c8:	20000688 	.word	0x20000688

080088cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80088d4:	2300      	movs	r3, #0
 80088d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d010      	beq.n	8008900 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80088de:	4b0d      	ldr	r3, [pc, #52]	; (8008914 <vTaskDelay+0x48>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <vTaskDelay+0x1e>
 80088e6:	b672      	cpsid	i
 80088e8:	e7fe      	b.n	80088e8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80088ea:	f000 f86d 	bl	80089c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2100      	movs	r1, #0
 80088f2:	0018      	movs	r0, r3
 80088f4:	f000 fd36 	bl	8009364 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80088f8:	f000 f872 	bl	80089e0 <xTaskResumeAll>
 80088fc:	0003      	movs	r3, r0
 80088fe:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8008906:	f000 fe0b 	bl	8009520 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800890a:	46c0      	nop			; (mov r8, r8)
 800890c:	46bd      	mov	sp, r7
 800890e:	b004      	add	sp, #16
 8008910:	bd80      	pop	{r7, pc}
 8008912:	46c0      	nop			; (mov r8, r8)
 8008914:	200007ac 	.word	0x200007ac

08008918 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008918:	b590      	push	{r4, r7, lr}
 800891a:	b089      	sub	sp, #36	; 0x24
 800891c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800891e:	2300      	movs	r3, #0
 8008920:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008922:	2300      	movs	r3, #0
 8008924:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008926:	003a      	movs	r2, r7
 8008928:	1d39      	adds	r1, r7, #4
 800892a:	2308      	movs	r3, #8
 800892c:	18fb      	adds	r3, r7, r3
 800892e:	0018      	movs	r0, r3
 8008930:	f7f7 fd72 	bl	8000418 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008934:	683c      	ldr	r4, [r7, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	491b      	ldr	r1, [pc, #108]	; (80089a8 <vTaskStartScheduler+0x90>)
 800893c:	481b      	ldr	r0, [pc, #108]	; (80089ac <vTaskStartScheduler+0x94>)
 800893e:	9202      	str	r2, [sp, #8]
 8008940:	9301      	str	r3, [sp, #4]
 8008942:	2300      	movs	r3, #0
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	2300      	movs	r3, #0
 8008948:	0022      	movs	r2, r4
 800894a:	f7ff fe3c 	bl	80085c6 <xTaskCreateStatic>
 800894e:	0002      	movs	r2, r0
 8008950:	4b17      	ldr	r3, [pc, #92]	; (80089b0 <vTaskStartScheduler+0x98>)
 8008952:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008954:	4b16      	ldr	r3, [pc, #88]	; (80089b0 <vTaskStartScheduler+0x98>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800895c:	2301      	movs	r3, #1
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	e001      	b.n	8008966 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008962:	2300      	movs	r3, #0
 8008964:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d113      	bne.n	8008994 <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800896c:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800896e:	4b11      	ldr	r3, [pc, #68]	; (80089b4 <vTaskStartScheduler+0x9c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	334c      	adds	r3, #76	; 0x4c
 8008974:	001a      	movs	r2, r3
 8008976:	4b10      	ldr	r3, [pc, #64]	; (80089b8 <vTaskStartScheduler+0xa0>)
 8008978:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800897a:	4b10      	ldr	r3, [pc, #64]	; (80089bc <vTaskStartScheduler+0xa4>)
 800897c:	2201      	movs	r2, #1
 800897e:	4252      	negs	r2, r2
 8008980:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008982:	4b0f      	ldr	r3, [pc, #60]	; (80089c0 <vTaskStartScheduler+0xa8>)
 8008984:	2201      	movs	r2, #1
 8008986:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008988:	4b0e      	ldr	r3, [pc, #56]	; (80089c4 <vTaskStartScheduler+0xac>)
 800898a:	2200      	movs	r2, #0
 800898c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800898e:	f000 fda3 	bl	80094d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008992:	e004      	b.n	800899e <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	3301      	adds	r3, #1
 8008998:	d101      	bne.n	800899e <vTaskStartScheduler+0x86>
 800899a:	b672      	cpsid	i
 800899c:	e7fe      	b.n	800899c <vTaskStartScheduler+0x84>
}
 800899e:	46c0      	nop			; (mov r8, r8)
 80089a0:	46bd      	mov	sp, r7
 80089a2:	b005      	add	sp, #20
 80089a4:	bd90      	pop	{r4, r7, pc}
 80089a6:	46c0      	nop			; (mov r8, r8)
 80089a8:	0800a67c 	.word	0x0800a67c
 80089ac:	08008ee5 	.word	0x08008ee5
 80089b0:	200007a8 	.word	0x200007a8
 80089b4:	20000684 	.word	0x20000684
 80089b8:	200000a8 	.word	0x200000a8
 80089bc:	200007a4 	.word	0x200007a4
 80089c0:	20000790 	.word	0x20000790
 80089c4:	20000788 	.word	0x20000788

080089c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80089cc:	4b03      	ldr	r3, [pc, #12]	; (80089dc <vTaskSuspendAll+0x14>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	1c5a      	adds	r2, r3, #1
 80089d2:	4b02      	ldr	r3, [pc, #8]	; (80089dc <vTaskSuspendAll+0x14>)
 80089d4:	601a      	str	r2, [r3, #0]
}
 80089d6:	46c0      	nop			; (mov r8, r8)
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	200007ac 	.word	0x200007ac

080089e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80089e6:	2300      	movs	r3, #0
 80089e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80089ea:	2300      	movs	r3, #0
 80089ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80089ee:	4b3a      	ldr	r3, [pc, #232]	; (8008ad8 <xTaskResumeAll+0xf8>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <xTaskResumeAll+0x1a>
 80089f6:	b672      	cpsid	i
 80089f8:	e7fe      	b.n	80089f8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80089fa:	f000 fda1 	bl	8009540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80089fe:	4b36      	ldr	r3, [pc, #216]	; (8008ad8 <xTaskResumeAll+0xf8>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	1e5a      	subs	r2, r3, #1
 8008a04:	4b34      	ldr	r3, [pc, #208]	; (8008ad8 <xTaskResumeAll+0xf8>)
 8008a06:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a08:	4b33      	ldr	r3, [pc, #204]	; (8008ad8 <xTaskResumeAll+0xf8>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d15b      	bne.n	8008ac8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a10:	4b32      	ldr	r3, [pc, #200]	; (8008adc <xTaskResumeAll+0xfc>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d057      	beq.n	8008ac8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a18:	e02f      	b.n	8008a7a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008a1a:	4b31      	ldr	r3, [pc, #196]	; (8008ae0 <xTaskResumeAll+0x100>)
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	3318      	adds	r3, #24
 8008a26:	0018      	movs	r0, r3
 8008a28:	f7ff f915 	bl	8007c56 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	0018      	movs	r0, r3
 8008a32:	f7ff f910 	bl	8007c56 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a3a:	4b2a      	ldr	r3, [pc, #168]	; (8008ae4 <xTaskResumeAll+0x104>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d903      	bls.n	8008a4a <xTaskResumeAll+0x6a>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a46:	4b27      	ldr	r3, [pc, #156]	; (8008ae4 <xTaskResumeAll+0x104>)
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a4e:	0013      	movs	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	189b      	adds	r3, r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4a24      	ldr	r2, [pc, #144]	; (8008ae8 <xTaskResumeAll+0x108>)
 8008a58:	189a      	adds	r2, r3, r2
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	0019      	movs	r1, r3
 8008a60:	0010      	movs	r0, r2
 8008a62:	f7ff f8a0 	bl	8007ba6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6a:	4b20      	ldr	r3, [pc, #128]	; (8008aec <xTaskResumeAll+0x10c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d302      	bcc.n	8008a7a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8008a74:	4b1e      	ldr	r3, [pc, #120]	; (8008af0 <xTaskResumeAll+0x110>)
 8008a76:	2201      	movs	r2, #1
 8008a78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a7a:	4b19      	ldr	r3, [pc, #100]	; (8008ae0 <xTaskResumeAll+0x100>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1cb      	bne.n	8008a1a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a88:	f000 fadc 	bl	8009044 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008a8c:	4b19      	ldr	r3, [pc, #100]	; (8008af4 <xTaskResumeAll+0x114>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00f      	beq.n	8008ab8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a98:	f000 f82e 	bl	8008af8 <xTaskIncrementTick>
 8008a9c:	1e03      	subs	r3, r0, #0
 8008a9e:	d002      	beq.n	8008aa6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8008aa0:	4b13      	ldr	r3, [pc, #76]	; (8008af0 <xTaskResumeAll+0x110>)
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1f2      	bne.n	8008a98 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8008ab2:	4b10      	ldr	r3, [pc, #64]	; (8008af4 <xTaskResumeAll+0x114>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ab8:	4b0d      	ldr	r3, [pc, #52]	; (8008af0 <xTaskResumeAll+0x110>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d003      	beq.n	8008ac8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ac4:	f000 fd2c 	bl	8009520 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ac8:	f000 fd4c 	bl	8009564 <vPortExitCritical>

	return xAlreadyYielded;
 8008acc:	68bb      	ldr	r3, [r7, #8]
}
 8008ace:	0018      	movs	r0, r3
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	b004      	add	sp, #16
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	46c0      	nop			; (mov r8, r8)
 8008ad8:	200007ac 	.word	0x200007ac
 8008adc:	20000784 	.word	0x20000784
 8008ae0:	20000744 	.word	0x20000744
 8008ae4:	2000078c 	.word	0x2000078c
 8008ae8:	20000688 	.word	0x20000688
 8008aec:	20000684 	.word	0x20000684
 8008af0:	20000798 	.word	0x20000798
 8008af4:	20000794 	.word	0x20000794

08008af8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008afe:	2300      	movs	r3, #0
 8008b00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b02:	4b4c      	ldr	r3, [pc, #304]	; (8008c34 <xTaskIncrementTick+0x13c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d000      	beq.n	8008b0c <xTaskIncrementTick+0x14>
 8008b0a:	e083      	b.n	8008c14 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b0c:	4b4a      	ldr	r3, [pc, #296]	; (8008c38 <xTaskIncrementTick+0x140>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3301      	adds	r3, #1
 8008b12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b14:	4b48      	ldr	r3, [pc, #288]	; (8008c38 <xTaskIncrementTick+0x140>)
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d117      	bne.n	8008b50 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b20:	4b46      	ldr	r3, [pc, #280]	; (8008c3c <xTaskIncrementTick+0x144>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d001      	beq.n	8008b2e <xTaskIncrementTick+0x36>
 8008b2a:	b672      	cpsid	i
 8008b2c:	e7fe      	b.n	8008b2c <xTaskIncrementTick+0x34>
 8008b2e:	4b43      	ldr	r3, [pc, #268]	; (8008c3c <xTaskIncrementTick+0x144>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	4b42      	ldr	r3, [pc, #264]	; (8008c40 <xTaskIncrementTick+0x148>)
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	4b40      	ldr	r3, [pc, #256]	; (8008c3c <xTaskIncrementTick+0x144>)
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	4b40      	ldr	r3, [pc, #256]	; (8008c40 <xTaskIncrementTick+0x148>)
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	601a      	str	r2, [r3, #0]
 8008b42:	4b40      	ldr	r3, [pc, #256]	; (8008c44 <xTaskIncrementTick+0x14c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	1c5a      	adds	r2, r3, #1
 8008b48:	4b3e      	ldr	r3, [pc, #248]	; (8008c44 <xTaskIncrementTick+0x14c>)
 8008b4a:	601a      	str	r2, [r3, #0]
 8008b4c:	f000 fa7a 	bl	8009044 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b50:	4b3d      	ldr	r3, [pc, #244]	; (8008c48 <xTaskIncrementTick+0x150>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d34e      	bcc.n	8008bf8 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b5a:	4b38      	ldr	r3, [pc, #224]	; (8008c3c <xTaskIncrementTick+0x144>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d101      	bne.n	8008b68 <xTaskIncrementTick+0x70>
 8008b64:	2301      	movs	r3, #1
 8008b66:	e000      	b.n	8008b6a <xTaskIncrementTick+0x72>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d004      	beq.n	8008b78 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b6e:	4b36      	ldr	r3, [pc, #216]	; (8008c48 <xTaskIncrementTick+0x150>)
 8008b70:	2201      	movs	r2, #1
 8008b72:	4252      	negs	r2, r2
 8008b74:	601a      	str	r2, [r3, #0]
					break;
 8008b76:	e03f      	b.n	8008bf8 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008b78:	4b30      	ldr	r3, [pc, #192]	; (8008c3c <xTaskIncrementTick+0x144>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d203      	bcs.n	8008b98 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b90:	4b2d      	ldr	r3, [pc, #180]	; (8008c48 <xTaskIncrementTick+0x150>)
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	601a      	str	r2, [r3, #0]
						break;
 8008b96:	e02f      	b.n	8008bf8 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	0018      	movs	r0, r3
 8008b9e:	f7ff f85a 	bl	8007c56 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d004      	beq.n	8008bb4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	3318      	adds	r3, #24
 8008bae:	0018      	movs	r0, r3
 8008bb0:	f7ff f851 	bl	8007c56 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb8:	4b24      	ldr	r3, [pc, #144]	; (8008c4c <xTaskIncrementTick+0x154>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d903      	bls.n	8008bc8 <xTaskIncrementTick+0xd0>
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc4:	4b21      	ldr	r3, [pc, #132]	; (8008c4c <xTaskIncrementTick+0x154>)
 8008bc6:	601a      	str	r2, [r3, #0]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bcc:	0013      	movs	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	189b      	adds	r3, r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4a1e      	ldr	r2, [pc, #120]	; (8008c50 <xTaskIncrementTick+0x158>)
 8008bd6:	189a      	adds	r2, r3, r2
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	3304      	adds	r3, #4
 8008bdc:	0019      	movs	r1, r3
 8008bde:	0010      	movs	r0, r2
 8008be0:	f7fe ffe1 	bl	8007ba6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be8:	4b1a      	ldr	r3, [pc, #104]	; (8008c54 <xTaskIncrementTick+0x15c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d3b3      	bcc.n	8008b5a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bf6:	e7b0      	b.n	8008b5a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bf8:	4b16      	ldr	r3, [pc, #88]	; (8008c54 <xTaskIncrementTick+0x15c>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfe:	4914      	ldr	r1, [pc, #80]	; (8008c50 <xTaskIncrementTick+0x158>)
 8008c00:	0013      	movs	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	189b      	adds	r3, r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	585b      	ldr	r3, [r3, r1]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d907      	bls.n	8008c1e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	617b      	str	r3, [r7, #20]
 8008c12:	e004      	b.n	8008c1e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008c14:	4b10      	ldr	r3, [pc, #64]	; (8008c58 <xTaskIncrementTick+0x160>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	4b0f      	ldr	r3, [pc, #60]	; (8008c58 <xTaskIncrementTick+0x160>)
 8008c1c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008c1e:	4b0f      	ldr	r3, [pc, #60]	; (8008c5c <xTaskIncrementTick+0x164>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8008c26:	2301      	movs	r3, #1
 8008c28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008c2a:	697b      	ldr	r3, [r7, #20]
}
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	b006      	add	sp, #24
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	200007ac 	.word	0x200007ac
 8008c38:	20000788 	.word	0x20000788
 8008c3c:	2000073c 	.word	0x2000073c
 8008c40:	20000740 	.word	0x20000740
 8008c44:	2000079c 	.word	0x2000079c
 8008c48:	200007a4 	.word	0x200007a4
 8008c4c:	2000078c 	.word	0x2000078c
 8008c50:	20000688 	.word	0x20000688
 8008c54:	20000684 	.word	0x20000684
 8008c58:	20000794 	.word	0x20000794
 8008c5c:	20000798 	.word	0x20000798

08008c60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c66:	4b25      	ldr	r3, [pc, #148]	; (8008cfc <vTaskSwitchContext+0x9c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d003      	beq.n	8008c76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c6e:	4b24      	ldr	r3, [pc, #144]	; (8008d00 <vTaskSwitchContext+0xa0>)
 8008c70:	2201      	movs	r2, #1
 8008c72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c74:	e03d      	b.n	8008cf2 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8008c76:	4b22      	ldr	r3, [pc, #136]	; (8008d00 <vTaskSwitchContext+0xa0>)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008c7c:	4b21      	ldr	r3, [pc, #132]	; (8008d04 <vTaskSwitchContext+0xa4>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	607b      	str	r3, [r7, #4]
 8008c82:	e007      	b.n	8008c94 <vTaskSwitchContext+0x34>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <vTaskSwitchContext+0x2e>
 8008c8a:	b672      	cpsid	i
 8008c8c:	e7fe      	b.n	8008c8c <vTaskSwitchContext+0x2c>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	3b01      	subs	r3, #1
 8008c92:	607b      	str	r3, [r7, #4]
 8008c94:	491c      	ldr	r1, [pc, #112]	; (8008d08 <vTaskSwitchContext+0xa8>)
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	0013      	movs	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	189b      	adds	r3, r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	585b      	ldr	r3, [r3, r1]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d0ee      	beq.n	8008c84 <vTaskSwitchContext+0x24>
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	0013      	movs	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	189b      	adds	r3, r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4a15      	ldr	r2, [pc, #84]	; (8008d08 <vTaskSwitchContext+0xa8>)
 8008cb2:	189b      	adds	r3, r3, r2
 8008cb4:	603b      	str	r3, [r7, #0]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	605a      	str	r2, [r3, #4]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	3308      	adds	r3, #8
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d104      	bne.n	8008cd6 <vTaskSwitchContext+0x76>
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	685a      	ldr	r2, [r3, #4]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	605a      	str	r2, [r3, #4]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	68da      	ldr	r2, [r3, #12]
 8008cdc:	4b0b      	ldr	r3, [pc, #44]	; (8008d0c <vTaskSwitchContext+0xac>)
 8008cde:	601a      	str	r2, [r3, #0]
 8008ce0:	4b08      	ldr	r3, [pc, #32]	; (8008d04 <vTaskSwitchContext+0xa4>)
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ce6:	4b09      	ldr	r3, [pc, #36]	; (8008d0c <vTaskSwitchContext+0xac>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	334c      	adds	r3, #76	; 0x4c
 8008cec:	001a      	movs	r2, r3
 8008cee:	4b08      	ldr	r3, [pc, #32]	; (8008d10 <vTaskSwitchContext+0xb0>)
 8008cf0:	601a      	str	r2, [r3, #0]
}
 8008cf2:	46c0      	nop			; (mov r8, r8)
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	b002      	add	sp, #8
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	46c0      	nop			; (mov r8, r8)
 8008cfc:	200007ac 	.word	0x200007ac
 8008d00:	20000798 	.word	0x20000798
 8008d04:	2000078c 	.word	0x2000078c
 8008d08:	20000688 	.word	0x20000688
 8008d0c:	20000684 	.word	0x20000684
 8008d10:	200000a8 	.word	0x200000a8

08008d14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <vTaskPlaceOnEventList+0x14>
 8008d24:	b672      	cpsid	i
 8008d26:	e7fe      	b.n	8008d26 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d28:	4b08      	ldr	r3, [pc, #32]	; (8008d4c <vTaskPlaceOnEventList+0x38>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	3318      	adds	r3, #24
 8008d2e:	001a      	movs	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	0011      	movs	r1, r2
 8008d34:	0018      	movs	r0, r3
 8008d36:	f7fe ff58 	bl	8007bea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	0018      	movs	r0, r3
 8008d40:	f000 fb10 	bl	8009364 <prvAddCurrentTaskToDelayedList>
}
 8008d44:	46c0      	nop			; (mov r8, r8)
 8008d46:	46bd      	mov	sp, r7
 8008d48:	b002      	add	sp, #8
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	20000684 	.word	0x20000684

08008d50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <xTaskRemoveFromEventList+0x1a>
 8008d66:	b672      	cpsid	i
 8008d68:	e7fe      	b.n	8008d68 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	3318      	adds	r3, #24
 8008d6e:	0018      	movs	r0, r3
 8008d70:	f7fe ff71 	bl	8007c56 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d74:	4b1e      	ldr	r3, [pc, #120]	; (8008df0 <xTaskRemoveFromEventList+0xa0>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d11d      	bne.n	8008db8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	3304      	adds	r3, #4
 8008d80:	0018      	movs	r0, r3
 8008d82:	f7fe ff68 	bl	8007c56 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d8a:	4b1a      	ldr	r3, [pc, #104]	; (8008df4 <xTaskRemoveFromEventList+0xa4>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d903      	bls.n	8008d9a <xTaskRemoveFromEventList+0x4a>
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d96:	4b17      	ldr	r3, [pc, #92]	; (8008df4 <xTaskRemoveFromEventList+0xa4>)
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d9e:	0013      	movs	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	189b      	adds	r3, r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4a14      	ldr	r2, [pc, #80]	; (8008df8 <xTaskRemoveFromEventList+0xa8>)
 8008da8:	189a      	adds	r2, r3, r2
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	3304      	adds	r3, #4
 8008dae:	0019      	movs	r1, r3
 8008db0:	0010      	movs	r0, r2
 8008db2:	f7fe fef8 	bl	8007ba6 <vListInsertEnd>
 8008db6:	e007      	b.n	8008dc8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	3318      	adds	r3, #24
 8008dbc:	001a      	movs	r2, r3
 8008dbe:	4b0f      	ldr	r3, [pc, #60]	; (8008dfc <xTaskRemoveFromEventList+0xac>)
 8008dc0:	0011      	movs	r1, r2
 8008dc2:	0018      	movs	r0, r3
 8008dc4:	f7fe feef 	bl	8007ba6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dcc:	4b0c      	ldr	r3, [pc, #48]	; (8008e00 <xTaskRemoveFromEventList+0xb0>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d905      	bls.n	8008de2 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008dda:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <xTaskRemoveFromEventList+0xb4>)
 8008ddc:	2201      	movs	r2, #1
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	e001      	b.n	8008de6 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8008de2:	2300      	movs	r3, #0
 8008de4:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008de6:	68fb      	ldr	r3, [r7, #12]
}
 8008de8:	0018      	movs	r0, r3
 8008dea:	46bd      	mov	sp, r7
 8008dec:	b004      	add	sp, #16
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	200007ac 	.word	0x200007ac
 8008df4:	2000078c 	.word	0x2000078c
 8008df8:	20000688 	.word	0x20000688
 8008dfc:	20000744 	.word	0x20000744
 8008e00:	20000684 	.word	0x20000684
 8008e04:	20000798 	.word	0x20000798

08008e08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e10:	4b05      	ldr	r3, [pc, #20]	; (8008e28 <vTaskInternalSetTimeOutState+0x20>)
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e18:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <vTaskInternalSetTimeOutState+0x24>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	605a      	str	r2, [r3, #4]
}
 8008e20:	46c0      	nop			; (mov r8, r8)
 8008e22:	46bd      	mov	sp, r7
 8008e24:	b002      	add	sp, #8
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	2000079c 	.word	0x2000079c
 8008e2c:	20000788 	.word	0x20000788

08008e30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <xTaskCheckForTimeOut+0x14>
 8008e40:	b672      	cpsid	i
 8008e42:	e7fe      	b.n	8008e42 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d101      	bne.n	8008e4e <xTaskCheckForTimeOut+0x1e>
 8008e4a:	b672      	cpsid	i
 8008e4c:	e7fe      	b.n	8008e4c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8008e4e:	f000 fb77 	bl	8009540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e52:	4b1d      	ldr	r3, [pc, #116]	; (8008ec8 <xTaskCheckForTimeOut+0x98>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3301      	adds	r3, #1
 8008e68:	d102      	bne.n	8008e70 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	617b      	str	r3, [r7, #20]
 8008e6e:	e024      	b.n	8008eba <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	4b15      	ldr	r3, [pc, #84]	; (8008ecc <xTaskCheckForTimeOut+0x9c>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d007      	beq.n	8008e8c <xTaskCheckForTimeOut+0x5c>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d302      	bcc.n	8008e8c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e86:	2301      	movs	r3, #1
 8008e88:	617b      	str	r3, [r7, #20]
 8008e8a:	e016      	b.n	8008eba <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d20c      	bcs.n	8008eb0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	1ad2      	subs	r2, r2, r3
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	0018      	movs	r0, r3
 8008ea6:	f7ff ffaf 	bl	8008e08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	617b      	str	r3, [r7, #20]
 8008eae:	e004      	b.n	8008eba <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008eba:	f000 fb53 	bl	8009564 <vPortExitCritical>

	return xReturn;
 8008ebe:	697b      	ldr	r3, [r7, #20]
}
 8008ec0:	0018      	movs	r0, r3
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	b006      	add	sp, #24
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	20000788 	.word	0x20000788
 8008ecc:	2000079c 	.word	0x2000079c

08008ed0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ed4:	4b02      	ldr	r3, [pc, #8]	; (8008ee0 <vTaskMissedYield+0x10>)
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	601a      	str	r2, [r3, #0]
}
 8008eda:	46c0      	nop			; (mov r8, r8)
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	20000798 	.word	0x20000798

08008ee4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b082      	sub	sp, #8
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008eec:	f000 f84e 	bl	8008f8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ef0:	4b03      	ldr	r3, [pc, #12]	; (8008f00 <prvIdleTask+0x1c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d9f9      	bls.n	8008eec <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ef8:	f000 fb12 	bl	8009520 <vPortYield>
		prvCheckTasksWaitingTermination();
 8008efc:	e7f6      	b.n	8008eec <prvIdleTask+0x8>
 8008efe:	46c0      	nop			; (mov r8, r8)
 8008f00:	20000688 	.word	0x20000688

08008f04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	607b      	str	r3, [r7, #4]
 8008f0e:	e00c      	b.n	8008f2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	0013      	movs	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	189b      	adds	r3, r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4a14      	ldr	r2, [pc, #80]	; (8008f6c <prvInitialiseTaskLists+0x68>)
 8008f1c:	189b      	adds	r3, r3, r2
 8008f1e:	0018      	movs	r0, r3
 8008f20:	f7fe fe18 	bl	8007b54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3301      	adds	r3, #1
 8008f28:	607b      	str	r3, [r7, #4]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b06      	cmp	r3, #6
 8008f2e:	d9ef      	bls.n	8008f10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f30:	4b0f      	ldr	r3, [pc, #60]	; (8008f70 <prvInitialiseTaskLists+0x6c>)
 8008f32:	0018      	movs	r0, r3
 8008f34:	f7fe fe0e 	bl	8007b54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f38:	4b0e      	ldr	r3, [pc, #56]	; (8008f74 <prvInitialiseTaskLists+0x70>)
 8008f3a:	0018      	movs	r0, r3
 8008f3c:	f7fe fe0a 	bl	8007b54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f40:	4b0d      	ldr	r3, [pc, #52]	; (8008f78 <prvInitialiseTaskLists+0x74>)
 8008f42:	0018      	movs	r0, r3
 8008f44:	f7fe fe06 	bl	8007b54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f48:	4b0c      	ldr	r3, [pc, #48]	; (8008f7c <prvInitialiseTaskLists+0x78>)
 8008f4a:	0018      	movs	r0, r3
 8008f4c:	f7fe fe02 	bl	8007b54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f50:	4b0b      	ldr	r3, [pc, #44]	; (8008f80 <prvInitialiseTaskLists+0x7c>)
 8008f52:	0018      	movs	r0, r3
 8008f54:	f7fe fdfe 	bl	8007b54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f58:	4b0a      	ldr	r3, [pc, #40]	; (8008f84 <prvInitialiseTaskLists+0x80>)
 8008f5a:	4a05      	ldr	r2, [pc, #20]	; (8008f70 <prvInitialiseTaskLists+0x6c>)
 8008f5c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f5e:	4b0a      	ldr	r3, [pc, #40]	; (8008f88 <prvInitialiseTaskLists+0x84>)
 8008f60:	4a04      	ldr	r2, [pc, #16]	; (8008f74 <prvInitialiseTaskLists+0x70>)
 8008f62:	601a      	str	r2, [r3, #0]
}
 8008f64:	46c0      	nop			; (mov r8, r8)
 8008f66:	46bd      	mov	sp, r7
 8008f68:	b002      	add	sp, #8
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	20000688 	.word	0x20000688
 8008f70:	20000714 	.word	0x20000714
 8008f74:	20000728 	.word	0x20000728
 8008f78:	20000744 	.word	0x20000744
 8008f7c:	20000758 	.word	0x20000758
 8008f80:	20000770 	.word	0x20000770
 8008f84:	2000073c 	.word	0x2000073c
 8008f88:	20000740 	.word	0x20000740

08008f8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f92:	e01a      	b.n	8008fca <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8008f94:	f000 fad4 	bl	8009540 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008f98:	4b10      	ldr	r3, [pc, #64]	; (8008fdc <prvCheckTasksWaitingTermination+0x50>)
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	3304      	adds	r3, #4
 8008fa4:	0018      	movs	r0, r3
 8008fa6:	f7fe fe56 	bl	8007c56 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008faa:	4b0d      	ldr	r3, [pc, #52]	; (8008fe0 <prvCheckTasksWaitingTermination+0x54>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	1e5a      	subs	r2, r3, #1
 8008fb0:	4b0b      	ldr	r3, [pc, #44]	; (8008fe0 <prvCheckTasksWaitingTermination+0x54>)
 8008fb2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008fb4:	4b0b      	ldr	r3, [pc, #44]	; (8008fe4 <prvCheckTasksWaitingTermination+0x58>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	1e5a      	subs	r2, r3, #1
 8008fba:	4b0a      	ldr	r3, [pc, #40]	; (8008fe4 <prvCheckTasksWaitingTermination+0x58>)
 8008fbc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8008fbe:	f000 fad1 	bl	8009564 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	0018      	movs	r0, r3
 8008fc6:	f000 f80f 	bl	8008fe8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fca:	4b06      	ldr	r3, [pc, #24]	; (8008fe4 <prvCheckTasksWaitingTermination+0x58>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1e0      	bne.n	8008f94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008fd2:	46c0      	nop			; (mov r8, r8)
 8008fd4:	46c0      	nop			; (mov r8, r8)
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	b002      	add	sp, #8
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	20000758 	.word	0x20000758
 8008fe0:	20000784 	.word	0x20000784
 8008fe4:	2000076c 	.word	0x2000076c

08008fe8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	334c      	adds	r3, #76	; 0x4c
 8008ff4:	0018      	movs	r0, r3
 8008ff6:	f000 fdc5 	bl	8009b84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	22b1      	movs	r2, #177	; 0xb1
 8008ffe:	5c9b      	ldrb	r3, [r3, r2]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d109      	bne.n	8009018 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009008:	0018      	movs	r0, r3
 800900a:	f000 fbd7 	bl	80097bc <vPortFree>
				vPortFree( pxTCB );
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	0018      	movs	r0, r3
 8009012:	f000 fbd3 	bl	80097bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009016:	e010      	b.n	800903a <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	22b1      	movs	r2, #177	; 0xb1
 800901c:	5c9b      	ldrb	r3, [r3, r2]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d104      	bne.n	800902c <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	0018      	movs	r0, r3
 8009026:	f000 fbc9 	bl	80097bc <vPortFree>
	}
 800902a:	e006      	b.n	800903a <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	22b1      	movs	r2, #177	; 0xb1
 8009030:	5c9b      	ldrb	r3, [r3, r2]
 8009032:	2b02      	cmp	r3, #2
 8009034:	d001      	beq.n	800903a <prvDeleteTCB+0x52>
 8009036:	b672      	cpsid	i
 8009038:	e7fe      	b.n	8009038 <prvDeleteTCB+0x50>
	}
 800903a:	46c0      	nop			; (mov r8, r8)
 800903c:	46bd      	mov	sp, r7
 800903e:	b002      	add	sp, #8
 8009040:	bd80      	pop	{r7, pc}
	...

08009044 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800904a:	4b0e      	ldr	r3, [pc, #56]	; (8009084 <prvResetNextTaskUnblockTime+0x40>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <prvResetNextTaskUnblockTime+0x14>
 8009054:	2301      	movs	r3, #1
 8009056:	e000      	b.n	800905a <prvResetNextTaskUnblockTime+0x16>
 8009058:	2300      	movs	r3, #0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d004      	beq.n	8009068 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800905e:	4b0a      	ldr	r3, [pc, #40]	; (8009088 <prvResetNextTaskUnblockTime+0x44>)
 8009060:	2201      	movs	r2, #1
 8009062:	4252      	negs	r2, r2
 8009064:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009066:	e008      	b.n	800907a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009068:	4b06      	ldr	r3, [pc, #24]	; (8009084 <prvResetNextTaskUnblockTime+0x40>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685a      	ldr	r2, [r3, #4]
 8009076:	4b04      	ldr	r3, [pc, #16]	; (8009088 <prvResetNextTaskUnblockTime+0x44>)
 8009078:	601a      	str	r2, [r3, #0]
}
 800907a:	46c0      	nop			; (mov r8, r8)
 800907c:	46bd      	mov	sp, r7
 800907e:	b002      	add	sp, #8
 8009080:	bd80      	pop	{r7, pc}
 8009082:	46c0      	nop			; (mov r8, r8)
 8009084:	2000073c 	.word	0x2000073c
 8009088:	200007a4 	.word	0x200007a4

0800908c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009092:	4b0a      	ldr	r3, [pc, #40]	; (80090bc <xTaskGetSchedulerState+0x30>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d102      	bne.n	80090a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800909a:	2301      	movs	r3, #1
 800909c:	607b      	str	r3, [r7, #4]
 800909e:	e008      	b.n	80090b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090a0:	4b07      	ldr	r3, [pc, #28]	; (80090c0 <xTaskGetSchedulerState+0x34>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d102      	bne.n	80090ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80090a8:	2302      	movs	r3, #2
 80090aa:	607b      	str	r3, [r7, #4]
 80090ac:	e001      	b.n	80090b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80090ae:	2300      	movs	r3, #0
 80090b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80090b2:	687b      	ldr	r3, [r7, #4]
	}
 80090b4:	0018      	movs	r0, r3
 80090b6:	46bd      	mov	sp, r7
 80090b8:	b002      	add	sp, #8
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	20000790 	.word	0x20000790
 80090c0:	200007ac 	.word	0x200007ac

080090c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80090d0:	2300      	movs	r3, #0
 80090d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d056      	beq.n	8009188 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090de:	4b2d      	ldr	r3, [pc, #180]	; (8009194 <xTaskPriorityInherit+0xd0>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d246      	bcs.n	8009176 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	db06      	blt.n	80090fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090f0:	4b28      	ldr	r3, [pc, #160]	; (8009194 <xTaskPriorityInherit+0xd0>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f6:	2207      	movs	r2, #7
 80090f8:	1ad2      	subs	r2, r2, r3
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	6959      	ldr	r1, [r3, #20]
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009106:	0013      	movs	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	189b      	adds	r3, r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4a22      	ldr	r2, [pc, #136]	; (8009198 <xTaskPriorityInherit+0xd4>)
 8009110:	189b      	adds	r3, r3, r2
 8009112:	4299      	cmp	r1, r3
 8009114:	d101      	bne.n	800911a <xTaskPriorityInherit+0x56>
 8009116:	2301      	movs	r3, #1
 8009118:	e000      	b.n	800911c <xTaskPriorityInherit+0x58>
 800911a:	2300      	movs	r3, #0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d022      	beq.n	8009166 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	3304      	adds	r3, #4
 8009124:	0018      	movs	r0, r3
 8009126:	f7fe fd96 	bl	8007c56 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800912a:	4b1a      	ldr	r3, [pc, #104]	; (8009194 <xTaskPriorityInherit+0xd0>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009138:	4b18      	ldr	r3, [pc, #96]	; (800919c <xTaskPriorityInherit+0xd8>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d903      	bls.n	8009148 <xTaskPriorityInherit+0x84>
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009144:	4b15      	ldr	r3, [pc, #84]	; (800919c <xTaskPriorityInherit+0xd8>)
 8009146:	601a      	str	r2, [r3, #0]
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914c:	0013      	movs	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	189b      	adds	r3, r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4a10      	ldr	r2, [pc, #64]	; (8009198 <xTaskPriorityInherit+0xd4>)
 8009156:	189a      	adds	r2, r3, r2
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	3304      	adds	r3, #4
 800915c:	0019      	movs	r1, r3
 800915e:	0010      	movs	r0, r2
 8009160:	f7fe fd21 	bl	8007ba6 <vListInsertEnd>
 8009164:	e004      	b.n	8009170 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009166:	4b0b      	ldr	r3, [pc, #44]	; (8009194 <xTaskPriorityInherit+0xd0>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009170:	2301      	movs	r3, #1
 8009172:	60fb      	str	r3, [r7, #12]
 8009174:	e008      	b.n	8009188 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800917a:	4b06      	ldr	r3, [pc, #24]	; (8009194 <xTaskPriorityInherit+0xd0>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009180:	429a      	cmp	r2, r3
 8009182:	d201      	bcs.n	8009188 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009184:	2301      	movs	r3, #1
 8009186:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009188:	68fb      	ldr	r3, [r7, #12]
	}
 800918a:	0018      	movs	r0, r3
 800918c:	46bd      	mov	sp, r7
 800918e:	b004      	add	sp, #16
 8009190:	bd80      	pop	{r7, pc}
 8009192:	46c0      	nop			; (mov r8, r8)
 8009194:	20000684 	.word	0x20000684
 8009198:	20000688 	.word	0x20000688
 800919c:	2000078c 	.word	0x2000078c

080091a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80091ac:	2300      	movs	r3, #0
 80091ae:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d044      	beq.n	8009240 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80091b6:	4b25      	ldr	r3, [pc, #148]	; (800924c <xTaskPriorityDisinherit+0xac>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d001      	beq.n	80091c4 <xTaskPriorityDisinherit+0x24>
 80091c0:	b672      	cpsid	i
 80091c2:	e7fe      	b.n	80091c2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d101      	bne.n	80091d0 <xTaskPriorityDisinherit+0x30>
 80091cc:	b672      	cpsid	i
 80091ce:	e7fe      	b.n	80091ce <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091d4:	1e5a      	subs	r2, r3, #1
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d02c      	beq.n	8009240 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d128      	bne.n	8009240 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	3304      	adds	r3, #4
 80091f2:	0018      	movs	r0, r3
 80091f4:	f7fe fd2f 	bl	8007c56 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009204:	2207      	movs	r2, #7
 8009206:	1ad2      	subs	r2, r2, r3
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009210:	4b0f      	ldr	r3, [pc, #60]	; (8009250 <xTaskPriorityDisinherit+0xb0>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	429a      	cmp	r2, r3
 8009216:	d903      	bls.n	8009220 <xTaskPriorityDisinherit+0x80>
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800921c:	4b0c      	ldr	r3, [pc, #48]	; (8009250 <xTaskPriorityDisinherit+0xb0>)
 800921e:	601a      	str	r2, [r3, #0]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009224:	0013      	movs	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	189b      	adds	r3, r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4a09      	ldr	r2, [pc, #36]	; (8009254 <xTaskPriorityDisinherit+0xb4>)
 800922e:	189a      	adds	r2, r3, r2
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	3304      	adds	r3, #4
 8009234:	0019      	movs	r1, r3
 8009236:	0010      	movs	r0, r2
 8009238:	f7fe fcb5 	bl	8007ba6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800923c:	2301      	movs	r3, #1
 800923e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009240:	68fb      	ldr	r3, [r7, #12]
	}
 8009242:	0018      	movs	r0, r3
 8009244:	46bd      	mov	sp, r7
 8009246:	b004      	add	sp, #16
 8009248:	bd80      	pop	{r7, pc}
 800924a:	46c0      	nop			; (mov r8, r8)
 800924c:	20000684 	.word	0x20000684
 8009250:	2000078c 	.word	0x2000078c
 8009254:	20000688 	.word	0x20000688

08009258 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009266:	2301      	movs	r3, #1
 8009268:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d05d      	beq.n	800932c <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <vTaskPriorityDisinheritAfterTimeout+0x24>
 8009278:	b672      	cpsid	i
 800927a:	e7fe      	b.n	800927a <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009280:	683a      	ldr	r2, [r7, #0]
 8009282:	429a      	cmp	r2, r3
 8009284:	d902      	bls.n	800928c <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	617b      	str	r3, [r7, #20]
 800928a:	e002      	b.n	8009292 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009290:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	429a      	cmp	r2, r3
 800929a:	d047      	beq.n	800932c <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d142      	bne.n	800932c <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80092a6:	4b23      	ldr	r3, [pc, #140]	; (8009334 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d101      	bne.n	80092b4 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 80092b0:	b672      	cpsid	i
 80092b2:	e7fe      	b.n	80092b2 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b8:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	697a      	ldr	r2, [r7, #20]
 80092be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	db04      	blt.n	80092d2 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	2207      	movs	r2, #7
 80092cc:	1ad2      	subs	r2, r2, r3
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	6959      	ldr	r1, [r3, #20]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	0013      	movs	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	189b      	adds	r3, r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	4a15      	ldr	r2, [pc, #84]	; (8009338 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 80092e2:	189b      	adds	r3, r3, r2
 80092e4:	4299      	cmp	r1, r3
 80092e6:	d101      	bne.n	80092ec <vTaskPriorityDisinheritAfterTimeout+0x94>
 80092e8:	2301      	movs	r3, #1
 80092ea:	e000      	b.n	80092ee <vTaskPriorityDisinheritAfterTimeout+0x96>
 80092ec:	2300      	movs	r3, #0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d01c      	beq.n	800932c <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	3304      	adds	r3, #4
 80092f6:	0018      	movs	r0, r3
 80092f8:	f7fe fcad 	bl	8007c56 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009300:	4b0e      	ldr	r3, [pc, #56]	; (800933c <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	429a      	cmp	r2, r3
 8009306:	d903      	bls.n	8009310 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930c:	4b0b      	ldr	r3, [pc, #44]	; (800933c <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009314:	0013      	movs	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	189b      	adds	r3, r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4a06      	ldr	r2, [pc, #24]	; (8009338 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800931e:	189a      	adds	r2, r3, r2
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	3304      	adds	r3, #4
 8009324:	0019      	movs	r1, r3
 8009326:	0010      	movs	r0, r2
 8009328:	f7fe fc3d 	bl	8007ba6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800932c:	46c0      	nop			; (mov r8, r8)
 800932e:	46bd      	mov	sp, r7
 8009330:	b006      	add	sp, #24
 8009332:	bd80      	pop	{r7, pc}
 8009334:	20000684 	.word	0x20000684
 8009338:	20000688 	.word	0x20000688
 800933c:	2000078c 	.word	0x2000078c

08009340 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009340:	b580      	push	{r7, lr}
 8009342:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009344:	4b06      	ldr	r3, [pc, #24]	; (8009360 <pvTaskIncrementMutexHeldCount+0x20>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d004      	beq.n	8009356 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800934c:	4b04      	ldr	r3, [pc, #16]	; (8009360 <pvTaskIncrementMutexHeldCount+0x20>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009352:	3201      	adds	r2, #1
 8009354:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009356:	4b02      	ldr	r3, [pc, #8]	; (8009360 <pvTaskIncrementMutexHeldCount+0x20>)
 8009358:	681b      	ldr	r3, [r3, #0]
	}
 800935a:	0018      	movs	r0, r3
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	20000684 	.word	0x20000684

08009364 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800936e:	4b21      	ldr	r3, [pc, #132]	; (80093f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009374:	4b20      	ldr	r3, [pc, #128]	; (80093f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3304      	adds	r3, #4
 800937a:	0018      	movs	r0, r3
 800937c:	f7fe fc6b 	bl	8007c56 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	3301      	adds	r3, #1
 8009384:	d10b      	bne.n	800939e <prvAddCurrentTaskToDelayedList+0x3a>
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d008      	beq.n	800939e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800938c:	4b1a      	ldr	r3, [pc, #104]	; (80093f8 <prvAddCurrentTaskToDelayedList+0x94>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	1d1a      	adds	r2, r3, #4
 8009392:	4b1a      	ldr	r3, [pc, #104]	; (80093fc <prvAddCurrentTaskToDelayedList+0x98>)
 8009394:	0011      	movs	r1, r2
 8009396:	0018      	movs	r0, r3
 8009398:	f7fe fc05 	bl	8007ba6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800939c:	e026      	b.n	80093ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800939e:	68fa      	ldr	r2, [r7, #12]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	18d3      	adds	r3, r2, r3
 80093a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80093a6:	4b14      	ldr	r3, [pc, #80]	; (80093f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d209      	bcs.n	80093ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093b6:	4b12      	ldr	r3, [pc, #72]	; (8009400 <prvAddCurrentTaskToDelayedList+0x9c>)
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	4b0f      	ldr	r3, [pc, #60]	; (80093f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3304      	adds	r3, #4
 80093c0:	0019      	movs	r1, r3
 80093c2:	0010      	movs	r0, r2
 80093c4:	f7fe fc11 	bl	8007bea <vListInsert>
}
 80093c8:	e010      	b.n	80093ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093ca:	4b0e      	ldr	r3, [pc, #56]	; (8009404 <prvAddCurrentTaskToDelayedList+0xa0>)
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	4b0a      	ldr	r3, [pc, #40]	; (80093f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3304      	adds	r3, #4
 80093d4:	0019      	movs	r1, r3
 80093d6:	0010      	movs	r0, r2
 80093d8:	f7fe fc07 	bl	8007bea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80093dc:	4b0a      	ldr	r3, [pc, #40]	; (8009408 <prvAddCurrentTaskToDelayedList+0xa4>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d202      	bcs.n	80093ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80093e6:	4b08      	ldr	r3, [pc, #32]	; (8009408 <prvAddCurrentTaskToDelayedList+0xa4>)
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	601a      	str	r2, [r3, #0]
}
 80093ec:	46c0      	nop			; (mov r8, r8)
 80093ee:	46bd      	mov	sp, r7
 80093f0:	b004      	add	sp, #16
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	20000788 	.word	0x20000788
 80093f8:	20000684 	.word	0x20000684
 80093fc:	20000770 	.word	0x20000770
 8009400:	20000740 	.word	0x20000740
 8009404:	2000073c 	.word	0x2000073c
 8009408:	200007a4 	.word	0x200007a4

0800940c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	3b04      	subs	r3, #4
 800941c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2280      	movs	r2, #128	; 0x80
 8009422:	0452      	lsls	r2, r2, #17
 8009424:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	3b04      	subs	r3, #4
 800942a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	3b04      	subs	r3, #4
 8009436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009438:	4a08      	ldr	r2, [pc, #32]	; (800945c <pxPortInitialiseStack+0x50>)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	3b14      	subs	r3, #20
 8009442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	3b20      	subs	r3, #32
 800944e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009450:	68fb      	ldr	r3, [r7, #12]
}
 8009452:	0018      	movs	r0, r3
 8009454:	46bd      	mov	sp, r7
 8009456:	b004      	add	sp, #16
 8009458:	bd80      	pop	{r7, pc}
 800945a:	46c0      	nop			; (mov r8, r8)
 800945c:	08009461 	.word	0x08009461

08009460 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009466:	2300      	movs	r3, #0
 8009468:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800946a:	4b08      	ldr	r3, [pc, #32]	; (800948c <prvTaskExitError+0x2c>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3301      	adds	r3, #1
 8009470:	d001      	beq.n	8009476 <prvTaskExitError+0x16>
 8009472:	b672      	cpsid	i
 8009474:	e7fe      	b.n	8009474 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8009476:	b672      	cpsid	i
	while( ulDummy == 0 )
 8009478:	46c0      	nop			; (mov r8, r8)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d0fc      	beq.n	800947a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009480:	46c0      	nop			; (mov r8, r8)
 8009482:	46c0      	nop			; (mov r8, r8)
 8009484:	46bd      	mov	sp, r7
 8009486:	b002      	add	sp, #8
 8009488:	bd80      	pop	{r7, pc}
 800948a:	46c0      	nop			; (mov r8, r8)
 800948c:	200000a4 	.word	0x200000a4

08009490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8009494:	46c0      	nop			; (mov r8, r8)
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	0000      	movs	r0, r0
 800949c:	0000      	movs	r0, r0
	...

080094a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80094a0:	4a0b      	ldr	r2, [pc, #44]	; (80094d0 <pxCurrentTCBConst2>)
 80094a2:	6813      	ldr	r3, [r2, #0]
 80094a4:	6818      	ldr	r0, [r3, #0]
 80094a6:	3020      	adds	r0, #32
 80094a8:	f380 8809 	msr	PSP, r0
 80094ac:	2002      	movs	r0, #2
 80094ae:	f380 8814 	msr	CONTROL, r0
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80094b8:	46ae      	mov	lr, r5
 80094ba:	bc08      	pop	{r3}
 80094bc:	bc04      	pop	{r2}
 80094be:	b662      	cpsie	i
 80094c0:	4718      	bx	r3
 80094c2:	46c0      	nop			; (mov r8, r8)
 80094c4:	46c0      	nop			; (mov r8, r8)
 80094c6:	46c0      	nop			; (mov r8, r8)
 80094c8:	46c0      	nop			; (mov r8, r8)
 80094ca:	46c0      	nop			; (mov r8, r8)
 80094cc:	46c0      	nop			; (mov r8, r8)
 80094ce:	46c0      	nop			; (mov r8, r8)

080094d0 <pxCurrentTCBConst2>:
 80094d0:	20000684 	.word	0x20000684
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80094d4:	46c0      	nop			; (mov r8, r8)
 80094d6:	46c0      	nop			; (mov r8, r8)

080094d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80094dc:	4b0e      	ldr	r3, [pc, #56]	; (8009518 <xPortStartScheduler+0x40>)
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	4b0d      	ldr	r3, [pc, #52]	; (8009518 <xPortStartScheduler+0x40>)
 80094e2:	21ff      	movs	r1, #255	; 0xff
 80094e4:	0409      	lsls	r1, r1, #16
 80094e6:	430a      	orrs	r2, r1
 80094e8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80094ea:	4b0b      	ldr	r3, [pc, #44]	; (8009518 <xPortStartScheduler+0x40>)
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	4b0a      	ldr	r3, [pc, #40]	; (8009518 <xPortStartScheduler+0x40>)
 80094f0:	21ff      	movs	r1, #255	; 0xff
 80094f2:	0609      	lsls	r1, r1, #24
 80094f4:	430a      	orrs	r2, r1
 80094f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80094f8:	f000 f898 	bl	800962c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80094fc:	4b07      	ldr	r3, [pc, #28]	; (800951c <xPortStartScheduler+0x44>)
 80094fe:	2200      	movs	r2, #0
 8009500:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8009502:	f7ff ffcd 	bl	80094a0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009506:	f7ff fbab 	bl	8008c60 <vTaskSwitchContext>
	prvTaskExitError();
 800950a:	f7ff ffa9 	bl	8009460 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800950e:	2300      	movs	r3, #0
}
 8009510:	0018      	movs	r0, r3
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	46c0      	nop			; (mov r8, r8)
 8009518:	e000ed20 	.word	0xe000ed20
 800951c:	200000a4 	.word	0x200000a4

08009520 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8009524:	4b05      	ldr	r3, [pc, #20]	; (800953c <vPortYield+0x1c>)
 8009526:	2280      	movs	r2, #128	; 0x80
 8009528:	0552      	lsls	r2, r2, #21
 800952a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800952c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009530:	f3bf 8f6f 	isb	sy
}
 8009534:	46c0      	nop			; (mov r8, r8)
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	46c0      	nop			; (mov r8, r8)
 800953c:	e000ed04 	.word	0xe000ed04

08009540 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8009544:	b672      	cpsid	i
    uxCriticalNesting++;
 8009546:	4b06      	ldr	r3, [pc, #24]	; (8009560 <vPortEnterCritical+0x20>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	1c5a      	adds	r2, r3, #1
 800954c:	4b04      	ldr	r3, [pc, #16]	; (8009560 <vPortEnterCritical+0x20>)
 800954e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8009550:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009554:	f3bf 8f6f 	isb	sy
}
 8009558:	46c0      	nop			; (mov r8, r8)
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	46c0      	nop			; (mov r8, r8)
 8009560:	200000a4 	.word	0x200000a4

08009564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009568:	4b09      	ldr	r3, [pc, #36]	; (8009590 <vPortExitCritical+0x2c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d101      	bne.n	8009574 <vPortExitCritical+0x10>
 8009570:	b672      	cpsid	i
 8009572:	e7fe      	b.n	8009572 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8009574:	4b06      	ldr	r3, [pc, #24]	; (8009590 <vPortExitCritical+0x2c>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	1e5a      	subs	r2, r3, #1
 800957a:	4b05      	ldr	r3, [pc, #20]	; (8009590 <vPortExitCritical+0x2c>)
 800957c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800957e:	4b04      	ldr	r3, [pc, #16]	; (8009590 <vPortExitCritical+0x2c>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d100      	bne.n	8009588 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8009586:	b662      	cpsie	i
    }
}
 8009588:	46c0      	nop			; (mov r8, r8)
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	46c0      	nop			; (mov r8, r8)
 8009590:	200000a4 	.word	0x200000a4

08009594 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8009594:	f3ef 8010 	mrs	r0, PRIMASK
 8009598:	b672      	cpsid	i
 800959a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800959c:	46c0      	nop			; (mov r8, r8)
 800959e:	0018      	movs	r0, r3

080095a0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80095a0:	f380 8810 	msr	PRIMASK, r0
 80095a4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80095a6:	46c0      	nop			; (mov r8, r8)
	...

080095b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095b0:	f3ef 8009 	mrs	r0, PSP
 80095b4:	4b0e      	ldr	r3, [pc, #56]	; (80095f0 <pxCurrentTCBConst>)
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	3820      	subs	r0, #32
 80095ba:	6010      	str	r0, [r2, #0]
 80095bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80095be:	4644      	mov	r4, r8
 80095c0:	464d      	mov	r5, r9
 80095c2:	4656      	mov	r6, sl
 80095c4:	465f      	mov	r7, fp
 80095c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80095c8:	b508      	push	{r3, lr}
 80095ca:	b672      	cpsid	i
 80095cc:	f7ff fb48 	bl	8008c60 <vTaskSwitchContext>
 80095d0:	b662      	cpsie	i
 80095d2:	bc0c      	pop	{r2, r3}
 80095d4:	6811      	ldr	r1, [r2, #0]
 80095d6:	6808      	ldr	r0, [r1, #0]
 80095d8:	3010      	adds	r0, #16
 80095da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80095dc:	46a0      	mov	r8, r4
 80095de:	46a9      	mov	r9, r5
 80095e0:	46b2      	mov	sl, r6
 80095e2:	46bb      	mov	fp, r7
 80095e4:	f380 8809 	msr	PSP, r0
 80095e8:	3820      	subs	r0, #32
 80095ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80095ec:	4718      	bx	r3
 80095ee:	46c0      	nop			; (mov r8, r8)

080095f0 <pxCurrentTCBConst>:
 80095f0:	20000684 	.word	0x20000684
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80095f4:	46c0      	nop			; (mov r8, r8)
 80095f6:	46c0      	nop			; (mov r8, r8)

080095f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80095fe:	f7ff ffc9 	bl	8009594 <ulSetInterruptMaskFromISR>
 8009602:	0003      	movs	r3, r0
 8009604:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009606:	f7ff fa77 	bl	8008af8 <xTaskIncrementTick>
 800960a:	1e03      	subs	r3, r0, #0
 800960c:	d003      	beq.n	8009616 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800960e:	4b06      	ldr	r3, [pc, #24]	; (8009628 <SysTick_Handler+0x30>)
 8009610:	2280      	movs	r2, #128	; 0x80
 8009612:	0552      	lsls	r2, r2, #21
 8009614:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	0018      	movs	r0, r3
 800961a:	f7ff ffc1 	bl	80095a0 <vClearInterruptMaskFromISR>
}
 800961e:	46c0      	nop			; (mov r8, r8)
 8009620:	46bd      	mov	sp, r7
 8009622:	b002      	add	sp, #8
 8009624:	bd80      	pop	{r7, pc}
 8009626:	46c0      	nop			; (mov r8, r8)
 8009628:	e000ed04 	.word	0xe000ed04

0800962c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8009630:	4b0b      	ldr	r3, [pc, #44]	; (8009660 <prvSetupTimerInterrupt+0x34>)
 8009632:	2200      	movs	r2, #0
 8009634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8009636:	4b0b      	ldr	r3, [pc, #44]	; (8009664 <prvSetupTimerInterrupt+0x38>)
 8009638:	2200      	movs	r2, #0
 800963a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800963c:	4b0a      	ldr	r3, [pc, #40]	; (8009668 <prvSetupTimerInterrupt+0x3c>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	22fa      	movs	r2, #250	; 0xfa
 8009642:	0091      	lsls	r1, r2, #2
 8009644:	0018      	movs	r0, r3
 8009646:	f7f6 fd71 	bl	800012c <__udivsi3>
 800964a:	0003      	movs	r3, r0
 800964c:	001a      	movs	r2, r3
 800964e:	4b07      	ldr	r3, [pc, #28]	; (800966c <prvSetupTimerInterrupt+0x40>)
 8009650:	3a01      	subs	r2, #1
 8009652:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8009654:	4b02      	ldr	r3, [pc, #8]	; (8009660 <prvSetupTimerInterrupt+0x34>)
 8009656:	2207      	movs	r2, #7
 8009658:	601a      	str	r2, [r3, #0]
}
 800965a:	46c0      	nop			; (mov r8, r8)
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	e000e010 	.word	0xe000e010
 8009664:	e000e018 	.word	0xe000e018
 8009668:	20000040 	.word	0x20000040
 800966c:	e000e014 	.word	0xe000e014

08009670 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009678:	2300      	movs	r3, #0
 800967a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800967c:	f7ff f9a4 	bl	80089c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009680:	4b49      	ldr	r3, [pc, #292]	; (80097a8 <pvPortMalloc+0x138>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d101      	bne.n	800968c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009688:	f000 f8e0 	bl	800984c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800968c:	4b47      	ldr	r3, [pc, #284]	; (80097ac <pvPortMalloc+0x13c>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	4013      	ands	r3, r2
 8009694:	d000      	beq.n	8009698 <pvPortMalloc+0x28>
 8009696:	e079      	b.n	800978c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d012      	beq.n	80096c4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800969e:	2208      	movs	r2, #8
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	189b      	adds	r3, r3, r2
 80096a4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2207      	movs	r2, #7
 80096aa:	4013      	ands	r3, r2
 80096ac:	d00a      	beq.n	80096c4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2207      	movs	r2, #7
 80096b2:	4393      	bics	r3, r2
 80096b4:	3308      	adds	r3, #8
 80096b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2207      	movs	r2, #7
 80096bc:	4013      	ands	r3, r2
 80096be:	d001      	beq.n	80096c4 <pvPortMalloc+0x54>
 80096c0:	b672      	cpsid	i
 80096c2:	e7fe      	b.n	80096c2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d060      	beq.n	800978c <pvPortMalloc+0x11c>
 80096ca:	4b39      	ldr	r3, [pc, #228]	; (80097b0 <pvPortMalloc+0x140>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d85b      	bhi.n	800978c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096d4:	4b37      	ldr	r3, [pc, #220]	; (80097b4 <pvPortMalloc+0x144>)
 80096d6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80096d8:	4b36      	ldr	r3, [pc, #216]	; (80097b4 <pvPortMalloc+0x144>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096de:	e004      	b.n	80096ea <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d903      	bls.n	80096fc <pvPortMalloc+0x8c>
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d1f1      	bne.n	80096e0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80096fc:	4b2a      	ldr	r3, [pc, #168]	; (80097a8 <pvPortMalloc+0x138>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	429a      	cmp	r2, r3
 8009704:	d042      	beq.n	800978c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2208      	movs	r2, #8
 800970c:	189b      	adds	r3, r3, r2
 800970e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	1ad2      	subs	r2, r2, r3
 8009720:	2308      	movs	r3, #8
 8009722:	005b      	lsls	r3, r3, #1
 8009724:	429a      	cmp	r2, r3
 8009726:	d916      	bls.n	8009756 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009728:	697a      	ldr	r2, [r7, #20]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	18d3      	adds	r3, r2, r3
 800972e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2207      	movs	r2, #7
 8009734:	4013      	ands	r3, r2
 8009736:	d001      	beq.n	800973c <pvPortMalloc+0xcc>
 8009738:	b672      	cpsid	i
 800973a:	e7fe      	b.n	800973a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	685a      	ldr	r2, [r3, #4]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	1ad2      	subs	r2, r2, r3
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	0018      	movs	r0, r3
 8009752:	f000 f8db 	bl	800990c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009756:	4b16      	ldr	r3, [pc, #88]	; (80097b0 <pvPortMalloc+0x140>)
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	1ad2      	subs	r2, r2, r3
 8009760:	4b13      	ldr	r3, [pc, #76]	; (80097b0 <pvPortMalloc+0x140>)
 8009762:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009764:	4b12      	ldr	r3, [pc, #72]	; (80097b0 <pvPortMalloc+0x140>)
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	4b13      	ldr	r3, [pc, #76]	; (80097b8 <pvPortMalloc+0x148>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	429a      	cmp	r2, r3
 800976e:	d203      	bcs.n	8009778 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009770:	4b0f      	ldr	r3, [pc, #60]	; (80097b0 <pvPortMalloc+0x140>)
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	4b10      	ldr	r3, [pc, #64]	; (80097b8 <pvPortMalloc+0x148>)
 8009776:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	4b0b      	ldr	r3, [pc, #44]	; (80097ac <pvPortMalloc+0x13c>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	431a      	orrs	r2, r3
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2200      	movs	r2, #0
 800978a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800978c:	f7ff f928 	bl	80089e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2207      	movs	r2, #7
 8009794:	4013      	ands	r3, r2
 8009796:	d001      	beq.n	800979c <pvPortMalloc+0x12c>
 8009798:	b672      	cpsid	i
 800979a:	e7fe      	b.n	800979a <pvPortMalloc+0x12a>
	return pvReturn;
 800979c:	68fb      	ldr	r3, [r7, #12]
}
 800979e:	0018      	movs	r0, r3
 80097a0:	46bd      	mov	sp, r7
 80097a2:	b006      	add	sp, #24
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	46c0      	nop			; (mov r8, r8)
 80097a8:	200017b8 	.word	0x200017b8
 80097ac:	200017c4 	.word	0x200017c4
 80097b0:	200017bc 	.word	0x200017bc
 80097b4:	200017b0 	.word	0x200017b0
 80097b8:	200017c0 	.word	0x200017c0

080097bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d035      	beq.n	800983a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80097ce:	2308      	movs	r3, #8
 80097d0:	425b      	negs	r3, r3
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	18d3      	adds	r3, r2, r3
 80097d6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	4b18      	ldr	r3, [pc, #96]	; (8009844 <vPortFree+0x88>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4013      	ands	r3, r2
 80097e6:	d101      	bne.n	80097ec <vPortFree+0x30>
 80097e8:	b672      	cpsid	i
 80097ea:	e7fe      	b.n	80097ea <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <vPortFree+0x3c>
 80097f4:	b672      	cpsid	i
 80097f6:	e7fe      	b.n	80097f6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	4b11      	ldr	r3, [pc, #68]	; (8009844 <vPortFree+0x88>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4013      	ands	r3, r2
 8009802:	d01a      	beq.n	800983a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d116      	bne.n	800983a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	685a      	ldr	r2, [r3, #4]
 8009810:	4b0c      	ldr	r3, [pc, #48]	; (8009844 <vPortFree+0x88>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	43db      	mvns	r3, r3
 8009816:	401a      	ands	r2, r3
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800981c:	f7ff f8d4 	bl	80089c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	685a      	ldr	r2, [r3, #4]
 8009824:	4b08      	ldr	r3, [pc, #32]	; (8009848 <vPortFree+0x8c>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	18d2      	adds	r2, r2, r3
 800982a:	4b07      	ldr	r3, [pc, #28]	; (8009848 <vPortFree+0x8c>)
 800982c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	0018      	movs	r0, r3
 8009832:	f000 f86b 	bl	800990c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009836:	f7ff f8d3 	bl	80089e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800983a:	46c0      	nop			; (mov r8, r8)
 800983c:	46bd      	mov	sp, r7
 800983e:	b004      	add	sp, #16
 8009840:	bd80      	pop	{r7, pc}
 8009842:	46c0      	nop			; (mov r8, r8)
 8009844:	200017c4 	.word	0x200017c4
 8009848:	200017bc 	.word	0x200017bc

0800984c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009852:	2380      	movs	r3, #128	; 0x80
 8009854:	015b      	lsls	r3, r3, #5
 8009856:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009858:	4b26      	ldr	r3, [pc, #152]	; (80098f4 <prvHeapInit+0xa8>)
 800985a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2207      	movs	r2, #7
 8009860:	4013      	ands	r3, r2
 8009862:	d00c      	beq.n	800987e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3307      	adds	r3, #7
 8009868:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2207      	movs	r2, #7
 800986e:	4393      	bics	r3, r2
 8009870:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	1ad2      	subs	r2, r2, r3
 8009878:	4b1e      	ldr	r3, [pc, #120]	; (80098f4 <prvHeapInit+0xa8>)
 800987a:	18d3      	adds	r3, r2, r3
 800987c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009882:	4b1d      	ldr	r3, [pc, #116]	; (80098f8 <prvHeapInit+0xac>)
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009888:	4b1b      	ldr	r3, [pc, #108]	; (80098f8 <prvHeapInit+0xac>)
 800988a:	2200      	movs	r2, #0
 800988c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	18d3      	adds	r3, r2, r3
 8009894:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009896:	2208      	movs	r2, #8
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	1a9b      	subs	r3, r3, r2
 800989c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2207      	movs	r2, #7
 80098a2:	4393      	bics	r3, r2
 80098a4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	4b14      	ldr	r3, [pc, #80]	; (80098fc <prvHeapInit+0xb0>)
 80098aa:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80098ac:	4b13      	ldr	r3, [pc, #76]	; (80098fc <prvHeapInit+0xb0>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2200      	movs	r2, #0
 80098b2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80098b4:	4b11      	ldr	r3, [pc, #68]	; (80098fc <prvHeapInit+0xb0>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2200      	movs	r2, #0
 80098ba:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	1ad2      	subs	r2, r2, r3
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098ca:	4b0c      	ldr	r3, [pc, #48]	; (80098fc <prvHeapInit+0xb0>)
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	685a      	ldr	r2, [r3, #4]
 80098d6:	4b0a      	ldr	r3, [pc, #40]	; (8009900 <prvHeapInit+0xb4>)
 80098d8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	4b09      	ldr	r3, [pc, #36]	; (8009904 <prvHeapInit+0xb8>)
 80098e0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80098e2:	4b09      	ldr	r3, [pc, #36]	; (8009908 <prvHeapInit+0xbc>)
 80098e4:	2280      	movs	r2, #128	; 0x80
 80098e6:	0612      	lsls	r2, r2, #24
 80098e8:	601a      	str	r2, [r3, #0]
}
 80098ea:	46c0      	nop			; (mov r8, r8)
 80098ec:	46bd      	mov	sp, r7
 80098ee:	b004      	add	sp, #16
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	46c0      	nop			; (mov r8, r8)
 80098f4:	200007b0 	.word	0x200007b0
 80098f8:	200017b0 	.word	0x200017b0
 80098fc:	200017b8 	.word	0x200017b8
 8009900:	200017c0 	.word	0x200017c0
 8009904:	200017bc 	.word	0x200017bc
 8009908:	200017c4 	.word	0x200017c4

0800990c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009914:	4b27      	ldr	r3, [pc, #156]	; (80099b4 <prvInsertBlockIntoFreeList+0xa8>)
 8009916:	60fb      	str	r3, [r7, #12]
 8009918:	e002      	b.n	8009920 <prvInsertBlockIntoFreeList+0x14>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	60fb      	str	r3, [r7, #12]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	429a      	cmp	r2, r3
 8009928:	d8f7      	bhi.n	800991a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	18d3      	adds	r3, r2, r3
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	429a      	cmp	r2, r3
 800993a:	d108      	bne.n	800994e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	685a      	ldr	r2, [r3, #4]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	18d2      	adds	r2, r2, r3
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	18d2      	adds	r2, r2, r3
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	429a      	cmp	r2, r3
 8009960:	d118      	bne.n	8009994 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	4b14      	ldr	r3, [pc, #80]	; (80099b8 <prvInsertBlockIntoFreeList+0xac>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	429a      	cmp	r2, r3
 800996c:	d00d      	beq.n	800998a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	685a      	ldr	r2, [r3, #4]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	18d2      	adds	r2, r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	601a      	str	r2, [r3, #0]
 8009988:	e008      	b.n	800999c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800998a:	4b0b      	ldr	r3, [pc, #44]	; (80099b8 <prvInsertBlockIntoFreeList+0xac>)
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	601a      	str	r2, [r3, #0]
 8009992:	e003      	b.n	800999c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d002      	beq.n	80099aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099aa:	46c0      	nop			; (mov r8, r8)
 80099ac:	46bd      	mov	sp, r7
 80099ae:	b004      	add	sp, #16
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	46c0      	nop			; (mov r8, r8)
 80099b4:	200017b0 	.word	0x200017b0
 80099b8:	200017b8 	.word	0x200017b8

080099bc <__errno>:
 80099bc:	4b01      	ldr	r3, [pc, #4]	; (80099c4 <__errno+0x8>)
 80099be:	6818      	ldr	r0, [r3, #0]
 80099c0:	4770      	bx	lr
 80099c2:	46c0      	nop			; (mov r8, r8)
 80099c4:	200000a8 	.word	0x200000a8

080099c8 <__libc_init_array>:
 80099c8:	b570      	push	{r4, r5, r6, lr}
 80099ca:	2600      	movs	r6, #0
 80099cc:	4d0c      	ldr	r5, [pc, #48]	; (8009a00 <__libc_init_array+0x38>)
 80099ce:	4c0d      	ldr	r4, [pc, #52]	; (8009a04 <__libc_init_array+0x3c>)
 80099d0:	1b64      	subs	r4, r4, r5
 80099d2:	10a4      	asrs	r4, r4, #2
 80099d4:	42a6      	cmp	r6, r4
 80099d6:	d109      	bne.n	80099ec <__libc_init_array+0x24>
 80099d8:	2600      	movs	r6, #0
 80099da:	f000 fd09 	bl	800a3f0 <_init>
 80099de:	4d0a      	ldr	r5, [pc, #40]	; (8009a08 <__libc_init_array+0x40>)
 80099e0:	4c0a      	ldr	r4, [pc, #40]	; (8009a0c <__libc_init_array+0x44>)
 80099e2:	1b64      	subs	r4, r4, r5
 80099e4:	10a4      	asrs	r4, r4, #2
 80099e6:	42a6      	cmp	r6, r4
 80099e8:	d105      	bne.n	80099f6 <__libc_init_array+0x2e>
 80099ea:	bd70      	pop	{r4, r5, r6, pc}
 80099ec:	00b3      	lsls	r3, r6, #2
 80099ee:	58eb      	ldr	r3, [r5, r3]
 80099f0:	4798      	blx	r3
 80099f2:	3601      	adds	r6, #1
 80099f4:	e7ee      	b.n	80099d4 <__libc_init_array+0xc>
 80099f6:	00b3      	lsls	r3, r6, #2
 80099f8:	58eb      	ldr	r3, [r5, r3]
 80099fa:	4798      	blx	r3
 80099fc:	3601      	adds	r6, #1
 80099fe:	e7f2      	b.n	80099e6 <__libc_init_array+0x1e>
 8009a00:	0800abf0 	.word	0x0800abf0
 8009a04:	0800abf0 	.word	0x0800abf0
 8009a08:	0800abf0 	.word	0x0800abf0
 8009a0c:	0800abf4 	.word	0x0800abf4

08009a10 <__retarget_lock_acquire_recursive>:
 8009a10:	4770      	bx	lr

08009a12 <__retarget_lock_release_recursive>:
 8009a12:	4770      	bx	lr

08009a14 <memcpy>:
 8009a14:	2300      	movs	r3, #0
 8009a16:	b510      	push	{r4, lr}
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d100      	bne.n	8009a1e <memcpy+0xa>
 8009a1c:	bd10      	pop	{r4, pc}
 8009a1e:	5ccc      	ldrb	r4, [r1, r3]
 8009a20:	54c4      	strb	r4, [r0, r3]
 8009a22:	3301      	adds	r3, #1
 8009a24:	e7f8      	b.n	8009a18 <memcpy+0x4>

08009a26 <memset>:
 8009a26:	0003      	movs	r3, r0
 8009a28:	1882      	adds	r2, r0, r2
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d100      	bne.n	8009a30 <memset+0xa>
 8009a2e:	4770      	bx	lr
 8009a30:	7019      	strb	r1, [r3, #0]
 8009a32:	3301      	adds	r3, #1
 8009a34:	e7f9      	b.n	8009a2a <memset+0x4>
	...

08009a38 <sbrk_aligned>:
 8009a38:	b570      	push	{r4, r5, r6, lr}
 8009a3a:	4e0f      	ldr	r6, [pc, #60]	; (8009a78 <sbrk_aligned+0x40>)
 8009a3c:	000d      	movs	r5, r1
 8009a3e:	6831      	ldr	r1, [r6, #0]
 8009a40:	0004      	movs	r4, r0
 8009a42:	2900      	cmp	r1, #0
 8009a44:	d102      	bne.n	8009a4c <sbrk_aligned+0x14>
 8009a46:	f000 f903 	bl	8009c50 <_sbrk_r>
 8009a4a:	6030      	str	r0, [r6, #0]
 8009a4c:	0029      	movs	r1, r5
 8009a4e:	0020      	movs	r0, r4
 8009a50:	f000 f8fe 	bl	8009c50 <_sbrk_r>
 8009a54:	1c43      	adds	r3, r0, #1
 8009a56:	d00a      	beq.n	8009a6e <sbrk_aligned+0x36>
 8009a58:	2303      	movs	r3, #3
 8009a5a:	1cc5      	adds	r5, r0, #3
 8009a5c:	439d      	bics	r5, r3
 8009a5e:	42a8      	cmp	r0, r5
 8009a60:	d007      	beq.n	8009a72 <sbrk_aligned+0x3a>
 8009a62:	1a29      	subs	r1, r5, r0
 8009a64:	0020      	movs	r0, r4
 8009a66:	f000 f8f3 	bl	8009c50 <_sbrk_r>
 8009a6a:	1c43      	adds	r3, r0, #1
 8009a6c:	d101      	bne.n	8009a72 <sbrk_aligned+0x3a>
 8009a6e:	2501      	movs	r5, #1
 8009a70:	426d      	negs	r5, r5
 8009a72:	0028      	movs	r0, r5
 8009a74:	bd70      	pop	{r4, r5, r6, pc}
 8009a76:	46c0      	nop			; (mov r8, r8)
 8009a78:	200017d0 	.word	0x200017d0

08009a7c <_malloc_r>:
 8009a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a7e:	2203      	movs	r2, #3
 8009a80:	1ccb      	adds	r3, r1, #3
 8009a82:	4393      	bics	r3, r2
 8009a84:	3308      	adds	r3, #8
 8009a86:	0006      	movs	r6, r0
 8009a88:	001f      	movs	r7, r3
 8009a8a:	2b0c      	cmp	r3, #12
 8009a8c:	d232      	bcs.n	8009af4 <_malloc_r+0x78>
 8009a8e:	270c      	movs	r7, #12
 8009a90:	42b9      	cmp	r1, r7
 8009a92:	d831      	bhi.n	8009af8 <_malloc_r+0x7c>
 8009a94:	0030      	movs	r0, r6
 8009a96:	f000 f917 	bl	8009cc8 <__malloc_lock>
 8009a9a:	4d32      	ldr	r5, [pc, #200]	; (8009b64 <_malloc_r+0xe8>)
 8009a9c:	682b      	ldr	r3, [r5, #0]
 8009a9e:	001c      	movs	r4, r3
 8009aa0:	2c00      	cmp	r4, #0
 8009aa2:	d12e      	bne.n	8009b02 <_malloc_r+0x86>
 8009aa4:	0039      	movs	r1, r7
 8009aa6:	0030      	movs	r0, r6
 8009aa8:	f7ff ffc6 	bl	8009a38 <sbrk_aligned>
 8009aac:	0004      	movs	r4, r0
 8009aae:	1c43      	adds	r3, r0, #1
 8009ab0:	d11e      	bne.n	8009af0 <_malloc_r+0x74>
 8009ab2:	682c      	ldr	r4, [r5, #0]
 8009ab4:	0025      	movs	r5, r4
 8009ab6:	2d00      	cmp	r5, #0
 8009ab8:	d14a      	bne.n	8009b50 <_malloc_r+0xd4>
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	0029      	movs	r1, r5
 8009abe:	18e3      	adds	r3, r4, r3
 8009ac0:	0030      	movs	r0, r6
 8009ac2:	9301      	str	r3, [sp, #4]
 8009ac4:	f000 f8c4 	bl	8009c50 <_sbrk_r>
 8009ac8:	9b01      	ldr	r3, [sp, #4]
 8009aca:	4283      	cmp	r3, r0
 8009acc:	d143      	bne.n	8009b56 <_malloc_r+0xda>
 8009ace:	6823      	ldr	r3, [r4, #0]
 8009ad0:	3703      	adds	r7, #3
 8009ad2:	1aff      	subs	r7, r7, r3
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	439f      	bics	r7, r3
 8009ad8:	3708      	adds	r7, #8
 8009ada:	2f0c      	cmp	r7, #12
 8009adc:	d200      	bcs.n	8009ae0 <_malloc_r+0x64>
 8009ade:	270c      	movs	r7, #12
 8009ae0:	0039      	movs	r1, r7
 8009ae2:	0030      	movs	r0, r6
 8009ae4:	f7ff ffa8 	bl	8009a38 <sbrk_aligned>
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	d034      	beq.n	8009b56 <_malloc_r+0xda>
 8009aec:	6823      	ldr	r3, [r4, #0]
 8009aee:	19df      	adds	r7, r3, r7
 8009af0:	6027      	str	r7, [r4, #0]
 8009af2:	e013      	b.n	8009b1c <_malloc_r+0xa0>
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	dacb      	bge.n	8009a90 <_malloc_r+0x14>
 8009af8:	230c      	movs	r3, #12
 8009afa:	2500      	movs	r5, #0
 8009afc:	6033      	str	r3, [r6, #0]
 8009afe:	0028      	movs	r0, r5
 8009b00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b02:	6822      	ldr	r2, [r4, #0]
 8009b04:	1bd1      	subs	r1, r2, r7
 8009b06:	d420      	bmi.n	8009b4a <_malloc_r+0xce>
 8009b08:	290b      	cmp	r1, #11
 8009b0a:	d917      	bls.n	8009b3c <_malloc_r+0xc0>
 8009b0c:	19e2      	adds	r2, r4, r7
 8009b0e:	6027      	str	r7, [r4, #0]
 8009b10:	42a3      	cmp	r3, r4
 8009b12:	d111      	bne.n	8009b38 <_malloc_r+0xbc>
 8009b14:	602a      	str	r2, [r5, #0]
 8009b16:	6863      	ldr	r3, [r4, #4]
 8009b18:	6011      	str	r1, [r2, #0]
 8009b1a:	6053      	str	r3, [r2, #4]
 8009b1c:	0030      	movs	r0, r6
 8009b1e:	0025      	movs	r5, r4
 8009b20:	f000 f8da 	bl	8009cd8 <__malloc_unlock>
 8009b24:	2207      	movs	r2, #7
 8009b26:	350b      	adds	r5, #11
 8009b28:	1d23      	adds	r3, r4, #4
 8009b2a:	4395      	bics	r5, r2
 8009b2c:	1aea      	subs	r2, r5, r3
 8009b2e:	429d      	cmp	r5, r3
 8009b30:	d0e5      	beq.n	8009afe <_malloc_r+0x82>
 8009b32:	1b5b      	subs	r3, r3, r5
 8009b34:	50a3      	str	r3, [r4, r2]
 8009b36:	e7e2      	b.n	8009afe <_malloc_r+0x82>
 8009b38:	605a      	str	r2, [r3, #4]
 8009b3a:	e7ec      	b.n	8009b16 <_malloc_r+0x9a>
 8009b3c:	6862      	ldr	r2, [r4, #4]
 8009b3e:	42a3      	cmp	r3, r4
 8009b40:	d101      	bne.n	8009b46 <_malloc_r+0xca>
 8009b42:	602a      	str	r2, [r5, #0]
 8009b44:	e7ea      	b.n	8009b1c <_malloc_r+0xa0>
 8009b46:	605a      	str	r2, [r3, #4]
 8009b48:	e7e8      	b.n	8009b1c <_malloc_r+0xa0>
 8009b4a:	0023      	movs	r3, r4
 8009b4c:	6864      	ldr	r4, [r4, #4]
 8009b4e:	e7a7      	b.n	8009aa0 <_malloc_r+0x24>
 8009b50:	002c      	movs	r4, r5
 8009b52:	686d      	ldr	r5, [r5, #4]
 8009b54:	e7af      	b.n	8009ab6 <_malloc_r+0x3a>
 8009b56:	230c      	movs	r3, #12
 8009b58:	0030      	movs	r0, r6
 8009b5a:	6033      	str	r3, [r6, #0]
 8009b5c:	f000 f8bc 	bl	8009cd8 <__malloc_unlock>
 8009b60:	e7cd      	b.n	8009afe <_malloc_r+0x82>
 8009b62:	46c0      	nop			; (mov r8, r8)
 8009b64:	200017cc 	.word	0x200017cc

08009b68 <cleanup_glue>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	000d      	movs	r5, r1
 8009b6c:	6809      	ldr	r1, [r1, #0]
 8009b6e:	0004      	movs	r4, r0
 8009b70:	2900      	cmp	r1, #0
 8009b72:	d001      	beq.n	8009b78 <cleanup_glue+0x10>
 8009b74:	f7ff fff8 	bl	8009b68 <cleanup_glue>
 8009b78:	0029      	movs	r1, r5
 8009b7a:	0020      	movs	r0, r4
 8009b7c:	f000 f8b4 	bl	8009ce8 <_free_r>
 8009b80:	bd70      	pop	{r4, r5, r6, pc}
	...

08009b84 <_reclaim_reent>:
 8009b84:	4b31      	ldr	r3, [pc, #196]	; (8009c4c <_reclaim_reent+0xc8>)
 8009b86:	b570      	push	{r4, r5, r6, lr}
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	0004      	movs	r4, r0
 8009b8c:	4283      	cmp	r3, r0
 8009b8e:	d049      	beq.n	8009c24 <_reclaim_reent+0xa0>
 8009b90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00a      	beq.n	8009bac <_reclaim_reent+0x28>
 8009b96:	2500      	movs	r5, #0
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	42ab      	cmp	r3, r5
 8009b9c:	d147      	bne.n	8009c2e <_reclaim_reent+0xaa>
 8009b9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ba0:	6819      	ldr	r1, [r3, #0]
 8009ba2:	2900      	cmp	r1, #0
 8009ba4:	d002      	beq.n	8009bac <_reclaim_reent+0x28>
 8009ba6:	0020      	movs	r0, r4
 8009ba8:	f000 f89e 	bl	8009ce8 <_free_r>
 8009bac:	6961      	ldr	r1, [r4, #20]
 8009bae:	2900      	cmp	r1, #0
 8009bb0:	d002      	beq.n	8009bb8 <_reclaim_reent+0x34>
 8009bb2:	0020      	movs	r0, r4
 8009bb4:	f000 f898 	bl	8009ce8 <_free_r>
 8009bb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009bba:	2900      	cmp	r1, #0
 8009bbc:	d002      	beq.n	8009bc4 <_reclaim_reent+0x40>
 8009bbe:	0020      	movs	r0, r4
 8009bc0:	f000 f892 	bl	8009ce8 <_free_r>
 8009bc4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009bc6:	2900      	cmp	r1, #0
 8009bc8:	d002      	beq.n	8009bd0 <_reclaim_reent+0x4c>
 8009bca:	0020      	movs	r0, r4
 8009bcc:	f000 f88c 	bl	8009ce8 <_free_r>
 8009bd0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009bd2:	2900      	cmp	r1, #0
 8009bd4:	d002      	beq.n	8009bdc <_reclaim_reent+0x58>
 8009bd6:	0020      	movs	r0, r4
 8009bd8:	f000 f886 	bl	8009ce8 <_free_r>
 8009bdc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009bde:	2900      	cmp	r1, #0
 8009be0:	d002      	beq.n	8009be8 <_reclaim_reent+0x64>
 8009be2:	0020      	movs	r0, r4
 8009be4:	f000 f880 	bl	8009ce8 <_free_r>
 8009be8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009bea:	2900      	cmp	r1, #0
 8009bec:	d002      	beq.n	8009bf4 <_reclaim_reent+0x70>
 8009bee:	0020      	movs	r0, r4
 8009bf0:	f000 f87a 	bl	8009ce8 <_free_r>
 8009bf4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009bf6:	2900      	cmp	r1, #0
 8009bf8:	d002      	beq.n	8009c00 <_reclaim_reent+0x7c>
 8009bfa:	0020      	movs	r0, r4
 8009bfc:	f000 f874 	bl	8009ce8 <_free_r>
 8009c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c02:	2900      	cmp	r1, #0
 8009c04:	d002      	beq.n	8009c0c <_reclaim_reent+0x88>
 8009c06:	0020      	movs	r0, r4
 8009c08:	f000 f86e 	bl	8009ce8 <_free_r>
 8009c0c:	69a3      	ldr	r3, [r4, #24]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d008      	beq.n	8009c24 <_reclaim_reent+0xa0>
 8009c12:	0020      	movs	r0, r4
 8009c14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009c16:	4798      	blx	r3
 8009c18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009c1a:	2900      	cmp	r1, #0
 8009c1c:	d002      	beq.n	8009c24 <_reclaim_reent+0xa0>
 8009c1e:	0020      	movs	r0, r4
 8009c20:	f7ff ffa2 	bl	8009b68 <cleanup_glue>
 8009c24:	bd70      	pop	{r4, r5, r6, pc}
 8009c26:	5949      	ldr	r1, [r1, r5]
 8009c28:	2900      	cmp	r1, #0
 8009c2a:	d108      	bne.n	8009c3e <_reclaim_reent+0xba>
 8009c2c:	3504      	adds	r5, #4
 8009c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c30:	68d9      	ldr	r1, [r3, #12]
 8009c32:	2d80      	cmp	r5, #128	; 0x80
 8009c34:	d1f7      	bne.n	8009c26 <_reclaim_reent+0xa2>
 8009c36:	0020      	movs	r0, r4
 8009c38:	f000 f856 	bl	8009ce8 <_free_r>
 8009c3c:	e7af      	b.n	8009b9e <_reclaim_reent+0x1a>
 8009c3e:	680e      	ldr	r6, [r1, #0]
 8009c40:	0020      	movs	r0, r4
 8009c42:	f000 f851 	bl	8009ce8 <_free_r>
 8009c46:	0031      	movs	r1, r6
 8009c48:	e7ee      	b.n	8009c28 <_reclaim_reent+0xa4>
 8009c4a:	46c0      	nop			; (mov r8, r8)
 8009c4c:	200000a8 	.word	0x200000a8

08009c50 <_sbrk_r>:
 8009c50:	2300      	movs	r3, #0
 8009c52:	b570      	push	{r4, r5, r6, lr}
 8009c54:	4d06      	ldr	r5, [pc, #24]	; (8009c70 <_sbrk_r+0x20>)
 8009c56:	0004      	movs	r4, r0
 8009c58:	0008      	movs	r0, r1
 8009c5a:	602b      	str	r3, [r5, #0]
 8009c5c:	f7f8 f958 	bl	8001f10 <_sbrk>
 8009c60:	1c43      	adds	r3, r0, #1
 8009c62:	d103      	bne.n	8009c6c <_sbrk_r+0x1c>
 8009c64:	682b      	ldr	r3, [r5, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d000      	beq.n	8009c6c <_sbrk_r+0x1c>
 8009c6a:	6023      	str	r3, [r4, #0]
 8009c6c:	bd70      	pop	{r4, r5, r6, pc}
 8009c6e:	46c0      	nop			; (mov r8, r8)
 8009c70:	200017d4 	.word	0x200017d4

08009c74 <strcpy>:
 8009c74:	0003      	movs	r3, r0
 8009c76:	780a      	ldrb	r2, [r1, #0]
 8009c78:	3101      	adds	r1, #1
 8009c7a:	701a      	strb	r2, [r3, #0]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	2a00      	cmp	r2, #0
 8009c80:	d1f9      	bne.n	8009c76 <strcpy+0x2>
 8009c82:	4770      	bx	lr

08009c84 <_vsiprintf_r>:
 8009c84:	b500      	push	{lr}
 8009c86:	b09b      	sub	sp, #108	; 0x6c
 8009c88:	9100      	str	r1, [sp, #0]
 8009c8a:	9104      	str	r1, [sp, #16]
 8009c8c:	4906      	ldr	r1, [pc, #24]	; (8009ca8 <_vsiprintf_r+0x24>)
 8009c8e:	9105      	str	r1, [sp, #20]
 8009c90:	9102      	str	r1, [sp, #8]
 8009c92:	4906      	ldr	r1, [pc, #24]	; (8009cac <_vsiprintf_r+0x28>)
 8009c94:	9103      	str	r1, [sp, #12]
 8009c96:	4669      	mov	r1, sp
 8009c98:	f000 f8d2 	bl	8009e40 <_svfiprintf_r>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	9a00      	ldr	r2, [sp, #0]
 8009ca0:	7013      	strb	r3, [r2, #0]
 8009ca2:	b01b      	add	sp, #108	; 0x6c
 8009ca4:	bd00      	pop	{pc}
 8009ca6:	46c0      	nop			; (mov r8, r8)
 8009ca8:	7fffffff 	.word	0x7fffffff
 8009cac:	ffff0208 	.word	0xffff0208

08009cb0 <vsiprintf>:
 8009cb0:	b510      	push	{r4, lr}
 8009cb2:	0013      	movs	r3, r2
 8009cb4:	000a      	movs	r2, r1
 8009cb6:	0001      	movs	r1, r0
 8009cb8:	4802      	ldr	r0, [pc, #8]	; (8009cc4 <vsiprintf+0x14>)
 8009cba:	6800      	ldr	r0, [r0, #0]
 8009cbc:	f7ff ffe2 	bl	8009c84 <_vsiprintf_r>
 8009cc0:	bd10      	pop	{r4, pc}
 8009cc2:	46c0      	nop			; (mov r8, r8)
 8009cc4:	200000a8 	.word	0x200000a8

08009cc8 <__malloc_lock>:
 8009cc8:	b510      	push	{r4, lr}
 8009cca:	4802      	ldr	r0, [pc, #8]	; (8009cd4 <__malloc_lock+0xc>)
 8009ccc:	f7ff fea0 	bl	8009a10 <__retarget_lock_acquire_recursive>
 8009cd0:	bd10      	pop	{r4, pc}
 8009cd2:	46c0      	nop			; (mov r8, r8)
 8009cd4:	200017c8 	.word	0x200017c8

08009cd8 <__malloc_unlock>:
 8009cd8:	b510      	push	{r4, lr}
 8009cda:	4802      	ldr	r0, [pc, #8]	; (8009ce4 <__malloc_unlock+0xc>)
 8009cdc:	f7ff fe99 	bl	8009a12 <__retarget_lock_release_recursive>
 8009ce0:	bd10      	pop	{r4, pc}
 8009ce2:	46c0      	nop			; (mov r8, r8)
 8009ce4:	200017c8 	.word	0x200017c8

08009ce8 <_free_r>:
 8009ce8:	b570      	push	{r4, r5, r6, lr}
 8009cea:	0005      	movs	r5, r0
 8009cec:	2900      	cmp	r1, #0
 8009cee:	d010      	beq.n	8009d12 <_free_r+0x2a>
 8009cf0:	1f0c      	subs	r4, r1, #4
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	da00      	bge.n	8009cfa <_free_r+0x12>
 8009cf8:	18e4      	adds	r4, r4, r3
 8009cfa:	0028      	movs	r0, r5
 8009cfc:	f7ff ffe4 	bl	8009cc8 <__malloc_lock>
 8009d00:	4a1d      	ldr	r2, [pc, #116]	; (8009d78 <_free_r+0x90>)
 8009d02:	6813      	ldr	r3, [r2, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d105      	bne.n	8009d14 <_free_r+0x2c>
 8009d08:	6063      	str	r3, [r4, #4]
 8009d0a:	6014      	str	r4, [r2, #0]
 8009d0c:	0028      	movs	r0, r5
 8009d0e:	f7ff ffe3 	bl	8009cd8 <__malloc_unlock>
 8009d12:	bd70      	pop	{r4, r5, r6, pc}
 8009d14:	42a3      	cmp	r3, r4
 8009d16:	d908      	bls.n	8009d2a <_free_r+0x42>
 8009d18:	6821      	ldr	r1, [r4, #0]
 8009d1a:	1860      	adds	r0, r4, r1
 8009d1c:	4283      	cmp	r3, r0
 8009d1e:	d1f3      	bne.n	8009d08 <_free_r+0x20>
 8009d20:	6818      	ldr	r0, [r3, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	1841      	adds	r1, r0, r1
 8009d26:	6021      	str	r1, [r4, #0]
 8009d28:	e7ee      	b.n	8009d08 <_free_r+0x20>
 8009d2a:	001a      	movs	r2, r3
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <_free_r+0x4e>
 8009d32:	42a3      	cmp	r3, r4
 8009d34:	d9f9      	bls.n	8009d2a <_free_r+0x42>
 8009d36:	6811      	ldr	r1, [r2, #0]
 8009d38:	1850      	adds	r0, r2, r1
 8009d3a:	42a0      	cmp	r0, r4
 8009d3c:	d10b      	bne.n	8009d56 <_free_r+0x6e>
 8009d3e:	6820      	ldr	r0, [r4, #0]
 8009d40:	1809      	adds	r1, r1, r0
 8009d42:	1850      	adds	r0, r2, r1
 8009d44:	6011      	str	r1, [r2, #0]
 8009d46:	4283      	cmp	r3, r0
 8009d48:	d1e0      	bne.n	8009d0c <_free_r+0x24>
 8009d4a:	6818      	ldr	r0, [r3, #0]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	1841      	adds	r1, r0, r1
 8009d50:	6011      	str	r1, [r2, #0]
 8009d52:	6053      	str	r3, [r2, #4]
 8009d54:	e7da      	b.n	8009d0c <_free_r+0x24>
 8009d56:	42a0      	cmp	r0, r4
 8009d58:	d902      	bls.n	8009d60 <_free_r+0x78>
 8009d5a:	230c      	movs	r3, #12
 8009d5c:	602b      	str	r3, [r5, #0]
 8009d5e:	e7d5      	b.n	8009d0c <_free_r+0x24>
 8009d60:	6821      	ldr	r1, [r4, #0]
 8009d62:	1860      	adds	r0, r4, r1
 8009d64:	4283      	cmp	r3, r0
 8009d66:	d103      	bne.n	8009d70 <_free_r+0x88>
 8009d68:	6818      	ldr	r0, [r3, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	1841      	adds	r1, r0, r1
 8009d6e:	6021      	str	r1, [r4, #0]
 8009d70:	6063      	str	r3, [r4, #4]
 8009d72:	6054      	str	r4, [r2, #4]
 8009d74:	e7ca      	b.n	8009d0c <_free_r+0x24>
 8009d76:	46c0      	nop			; (mov r8, r8)
 8009d78:	200017cc 	.word	0x200017cc

08009d7c <__ssputs_r>:
 8009d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d7e:	688e      	ldr	r6, [r1, #8]
 8009d80:	b085      	sub	sp, #20
 8009d82:	0007      	movs	r7, r0
 8009d84:	000c      	movs	r4, r1
 8009d86:	9203      	str	r2, [sp, #12]
 8009d88:	9301      	str	r3, [sp, #4]
 8009d8a:	429e      	cmp	r6, r3
 8009d8c:	d83c      	bhi.n	8009e08 <__ssputs_r+0x8c>
 8009d8e:	2390      	movs	r3, #144	; 0x90
 8009d90:	898a      	ldrh	r2, [r1, #12]
 8009d92:	00db      	lsls	r3, r3, #3
 8009d94:	421a      	tst	r2, r3
 8009d96:	d034      	beq.n	8009e02 <__ssputs_r+0x86>
 8009d98:	6909      	ldr	r1, [r1, #16]
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	6960      	ldr	r0, [r4, #20]
 8009d9e:	1a5b      	subs	r3, r3, r1
 8009da0:	9302      	str	r3, [sp, #8]
 8009da2:	2303      	movs	r3, #3
 8009da4:	4343      	muls	r3, r0
 8009da6:	0fdd      	lsrs	r5, r3, #31
 8009da8:	18ed      	adds	r5, r5, r3
 8009daa:	9b01      	ldr	r3, [sp, #4]
 8009dac:	9802      	ldr	r0, [sp, #8]
 8009dae:	3301      	adds	r3, #1
 8009db0:	181b      	adds	r3, r3, r0
 8009db2:	106d      	asrs	r5, r5, #1
 8009db4:	42ab      	cmp	r3, r5
 8009db6:	d900      	bls.n	8009dba <__ssputs_r+0x3e>
 8009db8:	001d      	movs	r5, r3
 8009dba:	0553      	lsls	r3, r2, #21
 8009dbc:	d532      	bpl.n	8009e24 <__ssputs_r+0xa8>
 8009dbe:	0029      	movs	r1, r5
 8009dc0:	0038      	movs	r0, r7
 8009dc2:	f7ff fe5b 	bl	8009a7c <_malloc_r>
 8009dc6:	1e06      	subs	r6, r0, #0
 8009dc8:	d109      	bne.n	8009dde <__ssputs_r+0x62>
 8009dca:	230c      	movs	r3, #12
 8009dcc:	603b      	str	r3, [r7, #0]
 8009dce:	2340      	movs	r3, #64	; 0x40
 8009dd0:	2001      	movs	r0, #1
 8009dd2:	89a2      	ldrh	r2, [r4, #12]
 8009dd4:	4240      	negs	r0, r0
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	81a3      	strh	r3, [r4, #12]
 8009dda:	b005      	add	sp, #20
 8009ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dde:	9a02      	ldr	r2, [sp, #8]
 8009de0:	6921      	ldr	r1, [r4, #16]
 8009de2:	f7ff fe17 	bl	8009a14 <memcpy>
 8009de6:	89a3      	ldrh	r3, [r4, #12]
 8009de8:	4a14      	ldr	r2, [pc, #80]	; (8009e3c <__ssputs_r+0xc0>)
 8009dea:	401a      	ands	r2, r3
 8009dec:	2380      	movs	r3, #128	; 0x80
 8009dee:	4313      	orrs	r3, r2
 8009df0:	81a3      	strh	r3, [r4, #12]
 8009df2:	9b02      	ldr	r3, [sp, #8]
 8009df4:	6126      	str	r6, [r4, #16]
 8009df6:	18f6      	adds	r6, r6, r3
 8009df8:	6026      	str	r6, [r4, #0]
 8009dfa:	6165      	str	r5, [r4, #20]
 8009dfc:	9e01      	ldr	r6, [sp, #4]
 8009dfe:	1aed      	subs	r5, r5, r3
 8009e00:	60a5      	str	r5, [r4, #8]
 8009e02:	9b01      	ldr	r3, [sp, #4]
 8009e04:	429e      	cmp	r6, r3
 8009e06:	d900      	bls.n	8009e0a <__ssputs_r+0x8e>
 8009e08:	9e01      	ldr	r6, [sp, #4]
 8009e0a:	0032      	movs	r2, r6
 8009e0c:	9903      	ldr	r1, [sp, #12]
 8009e0e:	6820      	ldr	r0, [r4, #0]
 8009e10:	f000 faa3 	bl	800a35a <memmove>
 8009e14:	68a3      	ldr	r3, [r4, #8]
 8009e16:	2000      	movs	r0, #0
 8009e18:	1b9b      	subs	r3, r3, r6
 8009e1a:	60a3      	str	r3, [r4, #8]
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	199e      	adds	r6, r3, r6
 8009e20:	6026      	str	r6, [r4, #0]
 8009e22:	e7da      	b.n	8009dda <__ssputs_r+0x5e>
 8009e24:	002a      	movs	r2, r5
 8009e26:	0038      	movs	r0, r7
 8009e28:	f000 faaa 	bl	800a380 <_realloc_r>
 8009e2c:	1e06      	subs	r6, r0, #0
 8009e2e:	d1e0      	bne.n	8009df2 <__ssputs_r+0x76>
 8009e30:	0038      	movs	r0, r7
 8009e32:	6921      	ldr	r1, [r4, #16]
 8009e34:	f7ff ff58 	bl	8009ce8 <_free_r>
 8009e38:	e7c7      	b.n	8009dca <__ssputs_r+0x4e>
 8009e3a:	46c0      	nop			; (mov r8, r8)
 8009e3c:	fffffb7f 	.word	0xfffffb7f

08009e40 <_svfiprintf_r>:
 8009e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e42:	b0a1      	sub	sp, #132	; 0x84
 8009e44:	9003      	str	r0, [sp, #12]
 8009e46:	001d      	movs	r5, r3
 8009e48:	898b      	ldrh	r3, [r1, #12]
 8009e4a:	000f      	movs	r7, r1
 8009e4c:	0016      	movs	r6, r2
 8009e4e:	061b      	lsls	r3, r3, #24
 8009e50:	d511      	bpl.n	8009e76 <_svfiprintf_r+0x36>
 8009e52:	690b      	ldr	r3, [r1, #16]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10e      	bne.n	8009e76 <_svfiprintf_r+0x36>
 8009e58:	2140      	movs	r1, #64	; 0x40
 8009e5a:	f7ff fe0f 	bl	8009a7c <_malloc_r>
 8009e5e:	6038      	str	r0, [r7, #0]
 8009e60:	6138      	str	r0, [r7, #16]
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d105      	bne.n	8009e72 <_svfiprintf_r+0x32>
 8009e66:	230c      	movs	r3, #12
 8009e68:	9a03      	ldr	r2, [sp, #12]
 8009e6a:	3801      	subs	r0, #1
 8009e6c:	6013      	str	r3, [r2, #0]
 8009e6e:	b021      	add	sp, #132	; 0x84
 8009e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e72:	2340      	movs	r3, #64	; 0x40
 8009e74:	617b      	str	r3, [r7, #20]
 8009e76:	2300      	movs	r3, #0
 8009e78:	ac08      	add	r4, sp, #32
 8009e7a:	6163      	str	r3, [r4, #20]
 8009e7c:	3320      	adds	r3, #32
 8009e7e:	7663      	strb	r3, [r4, #25]
 8009e80:	3310      	adds	r3, #16
 8009e82:	76a3      	strb	r3, [r4, #26]
 8009e84:	9507      	str	r5, [sp, #28]
 8009e86:	0035      	movs	r5, r6
 8009e88:	782b      	ldrb	r3, [r5, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d001      	beq.n	8009e92 <_svfiprintf_r+0x52>
 8009e8e:	2b25      	cmp	r3, #37	; 0x25
 8009e90:	d147      	bne.n	8009f22 <_svfiprintf_r+0xe2>
 8009e92:	1bab      	subs	r3, r5, r6
 8009e94:	9305      	str	r3, [sp, #20]
 8009e96:	42b5      	cmp	r5, r6
 8009e98:	d00c      	beq.n	8009eb4 <_svfiprintf_r+0x74>
 8009e9a:	0032      	movs	r2, r6
 8009e9c:	0039      	movs	r1, r7
 8009e9e:	9803      	ldr	r0, [sp, #12]
 8009ea0:	f7ff ff6c 	bl	8009d7c <__ssputs_r>
 8009ea4:	1c43      	adds	r3, r0, #1
 8009ea6:	d100      	bne.n	8009eaa <_svfiprintf_r+0x6a>
 8009ea8:	e0ae      	b.n	800a008 <_svfiprintf_r+0x1c8>
 8009eaa:	6962      	ldr	r2, [r4, #20]
 8009eac:	9b05      	ldr	r3, [sp, #20]
 8009eae:	4694      	mov	ip, r2
 8009eb0:	4463      	add	r3, ip
 8009eb2:	6163      	str	r3, [r4, #20]
 8009eb4:	782b      	ldrb	r3, [r5, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d100      	bne.n	8009ebc <_svfiprintf_r+0x7c>
 8009eba:	e0a5      	b.n	800a008 <_svfiprintf_r+0x1c8>
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	4252      	negs	r2, r2
 8009ec2:	6062      	str	r2, [r4, #4]
 8009ec4:	a904      	add	r1, sp, #16
 8009ec6:	3254      	adds	r2, #84	; 0x54
 8009ec8:	1852      	adds	r2, r2, r1
 8009eca:	1c6e      	adds	r6, r5, #1
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	60e3      	str	r3, [r4, #12]
 8009ed0:	60a3      	str	r3, [r4, #8]
 8009ed2:	7013      	strb	r3, [r2, #0]
 8009ed4:	65a3      	str	r3, [r4, #88]	; 0x58
 8009ed6:	2205      	movs	r2, #5
 8009ed8:	7831      	ldrb	r1, [r6, #0]
 8009eda:	4854      	ldr	r0, [pc, #336]	; (800a02c <_svfiprintf_r+0x1ec>)
 8009edc:	f000 fa32 	bl	800a344 <memchr>
 8009ee0:	1c75      	adds	r5, r6, #1
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	d11f      	bne.n	8009f26 <_svfiprintf_r+0xe6>
 8009ee6:	6822      	ldr	r2, [r4, #0]
 8009ee8:	06d3      	lsls	r3, r2, #27
 8009eea:	d504      	bpl.n	8009ef6 <_svfiprintf_r+0xb6>
 8009eec:	2353      	movs	r3, #83	; 0x53
 8009eee:	a904      	add	r1, sp, #16
 8009ef0:	185b      	adds	r3, r3, r1
 8009ef2:	2120      	movs	r1, #32
 8009ef4:	7019      	strb	r1, [r3, #0]
 8009ef6:	0713      	lsls	r3, r2, #28
 8009ef8:	d504      	bpl.n	8009f04 <_svfiprintf_r+0xc4>
 8009efa:	2353      	movs	r3, #83	; 0x53
 8009efc:	a904      	add	r1, sp, #16
 8009efe:	185b      	adds	r3, r3, r1
 8009f00:	212b      	movs	r1, #43	; 0x2b
 8009f02:	7019      	strb	r1, [r3, #0]
 8009f04:	7833      	ldrb	r3, [r6, #0]
 8009f06:	2b2a      	cmp	r3, #42	; 0x2a
 8009f08:	d016      	beq.n	8009f38 <_svfiprintf_r+0xf8>
 8009f0a:	0035      	movs	r5, r6
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	200a      	movs	r0, #10
 8009f10:	68e3      	ldr	r3, [r4, #12]
 8009f12:	782a      	ldrb	r2, [r5, #0]
 8009f14:	1c6e      	adds	r6, r5, #1
 8009f16:	3a30      	subs	r2, #48	; 0x30
 8009f18:	2a09      	cmp	r2, #9
 8009f1a:	d94e      	bls.n	8009fba <_svfiprintf_r+0x17a>
 8009f1c:	2900      	cmp	r1, #0
 8009f1e:	d111      	bne.n	8009f44 <_svfiprintf_r+0x104>
 8009f20:	e017      	b.n	8009f52 <_svfiprintf_r+0x112>
 8009f22:	3501      	adds	r5, #1
 8009f24:	e7b0      	b.n	8009e88 <_svfiprintf_r+0x48>
 8009f26:	4b41      	ldr	r3, [pc, #260]	; (800a02c <_svfiprintf_r+0x1ec>)
 8009f28:	6822      	ldr	r2, [r4, #0]
 8009f2a:	1ac0      	subs	r0, r0, r3
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	4083      	lsls	r3, r0
 8009f30:	4313      	orrs	r3, r2
 8009f32:	002e      	movs	r6, r5
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	e7ce      	b.n	8009ed6 <_svfiprintf_r+0x96>
 8009f38:	9b07      	ldr	r3, [sp, #28]
 8009f3a:	1d19      	adds	r1, r3, #4
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	9107      	str	r1, [sp, #28]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	db01      	blt.n	8009f48 <_svfiprintf_r+0x108>
 8009f44:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f46:	e004      	b.n	8009f52 <_svfiprintf_r+0x112>
 8009f48:	425b      	negs	r3, r3
 8009f4a:	60e3      	str	r3, [r4, #12]
 8009f4c:	2302      	movs	r3, #2
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	782b      	ldrb	r3, [r5, #0]
 8009f54:	2b2e      	cmp	r3, #46	; 0x2e
 8009f56:	d10a      	bne.n	8009f6e <_svfiprintf_r+0x12e>
 8009f58:	786b      	ldrb	r3, [r5, #1]
 8009f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f5c:	d135      	bne.n	8009fca <_svfiprintf_r+0x18a>
 8009f5e:	9b07      	ldr	r3, [sp, #28]
 8009f60:	3502      	adds	r5, #2
 8009f62:	1d1a      	adds	r2, r3, #4
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	9207      	str	r2, [sp, #28]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	db2b      	blt.n	8009fc4 <_svfiprintf_r+0x184>
 8009f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f6e:	4e30      	ldr	r6, [pc, #192]	; (800a030 <_svfiprintf_r+0x1f0>)
 8009f70:	2203      	movs	r2, #3
 8009f72:	0030      	movs	r0, r6
 8009f74:	7829      	ldrb	r1, [r5, #0]
 8009f76:	f000 f9e5 	bl	800a344 <memchr>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d006      	beq.n	8009f8c <_svfiprintf_r+0x14c>
 8009f7e:	2340      	movs	r3, #64	; 0x40
 8009f80:	1b80      	subs	r0, r0, r6
 8009f82:	4083      	lsls	r3, r0
 8009f84:	6822      	ldr	r2, [r4, #0]
 8009f86:	3501      	adds	r5, #1
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	6023      	str	r3, [r4, #0]
 8009f8c:	7829      	ldrb	r1, [r5, #0]
 8009f8e:	2206      	movs	r2, #6
 8009f90:	4828      	ldr	r0, [pc, #160]	; (800a034 <_svfiprintf_r+0x1f4>)
 8009f92:	1c6e      	adds	r6, r5, #1
 8009f94:	7621      	strb	r1, [r4, #24]
 8009f96:	f000 f9d5 	bl	800a344 <memchr>
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	d03c      	beq.n	800a018 <_svfiprintf_r+0x1d8>
 8009f9e:	4b26      	ldr	r3, [pc, #152]	; (800a038 <_svfiprintf_r+0x1f8>)
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d125      	bne.n	8009ff0 <_svfiprintf_r+0x1b0>
 8009fa4:	2207      	movs	r2, #7
 8009fa6:	9b07      	ldr	r3, [sp, #28]
 8009fa8:	3307      	adds	r3, #7
 8009faa:	4393      	bics	r3, r2
 8009fac:	3308      	adds	r3, #8
 8009fae:	9307      	str	r3, [sp, #28]
 8009fb0:	6963      	ldr	r3, [r4, #20]
 8009fb2:	9a04      	ldr	r2, [sp, #16]
 8009fb4:	189b      	adds	r3, r3, r2
 8009fb6:	6163      	str	r3, [r4, #20]
 8009fb8:	e765      	b.n	8009e86 <_svfiprintf_r+0x46>
 8009fba:	4343      	muls	r3, r0
 8009fbc:	0035      	movs	r5, r6
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	189b      	adds	r3, r3, r2
 8009fc2:	e7a6      	b.n	8009f12 <_svfiprintf_r+0xd2>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	425b      	negs	r3, r3
 8009fc8:	e7d0      	b.n	8009f6c <_svfiprintf_r+0x12c>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	200a      	movs	r0, #10
 8009fce:	001a      	movs	r2, r3
 8009fd0:	3501      	adds	r5, #1
 8009fd2:	6063      	str	r3, [r4, #4]
 8009fd4:	7829      	ldrb	r1, [r5, #0]
 8009fd6:	1c6e      	adds	r6, r5, #1
 8009fd8:	3930      	subs	r1, #48	; 0x30
 8009fda:	2909      	cmp	r1, #9
 8009fdc:	d903      	bls.n	8009fe6 <_svfiprintf_r+0x1a6>
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d0c5      	beq.n	8009f6e <_svfiprintf_r+0x12e>
 8009fe2:	9209      	str	r2, [sp, #36]	; 0x24
 8009fe4:	e7c3      	b.n	8009f6e <_svfiprintf_r+0x12e>
 8009fe6:	4342      	muls	r2, r0
 8009fe8:	0035      	movs	r5, r6
 8009fea:	2301      	movs	r3, #1
 8009fec:	1852      	adds	r2, r2, r1
 8009fee:	e7f1      	b.n	8009fd4 <_svfiprintf_r+0x194>
 8009ff0:	ab07      	add	r3, sp, #28
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	003a      	movs	r2, r7
 8009ff6:	0021      	movs	r1, r4
 8009ff8:	4b10      	ldr	r3, [pc, #64]	; (800a03c <_svfiprintf_r+0x1fc>)
 8009ffa:	9803      	ldr	r0, [sp, #12]
 8009ffc:	e000      	b.n	800a000 <_svfiprintf_r+0x1c0>
 8009ffe:	bf00      	nop
 800a000:	9004      	str	r0, [sp, #16]
 800a002:	9b04      	ldr	r3, [sp, #16]
 800a004:	3301      	adds	r3, #1
 800a006:	d1d3      	bne.n	8009fb0 <_svfiprintf_r+0x170>
 800a008:	89bb      	ldrh	r3, [r7, #12]
 800a00a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a00c:	065b      	lsls	r3, r3, #25
 800a00e:	d400      	bmi.n	800a012 <_svfiprintf_r+0x1d2>
 800a010:	e72d      	b.n	8009e6e <_svfiprintf_r+0x2e>
 800a012:	2001      	movs	r0, #1
 800a014:	4240      	negs	r0, r0
 800a016:	e72a      	b.n	8009e6e <_svfiprintf_r+0x2e>
 800a018:	ab07      	add	r3, sp, #28
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	003a      	movs	r2, r7
 800a01e:	0021      	movs	r1, r4
 800a020:	4b06      	ldr	r3, [pc, #24]	; (800a03c <_svfiprintf_r+0x1fc>)
 800a022:	9803      	ldr	r0, [sp, #12]
 800a024:	f000 f87c 	bl	800a120 <_printf_i>
 800a028:	e7ea      	b.n	800a000 <_svfiprintf_r+0x1c0>
 800a02a:	46c0      	nop			; (mov r8, r8)
 800a02c:	0800abbc 	.word	0x0800abbc
 800a030:	0800abc2 	.word	0x0800abc2
 800a034:	0800abc6 	.word	0x0800abc6
 800a038:	00000000 	.word	0x00000000
 800a03c:	08009d7d 	.word	0x08009d7d

0800a040 <_printf_common>:
 800a040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a042:	0015      	movs	r5, r2
 800a044:	9301      	str	r3, [sp, #4]
 800a046:	688a      	ldr	r2, [r1, #8]
 800a048:	690b      	ldr	r3, [r1, #16]
 800a04a:	000c      	movs	r4, r1
 800a04c:	9000      	str	r0, [sp, #0]
 800a04e:	4293      	cmp	r3, r2
 800a050:	da00      	bge.n	800a054 <_printf_common+0x14>
 800a052:	0013      	movs	r3, r2
 800a054:	0022      	movs	r2, r4
 800a056:	602b      	str	r3, [r5, #0]
 800a058:	3243      	adds	r2, #67	; 0x43
 800a05a:	7812      	ldrb	r2, [r2, #0]
 800a05c:	2a00      	cmp	r2, #0
 800a05e:	d001      	beq.n	800a064 <_printf_common+0x24>
 800a060:	3301      	adds	r3, #1
 800a062:	602b      	str	r3, [r5, #0]
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	069b      	lsls	r3, r3, #26
 800a068:	d502      	bpl.n	800a070 <_printf_common+0x30>
 800a06a:	682b      	ldr	r3, [r5, #0]
 800a06c:	3302      	adds	r3, #2
 800a06e:	602b      	str	r3, [r5, #0]
 800a070:	6822      	ldr	r2, [r4, #0]
 800a072:	2306      	movs	r3, #6
 800a074:	0017      	movs	r7, r2
 800a076:	401f      	ands	r7, r3
 800a078:	421a      	tst	r2, r3
 800a07a:	d027      	beq.n	800a0cc <_printf_common+0x8c>
 800a07c:	0023      	movs	r3, r4
 800a07e:	3343      	adds	r3, #67	; 0x43
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	1e5a      	subs	r2, r3, #1
 800a084:	4193      	sbcs	r3, r2
 800a086:	6822      	ldr	r2, [r4, #0]
 800a088:	0692      	lsls	r2, r2, #26
 800a08a:	d430      	bmi.n	800a0ee <_printf_common+0xae>
 800a08c:	0022      	movs	r2, r4
 800a08e:	9901      	ldr	r1, [sp, #4]
 800a090:	9800      	ldr	r0, [sp, #0]
 800a092:	9e08      	ldr	r6, [sp, #32]
 800a094:	3243      	adds	r2, #67	; 0x43
 800a096:	47b0      	blx	r6
 800a098:	1c43      	adds	r3, r0, #1
 800a09a:	d025      	beq.n	800a0e8 <_printf_common+0xa8>
 800a09c:	2306      	movs	r3, #6
 800a09e:	6820      	ldr	r0, [r4, #0]
 800a0a0:	682a      	ldr	r2, [r5, #0]
 800a0a2:	68e1      	ldr	r1, [r4, #12]
 800a0a4:	2500      	movs	r5, #0
 800a0a6:	4003      	ands	r3, r0
 800a0a8:	2b04      	cmp	r3, #4
 800a0aa:	d103      	bne.n	800a0b4 <_printf_common+0x74>
 800a0ac:	1a8d      	subs	r5, r1, r2
 800a0ae:	43eb      	mvns	r3, r5
 800a0b0:	17db      	asrs	r3, r3, #31
 800a0b2:	401d      	ands	r5, r3
 800a0b4:	68a3      	ldr	r3, [r4, #8]
 800a0b6:	6922      	ldr	r2, [r4, #16]
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	dd01      	ble.n	800a0c0 <_printf_common+0x80>
 800a0bc:	1a9b      	subs	r3, r3, r2
 800a0be:	18ed      	adds	r5, r5, r3
 800a0c0:	2700      	movs	r7, #0
 800a0c2:	42bd      	cmp	r5, r7
 800a0c4:	d120      	bne.n	800a108 <_printf_common+0xc8>
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	e010      	b.n	800a0ec <_printf_common+0xac>
 800a0ca:	3701      	adds	r7, #1
 800a0cc:	68e3      	ldr	r3, [r4, #12]
 800a0ce:	682a      	ldr	r2, [r5, #0]
 800a0d0:	1a9b      	subs	r3, r3, r2
 800a0d2:	42bb      	cmp	r3, r7
 800a0d4:	ddd2      	ble.n	800a07c <_printf_common+0x3c>
 800a0d6:	0022      	movs	r2, r4
 800a0d8:	2301      	movs	r3, #1
 800a0da:	9901      	ldr	r1, [sp, #4]
 800a0dc:	9800      	ldr	r0, [sp, #0]
 800a0de:	9e08      	ldr	r6, [sp, #32]
 800a0e0:	3219      	adds	r2, #25
 800a0e2:	47b0      	blx	r6
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d1f0      	bne.n	800a0ca <_printf_common+0x8a>
 800a0e8:	2001      	movs	r0, #1
 800a0ea:	4240      	negs	r0, r0
 800a0ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a0ee:	2030      	movs	r0, #48	; 0x30
 800a0f0:	18e1      	adds	r1, r4, r3
 800a0f2:	3143      	adds	r1, #67	; 0x43
 800a0f4:	7008      	strb	r0, [r1, #0]
 800a0f6:	0021      	movs	r1, r4
 800a0f8:	1c5a      	adds	r2, r3, #1
 800a0fa:	3145      	adds	r1, #69	; 0x45
 800a0fc:	7809      	ldrb	r1, [r1, #0]
 800a0fe:	18a2      	adds	r2, r4, r2
 800a100:	3243      	adds	r2, #67	; 0x43
 800a102:	3302      	adds	r3, #2
 800a104:	7011      	strb	r1, [r2, #0]
 800a106:	e7c1      	b.n	800a08c <_printf_common+0x4c>
 800a108:	0022      	movs	r2, r4
 800a10a:	2301      	movs	r3, #1
 800a10c:	9901      	ldr	r1, [sp, #4]
 800a10e:	9800      	ldr	r0, [sp, #0]
 800a110:	9e08      	ldr	r6, [sp, #32]
 800a112:	321a      	adds	r2, #26
 800a114:	47b0      	blx	r6
 800a116:	1c43      	adds	r3, r0, #1
 800a118:	d0e6      	beq.n	800a0e8 <_printf_common+0xa8>
 800a11a:	3701      	adds	r7, #1
 800a11c:	e7d1      	b.n	800a0c2 <_printf_common+0x82>
	...

0800a120 <_printf_i>:
 800a120:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a122:	b08b      	sub	sp, #44	; 0x2c
 800a124:	9206      	str	r2, [sp, #24]
 800a126:	000a      	movs	r2, r1
 800a128:	3243      	adds	r2, #67	; 0x43
 800a12a:	9307      	str	r3, [sp, #28]
 800a12c:	9005      	str	r0, [sp, #20]
 800a12e:	9204      	str	r2, [sp, #16]
 800a130:	7e0a      	ldrb	r2, [r1, #24]
 800a132:	000c      	movs	r4, r1
 800a134:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a136:	2a78      	cmp	r2, #120	; 0x78
 800a138:	d807      	bhi.n	800a14a <_printf_i+0x2a>
 800a13a:	2a62      	cmp	r2, #98	; 0x62
 800a13c:	d809      	bhi.n	800a152 <_printf_i+0x32>
 800a13e:	2a00      	cmp	r2, #0
 800a140:	d100      	bne.n	800a144 <_printf_i+0x24>
 800a142:	e0c1      	b.n	800a2c8 <_printf_i+0x1a8>
 800a144:	2a58      	cmp	r2, #88	; 0x58
 800a146:	d100      	bne.n	800a14a <_printf_i+0x2a>
 800a148:	e08c      	b.n	800a264 <_printf_i+0x144>
 800a14a:	0026      	movs	r6, r4
 800a14c:	3642      	adds	r6, #66	; 0x42
 800a14e:	7032      	strb	r2, [r6, #0]
 800a150:	e022      	b.n	800a198 <_printf_i+0x78>
 800a152:	0010      	movs	r0, r2
 800a154:	3863      	subs	r0, #99	; 0x63
 800a156:	2815      	cmp	r0, #21
 800a158:	d8f7      	bhi.n	800a14a <_printf_i+0x2a>
 800a15a:	f7f5 ffdd 	bl	8000118 <__gnu_thumb1_case_shi>
 800a15e:	0016      	.short	0x0016
 800a160:	fff6001f 	.word	0xfff6001f
 800a164:	fff6fff6 	.word	0xfff6fff6
 800a168:	001ffff6 	.word	0x001ffff6
 800a16c:	fff6fff6 	.word	0xfff6fff6
 800a170:	fff6fff6 	.word	0xfff6fff6
 800a174:	003600a8 	.word	0x003600a8
 800a178:	fff6009a 	.word	0xfff6009a
 800a17c:	00b9fff6 	.word	0x00b9fff6
 800a180:	0036fff6 	.word	0x0036fff6
 800a184:	fff6fff6 	.word	0xfff6fff6
 800a188:	009e      	.short	0x009e
 800a18a:	0026      	movs	r6, r4
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	3642      	adds	r6, #66	; 0x42
 800a190:	1d11      	adds	r1, r2, #4
 800a192:	6019      	str	r1, [r3, #0]
 800a194:	6813      	ldr	r3, [r2, #0]
 800a196:	7033      	strb	r3, [r6, #0]
 800a198:	2301      	movs	r3, #1
 800a19a:	e0a7      	b.n	800a2ec <_printf_i+0x1cc>
 800a19c:	6808      	ldr	r0, [r1, #0]
 800a19e:	6819      	ldr	r1, [r3, #0]
 800a1a0:	1d0a      	adds	r2, r1, #4
 800a1a2:	0605      	lsls	r5, r0, #24
 800a1a4:	d50b      	bpl.n	800a1be <_printf_i+0x9e>
 800a1a6:	680d      	ldr	r5, [r1, #0]
 800a1a8:	601a      	str	r2, [r3, #0]
 800a1aa:	2d00      	cmp	r5, #0
 800a1ac:	da03      	bge.n	800a1b6 <_printf_i+0x96>
 800a1ae:	232d      	movs	r3, #45	; 0x2d
 800a1b0:	9a04      	ldr	r2, [sp, #16]
 800a1b2:	426d      	negs	r5, r5
 800a1b4:	7013      	strb	r3, [r2, #0]
 800a1b6:	4b61      	ldr	r3, [pc, #388]	; (800a33c <_printf_i+0x21c>)
 800a1b8:	270a      	movs	r7, #10
 800a1ba:	9303      	str	r3, [sp, #12]
 800a1bc:	e01b      	b.n	800a1f6 <_printf_i+0xd6>
 800a1be:	680d      	ldr	r5, [r1, #0]
 800a1c0:	601a      	str	r2, [r3, #0]
 800a1c2:	0641      	lsls	r1, r0, #25
 800a1c4:	d5f1      	bpl.n	800a1aa <_printf_i+0x8a>
 800a1c6:	b22d      	sxth	r5, r5
 800a1c8:	e7ef      	b.n	800a1aa <_printf_i+0x8a>
 800a1ca:	680d      	ldr	r5, [r1, #0]
 800a1cc:	6819      	ldr	r1, [r3, #0]
 800a1ce:	1d08      	adds	r0, r1, #4
 800a1d0:	6018      	str	r0, [r3, #0]
 800a1d2:	062e      	lsls	r6, r5, #24
 800a1d4:	d501      	bpl.n	800a1da <_printf_i+0xba>
 800a1d6:	680d      	ldr	r5, [r1, #0]
 800a1d8:	e003      	b.n	800a1e2 <_printf_i+0xc2>
 800a1da:	066d      	lsls	r5, r5, #25
 800a1dc:	d5fb      	bpl.n	800a1d6 <_printf_i+0xb6>
 800a1de:	680d      	ldr	r5, [r1, #0]
 800a1e0:	b2ad      	uxth	r5, r5
 800a1e2:	4b56      	ldr	r3, [pc, #344]	; (800a33c <_printf_i+0x21c>)
 800a1e4:	2708      	movs	r7, #8
 800a1e6:	9303      	str	r3, [sp, #12]
 800a1e8:	2a6f      	cmp	r2, #111	; 0x6f
 800a1ea:	d000      	beq.n	800a1ee <_printf_i+0xce>
 800a1ec:	3702      	adds	r7, #2
 800a1ee:	0023      	movs	r3, r4
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	3343      	adds	r3, #67	; 0x43
 800a1f4:	701a      	strb	r2, [r3, #0]
 800a1f6:	6863      	ldr	r3, [r4, #4]
 800a1f8:	60a3      	str	r3, [r4, #8]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	db03      	blt.n	800a206 <_printf_i+0xe6>
 800a1fe:	2204      	movs	r2, #4
 800a200:	6821      	ldr	r1, [r4, #0]
 800a202:	4391      	bics	r1, r2
 800a204:	6021      	str	r1, [r4, #0]
 800a206:	2d00      	cmp	r5, #0
 800a208:	d102      	bne.n	800a210 <_printf_i+0xf0>
 800a20a:	9e04      	ldr	r6, [sp, #16]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00c      	beq.n	800a22a <_printf_i+0x10a>
 800a210:	9e04      	ldr	r6, [sp, #16]
 800a212:	0028      	movs	r0, r5
 800a214:	0039      	movs	r1, r7
 800a216:	f7f6 f80f 	bl	8000238 <__aeabi_uidivmod>
 800a21a:	9b03      	ldr	r3, [sp, #12]
 800a21c:	3e01      	subs	r6, #1
 800a21e:	5c5b      	ldrb	r3, [r3, r1]
 800a220:	7033      	strb	r3, [r6, #0]
 800a222:	002b      	movs	r3, r5
 800a224:	0005      	movs	r5, r0
 800a226:	429f      	cmp	r7, r3
 800a228:	d9f3      	bls.n	800a212 <_printf_i+0xf2>
 800a22a:	2f08      	cmp	r7, #8
 800a22c:	d109      	bne.n	800a242 <_printf_i+0x122>
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	07db      	lsls	r3, r3, #31
 800a232:	d506      	bpl.n	800a242 <_printf_i+0x122>
 800a234:	6863      	ldr	r3, [r4, #4]
 800a236:	6922      	ldr	r2, [r4, #16]
 800a238:	4293      	cmp	r3, r2
 800a23a:	dc02      	bgt.n	800a242 <_printf_i+0x122>
 800a23c:	2330      	movs	r3, #48	; 0x30
 800a23e:	3e01      	subs	r6, #1
 800a240:	7033      	strb	r3, [r6, #0]
 800a242:	9b04      	ldr	r3, [sp, #16]
 800a244:	1b9b      	subs	r3, r3, r6
 800a246:	6123      	str	r3, [r4, #16]
 800a248:	9b07      	ldr	r3, [sp, #28]
 800a24a:	0021      	movs	r1, r4
 800a24c:	9300      	str	r3, [sp, #0]
 800a24e:	9805      	ldr	r0, [sp, #20]
 800a250:	9b06      	ldr	r3, [sp, #24]
 800a252:	aa09      	add	r2, sp, #36	; 0x24
 800a254:	f7ff fef4 	bl	800a040 <_printf_common>
 800a258:	1c43      	adds	r3, r0, #1
 800a25a:	d14c      	bne.n	800a2f6 <_printf_i+0x1d6>
 800a25c:	2001      	movs	r0, #1
 800a25e:	4240      	negs	r0, r0
 800a260:	b00b      	add	sp, #44	; 0x2c
 800a262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a264:	3145      	adds	r1, #69	; 0x45
 800a266:	700a      	strb	r2, [r1, #0]
 800a268:	4a34      	ldr	r2, [pc, #208]	; (800a33c <_printf_i+0x21c>)
 800a26a:	9203      	str	r2, [sp, #12]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	6821      	ldr	r1, [r4, #0]
 800a270:	ca20      	ldmia	r2!, {r5}
 800a272:	601a      	str	r2, [r3, #0]
 800a274:	0608      	lsls	r0, r1, #24
 800a276:	d516      	bpl.n	800a2a6 <_printf_i+0x186>
 800a278:	07cb      	lsls	r3, r1, #31
 800a27a:	d502      	bpl.n	800a282 <_printf_i+0x162>
 800a27c:	2320      	movs	r3, #32
 800a27e:	4319      	orrs	r1, r3
 800a280:	6021      	str	r1, [r4, #0]
 800a282:	2710      	movs	r7, #16
 800a284:	2d00      	cmp	r5, #0
 800a286:	d1b2      	bne.n	800a1ee <_printf_i+0xce>
 800a288:	2320      	movs	r3, #32
 800a28a:	6822      	ldr	r2, [r4, #0]
 800a28c:	439a      	bics	r2, r3
 800a28e:	6022      	str	r2, [r4, #0]
 800a290:	e7ad      	b.n	800a1ee <_printf_i+0xce>
 800a292:	2220      	movs	r2, #32
 800a294:	6809      	ldr	r1, [r1, #0]
 800a296:	430a      	orrs	r2, r1
 800a298:	6022      	str	r2, [r4, #0]
 800a29a:	0022      	movs	r2, r4
 800a29c:	2178      	movs	r1, #120	; 0x78
 800a29e:	3245      	adds	r2, #69	; 0x45
 800a2a0:	7011      	strb	r1, [r2, #0]
 800a2a2:	4a27      	ldr	r2, [pc, #156]	; (800a340 <_printf_i+0x220>)
 800a2a4:	e7e1      	b.n	800a26a <_printf_i+0x14a>
 800a2a6:	0648      	lsls	r0, r1, #25
 800a2a8:	d5e6      	bpl.n	800a278 <_printf_i+0x158>
 800a2aa:	b2ad      	uxth	r5, r5
 800a2ac:	e7e4      	b.n	800a278 <_printf_i+0x158>
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	680d      	ldr	r5, [r1, #0]
 800a2b2:	1d10      	adds	r0, r2, #4
 800a2b4:	6949      	ldr	r1, [r1, #20]
 800a2b6:	6018      	str	r0, [r3, #0]
 800a2b8:	6813      	ldr	r3, [r2, #0]
 800a2ba:	062e      	lsls	r6, r5, #24
 800a2bc:	d501      	bpl.n	800a2c2 <_printf_i+0x1a2>
 800a2be:	6019      	str	r1, [r3, #0]
 800a2c0:	e002      	b.n	800a2c8 <_printf_i+0x1a8>
 800a2c2:	066d      	lsls	r5, r5, #25
 800a2c4:	d5fb      	bpl.n	800a2be <_printf_i+0x19e>
 800a2c6:	8019      	strh	r1, [r3, #0]
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	9e04      	ldr	r6, [sp, #16]
 800a2cc:	6123      	str	r3, [r4, #16]
 800a2ce:	e7bb      	b.n	800a248 <_printf_i+0x128>
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	1d11      	adds	r1, r2, #4
 800a2d4:	6019      	str	r1, [r3, #0]
 800a2d6:	6816      	ldr	r6, [r2, #0]
 800a2d8:	2100      	movs	r1, #0
 800a2da:	0030      	movs	r0, r6
 800a2dc:	6862      	ldr	r2, [r4, #4]
 800a2de:	f000 f831 	bl	800a344 <memchr>
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d001      	beq.n	800a2ea <_printf_i+0x1ca>
 800a2e6:	1b80      	subs	r0, r0, r6
 800a2e8:	6060      	str	r0, [r4, #4]
 800a2ea:	6863      	ldr	r3, [r4, #4]
 800a2ec:	6123      	str	r3, [r4, #16]
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	9a04      	ldr	r2, [sp, #16]
 800a2f2:	7013      	strb	r3, [r2, #0]
 800a2f4:	e7a8      	b.n	800a248 <_printf_i+0x128>
 800a2f6:	6923      	ldr	r3, [r4, #16]
 800a2f8:	0032      	movs	r2, r6
 800a2fa:	9906      	ldr	r1, [sp, #24]
 800a2fc:	9805      	ldr	r0, [sp, #20]
 800a2fe:	9d07      	ldr	r5, [sp, #28]
 800a300:	47a8      	blx	r5
 800a302:	1c43      	adds	r3, r0, #1
 800a304:	d0aa      	beq.n	800a25c <_printf_i+0x13c>
 800a306:	6823      	ldr	r3, [r4, #0]
 800a308:	079b      	lsls	r3, r3, #30
 800a30a:	d415      	bmi.n	800a338 <_printf_i+0x218>
 800a30c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a30e:	68e0      	ldr	r0, [r4, #12]
 800a310:	4298      	cmp	r0, r3
 800a312:	daa5      	bge.n	800a260 <_printf_i+0x140>
 800a314:	0018      	movs	r0, r3
 800a316:	e7a3      	b.n	800a260 <_printf_i+0x140>
 800a318:	0022      	movs	r2, r4
 800a31a:	2301      	movs	r3, #1
 800a31c:	9906      	ldr	r1, [sp, #24]
 800a31e:	9805      	ldr	r0, [sp, #20]
 800a320:	9e07      	ldr	r6, [sp, #28]
 800a322:	3219      	adds	r2, #25
 800a324:	47b0      	blx	r6
 800a326:	1c43      	adds	r3, r0, #1
 800a328:	d098      	beq.n	800a25c <_printf_i+0x13c>
 800a32a:	3501      	adds	r5, #1
 800a32c:	68e3      	ldr	r3, [r4, #12]
 800a32e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a330:	1a9b      	subs	r3, r3, r2
 800a332:	42ab      	cmp	r3, r5
 800a334:	dcf0      	bgt.n	800a318 <_printf_i+0x1f8>
 800a336:	e7e9      	b.n	800a30c <_printf_i+0x1ec>
 800a338:	2500      	movs	r5, #0
 800a33a:	e7f7      	b.n	800a32c <_printf_i+0x20c>
 800a33c:	0800abcd 	.word	0x0800abcd
 800a340:	0800abde 	.word	0x0800abde

0800a344 <memchr>:
 800a344:	b2c9      	uxtb	r1, r1
 800a346:	1882      	adds	r2, r0, r2
 800a348:	4290      	cmp	r0, r2
 800a34a:	d101      	bne.n	800a350 <memchr+0xc>
 800a34c:	2000      	movs	r0, #0
 800a34e:	4770      	bx	lr
 800a350:	7803      	ldrb	r3, [r0, #0]
 800a352:	428b      	cmp	r3, r1
 800a354:	d0fb      	beq.n	800a34e <memchr+0xa>
 800a356:	3001      	adds	r0, #1
 800a358:	e7f6      	b.n	800a348 <memchr+0x4>

0800a35a <memmove>:
 800a35a:	b510      	push	{r4, lr}
 800a35c:	4288      	cmp	r0, r1
 800a35e:	d902      	bls.n	800a366 <memmove+0xc>
 800a360:	188b      	adds	r3, r1, r2
 800a362:	4298      	cmp	r0, r3
 800a364:	d303      	bcc.n	800a36e <memmove+0x14>
 800a366:	2300      	movs	r3, #0
 800a368:	e007      	b.n	800a37a <memmove+0x20>
 800a36a:	5c8b      	ldrb	r3, [r1, r2]
 800a36c:	5483      	strb	r3, [r0, r2]
 800a36e:	3a01      	subs	r2, #1
 800a370:	d2fb      	bcs.n	800a36a <memmove+0x10>
 800a372:	bd10      	pop	{r4, pc}
 800a374:	5ccc      	ldrb	r4, [r1, r3]
 800a376:	54c4      	strb	r4, [r0, r3]
 800a378:	3301      	adds	r3, #1
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d1fa      	bne.n	800a374 <memmove+0x1a>
 800a37e:	e7f8      	b.n	800a372 <memmove+0x18>

0800a380 <_realloc_r>:
 800a380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a382:	0007      	movs	r7, r0
 800a384:	000e      	movs	r6, r1
 800a386:	0014      	movs	r4, r2
 800a388:	2900      	cmp	r1, #0
 800a38a:	d105      	bne.n	800a398 <_realloc_r+0x18>
 800a38c:	0011      	movs	r1, r2
 800a38e:	f7ff fb75 	bl	8009a7c <_malloc_r>
 800a392:	0005      	movs	r5, r0
 800a394:	0028      	movs	r0, r5
 800a396:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a398:	2a00      	cmp	r2, #0
 800a39a:	d103      	bne.n	800a3a4 <_realloc_r+0x24>
 800a39c:	f7ff fca4 	bl	8009ce8 <_free_r>
 800a3a0:	0025      	movs	r5, r4
 800a3a2:	e7f7      	b.n	800a394 <_realloc_r+0x14>
 800a3a4:	f000 f81b 	bl	800a3de <_malloc_usable_size_r>
 800a3a8:	9001      	str	r0, [sp, #4]
 800a3aa:	4284      	cmp	r4, r0
 800a3ac:	d803      	bhi.n	800a3b6 <_realloc_r+0x36>
 800a3ae:	0035      	movs	r5, r6
 800a3b0:	0843      	lsrs	r3, r0, #1
 800a3b2:	42a3      	cmp	r3, r4
 800a3b4:	d3ee      	bcc.n	800a394 <_realloc_r+0x14>
 800a3b6:	0021      	movs	r1, r4
 800a3b8:	0038      	movs	r0, r7
 800a3ba:	f7ff fb5f 	bl	8009a7c <_malloc_r>
 800a3be:	1e05      	subs	r5, r0, #0
 800a3c0:	d0e8      	beq.n	800a394 <_realloc_r+0x14>
 800a3c2:	9b01      	ldr	r3, [sp, #4]
 800a3c4:	0022      	movs	r2, r4
 800a3c6:	429c      	cmp	r4, r3
 800a3c8:	d900      	bls.n	800a3cc <_realloc_r+0x4c>
 800a3ca:	001a      	movs	r2, r3
 800a3cc:	0031      	movs	r1, r6
 800a3ce:	0028      	movs	r0, r5
 800a3d0:	f7ff fb20 	bl	8009a14 <memcpy>
 800a3d4:	0031      	movs	r1, r6
 800a3d6:	0038      	movs	r0, r7
 800a3d8:	f7ff fc86 	bl	8009ce8 <_free_r>
 800a3dc:	e7da      	b.n	800a394 <_realloc_r+0x14>

0800a3de <_malloc_usable_size_r>:
 800a3de:	1f0b      	subs	r3, r1, #4
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	1f18      	subs	r0, r3, #4
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	da01      	bge.n	800a3ec <_malloc_usable_size_r+0xe>
 800a3e8:	580b      	ldr	r3, [r1, r0]
 800a3ea:	18c0      	adds	r0, r0, r3
 800a3ec:	4770      	bx	lr
	...

0800a3f0 <_init>:
 800a3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f2:	46c0      	nop			; (mov r8, r8)
 800a3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3f6:	bc08      	pop	{r3}
 800a3f8:	469e      	mov	lr, r3
 800a3fa:	4770      	bx	lr

0800a3fc <_fini>:
 800a3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fe:	46c0      	nop			; (mov r8, r8)
 800a400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a402:	bc08      	pop	{r3}
 800a404:	469e      	mov	lr, r3
 800a406:	4770      	bx	lr
