
TFT_FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a388  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000978  0800a448  0800a448  0001a448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adc0  0800adc0  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800adc0  0800adc0  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800adc0  0800adc0  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adc0  0800adc0  0001adc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adc4  0800adc4  0001adc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800adc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a0c  200000cc  0800ae94  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ad8  0800ae94  00021ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af23  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000447f  00000000  00000000  0003b017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001920  00000000  00000000  0003f498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001718  00000000  00000000  00040db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c86  00000000  00000000  000424d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f8dc  00000000  00000000  00059156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000776d0  00000000  00000000  00078a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0102  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ff4  00000000  00000000  000f0154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000cc 	.word	0x200000cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a430 	.word	0x0800a430

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d0 	.word	0x200000d0
 8000104:	0800a430 	.word	0x0800a430

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	60b9      	str	r1, [r7, #8]
 8000422:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	4a06      	ldr	r2, [pc, #24]	; (8000440 <vApplicationGetIdleTaskMemory+0x28>)
 8000428:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	4a05      	ldr	r2, [pc, #20]	; (8000444 <vApplicationGetIdleTaskMemory+0x2c>)
 800042e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2280      	movs	r2, #128	; 0x80
 8000434:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b004      	add	sp, #16
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	200000e8 	.word	0x200000e8
 8000444:	2000019c 	.word	0x2000019c

08000448 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000448:	b5b0      	push	{r4, r5, r7, lr}
 800044a:	b0b0      	sub	sp, #192	; 0xc0
 800044c:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800044e:	f000 fc97 	bl	8000d80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	RCC_CONFIG_48MHZ();
 8000452:	f003 fe41 	bl	80040d8 <RCC_CONFIG_48MHZ>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
//  MX_GPIO_Init();
//  MX_USART2_UART_Init();
	MX_SPI1_Init();
 8000456:	f000 fa17 	bl	8000888 <MX_SPI1_Init>
	MX_FATFS_Init();
 800045a:	f002 f9ff 	bl	800285c <MX_FATFS_Init>
//	MX_GPIO_Init();
//  MX_USART2_UART_Init();
//	USART_INIT(USART2, 48, PORTA, PORTA, 2, 3, 9600);
//	gpio_config(PORTA, 5, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
//=================== SD Card Select Pin ==================================//
	gpio_config(PORTB, 6, OUTPUT_MODE, LOW_SPEED, DI_PUPD, PHPL);
 800045e:	48ed      	ldr	r0, [pc, #948]	; (8000814 <main+0x3cc>)
 8000460:	2300      	movs	r3, #0
 8000462:	9301      	str	r3, [sp, #4]
 8000464:	2300      	movs	r3, #0
 8000466:	9300      	str	r3, [sp, #0]
 8000468:	2300      	movs	r3, #0
 800046a:	2201      	movs	r2, #1
 800046c:	2106      	movs	r1, #6
 800046e:	f003 f879 	bl	8003564 <gpio_config>
	gpio_write(PORTB, 6, LOW);
 8000472:	4be8      	ldr	r3, [pc, #928]	; (8000814 <main+0x3cc>)
 8000474:	2200      	movs	r2, #0
 8000476:	2106      	movs	r1, #6
 8000478:	0018      	movs	r0, r3
 800047a:	f003 f95f 	bl	800373c <gpio_write>
//=========================================================================//
	USART_INIT(USART2, 48, PORTA, PORTA, 2, 3, 9600);
 800047e:	2390      	movs	r3, #144	; 0x90
 8000480:	05d9      	lsls	r1, r3, #23
 8000482:	2390      	movs	r3, #144	; 0x90
 8000484:	05da      	lsls	r2, r3, #23
 8000486:	48e4      	ldr	r0, [pc, #912]	; (8000818 <main+0x3d0>)
 8000488:	2396      	movs	r3, #150	; 0x96
 800048a:	019b      	lsls	r3, r3, #6
 800048c:	9302      	str	r3, [sp, #8]
 800048e:	2303      	movs	r3, #3
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2302      	movs	r3, #2
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	000b      	movs	r3, r1
 8000498:	2130      	movs	r1, #48	; 0x30
 800049a:	f003 fba3 	bl	8003be4 <USART_INIT>
	USART_IT_EN(USART2, 0, 1, 0);
 800049e:	48de      	ldr	r0, [pc, #888]	; (8000818 <main+0x3d0>)
 80004a0:	2300      	movs	r3, #0
 80004a2:	2201      	movs	r2, #1
 80004a4:	2100      	movs	r1, #0
 80004a6:	f003 fbc5 	bl	8003c34 <USART_IT_EN>

//	gpio_config(port, pinNumber, pinMode, pinSpeed, pinPUPD, PHPL_OD);


	LCD_Begin();
 80004aa:	f004 f8d5 	bl	8004658 <LCD_Begin>
	LCD_SetRotation(1);
 80004ae:	2001      	movs	r0, #1
 80004b0:	f005 fdca 	bl	8006048 <LCD_SetRotation>
	LCD_FillScreen(BLACK);
 80004b4:	2000      	movs	r0, #0
 80004b6:	f005 fa8b 	bl	80059d0 <LCD_FillScreen>
	Touch_Begin();
 80004ba:	f005 ffb1 	bl	8006420 <Touch_Begin>

	//=================== || CMD BOX || ==============//
	LCD_DrawRoundRect(10, 10, 180, 35, 2, LIGHTGRAY);
 80004be:	4bd7      	ldr	r3, [pc, #860]	; (800081c <main+0x3d4>)
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2302      	movs	r3, #2
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	2323      	movs	r3, #35	; 0x23
 80004c8:	22b4      	movs	r2, #180	; 0xb4
 80004ca:	210a      	movs	r1, #10
 80004cc:	200a      	movs	r0, #10
 80004ce:	f004 fbf0 	bl	8004cb2 <LCD_DrawRoundRect>
	LCD_DrawButton1("COMMAND:ERROR", 105, 50, 85, 17, 2, LIGHTGRAY, RED, 0, 5, 5, 1);
 80004d2:	48d3      	ldr	r0, [pc, #844]	; (8000820 <main+0x3d8>)
 80004d4:	2301      	movs	r3, #1
 80004d6:	9307      	str	r3, [sp, #28]
 80004d8:	2305      	movs	r3, #5
 80004da:	9306      	str	r3, [sp, #24]
 80004dc:	2305      	movs	r3, #5
 80004de:	9305      	str	r3, [sp, #20]
 80004e0:	2300      	movs	r3, #0
 80004e2:	9304      	str	r3, [sp, #16]
 80004e4:	23f8      	movs	r3, #248	; 0xf8
 80004e6:	021b      	lsls	r3, r3, #8
 80004e8:	9303      	str	r3, [sp, #12]
 80004ea:	4bcc      	ldr	r3, [pc, #816]	; (800081c <main+0x3d4>)
 80004ec:	9302      	str	r3, [sp, #8]
 80004ee:	2302      	movs	r3, #2
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2311      	movs	r3, #17
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	2355      	movs	r3, #85	; 0x55
 80004f8:	2232      	movs	r2, #50	; 0x32
 80004fa:	2169      	movs	r1, #105	; 0x69
 80004fc:	f003 feb0 	bl	8004260 <LCD_DrawButton1>
	//=================================================//

	//=================== || Connect/DisConnect Button || ====================//
	LCD_DrawButton1("Connect", 18, 80, 160, 40, 2, GREEN, WHITE, 1, 35, 11, 2);
 8000500:	48c8      	ldr	r0, [pc, #800]	; (8000824 <main+0x3dc>)
 8000502:	2302      	movs	r3, #2
 8000504:	9307      	str	r3, [sp, #28]
 8000506:	230b      	movs	r3, #11
 8000508:	9306      	str	r3, [sp, #24]
 800050a:	2323      	movs	r3, #35	; 0x23
 800050c:	9305      	str	r3, [sp, #20]
 800050e:	2301      	movs	r3, #1
 8000510:	9304      	str	r3, [sp, #16]
 8000512:	4bc5      	ldr	r3, [pc, #788]	; (8000828 <main+0x3e0>)
 8000514:	9303      	str	r3, [sp, #12]
 8000516:	23fc      	movs	r3, #252	; 0xfc
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	9302      	str	r3, [sp, #8]
 800051c:	2302      	movs	r3, #2
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	2328      	movs	r3, #40	; 0x28
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	23a0      	movs	r3, #160	; 0xa0
 8000526:	2250      	movs	r2, #80	; 0x50
 8000528:	2112      	movs	r1, #18
 800052a:	f003 fe99 	bl	8004260 <LCD_DrawButton1>
	//========================================================================//

	//=================== || PINK BOX || ==============//
	LCD_FillRoundRect(200, 10, 120, 115, 3, PINK);
 800052e:	4bbf      	ldr	r3, [pc, #764]	; (800082c <main+0x3e4>)
 8000530:	9301      	str	r3, [sp, #4]
 8000532:	2303      	movs	r3, #3
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2373      	movs	r3, #115	; 0x73
 8000538:	2278      	movs	r2, #120	; 0x78
 800053a:	210a      	movs	r1, #10
 800053c:	20c8      	movs	r0, #200	; 0xc8
 800053e:	f005 f9b1 	bl	80058a4 <LCD_FillRoundRect>
	//=================================================//

	//=================== ||PINK WHITE BOX || ==============//
	LCD_FillRoundRect(210, 20, 100, 90, 1, WHITE);
 8000542:	4bb9      	ldr	r3, [pc, #740]	; (8000828 <main+0x3e0>)
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	2301      	movs	r3, #1
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	235a      	movs	r3, #90	; 0x5a
 800054c:	2264      	movs	r2, #100	; 0x64
 800054e:	2114      	movs	r1, #20
 8000550:	20d2      	movs	r0, #210	; 0xd2
 8000552:	f005 f9a7 	bl	80058a4 <LCD_FillRoundRect>
	//======================================================//

	//=====================Pink White Box Data ====================//

	LCD_SetTextSize(2);
 8000556:	2002      	movs	r0, #2
 8000558:	f005 fd46 	bl	8005fe8 <LCD_SetTextSize>
	LCD_SetCursor(220, 30);
 800055c:	211e      	movs	r1, #30
 800055e:	20dc      	movs	r0, #220	; 0xdc
 8000560:	f005 fd2c 	bl	8005fbc <LCD_SetCursor>
	LCD_SetTextColor(BLACK, WHITE);
 8000564:	4bb0      	ldr	r3, [pc, #704]	; (8000828 <main+0x3e0>)
 8000566:	0019      	movs	r1, r3
 8000568:	2000      	movs	r0, #0
 800056a:	f005 fd53 	bl	8006014 <LCD_SetTextColor>
	LCD_Printf("Prophyr");
 800056e:	4bb0      	ldr	r3, [pc, #704]	; (8000830 <main+0x3e8>)
 8000570:	0018      	movs	r0, r3
 8000572:	f005 fc27 	bl	8005dc4 <LCD_Printf>

	LCD_SetCursor(220, 60);
 8000576:	213c      	movs	r1, #60	; 0x3c
 8000578:	20dc      	movs	r0, #220	; 0xdc
 800057a:	f005 fd1f 	bl	8005fbc <LCD_SetCursor>
	LCD_SetTextColor(BLACK, WHITE);
 800057e:	4baa      	ldr	r3, [pc, #680]	; (8000828 <main+0x3e0>)
 8000580:	0019      	movs	r1, r3
 8000582:	2000      	movs	r0, #0
 8000584:	f005 fd46 	bl	8006014 <LCD_SetTextColor>
	LCD_Printf("Prop");
 8000588:	4baa      	ldr	r3, [pc, #680]	; (8000834 <main+0x3ec>)
 800058a:	0018      	movs	r0, r3
 800058c:	f005 fc1a 	bl	8005dc4 <LCD_Printf>

	//=============================================================//

	//=================== || Yellow BOX || ==============================////
	LCD_FillRoundRect(0, 130, 320, 110, 1, YELLOW);
 8000590:	23a0      	movs	r3, #160	; 0xa0
 8000592:	005a      	lsls	r2, r3, #1
 8000594:	4ba8      	ldr	r3, [pc, #672]	; (8000838 <main+0x3f0>)
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	2301      	movs	r3, #1
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	236e      	movs	r3, #110	; 0x6e
 800059e:	2182      	movs	r1, #130	; 0x82
 80005a0:	2000      	movs	r0, #0
 80005a2:	f005 f97f 	bl	80058a4 <LCD_FillRoundRect>

	LCD_DrawHBorder(0, 130, 320, BROWN1, 5);
 80005a6:	49a5      	ldr	r1, [pc, #660]	; (800083c <main+0x3f4>)
 80005a8:	23a0      	movs	r3, #160	; 0xa0
 80005aa:	005a      	lsls	r2, r3, #1
 80005ac:	2305      	movs	r3, #5
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	000b      	movs	r3, r1
 80005b2:	2182      	movs	r1, #130	; 0x82
 80005b4:	2000      	movs	r0, #0
 80005b6:	f003 feff 	bl	80043b8 <LCD_DrawHBorder>
	LCD_DrawHBorder(0, 234, 320, BROWN1, 5);
 80005ba:	49a0      	ldr	r1, [pc, #640]	; (800083c <main+0x3f4>)
 80005bc:	23a0      	movs	r3, #160	; 0xa0
 80005be:	005a      	lsls	r2, r3, #1
 80005c0:	2305      	movs	r3, #5
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	000b      	movs	r3, r1
 80005c6:	21ea      	movs	r1, #234	; 0xea
 80005c8:	2000      	movs	r0, #0
 80005ca:	f003 fef5 	bl	80043b8 <LCD_DrawHBorder>

	LCD_DrawVBorder(0, 130, 110, BROWN1, 5);
 80005ce:	4a9b      	ldr	r2, [pc, #620]	; (800083c <main+0x3f4>)
 80005d0:	2305      	movs	r3, #5
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	0013      	movs	r3, r2
 80005d6:	226e      	movs	r2, #110	; 0x6e
 80005d8:	2182      	movs	r1, #130	; 0x82
 80005da:	2000      	movs	r0, #0
 80005dc:	f003 ff2b 	bl	8004436 <LCD_DrawVBorder>
	LCD_DrawVBorder(225, 130, 110, BROWN1, 5);
 80005e0:	4a96      	ldr	r2, [pc, #600]	; (800083c <main+0x3f4>)
 80005e2:	2305      	movs	r3, #5
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	0013      	movs	r3, r2
 80005e8:	226e      	movs	r2, #110	; 0x6e
 80005ea:	2182      	movs	r1, #130	; 0x82
 80005ec:	20e1      	movs	r0, #225	; 0xe1
 80005ee:	f003 ff22 	bl	8004436 <LCD_DrawVBorder>

	//=================== || Yellow Side Data box || =================//
	LCD_SetCursor(240, 139);
 80005f2:	218b      	movs	r1, #139	; 0x8b
 80005f4:	20f0      	movs	r0, #240	; 0xf0
 80005f6:	f005 fce1 	bl	8005fbc <LCD_SetCursor>
	LCD_SetTextSize(2);
 80005fa:	2002      	movs	r0, #2
 80005fc:	f005 fcf4 	bl	8005fe8 <LCD_SetTextSize>
	LCD_SetTextColor(BLACK, YELLOW);
 8000600:	4b8d      	ldr	r3, [pc, #564]	; (8000838 <main+0x3f0>)
 8000602:	0019      	movs	r1, r3
 8000604:	2000      	movs	r0, #0
 8000606:	f005 fd05 	bl	8006014 <LCD_SetTextColor>
	LCD_Printf("X-AXIS");
 800060a:	4b8d      	ldr	r3, [pc, #564]	; (8000840 <main+0x3f8>)
 800060c:	0018      	movs	r0, r3
 800060e:	f005 fbd9 	bl	8005dc4 <LCD_Printf>

	//	LCD_DrawFastHLine(230, 125, 70, BLACK);
	LCD_FillRect(235, 157, 80, 25, WHITE);
 8000612:	4b85      	ldr	r3, [pc, #532]	; (8000828 <main+0x3e0>)
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2319      	movs	r3, #25
 8000618:	2250      	movs	r2, #80	; 0x50
 800061a:	219d      	movs	r1, #157	; 0x9d
 800061c:	20eb      	movs	r0, #235	; 0xeb
 800061e:	f005 f865 	bl	80056ec <LCD_FillRect>

	LCD_SetCursor(240, 188);
 8000622:	21bc      	movs	r1, #188	; 0xbc
 8000624:	20f0      	movs	r0, #240	; 0xf0
 8000626:	f005 fcc9 	bl	8005fbc <LCD_SetCursor>
	//	LCD_SetTextSize(2);
	LCD_SetTextColor(BLACK, YELLOW);
 800062a:	4b83      	ldr	r3, [pc, #524]	; (8000838 <main+0x3f0>)
 800062c:	0019      	movs	r1, r3
 800062e:	2000      	movs	r0, #0
 8000630:	f005 fcf0 	bl	8006014 <LCD_SetTextColor>
	LCD_Printf("Y-AXIS");
 8000634:	4b83      	ldr	r3, [pc, #524]	; (8000844 <main+0x3fc>)
 8000636:	0018      	movs	r0, r3
 8000638:	f005 fbc4 	bl	8005dc4 <LCD_Printf>
	LCD_FillRect(235, 207, 80, 25, WHITE);
 800063c:	4b7a      	ldr	r3, [pc, #488]	; (8000828 <main+0x3e0>)
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2319      	movs	r3, #25
 8000642:	2250      	movs	r2, #80	; 0x50
 8000644:	21cf      	movs	r1, #207	; 0xcf
 8000646:	20eb      	movs	r0, #235	; 0xeb
 8000648:	f005 f850 	bl	80056ec <LCD_FillRect>

	LCD_SetCursor(240, 162);
 800064c:	21a2      	movs	r1, #162	; 0xa2
 800064e:	20f0      	movs	r0, #240	; 0xf0
 8000650:	f005 fcb4 	bl	8005fbc <LCD_SetCursor>
	LCD_SetTextColor(BLACK, WHITE);
 8000654:	4b74      	ldr	r3, [pc, #464]	; (8000828 <main+0x3e0>)
 8000656:	0019      	movs	r1, r3
 8000658:	2000      	movs	r0, #0
 800065a:	f005 fcdb 	bl	8006014 <LCD_SetTextColor>
	LCD_Printf("Value1");
 800065e:	4b7a      	ldr	r3, [pc, #488]	; (8000848 <main+0x400>)
 8000660:	0018      	movs	r0, r3
 8000662:	f005 fbaf 	bl	8005dc4 <LCD_Printf>
	LCD_SetCursor(240, 212);
 8000666:	21d4      	movs	r1, #212	; 0xd4
 8000668:	20f0      	movs	r0, #240	; 0xf0
 800066a:	f005 fca7 	bl	8005fbc <LCD_SetCursor>
	LCD_SetTextColor(BLACK, WHITE);
 800066e:	4b6e      	ldr	r3, [pc, #440]	; (8000828 <main+0x3e0>)
 8000670:	0019      	movs	r1, r3
 8000672:	2000      	movs	r0, #0
 8000674:	f005 fcce 	bl	8006014 <LCD_SetTextColor>
	LCD_Printf("Value2");
 8000678:	4b74      	ldr	r3, [pc, #464]	; (800084c <main+0x404>)
 800067a:	0018      	movs	r0, r3
 800067c:	f005 fba2 	bl	8005dc4 <LCD_Printf>
	//=============================================================//

	//=================== || Graphs || =================//
	LCD_DrawRect(20, 150, 190, 20, BLACK);
 8000680:	2300      	movs	r3, #0
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2314      	movs	r3, #20
 8000686:	22be      	movs	r2, #190	; 0xbe
 8000688:	2196      	movs	r1, #150	; 0x96
 800068a:	2014      	movs	r0, #20
 800068c:	f004 fab5 	bl	8004bfa <LCD_DrawRect>
	LCD_DrawRect(20, 190, 190, 20, BLACK);
 8000690:	2300      	movs	r3, #0
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2314      	movs	r3, #20
 8000696:	22be      	movs	r2, #190	; 0xbe
 8000698:	21be      	movs	r1, #190	; 0xbe
 800069a:	2014      	movs	r0, #20
 800069c:	f004 faad 	bl	8004bfa <LCD_DrawRect>

	LCD_DrawFastVLine(190, 150, 20, RED);
 80006a0:	23f8      	movs	r3, #248	; 0xf8
 80006a2:	021b      	lsls	r3, r3, #8
 80006a4:	2214      	movs	r2, #20
 80006a6:	2196      	movs	r1, #150	; 0x96
 80006a8:	20be      	movs	r0, #190	; 0xbe
 80006aa:	f004 fa77 	bl	8004b9c <LCD_DrawFastVLine>
	LCD_DrawFastVLine(190, 190, 20, RED);
 80006ae:	23f8      	movs	r3, #248	; 0xf8
 80006b0:	021b      	lsls	r3, r3, #8
 80006b2:	2214      	movs	r2, #20
 80006b4:	21be      	movs	r1, #190	; 0xbe
 80006b6:	20be      	movs	r0, #190	; 0xbe
 80006b8:	f004 fa70 	bl	8004b9c <LCD_DrawFastVLine>

	LCD_DrawFastVLine(150, 150, 20, ORANGE);
 80006bc:	4b64      	ldr	r3, [pc, #400]	; (8000850 <main+0x408>)
 80006be:	2214      	movs	r2, #20
 80006c0:	2196      	movs	r1, #150	; 0x96
 80006c2:	2096      	movs	r0, #150	; 0x96
 80006c4:	f004 fa6a 	bl	8004b9c <LCD_DrawFastVLine>

	LCD_DrawFastVLine(150, 190, 20, ORANGE);
 80006c8:	4b61      	ldr	r3, [pc, #388]	; (8000850 <main+0x408>)
 80006ca:	2214      	movs	r2, #20
 80006cc:	21be      	movs	r1, #190	; 0xbe
 80006ce:	2096      	movs	r0, #150	; 0x96
 80006d0:	f004 fa64 	bl	8004b9c <LCD_DrawFastVLine>

	//	LCD_DrawFastVLine(116, 150, 20, PINK);
	//	LCD_DrawFastVLine(116, 190, 20, PINK);

	LCD_DrawFastVLine(115, 150, 20, BLACK);
 80006d4:	2300      	movs	r3, #0
 80006d6:	2214      	movs	r2, #20
 80006d8:	2196      	movs	r1, #150	; 0x96
 80006da:	2073      	movs	r0, #115	; 0x73
 80006dc:	f004 fa5e 	bl	8004b9c <LCD_DrawFastVLine>
	LCD_DrawFastVLine(115, 190, 20, BLACK);
 80006e0:	2300      	movs	r3, #0
 80006e2:	2214      	movs	r2, #20
 80006e4:	21be      	movs	r1, #190	; 0xbe
 80006e6:	2073      	movs	r0, #115	; 0x73
 80006e8:	f004 fa58 	bl	8004b9c <LCD_DrawFastVLine>
	LCD_DrawFastVLine(116, 150, 20, BLACK);
 80006ec:	2300      	movs	r3, #0
 80006ee:	2214      	movs	r2, #20
 80006f0:	2196      	movs	r1, #150	; 0x96
 80006f2:	2074      	movs	r0, #116	; 0x74
 80006f4:	f004 fa52 	bl	8004b9c <LCD_DrawFastVLine>
	LCD_DrawFastVLine(116, 190, 20, BLACK);
 80006f8:	2300      	movs	r3, #0
 80006fa:	2214      	movs	r2, #20
 80006fc:	21be      	movs	r1, #190	; 0xbe
 80006fe:	2074      	movs	r0, #116	; 0x74
 8000700:	f004 fa4c 	bl	8004b9c <LCD_DrawFastVLine>

	//	LCD_DrawFastVLine(114, 150, 20, GREEN);
	//	LCD_DrawFastVLine(114, 190, 20, GREEN);

	LCD_DrawFastVLine(80, 150, 20, CYAN);
 8000704:	4b53      	ldr	r3, [pc, #332]	; (8000854 <main+0x40c>)
 8000706:	2214      	movs	r2, #20
 8000708:	2196      	movs	r1, #150	; 0x96
 800070a:	2050      	movs	r0, #80	; 0x50
 800070c:	f004 fa46 	bl	8004b9c <LCD_DrawFastVLine>
	LCD_DrawFastVLine(80, 190, 20, CYAN);
 8000710:	4b50      	ldr	r3, [pc, #320]	; (8000854 <main+0x40c>)
 8000712:	2214      	movs	r2, #20
 8000714:	21be      	movs	r1, #190	; 0xbe
 8000716:	2050      	movs	r0, #80	; 0x50
 8000718:	f004 fa40 	bl	8004b9c <LCD_DrawFastVLine>

	LCD_DrawFastVLine(40, 150, 20, NAVY);
 800071c:	230f      	movs	r3, #15
 800071e:	2214      	movs	r2, #20
 8000720:	2196      	movs	r1, #150	; 0x96
 8000722:	2028      	movs	r0, #40	; 0x28
 8000724:	f004 fa3a 	bl	8004b9c <LCD_DrawFastVLine>
	LCD_DrawFastVLine(40, 190, 20, NAVY);
 8000728:	230f      	movs	r3, #15
 800072a:	2214      	movs	r2, #20
 800072c:	21be      	movs	r1, #190	; 0xbe
 800072e:	2028      	movs	r0, #40	; 0x28
 8000730:	f004 fa34 	bl	8004b9c <LCD_DrawFastVLine>

	//===================================================//
	//===================================================////

	HAL_Delay(1000);
 8000734:	23fa      	movs	r3, #250	; 0xfa
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	0018      	movs	r0, r3
 800073a:	f000 fb51 	bl	8000de0 <HAL_Delay>

	sd_mount();
 800073e:	f003 fd1f 	bl	8004180 <sd_mount>
	sd_space();
 8000742:	f003 fd47 	bl	80041d4 <sd_space>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of myQueue01 */
	osMessageQDef(myQueue01, 16, uint16_t);
 8000746:	2190      	movs	r1, #144	; 0x90
 8000748:	187b      	adds	r3, r7, r1
 800074a:	4a43      	ldr	r2, [pc, #268]	; (8000858 <main+0x410>)
 800074c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800074e:	c331      	stmia	r3!, {r0, r4, r5}
 8000750:	6812      	ldr	r2, [r2, #0]
 8000752:	601a      	str	r2, [r3, #0]
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2100      	movs	r1, #0
 8000758:	0018      	movs	r0, r3
 800075a:	f007 f97e 	bl	8007a5a <osMessageCreate>
 800075e:	0002      	movs	r2, r0
 8000760:	4b3e      	ldr	r3, [pc, #248]	; (800085c <main+0x414>)
 8000762:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000764:	2174      	movs	r1, #116	; 0x74
 8000766:	187b      	adds	r3, r7, r1
 8000768:	4a3d      	ldr	r2, [pc, #244]	; (8000860 <main+0x418>)
 800076a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800076c:	c331      	stmia	r3!, {r0, r4, r5}
 800076e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000770:	c331      	stmia	r3!, {r0, r4, r5}
 8000772:	6812      	ldr	r2, [r2, #0]
 8000774:	601a      	str	r2, [r3, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2100      	movs	r1, #0
 800077a:	0018      	movs	r0, r3
 800077c:	f007 f849 	bl	8007812 <osThreadCreate>
 8000780:	0002      	movs	r2, r0
 8000782:	4b38      	ldr	r3, [pc, #224]	; (8000864 <main+0x41c>)
 8000784:	601a      	str	r2, [r3, #0]

	/* definition and creation of myTask02 */
	osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8000786:	2158      	movs	r1, #88	; 0x58
 8000788:	187b      	adds	r3, r7, r1
 800078a:	4a37      	ldr	r2, [pc, #220]	; (8000868 <main+0x420>)
 800078c:	ca31      	ldmia	r2!, {r0, r4, r5}
 800078e:	c331      	stmia	r3!, {r0, r4, r5}
 8000790:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000792:	c331      	stmia	r3!, {r0, r4, r5}
 8000794:	6812      	ldr	r2, [r2, #0]
 8000796:	601a      	str	r2, [r3, #0]
	myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2100      	movs	r1, #0
 800079c:	0018      	movs	r0, r3
 800079e:	f007 f838 	bl	8007812 <osThreadCreate>
 80007a2:	0002      	movs	r2, r0
 80007a4:	4b31      	ldr	r3, [pc, #196]	; (800086c <main+0x424>)
 80007a6:	601a      	str	r2, [r3, #0]

	/* definition and creation of myTask03 */
	osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 80007a8:	213c      	movs	r1, #60	; 0x3c
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	4a30      	ldr	r2, [pc, #192]	; (8000870 <main+0x428>)
 80007ae:	ca31      	ldmia	r2!, {r0, r4, r5}
 80007b0:	c331      	stmia	r3!, {r0, r4, r5}
 80007b2:	ca31      	ldmia	r2!, {r0, r4, r5}
 80007b4:	c331      	stmia	r3!, {r0, r4, r5}
 80007b6:	6812      	ldr	r2, [r2, #0]
 80007b8:	601a      	str	r2, [r3, #0]
	myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2100      	movs	r1, #0
 80007be:	0018      	movs	r0, r3
 80007c0:	f007 f827 	bl	8007812 <osThreadCreate>
 80007c4:	0002      	movs	r2, r0
 80007c6:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <main+0x42c>)
 80007c8:	601a      	str	r2, [r3, #0]

	/* definition and creation of myTask04 */
	osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 80007ca:	2120      	movs	r1, #32
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	4a2a      	ldr	r2, [pc, #168]	; (8000878 <main+0x430>)
 80007d0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80007d2:	c331      	stmia	r3!, {r0, r4, r5}
 80007d4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80007d6:	c331      	stmia	r3!, {r0, r4, r5}
 80007d8:	6812      	ldr	r2, [r2, #0]
 80007da:	601a      	str	r2, [r3, #0]
	myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2100      	movs	r1, #0
 80007e0:	0018      	movs	r0, r3
 80007e2:	f007 f816 	bl	8007812 <osThreadCreate>
 80007e6:	0002      	movs	r2, r0
 80007e8:	4b24      	ldr	r3, [pc, #144]	; (800087c <main+0x434>)
 80007ea:	601a      	str	r2, [r3, #0]

	/* definition and creation of myTask05 */
	osThreadDef(myTask05, StartTask05, osPriorityIdle, 0, 128);
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	4a24      	ldr	r2, [pc, #144]	; (8000880 <main+0x438>)
 80007f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007f2:	c313      	stmia	r3!, {r0, r1, r4}
 80007f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007f6:	c313      	stmia	r3!, {r0, r1, r4}
 80007f8:	6812      	ldr	r2, [r2, #0]
 80007fa:	601a      	str	r2, [r3, #0]
	myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2100      	movs	r1, #0
 8000800:	0018      	movs	r0, r3
 8000802:	f007 f806 	bl	8007812 <osThreadCreate>
 8000806:	0002      	movs	r2, r0
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <main+0x43c>)
 800080a:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800080c:	f006 fff9 	bl	8007802 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {
 8000810:	e7fe      	b.n	8000810 <main+0x3c8>
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	48000400 	.word	0x48000400
 8000818:	40004400 	.word	0x40004400
 800081c:	0000cdb6 	.word	0x0000cdb6
 8000820:	0800a484 	.word	0x0800a484
 8000824:	0800a494 	.word	0x0800a494
 8000828:	0000ffff 	.word	0x0000ffff
 800082c:	0000fadf 	.word	0x0000fadf
 8000830:	0800a49c 	.word	0x0800a49c
 8000834:	0800a4a4 	.word	0x0800a4a4
 8000838:	0000ffe0 	.word	0x0000ffe0
 800083c:	00007083 	.word	0x00007083
 8000840:	0800a4ac 	.word	0x0800a4ac
 8000844:	0800a4b4 	.word	0x0800a4b4
 8000848:	0800a4bc 	.word	0x0800a4bc
 800084c:	0800a4c4 	.word	0x0800a4c4
 8000850:	0000fc80 	.word	0x0000fc80
 8000854:	000007ff 	.word	0x000007ff
 8000858:	0800a4cc 	.word	0x0800a4cc
 800085c:	20000414 	.word	0x20000414
 8000860:	0800a4dc 	.word	0x0800a4dc
 8000864:	20000400 	.word	0x20000400
 8000868:	0800a4f8 	.word	0x0800a4f8
 800086c:	20000404 	.word	0x20000404
 8000870:	0800a514 	.word	0x0800a514
 8000874:	20000408 	.word	0x20000408
 8000878:	0800a530 	.word	0x0800a530
 800087c:	2000040c 	.word	0x2000040c
 8000880:	0800a54c 	.word	0x0800a54c
 8000884:	20000410 	.word	0x20000410

08000888 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_SPI1_Init+0x74>)
 800088e:	4a1c      	ldr	r2, [pc, #112]	; (8000900 <MX_SPI1_Init+0x78>)
 8000890:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_SPI1_Init+0x74>)
 8000894:	2282      	movs	r2, #130	; 0x82
 8000896:	0052      	lsls	r2, r2, #1
 8000898:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_SPI1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a0:	4b16      	ldr	r3, [pc, #88]	; (80008fc <MX_SPI1_Init+0x74>)
 80008a2:	22e0      	movs	r2, #224	; 0xe0
 80008a4:	00d2      	lsls	r2, r2, #3
 80008a6:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_SPI1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_SPI1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_SPI1_Init+0x74>)
 80008b6:	2280      	movs	r2, #128	; 0x80
 80008b8:	0092      	lsls	r2, r2, #2
 80008ba:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_SPI1_Init+0x74>)
 80008be:	2230      	movs	r2, #48	; 0x30
 80008c0:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_SPI1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_SPI1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_SPI1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_SPI1_Init+0x74>)
 80008d6:	2207      	movs	r2, #7
 80008d8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_SPI1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_SPI1_Init+0x74>)
 80008e2:	2208      	movs	r2, #8
 80008e4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <MX_SPI1_Init+0x74>)
 80008e8:	0018      	movs	r0, r3
 80008ea:	f001 f957 	bl	8001b9c <HAL_SPI_Init>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <MX_SPI1_Init+0x6e>
		Error_Handler();
 80008f2:	f000 f8cd 	bl	8000a90 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2000039c 	.word	0x2000039c
 8000900:	40013000 	.word	0x40013000

08000904 <USART2_IRQHandler>:
 * @retval None
 */

/* USER CODE BEGIN 4 */

void USART2_IRQHandler() {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
	uint8_t chr;
//	USART_WRITE(USART2, "Hello\n", 6);
	if (USART2->ISR & USART_ISR_RXNE) {
 800090a:	4b1d      	ldr	r3, [pc, #116]	; (8000980 <USART2_IRQHandler+0x7c>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	2220      	movs	r2, #32
 8000910:	4013      	ands	r3, r2
 8000912:	d031      	beq.n	8000978 <USART2_IRQHandler+0x74>
		chr = USART2->RDR;
 8000914:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <USART2_IRQHandler+0x7c>)
 8000916:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000918:	b29a      	uxth	r2, r3
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	701a      	strb	r2, [r3, #0]
		if (chr == '\n' || idx > 19) {
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b0a      	cmp	r3, #10
 8000924:	d003      	beq.n	800092e <USART2_IRQHandler+0x2a>
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <USART2_IRQHandler+0x80>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	2b13      	cmp	r3, #19
 800092c:	d917      	bls.n	800095e <USART2_IRQHandler+0x5a>
			USART_WRITE(USART2, chArray, idx);
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <USART2_IRQHandler+0x80>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	001a      	movs	r2, r3
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <USART2_IRQHandler+0x84>)
 8000936:	4812      	ldr	r0, [pc, #72]	; (8000980 <USART2_IRQHandler+0x7c>)
 8000938:	0019      	movs	r1, r3
 800093a:	f003 fb99 	bl	8004070 <USART_WRITE>
			USART_WRITE(USART2, '\n', 1);
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <USART2_IRQHandler+0x7c>)
 8000940:	2201      	movs	r2, #1
 8000942:	210a      	movs	r1, #10
 8000944:	0018      	movs	r0, r3
 8000946:	f003 fb93 	bl	8004070 <USART_WRITE>
//			LCD_SetCursor(20, 20);
//			LCD_Printf(chArray);
			idx = 0;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <USART2_IRQHandler+0x80>)
 800094c:	2200      	movs	r2, #0
 800094e:	801a      	strh	r2, [r3, #0]
			memset(chArray, 0, 20);
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <USART2_IRQHandler+0x84>)
 8000952:	2214      	movs	r2, #20
 8000954:	2100      	movs	r1, #0
 8000956:	0018      	movs	r0, r3
 8000958:	f009 f855 	bl	8009a06 <memset>
		} else {
			chArray[idx] = chr;
			idx++;
		}
	}
}
 800095c:	e00c      	b.n	8000978 <USART2_IRQHandler+0x74>
			chArray[idx] = chr;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <USART2_IRQHandler+0x80>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	0019      	movs	r1, r3
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <USART2_IRQHandler+0x84>)
 8000966:	1dfa      	adds	r2, r7, #7
 8000968:	7812      	ldrb	r2, [r2, #0]
 800096a:	545a      	strb	r2, [r3, r1]
			idx++;
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <USART2_IRQHandler+0x80>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	b29a      	uxth	r2, r3
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <USART2_IRQHandler+0x80>)
 8000976:	801a      	strh	r2, [r3, #0]
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b002      	add	sp, #8
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40004400 	.word	0x40004400
 8000984:	20000430 	.word	0x20000430
 8000988:	2000041c 	.word	0x2000041c

0800098c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */

	for (;;) {
		x = TOUCH_VAL('x');
 8000994:	2078      	movs	r0, #120	; 0x78
 8000996:	f005 fe55 	bl	8006644 <TOUCH_VAL>
 800099a:	0003      	movs	r3, r0
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <StartDefaultTask+0x2c>)
 80009a0:	801a      	strh	r2, [r3, #0]
		y = TOUCH_VAL('y');
 80009a2:	2079      	movs	r0, #121	; 0x79
 80009a4:	f005 fe4e 	bl	8006644 <TOUCH_VAL>
 80009a8:	0003      	movs	r3, r0
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <StartDefaultTask+0x30>)
 80009ae:	801a      	strh	r2, [r3, #0]
//		print("%d, %d\n", TOUCH_VAL('x'), TOUCH_VAL('y'));
		osDelay(10);
 80009b0:	200a      	movs	r0, #10
 80009b2:	f006 ff7b 	bl	80078ac <osDelay>
	for (;;) {
 80009b6:	e7ed      	b.n	8000994 <StartDefaultTask+0x8>
 80009b8:	20000418 	.word	0x20000418
 80009bc:	2000041a 	.word	0x2000041a

080009c0 <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const *argument) {
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
//	displayPicGen("moon.bmp", 60, 160);
	uint16_t x = 0;
 80009c8:	230e      	movs	r3, #14
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	2200      	movs	r2, #0
 80009ce:	801a      	strh	r2, [r3, #0]
	LCD_SetCursor(20, 20);
 80009d0:	2114      	movs	r1, #20
 80009d2:	2014      	movs	r0, #20
 80009d4:	f005 faf2 	bl	8005fbc <LCD_SetCursor>
	LCD_SetTextSize(2);
 80009d8:	2002      	movs	r0, #2
 80009da:	f005 fb05 	bl	8005fe8 <LCD_SetTextSize>
	LCD_SetTextColor(GREEN, BLACK);
 80009de:	23fc      	movs	r3, #252	; 0xfc
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	2100      	movs	r1, #0
 80009e4:	0018      	movs	r0, r3
 80009e6:	f005 fb15 	bl	8006014 <LCD_SetTextColor>
	LCD_Printf("..$          ");
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <StartTask02+0x74>)
 80009ec:	0018      	movs	r0, r3
 80009ee:	f005 f9e9 	bl	8005dc4 <LCD_Printf>
	for (;;) {

		LCD_SetCursor(20, 20);
 80009f2:	2114      	movs	r1, #20
 80009f4:	2014      	movs	r0, #20
 80009f6:	f005 fae1 	bl	8005fbc <LCD_SetCursor>
		LCD_SetTextSize(2);
 80009fa:	2002      	movs	r0, #2
 80009fc:	f005 faf4 	bl	8005fe8 <LCD_SetTextSize>
		LCD_SetTextColor(GREEN, BLACK);
 8000a00:	23fc      	movs	r3, #252	; 0xfc
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	2100      	movs	r1, #0
 8000a06:	0018      	movs	r0, r3
 8000a08:	f005 fb04 	bl	8006014 <LCD_SetTextColor>
		LCD_Printf("..$%d", x);
 8000a0c:	240e      	movs	r4, #14
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	881a      	ldrh	r2, [r3, #0]
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <StartTask02+0x78>)
 8000a14:	0011      	movs	r1, r2
 8000a16:	0018      	movs	r0, r3
 8000a18:	f005 f9d4 	bl	8005dc4 <LCD_Printf>
		x++;
 8000a1c:	0021      	movs	r1, r4
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	881a      	ldrh	r2, [r3, #0]
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	3201      	adds	r2, #1
 8000a26:	801a      	strh	r2, [r3, #0]
		osDelay(500);
 8000a28:	23fa      	movs	r3, #250	; 0xfa
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f006 ff3d 	bl	80078ac <osDelay>
		LCD_SetCursor(20, 20);
 8000a32:	e7de      	b.n	80009f2 <StartTask02+0x32>
 8000a34:	0800a568 	.word	0x0800a568
 8000a38:	0800a578 	.word	0x0800a578

08000a3c <StartTask03>:
 * @brief Function implementing the myTask03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const *argument) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f006 ff31 	bl	80078ac <osDelay>
 8000a4a:	e7fb      	b.n	8000a44 <StartTask03+0x8>

08000a4c <StartTask04>:
 * @brief Function implementing the myTask04 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void const *argument) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask04 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000a54:	2001      	movs	r0, #1
 8000a56:	f006 ff29 	bl	80078ac <osDelay>
 8000a5a:	e7fb      	b.n	8000a54 <StartTask04+0x8>

08000a5c <StartTask05>:
 * @brief Function implementing the myTask05 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask05 */
void StartTask05(void const *argument) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask05 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000a64:	2001      	movs	r0, #1
 8000a66:	f006 ff21 	bl	80078ac <osDelay>
 8000a6a:	e7fb      	b.n	8000a64 <StartTask05+0x8>

08000a6c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d101      	bne.n	8000a82 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000a7e:	f000 f993 	bl	8000da8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	40001400 	.word	0x40001400

08000a90 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_MspInit+0x50>)
 8000aa4:	699a      	ldr	r2, [r3, #24]
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_MspInit+0x50>)
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	619a      	str	r2, [r3, #24]
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_MspInit+0x50>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <HAL_MspInit+0x50>)
 8000abc:	69da      	ldr	r2, [r3, #28]
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_MspInit+0x50>)
 8000ac0:	2180      	movs	r1, #128	; 0x80
 8000ac2:	0549      	lsls	r1, r1, #21
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	61da      	str	r2, [r3, #28]
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_MspInit+0x50>)
 8000aca:	69da      	ldr	r2, [r3, #28]
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	055b      	lsls	r3, r3, #21
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	425b      	negs	r3, r3
 8000ada:	2200      	movs	r2, #0
 8000adc:	2103      	movs	r1, #3
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f000 fa2a 	bl	8000f38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b002      	add	sp, #8
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b08b      	sub	sp, #44	; 0x2c
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	2414      	movs	r4, #20
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	0018      	movs	r0, r3
 8000afe:	2314      	movs	r3, #20
 8000b00:	001a      	movs	r2, r3
 8000b02:	2100      	movs	r1, #0
 8000b04:	f008 ff7f 	bl	8009a06 <memset>
  if(hspi->Instance==SPI1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a1c      	ldr	r2, [pc, #112]	; (8000b80 <HAL_SPI_MspInit+0x90>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d132      	bne.n	8000b78 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_SPI_MspInit+0x94>)
 8000b14:	699a      	ldr	r2, [r3, #24]
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <HAL_SPI_MspInit+0x94>)
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	0149      	lsls	r1, r1, #5
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	619a      	str	r2, [r3, #24]
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <HAL_SPI_MspInit+0x94>)
 8000b22:	699a      	ldr	r2, [r3, #24]
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	015b      	lsls	r3, r3, #5
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_SPI_MspInit+0x94>)
 8000b30:	695a      	ldr	r2, [r3, #20]
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_SPI_MspInit+0x94>)
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	0289      	lsls	r1, r1, #10
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	615a      	str	r2, [r3, #20]
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_SPI_MspInit+0x94>)
 8000b3e:	695a      	ldr	r2, [r3, #20]
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	029b      	lsls	r3, r3, #10
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b4a:	0021      	movs	r1, r4
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	22e0      	movs	r2, #224	; 0xe0
 8000b50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	2202      	movs	r2, #2
 8000b56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2203      	movs	r2, #3
 8000b62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	187a      	adds	r2, r7, r1
 8000b6c:	2390      	movs	r3, #144	; 0x90
 8000b6e:	05db      	lsls	r3, r3, #23
 8000b70:	0011      	movs	r1, r2
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 fa06 	bl	8000f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b00b      	add	sp, #44	; 0x2c
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	40013000 	.word	0x40013000
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b5b0      	push	{r4, r5, r7, lr}
 8000b8a:	b08c      	sub	sp, #48	; 0x30
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000b98:	4b37      	ldr	r3, [pc, #220]	; (8000c78 <HAL_InitTick+0xf0>)
 8000b9a:	69da      	ldr	r2, [r3, #28]
 8000b9c:	4b36      	ldr	r3, [pc, #216]	; (8000c78 <HAL_InitTick+0xf0>)
 8000b9e:	2120      	movs	r1, #32
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	61da      	str	r2, [r3, #28]
 8000ba4:	4b34      	ldr	r3, [pc, #208]	; (8000c78 <HAL_InitTick+0xf0>)
 8000ba6:	69db      	ldr	r3, [r3, #28]
 8000ba8:	2220      	movs	r2, #32
 8000baa:	4013      	ands	r3, r2
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	18fa      	adds	r2, r7, r3
 8000bb4:	2410      	movs	r4, #16
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	0011      	movs	r1, r2
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f000 ffc4 	bl	8001b48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d104      	bne.n	8000bd6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bcc:	f000 ffa6 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bd4:	e004      	b.n	8000be0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bd6:	f000 ffa1 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 8000bda:	0003      	movs	r3, r0
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be2:	4926      	ldr	r1, [pc, #152]	; (8000c7c <HAL_InitTick+0xf4>)
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff faa1 	bl	800012c <__udivsi3>
 8000bea:	0003      	movs	r3, r0
 8000bec:	3b01      	subs	r3, #1
 8000bee:	623b      	str	r3, [r7, #32]

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000bf0:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <HAL_InitTick+0xf8>)
 8000bf2:	4a24      	ldr	r2, [pc, #144]	; (8000c84 <HAL_InitTick+0xfc>)
 8000bf4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000bf6:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <HAL_InitTick+0xf8>)
 8000bf8:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <HAL_InitTick+0x100>)
 8000bfa:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000bfc:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <HAL_InitTick+0xf8>)
 8000bfe:	6a3a      	ldr	r2, [r7, #32]
 8000c00:	605a      	str	r2, [r3, #4]
  htim7.Init.ClockDivision = 0;
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <HAL_InitTick+0xf8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <HAL_InitTick+0xf8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <HAL_InitTick+0xf8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000c14:	252b      	movs	r5, #43	; 0x2b
 8000c16:	197c      	adds	r4, r7, r5
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <HAL_InitTick+0xf8>)
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f001 fbbe 	bl	800239c <HAL_TIM_Base_Init>
 8000c20:	0003      	movs	r3, r0
 8000c22:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000c24:	197b      	adds	r3, r7, r5
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d11e      	bne.n	8000c6a <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000c2c:	197c      	adds	r4, r7, r5
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_InitTick+0xf8>)
 8000c30:	0018      	movs	r0, r3
 8000c32:	f001 fc0b 	bl	800244c <HAL_TIM_Base_Start_IT>
 8000c36:	0003      	movs	r3, r0
 8000c38:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000c3a:	197b      	adds	r3, r7, r5
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d113      	bne.n	8000c6a <HAL_InitTick+0xe2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c42:	2012      	movs	r0, #18
 8000c44:	f000 f98d 	bl	8000f62 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d809      	bhi.n	8000c62 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	0019      	movs	r1, r3
 8000c54:	2012      	movs	r0, #18
 8000c56:	f000 f96f 	bl	8000f38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_InitTick+0x104>)
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	e003      	b.n	8000c6a <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000c62:	232b      	movs	r3, #43	; 0x2b
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000c6a:	232b      	movs	r3, #43	; 0x2b
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	781b      	ldrb	r3, [r3, #0]
}
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b00c      	add	sp, #48	; 0x30
 8000c76:	bdb0      	pop	{r4, r5, r7, pc}
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	000f4240 	.word	0x000f4240
 8000c80:	20000434 	.word	0x20000434
 8000c84:	40001400 	.word	0x40001400
 8000c88:	000003e7 	.word	0x000003e7
 8000c8c:	20000004 	.word	0x20000004

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <TIM7_IRQHandler+0x14>)
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f001 fc1e 	bl	80024e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	20000434 	.word	0x20000434

08000cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cbc:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <_sbrk+0x5c>)
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <_sbrk+0x60>)
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d102      	bne.n	8000cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <_sbrk+0x64>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <_sbrk+0x68>)
 8000cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	18d3      	adds	r3, r2, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d207      	bcs.n	8000cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce4:	f008 fe5a 	bl	800999c <__errno>
 8000ce8:	0003      	movs	r3, r0
 8000cea:	220c      	movs	r2, #12
 8000cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	425b      	negs	r3, r3
 8000cf2:	e009      	b.n	8000d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	18d2      	adds	r2, r2, r3
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <_sbrk+0x64>)
 8000d04:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d06:	68fb      	ldr	r3, [r7, #12]
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b006      	add	sp, #24
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20004000 	.word	0x20004000
 8000d14:	00000400 	.word	0x00000400
 8000d18:	2000047c 	.word	0x2000047c
 8000d1c:	20001ad8 	.word	0x20001ad8

08000d20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d30:	480d      	ldr	r0, [pc, #52]	; (8000d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d32:	490e      	ldr	r1, [pc, #56]	; (8000d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d34:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <LoopForever+0xe>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d48:	4c0b      	ldr	r4, [pc, #44]	; (8000d78 <LoopForever+0x16>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d56:	f7ff ffe3 	bl	8000d20 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d5a:	f008 fe25 	bl	80099a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d5e:	f7ff fb73 	bl	8000448 <main>

08000d62 <LoopForever>:

LoopForever:
    b LoopForever
 8000d62:	e7fe      	b.n	8000d62 <LoopForever>
  ldr   r0, =_estack
 8000d64:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8000d70:	0800adc8 	.word	0x0800adc8
  ldr r2, =_sbss
 8000d74:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8000d78:	20001ad8 	.word	0x20001ad8

08000d7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC1_IRQHandler>
	...

08000d80 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <HAL_Init+0x24>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_Init+0x24>)
 8000d8a:	2110      	movs	r1, #16
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f7ff fef9 	bl	8000b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d96:	f7ff fe81 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	40022000 	.word	0x40022000

08000da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <HAL_IncTick+0x1c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	001a      	movs	r2, r3
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_IncTick+0x20>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	18d2      	adds	r2, r2, r3
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dba:	601a      	str	r2, [r3, #0]
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	20000480 	.word	0x20000480

08000dcc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd0:	4b02      	ldr	r3, [pc, #8]	; (8000ddc <HAL_GetTick+0x10>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
}
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	20000480 	.word	0x20000480

08000de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff fff0 	bl	8000dcc <HAL_GetTick>
 8000dec:	0003      	movs	r3, r0
 8000dee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	3301      	adds	r3, #1
 8000df8:	d005      	beq.n	8000e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	; (8000e24 <HAL_Delay+0x44>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	001a      	movs	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	189b      	adds	r3, r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	f7ff ffe0 	bl	8000dcc <HAL_GetTick>
 8000e0c:	0002      	movs	r2, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8f7      	bhi.n	8000e08 <HAL_Delay+0x28>
  {
  }
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b004      	add	sp, #16
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	20000008 	.word	0x20000008

08000e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	0002      	movs	r2, r0
 8000e30:	1dfb      	adds	r3, r7, #7
 8000e32:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	1dfb      	adds	r3, r7, #7
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b7f      	cmp	r3, #127	; 0x7f
 8000e3a:	d809      	bhi.n	8000e50 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	001a      	movs	r2, r3
 8000e42:	231f      	movs	r3, #31
 8000e44:	401a      	ands	r2, r3
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__NVIC_EnableIRQ+0x30>)
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4091      	lsls	r1, r2
 8000e4c:	000a      	movs	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
  }
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b002      	add	sp, #8
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	0002      	movs	r2, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e70:	d828      	bhi.n	8000ec4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e72:	4a2f      	ldr	r2, [pc, #188]	; (8000f30 <__NVIC_SetPriority+0xd4>)
 8000e74:	1dfb      	adds	r3, r7, #7
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	089b      	lsrs	r3, r3, #2
 8000e7c:	33c0      	adds	r3, #192	; 0xc0
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	589b      	ldr	r3, [r3, r2]
 8000e82:	1dfa      	adds	r2, r7, #7
 8000e84:	7812      	ldrb	r2, [r2, #0]
 8000e86:	0011      	movs	r1, r2
 8000e88:	2203      	movs	r2, #3
 8000e8a:	400a      	ands	r2, r1
 8000e8c:	00d2      	lsls	r2, r2, #3
 8000e8e:	21ff      	movs	r1, #255	; 0xff
 8000e90:	4091      	lsls	r1, r2
 8000e92:	000a      	movs	r2, r1
 8000e94:	43d2      	mvns	r2, r2
 8000e96:	401a      	ands	r2, r3
 8000e98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	019b      	lsls	r3, r3, #6
 8000e9e:	22ff      	movs	r2, #255	; 0xff
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	4003      	ands	r3, r0
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb0:	481f      	ldr	r0, [pc, #124]	; (8000f30 <__NVIC_SetPriority+0xd4>)
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	33c0      	adds	r3, #192	; 0xc0
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ec2:	e031      	b.n	8000f28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ec4:	4a1b      	ldr	r2, [pc, #108]	; (8000f34 <__NVIC_SetPriority+0xd8>)
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	0019      	movs	r1, r3
 8000ecc:	230f      	movs	r3, #15
 8000ece:	400b      	ands	r3, r1
 8000ed0:	3b08      	subs	r3, #8
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3306      	adds	r3, #6
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	18d3      	adds	r3, r2, r3
 8000eda:	3304      	adds	r3, #4
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	1dfa      	adds	r2, r7, #7
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	400a      	ands	r2, r1
 8000ee8:	00d2      	lsls	r2, r2, #3
 8000eea:	21ff      	movs	r1, #255	; 0xff
 8000eec:	4091      	lsls	r1, r2
 8000eee:	000a      	movs	r2, r1
 8000ef0:	43d2      	mvns	r2, r2
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	019b      	lsls	r3, r3, #6
 8000efa:	22ff      	movs	r2, #255	; 0xff
 8000efc:	401a      	ands	r2, r3
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	0018      	movs	r0, r3
 8000f04:	2303      	movs	r3, #3
 8000f06:	4003      	ands	r3, r0
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <__NVIC_SetPriority+0xd8>)
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	001c      	movs	r4, r3
 8000f14:	230f      	movs	r3, #15
 8000f16:	4023      	ands	r3, r4
 8000f18:	3b08      	subs	r3, #8
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	3306      	adds	r3, #6
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	18c3      	adds	r3, r0, r3
 8000f24:	3304      	adds	r3, #4
 8000f26:	601a      	str	r2, [r3, #0]
}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b003      	add	sp, #12
 8000f2e:	bd90      	pop	{r4, r7, pc}
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	210f      	movs	r1, #15
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	1c02      	adds	r2, r0, #0
 8000f48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	0011      	movs	r1, r2
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff ff81 	bl	8000e5c <__NVIC_SetPriority>
}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b004      	add	sp, #16
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	0002      	movs	r2, r0
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	0018      	movs	r0, r3
 8000f76:	f7ff ff57 	bl	8000e28 <__NVIC_EnableIRQ>
}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b002      	add	sp, #8
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f92:	e14f      	b.n	8001234 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2101      	movs	r1, #1
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	000a      	movs	r2, r1
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d100      	bne.n	8000fac <HAL_GPIO_Init+0x28>
 8000faa:	e140      	b.n	800122e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d005      	beq.n	8000fc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d130      	bne.n	8001026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	409a      	lsls	r2, r3
 8000fd2:	0013      	movs	r3, r2
 8000fd4:	43da      	mvns	r2, r3
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	409a      	lsls	r2, r3
 8000fe6:	0013      	movs	r3, r2
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	43da      	mvns	r2, r3
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	091b      	lsrs	r3, r3, #4
 8001010:	2201      	movs	r2, #1
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
 8001018:	0013      	movs	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2203      	movs	r2, #3
 800102c:	4013      	ands	r3, r2
 800102e:	2b03      	cmp	r3, #3
 8001030:	d017      	beq.n	8001062 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2203      	movs	r2, #3
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	43da      	mvns	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	689a      	ldr	r2, [r3, #8]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2203      	movs	r2, #3
 8001068:	4013      	ands	r3, r2
 800106a:	2b02      	cmp	r3, #2
 800106c:	d123      	bne.n	80010b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	08da      	lsrs	r2, r3, #3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3208      	adds	r2, #8
 8001076:	0092      	lsls	r2, r2, #2
 8001078:	58d3      	ldr	r3, [r2, r3]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	2207      	movs	r2, #7
 8001080:	4013      	ands	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	43da      	mvns	r2, r3
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	691a      	ldr	r2, [r3, #16]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2107      	movs	r1, #7
 800109a:	400b      	ands	r3, r1
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	409a      	lsls	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	08da      	lsrs	r2, r3, #3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3208      	adds	r2, #8
 80010b0:	0092      	lsls	r2, r2, #2
 80010b2:	6939      	ldr	r1, [r7, #16]
 80010b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	2203      	movs	r2, #3
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	43da      	mvns	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2203      	movs	r2, #3
 80010d4:	401a      	ands	r2, r3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	23c0      	movs	r3, #192	; 0xc0
 80010f0:	029b      	lsls	r3, r3, #10
 80010f2:	4013      	ands	r3, r2
 80010f4:	d100      	bne.n	80010f8 <HAL_GPIO_Init+0x174>
 80010f6:	e09a      	b.n	800122e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f8:	4b54      	ldr	r3, [pc, #336]	; (800124c <HAL_GPIO_Init+0x2c8>)
 80010fa:	699a      	ldr	r2, [r3, #24]
 80010fc:	4b53      	ldr	r3, [pc, #332]	; (800124c <HAL_GPIO_Init+0x2c8>)
 80010fe:	2101      	movs	r1, #1
 8001100:	430a      	orrs	r2, r1
 8001102:	619a      	str	r2, [r3, #24]
 8001104:	4b51      	ldr	r3, [pc, #324]	; (800124c <HAL_GPIO_Init+0x2c8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	2201      	movs	r2, #1
 800110a:	4013      	ands	r3, r2
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001110:	4a4f      	ldr	r2, [pc, #316]	; (8001250 <HAL_GPIO_Init+0x2cc>)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	589b      	ldr	r3, [r3, r2]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	2203      	movs	r2, #3
 8001122:	4013      	ands	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	409a      	lsls	r2, r3
 800112a:	0013      	movs	r3, r2
 800112c:	43da      	mvns	r2, r3
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4013      	ands	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	2390      	movs	r3, #144	; 0x90
 8001138:	05db      	lsls	r3, r3, #23
 800113a:	429a      	cmp	r2, r3
 800113c:	d013      	beq.n	8001166 <HAL_GPIO_Init+0x1e2>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a44      	ldr	r2, [pc, #272]	; (8001254 <HAL_GPIO_Init+0x2d0>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00d      	beq.n	8001162 <HAL_GPIO_Init+0x1de>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a43      	ldr	r2, [pc, #268]	; (8001258 <HAL_GPIO_Init+0x2d4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x1da>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a42      	ldr	r2, [pc, #264]	; (800125c <HAL_GPIO_Init+0x2d8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_GPIO_Init+0x1d6>
 8001156:	2303      	movs	r3, #3
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x1e4>
 800115a:	2305      	movs	r3, #5
 800115c:	e004      	b.n	8001168 <HAL_GPIO_Init+0x1e4>
 800115e:	2302      	movs	r3, #2
 8001160:	e002      	b.n	8001168 <HAL_GPIO_Init+0x1e4>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x1e4>
 8001166:	2300      	movs	r3, #0
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	2103      	movs	r1, #3
 800116c:	400a      	ands	r2, r1
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4093      	lsls	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001178:	4935      	ldr	r1, [pc, #212]	; (8001250 <HAL_GPIO_Init+0x2cc>)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001186:	4b36      	ldr	r3, [pc, #216]	; (8001260 <HAL_GPIO_Init+0x2dc>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43da      	mvns	r2, r3
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	025b      	lsls	r3, r3, #9
 800119e:	4013      	ands	r3, r2
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <HAL_GPIO_Init+0x2dc>)
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_GPIO_Init+0x2dc>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43da      	mvns	r2, r3
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	029b      	lsls	r3, r3, #10
 80011c8:	4013      	ands	r3, r2
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <HAL_GPIO_Init+0x2dc>)
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_GPIO_Init+0x2dc>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	43da      	mvns	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	035b      	lsls	r3, r3, #13
 80011f2:	4013      	ands	r3, r2
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_GPIO_Init+0x2dc>)
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_GPIO_Init+0x2dc>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	43da      	mvns	r2, r3
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	039b      	lsls	r3, r3, #14
 800121c:	4013      	ands	r3, r2
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001228:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <HAL_GPIO_Init+0x2dc>)
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3301      	adds	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	40da      	lsrs	r2, r3
 800123c:	1e13      	subs	r3, r2, #0
 800123e:	d000      	beq.n	8001242 <HAL_GPIO_Init+0x2be>
 8001240:	e6a8      	b.n	8000f94 <HAL_GPIO_Init+0x10>
  } 
}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b006      	add	sp, #24
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40021000 	.word	0x40021000
 8001250:	40010000 	.word	0x40010000
 8001254:	48000400 	.word	0x48000400
 8001258:	48000800 	.word	0x48000800
 800125c:	48000c00 	.word	0x48000c00
 8001260:	40010400 	.word	0x40010400

08001264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e305      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2201      	movs	r2, #1
 800127c:	4013      	ands	r3, r2
 800127e:	d100      	bne.n	8001282 <HAL_RCC_OscConfig+0x1e>
 8001280:	e08d      	b.n	800139e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001282:	4bc5      	ldr	r3, [pc, #788]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	220c      	movs	r2, #12
 8001288:	4013      	ands	r3, r2
 800128a:	2b04      	cmp	r3, #4
 800128c:	d00e      	beq.n	80012ac <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800128e:	4bc2      	ldr	r3, [pc, #776]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	220c      	movs	r2, #12
 8001294:	4013      	ands	r3, r2
 8001296:	2b08      	cmp	r3, #8
 8001298:	d116      	bne.n	80012c8 <HAL_RCC_OscConfig+0x64>
 800129a:	4bbf      	ldr	r3, [pc, #764]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	23c0      	movs	r3, #192	; 0xc0
 80012a0:	025b      	lsls	r3, r3, #9
 80012a2:	401a      	ands	r2, r3
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	025b      	lsls	r3, r3, #9
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d10d      	bne.n	80012c8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ac:	4bba      	ldr	r3, [pc, #744]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	029b      	lsls	r3, r3, #10
 80012b4:	4013      	ands	r3, r2
 80012b6:	d100      	bne.n	80012ba <HAL_RCC_OscConfig+0x56>
 80012b8:	e070      	b.n	800139c <HAL_RCC_OscConfig+0x138>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d000      	beq.n	80012c4 <HAL_RCC_OscConfig+0x60>
 80012c2:	e06b      	b.n	800139c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e2dc      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d107      	bne.n	80012e0 <HAL_RCC_OscConfig+0x7c>
 80012d0:	4bb1      	ldr	r3, [pc, #708]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4bb0      	ldr	r3, [pc, #704]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 80012d6:	2180      	movs	r1, #128	; 0x80
 80012d8:	0249      	lsls	r1, r1, #9
 80012da:	430a      	orrs	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	e02f      	b.n	8001340 <HAL_RCC_OscConfig+0xdc>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10c      	bne.n	8001302 <HAL_RCC_OscConfig+0x9e>
 80012e8:	4bab      	ldr	r3, [pc, #684]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4baa      	ldr	r3, [pc, #680]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 80012ee:	49ab      	ldr	r1, [pc, #684]	; (800159c <HAL_RCC_OscConfig+0x338>)
 80012f0:	400a      	ands	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	4ba8      	ldr	r3, [pc, #672]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4ba7      	ldr	r3, [pc, #668]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 80012fa:	49a9      	ldr	r1, [pc, #676]	; (80015a0 <HAL_RCC_OscConfig+0x33c>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	e01e      	b.n	8001340 <HAL_RCC_OscConfig+0xdc>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b05      	cmp	r3, #5
 8001308:	d10e      	bne.n	8001328 <HAL_RCC_OscConfig+0xc4>
 800130a:	4ba3      	ldr	r3, [pc, #652]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4ba2      	ldr	r3, [pc, #648]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	02c9      	lsls	r1, r1, #11
 8001314:	430a      	orrs	r2, r1
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	4b9f      	ldr	r3, [pc, #636]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b9e      	ldr	r3, [pc, #632]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 800131e:	2180      	movs	r1, #128	; 0x80
 8001320:	0249      	lsls	r1, r1, #9
 8001322:	430a      	orrs	r2, r1
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	e00b      	b.n	8001340 <HAL_RCC_OscConfig+0xdc>
 8001328:	4b9b      	ldr	r3, [pc, #620]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b9a      	ldr	r3, [pc, #616]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 800132e:	499b      	ldr	r1, [pc, #620]	; (800159c <HAL_RCC_OscConfig+0x338>)
 8001330:	400a      	ands	r2, r1
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	4b98      	ldr	r3, [pc, #608]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b97      	ldr	r3, [pc, #604]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 800133a:	4999      	ldr	r1, [pc, #612]	; (80015a0 <HAL_RCC_OscConfig+0x33c>)
 800133c:	400a      	ands	r2, r1
 800133e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d014      	beq.n	8001372 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fd40 	bl	8000dcc <HAL_GetTick>
 800134c:	0003      	movs	r3, r0
 800134e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001352:	f7ff fd3b 	bl	8000dcc <HAL_GetTick>
 8001356:	0002      	movs	r2, r0
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b64      	cmp	r3, #100	; 0x64
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e28e      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001364:	4b8c      	ldr	r3, [pc, #560]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	029b      	lsls	r3, r3, #10
 800136c:	4013      	ands	r3, r2
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0xee>
 8001370:	e015      	b.n	800139e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001372:	f7ff fd2b 	bl	8000dcc <HAL_GetTick>
 8001376:	0003      	movs	r3, r0
 8001378:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fd26 	bl	8000dcc <HAL_GetTick>
 8001380:	0002      	movs	r2, r0
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e279      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	4b82      	ldr	r3, [pc, #520]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	029b      	lsls	r3, r3, #10
 8001396:	4013      	ands	r3, r2
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x118>
 800139a:	e000      	b.n	800139e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2202      	movs	r2, #2
 80013a4:	4013      	ands	r3, r2
 80013a6:	d100      	bne.n	80013aa <HAL_RCC_OscConfig+0x146>
 80013a8:	e06c      	b.n	8001484 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013aa:	4b7b      	ldr	r3, [pc, #492]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	220c      	movs	r2, #12
 80013b0:	4013      	ands	r3, r2
 80013b2:	d00e      	beq.n	80013d2 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013b4:	4b78      	ldr	r3, [pc, #480]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	220c      	movs	r2, #12
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d11f      	bne.n	8001400 <HAL_RCC_OscConfig+0x19c>
 80013c0:	4b75      	ldr	r3, [pc, #468]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	23c0      	movs	r3, #192	; 0xc0
 80013c6:	025b      	lsls	r3, r3, #9
 80013c8:	401a      	ands	r2, r3
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d116      	bne.n	8001400 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	4b71      	ldr	r3, [pc, #452]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2202      	movs	r2, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	d005      	beq.n	80013e8 <HAL_RCC_OscConfig+0x184>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e24c      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e8:	4b6b      	ldr	r3, [pc, #428]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	22f8      	movs	r2, #248	; 0xf8
 80013ee:	4393      	bics	r3, r2
 80013f0:	0019      	movs	r1, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	00da      	lsls	r2, r3, #3
 80013f8:	4b67      	ldr	r3, [pc, #412]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 80013fa:	430a      	orrs	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	e041      	b.n	8001484 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d024      	beq.n	8001452 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001408:	4b63      	ldr	r3, [pc, #396]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b62      	ldr	r3, [pc, #392]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 800140e:	2101      	movs	r1, #1
 8001410:	430a      	orrs	r2, r1
 8001412:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fcda 	bl	8000dcc <HAL_GetTick>
 8001418:	0003      	movs	r3, r0
 800141a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141e:	f7ff fcd5 	bl	8000dcc <HAL_GetTick>
 8001422:	0002      	movs	r2, r0
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e228      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001430:	4b59      	ldr	r3, [pc, #356]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2202      	movs	r2, #2
 8001436:	4013      	ands	r3, r2
 8001438:	d0f1      	beq.n	800141e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143a:	4b57      	ldr	r3, [pc, #348]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	22f8      	movs	r2, #248	; 0xf8
 8001440:	4393      	bics	r3, r2
 8001442:	0019      	movs	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	00da      	lsls	r2, r3, #3
 800144a:	4b53      	ldr	r3, [pc, #332]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e018      	b.n	8001484 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001452:	4b51      	ldr	r3, [pc, #324]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4b50      	ldr	r3, [pc, #320]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 8001458:	2101      	movs	r1, #1
 800145a:	438a      	bics	r2, r1
 800145c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145e:	f7ff fcb5 	bl	8000dcc <HAL_GetTick>
 8001462:	0003      	movs	r3, r0
 8001464:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001468:	f7ff fcb0 	bl	8000dcc <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e203      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	4b47      	ldr	r3, [pc, #284]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2202      	movs	r2, #2
 8001480:	4013      	ands	r3, r2
 8001482:	d1f1      	bne.n	8001468 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2208      	movs	r2, #8
 800148a:	4013      	ands	r3, r2
 800148c:	d036      	beq.n	80014fc <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d019      	beq.n	80014ca <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001496:	4b40      	ldr	r3, [pc, #256]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 8001498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800149a:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 800149c:	2101      	movs	r1, #1
 800149e:	430a      	orrs	r2, r1
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fc93 	bl	8000dcc <HAL_GetTick>
 80014a6:	0003      	movs	r3, r0
 80014a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ac:	f7ff fc8e 	bl	8000dcc <HAL_GetTick>
 80014b0:	0002      	movs	r2, r0
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e1e1      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	2202      	movs	r2, #2
 80014c4:	4013      	ands	r3, r2
 80014c6:	d0f1      	beq.n	80014ac <HAL_RCC_OscConfig+0x248>
 80014c8:	e018      	b.n	80014fc <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ca:	4b33      	ldr	r3, [pc, #204]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 80014cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ce:	4b32      	ldr	r3, [pc, #200]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 80014d0:	2101      	movs	r1, #1
 80014d2:	438a      	bics	r2, r1
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fc79 	bl	8000dcc <HAL_GetTick>
 80014da:	0003      	movs	r3, r0
 80014dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e0:	f7ff fc74 	bl	8000dcc <HAL_GetTick>
 80014e4:	0002      	movs	r2, r0
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e1c7      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f2:	4b29      	ldr	r3, [pc, #164]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	2202      	movs	r2, #2
 80014f8:	4013      	ands	r3, r2
 80014fa:	d1f1      	bne.n	80014e0 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2204      	movs	r2, #4
 8001502:	4013      	ands	r3, r2
 8001504:	d100      	bne.n	8001508 <HAL_RCC_OscConfig+0x2a4>
 8001506:	e0b5      	b.n	8001674 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001508:	201f      	movs	r0, #31
 800150a:	183b      	adds	r3, r7, r0
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001510:	4b21      	ldr	r3, [pc, #132]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 8001512:	69da      	ldr	r2, [r3, #28]
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	055b      	lsls	r3, r3, #21
 8001518:	4013      	ands	r3, r2
 800151a:	d110      	bne.n	800153e <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 800151e:	69da      	ldr	r2, [r3, #28]
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 8001522:	2180      	movs	r1, #128	; 0x80
 8001524:	0549      	lsls	r1, r1, #21
 8001526:	430a      	orrs	r2, r1
 8001528:	61da      	str	r2, [r3, #28]
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 800152c:	69da      	ldr	r2, [r3, #28]
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	055b      	lsls	r3, r3, #21
 8001532:	4013      	ands	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001538:	183b      	adds	r3, r7, r0
 800153a:	2201      	movs	r2, #1
 800153c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_RCC_OscConfig+0x340>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4013      	ands	r3, r2
 8001548:	d11a      	bne.n	8001580 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_RCC_OscConfig+0x340>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_RCC_OscConfig+0x340>)
 8001550:	2180      	movs	r1, #128	; 0x80
 8001552:	0049      	lsls	r1, r1, #1
 8001554:	430a      	orrs	r2, r1
 8001556:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001558:	f7ff fc38 	bl	8000dcc <HAL_GetTick>
 800155c:	0003      	movs	r3, r0
 800155e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001562:	f7ff fc33 	bl	8000dcc <HAL_GetTick>
 8001566:	0002      	movs	r2, r0
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b64      	cmp	r3, #100	; 0x64
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e186      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_RCC_OscConfig+0x340>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4013      	ands	r3, r2
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d10f      	bne.n	80015a8 <HAL_RCC_OscConfig+0x344>
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 800158a:	6a1a      	ldr	r2, [r3, #32]
 800158c:	4b02      	ldr	r3, [pc, #8]	; (8001598 <HAL_RCC_OscConfig+0x334>)
 800158e:	2101      	movs	r1, #1
 8001590:	430a      	orrs	r2, r1
 8001592:	621a      	str	r2, [r3, #32]
 8001594:	e036      	b.n	8001604 <HAL_RCC_OscConfig+0x3a0>
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	40021000 	.word	0x40021000
 800159c:	fffeffff 	.word	0xfffeffff
 80015a0:	fffbffff 	.word	0xfffbffff
 80015a4:	40007000 	.word	0x40007000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10c      	bne.n	80015ca <HAL_RCC_OscConfig+0x366>
 80015b0:	4bb6      	ldr	r3, [pc, #728]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80015b2:	6a1a      	ldr	r2, [r3, #32]
 80015b4:	4bb5      	ldr	r3, [pc, #724]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80015b6:	2101      	movs	r1, #1
 80015b8:	438a      	bics	r2, r1
 80015ba:	621a      	str	r2, [r3, #32]
 80015bc:	4bb3      	ldr	r3, [pc, #716]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80015be:	6a1a      	ldr	r2, [r3, #32]
 80015c0:	4bb2      	ldr	r3, [pc, #712]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80015c2:	2104      	movs	r1, #4
 80015c4:	438a      	bics	r2, r1
 80015c6:	621a      	str	r2, [r3, #32]
 80015c8:	e01c      	b.n	8001604 <HAL_RCC_OscConfig+0x3a0>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b05      	cmp	r3, #5
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0x388>
 80015d2:	4bae      	ldr	r3, [pc, #696]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80015d4:	6a1a      	ldr	r2, [r3, #32]
 80015d6:	4bad      	ldr	r3, [pc, #692]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80015d8:	2104      	movs	r1, #4
 80015da:	430a      	orrs	r2, r1
 80015dc:	621a      	str	r2, [r3, #32]
 80015de:	4bab      	ldr	r3, [pc, #684]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80015e0:	6a1a      	ldr	r2, [r3, #32]
 80015e2:	4baa      	ldr	r3, [pc, #680]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80015e4:	2101      	movs	r1, #1
 80015e6:	430a      	orrs	r2, r1
 80015e8:	621a      	str	r2, [r3, #32]
 80015ea:	e00b      	b.n	8001604 <HAL_RCC_OscConfig+0x3a0>
 80015ec:	4ba7      	ldr	r3, [pc, #668]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80015ee:	6a1a      	ldr	r2, [r3, #32]
 80015f0:	4ba6      	ldr	r3, [pc, #664]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80015f2:	2101      	movs	r1, #1
 80015f4:	438a      	bics	r2, r1
 80015f6:	621a      	str	r2, [r3, #32]
 80015f8:	4ba4      	ldr	r3, [pc, #656]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80015fa:	6a1a      	ldr	r2, [r3, #32]
 80015fc:	4ba3      	ldr	r3, [pc, #652]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80015fe:	2104      	movs	r1, #4
 8001600:	438a      	bics	r2, r1
 8001602:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d014      	beq.n	8001636 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160c:	f7ff fbde 	bl	8000dcc <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	e009      	b.n	800162a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7ff fbd9 	bl	8000dcc <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	4a9b      	ldr	r2, [pc, #620]	; (8001890 <HAL_RCC_OscConfig+0x62c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e12b      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162a:	4b98      	ldr	r3, [pc, #608]	; (800188c <HAL_RCC_OscConfig+0x628>)
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	2202      	movs	r2, #2
 8001630:	4013      	ands	r3, r2
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x3b2>
 8001634:	e013      	b.n	800165e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001636:	f7ff fbc9 	bl	8000dcc <HAL_GetTick>
 800163a:	0003      	movs	r3, r0
 800163c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163e:	e009      	b.n	8001654 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001640:	f7ff fbc4 	bl	8000dcc <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	4a91      	ldr	r2, [pc, #580]	; (8001890 <HAL_RCC_OscConfig+0x62c>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e116      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001654:	4b8d      	ldr	r3, [pc, #564]	; (800188c <HAL_RCC_OscConfig+0x628>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	2202      	movs	r2, #2
 800165a:	4013      	ands	r3, r2
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800165e:	231f      	movs	r3, #31
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d105      	bne.n	8001674 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001668:	4b88      	ldr	r3, [pc, #544]	; (800188c <HAL_RCC_OscConfig+0x628>)
 800166a:	69da      	ldr	r2, [r3, #28]
 800166c:	4b87      	ldr	r3, [pc, #540]	; (800188c <HAL_RCC_OscConfig+0x628>)
 800166e:	4989      	ldr	r1, [pc, #548]	; (8001894 <HAL_RCC_OscConfig+0x630>)
 8001670:	400a      	ands	r2, r1
 8001672:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2210      	movs	r2, #16
 800167a:	4013      	ands	r3, r2
 800167c:	d063      	beq.n	8001746 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d12a      	bne.n	80016dc <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001686:	4b81      	ldr	r3, [pc, #516]	; (800188c <HAL_RCC_OscConfig+0x628>)
 8001688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800168a:	4b80      	ldr	r3, [pc, #512]	; (800188c <HAL_RCC_OscConfig+0x628>)
 800168c:	2104      	movs	r1, #4
 800168e:	430a      	orrs	r2, r1
 8001690:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001692:	4b7e      	ldr	r3, [pc, #504]	; (800188c <HAL_RCC_OscConfig+0x628>)
 8001694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001696:	4b7d      	ldr	r3, [pc, #500]	; (800188c <HAL_RCC_OscConfig+0x628>)
 8001698:	2101      	movs	r1, #1
 800169a:	430a      	orrs	r2, r1
 800169c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169e:	f7ff fb95 	bl	8000dcc <HAL_GetTick>
 80016a2:	0003      	movs	r3, r0
 80016a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016a8:	f7ff fb90 	bl	8000dcc <HAL_GetTick>
 80016ac:	0002      	movs	r2, r0
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e0e3      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016ba:	4b74      	ldr	r3, [pc, #464]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80016bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016be:	2202      	movs	r2, #2
 80016c0:	4013      	ands	r3, r2
 80016c2:	d0f1      	beq.n	80016a8 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016c4:	4b71      	ldr	r3, [pc, #452]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80016c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c8:	22f8      	movs	r2, #248	; 0xf8
 80016ca:	4393      	bics	r3, r2
 80016cc:	0019      	movs	r1, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	00da      	lsls	r2, r3, #3
 80016d4:	4b6d      	ldr	r3, [pc, #436]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80016d6:	430a      	orrs	r2, r1
 80016d8:	635a      	str	r2, [r3, #52]	; 0x34
 80016da:	e034      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	3305      	adds	r3, #5
 80016e2:	d111      	bne.n	8001708 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80016e4:	4b69      	ldr	r3, [pc, #420]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80016e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016e8:	4b68      	ldr	r3, [pc, #416]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80016ea:	2104      	movs	r1, #4
 80016ec:	438a      	bics	r2, r1
 80016ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016f0:	4b66      	ldr	r3, [pc, #408]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80016f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f4:	22f8      	movs	r2, #248	; 0xf8
 80016f6:	4393      	bics	r3, r2
 80016f8:	0019      	movs	r1, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	00da      	lsls	r2, r3, #3
 8001700:	4b62      	ldr	r3, [pc, #392]	; (800188c <HAL_RCC_OscConfig+0x628>)
 8001702:	430a      	orrs	r2, r1
 8001704:	635a      	str	r2, [r3, #52]	; 0x34
 8001706:	e01e      	b.n	8001746 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001708:	4b60      	ldr	r3, [pc, #384]	; (800188c <HAL_RCC_OscConfig+0x628>)
 800170a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800170c:	4b5f      	ldr	r3, [pc, #380]	; (800188c <HAL_RCC_OscConfig+0x628>)
 800170e:	2104      	movs	r1, #4
 8001710:	430a      	orrs	r2, r1
 8001712:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001714:	4b5d      	ldr	r3, [pc, #372]	; (800188c <HAL_RCC_OscConfig+0x628>)
 8001716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001718:	4b5c      	ldr	r3, [pc, #368]	; (800188c <HAL_RCC_OscConfig+0x628>)
 800171a:	2101      	movs	r1, #1
 800171c:	438a      	bics	r2, r1
 800171e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001720:	f7ff fb54 	bl	8000dcc <HAL_GetTick>
 8001724:	0003      	movs	r3, r0
 8001726:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800172a:	f7ff fb4f 	bl	8000dcc <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e0a2      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800173c:	4b53      	ldr	r3, [pc, #332]	; (800188c <HAL_RCC_OscConfig+0x628>)
 800173e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001740:	2202      	movs	r2, #2
 8001742:	4013      	ands	r3, r2
 8001744:	d1f1      	bne.n	800172a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d100      	bne.n	8001750 <HAL_RCC_OscConfig+0x4ec>
 800174e:	e097      	b.n	8001880 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001750:	4b4e      	ldr	r3, [pc, #312]	; (800188c <HAL_RCC_OscConfig+0x628>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	220c      	movs	r2, #12
 8001756:	4013      	ands	r3, r2
 8001758:	2b08      	cmp	r3, #8
 800175a:	d100      	bne.n	800175e <HAL_RCC_OscConfig+0x4fa>
 800175c:	e06b      	b.n	8001836 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d14c      	bne.n	8001800 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001766:	4b49      	ldr	r3, [pc, #292]	; (800188c <HAL_RCC_OscConfig+0x628>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4b48      	ldr	r3, [pc, #288]	; (800188c <HAL_RCC_OscConfig+0x628>)
 800176c:	494a      	ldr	r1, [pc, #296]	; (8001898 <HAL_RCC_OscConfig+0x634>)
 800176e:	400a      	ands	r2, r1
 8001770:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001772:	f7ff fb2b 	bl	8000dcc <HAL_GetTick>
 8001776:	0003      	movs	r3, r0
 8001778:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff fb26 	bl	8000dcc <HAL_GetTick>
 8001780:	0002      	movs	r2, r0
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e079      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178e:	4b3f      	ldr	r3, [pc, #252]	; (800188c <HAL_RCC_OscConfig+0x628>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	2380      	movs	r3, #128	; 0x80
 8001794:	049b      	lsls	r3, r3, #18
 8001796:	4013      	ands	r3, r2
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800179a:	4b3c      	ldr	r3, [pc, #240]	; (800188c <HAL_RCC_OscConfig+0x628>)
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	220f      	movs	r2, #15
 80017a0:	4393      	bics	r3, r2
 80017a2:	0019      	movs	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a8:	4b38      	ldr	r3, [pc, #224]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80017aa:	430a      	orrs	r2, r1
 80017ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ae:	4b37      	ldr	r3, [pc, #220]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4a3a      	ldr	r2, [pc, #232]	; (800189c <HAL_RCC_OscConfig+0x638>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	0019      	movs	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	431a      	orrs	r2, r3
 80017c2:	4b32      	ldr	r3, [pc, #200]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80017c4:	430a      	orrs	r2, r1
 80017c6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b2f      	ldr	r3, [pc, #188]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80017ce:	2180      	movs	r1, #128	; 0x80
 80017d0:	0449      	lsls	r1, r1, #17
 80017d2:	430a      	orrs	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d6:	f7ff faf9 	bl	8000dcc <HAL_GetTick>
 80017da:	0003      	movs	r3, r0
 80017dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e0:	f7ff faf4 	bl	8000dcc <HAL_GetTick>
 80017e4:	0002      	movs	r2, r0
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e047      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017f2:	4b26      	ldr	r3, [pc, #152]	; (800188c <HAL_RCC_OscConfig+0x628>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	049b      	lsls	r3, r3, #18
 80017fa:	4013      	ands	r3, r2
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x57c>
 80017fe:	e03f      	b.n	8001880 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_RCC_OscConfig+0x628>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b21      	ldr	r3, [pc, #132]	; (800188c <HAL_RCC_OscConfig+0x628>)
 8001806:	4924      	ldr	r1, [pc, #144]	; (8001898 <HAL_RCC_OscConfig+0x634>)
 8001808:	400a      	ands	r2, r1
 800180a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fade 	bl	8000dcc <HAL_GetTick>
 8001810:	0003      	movs	r3, r0
 8001812:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001816:	f7ff fad9 	bl	8000dcc <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e02c      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001828:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_RCC_OscConfig+0x628>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	049b      	lsls	r3, r3, #18
 8001830:	4013      	ands	r3, r2
 8001832:	d1f0      	bne.n	8001816 <HAL_RCC_OscConfig+0x5b2>
 8001834:	e024      	b.n	8001880 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e01f      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_RCC_OscConfig+0x628>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <HAL_RCC_OscConfig+0x628>)
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	23c0      	movs	r3, #192	; 0xc0
 8001852:	025b      	lsls	r3, r3, #9
 8001854:	401a      	ands	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	429a      	cmp	r2, r3
 800185c:	d10e      	bne.n	800187c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	220f      	movs	r2, #15
 8001862:	401a      	ands	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001868:	429a      	cmp	r2, r3
 800186a:	d107      	bne.n	800187c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	23f0      	movs	r3, #240	; 0xf0
 8001870:	039b      	lsls	r3, r3, #14
 8001872:	401a      	ands	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	0018      	movs	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	b008      	add	sp, #32
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	40021000 	.word	0x40021000
 8001890:	00001388 	.word	0x00001388
 8001894:	efffffff 	.word	0xefffffff
 8001898:	feffffff 	.word	0xfeffffff
 800189c:	ffc27fff 	.word	0xffc27fff

080018a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0b3      	b.n	8001a1c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b4:	4b5b      	ldr	r3, [pc, #364]	; (8001a24 <HAL_RCC_ClockConfig+0x184>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2201      	movs	r2, #1
 80018ba:	4013      	ands	r3, r2
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d911      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b58      	ldr	r3, [pc, #352]	; (8001a24 <HAL_RCC_ClockConfig+0x184>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2201      	movs	r2, #1
 80018c8:	4393      	bics	r3, r2
 80018ca:	0019      	movs	r1, r3
 80018cc:	4b55      	ldr	r3, [pc, #340]	; (8001a24 <HAL_RCC_ClockConfig+0x184>)
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d4:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <HAL_RCC_ClockConfig+0x184>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2201      	movs	r2, #1
 80018da:	4013      	ands	r3, r2
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d001      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e09a      	b.n	8001a1c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2202      	movs	r2, #2
 80018ec:	4013      	ands	r3, r2
 80018ee:	d015      	beq.n	800191c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2204      	movs	r2, #4
 80018f6:	4013      	ands	r3, r2
 80018f8:	d006      	beq.n	8001908 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018fa:	4b4b      	ldr	r3, [pc, #300]	; (8001a28 <HAL_RCC_ClockConfig+0x188>)
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	4b4a      	ldr	r3, [pc, #296]	; (8001a28 <HAL_RCC_ClockConfig+0x188>)
 8001900:	21e0      	movs	r1, #224	; 0xe0
 8001902:	00c9      	lsls	r1, r1, #3
 8001904:	430a      	orrs	r2, r1
 8001906:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001908:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <HAL_RCC_ClockConfig+0x188>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	22f0      	movs	r2, #240	; 0xf0
 800190e:	4393      	bics	r3, r2
 8001910:	0019      	movs	r1, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	4b44      	ldr	r3, [pc, #272]	; (8001a28 <HAL_RCC_ClockConfig+0x188>)
 8001918:	430a      	orrs	r2, r1
 800191a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2201      	movs	r2, #1
 8001922:	4013      	ands	r3, r2
 8001924:	d040      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192e:	4b3e      	ldr	r3, [pc, #248]	; (8001a28 <HAL_RCC_ClockConfig+0x188>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	029b      	lsls	r3, r3, #10
 8001936:	4013      	ands	r3, r2
 8001938:	d114      	bne.n	8001964 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e06e      	b.n	8001a1c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b02      	cmp	r3, #2
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001946:	4b38      	ldr	r3, [pc, #224]	; (8001a28 <HAL_RCC_ClockConfig+0x188>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	049b      	lsls	r3, r3, #18
 800194e:	4013      	ands	r3, r2
 8001950:	d108      	bne.n	8001964 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e062      	b.n	8001a1c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001956:	4b34      	ldr	r3, [pc, #208]	; (8001a28 <HAL_RCC_ClockConfig+0x188>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2202      	movs	r2, #2
 800195c:	4013      	ands	r3, r2
 800195e:	d101      	bne.n	8001964 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e05b      	b.n	8001a1c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001964:	4b30      	ldr	r3, [pc, #192]	; (8001a28 <HAL_RCC_ClockConfig+0x188>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2203      	movs	r2, #3
 800196a:	4393      	bics	r3, r2
 800196c:	0019      	movs	r1, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_RCC_ClockConfig+0x188>)
 8001974:	430a      	orrs	r2, r1
 8001976:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001978:	f7ff fa28 	bl	8000dcc <HAL_GetTick>
 800197c:	0003      	movs	r3, r0
 800197e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001980:	e009      	b.n	8001996 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001982:	f7ff fa23 	bl	8000dcc <HAL_GetTick>
 8001986:	0002      	movs	r2, r0
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	4a27      	ldr	r2, [pc, #156]	; (8001a2c <HAL_RCC_ClockConfig+0x18c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e042      	b.n	8001a1c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <HAL_RCC_ClockConfig+0x188>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	220c      	movs	r2, #12
 800199c:	401a      	ands	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d1ec      	bne.n	8001982 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <HAL_RCC_ClockConfig+0x184>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2201      	movs	r2, #1
 80019ae:	4013      	ands	r3, r2
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d211      	bcs.n	80019da <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_RCC_ClockConfig+0x184>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2201      	movs	r2, #1
 80019bc:	4393      	bics	r3, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <HAL_RCC_ClockConfig+0x184>)
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <HAL_RCC_ClockConfig+0x184>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d001      	beq.n	80019da <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e020      	b.n	8001a1c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2204      	movs	r2, #4
 80019e0:	4013      	ands	r3, r2
 80019e2:	d009      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019e4:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_RCC_ClockConfig+0x188>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	4a11      	ldr	r2, [pc, #68]	; (8001a30 <HAL_RCC_ClockConfig+0x190>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	0019      	movs	r1, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_RCC_ClockConfig+0x188>)
 80019f4:	430a      	orrs	r2, r1
 80019f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019f8:	f000 f820 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80019fc:	0001      	movs	r1, r0
 80019fe:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_RCC_ClockConfig+0x188>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	220f      	movs	r2, #15
 8001a06:	4013      	ands	r3, r2
 8001a08:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <HAL_RCC_ClockConfig+0x194>)
 8001a0a:	5cd3      	ldrb	r3, [r2, r3]
 8001a0c:	000a      	movs	r2, r1
 8001a0e:	40da      	lsrs	r2, r3
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCC_ClockConfig+0x198>)
 8001a12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f7ff f8b7 	bl	8000b88 <HAL_InitTick>
  
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b004      	add	sp, #16
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40022000 	.word	0x40022000
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	00001388 	.word	0x00001388
 8001a30:	fffff8ff 	.word	0xfffff8ff
 8001a34:	0800a954 	.word	0x0800a954
 8001a38:	20000000 	.word	0x20000000

08001a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b08f      	sub	sp, #60	; 0x3c
 8001a40:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001a42:	2314      	movs	r3, #20
 8001a44:	18fb      	adds	r3, r7, r3
 8001a46:	4a2c      	ldr	r2, [pc, #176]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a48:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a4a:	c313      	stmia	r3!, {r0, r1, r4}
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	4a2a      	ldr	r2, [pc, #168]	; (8001afc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a54:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a56:	c313      	stmia	r3!, {r0, r1, r4}
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a60:	2300      	movs	r3, #0
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a64:	2300      	movs	r3, #0
 8001a66:	637b      	str	r3, [r7, #52]	; 0x34
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001a70:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a78:	220c      	movs	r2, #12
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d002      	beq.n	8001a86 <HAL_RCC_GetSysClockFreq+0x4a>
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d003      	beq.n	8001a8c <HAL_RCC_GetSysClockFreq+0x50>
 8001a84:	e02f      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a86:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a8a:	e02f      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8e:	0c9b      	lsrs	r3, r3, #18
 8001a90:	220f      	movs	r2, #15
 8001a92:	4013      	ands	r3, r2
 8001a94:	2214      	movs	r2, #20
 8001a96:	18ba      	adds	r2, r7, r2
 8001a98:	5cd3      	ldrb	r3, [r2, r3]
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	1d3a      	adds	r2, r7, #4
 8001aa6:	5cd3      	ldrb	r3, [r2, r3]
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aac:	23c0      	movs	r3, #192	; 0xc0
 8001aae:	025b      	lsls	r3, r3, #9
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	025b      	lsls	r3, r3, #9
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d109      	bne.n	8001ace <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001aba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001abc:	4811      	ldr	r0, [pc, #68]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001abe:	f7fe fb35 	bl	800012c <__udivsi3>
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	4353      	muls	r3, r2
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ad0:	480c      	ldr	r0, [pc, #48]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ad2:	f7fe fb2b 	bl	800012c <__udivsi3>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	001a      	movs	r2, r3
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	4353      	muls	r3, r2
 8001ade:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ae4:	e002      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ae8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001aea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001aee:	0018      	movs	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b00f      	add	sp, #60	; 0x3c
 8001af4:	bd90      	pop	{r4, r7, pc}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	0800a580 	.word	0x0800a580
 8001afc:	0800a590 	.word	0x0800a590
 8001b00:	40021000 	.word	0x40021000
 8001b04:	007a1200 	.word	0x007a1200

08001b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b0c:	4b02      	ldr	r3, [pc, #8]	; (8001b18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	0018      	movs	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	20000000 	.word	0x20000000

08001b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001b20:	f7ff fff2 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b24:	0001      	movs	r1, r0
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	0a1b      	lsrs	r3, r3, #8
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	4013      	ands	r3, r2
 8001b30:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b32:	5cd3      	ldrb	r3, [r2, r3]
 8001b34:	40d9      	lsrs	r1, r3
 8001b36:	000b      	movs	r3, r1
}    
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	40021000 	.word	0x40021000
 8001b44:	0800a964 	.word	0x0800a964

08001b48 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2207      	movs	r2, #7
 8001b56:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_RCC_GetClockConfig+0x4c>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	401a      	ands	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_RCC_GetClockConfig+0x4c>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	22f0      	movs	r2, #240	; 0xf0
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_RCC_GetClockConfig+0x4c>)
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	23e0      	movs	r3, #224	; 0xe0
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	401a      	ands	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_RCC_GetClockConfig+0x50>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2201      	movs	r2, #1
 8001b84:	401a      	ands	r2, r3
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	601a      	str	r2, [r3, #0]
}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b002      	add	sp, #8
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40022000 	.word	0x40022000

08001b9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0a8      	b.n	8001d00 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	2382      	movs	r3, #130	; 0x82
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d009      	beq.n	8001bd6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	61da      	str	r2, [r3, #28]
 8001bc8:	e005      	b.n	8001bd6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	225d      	movs	r2, #93	; 0x5d
 8001be0:	5c9b      	ldrb	r3, [r3, r2]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d107      	bne.n	8001bf8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	225c      	movs	r2, #92	; 0x5c
 8001bec:	2100      	movs	r1, #0
 8001bee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f7fe ff7c 	bl	8000af0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	225d      	movs	r2, #93	; 0x5d
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2140      	movs	r1, #64	; 0x40
 8001c0c:	438a      	bics	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	23e0      	movs	r3, #224	; 0xe0
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d902      	bls.n	8001c22 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	e002      	b.n	8001c28 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	015b      	lsls	r3, r3, #5
 8001c26:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	23f0      	movs	r3, #240	; 0xf0
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d008      	beq.n	8001c46 <HAL_SPI_Init+0xaa>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68da      	ldr	r2, [r3, #12]
 8001c38:	23e0      	movs	r3, #224	; 0xe0
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d002      	beq.n	8001c46 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	2382      	movs	r3, #130	; 0x82
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	401a      	ands	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6899      	ldr	r1, [r3, #8]
 8001c54:	2384      	movs	r3, #132	; 0x84
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	400b      	ands	r3, r1
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	2102      	movs	r1, #2
 8001c62:	400b      	ands	r3, r1
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	400b      	ands	r3, r1
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6999      	ldr	r1, [r3, #24]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	400b      	ands	r3, r1
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	2138      	movs	r1, #56	; 0x38
 8001c82:	400b      	ands	r3, r1
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	2180      	movs	r1, #128	; 0x80
 8001c8c:	400b      	ands	r3, r1
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	0011      	movs	r1, r2
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	019b      	lsls	r3, r3, #6
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	2204      	movs	r2, #4
 8001cac:	401a      	ands	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	2110      	movs	r1, #16
 8001cb4:	400b      	ands	r3, r1
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbc:	2108      	movs	r1, #8
 8001cbe:	400b      	ands	r3, r1
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68d9      	ldr	r1, [r3, #12]
 8001cc6:	23f0      	movs	r3, #240	; 0xf0
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	400b      	ands	r3, r1
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	0011      	movs	r1, r2
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	015b      	lsls	r3, r3, #5
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	69da      	ldr	r2, [r3, #28]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4907      	ldr	r1, [pc, #28]	; (8001d08 <HAL_SPI_Init+0x16c>)
 8001cec:	400a      	ands	r2, r1
 8001cee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	225d      	movs	r2, #93	; 0x5d
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	0018      	movs	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b004      	add	sp, #16
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	fffff7ff 	.word	0xfffff7ff

08001d0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	001a      	movs	r2, r3
 8001d1a:	1cbb      	adds	r3, r7, #2
 8001d1c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001d22:	2323      	movs	r3, #35	; 0x23
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	225c      	movs	r2, #92	; 0x5c
 8001d2e:	5c9b      	ldrb	r3, [r3, r2]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_SPI_TransmitReceive+0x2c>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e1b5      	b.n	80020a4 <HAL_SPI_TransmitReceive+0x398>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	225c      	movs	r2, #92	; 0x5c
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d40:	f7ff f844 	bl	8000dcc <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001d48:	201b      	movs	r0, #27
 8001d4a:	183b      	adds	r3, r7, r0
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	215d      	movs	r1, #93	; 0x5d
 8001d50:	5c52      	ldrb	r2, [r2, r1]
 8001d52:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001d5a:	2312      	movs	r3, #18
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	1cba      	adds	r2, r7, #2
 8001d60:	8812      	ldrh	r2, [r2, #0]
 8001d62:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d64:	183b      	adds	r3, r7, r0
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d011      	beq.n	8001d90 <HAL_SPI_TransmitReceive+0x84>
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	2382      	movs	r3, #130	; 0x82
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d107      	bne.n	8001d86 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d103      	bne.n	8001d86 <HAL_SPI_TransmitReceive+0x7a>
 8001d7e:	183b      	adds	r3, r7, r0
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d004      	beq.n	8001d90 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001d86:	2323      	movs	r3, #35	; 0x23
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d8e:	e17e      	b.n	800208e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d006      	beq.n	8001da4 <HAL_SPI_TransmitReceive+0x98>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_SPI_TransmitReceive+0x98>
 8001d9c:	1cbb      	adds	r3, r7, #2
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d104      	bne.n	8001dae <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001da4:	2323      	movs	r3, #35	; 0x23
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
    goto error;
 8001dac:	e16f      	b.n	800208e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	225d      	movs	r2, #93	; 0x5d
 8001db2:	5c9b      	ldrb	r3, [r3, r2]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d003      	beq.n	8001dc2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	225d      	movs	r2, #93	; 0x5d
 8001dbe:	2105      	movs	r1, #5
 8001dc0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1cba      	adds	r2, r7, #2
 8001dd2:	2146      	movs	r1, #70	; 0x46
 8001dd4:	8812      	ldrh	r2, [r2, #0]
 8001dd6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1cba      	adds	r2, r7, #2
 8001ddc:	2144      	movs	r1, #68	; 0x44
 8001dde:	8812      	ldrh	r2, [r2, #0]
 8001de0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1cba      	adds	r2, r7, #2
 8001dec:	8812      	ldrh	r2, [r2, #0]
 8001dee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1cba      	adds	r2, r7, #2
 8001df4:	8812      	ldrh	r2, [r2, #0]
 8001df6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	23e0      	movs	r3, #224	; 0xe0
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d908      	bls.n	8001e22 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	49a4      	ldr	r1, [pc, #656]	; (80020ac <HAL_SPI_TransmitReceive+0x3a0>)
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	e008      	b.n	8001e34 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2180      	movs	r1, #128	; 0x80
 8001e2e:	0149      	lsls	r1, r1, #5
 8001e30:	430a      	orrs	r2, r1
 8001e32:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2240      	movs	r2, #64	; 0x40
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b40      	cmp	r3, #64	; 0x40
 8001e40:	d007      	beq.n	8001e52 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2140      	movs	r1, #64	; 0x40
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	23e0      	movs	r3, #224	; 0xe0
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d800      	bhi.n	8001e60 <HAL_SPI_TransmitReceive+0x154>
 8001e5e:	e07f      	b.n	8001f60 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_SPI_TransmitReceive+0x168>
 8001e68:	2312      	movs	r3, #18
 8001e6a:	18fb      	adds	r3, r7, r3
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d000      	beq.n	8001e74 <HAL_SPI_TransmitReceive+0x168>
 8001e72:	e069      	b.n	8001f48 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e78:	881a      	ldrh	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e84:	1c9a      	adds	r2, r3, #2
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e98:	e056      	b.n	8001f48 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d11b      	bne.n	8001ee0 <HAL_SPI_TransmitReceive+0x1d4>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d016      	beq.n	8001ee0 <HAL_SPI_TransmitReceive+0x1d4>
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d113      	bne.n	8001ee0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebc:	881a      	ldrh	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec8:	1c9a      	adds	r2, r3, #2
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d11c      	bne.n	8001f28 <HAL_SPI_TransmitReceive+0x21c>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2246      	movs	r2, #70	; 0x46
 8001ef2:	5a9b      	ldrh	r3, [r3, r2]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d016      	beq.n	8001f28 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	b292      	uxth	r2, r2
 8001f06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	1c9a      	adds	r2, r3, #2
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2246      	movs	r2, #70	; 0x46
 8001f16:	5a9b      	ldrh	r3, [r3, r2]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b299      	uxth	r1, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2246      	movs	r2, #70	; 0x46
 8001f22:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f24:	2301      	movs	r3, #1
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f28:	f7fe ff50 	bl	8000dcc <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d807      	bhi.n	8001f48 <HAL_SPI_TransmitReceive+0x23c>
 8001f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	d004      	beq.n	8001f48 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8001f3e:	2323      	movs	r3, #35	; 0x23
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	2203      	movs	r2, #3
 8001f44:	701a      	strb	r2, [r3, #0]
        goto error;
 8001f46:	e0a2      	b.n	800208e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1a3      	bne.n	8001e9a <HAL_SPI_TransmitReceive+0x18e>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2246      	movs	r2, #70	; 0x46
 8001f56:	5a9b      	ldrh	r3, [r3, r2]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d19d      	bne.n	8001e9a <HAL_SPI_TransmitReceive+0x18e>
 8001f5e:	e085      	b.n	800206c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_SPI_TransmitReceive+0x268>
 8001f68:	2312      	movs	r3, #18
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d000      	beq.n	8001f74 <HAL_SPI_TransmitReceive+0x268>
 8001f72:	e070      	b.n	8002056 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	330c      	adds	r3, #12
 8001f7e:	7812      	ldrb	r2, [r2, #0]
 8001f80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f9a:	e05c      	b.n	8002056 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d11c      	bne.n	8001fe4 <HAL_SPI_TransmitReceive+0x2d8>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d017      	beq.n	8001fe4 <HAL_SPI_TransmitReceive+0x2d8>
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d114      	bne.n	8001fe4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	330c      	adds	r3, #12
 8001fc4:	7812      	ldrb	r2, [r2, #0]
 8001fc6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2201      	movs	r2, #1
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d11e      	bne.n	8002030 <HAL_SPI_TransmitReceive+0x324>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2246      	movs	r2, #70	; 0x46
 8001ff6:	5a9b      	ldrh	r3, [r3, r2]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d018      	beq.n	8002030 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	330c      	adds	r3, #12
 8002004:	001a      	movs	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	7812      	ldrb	r2, [r2, #0]
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2246      	movs	r2, #70	; 0x46
 800201e:	5a9b      	ldrh	r3, [r3, r2]
 8002020:	b29b      	uxth	r3, r3
 8002022:	3b01      	subs	r3, #1
 8002024:	b299      	uxth	r1, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2246      	movs	r2, #70	; 0x46
 800202a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800202c:	2301      	movs	r3, #1
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002030:	f7fe fecc 	bl	8000dcc <HAL_GetTick>
 8002034:	0002      	movs	r2, r0
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800203c:	429a      	cmp	r2, r3
 800203e:	d802      	bhi.n	8002046 <HAL_SPI_TransmitReceive+0x33a>
 8002040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002042:	3301      	adds	r3, #1
 8002044:	d102      	bne.n	800204c <HAL_SPI_TransmitReceive+0x340>
 8002046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002048:	2b00      	cmp	r3, #0
 800204a:	d104      	bne.n	8002056 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800204c:	2323      	movs	r3, #35	; 0x23
 800204e:	18fb      	adds	r3, r7, r3
 8002050:	2203      	movs	r2, #3
 8002052:	701a      	strb	r2, [r3, #0]
        goto error;
 8002054:	e01b      	b.n	800208e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800205a:	b29b      	uxth	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d19d      	bne.n	8001f9c <HAL_SPI_TransmitReceive+0x290>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2246      	movs	r2, #70	; 0x46
 8002064:	5a9b      	ldrh	r3, [r3, r2]
 8002066:	b29b      	uxth	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d197      	bne.n	8001f9c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	0018      	movs	r0, r3
 8002074:	f000 f94c 	bl	8002310 <SPI_EndRxTxTransaction>
 8002078:	1e03      	subs	r3, r0, #0
 800207a:	d007      	beq.n	800208c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800207c:	2323      	movs	r3, #35	; 0x23
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	661a      	str	r2, [r3, #96]	; 0x60
 800208a:	e000      	b.n	800208e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800208c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	225d      	movs	r2, #93	; 0x5d
 8002092:	2101      	movs	r1, #1
 8002094:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	225c      	movs	r2, #92	; 0x5c
 800209a:	2100      	movs	r1, #0
 800209c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800209e:	2323      	movs	r3, #35	; 0x23
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	781b      	ldrb	r3, [r3, #0]
}
 80020a4:	0018      	movs	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b00a      	add	sp, #40	; 0x28
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	ffffefff 	.word	0xffffefff

080020b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	1dfb      	adds	r3, r7, #7
 80020be:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80020c0:	f7fe fe84 	bl	8000dcc <HAL_GetTick>
 80020c4:	0002      	movs	r2, r0
 80020c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	18d3      	adds	r3, r2, r3
 80020ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80020d0:	f7fe fe7c 	bl	8000dcc <HAL_GetTick>
 80020d4:	0003      	movs	r3, r0
 80020d6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020d8:	4b3a      	ldr	r3, [pc, #232]	; (80021c4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	015b      	lsls	r3, r3, #5
 80020de:	0d1b      	lsrs	r3, r3, #20
 80020e0:	69fa      	ldr	r2, [r7, #28]
 80020e2:	4353      	muls	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020e6:	e058      	b.n	800219a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	3301      	adds	r3, #1
 80020ec:	d055      	beq.n	800219a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020ee:	f7fe fe6d 	bl	8000dcc <HAL_GetTick>
 80020f2:	0002      	movs	r2, r0
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	69fa      	ldr	r2, [r7, #28]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d902      	bls.n	8002104 <SPI_WaitFlagStateUntilTimeout+0x54>
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d142      	bne.n	800218a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	21e0      	movs	r1, #224	; 0xe0
 8002110:	438a      	bics	r2, r1
 8002112:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	2382      	movs	r3, #130	; 0x82
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	429a      	cmp	r2, r3
 800211e:	d113      	bne.n	8002148 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	429a      	cmp	r2, r3
 800212a:	d005      	beq.n	8002138 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	429a      	cmp	r2, r3
 8002136:	d107      	bne.n	8002148 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2140      	movs	r1, #64	; 0x40
 8002144:	438a      	bics	r2, r1
 8002146:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	019b      	lsls	r3, r3, #6
 8002150:	429a      	cmp	r2, r3
 8002152:	d110      	bne.n	8002176 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	491a      	ldr	r1, [pc, #104]	; (80021c8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002160:	400a      	ands	r2, r1
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2180      	movs	r1, #128	; 0x80
 8002170:	0189      	lsls	r1, r1, #6
 8002172:	430a      	orrs	r2, r1
 8002174:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	225d      	movs	r2, #93	; 0x5d
 800217a:	2101      	movs	r1, #1
 800217c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	225c      	movs	r2, #92	; 0x5c
 8002182:	2100      	movs	r1, #0
 8002184:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e017      	b.n	80021ba <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	3b01      	subs	r3, #1
 8002198:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	4013      	ands	r3, r2
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	425a      	negs	r2, r3
 80021aa:	4153      	adcs	r3, r2
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	001a      	movs	r2, r3
 80021b0:	1dfb      	adds	r3, r7, #7
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d197      	bne.n	80020e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	0018      	movs	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	b008      	add	sp, #32
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	20000000 	.word	0x20000000
 80021c8:	ffffdfff 	.word	0xffffdfff

080021cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80021da:	2317      	movs	r3, #23
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80021e2:	f7fe fdf3 	bl	8000dcc <HAL_GetTick>
 80021e6:	0002      	movs	r2, r0
 80021e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	18d3      	adds	r3, r2, r3
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80021f2:	f7fe fdeb 	bl	8000dcc <HAL_GetTick>
 80021f6:	0003      	movs	r3, r0
 80021f8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	330c      	adds	r3, #12
 8002200:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002202:	4b41      	ldr	r3, [pc, #260]	; (8002308 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	0013      	movs	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	189b      	adds	r3, r3, r2
 800220c:	00da      	lsls	r2, r3, #3
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	0d1b      	lsrs	r3, r3, #20
 8002212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002214:	4353      	muls	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002218:	e068      	b.n	80022ec <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	23c0      	movs	r3, #192	; 0xc0
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	429a      	cmp	r2, r3
 8002222:	d10a      	bne.n	800223a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d107      	bne.n	800223a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	2117      	movs	r1, #23
 8002232:	187b      	adds	r3, r7, r1
 8002234:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002236:	187b      	adds	r3, r7, r1
 8002238:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	d055      	beq.n	80022ec <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002240:	f7fe fdc4 	bl	8000dcc <HAL_GetTick>
 8002244:	0002      	movs	r2, r0
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224c:	429a      	cmp	r2, r3
 800224e:	d902      	bls.n	8002256 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	2b00      	cmp	r3, #0
 8002254:	d142      	bne.n	80022dc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	21e0      	movs	r1, #224	; 0xe0
 8002262:	438a      	bics	r2, r1
 8002264:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	2382      	movs	r3, #130	; 0x82
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	429a      	cmp	r2, r3
 8002270:	d113      	bne.n	800229a <SPI_WaitFifoStateUntilTimeout+0xce>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	429a      	cmp	r2, r3
 800227c:	d005      	beq.n	800228a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	429a      	cmp	r2, r3
 8002288:	d107      	bne.n	800229a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2140      	movs	r1, #64	; 0x40
 8002296:	438a      	bics	r2, r1
 8002298:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	019b      	lsls	r3, r3, #6
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d110      	bne.n	80022c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4916      	ldr	r1, [pc, #88]	; (800230c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80022b2:	400a      	ands	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	0189      	lsls	r1, r1, #6
 80022c4:	430a      	orrs	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	225d      	movs	r2, #93	; 0x5d
 80022cc:	2101      	movs	r1, #1
 80022ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	225c      	movs	r2, #92	; 0x5c
 80022d4:	2100      	movs	r1, #0
 80022d6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e010      	b.n	80022fe <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	4013      	ands	r3, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d18e      	bne.n	800221a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	0018      	movs	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	b00a      	add	sp, #40	; 0x28
 8002304:	bd80      	pop	{r7, pc}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	20000000 	.word	0x20000000
 800230c:	ffffdfff 	.word	0xffffdfff

08002310 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af02      	add	r7, sp, #8
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	23c0      	movs	r3, #192	; 0xc0
 8002320:	0159      	lsls	r1, r3, #5
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	0013      	movs	r3, r2
 800232a:	2200      	movs	r2, #0
 800232c:	f7ff ff4e 	bl	80021cc <SPI_WaitFifoStateUntilTimeout>
 8002330:	1e03      	subs	r3, r0, #0
 8002332:	d007      	beq.n	8002344 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002338:	2220      	movs	r2, #32
 800233a:	431a      	orrs	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e027      	b.n	8002394 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	0013      	movs	r3, r2
 800234e:	2200      	movs	r2, #0
 8002350:	2180      	movs	r1, #128	; 0x80
 8002352:	f7ff fead 	bl	80020b0 <SPI_WaitFlagStateUntilTimeout>
 8002356:	1e03      	subs	r3, r0, #0
 8002358:	d007      	beq.n	800236a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800235e:	2220      	movs	r2, #32
 8002360:	431a      	orrs	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e014      	b.n	8002394 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	23c0      	movs	r3, #192	; 0xc0
 800236e:	00d9      	lsls	r1, r3, #3
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	0013      	movs	r3, r2
 8002378:	2200      	movs	r2, #0
 800237a:	f7ff ff27 	bl	80021cc <SPI_WaitFifoStateUntilTimeout>
 800237e:	1e03      	subs	r3, r0, #0
 8002380:	d007      	beq.n	8002392 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002386:	2220      	movs	r2, #32
 8002388:	431a      	orrs	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e000      	b.n	8002394 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	b004      	add	sp, #16
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e042      	b.n	8002434 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	223d      	movs	r2, #61	; 0x3d
 80023b2:	5c9b      	ldrb	r3, [r3, r2]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d107      	bne.n	80023ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	223c      	movs	r2, #60	; 0x3c
 80023be:	2100      	movs	r1, #0
 80023c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 f839 	bl	800243c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	223d      	movs	r2, #61	; 0x3d
 80023ce:	2102      	movs	r1, #2
 80023d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3304      	adds	r3, #4
 80023da:	0019      	movs	r1, r3
 80023dc:	0010      	movs	r0, r2
 80023de:	f000 f9b7 	bl	8002750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2246      	movs	r2, #70	; 0x46
 80023e6:	2101      	movs	r1, #1
 80023e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	223e      	movs	r2, #62	; 0x3e
 80023ee:	2101      	movs	r1, #1
 80023f0:	5499      	strb	r1, [r3, r2]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	223f      	movs	r2, #63	; 0x3f
 80023f6:	2101      	movs	r1, #1
 80023f8:	5499      	strb	r1, [r3, r2]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2240      	movs	r2, #64	; 0x40
 80023fe:	2101      	movs	r1, #1
 8002400:	5499      	strb	r1, [r3, r2]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2241      	movs	r2, #65	; 0x41
 8002406:	2101      	movs	r1, #1
 8002408:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2242      	movs	r2, #66	; 0x42
 800240e:	2101      	movs	r1, #1
 8002410:	5499      	strb	r1, [r3, r2]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2243      	movs	r2, #67	; 0x43
 8002416:	2101      	movs	r1, #1
 8002418:	5499      	strb	r1, [r3, r2]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2244      	movs	r2, #68	; 0x44
 800241e:	2101      	movs	r1, #1
 8002420:	5499      	strb	r1, [r3, r2]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2245      	movs	r2, #69	; 0x45
 8002426:	2101      	movs	r1, #1
 8002428:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	223d      	movs	r2, #61	; 0x3d
 800242e:	2101      	movs	r1, #1
 8002430:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	b002      	add	sp, #8
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002444:	46c0      	nop			; (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	b002      	add	sp, #8
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	223d      	movs	r2, #61	; 0x3d
 8002458:	5c9b      	ldrb	r3, [r3, r2]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b01      	cmp	r3, #1
 800245e:	d001      	beq.n	8002464 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e035      	b.n	80024d0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	223d      	movs	r2, #61	; 0x3d
 8002468:	2102      	movs	r1, #2
 800246a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2101      	movs	r1, #1
 8002478:	430a      	orrs	r2, r1
 800247a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <HAL_TIM_Base_Start_IT+0x8c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d009      	beq.n	800249a <HAL_TIM_Base_Start_IT+0x4e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a14      	ldr	r2, [pc, #80]	; (80024dc <HAL_TIM_Base_Start_IT+0x90>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d004      	beq.n	800249a <HAL_TIM_Base_Start_IT+0x4e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <HAL_TIM_Base_Start_IT+0x94>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d111      	bne.n	80024be <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2207      	movs	r2, #7
 80024a2:	4013      	ands	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2b06      	cmp	r3, #6
 80024aa:	d010      	beq.n	80024ce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2101      	movs	r1, #1
 80024b8:	430a      	orrs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024bc:	e007      	b.n	80024ce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2101      	movs	r1, #1
 80024ca:	430a      	orrs	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	0018      	movs	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b004      	add	sp, #16
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40012c00 	.word	0x40012c00
 80024dc:	40000400 	.word	0x40000400
 80024e0:	40014000 	.word	0x40014000

080024e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2202      	movs	r2, #2
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d124      	bne.n	8002544 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2202      	movs	r2, #2
 8002502:	4013      	ands	r3, r2
 8002504:	2b02      	cmp	r3, #2
 8002506:	d11d      	bne.n	8002544 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2203      	movs	r2, #3
 800250e:	4252      	negs	r2, r2
 8002510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	2203      	movs	r2, #3
 8002520:	4013      	ands	r3, r2
 8002522:	d004      	beq.n	800252e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	0018      	movs	r0, r3
 8002528:	f000 f8fa 	bl	8002720 <HAL_TIM_IC_CaptureCallback>
 800252c:	e007      	b.n	800253e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f000 f8ed 	bl	8002710 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	0018      	movs	r0, r3
 800253a:	f000 f8f9 	bl	8002730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	2204      	movs	r2, #4
 800254c:	4013      	ands	r3, r2
 800254e:	2b04      	cmp	r3, #4
 8002550:	d125      	bne.n	800259e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2204      	movs	r2, #4
 800255a:	4013      	ands	r3, r2
 800255c:	2b04      	cmp	r3, #4
 800255e:	d11e      	bne.n	800259e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2205      	movs	r2, #5
 8002566:	4252      	negs	r2, r2
 8002568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2202      	movs	r2, #2
 800256e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699a      	ldr	r2, [r3, #24]
 8002576:	23c0      	movs	r3, #192	; 0xc0
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4013      	ands	r3, r2
 800257c:	d004      	beq.n	8002588 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	0018      	movs	r0, r3
 8002582:	f000 f8cd 	bl	8002720 <HAL_TIM_IC_CaptureCallback>
 8002586:	e007      	b.n	8002598 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	0018      	movs	r0, r3
 800258c:	f000 f8c0 	bl	8002710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	0018      	movs	r0, r3
 8002594:	f000 f8cc 	bl	8002730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	2208      	movs	r2, #8
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d124      	bne.n	80025f6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2208      	movs	r2, #8
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d11d      	bne.n	80025f6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2209      	movs	r2, #9
 80025c0:	4252      	negs	r2, r2
 80025c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2204      	movs	r2, #4
 80025c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	2203      	movs	r2, #3
 80025d2:	4013      	ands	r3, r2
 80025d4:	d004      	beq.n	80025e0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	0018      	movs	r0, r3
 80025da:	f000 f8a1 	bl	8002720 <HAL_TIM_IC_CaptureCallback>
 80025de:	e007      	b.n	80025f0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 f894 	bl	8002710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f000 f8a0 	bl	8002730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2210      	movs	r2, #16
 80025fe:	4013      	ands	r3, r2
 8002600:	2b10      	cmp	r3, #16
 8002602:	d125      	bne.n	8002650 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2210      	movs	r2, #16
 800260c:	4013      	ands	r3, r2
 800260e:	2b10      	cmp	r3, #16
 8002610:	d11e      	bne.n	8002650 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2211      	movs	r2, #17
 8002618:	4252      	negs	r2, r2
 800261a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2208      	movs	r2, #8
 8002620:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	69da      	ldr	r2, [r3, #28]
 8002628:	23c0      	movs	r3, #192	; 0xc0
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4013      	ands	r3, r2
 800262e:	d004      	beq.n	800263a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	0018      	movs	r0, r3
 8002634:	f000 f874 	bl	8002720 <HAL_TIM_IC_CaptureCallback>
 8002638:	e007      	b.n	800264a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	0018      	movs	r0, r3
 800263e:	f000 f867 	bl	8002710 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	0018      	movs	r0, r3
 8002646:	f000 f873 	bl	8002730 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2201      	movs	r2, #1
 8002658:	4013      	ands	r3, r2
 800265a:	2b01      	cmp	r3, #1
 800265c:	d10f      	bne.n	800267e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	4013      	ands	r3, r2
 8002668:	2b01      	cmp	r3, #1
 800266a:	d108      	bne.n	800267e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2202      	movs	r2, #2
 8002672:	4252      	negs	r2, r2
 8002674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	0018      	movs	r0, r3
 800267a:	f7fe f9f7 	bl	8000a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	2280      	movs	r2, #128	; 0x80
 8002686:	4013      	ands	r3, r2
 8002688:	2b80      	cmp	r3, #128	; 0x80
 800268a:	d10f      	bne.n	80026ac <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	4013      	ands	r3, r2
 8002696:	2b80      	cmp	r3, #128	; 0x80
 8002698:	d108      	bne.n	80026ac <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2281      	movs	r2, #129	; 0x81
 80026a0:	4252      	negs	r2, r2
 80026a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	0018      	movs	r0, r3
 80026a8:	f000 f8d0 	bl	800284c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2240      	movs	r2, #64	; 0x40
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b40      	cmp	r3, #64	; 0x40
 80026b8:	d10f      	bne.n	80026da <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2240      	movs	r2, #64	; 0x40
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b40      	cmp	r3, #64	; 0x40
 80026c6:	d108      	bne.n	80026da <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2241      	movs	r2, #65	; 0x41
 80026ce:	4252      	negs	r2, r2
 80026d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f000 f833 	bl	8002740 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	2220      	movs	r2, #32
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	d10f      	bne.n	8002708 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	d108      	bne.n	8002708 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2221      	movs	r2, #33	; 0x21
 80026fc:	4252      	negs	r2, r2
 80026fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	0018      	movs	r0, r3
 8002704:	f000 f89a 	bl	800283c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	b002      	add	sp, #8
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002718:	46c0      	nop			; (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	b002      	add	sp, #8
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	b002      	add	sp, #8
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	46bd      	mov	sp, r7
 800273c:	b002      	add	sp, #8
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002748:	46c0      	nop			; (mov r8, r8)
 800274a:	46bd      	mov	sp, r7
 800274c:	b002      	add	sp, #8
 800274e:	bd80      	pop	{r7, pc}

08002750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a2f      	ldr	r2, [pc, #188]	; (8002820 <TIM_Base_SetConfig+0xd0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d003      	beq.n	8002770 <TIM_Base_SetConfig+0x20>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a2e      	ldr	r2, [pc, #184]	; (8002824 <TIM_Base_SetConfig+0xd4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d108      	bne.n	8002782 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2270      	movs	r2, #112	; 0x70
 8002774:	4393      	bics	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a26      	ldr	r2, [pc, #152]	; (8002820 <TIM_Base_SetConfig+0xd0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <TIM_Base_SetConfig+0x62>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a25      	ldr	r2, [pc, #148]	; (8002824 <TIM_Base_SetConfig+0xd4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00f      	beq.n	80027b2 <TIM_Base_SetConfig+0x62>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a24      	ldr	r2, [pc, #144]	; (8002828 <TIM_Base_SetConfig+0xd8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00b      	beq.n	80027b2 <TIM_Base_SetConfig+0x62>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a23      	ldr	r2, [pc, #140]	; (800282c <TIM_Base_SetConfig+0xdc>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d007      	beq.n	80027b2 <TIM_Base_SetConfig+0x62>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a22      	ldr	r2, [pc, #136]	; (8002830 <TIM_Base_SetConfig+0xe0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d003      	beq.n	80027b2 <TIM_Base_SetConfig+0x62>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a21      	ldr	r2, [pc, #132]	; (8002834 <TIM_Base_SetConfig+0xe4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d108      	bne.n	80027c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4a20      	ldr	r2, [pc, #128]	; (8002838 <TIM_Base_SetConfig+0xe8>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	4393      	bics	r3, r2
 80027ca:	001a      	movs	r2, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a0c      	ldr	r2, [pc, #48]	; (8002820 <TIM_Base_SetConfig+0xd0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00b      	beq.n	800280a <TIM_Base_SetConfig+0xba>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a0d      	ldr	r2, [pc, #52]	; (800282c <TIM_Base_SetConfig+0xdc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d007      	beq.n	800280a <TIM_Base_SetConfig+0xba>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <TIM_Base_SetConfig+0xe0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d003      	beq.n	800280a <TIM_Base_SetConfig+0xba>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <TIM_Base_SetConfig+0xe4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d103      	bne.n	8002812 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	615a      	str	r2, [r3, #20]
}
 8002818:	46c0      	nop			; (mov r8, r8)
 800281a:	46bd      	mov	sp, r7
 800281c:	b004      	add	sp, #16
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40012c00 	.word	0x40012c00
 8002824:	40000400 	.word	0x40000400
 8002828:	40002000 	.word	0x40002000
 800282c:	40014000 	.word	0x40014000
 8002830:	40014400 	.word	0x40014400
 8002834:	40014800 	.word	0x40014800
 8002838:	fffffcff 	.word	0xfffffcff

0800283c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002844:	46c0      	nop			; (mov r8, r8)
 8002846:	46bd      	mov	sp, r7
 8002848:	b002      	add	sp, #8
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002854:	46c0      	nop			; (mov r8, r8)
 8002856:	46bd      	mov	sp, r7
 8002858:	b002      	add	sp, #8
 800285a:	bd80      	pop	{r7, pc}

0800285c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002860:	4a06      	ldr	r2, [pc, #24]	; (800287c <MX_FATFS_Init+0x20>)
 8002862:	4b07      	ldr	r3, [pc, #28]	; (8002880 <MX_FATFS_Init+0x24>)
 8002864:	0011      	movs	r1, r2
 8002866:	0018      	movs	r0, r3
 8002868:	f004 ff44 	bl	80076f4 <FATFS_LinkDriver>
 800286c:	0003      	movs	r3, r0
 800286e:	001a      	movs	r2, r3
 8002870:	4b04      	ldr	r3, [pc, #16]	; (8002884 <MX_FATFS_Init+0x28>)
 8002872:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	20000488 	.word	0x20000488
 8002880:	2000000c 	.word	0x2000000c
 8002884:	20000484 	.word	0x20000484

08002888 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	0002      	movs	r2, r0
 8002890:	1dfb      	adds	r3, r7, #7
 8002892:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_initialize(pdrv);
 8002894:	1dfb      	adds	r3, r7, #7
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	0018      	movs	r0, r3
 800289a:	f000 fa21 	bl	8002ce0 <USER_SPI_initialize>
 800289e:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 80028a0:	0018      	movs	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b002      	add	sp, #8
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	0002      	movs	r2, r0
 80028b0:	1dfb      	adds	r3, r7, #7
 80028b2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 80028b4:	1dfb      	adds	r3, r7, #7
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 fb29 	bl	8002f10 <USER_SPI_status>
 80028be:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b002      	add	sp, #8
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80028c8:	b5b0      	push	{r4, r5, r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	250f      	movs	r5, #15
 80028d6:	197b      	adds	r3, r7, r5
 80028d8:	1c02      	adds	r2, r0, #0
 80028da:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 80028dc:	683c      	ldr	r4, [r7, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	197b      	adds	r3, r7, r5
 80028e4:	7818      	ldrb	r0, [r3, #0]
 80028e6:	0023      	movs	r3, r4
 80028e8:	f000 fb28 	bl	8002f3c <USER_SPI_read>
 80028ec:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 80028ee:	0018      	movs	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b004      	add	sp, #16
 80028f4:	bdb0      	pop	{r4, r5, r7, pc}

080028f6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80028f6:	b5b0      	push	{r4, r5, r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	250f      	movs	r5, #15
 8002904:	197b      	adds	r3, r7, r5
 8002906:	1c02      	adds	r2, r0, #0
 8002908:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 800290a:	683c      	ldr	r4, [r7, #0]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	197b      	adds	r3, r7, r5
 8002912:	7818      	ldrb	r0, [r3, #0]
 8002914:	0023      	movs	r3, r4
 8002916:	f000 fb7d 	bl	8003014 <USER_SPI_write>
 800291a:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b004      	add	sp, #16
 8002922:	bdb0      	pop	{r4, r5, r7, pc}

08002924 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	603a      	str	r2, [r7, #0]
 800292c:	1dfb      	adds	r3, r7, #7
 800292e:	1c02      	adds	r2, r0, #0
 8002930:	701a      	strb	r2, [r3, #0]
 8002932:	1dbb      	adds	r3, r7, #6
 8002934:	1c0a      	adds	r2, r1, #0
 8002936:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	1dbb      	adds	r3, r7, #6
 800293c:	7819      	ldrb	r1, [r3, #0]
 800293e:	1dfb      	adds	r3, r7, #7
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	0018      	movs	r0, r3
 8002944:	f000 fbe6 	bl	8003114 <USER_SPI_ioctl>
 8002948:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 800294a:	0018      	movs	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	b002      	add	sp, #8
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <SPI_Timer_On>:
static BYTE CardType; /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
	spiTimerTickStart = HAL_GetTick();
 800295c:	f7fe fa36 	bl	8000dcc <HAL_GetTick>
 8002960:	0002      	movs	r2, r0
 8002962:	4b04      	ldr	r3, [pc, #16]	; (8002974 <SPI_Timer_On+0x20>)
 8002964:	601a      	str	r2, [r3, #0]
	spiTimerTickDelay = waitTicks;
 8002966:	4b04      	ldr	r3, [pc, #16]	; (8002978 <SPI_Timer_On+0x24>)
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	601a      	str	r2, [r3, #0]
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b002      	add	sp, #8
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000490 	.word	0x20000490
 8002978:	20000494 	.word	0x20000494

0800297c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
	return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8002980:	f7fe fa24 	bl	8000dcc <HAL_GetTick>
 8002984:	0002      	movs	r2, r0
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <SPI_Timer_Status+0x24>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	1ad2      	subs	r2, r2, r3
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <SPI_Timer_Status+0x28>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	419b      	sbcs	r3, r3
 8002994:	425b      	negs	r3, r3
 8002996:	b2db      	uxtb	r3, r3
}
 8002998:	0018      	movs	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	20000490 	.word	0x20000490
 80029a4:	20000494 	.word	0x20000494

080029a8 <xchg_spi>:
/* SPI controls (Platform dependent)                                     */
/*-----------------------------------------------------------------------*/

/* Exchange a byte */
static BYTE xchg_spi(BYTE dat /* Data to send */
) {
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	0002      	movs	r2, r0
 80029b0:	1dfb      	adds	r3, r7, #7
 80029b2:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
	HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80029b4:	240f      	movs	r4, #15
 80029b6:	193a      	adds	r2, r7, r4
 80029b8:	1df9      	adds	r1, r7, #7
 80029ba:	4806      	ldr	r0, [pc, #24]	; (80029d4 <xchg_spi+0x2c>)
 80029bc:	2332      	movs	r3, #50	; 0x32
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	2301      	movs	r3, #1
 80029c2:	f7ff f9a3 	bl	8001d0c <HAL_SPI_TransmitReceive>
	return rxDat;
 80029c6:	193b      	adds	r3, r7, r4
 80029c8:	781b      	ldrb	r3, [r3, #0]
}
 80029ca:	0018      	movs	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b005      	add	sp, #20
 80029d0:	bd90      	pop	{r4, r7, pc}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	2000039c 	.word	0x2000039c

080029d8 <rcvr_spi_multi>:

/* Receive multiple byte */
static
void rcvr_spi_multi(BYTE *buff, /* Pointer to data buffer */
UINT btr /* Number of bytes to receive (even number) */
) {
 80029d8:	b590      	push	{r4, r7, lr}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
	for (UINT i = 0; i < btr; i++) {
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	e00a      	b.n	80029fe <rcvr_spi_multi+0x26>
		*(buff + i) = xchg_spi(0xFF);
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	18d4      	adds	r4, r2, r3
 80029ee:	20ff      	movs	r0, #255	; 0xff
 80029f0:	f7ff ffda 	bl	80029a8 <xchg_spi>
 80029f4:	0003      	movs	r3, r0
 80029f6:	7023      	strb	r3, [r4, #0]
	for (UINT i = 0; i < btr; i++) {
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3301      	adds	r3, #1
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d3f0      	bcc.n	80029e8 <rcvr_spi_multi+0x10>
	}
}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	46c0      	nop			; (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b005      	add	sp, #20
 8002a0e:	bd90      	pop	{r4, r7, pc}

08002a10 <xmit_spi_multi>:
#if _USE_WRITE
/* Send multiple byte */
static
void xmit_spi_multi(const BYTE *buff, /* Pointer to the data */
UINT btx /* Number of bytes to send (even number) */
) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
	for (UINT i = 0; i < btx; i++) {
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e009      	b.n	8002a34 <xmit_spi_multi+0x24>
		xchg_spi(*(buff + i));
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	18d3      	adds	r3, r2, r3
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7ff ffbd 	bl	80029a8 <xchg_spi>
	for (UINT i = 0; i < btx; i++) {
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3301      	adds	r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d3f1      	bcc.n	8002a20 <xmit_spi_multi+0x10>
	}
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b004      	add	sp, #16
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <wait_ready>:
/*-----------------------------------------------------------------------*/

static
int wait_ready( /* 1:Ready, 0:Timeout */
UINT wt /* Timeout [ms] */
) {
 8002a46:	b5b0      	push	{r4, r5, r7, lr}
 8002a48:	b086      	sub	sp, #24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8002a4e:	f7fe f9bd 	bl	8000dcc <HAL_GetTick>
 8002a52:	0003      	movs	r3, r0
 8002a54:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t) wt;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8002a5a:	250f      	movs	r5, #15
 8002a5c:	197c      	adds	r4, r7, r5
 8002a5e:	20ff      	movs	r0, #255	; 0xff
 8002a60:	f7ff ffa2 	bl	80029a8 <xchg_spi>
 8002a64:	0003      	movs	r3, r0
 8002a66:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF
			&& ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay)); /* Wait for card goes ready or timeout */
 8002a68:	197b      	adds	r3, r7, r5
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2bff      	cmp	r3, #255	; 0xff
 8002a6e:	d007      	beq.n	8002a80 <wait_ready+0x3a>
 8002a70:	f7fe f9ac 	bl	8000dcc <HAL_GetTick>
 8002a74:	0002      	movs	r2, r0
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d8ec      	bhi.n	8002a5a <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 8002a80:	230f      	movs	r3, #15
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	3bff      	subs	r3, #255	; 0xff
 8002a88:	425a      	negs	r2, r3
 8002a8a:	4153      	adcs	r3, r2
 8002a8c:	b2db      	uxtb	r3, r3
}
 8002a8e:	0018      	movs	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b006      	add	sp, #24
 8002a94:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002a98 <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect(void) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
	CS_HIGH(); /* Set CS# high */
 8002a9c:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <despiselect+0x1c>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	2140      	movs	r1, #64	; 0x40
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f000 fe4a 	bl	800373c <gpio_write>
	xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002aa8:	20ff      	movs	r0, #255	; 0xff
 8002aaa:	f7ff ff7d 	bl	80029a8 <xchg_spi>

}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	48000400 	.word	0x48000400

08002ab8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect(void) /* 1:OK, 0:Timeout */
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	CS_LOW(); /* Set CS# low */
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <spiselect+0x34>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2140      	movs	r1, #64	; 0x40
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f000 fe3a 	bl	800373c <gpio_write>
	xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 8002ac8:	20ff      	movs	r0, #255	; 0xff
 8002aca:	f7ff ff6d 	bl	80029a8 <xchg_spi>
	if (wait_ready(500))
 8002ace:	23fa      	movs	r3, #250	; 0xfa
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f7ff ffb7 	bl	8002a46 <wait_ready>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d001      	beq.n	8002ae0 <spiselect+0x28>
		return 1; /* Wait for card ready */
 8002adc:	2301      	movs	r3, #1
 8002ade:	e002      	b.n	8002ae6 <spiselect+0x2e>

	despiselect();
 8002ae0:	f7ff ffda 	bl	8002a98 <despiselect>
	return 0; /* Timeout */
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	48000400 	.word	0x48000400

08002af0 <rcvr_datablock>:

static
int rcvr_datablock( /* 1:OK, 0:Error */
BYTE *buff, /* Data buffer */
UINT btr /* Data block length (byte) */
) {
 8002af0:	b5b0      	push	{r4, r5, r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
	BYTE token;

	SPI_Timer_On(200);
 8002afa:	20c8      	movs	r0, #200	; 0xc8
 8002afc:	f7ff ff2a 	bl	8002954 <SPI_Timer_On>
	do { /* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002b00:	250f      	movs	r5, #15
 8002b02:	197c      	adds	r4, r7, r5
 8002b04:	20ff      	movs	r0, #255	; 0xff
 8002b06:	f7ff ff4f 	bl	80029a8 <xchg_spi>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002b0e:	197b      	adds	r3, r7, r5
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2bff      	cmp	r3, #255	; 0xff
 8002b14:	d103      	bne.n	8002b1e <rcvr_datablock+0x2e>
 8002b16:	f7ff ff31 	bl	800297c <SPI_Timer_Status>
 8002b1a:	1e03      	subs	r3, r0, #0
 8002b1c:	d1f0      	bne.n	8002b00 <rcvr_datablock+0x10>
	if (token != 0xFE)
 8002b1e:	230f      	movs	r3, #15
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2bfe      	cmp	r3, #254	; 0xfe
 8002b26:	d001      	beq.n	8002b2c <rcvr_datablock+0x3c>
		return 0; /* Function fails if invalid DataStart token or timeout */
 8002b28:	2300      	movs	r3, #0
 8002b2a:	e00c      	b.n	8002b46 <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr); /* Store trailing data to the buffer */
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	0011      	movs	r1, r2
 8002b32:	0018      	movs	r0, r3
 8002b34:	f7ff ff50 	bl	80029d8 <rcvr_spi_multi>
	xchg_spi(0xFF);
 8002b38:	20ff      	movs	r0, #255	; 0xff
 8002b3a:	f7ff ff35 	bl	80029a8 <xchg_spi>
	xchg_spi(0xFF); /* Discard CRC */
 8002b3e:	20ff      	movs	r0, #255	; 0xff
 8002b40:	f7ff ff32 	bl	80029a8 <xchg_spi>

	return 1; /* Function succeeded */
 8002b44:	2301      	movs	r3, #1
}
 8002b46:	0018      	movs	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b004      	add	sp, #16
 8002b4c:	bdb0      	pop	{r4, r5, r7, pc}

08002b4e <xmit_datablock>:
#if _USE_WRITE
static
int xmit_datablock( /* 1:OK, 0:Failed */
const BYTE *buff, /* Ponter to 512 byte data to be sent */
BYTE token /* Token */
) {
 8002b4e:	b5b0      	push	{r4, r5, r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	000a      	movs	r2, r1
 8002b58:	1cfb      	adds	r3, r7, #3
 8002b5a:	701a      	strb	r2, [r3, #0]
	BYTE resp;

	if (!wait_ready(500))
 8002b5c:	23fa      	movs	r3, #250	; 0xfa
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	0018      	movs	r0, r3
 8002b62:	f7ff ff70 	bl	8002a46 <wait_ready>
 8002b66:	1e03      	subs	r3, r0, #0
 8002b68:	d101      	bne.n	8002b6e <xmit_datablock+0x20>
		return 0; /* Wait for card ready */
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e025      	b.n	8002bba <xmit_datablock+0x6c>

	xchg_spi(token); /* Send token */
 8002b6e:	1cfb      	adds	r3, r7, #3
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	0018      	movs	r0, r3
 8002b74:	f7ff ff18 	bl	80029a8 <xchg_spi>
	if (token != 0xFD) { /* Send data if token is other than StopTran */
 8002b78:	1cfb      	adds	r3, r7, #3
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2bfd      	cmp	r3, #253	; 0xfd
 8002b7e:	d01b      	beq.n	8002bb8 <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512); /* Data */
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	009a      	lsls	r2, r3, #2
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	0011      	movs	r1, r2
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f7ff ff41 	bl	8002a10 <xmit_spi_multi>
		xchg_spi(0xFF);
 8002b8e:	20ff      	movs	r0, #255	; 0xff
 8002b90:	f7ff ff0a 	bl	80029a8 <xchg_spi>
		xchg_spi(0xFF); /* Dummy CRC */
 8002b94:	20ff      	movs	r0, #255	; 0xff
 8002b96:	f7ff ff07 	bl	80029a8 <xchg_spi>

		resp = xchg_spi(0xFF); /* Receive data resp */
 8002b9a:	250f      	movs	r5, #15
 8002b9c:	197c      	adds	r4, r7, r5
 8002b9e:	20ff      	movs	r0, #255	; 0xff
 8002ba0:	f7ff ff02 	bl	80029a8 <xchg_spi>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05)
 8002ba8:	197b      	adds	r3, r7, r5
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	221f      	movs	r2, #31
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d001      	beq.n	8002bb8 <xmit_datablock+0x6a>
			return 0; /* Function fails if the data packet was not accepted */
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e000      	b.n	8002bba <xmit_datablock+0x6c>
	}
	return 1;
 8002bb8:	2301      	movs	r3, #1
}
 8002bba:	0018      	movs	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	b004      	add	sp, #16
 8002bc0:	bdb0      	pop	{r4, r5, r7, pc}

08002bc2 <send_cmd>:
/*-----------------------------------------------------------------------*/

static BYTE send_cmd( /* Return value: R1 resp (bit7==1:Failed to send) */
BYTE cmd, /* Command index */
DWORD arg /* Argument */
) {
 8002bc2:	b5b0      	push	{r4, r5, r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	0002      	movs	r2, r0
 8002bca:	6039      	str	r1, [r7, #0]
 8002bcc:	1dfb      	adds	r3, r7, #7
 8002bce:	701a      	strb	r2, [r3, #0]
	BYTE n, res;

	if (cmd & 0x80) { /* Send a CMD55 prior to ACMD<n> */
 8002bd0:	1dfb      	adds	r3, r7, #7
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	b25b      	sxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	da15      	bge.n	8002c06 <send_cmd+0x44>
		cmd &= 0x7F;
 8002bda:	1dfb      	adds	r3, r7, #7
 8002bdc:	1dfa      	adds	r2, r7, #7
 8002bde:	7812      	ldrb	r2, [r2, #0]
 8002be0:	217f      	movs	r1, #127	; 0x7f
 8002be2:	400a      	ands	r2, r1
 8002be4:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 8002be6:	250e      	movs	r5, #14
 8002be8:	197c      	adds	r4, r7, r5
 8002bea:	2100      	movs	r1, #0
 8002bec:	2037      	movs	r0, #55	; 0x37
 8002bee:	f7ff ffe8 	bl	8002bc2 <send_cmd>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	7023      	strb	r3, [r4, #0]
		if (res > 1)
 8002bf6:	002a      	movs	r2, r5
 8002bf8:	18bb      	adds	r3, r7, r2
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d902      	bls.n	8002c06 <send_cmd+0x44>
			return res;
 8002c00:	18bb      	adds	r3, r7, r2
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	e067      	b.n	8002cd6 <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8002c06:	1dfb      	adds	r3, r7, #7
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d007      	beq.n	8002c1e <send_cmd+0x5c>
		despiselect();
 8002c0e:	f7ff ff43 	bl	8002a98 <despiselect>
		if (!spiselect())
 8002c12:	f7ff ff51 	bl	8002ab8 <spiselect>
 8002c16:	1e03      	subs	r3, r0, #0
 8002c18:	d101      	bne.n	8002c1e <send_cmd+0x5c>
			return 0xFF;
 8002c1a:	23ff      	movs	r3, #255	; 0xff
 8002c1c:	e05b      	b.n	8002cd6 <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd); /* Start + command index */
 8002c1e:	1dfb      	adds	r3, r7, #7
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2240      	movs	r2, #64	; 0x40
 8002c24:	4313      	orrs	r3, r2
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7ff febd 	bl	80029a8 <xchg_spi>
	xchg_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	0e1b      	lsrs	r3, r3, #24
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	0018      	movs	r0, r3
 8002c36:	f7ff feb7 	bl	80029a8 <xchg_spi>
	xchg_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	0c1b      	lsrs	r3, r3, #16
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	0018      	movs	r0, r3
 8002c42:	f7ff feb1 	bl	80029a8 <xchg_spi>
	xchg_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7ff feab 	bl	80029a8 <xchg_spi>
	xchg_spi((BYTE) arg); /* Argument[7..0] */
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	0018      	movs	r0, r3
 8002c58:	f7ff fea6 	bl	80029a8 <xchg_spi>
	n = 0x01; /* Dummy CRC + Stop */
 8002c5c:	210f      	movs	r1, #15
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0)
 8002c64:	1dfb      	adds	r3, r7, #7
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d102      	bne.n	8002c72 <send_cmd+0xb0>
		n = 0x95; /* Valid CRC for CMD0(0) */
 8002c6c:	187b      	adds	r3, r7, r1
 8002c6e:	2295      	movs	r2, #149	; 0x95
 8002c70:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8)
 8002c72:	1dfb      	adds	r3, r7, #7
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d103      	bne.n	8002c82 <send_cmd+0xc0>
		n = 0x87; /* Valid CRC for CMD8(0x1AA) */
 8002c7a:	230f      	movs	r3, #15
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	2287      	movs	r2, #135	; 0x87
 8002c80:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 8002c82:	230f      	movs	r3, #15
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7ff fe8d 	bl	80029a8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12)
 8002c8e:	1dfb      	adds	r3, r7, #7
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b0c      	cmp	r3, #12
 8002c94:	d102      	bne.n	8002c9c <send_cmd+0xda>
		xchg_spi(0xFF); /* Diacard following one byte when CMD12 */
 8002c96:	20ff      	movs	r0, #255	; 0xff
 8002c98:	f7ff fe86 	bl	80029a8 <xchg_spi>
	n = 10; /* Wait for response (10 bytes max) */
 8002c9c:	230f      	movs	r3, #15
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	220a      	movs	r2, #10
 8002ca2:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 8002ca4:	250e      	movs	r5, #14
 8002ca6:	197c      	adds	r4, r7, r5
 8002ca8:	20ff      	movs	r0, #255	; 0xff
 8002caa:	f7ff fe7d 	bl	80029a8 <xchg_spi>
 8002cae:	0003      	movs	r3, r0
 8002cb0:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8002cb2:	197b      	adds	r3, r7, r5
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	b25b      	sxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	da09      	bge.n	8002cd0 <send_cmd+0x10e>
 8002cbc:	210f      	movs	r1, #15
 8002cbe:	187b      	adds	r3, r7, r1
 8002cc0:	187a      	adds	r2, r7, r1
 8002cc2:	7812      	ldrb	r2, [r2, #0]
 8002cc4:	3a01      	subs	r2, #1
 8002cc6:	701a      	strb	r2, [r3, #0]
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1e9      	bne.n	8002ca4 <send_cmd+0xe2>

	return res; /* Return received response */
 8002cd0:	230e      	movs	r3, #14
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	781b      	ldrb	r3, [r3, #0]
}
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b004      	add	sp, #16
 8002cdc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002ce0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize(BYTE drv /* Physical drive number (0) */
) {
 8002ce0:	b5b0      	push	{r4, r5, r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	0002      	movs	r2, r0
 8002ce8:	1dfb      	adds	r3, r7, #7
 8002cea:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0)
 8002cec:	1dfb      	adds	r3, r7, #7
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <USER_SPI_initialize+0x18>
		return STA_NOINIT; /* Supports only drive 0 */
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e100      	b.n	8002efa <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK)
 8002cf8:	4b82      	ldr	r3, [pc, #520]	; (8002f04 <USER_SPI_initialize+0x224>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	001a      	movs	r2, r3
 8002d00:	2302      	movs	r3, #2
 8002d02:	4013      	ands	r3, r2
 8002d04:	d003      	beq.n	8002d0e <USER_SPI_initialize+0x2e>
		return Stat; /* Is card existing in the soket? */
 8002d06:	4b7f      	ldr	r3, [pc, #508]	; (8002f04 <USER_SPI_initialize+0x224>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	e0f5      	b.n	8002efa <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 8002d0e:	4b7e      	ldr	r3, [pc, #504]	; (8002f08 <USER_SPI_initialize+0x228>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2238      	movs	r2, #56	; 0x38
 8002d16:	4393      	bics	r3, r2
 8002d18:	001a      	movs	r2, r3
 8002d1a:	4b7b      	ldr	r3, [pc, #492]	; (8002f08 <USER_SPI_initialize+0x228>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2130      	movs	r1, #48	; 0x30
 8002d20:	430a      	orrs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--)
 8002d24:	230f      	movs	r3, #15
 8002d26:	18fb      	adds	r3, r7, r3
 8002d28:	220a      	movs	r2, #10
 8002d2a:	701a      	strb	r2, [r3, #0]
 8002d2c:	e008      	b.n	8002d40 <USER_SPI_initialize+0x60>
		xchg_spi(0xFF); /* Send 80 dummy clocks */
 8002d2e:	20ff      	movs	r0, #255	; 0xff
 8002d30:	f7ff fe3a 	bl	80029a8 <xchg_spi>
	for (n = 10; n; n--)
 8002d34:	210f      	movs	r1, #15
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	781a      	ldrb	r2, [r3, #0]
 8002d3a:	187b      	adds	r3, r7, r1
 8002d3c:	3a01      	subs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	240f      	movs	r4, #15
 8002d42:	193b      	adds	r3, r7, r4
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f1      	bne.n	8002d2e <USER_SPI_initialize+0x4e>

	ty = 0;
 8002d4a:	230d      	movs	r3, #13
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) { /* Put the card SPI/Idle state */
 8002d52:	2100      	movs	r1, #0
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7ff ff34 	bl	8002bc2 <send_cmd>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d000      	beq.n	8002d62 <USER_SPI_initialize+0x82>
 8002d60:	e0a6      	b.n	8002eb0 <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000); /* Initialization timeout = 1 sec */
 8002d62:	23fa      	movs	r3, #250	; 0xfa
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	0018      	movs	r0, r3
 8002d68:	f7ff fdf4 	bl	8002954 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDv2? */
 8002d6c:	23d5      	movs	r3, #213	; 0xd5
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	0019      	movs	r1, r3
 8002d72:	2008      	movs	r0, #8
 8002d74:	f7ff ff25 	bl	8002bc2 <send_cmd>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d162      	bne.n	8002e44 <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++)
 8002d7e:	193b      	adds	r3, r7, r4
 8002d80:	2200      	movs	r2, #0
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	e00f      	b.n	8002da6 <USER_SPI_initialize+0xc6>
				ocr[n] = xchg_spi(0xFF); /* Get 32 bit return value of R7 resp */
 8002d86:	250f      	movs	r5, #15
 8002d88:	197b      	adds	r3, r7, r5
 8002d8a:	781c      	ldrb	r4, [r3, #0]
 8002d8c:	20ff      	movs	r0, #255	; 0xff
 8002d8e:	f7ff fe0b 	bl	80029a8 <xchg_spi>
 8002d92:	0003      	movs	r3, r0
 8002d94:	001a      	movs	r2, r3
 8002d96:	2308      	movs	r3, #8
 8002d98:	18fb      	adds	r3, r7, r3
 8002d9a:	551a      	strb	r2, [r3, r4]
			for (n = 0; n < 4; n++)
 8002d9c:	197b      	adds	r3, r7, r5
 8002d9e:	781a      	ldrb	r2, [r3, #0]
 8002da0:	197b      	adds	r3, r7, r5
 8002da2:	3201      	adds	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	230f      	movs	r3, #15
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d9ea      	bls.n	8002d86 <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* Is the card supports vcc of 2.7-3.6V? */
 8002db0:	2208      	movs	r2, #8
 8002db2:	18bb      	adds	r3, r7, r2
 8002db4:	789b      	ldrb	r3, [r3, #2]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d000      	beq.n	8002dbc <USER_SPI_initialize+0xdc>
 8002dba:	e079      	b.n	8002eb0 <USER_SPI_initialize+0x1d0>
 8002dbc:	18bb      	adds	r3, r7, r2
 8002dbe:	78db      	ldrb	r3, [r3, #3]
 8002dc0:	2baa      	cmp	r3, #170	; 0xaa
 8002dc2:	d000      	beq.n	8002dc6 <USER_SPI_initialize+0xe6>
 8002dc4:	e074      	b.n	8002eb0 <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30))
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	f7ff fdd8 	bl	800297c <SPI_Timer_Status>
 8002dcc:	1e03      	subs	r3, r0, #0
 8002dce:	d007      	beq.n	8002de0 <USER_SPI_initialize+0x100>
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	05db      	lsls	r3, r3, #23
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	20a9      	movs	r0, #169	; 0xa9
 8002dd8:	f7ff fef3 	bl	8002bc2 <send_cmd>
 8002ddc:	1e03      	subs	r3, r0, #0
 8002dde:	d1f3      	bne.n	8002dc8 <USER_SPI_initialize+0xe8>
					; /* Wait for end of initialization with ACMD41(HCS) */
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) { /* Check CCS bit in the OCR */
 8002de0:	f7ff fdcc 	bl	800297c <SPI_Timer_Status>
 8002de4:	1e03      	subs	r3, r0, #0
 8002de6:	d063      	beq.n	8002eb0 <USER_SPI_initialize+0x1d0>
 8002de8:	2100      	movs	r1, #0
 8002dea:	203a      	movs	r0, #58	; 0x3a
 8002dec:	f7ff fee9 	bl	8002bc2 <send_cmd>
 8002df0:	1e03      	subs	r3, r0, #0
 8002df2:	d15d      	bne.n	8002eb0 <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++)
 8002df4:	230f      	movs	r3, #15
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]
 8002dfc:	e00f      	b.n	8002e1e <USER_SPI_initialize+0x13e>
						ocr[n] = xchg_spi(0xFF);
 8002dfe:	250f      	movs	r5, #15
 8002e00:	197b      	adds	r3, r7, r5
 8002e02:	781c      	ldrb	r4, [r3, #0]
 8002e04:	20ff      	movs	r0, #255	; 0xff
 8002e06:	f7ff fdcf 	bl	80029a8 <xchg_spi>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	2308      	movs	r3, #8
 8002e10:	18fb      	adds	r3, r7, r3
 8002e12:	551a      	strb	r2, [r3, r4]
					for (n = 0; n < 4; n++)
 8002e14:	197b      	adds	r3, r7, r5
 8002e16:	781a      	ldrb	r2, [r3, #0]
 8002e18:	197b      	adds	r3, r7, r5
 8002e1a:	3201      	adds	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	230f      	movs	r3, #15
 8002e20:	18fb      	adds	r3, r7, r3
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d9ea      	bls.n	8002dfe <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* Card id SDv2 */
 8002e28:	2308      	movs	r3, #8
 8002e2a:	18fb      	adds	r3, r7, r3
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	001a      	movs	r2, r3
 8002e30:	2340      	movs	r3, #64	; 0x40
 8002e32:	4013      	ands	r3, r2
 8002e34:	d001      	beq.n	8002e3a <USER_SPI_initialize+0x15a>
 8002e36:	220c      	movs	r2, #12
 8002e38:	e000      	b.n	8002e3c <USER_SPI_initialize+0x15c>
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	230d      	movs	r3, #13
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	e035      	b.n	8002eb0 <USER_SPI_initialize+0x1d0>
				}
			}
		} else { /* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) { /* SDv1 or MMC? */
 8002e44:	2100      	movs	r1, #0
 8002e46:	20a9      	movs	r0, #169	; 0xa9
 8002e48:	f7ff febb 	bl	8002bc2 <send_cmd>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d808      	bhi.n	8002e64 <USER_SPI_initialize+0x184>
				ty = CT_SD1;
 8002e52:	230d      	movs	r3, #13
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2202      	movs	r2, #2
 8002e58:	701a      	strb	r2, [r3, #0]
				cmd = ACMD41; /* SDv1 (ACMD41(0)) */
 8002e5a:	230e      	movs	r3, #14
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	22a9      	movs	r2, #169	; 0xa9
 8002e60:	701a      	strb	r2, [r3, #0]
 8002e62:	e007      	b.n	8002e74 <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC;
 8002e64:	230d      	movs	r3, #13
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	2201      	movs	r2, #1
 8002e6a:	701a      	strb	r2, [r3, #0]
				cmd = CMD1; /* MMCv3 (CMD1(0)) */
 8002e6c:	230e      	movs	r3, #14
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0))
 8002e74:	46c0      	nop			; (mov r8, r8)
 8002e76:	f7ff fd81 	bl	800297c <SPI_Timer_Status>
 8002e7a:	1e03      	subs	r3, r0, #0
 8002e7c:	d008      	beq.n	8002e90 <USER_SPI_initialize+0x1b0>
 8002e7e:	230e      	movs	r3, #14
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2100      	movs	r1, #0
 8002e86:	0018      	movs	r0, r3
 8002e88:	f7ff fe9b 	bl	8002bc2 <send_cmd>
 8002e8c:	1e03      	subs	r3, r0, #0
 8002e8e:	d1f2      	bne.n	8002e76 <USER_SPI_initialize+0x196>
				; /* Wait for end of initialization */
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0) /* Set block length: 512 */
 8002e90:	f7ff fd74 	bl	800297c <SPI_Timer_Status>
 8002e94:	1e03      	subs	r3, r0, #0
 8002e96:	d007      	beq.n	8002ea8 <USER_SPI_initialize+0x1c8>
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	0019      	movs	r1, r3
 8002e9e:	2010      	movs	r0, #16
 8002ea0:	f7ff fe8f 	bl	8002bc2 <send_cmd>
 8002ea4:	1e03      	subs	r3, r0, #0
 8002ea6:	d003      	beq.n	8002eb0 <USER_SPI_initialize+0x1d0>
				ty = 0;
 8002ea8:	230d      	movs	r3, #13
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty; /* Card type */
 8002eb0:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <USER_SPI_initialize+0x22c>)
 8002eb2:	240d      	movs	r4, #13
 8002eb4:	193a      	adds	r2, r7, r4
 8002eb6:	7812      	ldrb	r2, [r2, #0]
 8002eb8:	701a      	strb	r2, [r3, #0]
	despiselect();
 8002eba:	f7ff fded 	bl	8002a98 <despiselect>

	if (ty) { /* OK */
 8002ebe:	193b      	adds	r3, r7, r4
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d013      	beq.n	8002eee <USER_SPI_initialize+0x20e>
		FCLK_FAST(); /* Set fast clock */
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <USER_SPI_initialize+0x228>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2238      	movs	r2, #56	; 0x38
 8002ece:	4393      	bics	r3, r2
 8002ed0:	001a      	movs	r2, r3
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <USER_SPI_initialize+0x228>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2118      	movs	r1, #24
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT flag */
 8002edc:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <USER_SPI_initialize+0x224>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	4393      	bics	r3, r2
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <USER_SPI_initialize+0x224>)
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	e002      	b.n	8002ef4 <USER_SPI_initialize+0x214>
	} else { /* Failed */
		Stat = STA_NOINIT;
 8002eee:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <USER_SPI_initialize+0x224>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8002ef4:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <USER_SPI_initialize+0x224>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	b2db      	uxtb	r3, r3
}
 8002efa:	0018      	movs	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b004      	add	sp, #16
 8002f00:	bdb0      	pop	{r4, r5, r7, pc}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	20000020 	.word	0x20000020
 8002f08:	2000039c 	.word	0x2000039c
 8002f0c:	2000048c 	.word	0x2000048c

08002f10 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/
/* Get disk status                                                       */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status(BYTE drv /* Physical drive number (0) */
) {
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	0002      	movs	r2, r0
 8002f18:	1dfb      	adds	r3, r7, #7
 8002f1a:	701a      	strb	r2, [r3, #0]
	if (drv)
 8002f1c:	1dfb      	adds	r3, r7, #7
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <USER_SPI_status+0x18>
		return STA_NOINIT; /* Supports only drive 0 */
 8002f24:	2301      	movs	r3, #1
 8002f26:	e002      	b.n	8002f2e <USER_SPI_status+0x1e>

	return Stat; /* Return disk status */
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <USER_SPI_status+0x28>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	b2db      	uxtb	r3, r3
}
 8002f2e:	0018      	movs	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b002      	add	sp, #8
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	20000020 	.word	0x20000020

08002f3c <USER_SPI_read>:

inline DRESULT USER_SPI_read(BYTE drv, /* Physical drive number (0) */
BYTE *buff, /* Pointer to the data buffer to store read data */
DWORD sector, /* Start sector number (LBA) */
UINT count /* Number of sectors to read (1..128) */
) {
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	210f      	movs	r1, #15
 8002f4a:	187b      	adds	r3, r7, r1
 8002f4c:	1c02      	adds	r2, r0, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
	if (drv || !count)
 8002f50:	187b      	adds	r3, r7, r1
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d102      	bne.n	8002f5e <USER_SPI_read+0x22>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <USER_SPI_read+0x26>
		return RES_PARERR; /* Check parameter */
 8002f5e:	2304      	movs	r3, #4
 8002f60:	e04f      	b.n	8003002 <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT)
 8002f62:	4b2a      	ldr	r3, [pc, #168]	; (800300c <USER_SPI_read+0xd0>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	001a      	movs	r2, r3
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d001      	beq.n	8002f74 <USER_SPI_read+0x38>
		return RES_NOTRDY; /* Check if drive is ready */
 8002f70:	2303      	movs	r3, #3
 8002f72:	e046      	b.n	8003002 <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK))
 8002f74:	4b26      	ldr	r3, [pc, #152]	; (8003010 <USER_SPI_read+0xd4>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	001a      	movs	r2, r3
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d102      	bne.n	8002f86 <USER_SPI_read+0x4a>
		sector *= 512; /* LBA ot BA conversion (byte addressing cards) */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	025b      	lsls	r3, r3, #9
 8002f84:	607b      	str	r3, [r7, #4]

	if (count == 1) { /* Single sector read */
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d112      	bne.n	8002fb2 <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	0019      	movs	r1, r3
 8002f90:	2011      	movs	r0, #17
 8002f92:	f7ff fe16 	bl	8002bc2 <send_cmd>
 8002f96:	1e03      	subs	r3, r0, #0
 8002f98:	d12d      	bne.n	8002ff6 <USER_SPI_read+0xba>
		&& rcvr_datablock(buff, 512)) {
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	009a      	lsls	r2, r3, #2
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	0011      	movs	r1, r2
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f7ff fda4 	bl	8002af0 <rcvr_datablock>
 8002fa8:	1e03      	subs	r3, r0, #0
 8002faa:	d024      	beq.n	8002ff6 <USER_SPI_read+0xba>
			count = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	e021      	b.n	8002ff6 <USER_SPI_read+0xba>
		}
	} else { /* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	2012      	movs	r0, #18
 8002fb8:	f7ff fe03 	bl	8002bc2 <send_cmd>
 8002fbc:	1e03      	subs	r3, r0, #0
 8002fbe:	d11a      	bne.n	8002ff6 <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512))
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	009a      	lsls	r2, r3, #2
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	0011      	movs	r1, r2
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7ff fd91 	bl	8002af0 <rcvr_datablock>
 8002fce:	1e03      	subs	r3, r0, #0
 8002fd0:	d00c      	beq.n	8002fec <USER_SPI_read+0xb0>
					break;
				buff += 512;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	0092      	lsls	r2, r2, #2
 8002fd8:	4694      	mov	ip, r2
 8002fda:	4463      	add	r3, ip
 8002fdc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1ea      	bne.n	8002fc0 <USER_SPI_read+0x84>
 8002fea:	e000      	b.n	8002fee <USER_SPI_read+0xb2>
					break;
 8002fec:	46c0      	nop			; (mov r8, r8)
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8002fee:	2100      	movs	r1, #0
 8002ff0:	200c      	movs	r0, #12
 8002ff2:	f7ff fde6 	bl	8002bc2 <send_cmd>
		}
	}
	despiselect();
 8002ff6:	f7ff fd4f 	bl	8002a98 <despiselect>

	return count ? RES_ERROR : RES_OK; /* Return result */
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	1e5a      	subs	r2, r3, #1
 8002ffe:	4193      	sbcs	r3, r2
 8003000:	b2db      	uxtb	r3, r3
}
 8003002:	0018      	movs	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	b004      	add	sp, #16
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	20000020 	.word	0x20000020
 8003010:	2000048c 	.word	0x2000048c

08003014 <USER_SPI_write>:
#if _USE_WRITE
inline DRESULT USER_SPI_write(BYTE drv, /* Physical drive number (0) */
const BYTE *buff, /* Ponter to the data to write */
DWORD sector, /* Start sector number (LBA) */
UINT count /* Number of sectors to write (1..128) */
) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	210f      	movs	r1, #15
 8003022:	187b      	adds	r3, r7, r1
 8003024:	1c02      	adds	r2, r0, #0
 8003026:	701a      	strb	r2, [r3, #0]
	if (drv || !count)
 8003028:	187b      	adds	r3, r7, r1
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d102      	bne.n	8003036 <USER_SPI_write+0x22>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <USER_SPI_write+0x26>
		return RES_PARERR; /* Check parameter */
 8003036:	2304      	movs	r3, #4
 8003038:	e063      	b.n	8003102 <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT)
 800303a:	4b34      	ldr	r3, [pc, #208]	; (800310c <USER_SPI_write+0xf8>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	b2db      	uxtb	r3, r3
 8003040:	001a      	movs	r2, r3
 8003042:	2301      	movs	r3, #1
 8003044:	4013      	ands	r3, r2
 8003046:	d001      	beq.n	800304c <USER_SPI_write+0x38>
		return RES_NOTRDY; /* Check drive status */
 8003048:	2303      	movs	r3, #3
 800304a:	e05a      	b.n	8003102 <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT)
 800304c:	4b2f      	ldr	r3, [pc, #188]	; (800310c <USER_SPI_write+0xf8>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	001a      	movs	r2, r3
 8003054:	2304      	movs	r3, #4
 8003056:	4013      	ands	r3, r2
 8003058:	d001      	beq.n	800305e <USER_SPI_write+0x4a>
		return RES_WRPRT; /* Check write protect */
 800305a:	2302      	movs	r3, #2
 800305c:	e051      	b.n	8003102 <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK))
 800305e:	4b2c      	ldr	r3, [pc, #176]	; (8003110 <USER_SPI_write+0xfc>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	001a      	movs	r2, r3
 8003064:	2308      	movs	r3, #8
 8003066:	4013      	ands	r3, r2
 8003068:	d102      	bne.n	8003070 <USER_SPI_write+0x5c>
		sector *= 512; /* LBA ==> BA conversion (byte addressing cards) */
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	025b      	lsls	r3, r3, #9
 800306e:	607b      	str	r3, [r7, #4]

	if (count == 1) { /* Single sector write */
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d110      	bne.n	8003098 <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	0019      	movs	r1, r3
 800307a:	2018      	movs	r0, #24
 800307c:	f7ff fda1 	bl	8002bc2 <send_cmd>
 8003080:	1e03      	subs	r3, r0, #0
 8003082:	d138      	bne.n	80030f6 <USER_SPI_write+0xe2>
		&& xmit_datablock(buff, 0xFE)) {
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	21fe      	movs	r1, #254	; 0xfe
 8003088:	0018      	movs	r0, r3
 800308a:	f7ff fd60 	bl	8002b4e <xmit_datablock>
 800308e:	1e03      	subs	r3, r0, #0
 8003090:	d031      	beq.n	80030f6 <USER_SPI_write+0xe2>
			count = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	603b      	str	r3, [r7, #0]
 8003096:	e02e      	b.n	80030f6 <USER_SPI_write+0xe2>
		}
	} else { /* Multiple sector write */
		if (CardType & CT_SDC)
 8003098:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <USER_SPI_write+0xfc>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	001a      	movs	r2, r3
 800309e:	2306      	movs	r3, #6
 80030a0:	4013      	ands	r3, r2
 80030a2:	d004      	beq.n	80030ae <USER_SPI_write+0x9a>
			send_cmd(ACMD23, count); /* Predefine number of sectors */
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	0019      	movs	r1, r3
 80030a8:	2097      	movs	r0, #151	; 0x97
 80030aa:	f7ff fd8a 	bl	8002bc2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	0019      	movs	r1, r3
 80030b2:	2019      	movs	r0, #25
 80030b4:	f7ff fd85 	bl	8002bc2 <send_cmd>
 80030b8:	1e03      	subs	r3, r0, #0
 80030ba:	d11c      	bne.n	80030f6 <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	21fc      	movs	r1, #252	; 0xfc
 80030c0:	0018      	movs	r0, r3
 80030c2:	f7ff fd44 	bl	8002b4e <xmit_datablock>
 80030c6:	1e03      	subs	r3, r0, #0
 80030c8:	d00c      	beq.n	80030e4 <USER_SPI_write+0xd0>
					break;
				buff += 512;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2280      	movs	r2, #128	; 0x80
 80030ce:	0092      	lsls	r2, r2, #2
 80030d0:	4694      	mov	ip, r2
 80030d2:	4463      	add	r3, ip
 80030d4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	3b01      	subs	r3, #1
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1ec      	bne.n	80030bc <USER_SPI_write+0xa8>
 80030e2:	e000      	b.n	80030e6 <USER_SPI_write+0xd2>
					break;
 80030e4:	46c0      	nop			; (mov r8, r8)
			if (!xmit_datablock(0, 0xFD))
 80030e6:	21fd      	movs	r1, #253	; 0xfd
 80030e8:	2000      	movs	r0, #0
 80030ea:	f7ff fd30 	bl	8002b4e <xmit_datablock>
 80030ee:	1e03      	subs	r3, r0, #0
 80030f0:	d101      	bne.n	80030f6 <USER_SPI_write+0xe2>
				count = 1; /* STOP_TRAN token */
 80030f2:	2301      	movs	r3, #1
 80030f4:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80030f6:	f7ff fccf 	bl	8002a98 <despiselect>

	return count ? RES_ERROR : RES_OK; /* Return result */
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	1e5a      	subs	r2, r3, #1
 80030fe:	4193      	sbcs	r3, r2
 8003100:	b2db      	uxtb	r3, r3
}
 8003102:	0018      	movs	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	b004      	add	sp, #16
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	20000020 	.word	0x20000020
 8003110:	2000048c 	.word	0x2000048c

08003114 <USER_SPI_ioctl>:

#if _USE_IOCTL
inline DRESULT USER_SPI_ioctl(BYTE drv, /* Physical drive number (0) */
BYTE cmd, /* Control command code */
void *buff /* Pointer to the conrtol data */
) {
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b08d      	sub	sp, #52	; 0x34
 8003118:	af00      	add	r7, sp, #0
 800311a:	603a      	str	r2, [r7, #0]
 800311c:	1dfb      	adds	r3, r7, #7
 800311e:	1c02      	adds	r2, r0, #0
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	1dbb      	adds	r3, r7, #6
 8003124:	1c0a      	adds	r2, r1, #0
 8003126:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;

	if (drv)
 8003128:	1dfb      	adds	r3, r7, #7
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <USER_SPI_ioctl+0x20>
		return RES_PARERR; /* Check parameter */
 8003130:	2304      	movs	r3, #4
 8003132:	e178      	b.n	8003426 <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT)
 8003134:	4bbe      	ldr	r3, [pc, #760]	; (8003430 <USER_SPI_ioctl+0x31c>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	001a      	movs	r2, r3
 800313c:	2301      	movs	r3, #1
 800313e:	4013      	ands	r3, r2
 8003140:	d001      	beq.n	8003146 <USER_SPI_ioctl+0x32>
		return RES_NOTRDY; /* Check if drive is ready */
 8003142:	2303      	movs	r3, #3
 8003144:	e16f      	b.n	8003426 <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 8003146:	232f      	movs	r3, #47	; 0x2f
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 800314e:	1dbb      	adds	r3, r7, #6
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b04      	cmp	r3, #4
 8003154:	d100      	bne.n	8003158 <USER_SPI_ioctl+0x44>
 8003156:	e100      	b.n	800335a <USER_SPI_ioctl+0x246>
 8003158:	dd00      	ble.n	800315c <USER_SPI_ioctl+0x48>
 800315a:	e14d      	b.n	80033f8 <USER_SPI_ioctl+0x2e4>
 800315c:	2b03      	cmp	r3, #3
 800315e:	d100      	bne.n	8003162 <USER_SPI_ioctl+0x4e>
 8003160:	e074      	b.n	800324c <USER_SPI_ioctl+0x138>
 8003162:	dd00      	ble.n	8003166 <USER_SPI_ioctl+0x52>
 8003164:	e148      	b.n	80033f8 <USER_SPI_ioctl+0x2e4>
 8003166:	2b00      	cmp	r3, #0
 8003168:	d002      	beq.n	8003170 <USER_SPI_ioctl+0x5c>
 800316a:	2b01      	cmp	r3, #1
 800316c:	d00a      	beq.n	8003184 <USER_SPI_ioctl+0x70>
 800316e:	e143      	b.n	80033f8 <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC: /* Wait for end of internal write process of the drive */
		if (spiselect())
 8003170:	f7ff fca2 	bl	8002ab8 <spiselect>
 8003174:	1e03      	subs	r3, r0, #0
 8003176:	d100      	bne.n	800317a <USER_SPI_ioctl+0x66>
 8003178:	e143      	b.n	8003402 <USER_SPI_ioctl+0x2ee>
			res = RES_OK;
 800317a:	232f      	movs	r3, #47	; 0x2f
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
		break;
 8003182:	e13e      	b.n	8003402 <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT: /* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003184:	2100      	movs	r1, #0
 8003186:	2009      	movs	r0, #9
 8003188:	f7ff fd1b 	bl	8002bc2 <send_cmd>
 800318c:	1e03      	subs	r3, r0, #0
 800318e:	d000      	beq.n	8003192 <USER_SPI_ioctl+0x7e>
 8003190:	e139      	b.n	8003406 <USER_SPI_ioctl+0x2f2>
 8003192:	240c      	movs	r4, #12
 8003194:	193b      	adds	r3, r7, r4
 8003196:	2110      	movs	r1, #16
 8003198:	0018      	movs	r0, r3
 800319a:	f7ff fca9 	bl	8002af0 <rcvr_datablock>
 800319e:	1e03      	subs	r3, r0, #0
 80031a0:	d100      	bne.n	80031a4 <USER_SPI_ioctl+0x90>
 80031a2:	e130      	b.n	8003406 <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 80031a4:	0020      	movs	r0, r4
 80031a6:	183b      	adds	r3, r7, r0
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d115      	bne.n	80031de <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD) csd[8] << 8)
 80031b2:	183b      	adds	r3, r7, r0
 80031b4:	7a5b      	ldrb	r3, [r3, #9]
 80031b6:	001a      	movs	r2, r3
 80031b8:	183b      	adds	r3, r7, r0
 80031ba:	7a1b      	ldrb	r3, [r3, #8]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	18d3      	adds	r3, r2, r3
 80031c0:	0019      	movs	r1, r3
						+ ((DWORD) (csd[7] & 63) << 16) + 1;
 80031c2:	183b      	adds	r3, r7, r0
 80031c4:	79db      	ldrb	r3, [r3, #7]
 80031c6:	041a      	lsls	r2, r3, #16
 80031c8:	23fc      	movs	r3, #252	; 0xfc
 80031ca:	039b      	lsls	r3, r3, #14
 80031cc:	4013      	ands	r3, r2
 80031ce:	18cb      	adds	r3, r1, r3
				csize = csd[9] + ((WORD) csd[8] << 8)
 80031d0:	3301      	adds	r3, #1
 80031d2:	61fb      	str	r3, [r7, #28]
				*(DWORD*) buff = csize << 10;
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	029a      	lsls	r2, r3, #10
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	e031      	b.n	8003242 <USER_SPI_ioctl+0x12e>
			} else { /* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1)
 80031de:	200c      	movs	r0, #12
 80031e0:	183b      	adds	r3, r7, r0
 80031e2:	795b      	ldrb	r3, [r3, #5]
 80031e4:	220f      	movs	r2, #15
 80031e6:	4013      	ands	r3, r2
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	183b      	adds	r3, r7, r0
 80031ec:	7a9b      	ldrb	r3, [r3, #10]
 80031ee:	09db      	lsrs	r3, r3, #7
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	18d3      	adds	r3, r2, r3
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	183b      	adds	r3, r7, r0
 80031f8:	7a5b      	ldrb	r3, [r3, #9]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2106      	movs	r1, #6
 8003200:	400b      	ands	r3, r1
 8003202:	b2db      	uxtb	r3, r3
 8003204:	18d3      	adds	r3, r2, r3
 8003206:	b2da      	uxtb	r2, r3
 8003208:	242e      	movs	r4, #46	; 0x2e
 800320a:	193b      	adds	r3, r7, r4
 800320c:	3202      	adds	r2, #2
 800320e:	701a      	strb	r2, [r3, #0]
						+ 2;
				csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8003210:	183b      	adds	r3, r7, r0
 8003212:	7a1b      	ldrb	r3, [r3, #8]
 8003214:	099b      	lsrs	r3, r3, #6
 8003216:	b2db      	uxtb	r3, r3
 8003218:	001a      	movs	r2, r3
 800321a:	183b      	adds	r3, r7, r0
 800321c:	79db      	ldrb	r3, [r3, #7]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	18d2      	adds	r2, r2, r3
						+ ((WORD) (csd[6] & 3) << 10) + 1;
 8003222:	183b      	adds	r3, r7, r0
 8003224:	799b      	ldrb	r3, [r3, #6]
 8003226:	0299      	lsls	r1, r3, #10
 8003228:	23c0      	movs	r3, #192	; 0xc0
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	400b      	ands	r3, r1
 800322e:	18d3      	adds	r3, r2, r3
 8003230:	3301      	adds	r3, #1
				csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8003232:	61fb      	str	r3, [r7, #28]
				*(DWORD*) buff = csize << (n - 9);
 8003234:	193b      	adds	r3, r7, r4
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	3b09      	subs	r3, #9
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	409a      	lsls	r2, r3
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003242:	232f      	movs	r3, #47	; 0x2f
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
		}
		break;
 800324a:	e0dc      	b.n	8003406 <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE: /* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) { /* SDC ver 2.00 */
 800324c:	4b79      	ldr	r3, [pc, #484]	; (8003434 <USER_SPI_ioctl+0x320>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	001a      	movs	r2, r3
 8003252:	2304      	movs	r3, #4
 8003254:	4013      	ands	r3, r2
 8003256:	d035      	beq.n	80032c4 <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 8003258:	2100      	movs	r1, #0
 800325a:	208d      	movs	r0, #141	; 0x8d
 800325c:	f7ff fcb1 	bl	8002bc2 <send_cmd>
 8003260:	1e03      	subs	r3, r0, #0
 8003262:	d000      	beq.n	8003266 <USER_SPI_ioctl+0x152>
 8003264:	e0d1      	b.n	800340a <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 8003266:	20ff      	movs	r0, #255	; 0xff
 8003268:	f7ff fb9e 	bl	80029a8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) { /* Read partial block */
 800326c:	230c      	movs	r3, #12
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	2110      	movs	r1, #16
 8003272:	0018      	movs	r0, r3
 8003274:	f7ff fc3c 	bl	8002af0 <rcvr_datablock>
 8003278:	1e03      	subs	r3, r0, #0
 800327a:	d100      	bne.n	800327e <USER_SPI_ioctl+0x16a>
 800327c:	e0c5      	b.n	800340a <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--)
 800327e:	232e      	movs	r3, #46	; 0x2e
 8003280:	18fb      	adds	r3, r7, r3
 8003282:	2230      	movs	r2, #48	; 0x30
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e008      	b.n	800329a <USER_SPI_ioctl+0x186>
						xchg_spi(0xFF); /* Purge trailing data */
 8003288:	20ff      	movs	r0, #255	; 0xff
 800328a:	f7ff fb8d 	bl	80029a8 <xchg_spi>
					for (n = 64 - 16; n; n--)
 800328e:	212e      	movs	r1, #46	; 0x2e
 8003290:	187b      	adds	r3, r7, r1
 8003292:	781a      	ldrb	r2, [r3, #0]
 8003294:	187b      	adds	r3, r7, r1
 8003296:	3a01      	subs	r2, #1
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	232e      	movs	r3, #46	; 0x2e
 800329c:	18fb      	adds	r3, r7, r3
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f1      	bne.n	8003288 <USER_SPI_ioctl+0x174>
					*(DWORD*) buff = 16UL << (csd[10] >> 4);
 80032a4:	230c      	movs	r3, #12
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	7a9b      	ldrb	r3, [r3, #10]
 80032aa:	091b      	lsrs	r3, r3, #4
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	001a      	movs	r2, r3
 80032b0:	2310      	movs	r3, #16
 80032b2:	4093      	lsls	r3, r2
 80032b4:	001a      	movs	r2, r3
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80032ba:	232f      	movs	r3, #47	; 0x2f
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	2200      	movs	r2, #0
 80032c0:	701a      	strb	r2, [r3, #0]
											+ ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80032c2:	e0a2      	b.n	800340a <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) { /* Read CSD */
 80032c4:	2100      	movs	r1, #0
 80032c6:	2009      	movs	r0, #9
 80032c8:	f7ff fc7b 	bl	8002bc2 <send_cmd>
 80032cc:	1e03      	subs	r3, r0, #0
 80032ce:	d000      	beq.n	80032d2 <USER_SPI_ioctl+0x1be>
 80032d0:	e09b      	b.n	800340a <USER_SPI_ioctl+0x2f6>
 80032d2:	240c      	movs	r4, #12
 80032d4:	193b      	adds	r3, r7, r4
 80032d6:	2110      	movs	r1, #16
 80032d8:	0018      	movs	r0, r3
 80032da:	f7ff fc09 	bl	8002af0 <rcvr_datablock>
 80032de:	1e03      	subs	r3, r0, #0
 80032e0:	d100      	bne.n	80032e4 <USER_SPI_ioctl+0x1d0>
 80032e2:	e092      	b.n	800340a <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) { /* SDC ver 1.XX */
 80032e4:	4b53      	ldr	r3, [pc, #332]	; (8003434 <USER_SPI_ioctl+0x320>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	001a      	movs	r2, r3
 80032ea:	2302      	movs	r3, #2
 80032ec:	4013      	ands	r3, r2
 80032ee:	d016      	beq.n	800331e <USER_SPI_ioctl+0x20a>
					*(DWORD*) buff = (((csd[10] & 63) << 1)
 80032f0:	0021      	movs	r1, r4
 80032f2:	187b      	adds	r3, r7, r1
 80032f4:	7a9b      	ldrb	r3, [r3, #10]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	227e      	movs	r2, #126	; 0x7e
 80032fa:	4013      	ands	r3, r2
							+ ((WORD) (csd[11] & 128) >> 7) + 1)
 80032fc:	187a      	adds	r2, r7, r1
 80032fe:	7ad2      	ldrb	r2, [r2, #11]
 8003300:	09d2      	lsrs	r2, r2, #7
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	189b      	adds	r3, r3, r2
 8003306:	1c5a      	adds	r2, r3, #1
							<< ((csd[13] >> 6) - 1);
 8003308:	187b      	adds	r3, r7, r1
 800330a:	7b5b      	ldrb	r3, [r3, #13]
 800330c:	099b      	lsrs	r3, r3, #6
 800330e:	b2db      	uxtb	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	409a      	lsls	r2, r3
 8003314:	0013      	movs	r3, r2
 8003316:	001a      	movs	r2, r3
					*(DWORD*) buff = (((csd[10] & 63) << 1)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e018      	b.n	8003350 <USER_SPI_ioctl+0x23c>
							((WORD) ((csd[10] & 124) >> 2) + 1)
 800331e:	210c      	movs	r1, #12
 8003320:	187b      	adds	r3, r7, r1
 8003322:	7a9b      	ldrb	r3, [r3, #10]
 8003324:	109b      	asrs	r3, r3, #2
 8003326:	b29b      	uxth	r3, r3
 8003328:	001a      	movs	r2, r3
 800332a:	231f      	movs	r3, #31
 800332c:	4013      	ands	r3, r2
 800332e:	3301      	adds	r3, #1
									* (((csd[11] & 3) << 3)
 8003330:	0008      	movs	r0, r1
 8003332:	187a      	adds	r2, r7, r1
 8003334:	7ad2      	ldrb	r2, [r2, #11]
 8003336:	00d2      	lsls	r2, r2, #3
 8003338:	2118      	movs	r1, #24
 800333a:	400a      	ands	r2, r1
											+ ((csd[11] & 224) >> 5) + 1);
 800333c:	1839      	adds	r1, r7, r0
 800333e:	7ac9      	ldrb	r1, [r1, #11]
 8003340:	0949      	lsrs	r1, r1, #5
 8003342:	b2c9      	uxtb	r1, r1
 8003344:	1852      	adds	r2, r2, r1
 8003346:	3201      	adds	r2, #1
									* (((csd[11] & 3) << 3)
 8003348:	4353      	muls	r3, r2
 800334a:	001a      	movs	r2, r3
					*(DWORD*) buff =
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003350:	232f      	movs	r3, #47	; 0x2f
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
		break;
 8003358:	e057      	b.n	800340a <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM: /* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC))
 800335a:	4b36      	ldr	r3, [pc, #216]	; (8003434 <USER_SPI_ioctl+0x320>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	001a      	movs	r2, r3
 8003360:	2306      	movs	r3, #6
 8003362:	4013      	ands	r3, r2
 8003364:	d053      	beq.n	800340e <USER_SPI_ioctl+0x2fa>
			break; /* Check if the card is SDC */
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd))
 8003366:	240c      	movs	r4, #12
 8003368:	193a      	adds	r2, r7, r4
 800336a:	1dfb      	adds	r3, r7, #7
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	210b      	movs	r1, #11
 8003370:	0018      	movs	r0, r3
 8003372:	f7ff fecf 	bl	8003114 <USER_SPI_ioctl>
 8003376:	1e03      	subs	r3, r0, #0
 8003378:	d14b      	bne.n	8003412 <USER_SPI_ioctl+0x2fe>
			break; /* Get CSD */
		if (!(csd[0] >> 6) && !(csd[10] & 0x40))
 800337a:	193b      	adds	r3, r7, r4
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	099b      	lsrs	r3, r3, #6
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <USER_SPI_ioctl+0x27e>
 8003386:	193b      	adds	r3, r7, r4
 8003388:	7a9b      	ldrb	r3, [r3, #10]
 800338a:	001a      	movs	r2, r3
 800338c:	2340      	movs	r3, #64	; 0x40
 800338e:	4013      	ands	r3, r2
 8003390:	d041      	beq.n	8003416 <USER_SPI_ioctl+0x302>
			break; /* Check if sector erase can be applied to the card */
		dp = buff;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	623b      	str	r3, [r7, #32]
		st = dp[0];
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
		ed = dp[1]; /* Load sector block */
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80033a2:	4b24      	ldr	r3, [pc, #144]	; (8003434 <USER_SPI_ioctl+0x320>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	001a      	movs	r2, r3
 80033a8:	2308      	movs	r3, #8
 80033aa:	4013      	ands	r3, r2
 80033ac:	d105      	bne.n	80033ba <USER_SPI_ioctl+0x2a6>
			st *= 512;
 80033ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b0:	025b      	lsls	r3, r3, #9
 80033b2:	62bb      	str	r3, [r7, #40]	; 0x28
			ed *= 512;
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	025b      	lsls	r3, r3, #9
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	0019      	movs	r1, r3
 80033be:	2020      	movs	r0, #32
 80033c0:	f7ff fbff 	bl	8002bc2 <send_cmd>
 80033c4:	1e03      	subs	r3, r0, #0
 80033c6:	d128      	bne.n	800341a <USER_SPI_ioctl+0x306>
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	0019      	movs	r1, r3
 80033cc:	2021      	movs	r0, #33	; 0x21
 80033ce:	f7ff fbf8 	bl	8002bc2 <send_cmd>
 80033d2:	1e03      	subs	r3, r0, #0
 80033d4:	d121      	bne.n	800341a <USER_SPI_ioctl+0x306>
				&& send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 80033d6:	2100      	movs	r1, #0
 80033d8:	2026      	movs	r0, #38	; 0x26
 80033da:	f7ff fbf2 	bl	8002bc2 <send_cmd>
 80033de:	1e03      	subs	r3, r0, #0
 80033e0:	d11b      	bne.n	800341a <USER_SPI_ioctl+0x306>
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <USER_SPI_ioctl+0x324>)
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7ff fb2e 	bl	8002a46 <wait_ready>
 80033ea:	1e03      	subs	r3, r0, #0
 80033ec:	d015      	beq.n	800341a <USER_SPI_ioctl+0x306>
			res = RES_OK; /* FatFs does not check result of this command */
 80033ee:	232f      	movs	r3, #47	; 0x2f
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80033f6:	e010      	b.n	800341a <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 80033f8:	232f      	movs	r3, #47	; 0x2f
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	2204      	movs	r2, #4
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	e00c      	b.n	800341c <USER_SPI_ioctl+0x308>
		break;
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	e00a      	b.n	800341c <USER_SPI_ioctl+0x308>
		break;
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	e008      	b.n	800341c <USER_SPI_ioctl+0x308>
		break;
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	e006      	b.n	800341c <USER_SPI_ioctl+0x308>
			break; /* Check if the card is SDC */
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	e004      	b.n	800341c <USER_SPI_ioctl+0x308>
			break; /* Get CSD */
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	e002      	b.n	800341c <USER_SPI_ioctl+0x308>
			break; /* Check if sector erase can be applied to the card */
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	e000      	b.n	800341c <USER_SPI_ioctl+0x308>
		break;
 800341a:	46c0      	nop			; (mov r8, r8)
	}

	despiselect();
 800341c:	f7ff fb3c 	bl	8002a98 <despiselect>

	return res;
 8003420:	232f      	movs	r3, #47	; 0x2f
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	781b      	ldrb	r3, [r3, #0]
}
 8003426:	0018      	movs	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	b00d      	add	sp, #52	; 0x34
 800342c:	bd90      	pop	{r4, r7, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	20000020 	.word	0x20000020
 8003434:	2000048c 	.word	0x2000048c
 8003438:	00007530 	.word	0x00007530

0800343c <__NVIC_EnableIRQ>:
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	0002      	movs	r2, r0
 8003444:	1dfb      	adds	r3, r7, #7
 8003446:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003448:	1dfb      	adds	r3, r7, #7
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b7f      	cmp	r3, #127	; 0x7f
 800344e:	d809      	bhi.n	8003464 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003450:	1dfb      	adds	r3, r7, #7
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	001a      	movs	r2, r3
 8003456:	231f      	movs	r3, #31
 8003458:	401a      	ands	r2, r3
 800345a:	4b04      	ldr	r3, [pc, #16]	; (800346c <__NVIC_EnableIRQ+0x30>)
 800345c:	2101      	movs	r1, #1
 800345e:	4091      	lsls	r1, r2
 8003460:	000a      	movs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]
}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b002      	add	sp, #8
 800346a:	bd80      	pop	{r7, pc}
 800346c:	e000e100 	.word	0xe000e100

08003470 <map>:
		(0x07) };

uint16_t ticks = 0;

uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min,
		uint16_t out_max) {
 8003470:	b5b0      	push	{r4, r5, r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	0005      	movs	r5, r0
 8003478:	000c      	movs	r4, r1
 800347a:	0010      	movs	r0, r2
 800347c:	0019      	movs	r1, r3
 800347e:	1dbb      	adds	r3, r7, #6
 8003480:	1c2a      	adds	r2, r5, #0
 8003482:	801a      	strh	r2, [r3, #0]
 8003484:	1d3b      	adds	r3, r7, #4
 8003486:	1c22      	adds	r2, r4, #0
 8003488:	801a      	strh	r2, [r3, #0]
 800348a:	1cbb      	adds	r3, r7, #2
 800348c:	1c02      	adds	r2, r0, #0
 800348e:	801a      	strh	r2, [r3, #0]
 8003490:	003b      	movs	r3, r7
 8003492:	1c0a      	adds	r2, r1, #0
 8003494:	801a      	strh	r2, [r3, #0]
	return (((x - in_min) * (out_max - out_min)) / ((in_max - in_min) + out_min));
 8003496:	1dbb      	adds	r3, r7, #6
 8003498:	881a      	ldrh	r2, [r3, #0]
 800349a:	1d3b      	adds	r3, r7, #4
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	1ad2      	subs	r2, r2, r3
 80034a0:	2318      	movs	r3, #24
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	8819      	ldrh	r1, [r3, #0]
 80034a6:	003b      	movs	r3, r7
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	1acb      	subs	r3, r1, r3
 80034ac:	4353      	muls	r3, r2
 80034ae:	0018      	movs	r0, r3
 80034b0:	1cbb      	adds	r3, r7, #2
 80034b2:	881a      	ldrh	r2, [r3, #0]
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	1ad2      	subs	r2, r2, r3
 80034ba:	003b      	movs	r3, r7
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	18d3      	adds	r3, r2, r3
 80034c0:	0019      	movs	r1, r3
 80034c2:	f7fc febd 	bl	8000240 <__divsi3>
 80034c6:	0003      	movs	r3, r0
 80034c8:	b29b      	uxth	r3, r3
}
 80034ca:	0018      	movs	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b002      	add	sp, #8
 80034d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080034d4 <gpio_clk_en>:

/**********************Enable clock Function*************************************/
void gpio_clk_en(GPIO_TypeDef *port) {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
	if (port == GPIOA) {
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	2390      	movs	r3, #144	; 0x90
 80034e0:	05db      	lsls	r3, r3, #23
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d107      	bne.n	80034f6 <gpio_clk_en+0x22>
		GPIOA_CLK_EN;
 80034e6:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <gpio_clk_en+0x80>)
 80034e8:	695a      	ldr	r2, [r3, #20]
 80034ea:	4b1a      	ldr	r3, [pc, #104]	; (8003554 <gpio_clk_en+0x80>)
 80034ec:	2180      	movs	r1, #128	; 0x80
 80034ee:	0289      	lsls	r1, r1, #10
 80034f0:	430a      	orrs	r2, r1
 80034f2:	615a      	str	r2, [r3, #20]
	} else if (port == GPIOD) {
		GPIOD_CLK_EN;
	} else {
		GPIOF_CLK_EN;
	}
}
 80034f4:	e02a      	b.n	800354c <gpio_clk_en+0x78>
	} else if (port == GPIOB) {
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a17      	ldr	r2, [pc, #92]	; (8003558 <gpio_clk_en+0x84>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d107      	bne.n	800350e <gpio_clk_en+0x3a>
		GPIOB_CLK_EN;
 80034fe:	4b15      	ldr	r3, [pc, #84]	; (8003554 <gpio_clk_en+0x80>)
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	4b14      	ldr	r3, [pc, #80]	; (8003554 <gpio_clk_en+0x80>)
 8003504:	2180      	movs	r1, #128	; 0x80
 8003506:	02c9      	lsls	r1, r1, #11
 8003508:	430a      	orrs	r2, r1
 800350a:	615a      	str	r2, [r3, #20]
}
 800350c:	e01e      	b.n	800354c <gpio_clk_en+0x78>
	} else if (port == GPIOC) {
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a12      	ldr	r2, [pc, #72]	; (800355c <gpio_clk_en+0x88>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d107      	bne.n	8003526 <gpio_clk_en+0x52>
		GPIOC_CLK_EN;
 8003516:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <gpio_clk_en+0x80>)
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <gpio_clk_en+0x80>)
 800351c:	2180      	movs	r1, #128	; 0x80
 800351e:	0309      	lsls	r1, r1, #12
 8003520:	430a      	orrs	r2, r1
 8003522:	615a      	str	r2, [r3, #20]
}
 8003524:	e012      	b.n	800354c <gpio_clk_en+0x78>
	} else if (port == GPIOD) {
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a0d      	ldr	r2, [pc, #52]	; (8003560 <gpio_clk_en+0x8c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d107      	bne.n	800353e <gpio_clk_en+0x6a>
		GPIOD_CLK_EN;
 800352e:	4b09      	ldr	r3, [pc, #36]	; (8003554 <gpio_clk_en+0x80>)
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	4b08      	ldr	r3, [pc, #32]	; (8003554 <gpio_clk_en+0x80>)
 8003534:	2180      	movs	r1, #128	; 0x80
 8003536:	0349      	lsls	r1, r1, #13
 8003538:	430a      	orrs	r2, r1
 800353a:	615a      	str	r2, [r3, #20]
}
 800353c:	e006      	b.n	800354c <gpio_clk_en+0x78>
		GPIOF_CLK_EN;
 800353e:	4b05      	ldr	r3, [pc, #20]	; (8003554 <gpio_clk_en+0x80>)
 8003540:	695a      	ldr	r2, [r3, #20]
 8003542:	4b04      	ldr	r3, [pc, #16]	; (8003554 <gpio_clk_en+0x80>)
 8003544:	2180      	movs	r1, #128	; 0x80
 8003546:	03c9      	lsls	r1, r1, #15
 8003548:	430a      	orrs	r2, r1
 800354a:	615a      	str	r2, [r3, #20]
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b002      	add	sp, #8
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40021000 	.word	0x40021000
 8003558:	48000400 	.word	0x48000400
 800355c:	48000800 	.word	0x48000800
 8003560:	48000c00 	.word	0x48000c00

08003564 <gpio_config>:
/**********************************************************************************/

/********************GPIO Configuration Functions**********************************/
void gpio_config(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode,
		uint32_t pinSpeed, uint32_t pinPUPD, uint32_t PHPL_OD) {
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	603b      	str	r3, [r7, #0]

	if (pinMode == OUTPUT_MODE) {
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d11c      	bne.n	80035b2 <gpio_config+0x4e>
		gpio_clk_en(port);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	0018      	movs	r0, r3
 800357c:	f7ff ffaa 	bl	80034d4 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	0018      	movs	r0, r3
 8003588:	f000 f85a 	bl	8003640 <gpio_moder>
		gpio_speed(port, pinNumber, pinSpeed);
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	0018      	movs	r0, r3
 8003594:	f000 f86c 	bl	8003670 <gpio_speed>
		gpio_PUPD(port, pinNumber, pinPUPD);
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	0018      	movs	r0, r3
 80035a0:	f000 f87e 	bl	80036a0 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 80035a4:	69fa      	ldr	r2, [r7, #28]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 f890 	bl	80036d0 <gpio_PHPL_OD>
	} else if (pinMode == ANALOG_MODE) {
		gpio_clk_en(port);
		gpio_moder(port, pinNumber, pinMode);
		adc_chsel(port, pinNumber);
	}
}
 80035b0:	e041      	b.n	8003636 <gpio_config+0xd2>
	} else if (pinMode == INPUT_MODE) {
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d110      	bne.n	80035da <gpio_config+0x76>
		gpio_clk_en(port);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	0018      	movs	r0, r3
 80035bc:	f7ff ff8a 	bl	80034d4 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	0018      	movs	r0, r3
 80035c8:	f000 f83a 	bl	8003640 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	0018      	movs	r0, r3
 80035d4:	f000 f864 	bl	80036a0 <gpio_PUPD>
}
 80035d8:	e02d      	b.n	8003636 <gpio_config+0xd2>
	} else if (pinMode == ALT_MODE) {
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d116      	bne.n	800360e <gpio_config+0xaa>
		gpio_clk_en(port);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	0018      	movs	r0, r3
 80035e4:	f7ff ff76 	bl	80034d4 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	0018      	movs	r0, r3
 80035f0:	f000 f826 	bl	8003640 <gpio_moder>
		gpio_PUPD(port, pinNumber, pinPUPD);
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 f850 	bl	80036a0 <gpio_PUPD>
		gpio_PHPL_OD(port, pinNumber, PHPL_OD);
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	0018      	movs	r0, r3
 8003608:	f000 f862 	bl	80036d0 <gpio_PHPL_OD>
}
 800360c:	e013      	b.n	8003636 <gpio_config+0xd2>
	} else if (pinMode == ANALOG_MODE) {
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b03      	cmp	r3, #3
 8003612:	d110      	bne.n	8003636 <gpio_config+0xd2>
		gpio_clk_en(port);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	0018      	movs	r0, r3
 8003618:	f7ff ff5c 	bl	80034d4 <gpio_clk_en>
		gpio_moder(port, pinNumber, pinMode);
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	0018      	movs	r0, r3
 8003624:	f000 f80c 	bl	8003640 <gpio_moder>
		adc_chsel(port, pinNumber);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	0011      	movs	r1, r2
 8003630:	0018      	movs	r0, r3
 8003632:	f000 f9c9 	bl	80039c8 <adc_chsel>
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b004      	add	sp, #16
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <gpio_moder>:

void gpio_moder(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinMode) {	// Config the mode
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
	port->MODER |= (pinMode << (PINPOS_2B[pinNumber]));	// IN/OP/Alternate/ANALOG
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	4b06      	ldr	r3, [pc, #24]	; (800366c <gpio_moder+0x2c>)
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	0089      	lsls	r1, r1, #2
 8003656:	58cb      	ldr	r3, [r1, r3]
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	4099      	lsls	r1, r3
 800365c:	000b      	movs	r3, r1
 800365e:	431a      	orrs	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
}
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	46bd      	mov	sp, r7
 8003668:	b004      	add	sp, #16
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20000024 	.word	0x20000024

08003670 <gpio_speed>:

void gpio_speed(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed) {// Config the speed
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
	port->OSPEEDR |= (pinSpeed << PINPOS_2B[pinNumber]);		// LOW/MED/HIGH
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <gpio_speed+0x2c>)
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	0089      	lsls	r1, r1, #2
 8003686:	58cb      	ldr	r3, [r1, r3]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4099      	lsls	r1, r3
 800368c:	000b      	movs	r3, r1
 800368e:	431a      	orrs	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	609a      	str	r2, [r3, #8]
}
 8003694:	46c0      	nop			; (mov r8, r8)
 8003696:	46bd      	mov	sp, r7
 8003698:	b004      	add	sp, #16
 800369a:	bd80      	pop	{r7, pc}
 800369c:	20000024 	.word	0x20000024

080036a0 <gpio_PUPD>:

void gpio_PUPD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinPUPD) {// ENABLE/DISABLE
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
	port->PUPDR |= (pinPUPD << PINPOS_2B[pinNumber]);		// PULL-UP/PULL-DOWN
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <gpio_PUPD+0x2c>)
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	0089      	lsls	r1, r1, #2
 80036b6:	58cb      	ldr	r3, [r1, r3]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4099      	lsls	r1, r3
 80036bc:	000b      	movs	r3, r1
 80036be:	431a      	orrs	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	60da      	str	r2, [r3, #12]
}
 80036c4:	46c0      	nop			; (mov r8, r8)
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b004      	add	sp, #16
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	20000024 	.word	0x20000024

080036d0 <gpio_PHPL_OD>:
void gpio_PHPL_OD(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t PHPL_OD) {// ENABLE/DISABLE
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
	port->OTYPER |= (PHPL_OD << pinNumber);	// PUSH-PULL/OPEN DRAIN
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4099      	lsls	r1, r3
 80036e6:	000b      	movs	r3, r1
 80036e8:	431a      	orrs	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	605a      	str	r2, [r3, #4]
}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b004      	add	sp, #16
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <gpio_altfn>:

void gpio_altfn(GPIO_TypeDef *port, uint32_t pinNumber,
		uint32_t alternate_function) {
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
	if (pinNumber < 8) {
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b07      	cmp	r3, #7
 8003706:	d80a      	bhi.n	800371e <gpio_altfn+0x28>
		port->AFR[0] |= (alternate_function << (4 * pinNumber));
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a1a      	ldr	r2, [r3, #32]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4099      	lsls	r1, r3
 8003714:	000b      	movs	r3, r1
 8003716:	431a      	orrs	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	621a      	str	r2, [r3, #32]
	} else {
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
	}
}
 800371c:	e00a      	b.n	8003734 <gpio_altfn+0x3e>
		port->AFR[1] |= (alternate_function << (4 * (pinNumber - 8)));
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	3b08      	subs	r3, #8
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4099      	lsls	r1, r3
 800372c:	000b      	movs	r3, r1
 800372e:	431a      	orrs	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003734:	46c0      	nop			; (mov r8, r8)
 8003736:	46bd      	mov	sp, r7
 8003738:	b004      	add	sp, #16
 800373a:	bd80      	pop	{r7, pc}

0800373c <gpio_write>:

/************************************************************************************/

/************************GPIO OPERATION FUNCTION*************************************/
void gpio_write(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t state) {
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	1dfb      	adds	r3, r7, #7
 8003748:	701a      	strb	r2, [r3, #0]
	if (state) {
 800374a:	1dfb      	adds	r3, r7, #7
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <gpio_write+0x26>
		port->BSRR = (1 << pinNumber);
 8003752:	2201      	movs	r2, #1
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	409a      	lsls	r2, r3
 8003758:	0013      	movs	r3, r2
 800375a:	001a      	movs	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	619a      	str	r2, [r3, #24]
	} else {
		port->BSRR = (1 << (pinNumber + 16));
	}
}
 8003760:	e007      	b.n	8003772 <gpio_write+0x36>
		port->BSRR = (1 << (pinNumber + 16));
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	3310      	adds	r3, #16
 8003766:	2201      	movs	r2, #1
 8003768:	409a      	lsls	r2, r3
 800376a:	0013      	movs	r3, r2
 800376c:	001a      	movs	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	619a      	str	r2, [r3, #24]
}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	46bd      	mov	sp, r7
 8003776:	b004      	add	sp, #16
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <print>:

//*******************************************************************************************//

//************************** UART SERIAL PRINTING *******************************************//

void print(const char *fmt, ...) {
 800377c:	b40f      	push	{r0, r1, r2, r3}
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8003784:	231c      	movs	r3, #28
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	2180      	movs	r1, #128	; 0x80
 8003790:	0049      	lsls	r1, r1, #1
 8003792:	4818      	ldr	r0, [pc, #96]	; (80037f4 <print+0x78>)
 8003794:	f006 fa8a 	bl	8009cac <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 8003798:	4b16      	ldr	r3, [pc, #88]	; (80037f4 <print+0x78>)
 800379a:	0018      	movs	r0, r3
 800379c:	f7fc fcb4 	bl	8000108 <strlen>
 80037a0:	0003      	movs	r3, r0
 80037a2:	60bb      	str	r3, [r7, #8]
	for (uint8_t i = 0; i < len; i++) {
 80037a4:	230f      	movs	r3, #15
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
 80037ac:	e013      	b.n	80037d6 <print+0x5a>
		USART2->TDR = buffer[i];
 80037ae:	230f      	movs	r3, #15
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	4a0f      	ldr	r2, [pc, #60]	; (80037f4 <print+0x78>)
 80037b6:	5cd2      	ldrb	r2, [r2, r3]
 80037b8:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <print+0x7c>)
 80037ba:	b292      	uxth	r2, r2
 80037bc:	851a      	strh	r2, [r3, #40]	; 0x28
		while (!(USART2->ISR & USART_ISR_TXE))
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <print+0x7c>)
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	2280      	movs	r2, #128	; 0x80
 80037c6:	4013      	ands	r3, r2
 80037c8:	d0fa      	beq.n	80037c0 <print+0x44>
	for (uint8_t i = 0; i < len; i++) {
 80037ca:	210f      	movs	r1, #15
 80037cc:	187b      	adds	r3, r7, r1
 80037ce:	781a      	ldrb	r2, [r3, #0]
 80037d0:	187b      	adds	r3, r7, r1
 80037d2:	3201      	adds	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]
 80037d6:	230f      	movs	r3, #15
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	429a      	cmp	r2, r3
 80037e0:	dce5      	bgt.n	80037ae <print+0x32>
			;
	}

}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b004      	add	sp, #16
 80037ea:	bc80      	pop	{r7}
 80037ec:	bc08      	pop	{r3}
 80037ee:	b004      	add	sp, #16
 80037f0:	4718      	bx	r3
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	2000049c 	.word	0x2000049c
 80037f8:	40004400 	.word	0x40004400

080037fc <ticks_reset>:
	timer_EN(TIM6);
}
uint16_t ticks_val() {
	return ticks;
}
void ticks_reset() {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
	ticks = 0;
 8003800:	4b02      	ldr	r3, [pc, #8]	; (800380c <ticks_reset+0x10>)
 8003802:	2200      	movs	r2, #0
 8003804:	801a      	strh	r2, [r3, #0]
}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20000498 	.word	0x20000498

08003810 <TIM6_IRQHandler>:
void TIM6_IRQHandler(void) {		// Timer Interrupt helping in delay
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
	ticks++;
 8003814:	4b07      	ldr	r3, [pc, #28]	; (8003834 <TIM6_IRQHandler+0x24>)
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	3301      	adds	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <TIM6_IRQHandler+0x24>)
 800381e:	801a      	strh	r2, [r3, #0]
	TIM6->SR &= ~TIM_SR_UIF;
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <TIM6_IRQHandler+0x28>)
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <TIM6_IRQHandler+0x28>)
 8003826:	2101      	movs	r1, #1
 8003828:	438a      	bics	r2, r1
 800382a:	611a      	str	r2, [r3, #16]
}
 800382c:	46c0      	nop			; (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	20000498 	.word	0x20000498
 8003838:	40001000 	.word	0x40001000

0800383c <adc_calib>:
//************************** General Purpose TIMER FUNCTIONS ********************//

//*******************************************************************************//

//********************************| ADC FUNCTIONS |******************************//
void adc_calib() {
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
	// Calibrate ADC
	if ((ADC1->CR & ADC_CR_ADEN) != 0) /* (1) */
 8003840:	4b13      	ldr	r3, [pc, #76]	; (8003890 <adc_calib+0x54>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2201      	movs	r2, #1
 8003846:	4013      	ands	r3, r2
 8003848:	d005      	beq.n	8003856 <adc_calib+0x1a>
	{
		ADC1->CR |= ADC_CR_ADDIS; /* (2) */
 800384a:	4b11      	ldr	r3, [pc, #68]	; (8003890 <adc_calib+0x54>)
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	4b10      	ldr	r3, [pc, #64]	; (8003890 <adc_calib+0x54>)
 8003850:	2102      	movs	r1, #2
 8003852:	430a      	orrs	r2, r1
 8003854:	609a      	str	r2, [r3, #8]
	}
	while ((ADC1->CR & ADC_CR_ADEN) != 0) {
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <adc_calib+0x54>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2201      	movs	r2, #1
 800385e:	4013      	ands	r3, r2
 8003860:	d1fa      	bne.n	8003858 <adc_calib+0x1c>
		/* For robust implementation, add here time-out management */
	}
	ADC1->CFGR1 &= ~ADC_CFGR1_DMAEN; /* (3) */
 8003862:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <adc_calib+0x54>)
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <adc_calib+0x54>)
 8003868:	2101      	movs	r1, #1
 800386a:	438a      	bics	r2, r1
 800386c:	60da      	str	r2, [r3, #12]
	ADC1->CR |= ADC_CR_ADCAL; /* (4) */
 800386e:	4b08      	ldr	r3, [pc, #32]	; (8003890 <adc_calib+0x54>)
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	4b07      	ldr	r3, [pc, #28]	; (8003890 <adc_calib+0x54>)
 8003874:	2180      	movs	r1, #128	; 0x80
 8003876:	0609      	lsls	r1, r1, #24
 8003878:	430a      	orrs	r2, r1
 800387a:	609a      	str	r2, [r3, #8]
	while ((ADC1->CR & ADC_CR_ADCAL) != 0) /* (5) */
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	4b04      	ldr	r3, [pc, #16]	; (8003890 <adc_calib+0x54>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	dbfb      	blt.n	800387e <adc_calib+0x42>
	{
	}
}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	40012400 	.word	0x40012400

08003894 <adc_ready>:
void adc_ready() {
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
	// ADC ENABLE
	if ((ADC1->ISR & ADC_ISR_ADRDY) != 0) /* (1) */
 8003898:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <adc_ready+0x40>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2201      	movs	r2, #1
 800389e:	4013      	ands	r3, r2
 80038a0:	d005      	beq.n	80038ae <adc_ready+0x1a>
	{
		ADC1->ISR |= ADC_ISR_ADRDY; /* (2) */
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <adc_ready+0x40>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <adc_ready+0x40>)
 80038a8:	2101      	movs	r1, #1
 80038aa:	430a      	orrs	r2, r1
 80038ac:	601a      	str	r2, [r3, #0]
	}
	ADC1->CR |= ADC_CR_ADEN; /* (3) */
 80038ae:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <adc_ready+0x40>)
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <adc_ready+0x40>)
 80038b4:	2101      	movs	r1, #1
 80038b6:	430a      	orrs	r2, r1
 80038b8:	609a      	str	r2, [r3, #8]
	ticks_reset();
 80038ba:	f7ff ff9f 	bl	80037fc <ticks_reset>
//	while (ticks_val() < 50)
//		;
	while ((ADC1->ISR & ADC_ISR_ADRDY) == 0) /* (4) */
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <adc_ready+0x40>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2201      	movs	r2, #1
 80038c6:	4013      	ands	r3, r2
 80038c8:	d0fa      	beq.n	80038c0 <adc_ready+0x2c>
	{
		/* For robust implementation, add here time-out management */
	}
}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	46c0      	nop			; (mov r8, r8)
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	40012400 	.word	0x40012400

080038d8 <adc_clk_config>:
void adc_clk_config() {
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; /* (1) */
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <adc_clk_config+0x34>)
 80038de:	699a      	ldr	r2, [r3, #24]
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <adc_clk_config+0x34>)
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	0089      	lsls	r1, r1, #2
 80038e6:	430a      	orrs	r2, r1
 80038e8:	619a      	str	r2, [r3, #24]
	RCC->CR2 |= RCC_CR2_HSI14ON; /* (2) */
 80038ea:	4b08      	ldr	r3, [pc, #32]	; (800390c <adc_clk_config+0x34>)
 80038ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ee:	4b07      	ldr	r3, [pc, #28]	; (800390c <adc_clk_config+0x34>)
 80038f0:	2101      	movs	r1, #1
 80038f2:	430a      	orrs	r2, r1
 80038f4:	635a      	str	r2, [r3, #52]	; 0x34
	while ((RCC->CR2 & RCC_CR2_HSI14RDY) == 0) /* (3) */
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	4b04      	ldr	r3, [pc, #16]	; (800390c <adc_clk_config+0x34>)
 80038fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fc:	2202      	movs	r2, #2
 80038fe:	4013      	ands	r3, r2
 8003900:	d0fa      	beq.n	80038f8 <adc_clk_config+0x20>
	{
		/* For robust implementation, add here time-out management */
	}
}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	46c0      	nop			; (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	40021000 	.word	0x40021000

08003910 <adc_sample_time>:
void adc_sample_time(uint8_t sample_time) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	0002      	movs	r2, r0
 8003918:	1dfb      	adds	r3, r7, #7
 800391a:	701a      	strb	r2, [r3, #0]
	ADC1->SMPR |= sample_time;
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <adc_sample_time+0x24>)
 800391e:	6959      	ldr	r1, [r3, #20]
 8003920:	1dfb      	adds	r3, r7, #7
 8003922:	781a      	ldrb	r2, [r3, #0]
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <adc_sample_time+0x24>)
 8003926:	430a      	orrs	r2, r1
 8003928:	615a      	str	r2, [r3, #20]
}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	46bd      	mov	sp, r7
 800392e:	b002      	add	sp, #8
 8003930:	bd80      	pop	{r7, pc}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	40012400 	.word	0x40012400

08003938 <adc_en>:
void adc_en() {
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
	adc_clk_config();
 800393c:	f7ff ffcc 	bl	80038d8 <adc_clk_config>
	adc_calib();
 8003940:	f7ff ff7c 	bl	800383c <adc_calib>
	adc_ready();
 8003944:	f7ff ffa6 	bl	8003894 <adc_ready>
}
 8003948:	46c0      	nop			; (mov r8, r8)
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <adc_read>:
void adc_read(uint16_t *arr, uint8_t arr_len) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	000a      	movs	r2, r1
 800395a:	1cfb      	adds	r3, r7, #3
 800395c:	701a      	strb	r2, [r3, #0]
	ADC1->CR |= ADC_CR_ADSTART;
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <adc_read+0x58>)
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <adc_read+0x58>)
 8003964:	2104      	movs	r1, #4
 8003966:	430a      	orrs	r2, r1
 8003968:	609a      	str	r2, [r3, #8]

	for (int i = 0; i < arr_len; i++) {
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	e010      	b.n	8003992 <adc_read+0x42>
		while ((ADC1->ISR & ADC_ISR_EOC) == 0)
 8003970:	46c0      	nop			; (mov r8, r8)
 8003972:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <adc_read+0x58>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2204      	movs	r2, #4
 8003978:	4013      	ands	r3, r2
 800397a:	d0fa      	beq.n	8003972 <adc_read+0x22>
			;
		*(arr + i) = ADC1->DR;
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <adc_read+0x58>)
 800397e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	18d3      	adds	r3, r2, r3
 8003988:	b28a      	uxth	r2, r1
 800398a:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < arr_len; i++) {
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3301      	adds	r3, #1
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	1cfb      	adds	r3, r7, #3
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	429a      	cmp	r2, r3
 800399a:	dbe9      	blt.n	8003970 <adc_read+0x20>
	}
}
 800399c:	46c0      	nop			; (mov r8, r8)
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b004      	add	sp, #16
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	40012400 	.word	0x40012400

080039ac <adc_stop>:

void adc_start() {
	ADC1->CR |= ADC_CR_ADSTART;
}
void adc_stop() {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
	ADC1->CR |= ADC_CR_ADSTP;
 80039b0:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <adc_stop+0x18>)
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	4b03      	ldr	r3, [pc, #12]	; (80039c4 <adc_stop+0x18>)
 80039b6:	2110      	movs	r1, #16
 80039b8:	430a      	orrs	r2, r1
 80039ba:	609a      	str	r2, [r3, #8]
}
 80039bc:	46c0      	nop			; (mov r8, r8)
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	40012400 	.word	0x40012400

080039c8 <adc_chsel>:
	while ((ADC1->CR & ADC_CR_ADEN) != 0) /* (4) */
	{
		/* For robust implementation, add here time-out management */
	}
}
void adc_chsel(GPIO_TypeDef *port, uint16_t pin) {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	000a      	movs	r2, r1
 80039d2:	1cbb      	adds	r3, r7, #2
 80039d4:	801a      	strh	r2, [r3, #0]

	if (port == GPIOA) {
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	2390      	movs	r3, #144	; 0x90
 80039da:	05db      	lsls	r3, r3, #23
 80039dc:	429a      	cmp	r2, r3
 80039de:	d133      	bne.n	8003a48 <adc_chsel+0x80>
		switch (pin) {
 80039e0:	1cbb      	adds	r3, r7, #2
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	2b07      	cmp	r3, #7
 80039e6:	d900      	bls.n	80039ea <adc_chsel+0x22>
 80039e8:	e086      	b.n	8003af8 <adc_chsel+0x130>
 80039ea:	009a      	lsls	r2, r3, #2
 80039ec:	4b47      	ldr	r3, [pc, #284]	; (8003b0c <adc_chsel+0x144>)
 80039ee:	18d3      	adds	r3, r2, r3
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	469f      	mov	pc, r3
		case 0:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL0;
 80039f4:	4b46      	ldr	r3, [pc, #280]	; (8003b10 <adc_chsel+0x148>)
 80039f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039f8:	4b45      	ldr	r3, [pc, #276]	; (8003b10 <adc_chsel+0x148>)
 80039fa:	2101      	movs	r1, #1
 80039fc:	430a      	orrs	r2, r1
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003a00:	e07f      	b.n	8003b02 <adc_chsel+0x13a>
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL1;
 8003a02:	4b43      	ldr	r3, [pc, #268]	; (8003b10 <adc_chsel+0x148>)
 8003a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a06:	4b42      	ldr	r3, [pc, #264]	; (8003b10 <adc_chsel+0x148>)
 8003a08:	2102      	movs	r1, #2
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003a0e:	e078      	b.n	8003b02 <adc_chsel+0x13a>
		case 4:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL4;
 8003a10:	4b3f      	ldr	r3, [pc, #252]	; (8003b10 <adc_chsel+0x148>)
 8003a12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a14:	4b3e      	ldr	r3, [pc, #248]	; (8003b10 <adc_chsel+0x148>)
 8003a16:	2110      	movs	r1, #16
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003a1c:	e071      	b.n	8003b02 <adc_chsel+0x13a>
		case 5:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL5;
 8003a1e:	4b3c      	ldr	r3, [pc, #240]	; (8003b10 <adc_chsel+0x148>)
 8003a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a22:	4b3b      	ldr	r3, [pc, #236]	; (8003b10 <adc_chsel+0x148>)
 8003a24:	2120      	movs	r1, #32
 8003a26:	430a      	orrs	r2, r1
 8003a28:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003a2a:	e06a      	b.n	8003b02 <adc_chsel+0x13a>
		case 6:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL6;
 8003a2c:	4b38      	ldr	r3, [pc, #224]	; (8003b10 <adc_chsel+0x148>)
 8003a2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a30:	4b37      	ldr	r3, [pc, #220]	; (8003b10 <adc_chsel+0x148>)
 8003a32:	2140      	movs	r1, #64	; 0x40
 8003a34:	430a      	orrs	r2, r1
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003a38:	e063      	b.n	8003b02 <adc_chsel+0x13a>
		case 7:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL7;
 8003a3a:	4b35      	ldr	r3, [pc, #212]	; (8003b10 <adc_chsel+0x148>)
 8003a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a3e:	4b34      	ldr	r3, [pc, #208]	; (8003b10 <adc_chsel+0x148>)
 8003a40:	2180      	movs	r1, #128	; 0x80
 8003a42:	430a      	orrs	r2, r1
 8003a44:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003a46:	e05c      	b.n	8003b02 <adc_chsel+0x13a>
		default:
			break;
		}
	} else if (port == GPIOB) {
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a32      	ldr	r2, [pc, #200]	; (8003b14 <adc_chsel+0x14c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d116      	bne.n	8003a7e <adc_chsel+0xb6>
		switch (pin) {
 8003a50:	1cbb      	adds	r3, r7, #2
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <adc_chsel+0x96>
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d008      	beq.n	8003a6e <adc_chsel+0xa6>
			break;
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL9;
			break;
		default:
			break;
 8003a5c:	e051      	b.n	8003b02 <adc_chsel+0x13a>
			ADC1->CHSELR |= ADC_CHSELR_CHSEL8;
 8003a5e:	4b2c      	ldr	r3, [pc, #176]	; (8003b10 <adc_chsel+0x148>)
 8003a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a62:	4b2b      	ldr	r3, [pc, #172]	; (8003b10 <adc_chsel+0x148>)
 8003a64:	2180      	movs	r1, #128	; 0x80
 8003a66:	0049      	lsls	r1, r1, #1
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003a6c:	e049      	b.n	8003b02 <adc_chsel+0x13a>
			ADC1->CHSELR |= ADC_CHSELR_CHSEL9;
 8003a6e:	4b28      	ldr	r3, [pc, #160]	; (8003b10 <adc_chsel+0x148>)
 8003a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a72:	4b27      	ldr	r3, [pc, #156]	; (8003b10 <adc_chsel+0x148>)
 8003a74:	2180      	movs	r1, #128	; 0x80
 8003a76:	0089      	lsls	r1, r1, #2
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003a7c:	e041      	b.n	8003b02 <adc_chsel+0x13a>
		}
	} else if (port == GPIOC) {
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a25      	ldr	r2, [pc, #148]	; (8003b18 <adc_chsel+0x150>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d13a      	bne.n	8003afc <adc_chsel+0x134>
		switch (pin) {
 8003a86:	1cbb      	adds	r3, r7, #2
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	2b05      	cmp	r3, #5
 8003a8c:	d838      	bhi.n	8003b00 <adc_chsel+0x138>
 8003a8e:	009a      	lsls	r2, r3, #2
 8003a90:	4b22      	ldr	r3, [pc, #136]	; (8003b1c <adc_chsel+0x154>)
 8003a92:	18d3      	adds	r3, r2, r3
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	469f      	mov	pc, r3
		case 0:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL10;
 8003a98:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <adc_chsel+0x148>)
 8003a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a9c:	4b1c      	ldr	r3, [pc, #112]	; (8003b10 <adc_chsel+0x148>)
 8003a9e:	2180      	movs	r1, #128	; 0x80
 8003aa0:	00c9      	lsls	r1, r1, #3
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003aa6:	e02c      	b.n	8003b02 <adc_chsel+0x13a>
		case 1:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL11;
 8003aa8:	4b19      	ldr	r3, [pc, #100]	; (8003b10 <adc_chsel+0x148>)
 8003aaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aac:	4b18      	ldr	r3, [pc, #96]	; (8003b10 <adc_chsel+0x148>)
 8003aae:	2180      	movs	r1, #128	; 0x80
 8003ab0:	0109      	lsls	r1, r1, #4
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003ab6:	e024      	b.n	8003b02 <adc_chsel+0x13a>
		case 2:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL12;
 8003ab8:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <adc_chsel+0x148>)
 8003aba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003abc:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <adc_chsel+0x148>)
 8003abe:	2180      	movs	r1, #128	; 0x80
 8003ac0:	0149      	lsls	r1, r1, #5
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003ac6:	e01c      	b.n	8003b02 <adc_chsel+0x13a>
		case 3:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL13;
 8003ac8:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <adc_chsel+0x148>)
 8003aca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003acc:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <adc_chsel+0x148>)
 8003ace:	2180      	movs	r1, #128	; 0x80
 8003ad0:	0189      	lsls	r1, r1, #6
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003ad6:	e014      	b.n	8003b02 <adc_chsel+0x13a>
		case 4:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL14;
 8003ad8:	4b0d      	ldr	r3, [pc, #52]	; (8003b10 <adc_chsel+0x148>)
 8003ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <adc_chsel+0x148>)
 8003ade:	2180      	movs	r1, #128	; 0x80
 8003ae0:	01c9      	lsls	r1, r1, #7
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003ae6:	e00c      	b.n	8003b02 <adc_chsel+0x13a>
		case 5:
			ADC1->CHSELR |= ADC_CHSELR_CHSEL15;
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <adc_chsel+0x148>)
 8003aea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aec:	4b08      	ldr	r3, [pc, #32]	; (8003b10 <adc_chsel+0x148>)
 8003aee:	2180      	movs	r1, #128	; 0x80
 8003af0:	0209      	lsls	r1, r1, #8
 8003af2:	430a      	orrs	r2, r1
 8003af4:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 8003af6:	e004      	b.n	8003b02 <adc_chsel+0x13a>
			break;
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	e002      	b.n	8003b02 <adc_chsel+0x13a>
		default:
			break;
		}
	}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	e000      	b.n	8003b02 <adc_chsel+0x13a>
			break;
 8003b00:	46c0      	nop			; (mov r8, r8)
}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b002      	add	sp, #8
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	0800a96c 	.word	0x0800a96c
 8003b10:	40012400 	.word	0x40012400
 8003b14:	48000400 	.word	0x48000400
 8003b18:	48000800 	.word	0x48000800
 8003b1c:	0800a98c 	.word	0x0800a98c

08003b20 <adc_config>:
void adc_config(uint8_t sample_time, uint8_t CONT, uint8_t SCANDIR,
		uint8_t AUTOFF, uint8_t WAIT, uint8_t DISCEN, uint8_t OVRMOD) {
 8003b20:	b5b0      	push	{r4, r5, r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	0005      	movs	r5, r0
 8003b28:	000c      	movs	r4, r1
 8003b2a:	0010      	movs	r0, r2
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	1dfb      	adds	r3, r7, #7
 8003b30:	1c2a      	adds	r2, r5, #0
 8003b32:	701a      	strb	r2, [r3, #0]
 8003b34:	1dbb      	adds	r3, r7, #6
 8003b36:	1c22      	adds	r2, r4, #0
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	1d7b      	adds	r3, r7, #5
 8003b3c:	1c02      	adds	r2, r0, #0
 8003b3e:	701a      	strb	r2, [r3, #0]
 8003b40:	1d3b      	adds	r3, r7, #4
 8003b42:	1c0a      	adds	r2, r1, #0
 8003b44:	701a      	strb	r2, [r3, #0]
	adc_sample_time(sample_time);
 8003b46:	1dfb      	adds	r3, r7, #7
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f7ff fee0 	bl	8003910 <adc_sample_time>
	if (DISCEN) {
 8003b50:	231c      	movs	r3, #28
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <adc_config+0x48>
		ADC1->CFGR1 |= ADC_CFGR1_DISCEN;
 8003b5a:	4b21      	ldr	r3, [pc, #132]	; (8003be0 <adc_config+0xc0>)
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <adc_config+0xc0>)
 8003b60:	2180      	movs	r1, #128	; 0x80
 8003b62:	0249      	lsls	r1, r1, #9
 8003b64:	430a      	orrs	r2, r1
 8003b66:	60da      	str	r2, [r3, #12]
	}
	if (AUTOFF) {
 8003b68:	1d3b      	adds	r3, r7, #4
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d006      	beq.n	8003b7e <adc_config+0x5e>
		ADC1->CFGR1 |= ADC_CFGR1_AUTOFF;
 8003b70:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <adc_config+0xc0>)
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	4b1a      	ldr	r3, [pc, #104]	; (8003be0 <adc_config+0xc0>)
 8003b76:	2180      	movs	r1, #128	; 0x80
 8003b78:	0209      	lsls	r1, r1, #8
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	60da      	str	r2, [r3, #12]
	}
	if (WAIT) {
 8003b7e:	2318      	movs	r3, #24
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d006      	beq.n	8003b96 <adc_config+0x76>
		ADC1->CFGR1 |= ADC_CFGR1_WAIT;
 8003b88:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <adc_config+0xc0>)
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <adc_config+0xc0>)
 8003b8e:	2180      	movs	r1, #128	; 0x80
 8003b90:	01c9      	lsls	r1, r1, #7
 8003b92:	430a      	orrs	r2, r1
 8003b94:	60da      	str	r2, [r3, #12]
	}
	if (CONT) {
 8003b96:	1dbb      	adds	r3, r7, #6
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d006      	beq.n	8003bac <adc_config+0x8c>
		ADC1->CFGR1 |= ADC_CFGR1_CONT;
 8003b9e:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <adc_config+0xc0>)
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <adc_config+0xc0>)
 8003ba4:	2180      	movs	r1, #128	; 0x80
 8003ba6:	0189      	lsls	r1, r1, #6
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	60da      	str	r2, [r3, #12]
	}
	if (OVRMOD) {
 8003bac:	2320      	movs	r3, #32
 8003bae:	18fb      	adds	r3, r7, r3
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d006      	beq.n	8003bc4 <adc_config+0xa4>
		ADC1->CFGR1 |= ADC_CFGR1_OVRMOD;
 8003bb6:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <adc_config+0xc0>)
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <adc_config+0xc0>)
 8003bbc:	2180      	movs	r1, #128	; 0x80
 8003bbe:	0149      	lsls	r1, r1, #5
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	60da      	str	r2, [r3, #12]
	}
	if (SCANDIR) {
 8003bc4:	1d7b      	adds	r3, r7, #5
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <adc_config+0xb8>
		ADC1->CFGR1 |= ADC_CFGR1_SCANDIR;
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <adc_config+0xc0>)
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	4b03      	ldr	r3, [pc, #12]	; (8003be0 <adc_config+0xc0>)
 8003bd2:	2104      	movs	r1, #4
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	60da      	str	r2, [r3, #12]
	}
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b002      	add	sp, #8
 8003bde:	bdb0      	pop	{r4, r5, r7, pc}
 8003be0:	40012400 	.word	0x40012400

08003be4 <USART_INIT>:

//*******************************| USART FUNCTIONS |*****************************//

void USART_INIT(USART_TypeDef *usart, uint8_t clk_speed, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber,
		uint32_t bd_rate) {
 8003be4:	b5b0      	push	{r4, r5, r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	607a      	str	r2, [r7, #4]
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	250b      	movs	r5, #11
 8003bf2:	197b      	adds	r3, r7, r5
 8003bf4:	1c0a      	adds	r2, r1, #0
 8003bf6:	701a      	strb	r2, [r3, #0]

	USART_CLK_EN(usart);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f000 f870 	bl	8003ce0 <USART_CLK_EN>

	USART_PIN_CONFIG(usart, tx_port, rx_port, tx_pinNumber, rx_pinNumber);
 8003c00:	6a3c      	ldr	r4, [r7, #32]
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	0023      	movs	r3, r4
 8003c0e:	f000 f8a9 	bl	8003d64 <USART_PIN_CONFIG>

	USART_BDR_SEL(usart, clk_speed, bd_rate);
 8003c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c14:	197b      	adds	r3, r7, r5
 8003c16:	7819      	ldrb	r1, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f000 f9b6 	bl	8003f8c <USART_BDR_SEL>

	usart->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	220d      	movs	r2, #13
 8003c26:	431a      	orrs	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	601a      	str	r2, [r3, #0]

}
 8003c2c:	46c0      	nop			; (mov r8, r8)
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b004      	add	sp, #16
 8003c32:	bdb0      	pop	{r4, r5, r7, pc}

08003c34 <USART_IT_EN>:

void USART_IT_EN(USART_TypeDef *usart, uint8_t TX_IT, uint8_t RX_IT,
		uint8_t IDLE_IT) {
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	000c      	movs	r4, r1
 8003c3e:	0010      	movs	r0, r2
 8003c40:	0019      	movs	r1, r3
 8003c42:	1cfb      	adds	r3, r7, #3
 8003c44:	1c22      	adds	r2, r4, #0
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	1cbb      	adds	r3, r7, #2
 8003c4a:	1c02      	adds	r2, r0, #0
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	1c7b      	adds	r3, r7, #1
 8003c50:	1c0a      	adds	r2, r1, #0
 8003c52:	701a      	strb	r2, [r3, #0]
	if (usart == USART1) {
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a1e      	ldr	r2, [pc, #120]	; (8003cd0 <USART_IT_EN+0x9c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d103      	bne.n	8003c64 <USART_IT_EN+0x30>
		NVIC_EnableIRQ(USART1_IRQn);
 8003c5c:	201b      	movs	r0, #27
 8003c5e:	f7ff fbed 	bl	800343c <__NVIC_EnableIRQ>
 8003c62:	e012      	b.n	8003c8a <USART_IT_EN+0x56>
	} else if (usart == USART2) {
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <USART_IT_EN+0xa0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d103      	bne.n	8003c74 <USART_IT_EN+0x40>
		NVIC_EnableIRQ(USART2_IRQn);
 8003c6c:	201c      	movs	r0, #28
 8003c6e:	f7ff fbe5 	bl	800343c <__NVIC_EnableIRQ>
 8003c72:	e00a      	b.n	8003c8a <USART_IT_EN+0x56>
	} else if (usart == USART3 || usart == USART4) {
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a18      	ldr	r2, [pc, #96]	; (8003cd8 <USART_IT_EN+0xa4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d003      	beq.n	8003c84 <USART_IT_EN+0x50>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a17      	ldr	r2, [pc, #92]	; (8003cdc <USART_IT_EN+0xa8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d102      	bne.n	8003c8a <USART_IT_EN+0x56>
		NVIC_EnableIRQ(USART3_4_IRQn);
 8003c84:	201d      	movs	r0, #29
 8003c86:	f7ff fbd9 	bl	800343c <__NVIC_EnableIRQ>
	}

	if (TX_IT) {
 8003c8a:	1cfb      	adds	r3, r7, #3
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d005      	beq.n	8003c9e <USART_IT_EN+0x6a>
		usart->CR1 |= USART_CR1_TXEIE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2280      	movs	r2, #128	; 0x80
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	601a      	str	r2, [r3, #0]
	}
	if (RX_IT) {
 8003c9e:	1cbb      	adds	r3, r7, #2
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <USART_IT_EN+0x7e>
		usart->CR1 |= USART_CR1_RXNEIE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2220      	movs	r2, #32
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	601a      	str	r2, [r3, #0]
	}
	if (IDLE_IT) {
 8003cb2:	1c7b      	adds	r3, r7, #1
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <USART_IT_EN+0x92>
		usart->CR1 |= USART_CR1_IDLEIE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2210      	movs	r2, #16
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	601a      	str	r2, [r3, #0]
	}
}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b003      	add	sp, #12
 8003ccc:	bd90      	pop	{r4, r7, pc}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	40013800 	.word	0x40013800
 8003cd4:	40004400 	.word	0x40004400
 8003cd8:	40004800 	.word	0x40004800
 8003cdc:	40004c00 	.word	0x40004c00

08003ce0 <USART_CLK_EN>:
// Initialize UART pins, Baudrate
void USART_CLK_EN(USART_TypeDef *usart) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
	if (usart == USART1) {
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a19      	ldr	r2, [pc, #100]	; (8003d50 <USART_CLK_EN+0x70>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d107      	bne.n	8003d00 <USART_CLK_EN+0x20>
		USART1_CLK_EN;
 8003cf0:	4b18      	ldr	r3, [pc, #96]	; (8003d54 <USART_CLK_EN+0x74>)
 8003cf2:	69da      	ldr	r2, [r3, #28]
 8003cf4:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <USART_CLK_EN+0x74>)
 8003cf6:	2180      	movs	r1, #128	; 0x80
 8003cf8:	01c9      	lsls	r1, r1, #7
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	61da      	str	r2, [r3, #28]
	} else if (usart == USART3) {
		USART3_CLK_EN;
	} else if (usart == USART4) {
		USART4_CLK_EN;
	}
}
 8003cfe:	e022      	b.n	8003d46 <USART_CLK_EN+0x66>
	} else if (usart == USART2) {
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a15      	ldr	r2, [pc, #84]	; (8003d58 <USART_CLK_EN+0x78>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d107      	bne.n	8003d18 <USART_CLK_EN+0x38>
		USART2_CLK_EN;
 8003d08:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <USART_CLK_EN+0x74>)
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <USART_CLK_EN+0x74>)
 8003d0e:	2180      	movs	r1, #128	; 0x80
 8003d10:	0289      	lsls	r1, r1, #10
 8003d12:	430a      	orrs	r2, r1
 8003d14:	61da      	str	r2, [r3, #28]
}
 8003d16:	e016      	b.n	8003d46 <USART_CLK_EN+0x66>
	} else if (usart == USART3) {
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a10      	ldr	r2, [pc, #64]	; (8003d5c <USART_CLK_EN+0x7c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d107      	bne.n	8003d30 <USART_CLK_EN+0x50>
		USART3_CLK_EN;
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <USART_CLK_EN+0x74>)
 8003d22:	69da      	ldr	r2, [r3, #28]
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <USART_CLK_EN+0x74>)
 8003d26:	2180      	movs	r1, #128	; 0x80
 8003d28:	02c9      	lsls	r1, r1, #11
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	61da      	str	r2, [r3, #28]
}
 8003d2e:	e00a      	b.n	8003d46 <USART_CLK_EN+0x66>
	} else if (usart == USART4) {
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a0b      	ldr	r2, [pc, #44]	; (8003d60 <USART_CLK_EN+0x80>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d106      	bne.n	8003d46 <USART_CLK_EN+0x66>
		USART4_CLK_EN;
 8003d38:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <USART_CLK_EN+0x74>)
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <USART_CLK_EN+0x74>)
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	0309      	lsls	r1, r1, #12
 8003d42:	430a      	orrs	r2, r1
 8003d44:	61da      	str	r2, [r3, #28]
}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	b002      	add	sp, #8
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	40013800 	.word	0x40013800
 8003d54:	40021000 	.word	0x40021000
 8003d58:	40004400 	.word	0x40004400
 8003d5c:	40004800 	.word	0x40004800
 8003d60:	40004c00 	.word	0x40004c00

08003d64 <USART_PIN_CONFIG>:

void USART_PIN_CONFIG(USART_TypeDef *usart, GPIO_TypeDef *tx_port,
		GPIO_TypeDef *rx_port, uint32_t tx_pinNumber, uint32_t rx_pinNumber) {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]

	gpio_config(tx_port, tx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8003d72:	6839      	ldr	r1, [r7, #0]
 8003d74:	68b8      	ldr	r0, [r7, #8]
 8003d76:	2300      	movs	r3, #0
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	2302      	movs	r3, #2
 8003d80:	2202      	movs	r2, #2
 8003d82:	f7ff fbef 	bl	8003564 <gpio_config>
	gpio_config(rx_port, rx_pinNumber, ALT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8003d86:	69b9      	ldr	r1, [r7, #24]
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	2302      	movs	r3, #2
 8003d94:	2202      	movs	r2, #2
 8003d96:	f7ff fbe5 	bl	8003564 <gpio_config>

	if (usart == USART1) {
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a75      	ldr	r2, [pc, #468]	; (8003f74 <USART_PIN_CONFIG+0x210>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d13a      	bne.n	8003e18 <USART_PIN_CONFIG+0xb4>
		// TX
		if (tx_port == PORTA && tx_pinNumber == 9) {
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	2390      	movs	r3, #144	; 0x90
 8003da6:	05db      	lsls	r3, r3, #23
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d109      	bne.n	8003dc0 <USART_PIN_CONFIG+0x5c>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b09      	cmp	r3, #9
 8003db0:	d106      	bne.n	8003dc0 <USART_PIN_CONFIG+0x5c>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PA9);
 8003db2:	6839      	ldr	r1, [r7, #0]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2201      	movs	r2, #1
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7ff fc9c 	bl	80036f6 <gpio_altfn>
 8003dbe:	e00c      	b.n	8003dda <USART_PIN_CONFIG+0x76>
		} else if (tx_port == PORTB && tx_pinNumber == 6) {
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	4a6d      	ldr	r2, [pc, #436]	; (8003f78 <USART_PIN_CONFIG+0x214>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d108      	bne.n	8003dda <USART_PIN_CONFIG+0x76>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b06      	cmp	r3, #6
 8003dcc:	d105      	bne.n	8003dda <USART_PIN_CONFIG+0x76>
			gpio_altfn(tx_port, tx_pinNumber, USART1_TX_PB6);
 8003dce:	6839      	ldr	r1, [r7, #0]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f7ff fc8e 	bl	80036f6 <gpio_altfn>
		}

		// RX
		if (rx_port == PORTA && rx_pinNumber == 10) {
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	2390      	movs	r3, #144	; 0x90
 8003dde:	05db      	lsls	r3, r3, #23
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d109      	bne.n	8003df8 <USART_PIN_CONFIG+0x94>
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	2b0a      	cmp	r3, #10
 8003de8:	d106      	bne.n	8003df8 <USART_PIN_CONFIG+0x94>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PA10);
 8003dea:	69b9      	ldr	r1, [r7, #24]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	0018      	movs	r0, r3
 8003df2:	f7ff fc80 	bl	80036f6 <gpio_altfn>
 8003df6:	e0b8      	b.n	8003f6a <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTB && rx_pinNumber == 7) {
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a5f      	ldr	r2, [pc, #380]	; (8003f78 <USART_PIN_CONFIG+0x214>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d000      	beq.n	8003e02 <USART_PIN_CONFIG+0x9e>
 8003e00:	e0b3      	b.n	8003f6a <USART_PIN_CONFIG+0x206>
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b07      	cmp	r3, #7
 8003e06:	d000      	beq.n	8003e0a <USART_PIN_CONFIG+0xa6>
 8003e08:	e0af      	b.n	8003f6a <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART1_RX_PB7);
 8003e0a:	69b9      	ldr	r1, [r7, #24]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	0018      	movs	r0, r3
 8003e12:	f7ff fc70 	bl	80036f6 <gpio_altfn>
		}
	} else if (usart == USART4) {
		gpio_altfn(tx_port, tx_pinNumber, USART4_TX_PA0);
		gpio_altfn(rx_port, rx_pinNumber, USART4_RX_PA1);
	}
}
 8003e16:	e0a8      	b.n	8003f6a <USART_PIN_CONFIG+0x206>
	} else if (usart == USART2) {
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4a58      	ldr	r2, [pc, #352]	; (8003f7c <USART_PIN_CONFIG+0x218>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d13c      	bne.n	8003e9a <USART_PIN_CONFIG+0x136>
		if (tx_port == PORTA && tx_pinNumber == 2) {
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	2390      	movs	r3, #144	; 0x90
 8003e24:	05db      	lsls	r3, r3, #23
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d109      	bne.n	8003e3e <USART_PIN_CONFIG+0xda>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d106      	bne.n	8003e3e <USART_PIN_CONFIG+0xda>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA2);
 8003e30:	6839      	ldr	r1, [r7, #0]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2201      	movs	r2, #1
 8003e36:	0018      	movs	r0, r3
 8003e38:	f7ff fc5d 	bl	80036f6 <gpio_altfn>
 8003e3c:	e00d      	b.n	8003e5a <USART_PIN_CONFIG+0xf6>
		} else if (tx_port == PORTA && tx_pinNumber == 14) {
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	2390      	movs	r3, #144	; 0x90
 8003e42:	05db      	lsls	r3, r3, #23
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d108      	bne.n	8003e5a <USART_PIN_CONFIG+0xf6>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2b0e      	cmp	r3, #14
 8003e4c:	d105      	bne.n	8003e5a <USART_PIN_CONFIG+0xf6>
			gpio_altfn(tx_port, tx_pinNumber, USART2_TX_PA14);
 8003e4e:	6839      	ldr	r1, [r7, #0]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2201      	movs	r2, #1
 8003e54:	0018      	movs	r0, r3
 8003e56:	f7ff fc4e 	bl	80036f6 <gpio_altfn>
		if (rx_port == PORTA && rx_pinNumber == 3) {
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	2390      	movs	r3, #144	; 0x90
 8003e5e:	05db      	lsls	r3, r3, #23
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d109      	bne.n	8003e78 <USART_PIN_CONFIG+0x114>
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d106      	bne.n	8003e78 <USART_PIN_CONFIG+0x114>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA3);
 8003e6a:	69b9      	ldr	r1, [r7, #24]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	0018      	movs	r0, r3
 8003e72:	f7ff fc40 	bl	80036f6 <gpio_altfn>
 8003e76:	e078      	b.n	8003f6a <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTA && rx_pinNumber == 15) {
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	2390      	movs	r3, #144	; 0x90
 8003e7c:	05db      	lsls	r3, r3, #23
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d000      	beq.n	8003e84 <USART_PIN_CONFIG+0x120>
 8003e82:	e072      	b.n	8003f6a <USART_PIN_CONFIG+0x206>
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b0f      	cmp	r3, #15
 8003e88:	d000      	beq.n	8003e8c <USART_PIN_CONFIG+0x128>
 8003e8a:	e06e      	b.n	8003f6a <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART2_RX_PA15);
 8003e8c:	69b9      	ldr	r1, [r7, #24]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	0018      	movs	r0, r3
 8003e94:	f7ff fc2f 	bl	80036f6 <gpio_altfn>
}
 8003e98:	e067      	b.n	8003f6a <USART_PIN_CONFIG+0x206>
	} else if (usart == USART3) {
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4a38      	ldr	r2, [pc, #224]	; (8003f80 <USART_PIN_CONFIG+0x21c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d152      	bne.n	8003f48 <USART_PIN_CONFIG+0x1e4>
		if (tx_port == PORTC && tx_pinNumber == 4) {
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	4a37      	ldr	r2, [pc, #220]	; (8003f84 <USART_PIN_CONFIG+0x220>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d109      	bne.n	8003ebe <USART_PIN_CONFIG+0x15a>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d106      	bne.n	8003ebe <USART_PIN_CONFIG+0x15a>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PC4);
 8003eb0:	6839      	ldr	r1, [r7, #0]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f7ff fc1d 	bl	80036f6 <gpio_altfn>
 8003ebc:	e01a      	b.n	8003ef4 <USART_PIN_CONFIG+0x190>
		} else if (tx_port == PORTB && tx_pinNumber == 10) {
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	4a2d      	ldr	r2, [pc, #180]	; (8003f78 <USART_PIN_CONFIG+0x214>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d109      	bne.n	8003eda <USART_PIN_CONFIG+0x176>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b0a      	cmp	r3, #10
 8003eca:	d106      	bne.n	8003eda <USART_PIN_CONFIG+0x176>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PB10);
 8003ecc:	6839      	ldr	r1, [r7, #0]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f7ff fc0f 	bl	80036f6 <gpio_altfn>
 8003ed8:	e00c      	b.n	8003ef4 <USART_PIN_CONFIG+0x190>
		} else if (tx_port == PORTC && tx_pinNumber == 10) {
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	4a29      	ldr	r2, [pc, #164]	; (8003f84 <USART_PIN_CONFIG+0x220>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d108      	bne.n	8003ef4 <USART_PIN_CONFIG+0x190>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b0a      	cmp	r3, #10
 8003ee6:	d105      	bne.n	8003ef4 <USART_PIN_CONFIG+0x190>
			gpio_altfn(tx_port, tx_pinNumber, USART3_TX_PC10);
 8003ee8:	6839      	ldr	r1, [r7, #0]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2201      	movs	r2, #1
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f7ff fc01 	bl	80036f6 <gpio_altfn>
		if (rx_port == PORTC && rx_pinNumber == 5) {
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a23      	ldr	r2, [pc, #140]	; (8003f84 <USART_PIN_CONFIG+0x220>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d109      	bne.n	8003f10 <USART_PIN_CONFIG+0x1ac>
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b05      	cmp	r3, #5
 8003f00:	d106      	bne.n	8003f10 <USART_PIN_CONFIG+0x1ac>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC5);
 8003f02:	69b9      	ldr	r1, [r7, #24]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f7ff fbf4 	bl	80036f6 <gpio_altfn>
 8003f0e:	e02c      	b.n	8003f6a <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTC && rx_pinNumber == 11) {
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <USART_PIN_CONFIG+0x220>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d109      	bne.n	8003f2c <USART_PIN_CONFIG+0x1c8>
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	2b0b      	cmp	r3, #11
 8003f1c:	d106      	bne.n	8003f2c <USART_PIN_CONFIG+0x1c8>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PC11);
 8003f1e:	69b9      	ldr	r1, [r7, #24]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	0018      	movs	r0, r3
 8003f26:	f7ff fbe6 	bl	80036f6 <gpio_altfn>
 8003f2a:	e01e      	b.n	8003f6a <USART_PIN_CONFIG+0x206>
		} else if (rx_port == PORTB && rx_pinNumber == 11) {
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <USART_PIN_CONFIG+0x214>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d11a      	bne.n	8003f6a <USART_PIN_CONFIG+0x206>
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b0b      	cmp	r3, #11
 8003f38:	d117      	bne.n	8003f6a <USART_PIN_CONFIG+0x206>
			gpio_altfn(rx_port, rx_pinNumber, USART3_RX_PB11);
 8003f3a:	69b9      	ldr	r1, [r7, #24]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2204      	movs	r2, #4
 8003f40:	0018      	movs	r0, r3
 8003f42:	f7ff fbd8 	bl	80036f6 <gpio_altfn>
}
 8003f46:	e010      	b.n	8003f6a <USART_PIN_CONFIG+0x206>
	} else if (usart == USART4) {
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4a0f      	ldr	r2, [pc, #60]	; (8003f88 <USART_PIN_CONFIG+0x224>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d10c      	bne.n	8003f6a <USART_PIN_CONFIG+0x206>
		gpio_altfn(tx_port, tx_pinNumber, USART4_TX_PA0);
 8003f50:	6839      	ldr	r1, [r7, #0]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2204      	movs	r2, #4
 8003f56:	0018      	movs	r0, r3
 8003f58:	f7ff fbcd 	bl	80036f6 <gpio_altfn>
		gpio_altfn(rx_port, rx_pinNumber, USART4_RX_PA1);
 8003f5c:	69b9      	ldr	r1, [r7, #24]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2204      	movs	r2, #4
 8003f62:	0018      	movs	r0, r3
 8003f64:	f7ff fbc7 	bl	80036f6 <gpio_altfn>
}
 8003f68:	e7ff      	b.n	8003f6a <USART_PIN_CONFIG+0x206>
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b004      	add	sp, #16
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	40013800 	.word	0x40013800
 8003f78:	48000400 	.word	0x48000400
 8003f7c:	40004400 	.word	0x40004400
 8003f80:	40004800 	.word	0x40004800
 8003f84:	48000800 	.word	0x48000800
 8003f88:	40004c00 	.word	0x40004c00

08003f8c <USART_BDR_SEL>:

void USART_BDR_SEL(USART_TypeDef *usart, uint8_t clk_speed, uint32_t bd_rate) {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	200b      	movs	r0, #11
 8003f98:	183b      	adds	r3, r7, r0
 8003f9a:	1c0a      	adds	r2, r1, #0
 8003f9c:	701a      	strb	r2, [r3, #0]

//==============================================================//
// clkPer / (baudR x 16) = 48MHz / (9600 x 16) = 312.5 = 1388   //
//==============================================================//

	if (clk_speed == 8) {
 8003f9e:	183b      	adds	r3, r7, r0
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d108      	bne.n	8003fb8 <USART_BDR_SEL+0x2c>
		if (bd_rate == 9600) {
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	2396      	movs	r3, #150	; 0x96
 8003faa:	019b      	lsls	r3, r3, #6
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d150      	bne.n	8004052 <USART_BDR_SEL+0xc6>
			usart->BRR = 0x341;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4a2a      	ldr	r2, [pc, #168]	; (800405c <USART_BDR_SEL+0xd0>)
 8003fb4:	60da      	str	r2, [r3, #12]
			USART_BDR_48_230400;
		} else if (bd_rate == 460800) {
			USART_BDR_48_460800;
		}
	}
}
 8003fb6:	e04c      	b.n	8004052 <USART_BDR_SEL+0xc6>
	} else if (clk_speed == 48) {
 8003fb8:	230b      	movs	r3, #11
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b30      	cmp	r3, #48	; 0x30
 8003fc0:	d147      	bne.n	8004052 <USART_BDR_SEL+0xc6>
		if (bd_rate == 4800) {
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	2396      	movs	r3, #150	; 0x96
 8003fc6:	015b      	lsls	r3, r3, #5
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d103      	bne.n	8003fd4 <USART_BDR_SEL+0x48>
			USART_BDR_48_4800;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4a24      	ldr	r2, [pc, #144]	; (8004060 <USART_BDR_SEL+0xd4>)
 8003fd0:	60da      	str	r2, [r3, #12]
}
 8003fd2:	e03e      	b.n	8004052 <USART_BDR_SEL+0xc6>
		} else if (bd_rate == 9600) {
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	2396      	movs	r3, #150	; 0x96
 8003fd8:	019b      	lsls	r3, r3, #6
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d103      	bne.n	8003fe6 <USART_BDR_SEL+0x5a>
			USART_BDR_48_9600;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4a20      	ldr	r2, [pc, #128]	; (8004064 <USART_BDR_SEL+0xd8>)
 8003fe2:	60da      	str	r2, [r3, #12]
}
 8003fe4:	e035      	b.n	8004052 <USART_BDR_SEL+0xc6>
		} else if (bd_rate == 19200) {
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	2396      	movs	r3, #150	; 0x96
 8003fea:	01db      	lsls	r3, r3, #7
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d103      	bne.n	8003ff8 <USART_BDR_SEL+0x6c>
			USART_BDR_48_19200;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <USART_BDR_SEL+0xdc>)
 8003ff4:	60da      	str	r2, [r3, #12]
}
 8003ff6:	e02c      	b.n	8004052 <USART_BDR_SEL+0xc6>
		} else if (bd_rate == 38400) {
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	2396      	movs	r3, #150	; 0x96
 8003ffc:	021b      	lsls	r3, r3, #8
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d103      	bne.n	800400a <USART_BDR_SEL+0x7e>
			USART_BDR_48_38400;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4a19      	ldr	r2, [pc, #100]	; (800406c <USART_BDR_SEL+0xe0>)
 8004006:	60da      	str	r2, [r3, #12]
}
 8004008:	e023      	b.n	8004052 <USART_BDR_SEL+0xc6>
		} else if (bd_rate == 57600) {
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	23e1      	movs	r3, #225	; 0xe1
 800400e:	021b      	lsls	r3, r3, #8
 8004010:	429a      	cmp	r2, r3
 8004012:	d103      	bne.n	800401c <USART_BDR_SEL+0x90>
			USART_BDR_48_57600;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4a11      	ldr	r2, [pc, #68]	; (800405c <USART_BDR_SEL+0xd0>)
 8004018:	60da      	str	r2, [r3, #12]
}
 800401a:	e01a      	b.n	8004052 <USART_BDR_SEL+0xc6>
		} else if (bd_rate == 115200) {
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	23e1      	movs	r3, #225	; 0xe1
 8004020:	025b      	lsls	r3, r3, #9
 8004022:	429a      	cmp	r2, r3
 8004024:	d104      	bne.n	8004030 <USART_BDR_SEL+0xa4>
			USART_BDR_48_115200;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	22a2      	movs	r2, #162	; 0xa2
 800402a:	32ff      	adds	r2, #255	; 0xff
 800402c:	60da      	str	r2, [r3, #12]
}
 800402e:	e010      	b.n	8004052 <USART_BDR_SEL+0xc6>
		} else if (bd_rate == 230400) {
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	23e1      	movs	r3, #225	; 0xe1
 8004034:	029b      	lsls	r3, r3, #10
 8004036:	429a      	cmp	r2, r3
 8004038:	d103      	bne.n	8004042 <USART_BDR_SEL+0xb6>
			USART_BDR_48_230400;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	22d0      	movs	r2, #208	; 0xd0
 800403e:	60da      	str	r2, [r3, #12]
}
 8004040:	e007      	b.n	8004052 <USART_BDR_SEL+0xc6>
		} else if (bd_rate == 460800) {
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	23e1      	movs	r3, #225	; 0xe1
 8004046:	02db      	lsls	r3, r3, #11
 8004048:	429a      	cmp	r2, r3
 800404a:	d102      	bne.n	8004052 <USART_BDR_SEL+0xc6>
			USART_BDR_48_460800;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2234      	movs	r2, #52	; 0x34
 8004050:	60da      	str	r2, [r3, #12]
}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	46bd      	mov	sp, r7
 8004056:	b004      	add	sp, #16
 8004058:	bd80      	pop	{r7, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	00000341 	.word	0x00000341
 8004060:	00000271 	.word	0x00000271
 8004064:	00001388 	.word	0x00001388
 8004068:	000009c4 	.word	0x000009c4
 800406c:	000004e2 	.word	0x000004e2

08004070 <USART_WRITE>:

/* Write a character to USART1 */
void USART_WRITE(USART_TypeDef *usart, uint8_t *ch, uint32_t len) {
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
	for (uint8_t i = 0; i < len; i++) {
 800407c:	2317      	movs	r3, #23
 800407e:	18fb      	adds	r3, r7, r3
 8004080:	2200      	movs	r2, #0
 8004082:	701a      	strb	r2, [r3, #0]
 8004084:	e01c      	b.n	80040c0 <USART_WRITE+0x50>
		if (len == 1) {
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d104      	bne.n	8004096 <USART_WRITE+0x26>
			usart->TDR = ch;
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	851a      	strh	r2, [r3, #40]	; 0x28
 8004094:	e008      	b.n	80040a8 <USART_WRITE+0x38>
		} else {
			usart->TDR = ch[i];
 8004096:	2317      	movs	r3, #23
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	18d3      	adds	r3, r2, r3
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	851a      	strh	r2, [r3, #40]	; 0x28
		}
		while (!(usart->ISR & USART_ISR_TXE))
 80040a8:	46c0      	nop			; (mov r8, r8)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	2280      	movs	r2, #128	; 0x80
 80040b0:	4013      	ands	r3, r2
 80040b2:	d0fa      	beq.n	80040aa <USART_WRITE+0x3a>
	for (uint8_t i = 0; i < len; i++) {
 80040b4:	2117      	movs	r1, #23
 80040b6:	187b      	adds	r3, r7, r1
 80040b8:	781a      	ldrb	r2, [r3, #0]
 80040ba:	187b      	adds	r3, r7, r1
 80040bc:	3201      	adds	r2, #1
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	2317      	movs	r3, #23
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d8dc      	bhi.n	8004086 <USART_WRITE+0x16>
			;
	}
}
 80040cc:	46c0      	nop			; (mov r8, r8)
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b006      	add	sp, #24
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <RCC_CONFIG_48MHZ>:
}

//*******************************************************************************//

//*****************************| RCC CLOCK FUNCTION |****************************//
void RCC_CONFIG_48MHZ() {
 80040d8:	b590      	push	{r4, r7, lr}
 80040da:	b091      	sub	sp, #68	; 0x44
 80040dc:	af00      	add	r7, sp, #0
//	}
//
//	SystemCoreClockUpdate();
//	SysTick_Config(SystemCoreClock/1000);

	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80040de:	2410      	movs	r4, #16
 80040e0:	193b      	adds	r3, r7, r4
 80040e2:	0018      	movs	r0, r3
 80040e4:	2330      	movs	r3, #48	; 0x30
 80040e6:	001a      	movs	r2, r3
 80040e8:	2100      	movs	r1, #0
 80040ea:	f005 fc8c 	bl	8009a06 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80040ee:	003b      	movs	r3, r7
 80040f0:	0018      	movs	r0, r3
 80040f2:	2310      	movs	r3, #16
 80040f4:	001a      	movs	r2, r3
 80040f6:	2100      	movs	r1, #0
 80040f8:	f005 fc85 	bl	8009a06 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040fc:	0021      	movs	r1, r4
 80040fe:	187b      	adds	r3, r7, r1
 8004100:	2202      	movs	r2, #2
 8004102:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004104:	187b      	adds	r3, r7, r1
 8004106:	2201      	movs	r2, #1
 8004108:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800410a:	187b      	adds	r3, r7, r1
 800410c:	2210      	movs	r2, #16
 800410e:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004110:	187b      	adds	r3, r7, r1
 8004112:	2202      	movs	r2, #2
 8004114:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004116:	187b      	adds	r3, r7, r1
 8004118:	2280      	movs	r2, #128	; 0x80
 800411a:	0212      	lsls	r2, r2, #8
 800411c:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800411e:	187b      	adds	r3, r7, r1
 8004120:	2280      	movs	r2, #128	; 0x80
 8004122:	0352      	lsls	r2, r2, #13
 8004124:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004126:	187b      	adds	r3, r7, r1
 8004128:	2200      	movs	r2, #0
 800412a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800412c:	187b      	adds	r3, r7, r1
 800412e:	0018      	movs	r0, r3
 8004130:	f7fd f898 	bl	8001264 <HAL_RCC_OscConfig>
 8004134:	1e03      	subs	r3, r0, #0
 8004136:	d003      	beq.n	8004140 <RCC_CONFIG_48MHZ+0x68>
		print("Error1 in clock\n\r");
 8004138:	4b0f      	ldr	r3, [pc, #60]	; (8004178 <RCC_CONFIG_48MHZ+0xa0>)
 800413a:	0018      	movs	r0, r3
 800413c:	f7ff fb1e 	bl	800377c <print>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004140:	003b      	movs	r3, r7
 8004142:	2207      	movs	r2, #7
 8004144:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004146:	003b      	movs	r3, r7
 8004148:	2202      	movs	r2, #2
 800414a:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800414c:	003b      	movs	r3, r7
 800414e:	2200      	movs	r2, #0
 8004150:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004152:	003b      	movs	r3, r7
 8004154:	2200      	movs	r2, #0
 8004156:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8004158:	003b      	movs	r3, r7
 800415a:	2101      	movs	r1, #1
 800415c:	0018      	movs	r0, r3
 800415e:	f7fd fb9f 	bl	80018a0 <HAL_RCC_ClockConfig>
 8004162:	1e03      	subs	r3, r0, #0
 8004164:	d003      	beq.n	800416e <RCC_CONFIG_48MHZ+0x96>
		print("Error2 in clock\n\r");
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <RCC_CONFIG_48MHZ+0xa4>)
 8004168:	0018      	movs	r0, r3
 800416a:	f7ff fb07 	bl	800377c <print>
	}
}
 800416e:	46c0      	nop			; (mov r8, r8)
 8004170:	46bd      	mov	sp, r7
 8004172:	b011      	add	sp, #68	; 0x44
 8004174:	bd90      	pop	{r4, r7, pc}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	0800a5a0 	.word	0x0800a5a0
 800417c:	0800a5b4 	.word	0x0800a5b4

08004180 <sd_mount>:
 */

#include "SDCard.h"
#include "st7783.h"

void sd_mount() {
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8004184:	490e      	ldr	r1, [pc, #56]	; (80041c0 <sd_mount+0x40>)
 8004186:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <sd_mount+0x44>)
 8004188:	2201      	movs	r2, #1
 800418a:	0018      	movs	r0, r3
 800418c:	f003 f902 	bl	8007394 <f_mount>
 8004190:	0003      	movs	r3, r0
 8004192:	001a      	movs	r2, r3
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <sd_mount+0x48>)
 8004196:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <sd_mount+0x48>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00b      	beq.n	80041b8 <sd_mount+0x38>
		print("Error in Mounting --- ");
 80041a0:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <sd_mount+0x4c>)
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7ff faea 	bl	800377c <print>
		print("f_mount error (%i)\r\n", fres);
 80041a8:	4b07      	ldr	r3, [pc, #28]	; (80041c8 <sd_mount+0x48>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	001a      	movs	r2, r3
 80041ae:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <sd_mount+0x50>)
 80041b0:	0011      	movs	r1, r2
 80041b2:	0018      	movs	r0, r3
 80041b4:	f7ff fae2 	bl	800377c <print>
//		while (1)
//			;
	}
}
 80041b8:	46c0      	nop			; (mov r8, r8)
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	0800a5c8 	.word	0x0800a5c8
 80041c4:	2000059c 	.word	0x2000059c
 80041c8:	200007d0 	.word	0x200007d0
 80041cc:	0800a5cc 	.word	0x0800a5cc
 80041d0:	0800a5e4 	.word	0x0800a5e4

080041d4 <sd_space>:

void sd_space() {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;

	FATFS *getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 80041da:	003a      	movs	r2, r7
 80041dc:	1d39      	adds	r1, r7, #4
 80041de:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <sd_space+0x74>)
 80041e0:	0018      	movs	r0, r3
 80041e2:	f003 f949 	bl	8007478 <f_getfree>
 80041e6:	0003      	movs	r3, r0
 80041e8:	001a      	movs	r2, r3
 80041ea:	4b18      	ldr	r3, [pc, #96]	; (800424c <sd_space+0x78>)
 80041ec:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 80041ee:	4b17      	ldr	r3, [pc, #92]	; (800424c <sd_space+0x78>)
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00b      	beq.n	800420e <sd_space+0x3a>
		print("Error in fetching space data --- ");
 80041f6:	4b16      	ldr	r3, [pc, #88]	; (8004250 <sd_space+0x7c>)
 80041f8:	0018      	movs	r0, r3
 80041fa:	f7ff fabf 	bl	800377c <print>
		print("f_getfree error (%i)\r\n", fres);
 80041fe:	4b13      	ldr	r3, [pc, #76]	; (800424c <sd_space+0x78>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	001a      	movs	r2, r3
 8004204:	4b13      	ldr	r3, [pc, #76]	; (8004254 <sd_space+0x80>)
 8004206:	0011      	movs	r1, r2
 8004208:	0018      	movs	r0, r3
 800420a:	f7ff fab7 	bl	800377c <print>
//		while (1)
//			;
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	2386      	movs	r3, #134	; 0x86
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	58d3      	ldr	r3, [r2, r3]
 8004216:	3b02      	subs	r3, #2
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	490f      	ldr	r1, [pc, #60]	; (8004258 <sd_space+0x84>)
 800421c:	5c52      	ldrb	r2, [r2, r1]
 800421e:	4353      	muls	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
	free_sectors = free_clusters * getFreeFs->csize;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	4a0c      	ldr	r2, [pc, #48]	; (8004258 <sd_space+0x84>)
 8004226:	5c9b      	ldrb	r3, [r3, r2]
 8004228:	001a      	movs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4353      	muls	r3, r2
 800422e:	60bb      	str	r3, [r7, #8]

	print(
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	0859      	lsrs	r1, r3, #1
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	085a      	lsrs	r2, r3, #1
 8004238:	4b08      	ldr	r3, [pc, #32]	; (800425c <sd_space+0x88>)
 800423a:	0018      	movs	r0, r3
 800423c:	f7ff fa9e 	bl	800377c <print>
			"SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n",
			total_sectors / 2, free_sectors / 2);
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b004      	add	sp, #16
 8004246:	bd80      	pop	{r7, pc}
 8004248:	0800a5c8 	.word	0x0800a5c8
 800424c:	200007d0 	.word	0x200007d0
 8004250:	0800a5fc 	.word	0x0800a5fc
 8004254:	0800a620 	.word	0x0800a620
 8004258:	00000202 	.word	0x00000202
 800425c:	0800a638 	.word	0x0800a638

08004260 <LCD_DrawButton1>:

#include "graphics.h"
#include "Pictures.h"

void LCD_DrawButton1(char *c, int16_t x, int16_t y, int16_t w, int16_t h,
		int16_t r, uint16_t bgColor, uint16_t textColor, uint8_t bg_draw, uint16_t xPadding, uint16_t yPadding, uint8_t textSize) {
 8004260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004262:	b087      	sub	sp, #28
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	000c      	movs	r4, r1
 800426a:	0010      	movs	r0, r2
 800426c:	0019      	movs	r1, r3
 800426e:	250a      	movs	r5, #10
 8004270:	197b      	adds	r3, r7, r5
 8004272:	1c22      	adds	r2, r4, #0
 8004274:	801a      	strh	r2, [r3, #0]
 8004276:	2408      	movs	r4, #8
 8004278:	193b      	adds	r3, r7, r4
 800427a:	1c02      	adds	r2, r0, #0
 800427c:	801a      	strh	r2, [r3, #0]
 800427e:	1dbb      	adds	r3, r7, #6
 8004280:	1c0a      	adds	r2, r1, #0
 8004282:	801a      	strh	r2, [r3, #0]

	if (bg_draw == 1)
 8004284:	2330      	movs	r3, #48	; 0x30
 8004286:	2208      	movs	r2, #8
 8004288:	189b      	adds	r3, r3, r2
 800428a:	19db      	adds	r3, r3, r7
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d120      	bne.n	80042d4 <LCD_DrawButton1+0x74>
		LCD_FillRoundRect(x + 5, y + 5, w, h, r, textColor);
 8004292:	197b      	adds	r3, r7, r5
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	3305      	adds	r3, #5
 8004298:	b29b      	uxth	r3, r3
 800429a:	b218      	sxth	r0, r3
 800429c:	193b      	adds	r3, r7, r4
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	3305      	adds	r3, #5
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	b219      	sxth	r1, r3
 80042a6:	2320      	movs	r3, #32
 80042a8:	0015      	movs	r5, r2
 80042aa:	189b      	adds	r3, r3, r2
 80042ac:	19db      	adds	r3, r3, r7
 80042ae:	2400      	movs	r4, #0
 80042b0:	5f1c      	ldrsh	r4, [r3, r4]
 80042b2:	1dbb      	adds	r3, r7, #6
 80042b4:	2200      	movs	r2, #0
 80042b6:	5e9a      	ldrsh	r2, [r3, r2]
 80042b8:	232c      	movs	r3, #44	; 0x2c
 80042ba:	195b      	adds	r3, r3, r5
 80042bc:	19db      	adds	r3, r3, r7
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	2324      	movs	r3, #36	; 0x24
 80042c4:	195b      	adds	r3, r3, r5
 80042c6:	19db      	adds	r3, r3, r7
 80042c8:	2500      	movs	r5, #0
 80042ca:	5f5b      	ldrsh	r3, [r3, r5]
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	0023      	movs	r3, r4
 80042d0:	f001 fae8 	bl	80058a4 <LCD_FillRoundRect>

	LCD_FillRoundRect(x, y, w, h, r, bgColor);
 80042d4:	2320      	movs	r3, #32
 80042d6:	2208      	movs	r2, #8
 80042d8:	189b      	adds	r3, r3, r2
 80042da:	19db      	adds	r3, r3, r7
 80042dc:	2200      	movs	r2, #0
 80042de:	5e9c      	ldrsh	r4, [r3, r2]
 80042e0:	1dbb      	adds	r3, r7, #6
 80042e2:	2100      	movs	r1, #0
 80042e4:	5e5b      	ldrsh	r3, [r3, r1]
 80042e6:	469c      	mov	ip, r3
 80042e8:	2508      	movs	r5, #8
 80042ea:	197b      	adds	r3, r7, r5
 80042ec:	2000      	movs	r0, #0
 80042ee:	5e19      	ldrsh	r1, [r3, r0]
 80042f0:	260a      	movs	r6, #10
 80042f2:	19bb      	adds	r3, r7, r6
 80042f4:	2000      	movs	r0, #0
 80042f6:	5e18      	ldrsh	r0, [r3, r0]
 80042f8:	2328      	movs	r3, #40	; 0x28
 80042fa:	2208      	movs	r2, #8
 80042fc:	189b      	adds	r3, r3, r2
 80042fe:	19db      	adds	r3, r3, r7
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	9301      	str	r3, [sp, #4]
 8004304:	2324      	movs	r3, #36	; 0x24
 8004306:	189b      	adds	r3, r3, r2
 8004308:	19db      	adds	r3, r3, r7
 800430a:	2200      	movs	r2, #0
 800430c:	5e9b      	ldrsh	r3, [r3, r2]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	0023      	movs	r3, r4
 8004312:	4662      	mov	r2, ip
 8004314:	f001 fac6 	bl	80058a4 <LCD_FillRoundRect>
	LCD_DrawRoundRect(x, y, w, h, r, WHITE);
 8004318:	2320      	movs	r3, #32
 800431a:	2208      	movs	r2, #8
 800431c:	189b      	adds	r3, r3, r2
 800431e:	19db      	adds	r3, r3, r7
 8004320:	2200      	movs	r2, #0
 8004322:	5e9c      	ldrsh	r4, [r3, r2]
 8004324:	1dbb      	adds	r3, r7, #6
 8004326:	2100      	movs	r1, #0
 8004328:	5e5b      	ldrsh	r3, [r3, r1]
 800432a:	469c      	mov	ip, r3
 800432c:	197b      	adds	r3, r7, r5
 800432e:	2000      	movs	r0, #0
 8004330:	5e19      	ldrsh	r1, [r3, r0]
 8004332:	19bb      	adds	r3, r7, r6
 8004334:	2000      	movs	r0, #0
 8004336:	5e18      	ldrsh	r0, [r3, r0]
 8004338:	4b1e      	ldr	r3, [pc, #120]	; (80043b4 <LCD_DrawButton1+0x154>)
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	2324      	movs	r3, #36	; 0x24
 800433e:	2208      	movs	r2, #8
 8004340:	189b      	adds	r3, r3, r2
 8004342:	19db      	adds	r3, r3, r7
 8004344:	2200      	movs	r2, #0
 8004346:	5e9b      	ldrsh	r3, [r3, r2]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	0023      	movs	r3, r4
 800434c:	4662      	mov	r2, ip
 800434e:	f000 fcb0 	bl	8004cb2 <LCD_DrawRoundRect>
	LCD_SetCursor(x + xPadding, y + yPadding);
 8004352:	19bb      	adds	r3, r7, r6
 8004354:	2100      	movs	r1, #0
 8004356:	5e5a      	ldrsh	r2, [r3, r1]
 8004358:	2134      	movs	r1, #52	; 0x34
 800435a:	2408      	movs	r4, #8
 800435c:	190b      	adds	r3, r1, r4
 800435e:	19db      	adds	r3, r3, r7
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	18d3      	adds	r3, r2, r3
 8004364:	0018      	movs	r0, r3
 8004366:	197b      	adds	r3, r7, r5
 8004368:	2100      	movs	r1, #0
 800436a:	5e5a      	ldrsh	r2, [r3, r1]
 800436c:	2138      	movs	r1, #56	; 0x38
 800436e:	190b      	adds	r3, r1, r4
 8004370:	19db      	adds	r3, r3, r7
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	18d3      	adds	r3, r2, r3
 8004376:	0019      	movs	r1, r3
 8004378:	f001 fe20 	bl	8005fbc <LCD_SetCursor>
	LCD_SetTextSize(textSize);
 800437c:	223c      	movs	r2, #60	; 0x3c
 800437e:	1913      	adds	r3, r2, r4
 8004380:	19db      	adds	r3, r3, r7
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	0018      	movs	r0, r3
 8004386:	f001 fe2f 	bl	8005fe8 <LCD_SetTextSize>
	LCD_SetTextColor(textColor, bgColor);
 800438a:	2328      	movs	r3, #40	; 0x28
 800438c:	191b      	adds	r3, r3, r4
 800438e:	19db      	adds	r3, r3, r7
 8004390:	881a      	ldrh	r2, [r3, #0]
 8004392:	232c      	movs	r3, #44	; 0x2c
 8004394:	191b      	adds	r3, r3, r4
 8004396:	19db      	adds	r3, r3, r7
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	0011      	movs	r1, r2
 800439c:	0018      	movs	r0, r3
 800439e:	f001 fe39 	bl	8006014 <LCD_SetTextColor>
	LCD_Printf(c);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	0018      	movs	r0, r3
 80043a6:	f001 fd0d 	bl	8005dc4 <LCD_Printf>

}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b005      	add	sp, #20
 80043b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	0000ffff 	.word	0x0000ffff

080043b8 <LCD_DrawHBorder>:

void LCD_DrawHBorder(int16_t x, int16_t y, int16_t w, uint16_t color, int16_t BorderSize){
 80043b8:	b5b0      	push	{r4, r5, r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	0005      	movs	r5, r0
 80043c0:	000c      	movs	r4, r1
 80043c2:	0010      	movs	r0, r2
 80043c4:	0019      	movs	r1, r3
 80043c6:	1dbb      	adds	r3, r7, #6
 80043c8:	1c2a      	adds	r2, r5, #0
 80043ca:	801a      	strh	r2, [r3, #0]
 80043cc:	1d3b      	adds	r3, r7, #4
 80043ce:	1c22      	adds	r2, r4, #0
 80043d0:	801a      	strh	r2, [r3, #0]
 80043d2:	1cbb      	adds	r3, r7, #2
 80043d4:	1c02      	adds	r2, r0, #0
 80043d6:	801a      	strh	r2, [r3, #0]
 80043d8:	003b      	movs	r3, r7
 80043da:	1c0a      	adds	r2, r1, #0
 80043dc:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < BorderSize; i++){
 80043de:	230f      	movs	r3, #15
 80043e0:	18fb      	adds	r3, r7, r3
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	e018      	b.n	800441a <LCD_DrawHBorder+0x62>
		LCD_DrawFastHLine(x, y + i, w, color);
 80043e8:	250f      	movs	r5, #15
 80043ea:	197b      	adds	r3, r7, r5
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	1d3b      	adds	r3, r7, #4
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	18d3      	adds	r3, r2, r3
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	b219      	sxth	r1, r3
 80043fa:	003b      	movs	r3, r7
 80043fc:	881c      	ldrh	r4, [r3, #0]
 80043fe:	1cbb      	adds	r3, r7, #2
 8004400:	2200      	movs	r2, #0
 8004402:	5e9a      	ldrsh	r2, [r3, r2]
 8004404:	1dbb      	adds	r3, r7, #6
 8004406:	2000      	movs	r0, #0
 8004408:	5e18      	ldrsh	r0, [r3, r0]
 800440a:	0023      	movs	r3, r4
 800440c:	f000 fb2e 	bl	8004a6c <LCD_DrawFastHLine>
	for(uint8_t i = 0; i < BorderSize; i++){
 8004410:	197b      	adds	r3, r7, r5
 8004412:	781a      	ldrb	r2, [r3, #0]
 8004414:	197b      	adds	r3, r7, r5
 8004416:	3201      	adds	r2, #1
 8004418:	701a      	strb	r2, [r3, #0]
 800441a:	230f      	movs	r3, #15
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	781a      	ldrb	r2, [r3, #0]
 8004420:	2320      	movs	r3, #32
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	2100      	movs	r1, #0
 8004426:	5e5b      	ldrsh	r3, [r3, r1]
 8004428:	429a      	cmp	r2, r3
 800442a:	dbdd      	blt.n	80043e8 <LCD_DrawHBorder+0x30>
	}

}
 800442c:	46c0      	nop			; (mov r8, r8)
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	46bd      	mov	sp, r7
 8004432:	b004      	add	sp, #16
 8004434:	bdb0      	pop	{r4, r5, r7, pc}

08004436 <LCD_DrawVBorder>:

void LCD_DrawVBorder(int16_t x, int16_t y, int16_t h, uint16_t color, int16_t BorderSize){
 8004436:	b5b0      	push	{r4, r5, r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	0005      	movs	r5, r0
 800443e:	000c      	movs	r4, r1
 8004440:	0010      	movs	r0, r2
 8004442:	0019      	movs	r1, r3
 8004444:	1dbb      	adds	r3, r7, #6
 8004446:	1c2a      	adds	r2, r5, #0
 8004448:	801a      	strh	r2, [r3, #0]
 800444a:	1d3b      	adds	r3, r7, #4
 800444c:	1c22      	adds	r2, r4, #0
 800444e:	801a      	strh	r2, [r3, #0]
 8004450:	1cbb      	adds	r3, r7, #2
 8004452:	1c02      	adds	r2, r0, #0
 8004454:	801a      	strh	r2, [r3, #0]
 8004456:	003b      	movs	r3, r7
 8004458:	1c0a      	adds	r2, r1, #0
 800445a:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < BorderSize; i++){
 800445c:	230f      	movs	r3, #15
 800445e:	18fb      	adds	r3, r7, r3
 8004460:	2200      	movs	r2, #0
 8004462:	701a      	strb	r2, [r3, #0]
 8004464:	e018      	b.n	8004498 <LCD_DrawVBorder+0x62>
		LCD_DrawFastVLine(x + i, y, h, color);
 8004466:	250f      	movs	r5, #15
 8004468:	197b      	adds	r3, r7, r5
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b29a      	uxth	r2, r3
 800446e:	1dbb      	adds	r3, r7, #6
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	18d3      	adds	r3, r2, r3
 8004474:	b29b      	uxth	r3, r3
 8004476:	b218      	sxth	r0, r3
 8004478:	003b      	movs	r3, r7
 800447a:	881c      	ldrh	r4, [r3, #0]
 800447c:	1cbb      	adds	r3, r7, #2
 800447e:	2200      	movs	r2, #0
 8004480:	5e9a      	ldrsh	r2, [r3, r2]
 8004482:	1d3b      	adds	r3, r7, #4
 8004484:	2100      	movs	r1, #0
 8004486:	5e59      	ldrsh	r1, [r3, r1]
 8004488:	0023      	movs	r3, r4
 800448a:	f000 fb87 	bl	8004b9c <LCD_DrawFastVLine>
	for(uint8_t i = 0; i < BorderSize; i++){
 800448e:	197b      	adds	r3, r7, r5
 8004490:	781a      	ldrb	r2, [r3, #0]
 8004492:	197b      	adds	r3, r7, r5
 8004494:	3201      	adds	r2, #1
 8004496:	701a      	strb	r2, [r3, #0]
 8004498:	230f      	movs	r3, #15
 800449a:	18fb      	adds	r3, r7, r3
 800449c:	781a      	ldrb	r2, [r3, #0]
 800449e:	2320      	movs	r3, #32
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	2100      	movs	r1, #0
 80044a4:	5e5b      	ldrsh	r3, [r3, r1]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	dbdd      	blt.n	8004466 <LCD_DrawVBorder+0x30>
	}

}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	46c0      	nop			; (mov r8, r8)
 80044ae:	46bd      	mov	sp, r7
 80044b0:	b004      	add	sp, #16
 80044b2:	bdb0      	pop	{r4, r5, r7, pc}

080044b4 <delay>:
		//-----FRAME RATE SETTING-------//
		0x0060, 0xA700, 0x0061, 0x0001, 0x0090, 0x0033, //RTNI setting
		//-------DISPLAY ON------//
		0x0007, 0x0133, };

void delay(unsigned int t) {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
	for (; t > 0; t--) {
 80044bc:	e003      	b.n	80044c6 <delay+0x12>
		__asm("nop");
 80044be:	46c0      	nop			; (mov r8, r8)
	for (; t > 0; t--) {
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	607b      	str	r3, [r7, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f8      	bne.n	80044be <delay+0xa>
	}
}
 80044cc:	46c0      	nop			; (mov r8, r8)
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b002      	add	sp, #8
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <GPIO_Init>:
 * 
 * \param 
 * 
 * \return void
 */
static void GPIO_Init(void) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	; 0x28
 80044dc:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__GPIOC_CLK_ENABLE()
 80044de:	4b5b      	ldr	r3, [pc, #364]	; (800464c <GPIO_Init+0x174>)
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	4b5a      	ldr	r3, [pc, #360]	; (800464c <GPIO_Init+0x174>)
 80044e4:	2180      	movs	r1, #128	; 0x80
 80044e6:	0309      	lsls	r1, r1, #12
 80044e8:	430a      	orrs	r2, r1
 80044ea:	615a      	str	r2, [r3, #20]
 80044ec:	4b57      	ldr	r3, [pc, #348]	; (800464c <GPIO_Init+0x174>)
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	2380      	movs	r3, #128	; 0x80
 80044f2:	031b      	lsls	r3, r3, #12
 80044f4:	4013      	ands	r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
	;
	__GPIOA_CLK_ENABLE()
 80044fa:	4b54      	ldr	r3, [pc, #336]	; (800464c <GPIO_Init+0x174>)
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	4b53      	ldr	r3, [pc, #332]	; (800464c <GPIO_Init+0x174>)
 8004500:	2180      	movs	r1, #128	; 0x80
 8004502:	0289      	lsls	r1, r1, #10
 8004504:	430a      	orrs	r2, r1
 8004506:	615a      	str	r2, [r3, #20]
 8004508:	4b50      	ldr	r3, [pc, #320]	; (800464c <GPIO_Init+0x174>)
 800450a:	695a      	ldr	r2, [r3, #20]
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	029b      	lsls	r3, r3, #10
 8004510:	4013      	ands	r3, r2
 8004512:	607b      	str	r3, [r7, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
	;
	__GPIOB_CLK_ENABLE()
 8004516:	4b4d      	ldr	r3, [pc, #308]	; (800464c <GPIO_Init+0x174>)
 8004518:	695a      	ldr	r2, [r3, #20]
 800451a:	4b4c      	ldr	r3, [pc, #304]	; (800464c <GPIO_Init+0x174>)
 800451c:	2180      	movs	r1, #128	; 0x80
 800451e:	02c9      	lsls	r1, r1, #11
 8004520:	430a      	orrs	r2, r1
 8004522:	615a      	str	r2, [r3, #20]
 8004524:	4b49      	ldr	r3, [pc, #292]	; (800464c <GPIO_Init+0x174>)
 8004526:	695a      	ldr	r2, [r3, #20]
 8004528:	2380      	movs	r3, #128	; 0x80
 800452a:	02db      	lsls	r3, r3, #11
 800452c:	4013      	ands	r3, r2
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
	;

	/*Configure GPIO pins : PC1 PC7 */
	gpio_config(PORTC, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004532:	4847      	ldr	r0, [pc, #284]	; (8004650 <GPIO_Init+0x178>)
 8004534:	2300      	movs	r3, #0
 8004536:	9301      	str	r3, [sp, #4]
 8004538:	2300      	movs	r3, #0
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	2302      	movs	r3, #2
 800453e:	2201      	movs	r2, #1
 8004540:	2101      	movs	r1, #1
 8004542:	f7ff f80f 	bl	8003564 <gpio_config>
	gpio_config(PORTC, 7, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004546:	4842      	ldr	r0, [pc, #264]	; (8004650 <GPIO_Init+0x178>)
 8004548:	2300      	movs	r3, #0
 800454a:	9301      	str	r3, [sp, #4]
 800454c:	2300      	movs	r3, #0
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	2302      	movs	r3, #2
 8004552:	2201      	movs	r2, #1
 8004554:	2107      	movs	r1, #7
 8004556:	f7ff f805 	bl	8003564 <gpio_config>

	/*Configure GPIO pins : PA0 PA1 PA4 PA8 PA9 PA10 */
	gpio_config(PORTA, 0, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800455a:	2390      	movs	r3, #144	; 0x90
 800455c:	05d8      	lsls	r0, r3, #23
 800455e:	2300      	movs	r3, #0
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	2300      	movs	r3, #0
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	2302      	movs	r3, #2
 8004568:	2201      	movs	r2, #1
 800456a:	2100      	movs	r1, #0
 800456c:	f7fe fffa 	bl	8003564 <gpio_config>
	gpio_config(PORTA, 1, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004570:	2390      	movs	r3, #144	; 0x90
 8004572:	05d8      	lsls	r0, r3, #23
 8004574:	2300      	movs	r3, #0
 8004576:	9301      	str	r3, [sp, #4]
 8004578:	2300      	movs	r3, #0
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	2302      	movs	r3, #2
 800457e:	2201      	movs	r2, #1
 8004580:	2101      	movs	r1, #1
 8004582:	f7fe ffef 	bl	8003564 <gpio_config>
	gpio_config(PORTA, 4, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004586:	2390      	movs	r3, #144	; 0x90
 8004588:	05d8      	lsls	r0, r3, #23
 800458a:	2300      	movs	r3, #0
 800458c:	9301      	str	r3, [sp, #4]
 800458e:	2300      	movs	r3, #0
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	2302      	movs	r3, #2
 8004594:	2201      	movs	r2, #1
 8004596:	2104      	movs	r1, #4
 8004598:	f7fe ffe4 	bl	8003564 <gpio_config>
	gpio_config(PORTA, 8, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800459c:	2390      	movs	r3, #144	; 0x90
 800459e:	05d8      	lsls	r0, r3, #23
 80045a0:	2300      	movs	r3, #0
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	2300      	movs	r3, #0
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	2302      	movs	r3, #2
 80045aa:	2201      	movs	r2, #1
 80045ac:	2108      	movs	r1, #8
 80045ae:	f7fe ffd9 	bl	8003564 <gpio_config>
	gpio_config(PORTA, 9, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 80045b2:	2390      	movs	r3, #144	; 0x90
 80045b4:	05d8      	lsls	r0, r3, #23
 80045b6:	2300      	movs	r3, #0
 80045b8:	9301      	str	r3, [sp, #4]
 80045ba:	2300      	movs	r3, #0
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	2302      	movs	r3, #2
 80045c0:	2201      	movs	r2, #1
 80045c2:	2109      	movs	r1, #9
 80045c4:	f7fe ffce 	bl	8003564 <gpio_config>
	gpio_config(PORTA, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 80045c8:	2390      	movs	r3, #144	; 0x90
 80045ca:	05d8      	lsls	r0, r3, #23
 80045cc:	2300      	movs	r3, #0
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	2300      	movs	r3, #0
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	2302      	movs	r3, #2
 80045d6:	2201      	movs	r2, #1
 80045d8:	210a      	movs	r1, #10
 80045da:	f7fe ffc3 	bl	8003564 <gpio_config>

	/*Configure GPIO pins : PB0 PB3 PB4 PB5 PB10 */
	gpio_config(PORTB, 0, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 80045de:	481d      	ldr	r0, [pc, #116]	; (8004654 <GPIO_Init+0x17c>)
 80045e0:	2300      	movs	r3, #0
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	2300      	movs	r3, #0
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	2302      	movs	r3, #2
 80045ea:	2201      	movs	r2, #1
 80045ec:	2100      	movs	r1, #0
 80045ee:	f7fe ffb9 	bl	8003564 <gpio_config>
	gpio_config(PORTB, 3, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 80045f2:	4818      	ldr	r0, [pc, #96]	; (8004654 <GPIO_Init+0x17c>)
 80045f4:	2300      	movs	r3, #0
 80045f6:	9301      	str	r3, [sp, #4]
 80045f8:	2300      	movs	r3, #0
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	2302      	movs	r3, #2
 80045fe:	2201      	movs	r2, #1
 8004600:	2103      	movs	r1, #3
 8004602:	f7fe ffaf 	bl	8003564 <gpio_config>
	gpio_config(PORTB, 4, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8004606:	4813      	ldr	r0, [pc, #76]	; (8004654 <GPIO_Init+0x17c>)
 8004608:	2300      	movs	r3, #0
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	2300      	movs	r3, #0
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	2302      	movs	r3, #2
 8004612:	2201      	movs	r2, #1
 8004614:	2104      	movs	r1, #4
 8004616:	f7fe ffa5 	bl	8003564 <gpio_config>
	gpio_config(PORTB, 5, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800461a:	480e      	ldr	r0, [pc, #56]	; (8004654 <GPIO_Init+0x17c>)
 800461c:	2300      	movs	r3, #0
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	2300      	movs	r3, #0
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	2302      	movs	r3, #2
 8004626:	2201      	movs	r2, #1
 8004628:	2105      	movs	r1, #5
 800462a:	f7fe ff9b 	bl	8003564 <gpio_config>
	gpio_config(PORTB, 10, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 800462e:	4809      	ldr	r0, [pc, #36]	; (8004654 <GPIO_Init+0x17c>)
 8004630:	2300      	movs	r3, #0
 8004632:	9301      	str	r3, [sp, #4]
 8004634:	2300      	movs	r3, #0
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	2302      	movs	r3, #2
 800463a:	2201      	movs	r2, #1
 800463c:	210a      	movs	r1, #10
 800463e:	f7fe ff91 	bl	8003564 <gpio_config>
}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	46bd      	mov	sp, r7
 8004646:	b008      	add	sp, #32
 8004648:	bd80      	pop	{r7, pc}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	40021000 	.word	0x40021000
 8004650:	48000800 	.word	0x48000800
 8004654:	48000400 	.word	0x48000400

08004658 <LCD_Begin>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Begin(void) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
	m_width = TFTWIDTH;
 800465e:	4b35      	ldr	r3, [pc, #212]	; (8004734 <LCD_Begin+0xdc>)
 8004660:	22f0      	movs	r2, #240	; 0xf0
 8004662:	801a      	strh	r2, [r3, #0]
	m_height = TFTHEIGHT;
 8004664:	4b34      	ldr	r3, [pc, #208]	; (8004738 <LCD_Begin+0xe0>)
 8004666:	22a0      	movs	r2, #160	; 0xa0
 8004668:	0052      	lsls	r2, r2, #1
 800466a:	801a      	strh	r2, [r3, #0]
	m_rotation = 0;
 800466c:	4b33      	ldr	r3, [pc, #204]	; (800473c <LCD_Begin+0xe4>)
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
	m_cursor_y = m_cursor_x = 0;
 8004672:	4b33      	ldr	r3, [pc, #204]	; (8004740 <LCD_Begin+0xe8>)
 8004674:	2200      	movs	r2, #0
 8004676:	801a      	strh	r2, [r3, #0]
 8004678:	4b31      	ldr	r3, [pc, #196]	; (8004740 <LCD_Begin+0xe8>)
 800467a:	2200      	movs	r2, #0
 800467c:	5e9a      	ldrsh	r2, [r3, r2]
 800467e:	4b31      	ldr	r3, [pc, #196]	; (8004744 <LCD_Begin+0xec>)
 8004680:	801a      	strh	r2, [r3, #0]
	m_textsize = 4;
 8004682:	4b31      	ldr	r3, [pc, #196]	; (8004748 <LCD_Begin+0xf0>)
 8004684:	2204      	movs	r2, #4
 8004686:	701a      	strb	r2, [r3, #0]
	m_textcolor = m_textbgcolor = 0xFFFF;
 8004688:	4b30      	ldr	r3, [pc, #192]	; (800474c <LCD_Begin+0xf4>)
 800468a:	2201      	movs	r2, #1
 800468c:	4252      	negs	r2, r2
 800468e:	801a      	strh	r2, [r3, #0]
 8004690:	4b2e      	ldr	r3, [pc, #184]	; (800474c <LCD_Begin+0xf4>)
 8004692:	881a      	ldrh	r2, [r3, #0]
 8004694:	4b2e      	ldr	r3, [pc, #184]	; (8004750 <LCD_Begin+0xf8>)
 8004696:	801a      	strh	r2, [r3, #0]
	m_wrap = 1;
 8004698:	4b2e      	ldr	r3, [pc, #184]	; (8004754 <LCD_Begin+0xfc>)
 800469a:	2201      	movs	r2, #1
 800469c:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 800469e:	1dfb      	adds	r3, r7, #7
 80046a0:	2200      	movs	r2, #0
 80046a2:	701a      	strb	r2, [r3, #0]
	uint16_t a, d;

	GPIO_Init();
 80046a4:	f7ff ff18 	bl	80044d8 <GPIO_Init>

	LCD_Reset();
 80046a8:	f001 fc22 	bl	8005ef0 <LCD_Reset>

	LCD_CS_LOW();
 80046ac:	4b2a      	ldr	r3, [pc, #168]	; (8004758 <LCD_Begin+0x100>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	2100      	movs	r1, #0
 80046b2:	0018      	movs	r0, r3
 80046b4:	f7ff f842 	bl	800373c <gpio_write>

	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 80046b8:	e027      	b.n	800470a <LCD_Begin+0xb2>
		a = ST7781_regValues[i++];
 80046ba:	1dfb      	adds	r3, r7, #7
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	1dfa      	adds	r2, r7, #7
 80046c0:	1c59      	adds	r1, r3, #1
 80046c2:	7011      	strb	r1, [r2, #0]
 80046c4:	0019      	movs	r1, r3
 80046c6:	1d3b      	adds	r3, r7, #4
 80046c8:	4a24      	ldr	r2, [pc, #144]	; (800475c <LCD_Begin+0x104>)
 80046ca:	0049      	lsls	r1, r1, #1
 80046cc:	5a8a      	ldrh	r2, [r1, r2]
 80046ce:	801a      	strh	r2, [r3, #0]
		d = ST7781_regValues[i++];
 80046d0:	1dfb      	adds	r3, r7, #7
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	1dfa      	adds	r2, r7, #7
 80046d6:	1c59      	adds	r1, r3, #1
 80046d8:	7011      	strb	r1, [r2, #0]
 80046da:	0019      	movs	r1, r3
 80046dc:	1cbb      	adds	r3, r7, #2
 80046de:	4a1f      	ldr	r2, [pc, #124]	; (800475c <LCD_Begin+0x104>)
 80046e0:	0049      	lsls	r1, r1, #1
 80046e2:	5a8a      	ldrh	r2, [r1, r2]
 80046e4:	801a      	strh	r2, [r3, #0]
		if (a == TFTLCD_DELAY) {
 80046e6:	1d3b      	adds	r3, r7, #4
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	2bff      	cmp	r3, #255	; 0xff
 80046ec:	d105      	bne.n	80046fa <LCD_Begin+0xa2>
			delay(d);
 80046ee:	1cbb      	adds	r3, r7, #2
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	0018      	movs	r0, r3
 80046f4:	f7ff fede 	bl	80044b4 <delay>
 80046f8:	e007      	b.n	800470a <LCD_Begin+0xb2>
		} else {
			LCD_WriteRegister16(a, d);
 80046fa:	1cbb      	adds	r3, r7, #2
 80046fc:	881a      	ldrh	r2, [r3, #0]
 80046fe:	1d3b      	adds	r3, r7, #4
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	0011      	movs	r1, r2
 8004704:	0018      	movs	r0, r3
 8004706:	f001 fddd 	bl	80062c4 <LCD_WriteRegister16>
	while (i < sizeof(ST7781_regValues) / sizeof(uint16_t)) {
 800470a:	1dfb      	adds	r3, r7, #7
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b83      	cmp	r3, #131	; 0x83
 8004710:	d9d3      	bls.n	80046ba <LCD_Begin+0x62>
		}
	}

	LCD_SetRotation(m_rotation);
 8004712:	4b0a      	ldr	r3, [pc, #40]	; (800473c <LCD_Begin+0xe4>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	0018      	movs	r0, r3
 8004718:	f001 fc96 	bl	8006048 <LCD_SetRotation>
	LCD_SetAddrWindow(0, 0, TFTWIDTH - 1, TFTHEIGHT - 1);
 800471c:	2340      	movs	r3, #64	; 0x40
 800471e:	33ff      	adds	r3, #255	; 0xff
 8004720:	22ef      	movs	r2, #239	; 0xef
 8004722:	2100      	movs	r1, #0
 8004724:	2000      	movs	r0, #0
 8004726:	f001 fcc3 	bl	80060b0 <LCD_SetAddrWindow>
}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	46bd      	mov	sp, r7
 800472e:	b002      	add	sp, #8
 8004730:	bd80      	pop	{r7, pc}
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	200007d2 	.word	0x200007d2
 8004738:	200007d4 	.word	0x200007d4
 800473c:	200007df 	.word	0x200007df
 8004740:	200007d6 	.word	0x200007d6
 8004744:	200007d8 	.word	0x200007d8
 8004748:	200007de 	.word	0x200007de
 800474c:	200007dc 	.word	0x200007dc
 8004750:	200007da 	.word	0x200007da
 8004754:	200007e0 	.word	0x200007e0
 8004758:	48000400 	.word	0x48000400
 800475c:	0800ac24 	.word	0x0800ac24

08004760 <LCD_DrawPixel>:
 * \param y		y-Coordinate
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8004760:	b590      	push	{r4, r7, lr}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	0004      	movs	r4, r0
 8004768:	0008      	movs	r0, r1
 800476a:	0011      	movs	r1, r2
 800476c:	1dbb      	adds	r3, r7, #6
 800476e:	1c22      	adds	r2, r4, #0
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	1d3b      	adds	r3, r7, #4
 8004774:	1c02      	adds	r2, r0, #0
 8004776:	801a      	strh	r2, [r3, #0]
 8004778:	1cbb      	adds	r3, r7, #2
 800477a:	1c0a      	adds	r2, r1, #0
 800477c:	801a      	strh	r2, [r3, #0]
	// Clip
	if ((x < 0) || (y < 0) || (x >= TFTWIDTH) || (y >= TFTHEIGHT))
 800477e:	1dbb      	adds	r3, r7, #6
 8004780:	2200      	movs	r2, #0
 8004782:	5e9b      	ldrsh	r3, [r3, r2]
 8004784:	2b00      	cmp	r3, #0
 8004786:	da00      	bge.n	800478a <LCD_DrawPixel+0x2a>
 8004788:	e06d      	b.n	8004866 <LCD_DrawPixel+0x106>
 800478a:	1d3b      	adds	r3, r7, #4
 800478c:	2200      	movs	r2, #0
 800478e:	5e9b      	ldrsh	r3, [r3, r2]
 8004790:	2b00      	cmp	r3, #0
 8004792:	da00      	bge.n	8004796 <LCD_DrawPixel+0x36>
 8004794:	e067      	b.n	8004866 <LCD_DrawPixel+0x106>
 8004796:	1dbb      	adds	r3, r7, #6
 8004798:	2200      	movs	r2, #0
 800479a:	5e9b      	ldrsh	r3, [r3, r2]
 800479c:	2bef      	cmp	r3, #239	; 0xef
 800479e:	dc62      	bgt.n	8004866 <LCD_DrawPixel+0x106>
 80047a0:	1d3b      	adds	r3, r7, #4
 80047a2:	2200      	movs	r2, #0
 80047a4:	5e9a      	ldrsh	r2, [r3, r2]
 80047a6:	23a0      	movs	r3, #160	; 0xa0
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	429a      	cmp	r2, r3
 80047ac:	da5b      	bge.n	8004866 <LCD_DrawPixel+0x106>
		return;

	LCD_CS_LOW();
 80047ae:	4b30      	ldr	r3, [pc, #192]	; (8004870 <LCD_DrawPixel+0x110>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	2100      	movs	r1, #0
 80047b4:	0018      	movs	r0, r3
 80047b6:	f7fe ffc1 	bl	800373c <gpio_write>

	int16_t t;
	switch (m_rotation) {
 80047ba:	4b2e      	ldr	r3, [pc, #184]	; (8004874 <LCD_DrawPixel+0x114>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d026      	beq.n	8004810 <LCD_DrawPixel+0xb0>
 80047c2:	dc37      	bgt.n	8004834 <LCD_DrawPixel+0xd4>
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d002      	beq.n	80047ce <LCD_DrawPixel+0x6e>
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d011      	beq.n	80047f0 <LCD_DrawPixel+0x90>
 80047cc:	e032      	b.n	8004834 <LCD_DrawPixel+0xd4>
	case 1:
		t = x;
 80047ce:	210e      	movs	r1, #14
 80047d0:	187b      	adds	r3, r7, r1
 80047d2:	1dba      	adds	r2, r7, #6
 80047d4:	8812      	ldrh	r2, [r2, #0]
 80047d6:	801a      	strh	r2, [r3, #0]
		x = TFTWIDTH - 1 - y;
 80047d8:	1d3b      	adds	r3, r7, #4
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	22ef      	movs	r2, #239	; 0xef
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	1dbb      	adds	r3, r7, #6
 80047e4:	801a      	strh	r2, [r3, #0]
		y = t;
 80047e6:	1d3b      	adds	r3, r7, #4
 80047e8:	187a      	adds	r2, r7, r1
 80047ea:	8812      	ldrh	r2, [r2, #0]
 80047ec:	801a      	strh	r2, [r3, #0]
		break;
 80047ee:	e021      	b.n	8004834 <LCD_DrawPixel+0xd4>
	case 2:
		x = TFTWIDTH - 1 - x;
 80047f0:	1dbb      	adds	r3, r7, #6
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	22ef      	movs	r2, #239	; 0xef
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	1dbb      	adds	r3, r7, #6
 80047fc:	801a      	strh	r2, [r3, #0]
		y = TFTHEIGHT - 1 - y;
 80047fe:	1d3b      	adds	r3, r7, #4
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	2240      	movs	r2, #64	; 0x40
 8004804:	32ff      	adds	r2, #255	; 0xff
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	b29a      	uxth	r2, r3
 800480a:	1d3b      	adds	r3, r7, #4
 800480c:	801a      	strh	r2, [r3, #0]
		break;
 800480e:	e011      	b.n	8004834 <LCD_DrawPixel+0xd4>
	case 3:
		t = x;
 8004810:	210e      	movs	r1, #14
 8004812:	187b      	adds	r3, r7, r1
 8004814:	1dba      	adds	r2, r7, #6
 8004816:	8812      	ldrh	r2, [r2, #0]
 8004818:	801a      	strh	r2, [r3, #0]
		x = y;
 800481a:	1dbb      	adds	r3, r7, #6
 800481c:	1d3a      	adds	r2, r7, #4
 800481e:	8812      	ldrh	r2, [r2, #0]
 8004820:	801a      	strh	r2, [r3, #0]
		y = TFTHEIGHT - 1 - t;
 8004822:	187b      	adds	r3, r7, r1
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	2240      	movs	r2, #64	; 0x40
 8004828:	32ff      	adds	r2, #255	; 0xff
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	b29a      	uxth	r2, r3
 800482e:	1d3b      	adds	r3, r7, #4
 8004830:	801a      	strh	r2, [r3, #0]
		break;
 8004832:	46c0      	nop			; (mov r8, r8)
	}

	LCD_WriteRegister16(0x0020, x);
 8004834:	1dbb      	adds	r3, r7, #6
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	0019      	movs	r1, r3
 800483a:	2020      	movs	r0, #32
 800483c:	f001 fd42 	bl	80062c4 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8004840:	1d3b      	adds	r3, r7, #4
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	0019      	movs	r1, r3
 8004846:	2021      	movs	r0, #33	; 0x21
 8004848:	f001 fd3c 	bl	80062c4 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0022, color);
 800484c:	1cbb      	adds	r3, r7, #2
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	0019      	movs	r1, r3
 8004852:	2022      	movs	r0, #34	; 0x22
 8004854:	f001 fd36 	bl	80062c4 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <LCD_DrawPixel+0x110>)
 800485a:	2201      	movs	r2, #1
 800485c:	2100      	movs	r1, #0
 800485e:	0018      	movs	r0, r3
 8004860:	f7fe ff6c 	bl	800373c <gpio_write>
 8004864:	e000      	b.n	8004868 <LCD_DrawPixel+0x108>
		return;
 8004866:	46c0      	nop			; (mov r8, r8)
}
 8004868:	46bd      	mov	sp, r7
 800486a:	b005      	add	sp, #20
 800486c:	bd90      	pop	{r4, r7, pc}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	48000400 	.word	0x48000400
 8004874:	200007df 	.word	0x200007df

08004878 <LCD_DrawLine>:
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2,
		uint16_t color) {
 8004878:	b5b0      	push	{r4, r5, r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af00      	add	r7, sp, #0
 800487e:	0005      	movs	r5, r0
 8004880:	000c      	movs	r4, r1
 8004882:	0010      	movs	r0, r2
 8004884:	0019      	movs	r1, r3
 8004886:	1dbb      	adds	r3, r7, #6
 8004888:	1c2a      	adds	r2, r5, #0
 800488a:	801a      	strh	r2, [r3, #0]
 800488c:	1d3b      	adds	r3, r7, #4
 800488e:	1c22      	adds	r2, r4, #0
 8004890:	801a      	strh	r2, [r3, #0]
 8004892:	1cbb      	adds	r3, r7, #2
 8004894:	1c02      	adds	r2, r0, #0
 8004896:	801a      	strh	r2, [r3, #0]
 8004898:	003b      	movs	r3, r7
 800489a:	1c0a      	adds	r2, r1, #0
 800489c:	801a      	strh	r2, [r3, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 800489e:	003b      	movs	r3, r7
 80048a0:	2200      	movs	r2, #0
 80048a2:	5e9a      	ldrsh	r2, [r3, r2]
 80048a4:	1d3b      	adds	r3, r7, #4
 80048a6:	2100      	movs	r1, #0
 80048a8:	5e5b      	ldrsh	r3, [r3, r1]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	17d9      	asrs	r1, r3, #31
 80048ae:	185a      	adds	r2, r3, r1
 80048b0:	404a      	eors	r2, r1
 80048b2:	1cbb      	adds	r3, r7, #2
 80048b4:	2100      	movs	r1, #0
 80048b6:	5e59      	ldrsh	r1, [r3, r1]
 80048b8:	1dbb      	adds	r3, r7, #6
 80048ba:	2000      	movs	r0, #0
 80048bc:	5e1b      	ldrsh	r3, [r3, r0]
 80048be:	1acb      	subs	r3, r1, r3
 80048c0:	17d9      	asrs	r1, r3, #31
 80048c2:	185b      	adds	r3, r3, r1
 80048c4:	404b      	eors	r3, r1
 80048c6:	2101      	movs	r1, #1
 80048c8:	429a      	cmp	r2, r3
 80048ca:	dc01      	bgt.n	80048d0 <LCD_DrawLine+0x58>
 80048cc:	2300      	movs	r3, #0
 80048ce:	1c19      	adds	r1, r3, #0
 80048d0:	b2ca      	uxtb	r2, r1
 80048d2:	211a      	movs	r1, #26
 80048d4:	187b      	adds	r3, r7, r1
 80048d6:	801a      	strh	r2, [r3, #0]
	if (steep) {
 80048d8:	187b      	adds	r3, r7, r1
 80048da:	2200      	movs	r2, #0
 80048dc:	5e9b      	ldrsh	r3, [r3, r2]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d019      	beq.n	8004916 <LCD_DrawLine+0x9e>
		swap(x1, y1);
 80048e2:	2118      	movs	r1, #24
 80048e4:	187b      	adds	r3, r7, r1
 80048e6:	1dba      	adds	r2, r7, #6
 80048e8:	8812      	ldrh	r2, [r2, #0]
 80048ea:	801a      	strh	r2, [r3, #0]
 80048ec:	1dbb      	adds	r3, r7, #6
 80048ee:	1d3a      	adds	r2, r7, #4
 80048f0:	8812      	ldrh	r2, [r2, #0]
 80048f2:	801a      	strh	r2, [r3, #0]
 80048f4:	1d3b      	adds	r3, r7, #4
 80048f6:	187a      	adds	r2, r7, r1
 80048f8:	8812      	ldrh	r2, [r2, #0]
 80048fa:	801a      	strh	r2, [r3, #0]
		swap(x2, y2);
 80048fc:	2116      	movs	r1, #22
 80048fe:	187b      	adds	r3, r7, r1
 8004900:	1cba      	adds	r2, r7, #2
 8004902:	8812      	ldrh	r2, [r2, #0]
 8004904:	801a      	strh	r2, [r3, #0]
 8004906:	1cbb      	adds	r3, r7, #2
 8004908:	003a      	movs	r2, r7
 800490a:	8812      	ldrh	r2, [r2, #0]
 800490c:	801a      	strh	r2, [r3, #0]
 800490e:	003b      	movs	r3, r7
 8004910:	187a      	adds	r2, r7, r1
 8004912:	8812      	ldrh	r2, [r2, #0]
 8004914:	801a      	strh	r2, [r3, #0]
	}

	if (x1 > x2) {
 8004916:	1dba      	adds	r2, r7, #6
 8004918:	1cbb      	adds	r3, r7, #2
 800491a:	2100      	movs	r1, #0
 800491c:	5e52      	ldrsh	r2, [r2, r1]
 800491e:	2100      	movs	r1, #0
 8004920:	5e5b      	ldrsh	r3, [r3, r1]
 8004922:	429a      	cmp	r2, r3
 8004924:	dd19      	ble.n	800495a <LCD_DrawLine+0xe2>
		swap(x1, x2);
 8004926:	2114      	movs	r1, #20
 8004928:	187b      	adds	r3, r7, r1
 800492a:	1dba      	adds	r2, r7, #6
 800492c:	8812      	ldrh	r2, [r2, #0]
 800492e:	801a      	strh	r2, [r3, #0]
 8004930:	1dbb      	adds	r3, r7, #6
 8004932:	1cba      	adds	r2, r7, #2
 8004934:	8812      	ldrh	r2, [r2, #0]
 8004936:	801a      	strh	r2, [r3, #0]
 8004938:	1cbb      	adds	r3, r7, #2
 800493a:	187a      	adds	r2, r7, r1
 800493c:	8812      	ldrh	r2, [r2, #0]
 800493e:	801a      	strh	r2, [r3, #0]
		swap(y1, y2);
 8004940:	2112      	movs	r1, #18
 8004942:	187b      	adds	r3, r7, r1
 8004944:	1d3a      	adds	r2, r7, #4
 8004946:	8812      	ldrh	r2, [r2, #0]
 8004948:	801a      	strh	r2, [r3, #0]
 800494a:	1d3b      	adds	r3, r7, #4
 800494c:	003a      	movs	r2, r7
 800494e:	8812      	ldrh	r2, [r2, #0]
 8004950:	801a      	strh	r2, [r3, #0]
 8004952:	003b      	movs	r3, r7
 8004954:	187a      	adds	r2, r7, r1
 8004956:	8812      	ldrh	r2, [r2, #0]
 8004958:	801a      	strh	r2, [r3, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 800495a:	1cbb      	adds	r3, r7, #2
 800495c:	881a      	ldrh	r2, [r3, #0]
 800495e:	1dbb      	adds	r3, r7, #6
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	b29a      	uxth	r2, r3
 8004966:	2110      	movs	r1, #16
 8004968:	187b      	adds	r3, r7, r1
 800496a:	801a      	strh	r2, [r3, #0]
	dy = abs(y2 - y1);
 800496c:	003b      	movs	r3, r7
 800496e:	2200      	movs	r2, #0
 8004970:	5e9a      	ldrsh	r2, [r3, r2]
 8004972:	1d3b      	adds	r3, r7, #4
 8004974:	2000      	movs	r0, #0
 8004976:	5e1b      	ldrsh	r3, [r3, r0]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	17d8      	asrs	r0, r3, #31
 800497c:	181a      	adds	r2, r3, r0
 800497e:	4042      	eors	r2, r0
 8004980:	230e      	movs	r3, #14
 8004982:	18fb      	adds	r3, r7, r3
 8004984:	801a      	strh	r2, [r3, #0]

	int16_t err = dx / 2;
 8004986:	231e      	movs	r3, #30
 8004988:	18fa      	adds	r2, r7, r3
 800498a:	187b      	adds	r3, r7, r1
 800498c:	2100      	movs	r1, #0
 800498e:	5e5b      	ldrsh	r3, [r3, r1]
 8004990:	2b00      	cmp	r3, #0
 8004992:	da00      	bge.n	8004996 <LCD_DrawLine+0x11e>
 8004994:	3301      	adds	r3, #1
 8004996:	105b      	asrs	r3, r3, #1
 8004998:	8013      	strh	r3, [r2, #0]
	int16_t ystep;

	if (y1 < y2) {
 800499a:	1d3a      	adds	r2, r7, #4
 800499c:	003b      	movs	r3, r7
 800499e:	2100      	movs	r1, #0
 80049a0:	5e52      	ldrsh	r2, [r2, r1]
 80049a2:	2100      	movs	r1, #0
 80049a4:	5e5b      	ldrsh	r3, [r3, r1]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	da04      	bge.n	80049b4 <LCD_DrawLine+0x13c>
		ystep = 1;
 80049aa:	231c      	movs	r3, #28
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	2201      	movs	r2, #1
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	e04d      	b.n	8004a50 <LCD_DrawLine+0x1d8>
	} else {
		ystep = -1;
 80049b4:	231c      	movs	r3, #28
 80049b6:	18fb      	adds	r3, r7, r3
 80049b8:	2201      	movs	r2, #1
 80049ba:	4252      	negs	r2, r2
 80049bc:	801a      	strh	r2, [r3, #0]
	}

	for (; x1 <= x2; x1++) {
 80049be:	e047      	b.n	8004a50 <LCD_DrawLine+0x1d8>
		if (steep) {
 80049c0:	231a      	movs	r3, #26
 80049c2:	18fb      	adds	r3, r7, r3
 80049c4:	2200      	movs	r2, #0
 80049c6:	5e9b      	ldrsh	r3, [r3, r2]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00c      	beq.n	80049e6 <LCD_DrawLine+0x16e>
			LCD_DrawPixel(y1, x1, color);
 80049cc:	2330      	movs	r3, #48	; 0x30
 80049ce:	18fb      	adds	r3, r7, r3
 80049d0:	881a      	ldrh	r2, [r3, #0]
 80049d2:	1dbb      	adds	r3, r7, #6
 80049d4:	2100      	movs	r1, #0
 80049d6:	5e59      	ldrsh	r1, [r3, r1]
 80049d8:	1d3b      	adds	r3, r7, #4
 80049da:	2000      	movs	r0, #0
 80049dc:	5e1b      	ldrsh	r3, [r3, r0]
 80049de:	0018      	movs	r0, r3
 80049e0:	f7ff febe 	bl	8004760 <LCD_DrawPixel>
 80049e4:	e00b      	b.n	80049fe <LCD_DrawLine+0x186>
		} else {
			LCD_DrawPixel(x1, y1, color);
 80049e6:	2330      	movs	r3, #48	; 0x30
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	881a      	ldrh	r2, [r3, #0]
 80049ec:	1d3b      	adds	r3, r7, #4
 80049ee:	2100      	movs	r1, #0
 80049f0:	5e59      	ldrsh	r1, [r3, r1]
 80049f2:	1dbb      	adds	r3, r7, #6
 80049f4:	2000      	movs	r0, #0
 80049f6:	5e1b      	ldrsh	r3, [r3, r0]
 80049f8:	0018      	movs	r0, r3
 80049fa:	f7ff feb1 	bl	8004760 <LCD_DrawPixel>
		}
		err -= dy;
 80049fe:	211e      	movs	r1, #30
 8004a00:	187b      	adds	r3, r7, r1
 8004a02:	881a      	ldrh	r2, [r3, #0]
 8004a04:	230e      	movs	r3, #14
 8004a06:	18fb      	adds	r3, r7, r3
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	187b      	adds	r3, r7, r1
 8004a10:	801a      	strh	r2, [r3, #0]
		if (err < 0) {
 8004a12:	187b      	adds	r3, r7, r1
 8004a14:	2200      	movs	r2, #0
 8004a16:	5e9b      	ldrsh	r3, [r3, r2]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	da11      	bge.n	8004a40 <LCD_DrawLine+0x1c8>
			y1 += ystep;
 8004a1c:	1d3b      	adds	r3, r7, #4
 8004a1e:	881a      	ldrh	r2, [r3, #0]
 8004a20:	231c      	movs	r3, #28
 8004a22:	18fb      	adds	r3, r7, r3
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	18d3      	adds	r3, r2, r3
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	1d3b      	adds	r3, r7, #4
 8004a2c:	801a      	strh	r2, [r3, #0]
			err += dx;
 8004a2e:	187b      	adds	r3, r7, r1
 8004a30:	881a      	ldrh	r2, [r3, #0]
 8004a32:	2310      	movs	r3, #16
 8004a34:	18fb      	adds	r3, r7, r3
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	18d3      	adds	r3, r2, r3
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	187b      	adds	r3, r7, r1
 8004a3e:	801a      	strh	r2, [r3, #0]
	for (; x1 <= x2; x1++) {
 8004a40:	1dbb      	adds	r3, r7, #6
 8004a42:	2200      	movs	r2, #0
 8004a44:	5e9b      	ldrsh	r3, [r3, r2]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3301      	adds	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	1dbb      	adds	r3, r7, #6
 8004a4e:	801a      	strh	r2, [r3, #0]
 8004a50:	1dba      	adds	r2, r7, #6
 8004a52:	1cbb      	adds	r3, r7, #2
 8004a54:	2100      	movs	r1, #0
 8004a56:	5e52      	ldrsh	r2, [r2, r1]
 8004a58:	2100      	movs	r1, #0
 8004a5a:	5e5b      	ldrsh	r3, [r3, r1]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	ddaf      	ble.n	80049c0 <LCD_DrawLine+0x148>
		}
	}
}
 8004a60:	46c0      	nop			; (mov r8, r8)
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	46bd      	mov	sp, r7
 8004a66:	b008      	add	sp, #32
 8004a68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004a6c <LCD_DrawFastHLine>:
 * \param length	Length of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastHLine(int16_t x, int16_t y, int16_t length, uint16_t color) {
 8004a6c:	b5b0      	push	{r4, r5, r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	0005      	movs	r5, r0
 8004a74:	000c      	movs	r4, r1
 8004a76:	0010      	movs	r0, r2
 8004a78:	0019      	movs	r1, r3
 8004a7a:	1dbb      	adds	r3, r7, #6
 8004a7c:	1c2a      	adds	r2, r5, #0
 8004a7e:	801a      	strh	r2, [r3, #0]
 8004a80:	1d3b      	adds	r3, r7, #4
 8004a82:	1c22      	adds	r2, r4, #0
 8004a84:	801a      	strh	r2, [r3, #0]
 8004a86:	1cbb      	adds	r3, r7, #2
 8004a88:	1c02      	adds	r2, r0, #0
 8004a8a:	801a      	strh	r2, [r3, #0]
 8004a8c:	003b      	movs	r3, r7
 8004a8e:	1c0a      	adds	r2, r1, #0
 8004a90:	801a      	strh	r2, [r3, #0]
	int16_t x2;

	// Initial off-screen clipping
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 8004a92:	1cbb      	adds	r3, r7, #2
 8004a94:	2200      	movs	r2, #0
 8004a96:	5e9b      	ldrsh	r3, [r3, r2]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	dc00      	bgt.n	8004a9e <LCD_DrawFastHLine+0x32>
 8004a9c:	e075      	b.n	8004b8a <LCD_DrawFastHLine+0x11e>
 8004a9e:	1d3b      	adds	r3, r7, #4
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	5e9b      	ldrsh	r3, [r3, r2]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	da00      	bge.n	8004aaa <LCD_DrawFastHLine+0x3e>
 8004aa8:	e06f      	b.n	8004b8a <LCD_DrawFastHLine+0x11e>
 8004aaa:	4b3a      	ldr	r3, [pc, #232]	; (8004b94 <LCD_DrawFastHLine+0x128>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	5e9b      	ldrsh	r3, [r3, r2]
 8004ab0:	1d3a      	adds	r2, r7, #4
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	5e52      	ldrsh	r2, [r2, r1]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	da67      	bge.n	8004b8a <LCD_DrawFastHLine+0x11e>
 8004aba:	4b37      	ldr	r3, [pc, #220]	; (8004b98 <LCD_DrawFastHLine+0x12c>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	5e9b      	ldrsh	r3, [r3, r2]
 8004ac0:	1dba      	adds	r2, r7, #6
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	5e52      	ldrsh	r2, [r2, r1]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	da5f      	bge.n	8004b8a <LCD_DrawFastHLine+0x11e>
			(x + length - 1)) < 0))
 8004aca:	1dbb      	adds	r3, r7, #6
 8004acc:	881a      	ldrh	r2, [r3, #0]
 8004ace:	1cbb      	adds	r3, r7, #2
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	18d3      	adds	r3, r2, r3
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
	if ((length <= 0) || (y < 0) || (y >= m_height) || (x >= m_width) || ((x2 =
 8004ada:	210e      	movs	r1, #14
 8004adc:	187b      	adds	r3, r7, r1
 8004ade:	801a      	strh	r2, [r3, #0]
 8004ae0:	187b      	adds	r3, r7, r1
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	5e9b      	ldrsh	r3, [r3, r2]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	db4f      	blt.n	8004b8a <LCD_DrawFastHLine+0x11e>
		return;

	if (x < 0) { // Clip left
 8004aea:	1dbb      	adds	r3, r7, #6
 8004aec:	2200      	movs	r2, #0
 8004aee:	5e9b      	ldrsh	r3, [r3, r2]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	da0a      	bge.n	8004b0a <LCD_DrawFastHLine+0x9e>
		length += x;
 8004af4:	1cbb      	adds	r3, r7, #2
 8004af6:	881a      	ldrh	r2, [r3, #0]
 8004af8:	1dbb      	adds	r3, r7, #6
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	18d3      	adds	r3, r2, r3
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	1cbb      	adds	r3, r7, #2
 8004b02:	801a      	strh	r2, [r3, #0]
		x = 0;
 8004b04:	1dbb      	adds	r3, r7, #6
 8004b06:	2200      	movs	r2, #0
 8004b08:	801a      	strh	r2, [r3, #0]
	}

	if (x2 >= m_width) { // Clip right
 8004b0a:	4b23      	ldr	r3, [pc, #140]	; (8004b98 <LCD_DrawFastHLine+0x12c>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	5e9b      	ldrsh	r3, [r3, r2]
 8004b10:	210e      	movs	r1, #14
 8004b12:	187a      	adds	r2, r7, r1
 8004b14:	2000      	movs	r0, #0
 8004b16:	5e12      	ldrsh	r2, [r2, r0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	db11      	blt.n	8004b40 <LCD_DrawFastHLine+0xd4>
		x2 = m_width - 1;
 8004b1c:	4b1e      	ldr	r3, [pc, #120]	; (8004b98 <LCD_DrawFastHLine+0x12c>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	5e9b      	ldrsh	r3, [r3, r2]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	187b      	adds	r3, r7, r1
 8004b2a:	801a      	strh	r2, [r3, #0]
		length = x2 - x + 1;
 8004b2c:	187b      	adds	r3, r7, r1
 8004b2e:	881a      	ldrh	r2, [r3, #0]
 8004b30:	1dbb      	adds	r3, r7, #6
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3301      	adds	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	1cbb      	adds	r3, r7, #2
 8004b3e:	801a      	strh	r2, [r3, #0]
	}

	LCD_SetAddrWindow(x, y, x2, y);
 8004b40:	1dbb      	adds	r3, r7, #6
 8004b42:	2000      	movs	r0, #0
 8004b44:	5e18      	ldrsh	r0, [r3, r0]
 8004b46:	1d3b      	adds	r3, r7, #4
 8004b48:	2100      	movs	r1, #0
 8004b4a:	5e59      	ldrsh	r1, [r3, r1]
 8004b4c:	230e      	movs	r3, #14
 8004b4e:	18fb      	adds	r3, r7, r3
 8004b50:	2200      	movs	r2, #0
 8004b52:	5e9a      	ldrsh	r2, [r3, r2]
 8004b54:	1d3b      	adds	r3, r7, #4
 8004b56:	2400      	movs	r4, #0
 8004b58:	5f1b      	ldrsh	r3, [r3, r4]
 8004b5a:	f001 faa9 	bl	80060b0 <LCD_SetAddrWindow>
	LCD_Flood(color, length);
 8004b5e:	1cbb      	adds	r3, r7, #2
 8004b60:	2200      	movs	r2, #0
 8004b62:	5e9a      	ldrsh	r2, [r3, r2]
 8004b64:	003b      	movs	r3, r7
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	0011      	movs	r1, r2
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f000 ff8a 	bl	8005a84 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 8004b70:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <LCD_DrawFastHLine+0x12c>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	5e9b      	ldrsh	r3, [r3, r2]
 8004b76:	1e5a      	subs	r2, r3, #1
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <LCD_DrawFastHLine+0x128>)
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	5e5b      	ldrsh	r3, [r3, r1]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	2100      	movs	r1, #0
 8004b82:	2000      	movs	r0, #0
 8004b84:	f001 fa94 	bl	80060b0 <LCD_SetAddrWindow>
 8004b88:	e000      	b.n	8004b8c <LCD_DrawFastHLine+0x120>
		return;
 8004b8a:	46c0      	nop			; (mov r8, r8)

}
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	b004      	add	sp, #16
 8004b90:	bdb0      	pop	{r4, r5, r7, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	200007d4 	.word	0x200007d4
 8004b98:	200007d2 	.word	0x200007d2

08004b9c <LCD_DrawFastVLine>:
 * \param h		High of the line
 * \param color	Color
 * 
 * \return void
 */
void LCD_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8004b9c:	b5b0      	push	{r4, r5, r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af02      	add	r7, sp, #8
 8004ba2:	0005      	movs	r5, r0
 8004ba4:	000c      	movs	r4, r1
 8004ba6:	0010      	movs	r0, r2
 8004ba8:	0019      	movs	r1, r3
 8004baa:	1dbb      	adds	r3, r7, #6
 8004bac:	1c2a      	adds	r2, r5, #0
 8004bae:	801a      	strh	r2, [r3, #0]
 8004bb0:	1d3b      	adds	r3, r7, #4
 8004bb2:	1c22      	adds	r2, r4, #0
 8004bb4:	801a      	strh	r2, [r3, #0]
 8004bb6:	1cbb      	adds	r3, r7, #2
 8004bb8:	1c02      	adds	r2, r0, #0
 8004bba:	801a      	strh	r2, [r3, #0]
 8004bbc:	003b      	movs	r3, r7
 8004bbe:	1c0a      	adds	r2, r1, #0
 8004bc0:	801a      	strh	r2, [r3, #0]
	// Update in subclasses if desired!
	LCD_DrawLine(x, y, x, y + h - 1, color);
 8004bc2:	1d3b      	adds	r3, r7, #4
 8004bc4:	881a      	ldrh	r2, [r3, #0]
 8004bc6:	1cbb      	adds	r3, r7, #2
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	18d3      	adds	r3, r2, r3
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	b21c      	sxth	r4, r3
 8004bd4:	1dbb      	adds	r3, r7, #6
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	5e9a      	ldrsh	r2, [r3, r2]
 8004bda:	1d3b      	adds	r3, r7, #4
 8004bdc:	2100      	movs	r1, #0
 8004bde:	5e59      	ldrsh	r1, [r3, r1]
 8004be0:	1dbb      	adds	r3, r7, #6
 8004be2:	2000      	movs	r0, #0
 8004be4:	5e18      	ldrsh	r0, [r3, r0]
 8004be6:	003b      	movs	r3, r7
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	0023      	movs	r3, r4
 8004bee:	f7ff fe43 	bl	8004878 <LCD_DrawLine>
}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b002      	add	sp, #8
 8004bf8:	bdb0      	pop	{r4, r5, r7, pc}

08004bfa <LCD_DrawRect>:
 * \param h			Height of the rectangle to draw
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8004bfa:	b5b0      	push	{r4, r5, r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	0005      	movs	r5, r0
 8004c02:	000c      	movs	r4, r1
 8004c04:	0010      	movs	r0, r2
 8004c06:	0019      	movs	r1, r3
 8004c08:	1dbb      	adds	r3, r7, #6
 8004c0a:	1c2a      	adds	r2, r5, #0
 8004c0c:	801a      	strh	r2, [r3, #0]
 8004c0e:	1d3b      	adds	r3, r7, #4
 8004c10:	1c22      	adds	r2, r4, #0
 8004c12:	801a      	strh	r2, [r3, #0]
 8004c14:	1cbb      	adds	r3, r7, #2
 8004c16:	1c02      	adds	r2, r0, #0
 8004c18:	801a      	strh	r2, [r3, #0]
 8004c1a:	003b      	movs	r3, r7
 8004c1c:	1c0a      	adds	r2, r1, #0
 8004c1e:	801a      	strh	r2, [r3, #0]
	LCD_DrawFastHLine(x, y, w, color);
 8004c20:	2518      	movs	r5, #24
 8004c22:	197b      	adds	r3, r7, r5
 8004c24:	881c      	ldrh	r4, [r3, #0]
 8004c26:	1cbb      	adds	r3, r7, #2
 8004c28:	2200      	movs	r2, #0
 8004c2a:	5e9a      	ldrsh	r2, [r3, r2]
 8004c2c:	1d3b      	adds	r3, r7, #4
 8004c2e:	2100      	movs	r1, #0
 8004c30:	5e59      	ldrsh	r1, [r3, r1]
 8004c32:	1dbb      	adds	r3, r7, #6
 8004c34:	2000      	movs	r0, #0
 8004c36:	5e18      	ldrsh	r0, [r3, r0]
 8004c38:	0023      	movs	r3, r4
 8004c3a:	f7ff ff17 	bl	8004a6c <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x, y + h - 1, w, color);
 8004c3e:	1d3b      	adds	r3, r7, #4
 8004c40:	881a      	ldrh	r2, [r3, #0]
 8004c42:	003b      	movs	r3, r7
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	18d3      	adds	r3, r2, r3
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	b219      	sxth	r1, r3
 8004c50:	197b      	adds	r3, r7, r5
 8004c52:	881c      	ldrh	r4, [r3, #0]
 8004c54:	1cbb      	adds	r3, r7, #2
 8004c56:	2200      	movs	r2, #0
 8004c58:	5e9a      	ldrsh	r2, [r3, r2]
 8004c5a:	1dbb      	adds	r3, r7, #6
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	5e18      	ldrsh	r0, [r3, r0]
 8004c60:	0023      	movs	r3, r4
 8004c62:	f7ff ff03 	bl	8004a6c <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y, h, color);
 8004c66:	197b      	adds	r3, r7, r5
 8004c68:	881c      	ldrh	r4, [r3, #0]
 8004c6a:	003b      	movs	r3, r7
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	5e9a      	ldrsh	r2, [r3, r2]
 8004c70:	1d3b      	adds	r3, r7, #4
 8004c72:	2100      	movs	r1, #0
 8004c74:	5e59      	ldrsh	r1, [r3, r1]
 8004c76:	1dbb      	adds	r3, r7, #6
 8004c78:	2000      	movs	r0, #0
 8004c7a:	5e18      	ldrsh	r0, [r3, r0]
 8004c7c:	0023      	movs	r3, r4
 8004c7e:	f7ff ff8d 	bl	8004b9c <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y, h, color);
 8004c82:	1dbb      	adds	r3, r7, #6
 8004c84:	881a      	ldrh	r2, [r3, #0]
 8004c86:	1cbb      	adds	r3, r7, #2
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	18d3      	adds	r3, r2, r3
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	b218      	sxth	r0, r3
 8004c94:	197b      	adds	r3, r7, r5
 8004c96:	881c      	ldrh	r4, [r3, #0]
 8004c98:	003b      	movs	r3, r7
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	5e9a      	ldrsh	r2, [r3, r2]
 8004c9e:	1d3b      	adds	r3, r7, #4
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	5e59      	ldrsh	r1, [r3, r1]
 8004ca4:	0023      	movs	r3, r4
 8004ca6:	f7ff ff79 	bl	8004b9c <LCD_DrawFastVLine>
}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	46bd      	mov	sp, r7
 8004cae:	b002      	add	sp, #8
 8004cb0:	bdb0      	pop	{r4, r5, r7, pc}

08004cb2 <LCD_DrawRoundRect>:
 * \param color		Color
 * 
 * \return void
 */
void LCD_DrawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 8004cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cb4:	b085      	sub	sp, #20
 8004cb6:	af02      	add	r7, sp, #8
 8004cb8:	0005      	movs	r5, r0
 8004cba:	000c      	movs	r4, r1
 8004cbc:	0010      	movs	r0, r2
 8004cbe:	0019      	movs	r1, r3
 8004cc0:	1dbb      	adds	r3, r7, #6
 8004cc2:	1c2a      	adds	r2, r5, #0
 8004cc4:	801a      	strh	r2, [r3, #0]
 8004cc6:	1d3b      	adds	r3, r7, #4
 8004cc8:	1c22      	adds	r2, r4, #0
 8004cca:	801a      	strh	r2, [r3, #0]
 8004ccc:	1cbb      	adds	r3, r7, #2
 8004cce:	1c02      	adds	r2, r0, #0
 8004cd0:	801a      	strh	r2, [r3, #0]
 8004cd2:	003b      	movs	r3, r7
 8004cd4:	1c0a      	adds	r2, r1, #0
 8004cd6:	801a      	strh	r2, [r3, #0]
	// smarter version
	LCD_DrawFastHLine(x + r, y, w - 2 * r, color); // Top
 8004cd8:	1dbb      	adds	r3, r7, #6
 8004cda:	881a      	ldrh	r2, [r3, #0]
 8004cdc:	2518      	movs	r5, #24
 8004cde:	2408      	movs	r4, #8
 8004ce0:	192b      	adds	r3, r5, r4
 8004ce2:	19db      	adds	r3, r3, r7
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	18d3      	adds	r3, r2, r3
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	b218      	sxth	r0, r3
 8004cec:	1cbb      	adds	r3, r7, #2
 8004cee:	881a      	ldrh	r2, [r3, #0]
 8004cf0:	192b      	adds	r3, r5, r4
 8004cf2:	19db      	adds	r3, r3, r7
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	18db      	adds	r3, r3, r3
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	b21a      	sxth	r2, r3
 8004d00:	261c      	movs	r6, #28
 8004d02:	1933      	adds	r3, r6, r4
 8004d04:	19db      	adds	r3, r3, r7
 8004d06:	881c      	ldrh	r4, [r3, #0]
 8004d08:	1d3b      	adds	r3, r7, #4
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	5e59      	ldrsh	r1, [r3, r1]
 8004d0e:	0023      	movs	r3, r4
 8004d10:	f7ff feac 	bl	8004a6c <LCD_DrawFastHLine>
	LCD_DrawFastHLine(x + r, y + h - 1, w - 2 * r, color); // Bottom
 8004d14:	1dbb      	adds	r3, r7, #6
 8004d16:	881a      	ldrh	r2, [r3, #0]
 8004d18:	2408      	movs	r4, #8
 8004d1a:	192b      	adds	r3, r5, r4
 8004d1c:	19db      	adds	r3, r3, r7
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	18d3      	adds	r3, r2, r3
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	b218      	sxth	r0, r3
 8004d26:	1d3b      	adds	r3, r7, #4
 8004d28:	881a      	ldrh	r2, [r3, #0]
 8004d2a:	003b      	movs	r3, r7
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	18d3      	adds	r3, r2, r3
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	3b01      	subs	r3, #1
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	b219      	sxth	r1, r3
 8004d38:	1cbb      	adds	r3, r7, #2
 8004d3a:	881a      	ldrh	r2, [r3, #0]
 8004d3c:	192b      	adds	r3, r5, r4
 8004d3e:	19db      	adds	r3, r3, r7
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	18db      	adds	r3, r3, r3
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	b21a      	sxth	r2, r3
 8004d4c:	1933      	adds	r3, r6, r4
 8004d4e:	19db      	adds	r3, r3, r7
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	f7ff fe8b 	bl	8004a6c <LCD_DrawFastHLine>
	LCD_DrawFastVLine(x, y + r, h - 2 * r, color); // Left
 8004d56:	1d3b      	adds	r3, r7, #4
 8004d58:	881a      	ldrh	r2, [r3, #0]
 8004d5a:	192b      	adds	r3, r5, r4
 8004d5c:	19db      	adds	r3, r3, r7
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	18d3      	adds	r3, r2, r3
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	b219      	sxth	r1, r3
 8004d66:	003b      	movs	r3, r7
 8004d68:	881a      	ldrh	r2, [r3, #0]
 8004d6a:	192b      	adds	r3, r5, r4
 8004d6c:	19db      	adds	r3, r3, r7
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	18db      	adds	r3, r3, r3
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	b21a      	sxth	r2, r3
 8004d7a:	1933      	adds	r3, r6, r4
 8004d7c:	19db      	adds	r3, r3, r7
 8004d7e:	881c      	ldrh	r4, [r3, #0]
 8004d80:	1dbb      	adds	r3, r7, #6
 8004d82:	2000      	movs	r0, #0
 8004d84:	5e18      	ldrsh	r0, [r3, r0]
 8004d86:	0023      	movs	r3, r4
 8004d88:	f7ff ff08 	bl	8004b9c <LCD_DrawFastVLine>
	LCD_DrawFastVLine(x + w - 1, y + r, h - 2 * r, color); // Right
 8004d8c:	1dbb      	adds	r3, r7, #6
 8004d8e:	881a      	ldrh	r2, [r3, #0]
 8004d90:	1cbb      	adds	r3, r7, #2
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	18d3      	adds	r3, r2, r3
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	b218      	sxth	r0, r3
 8004d9e:	1d3b      	adds	r3, r7, #4
 8004da0:	881a      	ldrh	r2, [r3, #0]
 8004da2:	2408      	movs	r4, #8
 8004da4:	192b      	adds	r3, r5, r4
 8004da6:	19db      	adds	r3, r3, r7
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	18d3      	adds	r3, r2, r3
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	b219      	sxth	r1, r3
 8004db0:	003b      	movs	r3, r7
 8004db2:	881a      	ldrh	r2, [r3, #0]
 8004db4:	192b      	adds	r3, r5, r4
 8004db6:	19db      	adds	r3, r3, r7
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	18db      	adds	r3, r3, r3
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	b21a      	sxth	r2, r3
 8004dc4:	1933      	adds	r3, r6, r4
 8004dc6:	19db      	adds	r3, r3, r7
 8004dc8:	881b      	ldrh	r3, [r3, #0]
 8004dca:	f7ff fee7 	bl	8004b9c <LCD_DrawFastVLine>
	// draw four corners
	LCD_DrawCircleHelper(x + r, y + r, r, 1, color);
 8004dce:	1dbb      	adds	r3, r7, #6
 8004dd0:	881a      	ldrh	r2, [r3, #0]
 8004dd2:	192b      	adds	r3, r5, r4
 8004dd4:	19db      	adds	r3, r3, r7
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	18d3      	adds	r3, r2, r3
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	b218      	sxth	r0, r3
 8004dde:	1d3b      	adds	r3, r7, #4
 8004de0:	881a      	ldrh	r2, [r3, #0]
 8004de2:	1929      	adds	r1, r5, r4
 8004de4:	19cb      	adds	r3, r1, r7
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	18d3      	adds	r3, r2, r3
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	b219      	sxth	r1, r3
 8004dee:	002c      	movs	r4, r5
 8004df0:	2308      	movs	r3, #8
 8004df2:	18ea      	adds	r2, r5, r3
 8004df4:	19d3      	adds	r3, r2, r7
 8004df6:	2200      	movs	r2, #0
 8004df8:	5e9a      	ldrsh	r2, [r3, r2]
 8004dfa:	0035      	movs	r5, r6
 8004dfc:	2608      	movs	r6, #8
 8004dfe:	19ab      	adds	r3, r5, r6
 8004e00:	19db      	adds	r3, r3, r7
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	2301      	movs	r3, #1
 8004e08:	f000 f873 	bl	8004ef2 <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 8004e0c:	1dbb      	adds	r3, r7, #6
 8004e0e:	881a      	ldrh	r2, [r3, #0]
 8004e10:	1cbb      	adds	r3, r7, #2
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	18d3      	adds	r3, r2, r3
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	0031      	movs	r1, r6
 8004e1a:	1863      	adds	r3, r4, r1
 8004e1c:	19db      	adds	r3, r3, r7
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	b218      	sxth	r0, r3
 8004e2a:	1d3b      	adds	r3, r7, #4
 8004e2c:	881a      	ldrh	r2, [r3, #0]
 8004e2e:	000e      	movs	r6, r1
 8004e30:	19a3      	adds	r3, r4, r6
 8004e32:	19db      	adds	r3, r3, r7
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	18d3      	adds	r3, r2, r3
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	b219      	sxth	r1, r3
 8004e3c:	19a3      	adds	r3, r4, r6
 8004e3e:	19db      	adds	r3, r3, r7
 8004e40:	2200      	movs	r2, #0
 8004e42:	5e9a      	ldrsh	r2, [r3, r2]
 8004e44:	19ab      	adds	r3, r5, r6
 8004e46:	19db      	adds	r3, r3, r7
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	f000 f850 	bl	8004ef2 <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 8004e52:	1dbb      	adds	r3, r7, #6
 8004e54:	881a      	ldrh	r2, [r3, #0]
 8004e56:	1cbb      	adds	r3, r7, #2
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	18d3      	adds	r3, r2, r3
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	0021      	movs	r1, r4
 8004e60:	198b      	adds	r3, r1, r6
 8004e62:	19db      	adds	r3, r3, r7
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	b218      	sxth	r0, r3
 8004e70:	1d3b      	adds	r3, r7, #4
 8004e72:	881a      	ldrh	r2, [r3, #0]
 8004e74:	003b      	movs	r3, r7
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	18d3      	adds	r3, r2, r3
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	000c      	movs	r4, r1
 8004e7e:	19a3      	adds	r3, r4, r6
 8004e80:	19db      	adds	r3, r3, r7
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	b219      	sxth	r1, r3
 8004e8e:	19a3      	adds	r3, r4, r6
 8004e90:	19db      	adds	r3, r3, r7
 8004e92:	2200      	movs	r2, #0
 8004e94:	5e9a      	ldrsh	r2, [r3, r2]
 8004e96:	19ab      	adds	r3, r5, r6
 8004e98:	19db      	adds	r3, r3, r7
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	2304      	movs	r3, #4
 8004ea0:	f000 f827 	bl	8004ef2 <LCD_DrawCircleHelper>
	LCD_DrawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 8004ea4:	1dbb      	adds	r3, r7, #6
 8004ea6:	881a      	ldrh	r2, [r3, #0]
 8004ea8:	0021      	movs	r1, r4
 8004eaa:	198b      	adds	r3, r1, r6
 8004eac:	19db      	adds	r3, r3, r7
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	18d3      	adds	r3, r2, r3
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	b218      	sxth	r0, r3
 8004eb6:	1d3b      	adds	r3, r7, #4
 8004eb8:	881a      	ldrh	r2, [r3, #0]
 8004eba:	003b      	movs	r3, r7
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	18d3      	adds	r3, r2, r3
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	000c      	movs	r4, r1
 8004ec4:	198b      	adds	r3, r1, r6
 8004ec6:	19db      	adds	r3, r3, r7
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	b219      	sxth	r1, r3
 8004ed4:	19a3      	adds	r3, r4, r6
 8004ed6:	19db      	adds	r3, r3, r7
 8004ed8:	2200      	movs	r2, #0
 8004eda:	5e9a      	ldrsh	r2, [r3, r2]
 8004edc:	19ab      	adds	r3, r5, r6
 8004ede:	19db      	adds	r3, r3, r7
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	2308      	movs	r3, #8
 8004ee6:	f000 f804 	bl	8004ef2 <LCD_DrawCircleHelper>
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b003      	add	sp, #12
 8004ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ef2 <LCD_DrawCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		uint16_t color) {
 8004ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ef4:	b087      	sub	sp, #28
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	0005      	movs	r5, r0
 8004efa:	000c      	movs	r4, r1
 8004efc:	0010      	movs	r0, r2
 8004efe:	0019      	movs	r1, r3
 8004f00:	1dbb      	adds	r3, r7, #6
 8004f02:	1c2a      	adds	r2, r5, #0
 8004f04:	801a      	strh	r2, [r3, #0]
 8004f06:	1d3b      	adds	r3, r7, #4
 8004f08:	1c22      	adds	r2, r4, #0
 8004f0a:	801a      	strh	r2, [r3, #0]
 8004f0c:	1cbb      	adds	r3, r7, #2
 8004f0e:	1c02      	adds	r2, r0, #0
 8004f10:	801a      	strh	r2, [r3, #0]
 8004f12:	1c7b      	adds	r3, r7, #1
 8004f14:	1c0a      	adds	r2, r1, #0
 8004f16:	701a      	strb	r2, [r3, #0]
	int16_t f = 1 - r;
 8004f18:	1cbb      	adds	r3, r7, #2
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	2316      	movs	r3, #22
 8004f24:	18fb      	adds	r3, r7, r3
 8004f26:	801a      	strh	r2, [r3, #0]
	int16_t ddF_x = 1;
 8004f28:	2314      	movs	r3, #20
 8004f2a:	18fb      	adds	r3, r7, r3
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	801a      	strh	r2, [r3, #0]
	int16_t ddF_y = -2 * r;
 8004f30:	1cbb      	adds	r3, r7, #2
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	1c1a      	adds	r2, r3, #0
 8004f36:	03d2      	lsls	r2, r2, #15
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	18db      	adds	r3, r3, r3
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	2312      	movs	r3, #18
 8004f40:	18fb      	adds	r3, r7, r3
 8004f42:	801a      	strh	r2, [r3, #0]
	int16_t x = 0;
 8004f44:	2310      	movs	r3, #16
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	2200      	movs	r2, #0
 8004f4a:	801a      	strh	r2, [r3, #0]
	int16_t y = r;
 8004f4c:	230e      	movs	r3, #14
 8004f4e:	18fb      	adds	r3, r7, r3
 8004f50:	1cba      	adds	r2, r7, #2
 8004f52:	8812      	ldrh	r2, [r2, #0]
 8004f54:	801a      	strh	r2, [r3, #0]

	while (x < y) {
 8004f56:	e0fe      	b.n	8005156 <LCD_DrawCircleHelper+0x264>
		if (f >= 0) {
 8004f58:	2116      	movs	r1, #22
 8004f5a:	187b      	adds	r3, r7, r1
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	5e9b      	ldrsh	r3, [r3, r2]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	db17      	blt.n	8004f94 <LCD_DrawCircleHelper+0xa2>
			y--;
 8004f64:	200e      	movs	r0, #14
 8004f66:	183b      	adds	r3, r7, r0
 8004f68:	2200      	movs	r2, #0
 8004f6a:	5e9b      	ldrsh	r3, [r3, r2]
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	183b      	adds	r3, r7, r0
 8004f74:	801a      	strh	r2, [r3, #0]
			ddF_y += 2;
 8004f76:	2012      	movs	r0, #18
 8004f78:	183b      	adds	r3, r7, r0
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	3302      	adds	r3, #2
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	183b      	adds	r3, r7, r0
 8004f82:	801a      	strh	r2, [r3, #0]
			f += ddF_y;
 8004f84:	187b      	adds	r3, r7, r1
 8004f86:	881a      	ldrh	r2, [r3, #0]
 8004f88:	183b      	adds	r3, r7, r0
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	18d3      	adds	r3, r2, r3
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	187b      	adds	r3, r7, r1
 8004f92:	801a      	strh	r2, [r3, #0]
		}
		x++;
 8004f94:	2110      	movs	r1, #16
 8004f96:	187b      	adds	r3, r7, r1
 8004f98:	2200      	movs	r2, #0
 8004f9a:	5e9b      	ldrsh	r3, [r3, r2]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	187b      	adds	r3, r7, r1
 8004fa4:	801a      	strh	r2, [r3, #0]
		ddF_x += 2;
 8004fa6:	2014      	movs	r0, #20
 8004fa8:	183b      	adds	r3, r7, r0
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	3302      	adds	r3, #2
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	183b      	adds	r3, r7, r0
 8004fb2:	801a      	strh	r2, [r3, #0]
		f += ddF_x;
 8004fb4:	2416      	movs	r4, #22
 8004fb6:	193b      	adds	r3, r7, r4
 8004fb8:	881a      	ldrh	r2, [r3, #0]
 8004fba:	183b      	adds	r3, r7, r0
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	18d3      	adds	r3, r2, r3
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	193b      	adds	r3, r7, r4
 8004fc4:	801a      	strh	r2, [r3, #0]
		if (cornername & 0x4) {
 8004fc6:	1c7b      	adds	r3, r7, #1
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2204      	movs	r2, #4
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d02c      	beq.n	800502a <LCD_DrawCircleHelper+0x138>
			LCD_DrawPixel(x0 + x, y0 + y, color);
 8004fd0:	1dbb      	adds	r3, r7, #6
 8004fd2:	881a      	ldrh	r2, [r3, #0]
 8004fd4:	000c      	movs	r4, r1
 8004fd6:	187b      	adds	r3, r7, r1
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	18d3      	adds	r3, r2, r3
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	b218      	sxth	r0, r3
 8004fe0:	1d3b      	adds	r3, r7, #4
 8004fe2:	881a      	ldrh	r2, [r3, #0]
 8004fe4:	250e      	movs	r5, #14
 8004fe6:	197b      	adds	r3, r7, r5
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	18d3      	adds	r3, r2, r3
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	b219      	sxth	r1, r3
 8004ff0:	2628      	movs	r6, #40	; 0x28
 8004ff2:	2308      	movs	r3, #8
 8004ff4:	18f2      	adds	r2, r6, r3
 8004ff6:	19d3      	adds	r3, r2, r7
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	001a      	movs	r2, r3
 8004ffc:	f7ff fbb0 	bl	8004760 <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 + x, color);
 8005000:	1dbb      	adds	r3, r7, #6
 8005002:	881a      	ldrh	r2, [r3, #0]
 8005004:	197b      	adds	r3, r7, r5
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	18d3      	adds	r3, r2, r3
 800500a:	b29b      	uxth	r3, r3
 800500c:	b218      	sxth	r0, r3
 800500e:	1d3b      	adds	r3, r7, #4
 8005010:	881a      	ldrh	r2, [r3, #0]
 8005012:	193b      	adds	r3, r7, r4
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	18d3      	adds	r3, r2, r3
 8005018:	b29b      	uxth	r3, r3
 800501a:	b219      	sxth	r1, r3
 800501c:	2308      	movs	r3, #8
 800501e:	18f3      	adds	r3, r6, r3
 8005020:	19db      	adds	r3, r3, r7
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	001a      	movs	r2, r3
 8005026:	f7ff fb9b 	bl	8004760 <LCD_DrawPixel>
		}
		if (cornername & 0x2) {
 800502a:	1c7b      	adds	r3, r7, #1
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2202      	movs	r2, #2
 8005030:	4013      	ands	r3, r2
 8005032:	d02c      	beq.n	800508e <LCD_DrawCircleHelper+0x19c>
			LCD_DrawPixel(x0 + x, y0 - y, color);
 8005034:	1dbb      	adds	r3, r7, #6
 8005036:	881a      	ldrh	r2, [r3, #0]
 8005038:	2410      	movs	r4, #16
 800503a:	193b      	adds	r3, r7, r4
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	18d3      	adds	r3, r2, r3
 8005040:	b29b      	uxth	r3, r3
 8005042:	b218      	sxth	r0, r3
 8005044:	1d3b      	adds	r3, r7, #4
 8005046:	881a      	ldrh	r2, [r3, #0]
 8005048:	250e      	movs	r5, #14
 800504a:	197b      	adds	r3, r7, r5
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	b29b      	uxth	r3, r3
 8005052:	b219      	sxth	r1, r3
 8005054:	2628      	movs	r6, #40	; 0x28
 8005056:	2308      	movs	r3, #8
 8005058:	18f2      	adds	r2, r6, r3
 800505a:	19d3      	adds	r3, r2, r7
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	001a      	movs	r2, r3
 8005060:	f7ff fb7e 	bl	8004760 <LCD_DrawPixel>
			LCD_DrawPixel(x0 + y, y0 - x, color);
 8005064:	1dbb      	adds	r3, r7, #6
 8005066:	881a      	ldrh	r2, [r3, #0]
 8005068:	197b      	adds	r3, r7, r5
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	18d3      	adds	r3, r2, r3
 800506e:	b29b      	uxth	r3, r3
 8005070:	b218      	sxth	r0, r3
 8005072:	1d3b      	adds	r3, r7, #4
 8005074:	881a      	ldrh	r2, [r3, #0]
 8005076:	193b      	adds	r3, r7, r4
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	b29b      	uxth	r3, r3
 800507e:	b219      	sxth	r1, r3
 8005080:	2308      	movs	r3, #8
 8005082:	18f3      	adds	r3, r6, r3
 8005084:	19db      	adds	r3, r3, r7
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	001a      	movs	r2, r3
 800508a:	f7ff fb69 	bl	8004760 <LCD_DrawPixel>
		}
		if (cornername & 0x8) {
 800508e:	1c7b      	adds	r3, r7, #1
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2208      	movs	r2, #8
 8005094:	4013      	ands	r3, r2
 8005096:	d02c      	beq.n	80050f2 <LCD_DrawCircleHelper+0x200>
			LCD_DrawPixel(x0 - y, y0 + x, color);
 8005098:	1dbb      	adds	r3, r7, #6
 800509a:	881a      	ldrh	r2, [r3, #0]
 800509c:	240e      	movs	r4, #14
 800509e:	193b      	adds	r3, r7, r4
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	b218      	sxth	r0, r3
 80050a8:	1d3b      	adds	r3, r7, #4
 80050aa:	881a      	ldrh	r2, [r3, #0]
 80050ac:	2510      	movs	r5, #16
 80050ae:	197b      	adds	r3, r7, r5
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	18d3      	adds	r3, r2, r3
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	b219      	sxth	r1, r3
 80050b8:	2628      	movs	r6, #40	; 0x28
 80050ba:	2308      	movs	r3, #8
 80050bc:	18f2      	adds	r2, r6, r3
 80050be:	19d3      	adds	r3, r2, r7
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	001a      	movs	r2, r3
 80050c4:	f7ff fb4c 	bl	8004760 <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 + y, color);
 80050c8:	1dbb      	adds	r3, r7, #6
 80050ca:	881a      	ldrh	r2, [r3, #0]
 80050cc:	197b      	adds	r3, r7, r5
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	b218      	sxth	r0, r3
 80050d6:	1d3b      	adds	r3, r7, #4
 80050d8:	881a      	ldrh	r2, [r3, #0]
 80050da:	193b      	adds	r3, r7, r4
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	18d3      	adds	r3, r2, r3
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	b219      	sxth	r1, r3
 80050e4:	2308      	movs	r3, #8
 80050e6:	18f3      	adds	r3, r6, r3
 80050e8:	19db      	adds	r3, r3, r7
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	001a      	movs	r2, r3
 80050ee:	f7ff fb37 	bl	8004760 <LCD_DrawPixel>
		}
		if (cornername & 0x1) {
 80050f2:	1c7b      	adds	r3, r7, #1
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	2201      	movs	r2, #1
 80050f8:	4013      	ands	r3, r2
 80050fa:	d02c      	beq.n	8005156 <LCD_DrawCircleHelper+0x264>
			LCD_DrawPixel(x0 - y, y0 - x, color);
 80050fc:	1dbb      	adds	r3, r7, #6
 80050fe:	881a      	ldrh	r2, [r3, #0]
 8005100:	240e      	movs	r4, #14
 8005102:	193b      	adds	r3, r7, r4
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	b29b      	uxth	r3, r3
 800510a:	b218      	sxth	r0, r3
 800510c:	1d3b      	adds	r3, r7, #4
 800510e:	881a      	ldrh	r2, [r3, #0]
 8005110:	2510      	movs	r5, #16
 8005112:	197b      	adds	r3, r7, r5
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	b29b      	uxth	r3, r3
 800511a:	b219      	sxth	r1, r3
 800511c:	2628      	movs	r6, #40	; 0x28
 800511e:	2308      	movs	r3, #8
 8005120:	18f2      	adds	r2, r6, r3
 8005122:	19d3      	adds	r3, r2, r7
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	001a      	movs	r2, r3
 8005128:	f7ff fb1a 	bl	8004760 <LCD_DrawPixel>
			LCD_DrawPixel(x0 - x, y0 - y, color);
 800512c:	1dbb      	adds	r3, r7, #6
 800512e:	881a      	ldrh	r2, [r3, #0]
 8005130:	197b      	adds	r3, r7, r5
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	b29b      	uxth	r3, r3
 8005138:	b218      	sxth	r0, r3
 800513a:	1d3b      	adds	r3, r7, #4
 800513c:	881a      	ldrh	r2, [r3, #0]
 800513e:	193b      	adds	r3, r7, r4
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	b29b      	uxth	r3, r3
 8005146:	b219      	sxth	r1, r3
 8005148:	2308      	movs	r3, #8
 800514a:	18f3      	adds	r3, r6, r3
 800514c:	19db      	adds	r3, r3, r7
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	001a      	movs	r2, r3
 8005152:	f7ff fb05 	bl	8004760 <LCD_DrawPixel>
	while (x < y) {
 8005156:	2310      	movs	r3, #16
 8005158:	18fa      	adds	r2, r7, r3
 800515a:	230e      	movs	r3, #14
 800515c:	18fb      	adds	r3, r7, r3
 800515e:	2100      	movs	r1, #0
 8005160:	5e52      	ldrsh	r2, [r2, r1]
 8005162:	2100      	movs	r1, #0
 8005164:	5e5b      	ldrsh	r3, [r3, r1]
 8005166:	429a      	cmp	r2, r3
 8005168:	da00      	bge.n	800516c <LCD_DrawCircleHelper+0x27a>
 800516a:	e6f5      	b.n	8004f58 <LCD_DrawCircleHelper+0x66>
		}
	}
}
 800516c:	46c0      	nop			; (mov r8, r8)
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	46bd      	mov	sp, r7
 8005172:	b007      	add	sp, #28
 8005174:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005178 <LCD_DrawChar>:
 * \param size		Character Size
 * 
 * \return void
 */
void LCD_DrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color,
		uint16_t bg, uint8_t size) {
 8005178:	b5b0      	push	{r4, r5, r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af02      	add	r7, sp, #8
 800517e:	0005      	movs	r5, r0
 8005180:	000c      	movs	r4, r1
 8005182:	0010      	movs	r0, r2
 8005184:	0019      	movs	r1, r3
 8005186:	1dbb      	adds	r3, r7, #6
 8005188:	1c2a      	adds	r2, r5, #0
 800518a:	801a      	strh	r2, [r3, #0]
 800518c:	1d3b      	adds	r3, r7, #4
 800518e:	1c22      	adds	r2, r4, #0
 8005190:	801a      	strh	r2, [r3, #0]
 8005192:	1cfb      	adds	r3, r7, #3
 8005194:	1c02      	adds	r2, r0, #0
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	003b      	movs	r3, r7
 800519a:	1c0a      	adds	r2, r1, #0
 800519c:	801a      	strh	r2, [r3, #0]
	if ((x >= m_width) || // Clip right
 800519e:	4b8f      	ldr	r3, [pc, #572]	; (80053dc <LCD_DrawChar+0x264>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	5e9b      	ldrsh	r3, [r3, r2]
 80051a4:	1dba      	adds	r2, r7, #6
 80051a6:	2100      	movs	r1, #0
 80051a8:	5e52      	ldrsh	r2, [r2, r1]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	db00      	blt.n	80051b0 <LCD_DrawChar+0x38>
 80051ae:	e110      	b.n	80053d2 <LCD_DrawChar+0x25a>
			(y >= m_height) || // Clip bottom
 80051b0:	4b8b      	ldr	r3, [pc, #556]	; (80053e0 <LCD_DrawChar+0x268>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	5e9b      	ldrsh	r3, [r3, r2]
	if ((x >= m_width) || // Clip right
 80051b6:	1d3a      	adds	r2, r7, #4
 80051b8:	2100      	movs	r1, #0
 80051ba:	5e52      	ldrsh	r2, [r2, r1]
 80051bc:	429a      	cmp	r2, r3
 80051be:	db00      	blt.n	80051c2 <LCD_DrawChar+0x4a>
 80051c0:	e107      	b.n	80053d2 <LCD_DrawChar+0x25a>
			((x + 6 * size - 1) < 0) || // Clip left
 80051c2:	1dbb      	adds	r3, r7, #6
 80051c4:	2100      	movs	r1, #0
 80051c6:	5e59      	ldrsh	r1, [r3, r1]
 80051c8:	2024      	movs	r0, #36	; 0x24
 80051ca:	183b      	adds	r3, r7, r0
 80051cc:	781a      	ldrb	r2, [r3, #0]
 80051ce:	0013      	movs	r3, r2
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	189b      	adds	r3, r3, r2
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	18cb      	adds	r3, r1, r3
			(y >= m_height) || // Clip bottom
 80051d8:	2b00      	cmp	r3, #0
 80051da:	dc00      	bgt.n	80051de <LCD_DrawChar+0x66>
 80051dc:	e0f9      	b.n	80053d2 <LCD_DrawChar+0x25a>
			((y + 8 * size - 1) < 0))   // Clip top
 80051de:	1d3b      	adds	r3, r7, #4
 80051e0:	2200      	movs	r2, #0
 80051e2:	5e9a      	ldrsh	r2, [r3, r2]
 80051e4:	183b      	adds	r3, r7, r0
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	18d3      	adds	r3, r2, r3
			((x + 6 * size - 1) < 0) || // Clip left
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	dc00      	bgt.n	80051f2 <LCD_DrawChar+0x7a>
 80051f0:	e0ef      	b.n	80053d2 <LCD_DrawChar+0x25a>
		return;

	for (int8_t i = 0; i < 6; i++) {
 80051f2:	230f      	movs	r3, #15
 80051f4:	18fb      	adds	r3, r7, r3
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	e0e2      	b.n	80053c2 <LCD_DrawChar+0x24a>
		uint8_t line;
		if (i == 5) {
 80051fc:	230f      	movs	r3, #15
 80051fe:	18fb      	adds	r3, r7, r3
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	b25b      	sxtb	r3, r3
 8005204:	2b05      	cmp	r3, #5
 8005206:	d104      	bne.n	8005212 <LCD_DrawChar+0x9a>
			line = 0x0;
 8005208:	230e      	movs	r3, #14
 800520a:	18fb      	adds	r3, r7, r3
 800520c:	2200      	movs	r2, #0
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	e0ce      	b.n	80053b0 <LCD_DrawChar+0x238>
		} else {
			line = font[c * 5 + i];   //pgm_read_byte(font+(c*5)+i);
 8005212:	1cfb      	adds	r3, r7, #3
 8005214:	781a      	ldrb	r2, [r3, #0]
 8005216:	0013      	movs	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	189a      	adds	r2, r3, r2
 800521c:	230f      	movs	r3, #15
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	b25b      	sxtb	r3, r3
 8005224:	18d2      	adds	r2, r2, r3
 8005226:	230e      	movs	r3, #14
 8005228:	18fb      	adds	r3, r7, r3
 800522a:	496e      	ldr	r1, [pc, #440]	; (80053e4 <LCD_DrawChar+0x26c>)
 800522c:	5c8a      	ldrb	r2, [r1, r2]
 800522e:	701a      	strb	r2, [r3, #0]
			for (int8_t j = 0; j < 8; j++) {
 8005230:	230d      	movs	r3, #13
 8005232:	18fb      	adds	r3, r7, r3
 8005234:	2200      	movs	r2, #0
 8005236:	701a      	strb	r2, [r3, #0]
 8005238:	e0b3      	b.n	80053a2 <LCD_DrawChar+0x22a>
				if (line & 0x1) {
 800523a:	230e      	movs	r3, #14
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2201      	movs	r2, #1
 8005242:	4013      	ands	r3, r2
 8005244:	d04b      	beq.n	80052de <LCD_DrawChar+0x166>
					if (size == 1) { // default size
 8005246:	2324      	movs	r3, #36	; 0x24
 8005248:	18fb      	adds	r3, r7, r3
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d119      	bne.n	8005284 <LCD_DrawChar+0x10c>
						LCD_DrawPixel(x + i, y + j, color);
 8005250:	230f      	movs	r3, #15
 8005252:	18fb      	adds	r3, r7, r3
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	b25b      	sxtb	r3, r3
 8005258:	b29a      	uxth	r2, r3
 800525a:	1dbb      	adds	r3, r7, #6
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	18d3      	adds	r3, r2, r3
 8005260:	b29b      	uxth	r3, r3
 8005262:	b218      	sxth	r0, r3
 8005264:	230d      	movs	r3, #13
 8005266:	18fb      	adds	r3, r7, r3
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	b25b      	sxtb	r3, r3
 800526c:	b29a      	uxth	r2, r3
 800526e:	1d3b      	adds	r3, r7, #4
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	18d3      	adds	r3, r2, r3
 8005274:	b29b      	uxth	r3, r3
 8005276:	b219      	sxth	r1, r3
 8005278:	003b      	movs	r3, r7
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	001a      	movs	r2, r3
 800527e:	f7ff fa6f 	bl	8004760 <LCD_DrawPixel>
 8005282:	e07f      	b.n	8005384 <LCD_DrawChar+0x20c>
					} else {  // big size
						LCD_FillRect(x + (i * size), y + (j * size), size, size,
 8005284:	230f      	movs	r3, #15
 8005286:	18fb      	adds	r3, r7, r3
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	b25b      	sxtb	r3, r3
 800528c:	b29b      	uxth	r3, r3
 800528e:	2124      	movs	r1, #36	; 0x24
 8005290:	187a      	adds	r2, r7, r1
 8005292:	7812      	ldrb	r2, [r2, #0]
 8005294:	b292      	uxth	r2, r2
 8005296:	4353      	muls	r3, r2
 8005298:	b29a      	uxth	r2, r3
 800529a:	1dbb      	adds	r3, r7, #6
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	18d3      	adds	r3, r2, r3
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	b218      	sxth	r0, r3
 80052a4:	230d      	movs	r3, #13
 80052a6:	18fb      	adds	r3, r7, r3
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	b25b      	sxtb	r3, r3
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	000c      	movs	r4, r1
 80052b0:	187a      	adds	r2, r7, r1
 80052b2:	7812      	ldrb	r2, [r2, #0]
 80052b4:	b292      	uxth	r2, r2
 80052b6:	4353      	muls	r3, r2
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	1d3b      	adds	r3, r7, #4
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	18d3      	adds	r3, r2, r3
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	b219      	sxth	r1, r3
 80052c4:	193b      	adds	r3, r7, r4
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	b21a      	sxth	r2, r3
 80052ca:	193b      	adds	r3, r7, r4
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	b21c      	sxth	r4, r3
 80052d0:	003b      	movs	r3, r7
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	0023      	movs	r3, r4
 80052d8:	f000 fa08 	bl	80056ec <LCD_FillRect>
 80052dc:	e052      	b.n	8005384 <LCD_DrawChar+0x20c>
								color);
					}
				} else if (bg != color) {
 80052de:	2420      	movs	r4, #32
 80052e0:	193b      	adds	r3, r7, r4
 80052e2:	0039      	movs	r1, r7
 80052e4:	881a      	ldrh	r2, [r3, #0]
 80052e6:	880b      	ldrh	r3, [r1, #0]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d04b      	beq.n	8005384 <LCD_DrawChar+0x20c>
					if (size == 1) { // default size
 80052ec:	2324      	movs	r3, #36	; 0x24
 80052ee:	18fb      	adds	r3, r7, r3
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d119      	bne.n	800532a <LCD_DrawChar+0x1b2>
						LCD_DrawPixel(x + i, y + j, bg);
 80052f6:	230f      	movs	r3, #15
 80052f8:	18fb      	adds	r3, r7, r3
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	b25b      	sxtb	r3, r3
 80052fe:	b29a      	uxth	r2, r3
 8005300:	1dbb      	adds	r3, r7, #6
 8005302:	881b      	ldrh	r3, [r3, #0]
 8005304:	18d3      	adds	r3, r2, r3
 8005306:	b29b      	uxth	r3, r3
 8005308:	b218      	sxth	r0, r3
 800530a:	230d      	movs	r3, #13
 800530c:	18fb      	adds	r3, r7, r3
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	b25b      	sxtb	r3, r3
 8005312:	b29a      	uxth	r2, r3
 8005314:	1d3b      	adds	r3, r7, #4
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	18d3      	adds	r3, r2, r3
 800531a:	b29b      	uxth	r3, r3
 800531c:	b219      	sxth	r1, r3
 800531e:	193b      	adds	r3, r7, r4
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	001a      	movs	r2, r3
 8005324:	f7ff fa1c 	bl	8004760 <LCD_DrawPixel>
 8005328:	e02c      	b.n	8005384 <LCD_DrawChar+0x20c>
					} else {  // big size
						LCD_FillRect(x + i * size, y + j * size, size, size,
 800532a:	230f      	movs	r3, #15
 800532c:	18fb      	adds	r3, r7, r3
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	b25b      	sxtb	r3, r3
 8005332:	b29b      	uxth	r3, r3
 8005334:	2124      	movs	r1, #36	; 0x24
 8005336:	187a      	adds	r2, r7, r1
 8005338:	7812      	ldrb	r2, [r2, #0]
 800533a:	b292      	uxth	r2, r2
 800533c:	4353      	muls	r3, r2
 800533e:	b29a      	uxth	r2, r3
 8005340:	1dbb      	adds	r3, r7, #6
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	18d3      	adds	r3, r2, r3
 8005346:	b29b      	uxth	r3, r3
 8005348:	b218      	sxth	r0, r3
 800534a:	230d      	movs	r3, #13
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	b25b      	sxtb	r3, r3
 8005352:	b29b      	uxth	r3, r3
 8005354:	000c      	movs	r4, r1
 8005356:	187a      	adds	r2, r7, r1
 8005358:	7812      	ldrb	r2, [r2, #0]
 800535a:	b292      	uxth	r2, r2
 800535c:	4353      	muls	r3, r2
 800535e:	b29a      	uxth	r2, r3
 8005360:	1d3b      	adds	r3, r7, #4
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	18d3      	adds	r3, r2, r3
 8005366:	b29b      	uxth	r3, r3
 8005368:	b219      	sxth	r1, r3
 800536a:	193b      	adds	r3, r7, r4
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	b21a      	sxth	r2, r3
 8005370:	193b      	adds	r3, r7, r4
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	b21c      	sxth	r4, r3
 8005376:	2320      	movs	r3, #32
 8005378:	18fb      	adds	r3, r7, r3
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	0023      	movs	r3, r4
 8005380:	f000 f9b4 	bl	80056ec <LCD_FillRect>
								bg);
					}
				}
				line >>= 1;
 8005384:	220e      	movs	r2, #14
 8005386:	18bb      	adds	r3, r7, r2
 8005388:	18ba      	adds	r2, r7, r2
 800538a:	7812      	ldrb	r2, [r2, #0]
 800538c:	0852      	lsrs	r2, r2, #1
 800538e:	701a      	strb	r2, [r3, #0]
			for (int8_t j = 0; j < 8; j++) {
 8005390:	210d      	movs	r1, #13
 8005392:	187b      	adds	r3, r7, r1
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	b25b      	sxtb	r3, r3
 8005398:	b2db      	uxtb	r3, r3
 800539a:	3301      	adds	r3, #1
 800539c:	b2da      	uxtb	r2, r3
 800539e:	187b      	adds	r3, r7, r1
 80053a0:	701a      	strb	r2, [r3, #0]
 80053a2:	230d      	movs	r3, #13
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	b25b      	sxtb	r3, r3
 80053aa:	2b07      	cmp	r3, #7
 80053ac:	dc00      	bgt.n	80053b0 <LCD_DrawChar+0x238>
 80053ae:	e744      	b.n	800523a <LCD_DrawChar+0xc2>
	for (int8_t i = 0; i < 6; i++) {
 80053b0:	210f      	movs	r1, #15
 80053b2:	187b      	adds	r3, r7, r1
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	b25b      	sxtb	r3, r3
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	3301      	adds	r3, #1
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	187b      	adds	r3, r7, r1
 80053c0:	701a      	strb	r2, [r3, #0]
 80053c2:	230f      	movs	r3, #15
 80053c4:	18fb      	adds	r3, r7, r3
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	b25b      	sxtb	r3, r3
 80053ca:	2b05      	cmp	r3, #5
 80053cc:	dc00      	bgt.n	80053d0 <LCD_DrawChar+0x258>
 80053ce:	e715      	b.n	80051fc <LCD_DrawChar+0x84>
 80053d0:	e000      	b.n	80053d4 <LCD_DrawChar+0x25c>
		return;
 80053d2:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
}
 80053d4:	46bd      	mov	sp, r7
 80053d6:	b004      	add	sp, #16
 80053d8:	bdb0      	pop	{r4, r5, r7, pc}
 80053da:	46c0      	nop			; (mov r8, r8)
 80053dc:	200007d2 	.word	0x200007d2
 80053e0:	200007d4 	.word	0x200007d4
 80053e4:	0800a9a4 	.word	0x0800a9a4

080053e8 <LCD_FillCircleHelper>:
 * \param color			Color
 * 
 * \return void
 */
void LCD_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername,
		int16_t delta, uint16_t color) {
 80053e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ea:	b089      	sub	sp, #36	; 0x24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	0005      	movs	r5, r0
 80053f0:	000c      	movs	r4, r1
 80053f2:	0010      	movs	r0, r2
 80053f4:	0019      	movs	r1, r3
 80053f6:	230e      	movs	r3, #14
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	1c2a      	adds	r2, r5, #0
 80053fc:	801a      	strh	r2, [r3, #0]
 80053fe:	230c      	movs	r3, #12
 8005400:	18fb      	adds	r3, r7, r3
 8005402:	1c22      	adds	r2, r4, #0
 8005404:	801a      	strh	r2, [r3, #0]
 8005406:	230a      	movs	r3, #10
 8005408:	18fb      	adds	r3, r7, r3
 800540a:	1c02      	adds	r2, r0, #0
 800540c:	801a      	strh	r2, [r3, #0]
 800540e:	2309      	movs	r3, #9
 8005410:	18fb      	adds	r3, r7, r3
 8005412:	1c0a      	adds	r2, r1, #0
 8005414:	701a      	strb	r2, [r3, #0]
	int16_t f = 1 - r;
 8005416:	230a      	movs	r3, #10
 8005418:	18fb      	adds	r3, r7, r3
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	2201      	movs	r2, #1
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	b29a      	uxth	r2, r3
 8005422:	2316      	movs	r3, #22
 8005424:	2108      	movs	r1, #8
 8005426:	185b      	adds	r3, r3, r1
 8005428:	19db      	adds	r3, r3, r7
 800542a:	801a      	strh	r2, [r3, #0]
	int16_t ddF_x = 1;
 800542c:	2314      	movs	r3, #20
 800542e:	2208      	movs	r2, #8
 8005430:	189b      	adds	r3, r3, r2
 8005432:	19db      	adds	r3, r3, r7
 8005434:	2201      	movs	r2, #1
 8005436:	801a      	strh	r2, [r3, #0]
	int16_t ddF_y = -2 * r;
 8005438:	230a      	movs	r3, #10
 800543a:	18fb      	adds	r3, r7, r3
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	1c1a      	adds	r2, r3, #0
 8005440:	03d2      	lsls	r2, r2, #15
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	18db      	adds	r3, r3, r3
 8005446:	b29a      	uxth	r2, r3
 8005448:	2312      	movs	r3, #18
 800544a:	2108      	movs	r1, #8
 800544c:	185b      	adds	r3, r3, r1
 800544e:	19db      	adds	r3, r3, r7
 8005450:	801a      	strh	r2, [r3, #0]
	int16_t x = 0;
 8005452:	2310      	movs	r3, #16
 8005454:	2208      	movs	r2, #8
 8005456:	189b      	adds	r3, r3, r2
 8005458:	19db      	adds	r3, r3, r7
 800545a:	2200      	movs	r2, #0
 800545c:	801a      	strh	r2, [r3, #0]
	int16_t y = r;
 800545e:	230e      	movs	r3, #14
 8005460:	2208      	movs	r2, #8
 8005462:	189b      	adds	r3, r3, r2
 8005464:	19db      	adds	r3, r3, r7
 8005466:	220a      	movs	r2, #10
 8005468:	18ba      	adds	r2, r7, r2
 800546a:	8812      	ldrh	r2, [r2, #0]
 800546c:	801a      	strh	r2, [r3, #0]

	while (x < y) {
 800546e:	e129      	b.n	80056c4 <LCD_FillCircleHelper+0x2dc>
		if (f >= 0) {
 8005470:	2116      	movs	r1, #22
 8005472:	2308      	movs	r3, #8
 8005474:	18cb      	adds	r3, r1, r3
 8005476:	19db      	adds	r3, r3, r7
 8005478:	2200      	movs	r2, #0
 800547a:	5e9b      	ldrsh	r3, [r3, r2]
 800547c:	2b00      	cmp	r3, #0
 800547e:	db25      	blt.n	80054cc <LCD_FillCircleHelper+0xe4>
			y--;
 8005480:	200e      	movs	r0, #14
 8005482:	2308      	movs	r3, #8
 8005484:	18c3      	adds	r3, r0, r3
 8005486:	19db      	adds	r3, r3, r7
 8005488:	2200      	movs	r2, #0
 800548a:	5e9b      	ldrsh	r3, [r3, r2]
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	2308      	movs	r3, #8
 8005494:	18c3      	adds	r3, r0, r3
 8005496:	19db      	adds	r3, r3, r7
 8005498:	801a      	strh	r2, [r3, #0]
			ddF_y += 2;
 800549a:	2012      	movs	r0, #18
 800549c:	2308      	movs	r3, #8
 800549e:	18c3      	adds	r3, r0, r3
 80054a0:	19db      	adds	r3, r3, r7
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	3302      	adds	r3, #2
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	2308      	movs	r3, #8
 80054aa:	18c3      	adds	r3, r0, r3
 80054ac:	19db      	adds	r3, r3, r7
 80054ae:	801a      	strh	r2, [r3, #0]
			f += ddF_y;
 80054b0:	2308      	movs	r3, #8
 80054b2:	18cb      	adds	r3, r1, r3
 80054b4:	19db      	adds	r3, r3, r7
 80054b6:	881a      	ldrh	r2, [r3, #0]
 80054b8:	2308      	movs	r3, #8
 80054ba:	18c3      	adds	r3, r0, r3
 80054bc:	19db      	adds	r3, r3, r7
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	18d3      	adds	r3, r2, r3
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	2308      	movs	r3, #8
 80054c6:	18cb      	adds	r3, r1, r3
 80054c8:	19db      	adds	r3, r3, r7
 80054ca:	801a      	strh	r2, [r3, #0]
		}
		x++;
 80054cc:	2410      	movs	r4, #16
 80054ce:	2308      	movs	r3, #8
 80054d0:	18e3      	adds	r3, r4, r3
 80054d2:	19db      	adds	r3, r3, r7
 80054d4:	2200      	movs	r2, #0
 80054d6:	5e9b      	ldrsh	r3, [r3, r2]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3301      	adds	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	2308      	movs	r3, #8
 80054e0:	18e3      	adds	r3, r4, r3
 80054e2:	19db      	adds	r3, r3, r7
 80054e4:	801a      	strh	r2, [r3, #0]
		ddF_x += 2;
 80054e6:	2114      	movs	r1, #20
 80054e8:	2308      	movs	r3, #8
 80054ea:	18cb      	adds	r3, r1, r3
 80054ec:	19db      	adds	r3, r3, r7
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	3302      	adds	r3, #2
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	2308      	movs	r3, #8
 80054f6:	18cb      	adds	r3, r1, r3
 80054f8:	19db      	adds	r3, r3, r7
 80054fa:	801a      	strh	r2, [r3, #0]
		f += ddF_x;
 80054fc:	2016      	movs	r0, #22
 80054fe:	2308      	movs	r3, #8
 8005500:	18c3      	adds	r3, r0, r3
 8005502:	19db      	adds	r3, r3, r7
 8005504:	881a      	ldrh	r2, [r3, #0]
 8005506:	2308      	movs	r3, #8
 8005508:	18cb      	adds	r3, r1, r3
 800550a:	19db      	adds	r3, r3, r7
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	18d3      	adds	r3, r2, r3
 8005510:	b29a      	uxth	r2, r3
 8005512:	2308      	movs	r3, #8
 8005514:	18c3      	adds	r3, r0, r3
 8005516:	19db      	adds	r3, r3, r7
 8005518:	801a      	strh	r2, [r3, #0]

		if (cornername & 0x1) {
 800551a:	2309      	movs	r3, #9
 800551c:	18fb      	adds	r3, r7, r3
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2201      	movs	r2, #1
 8005522:	4013      	ands	r3, r2
 8005524:	d063      	beq.n	80055ee <LCD_FillCircleHelper+0x206>
			LCD_DrawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color);
 8005526:	230e      	movs	r3, #14
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	881a      	ldrh	r2, [r3, #0]
 800552c:	607c      	str	r4, [r7, #4]
 800552e:	2308      	movs	r3, #8
 8005530:	18e3      	adds	r3, r4, r3
 8005532:	19db      	adds	r3, r3, r7
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	18d3      	adds	r3, r2, r3
 8005538:	b29b      	uxth	r3, r3
 800553a:	b218      	sxth	r0, r3
 800553c:	230c      	movs	r3, #12
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	881a      	ldrh	r2, [r3, #0]
 8005542:	250e      	movs	r5, #14
 8005544:	2308      	movs	r3, #8
 8005546:	18eb      	adds	r3, r5, r3
 8005548:	19db      	adds	r3, r3, r7
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	b29b      	uxth	r3, r3
 8005550:	b219      	sxth	r1, r3
 8005552:	2308      	movs	r3, #8
 8005554:	18eb      	adds	r3, r5, r3
 8005556:	19db      	adds	r3, r3, r7
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	18db      	adds	r3, r3, r3
 800555c:	b29a      	uxth	r2, r3
 800555e:	2628      	movs	r6, #40	; 0x28
 8005560:	2408      	movs	r4, #8
 8005562:	1933      	adds	r3, r6, r4
 8005564:	603b      	str	r3, [r7, #0]
 8005566:	2308      	movs	r3, #8
 8005568:	469c      	mov	ip, r3
 800556a:	44bc      	add	ip, r7
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	4463      	add	r3, ip
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	18d3      	adds	r3, r2, r3
 8005574:	b29b      	uxth	r3, r3
 8005576:	3301      	adds	r3, #1
 8005578:	b29b      	uxth	r3, r3
 800557a:	b21a      	sxth	r2, r3
 800557c:	232c      	movs	r3, #44	; 0x2c
 800557e:	191b      	adds	r3, r3, r4
 8005580:	2408      	movs	r4, #8
 8005582:	46a4      	mov	ip, r4
 8005584:	44bc      	add	ip, r7
 8005586:	4463      	add	r3, ip
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	f7ff fb07 	bl	8004b9c <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color);
 800558e:	230e      	movs	r3, #14
 8005590:	18fb      	adds	r3, r7, r3
 8005592:	881a      	ldrh	r2, [r3, #0]
 8005594:	2308      	movs	r3, #8
 8005596:	18eb      	adds	r3, r5, r3
 8005598:	19db      	adds	r3, r3, r7
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	18d3      	adds	r3, r2, r3
 800559e:	b29b      	uxth	r3, r3
 80055a0:	b218      	sxth	r0, r3
 80055a2:	230c      	movs	r3, #12
 80055a4:	18fb      	adds	r3, r7, r3
 80055a6:	881a      	ldrh	r2, [r3, #0]
 80055a8:	687c      	ldr	r4, [r7, #4]
 80055aa:	2308      	movs	r3, #8
 80055ac:	18e3      	adds	r3, r4, r3
 80055ae:	19db      	adds	r3, r3, r7
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	b219      	sxth	r1, r3
 80055b8:	2308      	movs	r3, #8
 80055ba:	18e3      	adds	r3, r4, r3
 80055bc:	19db      	adds	r3, r3, r7
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	18db      	adds	r3, r3, r3
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	2408      	movs	r4, #8
 80055c6:	1933      	adds	r3, r6, r4
 80055c8:	2508      	movs	r5, #8
 80055ca:	46ac      	mov	ip, r5
 80055cc:	44bc      	add	ip, r7
 80055ce:	4463      	add	r3, ip
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	18d3      	adds	r3, r2, r3
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3301      	adds	r3, #1
 80055d8:	b29b      	uxth	r3, r3
 80055da:	b21a      	sxth	r2, r3
 80055dc:	232c      	movs	r3, #44	; 0x2c
 80055de:	191b      	adds	r3, r3, r4
 80055e0:	2408      	movs	r4, #8
 80055e2:	46a4      	mov	ip, r4
 80055e4:	44bc      	add	ip, r7
 80055e6:	4463      	add	r3, ip
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	f7ff fad7 	bl	8004b9c <LCD_DrawFastVLine>
		}
		if (cornername & 0x2) {
 80055ee:	2309      	movs	r3, #9
 80055f0:	18fb      	adds	r3, r7, r3
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2202      	movs	r2, #2
 80055f6:	4013      	ands	r3, r2
 80055f8:	d064      	beq.n	80056c4 <LCD_FillCircleHelper+0x2dc>
			LCD_DrawFastVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color);
 80055fa:	230e      	movs	r3, #14
 80055fc:	18fb      	adds	r3, r7, r3
 80055fe:	881a      	ldrh	r2, [r3, #0]
 8005600:	2410      	movs	r4, #16
 8005602:	607c      	str	r4, [r7, #4]
 8005604:	2308      	movs	r3, #8
 8005606:	18e3      	adds	r3, r4, r3
 8005608:	19db      	adds	r3, r3, r7
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	b29b      	uxth	r3, r3
 8005610:	b218      	sxth	r0, r3
 8005612:	230c      	movs	r3, #12
 8005614:	18fb      	adds	r3, r7, r3
 8005616:	881a      	ldrh	r2, [r3, #0]
 8005618:	250e      	movs	r5, #14
 800561a:	2308      	movs	r3, #8
 800561c:	18eb      	adds	r3, r5, r3
 800561e:	19db      	adds	r3, r3, r7
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	b29b      	uxth	r3, r3
 8005626:	b219      	sxth	r1, r3
 8005628:	2308      	movs	r3, #8
 800562a:	18eb      	adds	r3, r5, r3
 800562c:	19db      	adds	r3, r3, r7
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	18db      	adds	r3, r3, r3
 8005632:	b29a      	uxth	r2, r3
 8005634:	2628      	movs	r6, #40	; 0x28
 8005636:	2408      	movs	r4, #8
 8005638:	1933      	adds	r3, r6, r4
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	2308      	movs	r3, #8
 800563e:	469c      	mov	ip, r3
 8005640:	44bc      	add	ip, r7
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	4463      	add	r3, ip
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	18d3      	adds	r3, r2, r3
 800564a:	b29b      	uxth	r3, r3
 800564c:	3301      	adds	r3, #1
 800564e:	b29b      	uxth	r3, r3
 8005650:	b21a      	sxth	r2, r3
 8005652:	232c      	movs	r3, #44	; 0x2c
 8005654:	191b      	adds	r3, r3, r4
 8005656:	2408      	movs	r4, #8
 8005658:	46a4      	mov	ip, r4
 800565a:	44bc      	add	ip, r7
 800565c:	4463      	add	r3, ip
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	f7ff fa9c 	bl	8004b9c <LCD_DrawFastVLine>
			LCD_DrawFastVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color);
 8005664:	230e      	movs	r3, #14
 8005666:	18fb      	adds	r3, r7, r3
 8005668:	881a      	ldrh	r2, [r3, #0]
 800566a:	2308      	movs	r3, #8
 800566c:	18eb      	adds	r3, r5, r3
 800566e:	19db      	adds	r3, r3, r7
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	b29b      	uxth	r3, r3
 8005676:	b218      	sxth	r0, r3
 8005678:	230c      	movs	r3, #12
 800567a:	18fb      	adds	r3, r7, r3
 800567c:	881a      	ldrh	r2, [r3, #0]
 800567e:	687c      	ldr	r4, [r7, #4]
 8005680:	2308      	movs	r3, #8
 8005682:	18e3      	adds	r3, r4, r3
 8005684:	19db      	adds	r3, r3, r7
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	b29b      	uxth	r3, r3
 800568c:	b219      	sxth	r1, r3
 800568e:	2308      	movs	r3, #8
 8005690:	18e3      	adds	r3, r4, r3
 8005692:	19db      	adds	r3, r3, r7
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	18db      	adds	r3, r3, r3
 8005698:	b29a      	uxth	r2, r3
 800569a:	2408      	movs	r4, #8
 800569c:	1933      	adds	r3, r6, r4
 800569e:	2508      	movs	r5, #8
 80056a0:	46ac      	mov	ip, r5
 80056a2:	44bc      	add	ip, r7
 80056a4:	4463      	add	r3, ip
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	18d3      	adds	r3, r2, r3
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	3301      	adds	r3, #1
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	b21a      	sxth	r2, r3
 80056b2:	232c      	movs	r3, #44	; 0x2c
 80056b4:	191b      	adds	r3, r3, r4
 80056b6:	2408      	movs	r4, #8
 80056b8:	46a4      	mov	ip, r4
 80056ba:	44bc      	add	ip, r7
 80056bc:	4463      	add	r3, ip
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	f7ff fa6c 	bl	8004b9c <LCD_DrawFastVLine>
	while (x < y) {
 80056c4:	2310      	movs	r3, #16
 80056c6:	2208      	movs	r2, #8
 80056c8:	189b      	adds	r3, r3, r2
 80056ca:	19da      	adds	r2, r3, r7
 80056cc:	230e      	movs	r3, #14
 80056ce:	2108      	movs	r1, #8
 80056d0:	185b      	adds	r3, r3, r1
 80056d2:	19db      	adds	r3, r3, r7
 80056d4:	2100      	movs	r1, #0
 80056d6:	5e52      	ldrsh	r2, [r2, r1]
 80056d8:	2100      	movs	r1, #0
 80056da:	5e5b      	ldrsh	r3, [r3, r1]
 80056dc:	429a      	cmp	r2, r3
 80056de:	da00      	bge.n	80056e2 <LCD_FillCircleHelper+0x2fa>
 80056e0:	e6c6      	b.n	8005470 <LCD_FillCircleHelper+0x88>
		}
	}
}
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	46c0      	nop			; (mov r8, r8)
 80056e6:	46bd      	mov	sp, r7
 80056e8:	b009      	add	sp, #36	; 0x24
 80056ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056ec <LCD_FillRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRect(int16_t x, int16_t y1, int16_t w, int16_t h,
		uint16_t fillcolor) {
 80056ec:	b5b0      	push	{r4, r5, r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	0005      	movs	r5, r0
 80056f4:	000c      	movs	r4, r1
 80056f6:	0010      	movs	r0, r2
 80056f8:	0019      	movs	r1, r3
 80056fa:	1dbb      	adds	r3, r7, #6
 80056fc:	1c2a      	adds	r2, r5, #0
 80056fe:	801a      	strh	r2, [r3, #0]
 8005700:	1d3b      	adds	r3, r7, #4
 8005702:	1c22      	adds	r2, r4, #0
 8005704:	801a      	strh	r2, [r3, #0]
 8005706:	1cbb      	adds	r3, r7, #2
 8005708:	1c02      	adds	r2, r0, #0
 800570a:	801a      	strh	r2, [r3, #0]
 800570c:	003b      	movs	r3, r7
 800570e:	1c0a      	adds	r2, r1, #0
 8005710:	801a      	strh	r2, [r3, #0]
	int16_t x2, y2;

	// Initial off-screen clipping
	if ((w <= 0) || (h <= 0) || (x >= m_width) || (y1 >= m_height)
 8005712:	1cbb      	adds	r3, r7, #2
 8005714:	2200      	movs	r2, #0
 8005716:	5e9b      	ldrsh	r3, [r3, r2]
 8005718:	2b00      	cmp	r3, #0
 800571a:	dc00      	bgt.n	800571e <LCD_FillRect+0x32>
 800571c:	e0ba      	b.n	8005894 <LCD_FillRect+0x1a8>
 800571e:	003b      	movs	r3, r7
 8005720:	2200      	movs	r2, #0
 8005722:	5e9b      	ldrsh	r3, [r3, r2]
 8005724:	2b00      	cmp	r3, #0
 8005726:	dc00      	bgt.n	800572a <LCD_FillRect+0x3e>
 8005728:	e0b4      	b.n	8005894 <LCD_FillRect+0x1a8>
 800572a:	4b5c      	ldr	r3, [pc, #368]	; (800589c <LCD_FillRect+0x1b0>)
 800572c:	2200      	movs	r2, #0
 800572e:	5e9b      	ldrsh	r3, [r3, r2]
 8005730:	1dba      	adds	r2, r7, #6
 8005732:	2100      	movs	r1, #0
 8005734:	5e52      	ldrsh	r2, [r2, r1]
 8005736:	429a      	cmp	r2, r3
 8005738:	db00      	blt.n	800573c <LCD_FillRect+0x50>
 800573a:	e0ab      	b.n	8005894 <LCD_FillRect+0x1a8>
 800573c:	4b58      	ldr	r3, [pc, #352]	; (80058a0 <LCD_FillRect+0x1b4>)
 800573e:	2200      	movs	r2, #0
 8005740:	5e9b      	ldrsh	r3, [r3, r2]
 8005742:	1d3a      	adds	r2, r7, #4
 8005744:	2100      	movs	r1, #0
 8005746:	5e52      	ldrsh	r2, [r2, r1]
 8005748:	429a      	cmp	r2, r3
 800574a:	db00      	blt.n	800574e <LCD_FillRect+0x62>
 800574c:	e0a2      	b.n	8005894 <LCD_FillRect+0x1a8>
			|| ((x2 = x + w - 1) < 0) || ((y2 = y1 + h - 1) < 0))
 800574e:	1dbb      	adds	r3, r7, #6
 8005750:	881a      	ldrh	r2, [r3, #0]
 8005752:	1cbb      	adds	r3, r7, #2
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	18d3      	adds	r3, r2, r3
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	210e      	movs	r1, #14
 8005760:	187b      	adds	r3, r7, r1
 8005762:	801a      	strh	r2, [r3, #0]
 8005764:	187b      	adds	r3, r7, r1
 8005766:	2200      	movs	r2, #0
 8005768:	5e9b      	ldrsh	r3, [r3, r2]
 800576a:	2b00      	cmp	r3, #0
 800576c:	da00      	bge.n	8005770 <LCD_FillRect+0x84>
 800576e:	e091      	b.n	8005894 <LCD_FillRect+0x1a8>
 8005770:	1d3b      	adds	r3, r7, #4
 8005772:	881a      	ldrh	r2, [r3, #0]
 8005774:	003b      	movs	r3, r7
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	18d3      	adds	r3, r2, r3
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	210c      	movs	r1, #12
 8005782:	187b      	adds	r3, r7, r1
 8005784:	801a      	strh	r2, [r3, #0]
 8005786:	187b      	adds	r3, r7, r1
 8005788:	2200      	movs	r2, #0
 800578a:	5e9b      	ldrsh	r3, [r3, r2]
 800578c:	2b00      	cmp	r3, #0
 800578e:	da00      	bge.n	8005792 <LCD_FillRect+0xa6>
 8005790:	e080      	b.n	8005894 <LCD_FillRect+0x1a8>
		return;
	if (x < 0) { // Clip left
 8005792:	1dbb      	adds	r3, r7, #6
 8005794:	2200      	movs	r2, #0
 8005796:	5e9b      	ldrsh	r3, [r3, r2]
 8005798:	2b00      	cmp	r3, #0
 800579a:	da0a      	bge.n	80057b2 <LCD_FillRect+0xc6>
		w += x;
 800579c:	1cbb      	adds	r3, r7, #2
 800579e:	881a      	ldrh	r2, [r3, #0]
 80057a0:	1dbb      	adds	r3, r7, #6
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	18d3      	adds	r3, r2, r3
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	1cbb      	adds	r3, r7, #2
 80057aa:	801a      	strh	r2, [r3, #0]
		x = 0;
 80057ac:	1dbb      	adds	r3, r7, #6
 80057ae:	2200      	movs	r2, #0
 80057b0:	801a      	strh	r2, [r3, #0]
	}
	if (y1 < 0) { // Clip top
 80057b2:	1d3b      	adds	r3, r7, #4
 80057b4:	2200      	movs	r2, #0
 80057b6:	5e9b      	ldrsh	r3, [r3, r2]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	da0a      	bge.n	80057d2 <LCD_FillRect+0xe6>
		h += y1;
 80057bc:	003b      	movs	r3, r7
 80057be:	881a      	ldrh	r2, [r3, #0]
 80057c0:	1d3b      	adds	r3, r7, #4
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	18d3      	adds	r3, r2, r3
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	003b      	movs	r3, r7
 80057ca:	801a      	strh	r2, [r3, #0]
		y1 = 0;
 80057cc:	1d3b      	adds	r3, r7, #4
 80057ce:	2200      	movs	r2, #0
 80057d0:	801a      	strh	r2, [r3, #0]
	}
	if (x2 >= m_width) { // Clip right
 80057d2:	4b32      	ldr	r3, [pc, #200]	; (800589c <LCD_FillRect+0x1b0>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	5e9b      	ldrsh	r3, [r3, r2]
 80057d8:	210e      	movs	r1, #14
 80057da:	187a      	adds	r2, r7, r1
 80057dc:	2000      	movs	r0, #0
 80057de:	5e12      	ldrsh	r2, [r2, r0]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	db11      	blt.n	8005808 <LCD_FillRect+0x11c>
		x2 = m_width - 1;
 80057e4:	4b2d      	ldr	r3, [pc, #180]	; (800589c <LCD_FillRect+0x1b0>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	5e9b      	ldrsh	r3, [r3, r2]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	187b      	adds	r3, r7, r1
 80057f2:	801a      	strh	r2, [r3, #0]
		w = x2 - x + 1;
 80057f4:	187b      	adds	r3, r7, r1
 80057f6:	881a      	ldrh	r2, [r3, #0]
 80057f8:	1dbb      	adds	r3, r7, #6
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3301      	adds	r3, #1
 8005802:	b29a      	uxth	r2, r3
 8005804:	1cbb      	adds	r3, r7, #2
 8005806:	801a      	strh	r2, [r3, #0]
	}
	if (y2 >= m_height) { // Clip bottom
 8005808:	4b25      	ldr	r3, [pc, #148]	; (80058a0 <LCD_FillRect+0x1b4>)
 800580a:	2200      	movs	r2, #0
 800580c:	5e9b      	ldrsh	r3, [r3, r2]
 800580e:	210c      	movs	r1, #12
 8005810:	187a      	adds	r2, r7, r1
 8005812:	2000      	movs	r0, #0
 8005814:	5e12      	ldrsh	r2, [r2, r0]
 8005816:	429a      	cmp	r2, r3
 8005818:	db11      	blt.n	800583e <LCD_FillRect+0x152>
		y2 = m_height - 1;
 800581a:	4b21      	ldr	r3, [pc, #132]	; (80058a0 <LCD_FillRect+0x1b4>)
 800581c:	2200      	movs	r2, #0
 800581e:	5e9b      	ldrsh	r3, [r3, r2]
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	187b      	adds	r3, r7, r1
 8005828:	801a      	strh	r2, [r3, #0]
		h = y2 - y1 + 1;
 800582a:	187b      	adds	r3, r7, r1
 800582c:	881a      	ldrh	r2, [r3, #0]
 800582e:	1d3b      	adds	r3, r7, #4
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	b29b      	uxth	r3, r3
 8005836:	3301      	adds	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	003b      	movs	r3, r7
 800583c:	801a      	strh	r2, [r3, #0]
	}

	LCD_SetAddrWindow(x, y1, x2, y2);
 800583e:	1dbb      	adds	r3, r7, #6
 8005840:	2000      	movs	r0, #0
 8005842:	5e18      	ldrsh	r0, [r3, r0]
 8005844:	1d3b      	adds	r3, r7, #4
 8005846:	2100      	movs	r1, #0
 8005848:	5e59      	ldrsh	r1, [r3, r1]
 800584a:	230e      	movs	r3, #14
 800584c:	18fb      	adds	r3, r7, r3
 800584e:	2200      	movs	r2, #0
 8005850:	5e9a      	ldrsh	r2, [r3, r2]
 8005852:	230c      	movs	r3, #12
 8005854:	18fb      	adds	r3, r7, r3
 8005856:	2400      	movs	r4, #0
 8005858:	5f1b      	ldrsh	r3, [r3, r4]
 800585a:	f000 fc29 	bl	80060b0 <LCD_SetAddrWindow>
	LCD_Flood(fillcolor, (uint32_t) w * (uint32_t) h);
 800585e:	1cbb      	adds	r3, r7, #2
 8005860:	2200      	movs	r2, #0
 8005862:	5e9b      	ldrsh	r3, [r3, r2]
 8005864:	003a      	movs	r2, r7
 8005866:	2100      	movs	r1, #0
 8005868:	5e52      	ldrsh	r2, [r2, r1]
 800586a:	435a      	muls	r2, r3
 800586c:	2320      	movs	r3, #32
 800586e:	18fb      	adds	r3, r7, r3
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	0011      	movs	r1, r2
 8005874:	0018      	movs	r0, r3
 8005876:	f000 f905 	bl	8005a84 <LCD_Flood>
	LCD_SetAddrWindow(0, 0, m_width - 1, m_height - 1);
 800587a:	4b08      	ldr	r3, [pc, #32]	; (800589c <LCD_FillRect+0x1b0>)
 800587c:	2200      	movs	r2, #0
 800587e:	5e9b      	ldrsh	r3, [r3, r2]
 8005880:	1e5a      	subs	r2, r3, #1
 8005882:	4b07      	ldr	r3, [pc, #28]	; (80058a0 <LCD_FillRect+0x1b4>)
 8005884:	2100      	movs	r1, #0
 8005886:	5e5b      	ldrsh	r3, [r3, r1]
 8005888:	3b01      	subs	r3, #1
 800588a:	2100      	movs	r1, #0
 800588c:	2000      	movs	r0, #0
 800588e:	f000 fc0f 	bl	80060b0 <LCD_SetAddrWindow>
 8005892:	e000      	b.n	8005896 <LCD_FillRect+0x1aa>
		return;
 8005894:	46c0      	nop			; (mov r8, r8)
}
 8005896:	46bd      	mov	sp, r7
 8005898:	b004      	add	sp, #16
 800589a:	bdb0      	pop	{r4, r5, r7, pc}
 800589c:	200007d2 	.word	0x200007d2
 80058a0:	200007d4 	.word	0x200007d4

080058a4 <LCD_FillRoundRect>:
 * \param fillcolor		Color
 * 
 * \return void
 */
void LCD_FillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r,
		uint16_t color) {
 80058a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af02      	add	r7, sp, #8
 80058aa:	0005      	movs	r5, r0
 80058ac:	000c      	movs	r4, r1
 80058ae:	0010      	movs	r0, r2
 80058b0:	0019      	movs	r1, r3
 80058b2:	1dbb      	adds	r3, r7, #6
 80058b4:	1c2a      	adds	r2, r5, #0
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	1d3b      	adds	r3, r7, #4
 80058ba:	1c22      	adds	r2, r4, #0
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	1cbb      	adds	r3, r7, #2
 80058c0:	1c02      	adds	r2, r0, #0
 80058c2:	801a      	strh	r2, [r3, #0]
 80058c4:	003b      	movs	r3, r7
 80058c6:	1c0a      	adds	r2, r1, #0
 80058c8:	801a      	strh	r2, [r3, #0]
	// smarter version
	LCD_FillRect(x + r, y, w - 2 * r, h, color);
 80058ca:	1dbb      	adds	r3, r7, #6
 80058cc:	881a      	ldrh	r2, [r3, #0]
 80058ce:	2518      	movs	r5, #24
 80058d0:	2408      	movs	r4, #8
 80058d2:	192b      	adds	r3, r5, r4
 80058d4:	19db      	adds	r3, r3, r7
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	18d3      	adds	r3, r2, r3
 80058da:	b29b      	uxth	r3, r3
 80058dc:	b218      	sxth	r0, r3
 80058de:	1cbb      	adds	r3, r7, #2
 80058e0:	881a      	ldrh	r2, [r3, #0]
 80058e2:	1929      	adds	r1, r5, r4
 80058e4:	19cb      	adds	r3, r1, r7
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	18db      	adds	r3, r3, r3
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	b21a      	sxth	r2, r3
 80058f2:	003b      	movs	r3, r7
 80058f4:	2400      	movs	r4, #0
 80058f6:	5f1c      	ldrsh	r4, [r3, r4]
 80058f8:	1d3b      	adds	r3, r7, #4
 80058fa:	2100      	movs	r1, #0
 80058fc:	5e59      	ldrsh	r1, [r3, r1]
 80058fe:	261c      	movs	r6, #28
 8005900:	2308      	movs	r3, #8
 8005902:	18f3      	adds	r3, r6, r3
 8005904:	19db      	adds	r3, r3, r7
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	0023      	movs	r3, r4
 800590c:	f7ff feee 	bl	80056ec <LCD_FillRect>

	// draw four corners
	LCD_FillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8005910:	1dbb      	adds	r3, r7, #6
 8005912:	881a      	ldrh	r2, [r3, #0]
 8005914:	1cbb      	adds	r3, r7, #2
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	18d3      	adds	r3, r2, r3
 800591a:	b29a      	uxth	r2, r3
 800591c:	2408      	movs	r4, #8
 800591e:	192b      	adds	r3, r5, r4
 8005920:	19db      	adds	r3, r3, r7
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29b      	uxth	r3, r3
 800592c:	b218      	sxth	r0, r3
 800592e:	1d3b      	adds	r3, r7, #4
 8005930:	881a      	ldrh	r2, [r3, #0]
 8005932:	192b      	adds	r3, r5, r4
 8005934:	19db      	adds	r3, r3, r7
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	18d3      	adds	r3, r2, r3
 800593a:	b29b      	uxth	r3, r3
 800593c:	b219      	sxth	r1, r3
 800593e:	003b      	movs	r3, r7
 8005940:	881a      	ldrh	r2, [r3, #0]
 8005942:	192b      	adds	r3, r5, r4
 8005944:	19db      	adds	r3, r3, r7
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	18db      	adds	r3, r3, r3
 800594a:	b29b      	uxth	r3, r3
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29b      	uxth	r3, r3
 8005954:	b21a      	sxth	r2, r3
 8005956:	192b      	adds	r3, r5, r4
 8005958:	19db      	adds	r3, r3, r7
 800595a:	2400      	movs	r4, #0
 800595c:	5f1c      	ldrsh	r4, [r3, r4]
 800595e:	2308      	movs	r3, #8
 8005960:	18f3      	adds	r3, r6, r3
 8005962:	19db      	adds	r3, r3, r7
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	9301      	str	r3, [sp, #4]
 8005968:	9200      	str	r2, [sp, #0]
 800596a:	2301      	movs	r3, #1
 800596c:	0022      	movs	r2, r4
 800596e:	f7ff fd3b 	bl	80053e8 <LCD_FillCircleHelper>
	LCD_FillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8005972:	1dbb      	adds	r3, r7, #6
 8005974:	881a      	ldrh	r2, [r3, #0]
 8005976:	002c      	movs	r4, r5
 8005978:	2508      	movs	r5, #8
 800597a:	1963      	adds	r3, r4, r5
 800597c:	19db      	adds	r3, r3, r7
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	18d3      	adds	r3, r2, r3
 8005982:	b29b      	uxth	r3, r3
 8005984:	b218      	sxth	r0, r3
 8005986:	1d3b      	adds	r3, r7, #4
 8005988:	881a      	ldrh	r2, [r3, #0]
 800598a:	1963      	adds	r3, r4, r5
 800598c:	19db      	adds	r3, r3, r7
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	18d3      	adds	r3, r2, r3
 8005992:	b29b      	uxth	r3, r3
 8005994:	b219      	sxth	r1, r3
 8005996:	003b      	movs	r3, r7
 8005998:	881a      	ldrh	r2, [r3, #0]
 800599a:	1963      	adds	r3, r4, r5
 800599c:	19db      	adds	r3, r3, r7
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	18db      	adds	r3, r3, r3
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	b21a      	sxth	r2, r3
 80059ae:	1963      	adds	r3, r4, r5
 80059b0:	19db      	adds	r3, r3, r7
 80059b2:	2400      	movs	r4, #0
 80059b4:	5f1c      	ldrsh	r4, [r3, r4]
 80059b6:	1973      	adds	r3, r6, r5
 80059b8:	19db      	adds	r3, r3, r7
 80059ba:	881b      	ldrh	r3, [r3, #0]
 80059bc:	9301      	str	r3, [sp, #4]
 80059be:	9200      	str	r2, [sp, #0]
 80059c0:	2302      	movs	r3, #2
 80059c2:	0022      	movs	r2, r4
 80059c4:	f7ff fd10 	bl	80053e8 <LCD_FillCircleHelper>
}
 80059c8:	46c0      	nop			; (mov r8, r8)
 80059ca:	46bd      	mov	sp, r7
 80059cc:	b003      	add	sp, #12
 80059ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059d0 <LCD_FillScreen>:
 * 
 * \param color	Color
 * 
 * \return void
 */
void LCD_FillScreen(uint16_t color) {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	0002      	movs	r2, r0
 80059d8:	1dbb      	adds	r3, r7, #6
 80059da:	801a      	strh	r2, [r3, #0]
	// state, just need to set the address pointer to the top-left corner.
	// Although we could fill in any direction, the code uses the current
	// screen rotation because some users find it disconcerting when a
	// fill does not occur top-to-bottom.
	uint16_t x, y;
	switch (m_rotation) {
 80059dc:	4b27      	ldr	r3, [pc, #156]	; (8005a7c <LCD_FillScreen+0xac>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d020      	beq.n	8005a26 <LCD_FillScreen+0x56>
 80059e4:	dc03      	bgt.n	80059ee <LCD_FillScreen+0x1e>
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d00a      	beq.n	8005a00 <LCD_FillScreen+0x30>
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d011      	beq.n	8005a12 <LCD_FillScreen+0x42>
	default:
		x = 0;
 80059ee:	230e      	movs	r3, #14
 80059f0:	18fb      	adds	r3, r7, r3
 80059f2:	2200      	movs	r2, #0
 80059f4:	801a      	strh	r2, [r3, #0]
		y = 0;
 80059f6:	230c      	movs	r3, #12
 80059f8:	18fb      	adds	r3, r7, r3
 80059fa:	2200      	movs	r2, #0
 80059fc:	801a      	strh	r2, [r3, #0]
		break;
 80059fe:	e01c      	b.n	8005a3a <LCD_FillScreen+0x6a>
	case 1:
		x = TFTWIDTH - 1;
 8005a00:	230e      	movs	r3, #14
 8005a02:	18fb      	adds	r3, r7, r3
 8005a04:	22ef      	movs	r2, #239	; 0xef
 8005a06:	801a      	strh	r2, [r3, #0]
		y = 0;
 8005a08:	230c      	movs	r3, #12
 8005a0a:	18fb      	adds	r3, r7, r3
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	801a      	strh	r2, [r3, #0]
		break;
 8005a10:	e013      	b.n	8005a3a <LCD_FillScreen+0x6a>
	case 2:
		x = TFTWIDTH - 1;
 8005a12:	230e      	movs	r3, #14
 8005a14:	18fb      	adds	r3, r7, r3
 8005a16:	22ef      	movs	r2, #239	; 0xef
 8005a18:	801a      	strh	r2, [r3, #0]
		y = TFTHEIGHT - 1;
 8005a1a:	230c      	movs	r3, #12
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	2240      	movs	r2, #64	; 0x40
 8005a20:	32ff      	adds	r2, #255	; 0xff
 8005a22:	801a      	strh	r2, [r3, #0]
		break;
 8005a24:	e009      	b.n	8005a3a <LCD_FillScreen+0x6a>
	case 3:
		x = 0;
 8005a26:	230e      	movs	r3, #14
 8005a28:	18fb      	adds	r3, r7, r3
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	801a      	strh	r2, [r3, #0]
		y = TFTHEIGHT - 1;
 8005a2e:	230c      	movs	r3, #12
 8005a30:	18fb      	adds	r3, r7, r3
 8005a32:	2240      	movs	r2, #64	; 0x40
 8005a34:	32ff      	adds	r2, #255	; 0xff
 8005a36:	801a      	strh	r2, [r3, #0]
		break;
 8005a38:	46c0      	nop			; (mov r8, r8)
	}
	LCD_CS_LOW();
 8005a3a:	4b11      	ldr	r3, [pc, #68]	; (8005a80 <LCD_FillScreen+0xb0>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2100      	movs	r1, #0
 8005a40:	0018      	movs	r0, r3
 8005a42:	f7fd fe7b 	bl	800373c <gpio_write>
	LCD_WriteRegister16(0x0020, x);
 8005a46:	230e      	movs	r3, #14
 8005a48:	18fb      	adds	r3, r7, r3
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	0019      	movs	r1, r3
 8005a4e:	2020      	movs	r0, #32
 8005a50:	f000 fc38 	bl	80062c4 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 8005a54:	230c      	movs	r3, #12
 8005a56:	18fb      	adds	r3, r7, r3
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	0019      	movs	r1, r3
 8005a5c:	2021      	movs	r0, #33	; 0x21
 8005a5e:	f000 fc31 	bl	80062c4 <LCD_WriteRegister16>

	LCD_Flood(color, (long) TFTWIDTH * (long) TFTHEIGHT);
 8005a62:	2396      	movs	r3, #150	; 0x96
 8005a64:	025a      	lsls	r2, r3, #9
 8005a66:	1dbb      	adds	r3, r7, #6
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	0011      	movs	r1, r2
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f000 f809 	bl	8005a84 <LCD_Flood>
}
 8005a72:	46c0      	nop			; (mov r8, r8)
 8005a74:	46bd      	mov	sp, r7
 8005a76:	b004      	add	sp, #16
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	200007df 	.word	0x200007df
 8005a80:	48000400 	.word	0x48000400

08005a84 <LCD_Flood>:
 * \param color	Color
 * \param len	Length
 * 
 * \return void
 */
void LCD_Flood(uint16_t color, uint32_t len) {
 8005a84:	b5b0      	push	{r4, r5, r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	0002      	movs	r2, r0
 8005a8c:	6039      	str	r1, [r7, #0]
 8005a8e:	1dbb      	adds	r3, r7, #6
 8005a90:	801a      	strh	r2, [r3, #0]
	uint16_t blocks;
	uint8_t i, hi = color >> 8, lo = color;
 8005a92:	1dbb      	adds	r3, r7, #6
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	0a1b      	lsrs	r3, r3, #8
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	240c      	movs	r4, #12
 8005a9c:	193b      	adds	r3, r7, r4
 8005a9e:	701a      	strb	r2, [r3, #0]
 8005aa0:	250b      	movs	r5, #11
 8005aa2:	197b      	adds	r3, r7, r5
 8005aa4:	1dba      	adds	r2, r7, #6
 8005aa6:	8812      	ldrh	r2, [r2, #0]
 8005aa8:	701a      	strb	r2, [r3, #0]

	LCD_CS_LOW();
 8005aaa:	4bc5      	ldr	r3, [pc, #788]	; (8005dc0 <LCD_Flood+0x33c>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	2100      	movs	r1, #0
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f7fd fe43 	bl	800373c <gpio_write>
	LCD_CD_LOW();
 8005ab6:	2390      	movs	r3, #144	; 0x90
 8005ab8:	05db      	lsls	r3, r3, #23
 8005aba:	2200      	movs	r2, #0
 8005abc:	2104      	movs	r1, #4
 8005abe:	0018      	movs	r0, r3
 8005ac0:	f7fd fe3c 	bl	800373c <gpio_write>
	LCD_Write8(0x00); // High byte of GRAM register...
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	f000 fb83 	bl	80061d0 <LCD_Write8>
	LCD_Write8(0x22); // Write data to GRAM
 8005aca:	2022      	movs	r0, #34	; 0x22
 8005acc:	f000 fb80 	bl	80061d0 <LCD_Write8>

	// Write first pixel normally, decrement counter by 1
	LCD_CD_HIGH();
 8005ad0:	2390      	movs	r3, #144	; 0x90
 8005ad2:	05db      	lsls	r3, r3, #23
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	2104      	movs	r1, #4
 8005ad8:	0018      	movs	r0, r3
 8005ada:	f7fd fe2f 	bl	800373c <gpio_write>
	LCD_Write8(hi);
 8005ade:	193b      	adds	r3, r7, r4
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	f000 fb74 	bl	80061d0 <LCD_Write8>
	LCD_Write8(lo);
 8005ae8:	197b      	adds	r3, r7, r5
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	0018      	movs	r0, r3
 8005aee:	f000 fb6f 	bl	80061d0 <LCD_Write8>
	len--;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	603b      	str	r3, [r7, #0]

	blocks = (uint16_t) (len / 64); // 64 pixels/block
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	099a      	lsrs	r2, r3, #6
 8005afc:	230e      	movs	r3, #14
 8005afe:	18fb      	adds	r3, r7, r3
 8005b00:	801a      	strh	r2, [r3, #0]
	if (hi == lo) {
 8005b02:	193a      	adds	r2, r7, r4
 8005b04:	197b      	adds	r3, r7, r5
 8005b06:	7812      	ldrb	r2, [r2, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d000      	beq.n	8005b10 <LCD_Flood+0x8c>
 8005b0e:	e129      	b.n	8005d64 <LCD_Flood+0x2e0>
		// High and low bytes are identical.  Leave prior data
		// on the port(s) and just toggle the write strobe.
		while (blocks--) {
 8005b10:	e0ae      	b.n	8005c70 <LCD_Flood+0x1ec>
			i = 16; // 64 pixels/block / 4 pixels/pass
 8005b12:	230d      	movs	r3, #13
 8005b14:	18fb      	adds	r3, r7, r3
 8005b16:	2210      	movs	r2, #16
 8005b18:	701a      	strb	r2, [r3, #0]
			do {
				LCD_WR_STROBE();
 8005b1a:	2390      	movs	r3, #144	; 0x90
 8005b1c:	05db      	lsls	r3, r3, #23
 8005b1e:	2200      	movs	r2, #0
 8005b20:	2101      	movs	r1, #1
 8005b22:	0018      	movs	r0, r3
 8005b24:	f7fd fe0a 	bl	800373c <gpio_write>
 8005b28:	2001      	movs	r0, #1
 8005b2a:	f7fe fcc3 	bl	80044b4 <delay>
 8005b2e:	2390      	movs	r3, #144	; 0x90
 8005b30:	05db      	lsls	r3, r3, #23
 8005b32:	2201      	movs	r2, #1
 8005b34:	2101      	movs	r1, #1
 8005b36:	0018      	movs	r0, r3
 8005b38:	f7fd fe00 	bl	800373c <gpio_write>
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	f7fe fcb9 	bl	80044b4 <delay>
				LCD_WR_STROBE();
 8005b42:	2390      	movs	r3, #144	; 0x90
 8005b44:	05db      	lsls	r3, r3, #23
 8005b46:	2200      	movs	r2, #0
 8005b48:	2101      	movs	r1, #1
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	f7fd fdf6 	bl	800373c <gpio_write>
 8005b50:	2001      	movs	r0, #1
 8005b52:	f7fe fcaf 	bl	80044b4 <delay>
 8005b56:	2390      	movs	r3, #144	; 0x90
 8005b58:	05db      	lsls	r3, r3, #23
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f7fd fdec 	bl	800373c <gpio_write>
 8005b64:	2001      	movs	r0, #1
 8005b66:	f7fe fca5 	bl	80044b4 <delay>
				LCD_WR_STROBE();
 8005b6a:	2390      	movs	r3, #144	; 0x90
 8005b6c:	05db      	lsls	r3, r3, #23
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2101      	movs	r1, #1
 8005b72:	0018      	movs	r0, r3
 8005b74:	f7fd fde2 	bl	800373c <gpio_write>
 8005b78:	2001      	movs	r0, #1
 8005b7a:	f7fe fc9b 	bl	80044b4 <delay>
 8005b7e:	2390      	movs	r3, #144	; 0x90
 8005b80:	05db      	lsls	r3, r3, #23
 8005b82:	2201      	movs	r2, #1
 8005b84:	2101      	movs	r1, #1
 8005b86:	0018      	movs	r0, r3
 8005b88:	f7fd fdd8 	bl	800373c <gpio_write>
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	f7fe fc91 	bl	80044b4 <delay>
				LCD_WR_STROBE(); // 2 bytes/pixel
 8005b92:	2390      	movs	r3, #144	; 0x90
 8005b94:	05db      	lsls	r3, r3, #23
 8005b96:	2200      	movs	r2, #0
 8005b98:	2101      	movs	r1, #1
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	f7fd fdce 	bl	800373c <gpio_write>
 8005ba0:	2001      	movs	r0, #1
 8005ba2:	f7fe fc87 	bl	80044b4 <delay>
 8005ba6:	2390      	movs	r3, #144	; 0x90
 8005ba8:	05db      	lsls	r3, r3, #23
 8005baa:	2201      	movs	r2, #1
 8005bac:	2101      	movs	r1, #1
 8005bae:	0018      	movs	r0, r3
 8005bb0:	f7fd fdc4 	bl	800373c <gpio_write>
 8005bb4:	2001      	movs	r0, #1
 8005bb6:	f7fe fc7d 	bl	80044b4 <delay>
				LCD_WR_STROBE();
 8005bba:	2390      	movs	r3, #144	; 0x90
 8005bbc:	05db      	lsls	r3, r3, #23
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	f7fd fdba 	bl	800373c <gpio_write>
 8005bc8:	2001      	movs	r0, #1
 8005bca:	f7fe fc73 	bl	80044b4 <delay>
 8005bce:	2390      	movs	r3, #144	; 0x90
 8005bd0:	05db      	lsls	r3, r3, #23
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	f7fd fdb0 	bl	800373c <gpio_write>
 8005bdc:	2001      	movs	r0, #1
 8005bde:	f7fe fc69 	bl	80044b4 <delay>
				LCD_WR_STROBE();
 8005be2:	2390      	movs	r3, #144	; 0x90
 8005be4:	05db      	lsls	r3, r3, #23
 8005be6:	2200      	movs	r2, #0
 8005be8:	2101      	movs	r1, #1
 8005bea:	0018      	movs	r0, r3
 8005bec:	f7fd fda6 	bl	800373c <gpio_write>
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	f7fe fc5f 	bl	80044b4 <delay>
 8005bf6:	2390      	movs	r3, #144	; 0x90
 8005bf8:	05db      	lsls	r3, r3, #23
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f7fd fd9c 	bl	800373c <gpio_write>
 8005c04:	2001      	movs	r0, #1
 8005c06:	f7fe fc55 	bl	80044b4 <delay>
				LCD_WR_STROBE();
 8005c0a:	2390      	movs	r3, #144	; 0x90
 8005c0c:	05db      	lsls	r3, r3, #23
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2101      	movs	r1, #1
 8005c12:	0018      	movs	r0, r3
 8005c14:	f7fd fd92 	bl	800373c <gpio_write>
 8005c18:	2001      	movs	r0, #1
 8005c1a:	f7fe fc4b 	bl	80044b4 <delay>
 8005c1e:	2390      	movs	r3, #144	; 0x90
 8005c20:	05db      	lsls	r3, r3, #23
 8005c22:	2201      	movs	r2, #1
 8005c24:	2101      	movs	r1, #1
 8005c26:	0018      	movs	r0, r3
 8005c28:	f7fd fd88 	bl	800373c <gpio_write>
 8005c2c:	2001      	movs	r0, #1
 8005c2e:	f7fe fc41 	bl	80044b4 <delay>
				LCD_WR_STROBE(); // x 4 pixels
 8005c32:	2390      	movs	r3, #144	; 0x90
 8005c34:	05db      	lsls	r3, r3, #23
 8005c36:	2200      	movs	r2, #0
 8005c38:	2101      	movs	r1, #1
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	f7fd fd7e 	bl	800373c <gpio_write>
 8005c40:	2001      	movs	r0, #1
 8005c42:	f7fe fc37 	bl	80044b4 <delay>
 8005c46:	2390      	movs	r3, #144	; 0x90
 8005c48:	05db      	lsls	r3, r3, #23
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f7fd fd74 	bl	800373c <gpio_write>
 8005c54:	2001      	movs	r0, #1
 8005c56:	f7fe fc2d 	bl	80044b4 <delay>
			} while (--i);
 8005c5a:	210d      	movs	r1, #13
 8005c5c:	187b      	adds	r3, r7, r1
 8005c5e:	187a      	adds	r2, r7, r1
 8005c60:	7812      	ldrb	r2, [r2, #0]
 8005c62:	3a01      	subs	r2, #1
 8005c64:	701a      	strb	r2, [r3, #0]
 8005c66:	187b      	adds	r3, r7, r1
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d000      	beq.n	8005c70 <LCD_Flood+0x1ec>
 8005c6e:	e754      	b.n	8005b1a <LCD_Flood+0x96>
		while (blocks--) {
 8005c70:	220e      	movs	r2, #14
 8005c72:	18bb      	adds	r3, r7, r2
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	18ba      	adds	r2, r7, r2
 8005c78:	1e59      	subs	r1, r3, #1
 8005c7a:	8011      	strh	r1, [r2, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d000      	beq.n	8005c82 <LCD_Flood+0x1fe>
 8005c80:	e747      	b.n	8005b12 <LCD_Flood+0x8e>
		}
		// Fill any remaining pixels (1 to 64)
		for (i = (uint8_t) len & 63; i--;) {
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	230d      	movs	r3, #13
 8005c88:	18fb      	adds	r3, r7, r3
 8005c8a:	213f      	movs	r1, #63	; 0x3f
 8005c8c:	400a      	ands	r2, r1
 8005c8e:	701a      	strb	r2, [r3, #0]
 8005c90:	e027      	b.n	8005ce2 <LCD_Flood+0x25e>
			LCD_WR_STROBE();
 8005c92:	2390      	movs	r3, #144	; 0x90
 8005c94:	05db      	lsls	r3, r3, #23
 8005c96:	2200      	movs	r2, #0
 8005c98:	2101      	movs	r1, #1
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	f7fd fd4e 	bl	800373c <gpio_write>
 8005ca0:	2001      	movs	r0, #1
 8005ca2:	f7fe fc07 	bl	80044b4 <delay>
 8005ca6:	2390      	movs	r3, #144	; 0x90
 8005ca8:	05db      	lsls	r3, r3, #23
 8005caa:	2201      	movs	r2, #1
 8005cac:	2101      	movs	r1, #1
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f7fd fd44 	bl	800373c <gpio_write>
 8005cb4:	2001      	movs	r0, #1
 8005cb6:	f7fe fbfd 	bl	80044b4 <delay>
			LCD_WR_STROBE();
 8005cba:	2390      	movs	r3, #144	; 0x90
 8005cbc:	05db      	lsls	r3, r3, #23
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	f7fd fd3a 	bl	800373c <gpio_write>
 8005cc8:	2001      	movs	r0, #1
 8005cca:	f7fe fbf3 	bl	80044b4 <delay>
 8005cce:	2390      	movs	r3, #144	; 0x90
 8005cd0:	05db      	lsls	r3, r3, #23
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	f7fd fd30 	bl	800373c <gpio_write>
 8005cdc:	2001      	movs	r0, #1
 8005cde:	f7fe fbe9 	bl	80044b4 <delay>
		for (i = (uint8_t) len & 63; i--;) {
 8005ce2:	220d      	movs	r2, #13
 8005ce4:	18bb      	adds	r3, r7, r2
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	18ba      	adds	r2, r7, r2
 8005cea:	1e59      	subs	r1, r3, #1
 8005cec:	7011      	strb	r1, [r2, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1cf      	bne.n	8005c92 <LCD_Flood+0x20e>
 8005cf2:	e05b      	b.n	8005dac <LCD_Flood+0x328>
		}
	} else {
		while (blocks--) {
			i = 16; // 64 pixels/block / 4 pixels/pass
 8005cf4:	230d      	movs	r3, #13
 8005cf6:	18fb      	adds	r3, r7, r3
 8005cf8:	2210      	movs	r2, #16
 8005cfa:	701a      	strb	r2, [r3, #0]
			do {
				LCD_Write8(hi);
 8005cfc:	240c      	movs	r4, #12
 8005cfe:	193b      	adds	r3, r7, r4
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	0018      	movs	r0, r3
 8005d04:	f000 fa64 	bl	80061d0 <LCD_Write8>
				LCD_Write8(lo);
 8005d08:	250b      	movs	r5, #11
 8005d0a:	197b      	adds	r3, r7, r5
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	0018      	movs	r0, r3
 8005d10:	f000 fa5e 	bl	80061d0 <LCD_Write8>
				LCD_Write8(hi);
 8005d14:	193b      	adds	r3, r7, r4
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f000 fa59 	bl	80061d0 <LCD_Write8>
				LCD_Write8(lo);
 8005d1e:	197b      	adds	r3, r7, r5
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	0018      	movs	r0, r3
 8005d24:	f000 fa54 	bl	80061d0 <LCD_Write8>
				LCD_Write8(hi);
 8005d28:	193b      	adds	r3, r7, r4
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f000 fa4f 	bl	80061d0 <LCD_Write8>
				LCD_Write8(lo);
 8005d32:	197b      	adds	r3, r7, r5
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	0018      	movs	r0, r3
 8005d38:	f000 fa4a 	bl	80061d0 <LCD_Write8>
				LCD_Write8(hi);
 8005d3c:	193b      	adds	r3, r7, r4
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	0018      	movs	r0, r3
 8005d42:	f000 fa45 	bl	80061d0 <LCD_Write8>
				LCD_Write8(lo);
 8005d46:	197b      	adds	r3, r7, r5
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f000 fa40 	bl	80061d0 <LCD_Write8>
			} while (--i);
 8005d50:	210d      	movs	r1, #13
 8005d52:	187b      	adds	r3, r7, r1
 8005d54:	187a      	adds	r2, r7, r1
 8005d56:	7812      	ldrb	r2, [r2, #0]
 8005d58:	3a01      	subs	r2, #1
 8005d5a:	701a      	strb	r2, [r3, #0]
 8005d5c:	187b      	adds	r3, r7, r1
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1cb      	bne.n	8005cfc <LCD_Flood+0x278>
		while (blocks--) {
 8005d64:	220e      	movs	r2, #14
 8005d66:	18bb      	adds	r3, r7, r2
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	18ba      	adds	r2, r7, r2
 8005d6c:	1e59      	subs	r1, r3, #1
 8005d6e:	8011      	strh	r1, [r2, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1bf      	bne.n	8005cf4 <LCD_Flood+0x270>
		}
		for (i = (uint8_t) len & 63; i--;) {
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	230d      	movs	r3, #13
 8005d7a:	18fb      	adds	r3, r7, r3
 8005d7c:	213f      	movs	r1, #63	; 0x3f
 8005d7e:	400a      	ands	r2, r1
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	e00b      	b.n	8005d9c <LCD_Flood+0x318>
			LCD_Write8(hi);
 8005d84:	230c      	movs	r3, #12
 8005d86:	18fb      	adds	r3, r7, r3
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f000 fa20 	bl	80061d0 <LCD_Write8>
			LCD_Write8(lo);
 8005d90:	230b      	movs	r3, #11
 8005d92:	18fb      	adds	r3, r7, r3
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	0018      	movs	r0, r3
 8005d98:	f000 fa1a 	bl	80061d0 <LCD_Write8>
		for (i = (uint8_t) len & 63; i--;) {
 8005d9c:	220d      	movs	r2, #13
 8005d9e:	18bb      	adds	r3, r7, r2
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	18ba      	adds	r2, r7, r2
 8005da4:	1e59      	subs	r1, r3, #1
 8005da6:	7011      	strb	r1, [r2, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1eb      	bne.n	8005d84 <LCD_Flood+0x300>
		}
	}
	LCD_CS_HIGH();
 8005dac:	4b04      	ldr	r3, [pc, #16]	; (8005dc0 <LCD_Flood+0x33c>)
 8005dae:	2201      	movs	r2, #1
 8005db0:	2100      	movs	r1, #0
 8005db2:	0018      	movs	r0, r3
 8005db4:	f7fd fcc2 	bl	800373c <gpio_write>
}
 8005db8:	46c0      	nop			; (mov r8, r8)
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	b004      	add	sp, #16
 8005dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8005dc0:	48000400 	.word	0x48000400

08005dc4 <LCD_Printf>:
 * \param fmt	Format text
 * \param 
 * 
 * \return void
 */
void LCD_Printf(const char *fmt, ...) {
 8005dc4:	b40f      	push	{r0, r1, r2, r3}
 8005dc6:	b5b0      	push	{r4, r5, r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8005dcc:	231c      	movs	r3, #28
 8005dce:	18fb      	adds	r3, r7, r3
 8005dd0:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	69b9      	ldr	r1, [r7, #24]
 8005dd6:	4b3e      	ldr	r3, [pc, #248]	; (8005ed0 <LCD_Printf+0x10c>)
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f003 ff89 	bl	8009cf0 <vsiprintf>
	va_end(lst);

	p = buf;
 8005dde:	4b3c      	ldr	r3, [pc, #240]	; (8005ed0 <LCD_Printf+0x10c>)
 8005de0:	607b      	str	r3, [r7, #4]
	while (*p) {
 8005de2:	e069      	b.n	8005eb8 <LCD_Printf+0xf4>
		if (*p == '\n') {
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b0a      	cmp	r3, #10
 8005dea:	d111      	bne.n	8005e10 <LCD_Printf+0x4c>
			m_cursor_y += m_textsize * 8;
 8005dec:	4b39      	ldr	r3, [pc, #228]	; (8005ed4 <LCD_Printf+0x110>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	4b38      	ldr	r3, [pc, #224]	; (8005ed8 <LCD_Printf+0x114>)
 8005df8:	2100      	movs	r1, #0
 8005dfa:	5e5b      	ldrsh	r3, [r3, r1]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	18d3      	adds	r3, r2, r3
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	b21a      	sxth	r2, r3
 8005e04:	4b34      	ldr	r3, [pc, #208]	; (8005ed8 <LCD_Printf+0x114>)
 8005e06:	801a      	strh	r2, [r3, #0]
			m_cursor_x = 0;
 8005e08:	4b34      	ldr	r3, [pc, #208]	; (8005edc <LCD_Printf+0x118>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	e050      	b.n	8005eb2 <LCD_Printf+0xee>
		} else if (*p == '\r') {
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b0d      	cmp	r3, #13
 8005e16:	d04c      	beq.n	8005eb2 <LCD_Printf+0xee>
			// skip em
		} else {
			LCD_DrawChar(m_cursor_x, m_cursor_y, *p, m_textcolor, m_textbgcolor,
 8005e18:	4b30      	ldr	r3, [pc, #192]	; (8005edc <LCD_Printf+0x118>)
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	5e18      	ldrsh	r0, [r3, r0]
 8005e1e:	4b2e      	ldr	r3, [pc, #184]	; (8005ed8 <LCD_Printf+0x114>)
 8005e20:	2100      	movs	r1, #0
 8005e22:	5e59      	ldrsh	r1, [r3, r1]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	781c      	ldrb	r4, [r3, #0]
 8005e28:	4b2d      	ldr	r3, [pc, #180]	; (8005ee0 <LCD_Printf+0x11c>)
 8005e2a:	881d      	ldrh	r5, [r3, #0]
 8005e2c:	4b2d      	ldr	r3, [pc, #180]	; (8005ee4 <LCD_Printf+0x120>)
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	4a28      	ldr	r2, [pc, #160]	; (8005ed4 <LCD_Printf+0x110>)
 8005e32:	7812      	ldrb	r2, [r2, #0]
 8005e34:	9201      	str	r2, [sp, #4]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	002b      	movs	r3, r5
 8005e3a:	0022      	movs	r2, r4
 8005e3c:	f7ff f99c 	bl	8005178 <LCD_DrawChar>
					m_textsize);
			m_cursor_x += m_textsize * 6;
 8005e40:	4b24      	ldr	r3, [pc, #144]	; (8005ed4 <LCD_Printf+0x110>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	1c1a      	adds	r2, r3, #0
 8005e48:	1c13      	adds	r3, r2, #0
 8005e4a:	18db      	adds	r3, r3, r3
 8005e4c:	189b      	adds	r3, r3, r2
 8005e4e:	18db      	adds	r3, r3, r3
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	4b22      	ldr	r3, [pc, #136]	; (8005edc <LCD_Printf+0x118>)
 8005e54:	2100      	movs	r1, #0
 8005e56:	5e5b      	ldrsh	r3, [r3, r1]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	18d3      	adds	r3, r2, r3
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	b21a      	sxth	r2, r3
 8005e60:	4b1e      	ldr	r3, [pc, #120]	; (8005edc <LCD_Printf+0x118>)
 8005e62:	801a      	strh	r2, [r3, #0]
			if (m_wrap && (m_cursor_x > (m_width - m_textsize * 6))) {
 8005e64:	4b20      	ldr	r3, [pc, #128]	; (8005ee8 <LCD_Printf+0x124>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d022      	beq.n	8005eb2 <LCD_Printf+0xee>
 8005e6c:	4b1b      	ldr	r3, [pc, #108]	; (8005edc <LCD_Printf+0x118>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	5e9b      	ldrsh	r3, [r3, r2]
 8005e72:	0019      	movs	r1, r3
 8005e74:	4b1d      	ldr	r3, [pc, #116]	; (8005eec <LCD_Printf+0x128>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	5e9b      	ldrsh	r3, [r3, r2]
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	4b15      	ldr	r3, [pc, #84]	; (8005ed4 <LCD_Printf+0x110>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	001a      	movs	r2, r3
 8005e82:	0013      	movs	r3, r2
 8005e84:	0092      	lsls	r2, r2, #2
 8005e86:	1a9b      	subs	r3, r3, r2
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	18c3      	adds	r3, r0, r3
 8005e8c:	4299      	cmp	r1, r3
 8005e8e:	dd10      	ble.n	8005eb2 <LCD_Printf+0xee>
				m_cursor_y += m_textsize * 8;
 8005e90:	4b10      	ldr	r3, [pc, #64]	; (8005ed4 <LCD_Printf+0x110>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <LCD_Printf+0x114>)
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	5e5b      	ldrsh	r3, [r3, r1]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	18d3      	adds	r3, r2, r3
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	b21a      	sxth	r2, r3
 8005ea8:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <LCD_Printf+0x114>)
 8005eaa:	801a      	strh	r2, [r3, #0]
				m_cursor_x = 0;
 8005eac:	4b0b      	ldr	r3, [pc, #44]	; (8005edc <LCD_Printf+0x118>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	607b      	str	r3, [r7, #4]
	while (*p) {
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d191      	bne.n	8005de4 <LCD_Printf+0x20>
	}
}
 8005ec0:	46c0      	nop			; (mov r8, r8)
 8005ec2:	46c0      	nop			; (mov r8, r8)
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	b002      	add	sp, #8
 8005ec8:	bcb0      	pop	{r4, r5, r7}
 8005eca:	bc08      	pop	{r3}
 8005ecc:	b004      	add	sp, #16
 8005ece:	4718      	bx	r3
 8005ed0:	200007e4 	.word	0x200007e4
 8005ed4:	200007de 	.word	0x200007de
 8005ed8:	200007d8 	.word	0x200007d8
 8005edc:	200007d6 	.word	0x200007d6
 8005ee0:	200007da 	.word	0x200007da
 8005ee4:	200007dc 	.word	0x200007dc
 8005ee8:	200007e0 	.word	0x200007e0
 8005eec:	200007d2 	.word	0x200007d2

08005ef0 <LCD_Reset>:
 * 
 * \param 
 * 
 * \return void
 */
void LCD_Reset(void) {
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 8005ef6:	4b2f      	ldr	r3, [pc, #188]	; (8005fb4 <LCD_Reset+0xc4>)
 8005ef8:	2201      	movs	r2, #1
 8005efa:	2100      	movs	r1, #0
 8005efc:	0018      	movs	r0, r3
 8005efe:	f7fd fc1d 	bl	800373c <gpio_write>
	LCD_WR_HIGH();
 8005f02:	2390      	movs	r3, #144	; 0x90
 8005f04:	05db      	lsls	r3, r3, #23
 8005f06:	2201      	movs	r2, #1
 8005f08:	2101      	movs	r1, #1
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f7fd fc16 	bl	800373c <gpio_write>
	LCD_RD_HIGH();
 8005f10:	2390      	movs	r3, #144	; 0x90
 8005f12:	05db      	lsls	r3, r3, #23
 8005f14:	2201      	movs	r2, #1
 8005f16:	2100      	movs	r1, #0
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f7fd fc0f 	bl	800373c <gpio_write>

	LCD_RST_LOW();
 8005f1e:	4b26      	ldr	r3, [pc, #152]	; (8005fb8 <LCD_Reset+0xc8>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	2101      	movs	r1, #1
 8005f24:	0018      	movs	r0, r3
 8005f26:	f7fd fc09 	bl	800373c <gpio_write>
	delay(100);
 8005f2a:	2064      	movs	r0, #100	; 0x64
 8005f2c:	f7fe fac2 	bl	80044b4 <delay>
	LCD_RST_HIGH();
 8005f30:	4b21      	ldr	r3, [pc, #132]	; (8005fb8 <LCD_Reset+0xc8>)
 8005f32:	2201      	movs	r2, #1
 8005f34:	2101      	movs	r1, #1
 8005f36:	0018      	movs	r0, r3
 8005f38:	f7fd fc00 	bl	800373c <gpio_write>

	// Data transfer sync
	LCD_CS_LOW();
 8005f3c:	4b1d      	ldr	r3, [pc, #116]	; (8005fb4 <LCD_Reset+0xc4>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2100      	movs	r1, #0
 8005f42:	0018      	movs	r0, r3
 8005f44:	f7fd fbfa 	bl	800373c <gpio_write>

	LCD_CD_LOW();
 8005f48:	2390      	movs	r3, #144	; 0x90
 8005f4a:	05db      	lsls	r3, r3, #23
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2104      	movs	r1, #4
 8005f50:	0018      	movs	r0, r3
 8005f52:	f7fd fbf3 	bl	800373c <gpio_write>
	LCD_Write8(0x00);
 8005f56:	2000      	movs	r0, #0
 8005f58:	f000 f93a 	bl	80061d0 <LCD_Write8>
	for (uint8_t i = 0; i < 3; i++)
 8005f5c:	1dfb      	adds	r3, r7, #7
 8005f5e:	2200      	movs	r2, #0
 8005f60:	701a      	strb	r2, [r3, #0]
 8005f62:	e018      	b.n	8005f96 <LCD_Reset+0xa6>
		LCD_WR_STROBE(); // Three extra 0x00s
 8005f64:	2390      	movs	r3, #144	; 0x90
 8005f66:	05db      	lsls	r3, r3, #23
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	f7fd fbe5 	bl	800373c <gpio_write>
 8005f72:	2001      	movs	r0, #1
 8005f74:	f7fe fa9e 	bl	80044b4 <delay>
 8005f78:	2390      	movs	r3, #144	; 0x90
 8005f7a:	05db      	lsls	r3, r3, #23
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	2101      	movs	r1, #1
 8005f80:	0018      	movs	r0, r3
 8005f82:	f7fd fbdb 	bl	800373c <gpio_write>
 8005f86:	2001      	movs	r0, #1
 8005f88:	f7fe fa94 	bl	80044b4 <delay>
	for (uint8_t i = 0; i < 3; i++)
 8005f8c:	1dfb      	adds	r3, r7, #7
 8005f8e:	781a      	ldrb	r2, [r3, #0]
 8005f90:	1dfb      	adds	r3, r7, #7
 8005f92:	3201      	adds	r2, #1
 8005f94:	701a      	strb	r2, [r3, #0]
 8005f96:	1dfb      	adds	r3, r7, #7
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d9e2      	bls.n	8005f64 <LCD_Reset+0x74>
	LCD_CS_HIGH();
 8005f9e:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <LCD_Reset+0xc4>)
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f7fd fbc9 	bl	800373c <gpio_write>
}
 8005faa:	46c0      	nop			; (mov r8, r8)
 8005fac:	46bd      	mov	sp, r7
 8005fae:	b002      	add	sp, #8
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	48000400 	.word	0x48000400
 8005fb8:	48000800 	.word	0x48000800

08005fbc <LCD_SetCursor>:
 * \param x		The x-coordinate
 * \param y		The y-coordinate
 * 
 * \return void
 */
void LCD_SetCursor(unsigned int x, unsigned int y) {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
	m_cursor_x = x;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	b21a      	sxth	r2, r3
 8005fca:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <LCD_SetCursor+0x24>)
 8005fcc:	801a      	strh	r2, [r3, #0]
	m_cursor_y = y;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	b21a      	sxth	r2, r3
 8005fd2:	4b04      	ldr	r3, [pc, #16]	; (8005fe4 <LCD_SetCursor+0x28>)
 8005fd4:	801a      	strh	r2, [r3, #0]
}
 8005fd6:	46c0      	nop			; (mov r8, r8)
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	b002      	add	sp, #8
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	46c0      	nop			; (mov r8, r8)
 8005fe0:	200007d6 	.word	0x200007d6
 8005fe4:	200007d8 	.word	0x200007d8

08005fe8 <LCD_SetTextSize>:
 * 
 * \param s	Size
 * 
 * \return void
 */
void LCD_SetTextSize(uint8_t s) {
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	0002      	movs	r2, r0
 8005ff0:	1dfb      	adds	r3, r7, #7
 8005ff2:	701a      	strb	r2, [r3, #0]
	m_textsize = (s > 0) ? s : 1;
 8005ff4:	1dfb      	adds	r3, r7, #7
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <LCD_SetTextSize+0x1a>
 8005ffc:	1dfb      	adds	r3, r7, #7
 8005ffe:	781a      	ldrb	r2, [r3, #0]
 8006000:	e000      	b.n	8006004 <LCD_SetTextSize+0x1c>
 8006002:	2201      	movs	r2, #1
 8006004:	4b02      	ldr	r3, [pc, #8]	; (8006010 <LCD_SetTextSize+0x28>)
 8006006:	701a      	strb	r2, [r3, #0]
}
 8006008:	46c0      	nop			; (mov r8, r8)
 800600a:	46bd      	mov	sp, r7
 800600c:	b002      	add	sp, #8
 800600e:	bd80      	pop	{r7, pc}
 8006010:	200007de 	.word	0x200007de

08006014 <LCD_SetTextColor>:
 * \param c		Text color
 * \param b		Background color
 * 
 * \return void
 */
void LCD_SetTextColor(uint16_t c, uint16_t b) {
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	0002      	movs	r2, r0
 800601c:	1dbb      	adds	r3, r7, #6
 800601e:	801a      	strh	r2, [r3, #0]
 8006020:	1d3b      	adds	r3, r7, #4
 8006022:	1c0a      	adds	r2, r1, #0
 8006024:	801a      	strh	r2, [r3, #0]
	m_textcolor = c;
 8006026:	4b06      	ldr	r3, [pc, #24]	; (8006040 <LCD_SetTextColor+0x2c>)
 8006028:	1dba      	adds	r2, r7, #6
 800602a:	8812      	ldrh	r2, [r2, #0]
 800602c:	801a      	strh	r2, [r3, #0]
	m_textbgcolor = b;
 800602e:	4b05      	ldr	r3, [pc, #20]	; (8006044 <LCD_SetTextColor+0x30>)
 8006030:	1d3a      	adds	r2, r7, #4
 8006032:	8812      	ldrh	r2, [r2, #0]
 8006034:	801a      	strh	r2, [r3, #0]
}
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	46bd      	mov	sp, r7
 800603a:	b002      	add	sp, #8
 800603c:	bd80      	pop	{r7, pc}
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	200007da 	.word	0x200007da
 8006044:	200007dc 	.word	0x200007dc

08006048 <LCD_SetRotation>:
 * 
 * \param x	rotation
 * 
 * \return void
 */
void LCD_SetRotation(uint8_t x) {
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	0002      	movs	r2, r0
 8006050:	1dfb      	adds	r3, r7, #7
 8006052:	701a      	strb	r2, [r3, #0]
	m_rotation = (x & 3);
 8006054:	1dfb      	adds	r3, r7, #7
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2203      	movs	r2, #3
 800605a:	4013      	ands	r3, r2
 800605c:	b2da      	uxtb	r2, r3
 800605e:	4b11      	ldr	r3, [pc, #68]	; (80060a4 <LCD_SetRotation+0x5c>)
 8006060:	701a      	strb	r2, [r3, #0]
	switch (m_rotation) {
 8006062:	4b10      	ldr	r3, [pc, #64]	; (80060a4 <LCD_SetRotation+0x5c>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b03      	cmp	r3, #3
 8006068:	d010      	beq.n	800608c <LCD_SetRotation+0x44>
 800606a:	dc17      	bgt.n	800609c <LCD_SetRotation+0x54>
 800606c:	2b02      	cmp	r3, #2
 800606e:	d005      	beq.n	800607c <LCD_SetRotation+0x34>
 8006070:	dc14      	bgt.n	800609c <LCD_SetRotation+0x54>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d002      	beq.n	800607c <LCD_SetRotation+0x34>
 8006076:	2b01      	cmp	r3, #1
 8006078:	d008      	beq.n	800608c <LCD_SetRotation+0x44>
	case 3:
		m_width = TFTHEIGHT;
		m_height = TFTWIDTH;
		break;
	}
}
 800607a:	e00f      	b.n	800609c <LCD_SetRotation+0x54>
		m_width = TFTWIDTH;
 800607c:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <LCD_SetRotation+0x60>)
 800607e:	22f0      	movs	r2, #240	; 0xf0
 8006080:	801a      	strh	r2, [r3, #0]
		m_height = TFTHEIGHT;
 8006082:	4b0a      	ldr	r3, [pc, #40]	; (80060ac <LCD_SetRotation+0x64>)
 8006084:	22a0      	movs	r2, #160	; 0xa0
 8006086:	0052      	lsls	r2, r2, #1
 8006088:	801a      	strh	r2, [r3, #0]
		break;
 800608a:	e007      	b.n	800609c <LCD_SetRotation+0x54>
		m_width = TFTHEIGHT;
 800608c:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <LCD_SetRotation+0x60>)
 800608e:	22a0      	movs	r2, #160	; 0xa0
 8006090:	0052      	lsls	r2, r2, #1
 8006092:	801a      	strh	r2, [r3, #0]
		m_height = TFTWIDTH;
 8006094:	4b05      	ldr	r3, [pc, #20]	; (80060ac <LCD_SetRotation+0x64>)
 8006096:	22f0      	movs	r2, #240	; 0xf0
 8006098:	801a      	strh	r2, [r3, #0]
		break;
 800609a:	46c0      	nop			; (mov r8, r8)
}
 800609c:	46c0      	nop			; (mov r8, r8)
 800609e:	46bd      	mov	sp, r7
 80060a0:	b002      	add	sp, #8
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	200007df 	.word	0x200007df
 80060a8:	200007d2 	.word	0x200007d2
 80060ac:	200007d4 	.word	0x200007d4

080060b0 <LCD_SetAddrWindow>:
 * \param x2
 * \param y2
 * 
 * \return void
 */
void LCD_SetAddrWindow(int x1, int y1, int x2, int y2) {
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]

	LCD_CS_LOW();
 80060be:	4b42      	ldr	r3, [pc, #264]	; (80061c8 <LCD_SetAddrWindow+0x118>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	2100      	movs	r1, #0
 80060c4:	0018      	movs	r0, r3
 80060c6:	f7fd fb39 	bl	800373c <gpio_write>
	// set to the top-left corner -- although fill operations can be
	// done in any direction, the current screen rotation is applied
	// because some users find it disconcerting when a fill does not
	// occur top-to-bottom.
	int x, y, t;
	switch (m_rotation) {
 80060ca:	4b40      	ldr	r3, [pc, #256]	; (80061cc <LCD_SetAddrWindow+0x11c>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d037      	beq.n	8006142 <LCD_SetAddrWindow+0x92>
 80060d2:	dc03      	bgt.n	80060dc <LCD_SetAddrWindow+0x2c>
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d006      	beq.n	80060e6 <LCD_SetAddrWindow+0x36>
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d017      	beq.n	800610c <LCD_SetAddrWindow+0x5c>
	default:
		x = x1;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	61fb      	str	r3, [r7, #28]
		y = y1;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	61bb      	str	r3, [r7, #24]
		break;
 80060e4:	e042      	b.n	800616c <LCD_SetAddrWindow+0xbc>
	case 1:
		t = y1;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	617b      	str	r3, [r7, #20]
		y1 = x1;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	60bb      	str	r3, [r7, #8]
		x1 = TFTWIDTH - 1 - y2;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	22ef      	movs	r2, #239	; 0xef
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	60fb      	str	r3, [r7, #12]
		y2 = x2;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
		x2 = TFTWIDTH - 1 - t;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	22ef      	movs	r2, #239	; 0xef
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	607b      	str	r3, [r7, #4]
		x = x2;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	61fb      	str	r3, [r7, #28]
		y = y1;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	61bb      	str	r3, [r7, #24]
		break;
 800610a:	e02f      	b.n	800616c <LCD_SetAddrWindow+0xbc>
	case 2:
		t = x1;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	617b      	str	r3, [r7, #20]
		x1 = TFTWIDTH - 1 - x2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	22ef      	movs	r2, #239	; 0xef
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	60fb      	str	r3, [r7, #12]
		x2 = TFTWIDTH - 1 - t;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	22ef      	movs	r2, #239	; 0xef
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	607b      	str	r3, [r7, #4]
		t = y1;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	617b      	str	r3, [r7, #20]
		y1 = TFTHEIGHT - 1 - y2;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2240      	movs	r2, #64	; 0x40
 8006128:	32ff      	adds	r2, #255	; 0xff
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	60bb      	str	r3, [r7, #8]
		y2 = TFTHEIGHT - 1 - t;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2240      	movs	r2, #64	; 0x40
 8006132:	32ff      	adds	r2, #255	; 0xff
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	603b      	str	r3, [r7, #0]
		x = x2;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	61fb      	str	r3, [r7, #28]
		y = y2;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	61bb      	str	r3, [r7, #24]
		break;
 8006140:	e014      	b.n	800616c <LCD_SetAddrWindow+0xbc>
	case 3:
		t = x1;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	617b      	str	r3, [r7, #20]
		x1 = y1;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	60fb      	str	r3, [r7, #12]
		y1 = TFTHEIGHT - 1 - x2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2240      	movs	r2, #64	; 0x40
 800614e:	32ff      	adds	r2, #255	; 0xff
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	60bb      	str	r3, [r7, #8]
		x2 = y2;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	607b      	str	r3, [r7, #4]
		y2 = TFTHEIGHT - 1 - t;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2240      	movs	r2, #64	; 0x40
 800615c:	32ff      	adds	r2, #255	; 0xff
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	603b      	str	r3, [r7, #0]
		x = x1;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	61fb      	str	r3, [r7, #28]
		y = y2;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	61bb      	str	r3, [r7, #24]
		break;
 800616a:	46c0      	nop			; (mov r8, r8)
	}

	LCD_WriteRegister16(0x0050, x1); // Set address window
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	b29b      	uxth	r3, r3
 8006170:	0019      	movs	r1, r3
 8006172:	2050      	movs	r0, #80	; 0x50
 8006174:	f000 f8a6 	bl	80062c4 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0051, x2);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	b29b      	uxth	r3, r3
 800617c:	0019      	movs	r1, r3
 800617e:	2051      	movs	r0, #81	; 0x51
 8006180:	f000 f8a0 	bl	80062c4 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0052, y1);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	b29b      	uxth	r3, r3
 8006188:	0019      	movs	r1, r3
 800618a:	2052      	movs	r0, #82	; 0x52
 800618c:	f000 f89a 	bl	80062c4 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0053, y2);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	0019      	movs	r1, r3
 8006196:	2053      	movs	r0, #83	; 0x53
 8006198:	f000 f894 	bl	80062c4 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0020, x); // Set address counter to top left
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	0019      	movs	r1, r3
 80061a2:	2020      	movs	r0, #32
 80061a4:	f000 f88e 	bl	80062c4 <LCD_WriteRegister16>
	LCD_WriteRegister16(0x0021, y);
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	0019      	movs	r1, r3
 80061ae:	2021      	movs	r0, #33	; 0x21
 80061b0:	f000 f888 	bl	80062c4 <LCD_WriteRegister16>

	LCD_CS_HIGH();
 80061b4:	4b04      	ldr	r3, [pc, #16]	; (80061c8 <LCD_SetAddrWindow+0x118>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	2100      	movs	r1, #0
 80061ba:	0018      	movs	r0, r3
 80061bc:	f7fd fabe 	bl	800373c <gpio_write>
}
 80061c0:	46c0      	nop			; (mov r8, r8)
 80061c2:	46bd      	mov	sp, r7
 80061c4:	b008      	add	sp, #32
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	48000400 	.word	0x48000400
 80061cc:	200007df 	.word	0x200007df

080061d0 <LCD_Write8>:
 * 
 * \param data	8-Bit Data
 * 
 * \return void
 */
void LCD_Write8(uint8_t data) {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	0002      	movs	r2, r0
 80061d8:	1dfb      	adds	r3, r7, #7
 80061da:	701a      	strb	r2, [r3, #0]
	// GPIOB, GPIO_PIN_5  -> BIT 4 -> 0x10
	// GPIOB, GPIO_PIN_4  -> BIT 5 -> 0x20
	// GPIOB, GPIO_PIN_10 -> BIT 6 -> 0x40
	// GPIOA, GPIO_PIN_8  -> BIT 7 -> 0x80

	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 80061dc:	2390      	movs	r3, #144	; 0x90
 80061de:	05db      	lsls	r3, r3, #23
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	4a33      	ldr	r2, [pc, #204]	; (80062b0 <LCD_Write8+0xe0>)
 80061e4:	401a      	ands	r2, r3
 80061e6:	1dfb      	adds	r3, r7, #7
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	025b      	lsls	r3, r3, #9
 80061ec:	0019      	movs	r1, r3
 80061ee:	2380      	movs	r3, #128	; 0x80
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	400b      	ands	r3, r1
 80061f4:	431a      	orrs	r2, r3
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 80061f6:	1dfb      	adds	r3, r7, #7
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	021b      	lsls	r3, r3, #8
 80061fc:	0019      	movs	r1, r3
 80061fe:	2380      	movs	r3, #128	; 0x80
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	400b      	ands	r3, r1
 8006204:	431a      	orrs	r2, r3
 8006206:	0011      	movs	r1, r2
 8006208:	1dfb      	adds	r3, r7, #7
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	001a      	movs	r2, r3
 8006210:	2380      	movs	r3, #128	; 0x80
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	401a      	ands	r2, r3
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 8006216:	2390      	movs	r3, #144	; 0x90
 8006218:	05db      	lsls	r3, r3, #23
			| ((data & 0x04) << 8) | ((data & 0x80) << 1);
 800621a:	430a      	orrs	r2, r1
	GPIOA->ODR = (GPIOA->ODR & 0xF8FF) | ((data & 0x01) << 9)
 800621c:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 800621e:	4b25      	ldr	r3, [pc, #148]	; (80062b4 <LCD_Write8+0xe4>)
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	4a25      	ldr	r2, [pc, #148]	; (80062b8 <LCD_Write8+0xe8>)
 8006224:	401a      	ands	r2, r3
 8006226:	1dfb      	adds	r3, r7, #7
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2108      	movs	r1, #8
 800622c:	400b      	ands	r3, r1
 800622e:	431a      	orrs	r2, r3
 8006230:	1dfb      	adds	r3, r7, #7
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	0019      	movs	r1, r3
 8006238:	2320      	movs	r3, #32
 800623a:	400b      	ands	r3, r1
 800623c:	431a      	orrs	r2, r3
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 800623e:	1dfb      	adds	r3, r7, #7
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	105b      	asrs	r3, r3, #1
 8006244:	0019      	movs	r1, r3
 8006246:	2310      	movs	r3, #16
 8006248:	400b      	ands	r3, r1
 800624a:	431a      	orrs	r2, r3
 800624c:	0011      	movs	r1, r2
 800624e:	1dfb      	adds	r3, r7, #7
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	011b      	lsls	r3, r3, #4
 8006254:	001a      	movs	r2, r3
 8006256:	2380      	movs	r3, #128	; 0x80
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	401a      	ands	r2, r3
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 800625c:	4b15      	ldr	r3, [pc, #84]	; (80062b4 <LCD_Write8+0xe4>)
			| ((data & 0x20) >> 1) | ((data & 0x40) << 4);
 800625e:	430a      	orrs	r2, r1
	GPIOB->ODR = (GPIOB->ODR & 0xFBC7) | (data & 0x08) | ((data & 0x10) << 1)
 8006260:	615a      	str	r2, [r3, #20]
	GPIOC->ODR = (GPIOC->ODR & 0xFF7F) | ((data & 0x02) << 6);
 8006262:	4b16      	ldr	r3, [pc, #88]	; (80062bc <LCD_Write8+0xec>)
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	4a16      	ldr	r2, [pc, #88]	; (80062c0 <LCD_Write8+0xf0>)
 8006268:	4013      	ands	r3, r2
 800626a:	0019      	movs	r1, r3
 800626c:	1dfb      	adds	r3, r7, #7
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	019b      	lsls	r3, r3, #6
 8006272:	001a      	movs	r2, r3
 8006274:	2380      	movs	r3, #128	; 0x80
 8006276:	401a      	ands	r2, r3
 8006278:	4b10      	ldr	r3, [pc, #64]	; (80062bc <LCD_Write8+0xec>)
 800627a:	430a      	orrs	r2, r1
 800627c:	615a      	str	r2, [r3, #20]

	LCD_WR_STROBE();
 800627e:	2390      	movs	r3, #144	; 0x90
 8006280:	05db      	lsls	r3, r3, #23
 8006282:	2200      	movs	r2, #0
 8006284:	2101      	movs	r1, #1
 8006286:	0018      	movs	r0, r3
 8006288:	f7fd fa58 	bl	800373c <gpio_write>
 800628c:	2001      	movs	r0, #1
 800628e:	f7fe f911 	bl	80044b4 <delay>
 8006292:	2390      	movs	r3, #144	; 0x90
 8006294:	05db      	lsls	r3, r3, #23
 8006296:	2201      	movs	r2, #1
 8006298:	2101      	movs	r1, #1
 800629a:	0018      	movs	r0, r3
 800629c:	f7fd fa4e 	bl	800373c <gpio_write>
 80062a0:	2001      	movs	r0, #1
 80062a2:	f7fe f907 	bl	80044b4 <delay>
}
 80062a6:	46c0      	nop			; (mov r8, r8)
 80062a8:	46bd      	mov	sp, r7
 80062aa:	b002      	add	sp, #8
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	46c0      	nop			; (mov r8, r8)
 80062b0:	0000f8ff 	.word	0x0000f8ff
 80062b4:	48000400 	.word	0x48000400
 80062b8:	0000fbc7 	.word	0x0000fbc7
 80062bc:	48000800 	.word	0x48000800
 80062c0:	0000ff7f 	.word	0x0000ff7f

080062c4 <LCD_WriteRegister16>:
 * \param a		Register
 * \param d		Data
 * 
 * \return void
 */
void LCD_WriteRegister16(uint16_t a, uint16_t d) {
 80062c4:	b5b0      	push	{r4, r5, r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	0002      	movs	r2, r0
 80062cc:	1dbb      	adds	r3, r7, #6
 80062ce:	801a      	strh	r2, [r3, #0]
 80062d0:	1d3b      	adds	r3, r7, #4
 80062d2:	1c0a      	adds	r2, r1, #0
 80062d4:	801a      	strh	r2, [r3, #0]
	uint8_t hi, lo;
	hi = (a) >> 8;
 80062d6:	1dbb      	adds	r3, r7, #6
 80062d8:	881b      	ldrh	r3, [r3, #0]
 80062da:	0a1b      	lsrs	r3, r3, #8
 80062dc:	b29a      	uxth	r2, r3
 80062de:	240f      	movs	r4, #15
 80062e0:	193b      	adds	r3, r7, r4
 80062e2:	701a      	strb	r2, [r3, #0]
	lo = (a);
 80062e4:	250e      	movs	r5, #14
 80062e6:	197b      	adds	r3, r7, r5
 80062e8:	1dba      	adds	r2, r7, #6
 80062ea:	8812      	ldrh	r2, [r2, #0]
 80062ec:	701a      	strb	r2, [r3, #0]
	LCD_CD_LOW();
 80062ee:	2390      	movs	r3, #144	; 0x90
 80062f0:	05db      	lsls	r3, r3, #23
 80062f2:	2200      	movs	r2, #0
 80062f4:	2104      	movs	r1, #4
 80062f6:	0018      	movs	r0, r3
 80062f8:	f7fd fa20 	bl	800373c <gpio_write>
	LCD_Write8(hi);
 80062fc:	193b      	adds	r3, r7, r4
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	0018      	movs	r0, r3
 8006302:	f7ff ff65 	bl	80061d0 <LCD_Write8>
	LCD_Write8(lo);
 8006306:	197b      	adds	r3, r7, r5
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	0018      	movs	r0, r3
 800630c:	f7ff ff60 	bl	80061d0 <LCD_Write8>
	hi = (d) >> 8;
 8006310:	1d3b      	adds	r3, r7, #4
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	0a1b      	lsrs	r3, r3, #8
 8006316:	b29a      	uxth	r2, r3
 8006318:	193b      	adds	r3, r7, r4
 800631a:	701a      	strb	r2, [r3, #0]
	lo = (d);
 800631c:	197b      	adds	r3, r7, r5
 800631e:	1d3a      	adds	r2, r7, #4
 8006320:	8812      	ldrh	r2, [r2, #0]
 8006322:	701a      	strb	r2, [r3, #0]
	LCD_CD_HIGH();
 8006324:	2390      	movs	r3, #144	; 0x90
 8006326:	05db      	lsls	r3, r3, #23
 8006328:	2201      	movs	r2, #1
 800632a:	2104      	movs	r1, #4
 800632c:	0018      	movs	r0, r3
 800632e:	f7fd fa05 	bl	800373c <gpio_write>
	LCD_Write8(hi);
 8006332:	193b      	adds	r3, r7, r4
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	0018      	movs	r0, r3
 8006338:	f7ff ff4a 	bl	80061d0 <LCD_Write8>
	LCD_Write8(lo);
 800633c:	197b      	adds	r3, r7, r5
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	0018      	movs	r0, r3
 8006342:	f7ff ff45 	bl	80061d0 <LCD_Write8>
}
 8006346:	46c0      	nop			; (mov r8, r8)
 8006348:	46bd      	mov	sp, r7
 800634a:	b004      	add	sp, #16
 800634c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006350 <insert_sort>:
 *      Author: hp
 */

#include "touch.h"

void insert_sort(int array[], uint8_t size) {
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	000a      	movs	r2, r1
 800635a:	1cfb      	adds	r3, r7, #3
 800635c:	701a      	strb	r2, [r3, #0]
	uint8_t j;
	int save;

	for (int i = 1; i < size; i++) {
 800635e:	2301      	movs	r3, #1
 8006360:	613b      	str	r3, [r7, #16]
 8006362:	e03c      	b.n	80063de <insert_sort+0x8e>
		save = array[i];
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	18d3      	adds	r3, r2, r3
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60fb      	str	r3, [r7, #12]
		for (j = i; j >= 1 && save < array[j - 1]; j--)
 8006370:	2317      	movs	r3, #23
 8006372:	18fb      	adds	r3, r7, r3
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	e015      	b.n	80063a6 <insert_sort+0x56>
			array[j] = array[j - 1];
 800637a:	2117      	movs	r1, #23
 800637c:	187b      	adds	r3, r7, r1
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	4a1c      	ldr	r2, [pc, #112]	; (80063f4 <insert_sort+0xa4>)
 8006382:	4694      	mov	ip, r2
 8006384:	4463      	add	r3, ip
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	18d2      	adds	r2, r2, r3
 800638c:	0008      	movs	r0, r1
 800638e:	187b      	adds	r3, r7, r1
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	18cb      	adds	r3, r1, r3
 8006398:	6812      	ldr	r2, [r2, #0]
 800639a:	601a      	str	r2, [r3, #0]
		for (j = i; j >= 1 && save < array[j - 1]; j--)
 800639c:	183b      	adds	r3, r7, r0
 800639e:	781a      	ldrb	r2, [r3, #0]
 80063a0:	183b      	adds	r3, r7, r0
 80063a2:	3a01      	subs	r2, #1
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	2217      	movs	r2, #23
 80063a8:	18bb      	adds	r3, r7, r2
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00b      	beq.n	80063c8 <insert_sort+0x78>
 80063b0:	18bb      	adds	r3, r7, r2
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	4a0f      	ldr	r2, [pc, #60]	; (80063f4 <insert_sort+0xa4>)
 80063b6:	4694      	mov	ip, r2
 80063b8:	4463      	add	r3, ip
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	18d3      	adds	r3, r2, r3
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	dbd8      	blt.n	800637a <insert_sort+0x2a>
		array[j] = save;
 80063c8:	2317      	movs	r3, #23
 80063ca:	18fb      	adds	r3, r7, r3
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	18d3      	adds	r3, r2, r3
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	601a      	str	r2, [r3, #0]
	for (int i = 1; i < size; i++) {
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	3301      	adds	r3, #1
 80063dc:	613b      	str	r3, [r7, #16]
 80063de:	1cfb      	adds	r3, r7, #3
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	dbbd      	blt.n	8006364 <insert_sort+0x14>
	}
}
 80063e8:	46c0      	nop			; (mov r8, r8)
 80063ea:	46c0      	nop			; (mov r8, r8)
 80063ec:	46bd      	mov	sp, r7
 80063ee:	b006      	add	sp, #24
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	46c0      	nop			; (mov r8, r8)
 80063f4:	3fffffff 	.word	0x3fffffff

080063f8 <adc_Init>:

void adc_Init(void) {
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af04      	add	r7, sp, #16
	adc_en();
 80063fe:	f7fd fa9b 	bl	8003938 <adc_en>
	adc_config(sample_time_7, CONT_off, SCANDIR_off, AUTOFF_off, WAIT_off,
 8006402:	2300      	movs	r3, #0
 8006404:	9302      	str	r3, [sp, #8]
 8006406:	2300      	movs	r3, #0
 8006408:	9301      	str	r3, [sp, #4]
 800640a:	2300      	movs	r3, #0
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	2300      	movs	r3, #0
 8006410:	2200      	movs	r2, #0
 8006412:	2100      	movs	r1, #0
 8006414:	2007      	movs	r0, #7
 8006416:	f7fd fb83 	bl	8003b20 <adc_config>
	DISCEN_off, OVRMOD_off);

}
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <Touch_Begin>:

void Touch_Begin(void) {
 8006420:	b580      	push	{r7, lr}
 8006422:	af00      	add	r7, sp, #0
//	ADCx_MspInit();
	adc_Init();
 8006424:	f7ff ffe8 	bl	80063f8 <adc_Init>
}
 8006428:	46c0      	nop			; (mov r8, r8)
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <GPIO_SetOutput>:

void GPIO_SetOutput(GPIO_TypeDef *GPIOx, uint16_t pin, int val) {
 800642e:	b590      	push	{r4, r7, lr}
 8006430:	b087      	sub	sp, #28
 8006432:	af02      	add	r7, sp, #8
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	200a      	movs	r0, #10
 800643a:	183b      	adds	r3, r7, r0
 800643c:	1c0a      	adds	r2, r1, #0
 800643e:	801a      	strh	r2, [r3, #0]
	GPIOx->MODER &= ~(0x03 << (2 * pin));
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	183a      	adds	r2, r7, r0
 8006446:	8812      	ldrh	r2, [r2, #0]
 8006448:	0052      	lsls	r2, r2, #1
 800644a:	2103      	movs	r1, #3
 800644c:	4091      	lsls	r1, r2
 800644e:	000a      	movs	r2, r1
 8006450:	43d2      	mvns	r2, r2
 8006452:	401a      	ands	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	601a      	str	r2, [r3, #0]
	gpio_config(GPIOx, pin, OUTPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
 8006458:	0004      	movs	r4, r0
 800645a:	183b      	adds	r3, r7, r0
 800645c:	8819      	ldrh	r1, [r3, #0]
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	2300      	movs	r3, #0
 8006462:	9301      	str	r3, [sp, #4]
 8006464:	2300      	movs	r3, #0
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	2302      	movs	r3, #2
 800646a:	2201      	movs	r2, #1
 800646c:	f7fd f87a 	bl	8003564 <gpio_config>
	gpio_write(GPIOx, pin, val);
 8006470:	193b      	adds	r3, r7, r4
 8006472:	8819      	ldrh	r1, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	b2da      	uxtb	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	0018      	movs	r0, r3
 800647c:	f7fd f95e 	bl	800373c <gpio_write>
}
 8006480:	46c0      	nop			; (mov r8, r8)
 8006482:	46bd      	mov	sp, r7
 8006484:	b005      	add	sp, #20
 8006486:	bd90      	pop	{r4, r7, pc}

08006488 <GPIO_SetAnalog>:
	GPIOx->MODER &= ~(0x03 << (2 * pin));
	gpio_config(GPIOx, pin, INPUT_MODE, HIGH_SPEED, DI_PUPD, PHPL);
	gpio_write(GPIOx, pin, val);
}

void GPIO_SetAnalog(GPIO_TypeDef *GPIOx, uint16_t pin) {
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	000a      	movs	r2, r1
 8006492:	1cbb      	adds	r3, r7, #2
 8006494:	801a      	strh	r2, [r3, #0]

	GPIOx->MODER &= ~(0x03 << (2 * pin));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	1cba      	adds	r2, r7, #2
 800649c:	8812      	ldrh	r2, [r2, #0]
 800649e:	0052      	lsls	r2, r2, #1
 80064a0:	2103      	movs	r1, #3
 80064a2:	4091      	lsls	r1, r2
 80064a4:	000a      	movs	r2, r1
 80064a6:	43d2      	mvns	r2, r2
 80064a8:	401a      	ands	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	601a      	str	r2, [r3, #0]
	gpio_clk_en(GPIOx);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	0018      	movs	r0, r3
 80064b2:	f7fd f80f 	bl	80034d4 <gpio_clk_en>
	gpio_moder(GPIOx, pin, ANALOG_MODE);
 80064b6:	1cbb      	adds	r3, r7, #2
 80064b8:	8819      	ldrh	r1, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2203      	movs	r2, #3
 80064be:	0018      	movs	r0, r3
 80064c0:	f7fd f8be 	bl	8003640 <gpio_moder>

	if ((GPIOx == GPIOA) && (pin == 1)) {
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	2390      	movs	r3, #144	; 0x90
 80064c8:	05db      	lsls	r3, r3, #23
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d10a      	bne.n	80064e4 <GPIO_SetAnalog+0x5c>
 80064ce:	1cbb      	adds	r3, r7, #2
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d106      	bne.n	80064e4 <GPIO_SetAnalog+0x5c>
		ADC1->CHSELR |= ADC_CHSELR_CHSEL1;
 80064d6:	4b25      	ldr	r3, [pc, #148]	; (800656c <GPIO_SetAnalog+0xe4>)
 80064d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064da:	4b24      	ldr	r3, [pc, #144]	; (800656c <GPIO_SetAnalog+0xe4>)
 80064dc:	2102      	movs	r1, #2
 80064de:	430a      	orrs	r2, r1
 80064e0:	629a      	str	r2, [r3, #40]	; 0x28
 80064e2:	e03f      	b.n	8006564 <GPIO_SetAnalog+0xdc>
	} else if ((GPIOx == GPIOA) && (pin == 4)) {
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	2390      	movs	r3, #144	; 0x90
 80064e8:	05db      	lsls	r3, r3, #23
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d10a      	bne.n	8006504 <GPIO_SetAnalog+0x7c>
 80064ee:	1cbb      	adds	r3, r7, #2
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d106      	bne.n	8006504 <GPIO_SetAnalog+0x7c>
		ADC1->CHSELR |= ADC_CHSELR_CHSEL4;
 80064f6:	4b1d      	ldr	r3, [pc, #116]	; (800656c <GPIO_SetAnalog+0xe4>)
 80064f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064fa:	4b1c      	ldr	r3, [pc, #112]	; (800656c <GPIO_SetAnalog+0xe4>)
 80064fc:	2110      	movs	r1, #16
 80064fe:	430a      	orrs	r2, r1
 8006500:	629a      	str	r2, [r3, #40]	; 0x28
 8006502:	e02f      	b.n	8006564 <GPIO_SetAnalog+0xdc>
	} else if ((GPIOx == GPIOB) && (pin == 0)) {
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a1a      	ldr	r2, [pc, #104]	; (8006570 <GPIO_SetAnalog+0xe8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d10b      	bne.n	8006524 <GPIO_SetAnalog+0x9c>
 800650c:	1cbb      	adds	r3, r7, #2
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d107      	bne.n	8006524 <GPIO_SetAnalog+0x9c>
		ADC1->CHSELR |= ADC_CHSELR_CHSEL8;
 8006514:	4b15      	ldr	r3, [pc, #84]	; (800656c <GPIO_SetAnalog+0xe4>)
 8006516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006518:	4b14      	ldr	r3, [pc, #80]	; (800656c <GPIO_SetAnalog+0xe4>)
 800651a:	2180      	movs	r1, #128	; 0x80
 800651c:	0049      	lsls	r1, r1, #1
 800651e:	430a      	orrs	r2, r1
 8006520:	629a      	str	r2, [r3, #40]	; 0x28
 8006522:	e01f      	b.n	8006564 <GPIO_SetAnalog+0xdc>
	} else if ((GPIOx == GPIOC) && (pin == 0)) {
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a13      	ldr	r2, [pc, #76]	; (8006574 <GPIO_SetAnalog+0xec>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d10b      	bne.n	8006544 <GPIO_SetAnalog+0xbc>
 800652c:	1cbb      	adds	r3, r7, #2
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d107      	bne.n	8006544 <GPIO_SetAnalog+0xbc>
		ADC1->CHSELR |= ADC_CHSELR_CHSEL10;
 8006534:	4b0d      	ldr	r3, [pc, #52]	; (800656c <GPIO_SetAnalog+0xe4>)
 8006536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006538:	4b0c      	ldr	r3, [pc, #48]	; (800656c <GPIO_SetAnalog+0xe4>)
 800653a:	2180      	movs	r1, #128	; 0x80
 800653c:	00c9      	lsls	r1, r1, #3
 800653e:	430a      	orrs	r2, r1
 8006540:	629a      	str	r2, [r3, #40]	; 0x28
 8006542:	e00f      	b.n	8006564 <GPIO_SetAnalog+0xdc>
	} else if ((GPIOx == GPIOC) && (pin == 1)) {
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a0b      	ldr	r2, [pc, #44]	; (8006574 <GPIO_SetAnalog+0xec>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d10b      	bne.n	8006564 <GPIO_SetAnalog+0xdc>
 800654c:	1cbb      	adds	r3, r7, #2
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d107      	bne.n	8006564 <GPIO_SetAnalog+0xdc>
		ADC1->CHSELR |= ADC_CHSELR_CHSEL11;
 8006554:	4b05      	ldr	r3, [pc, #20]	; (800656c <GPIO_SetAnalog+0xe4>)
 8006556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006558:	4b04      	ldr	r3, [pc, #16]	; (800656c <GPIO_SetAnalog+0xe4>)
 800655a:	2180      	movs	r1, #128	; 0x80
 800655c:	0109      	lsls	r1, r1, #4
 800655e:	430a      	orrs	r2, r1
 8006560:	629a      	str	r2, [r3, #40]	; 0x28
	}

}
 8006562:	e7ff      	b.n	8006564 <GPIO_SetAnalog+0xdc>
 8006564:	46c0      	nop			; (mov r8, r8)
 8006566:	46bd      	mov	sp, r7
 8006568:	b002      	add	sp, #8
 800656a:	bd80      	pop	{r7, pc}
 800656c:	40012400 	.word	0x40012400
 8006570:	48000400 	.word	0x48000400
 8006574:	48000800 	.word	0x48000800

08006578 <Touch_Get>:
//	}

	return (z2[3] - z1[3]);
}

void Touch_Get(uint16_t *arr) {
 8006578:	b590      	push	{r4, r7, lr}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
	GPIO_SetAnalog(TS_PORT_YP, TS_PIN_YP);
 8006580:	4b2c      	ldr	r3, [pc, #176]	; (8006634 <Touch_Get+0xbc>)
 8006582:	2100      	movs	r1, #0
 8006584:	0018      	movs	r0, r3
 8006586:	f7ff ff7f 	bl	8006488 <GPIO_SetAnalog>
	GPIO_SetAnalog(TS_PORT_XM, TS_PIN_XM);
 800658a:	2390      	movs	r3, #144	; 0x90
 800658c:	05db      	lsls	r3, r3, #23
 800658e:	2104      	movs	r1, #4
 8006590:	0018      	movs	r0, r3
 8006592:	f7ff ff79 	bl	8006488 <GPIO_SetAnalog>

	GPIO_SetOutput(TS_PORT_YM, TS_PIN_YM, 1);
 8006596:	4b28      	ldr	r3, [pc, #160]	; (8006638 <Touch_Get+0xc0>)
 8006598:	2201      	movs	r2, #1
 800659a:	2107      	movs	r1, #7
 800659c:	0018      	movs	r0, r3
 800659e:	f7ff ff46 	bl	800642e <GPIO_SetOutput>
	GPIO_SetOutput(TS_PORT_XP, TS_PIN_XP, 1);
 80065a2:	2390      	movs	r3, #144	; 0x90
 80065a4:	05db      	lsls	r3, r3, #23
 80065a6:	2201      	movs	r2, #1
 80065a8:	2108      	movs	r1, #8
 80065aa:	0018      	movs	r0, r3
 80065ac:	f7ff ff3f 	bl	800642e <GPIO_SetOutput>

//	delay_ms(100);

	uint16_t ADC_VAL[2];
	for (int i = 0; i < 12; i++) {
 80065b0:	2300      	movs	r3, #0
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	e017      	b.n	80065e6 <Touch_Get+0x6e>
		adc_read(&ADC_VAL, 2);
 80065b6:	2408      	movs	r4, #8
 80065b8:	193b      	adds	r3, r7, r4
 80065ba:	2102      	movs	r1, #2
 80065bc:	0018      	movs	r0, r3
 80065be:	f7fd f9c7 	bl	8003950 <adc_read>
		adc_stop();
 80065c2:	f7fd f9f3 	bl	80039ac <adc_stop>
		arr_X[i] = ADC_VAL[0];
 80065c6:	0020      	movs	r0, r4
 80065c8:	183b      	adds	r3, r7, r0
 80065ca:	8819      	ldrh	r1, [r3, #0]
 80065cc:	4b1b      	ldr	r3, [pc, #108]	; (800663c <Touch_Get+0xc4>)
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	0052      	lsls	r2, r2, #1
 80065d2:	52d1      	strh	r1, [r2, r3]
		arr_Y[i] = ADC_VAL[1];
 80065d4:	183b      	adds	r3, r7, r0
 80065d6:	8859      	ldrh	r1, [r3, #2]
 80065d8:	4b19      	ldr	r3, [pc, #100]	; (8006640 <Touch_Get+0xc8>)
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	0052      	lsls	r2, r2, #1
 80065de:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < 12; i++) {
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3301      	adds	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b0b      	cmp	r3, #11
 80065ea:	dde4      	ble.n	80065b6 <Touch_Get+0x3e>
	}
	insert_sort(arr_X, 12);
 80065ec:	4b13      	ldr	r3, [pc, #76]	; (800663c <Touch_Get+0xc4>)
 80065ee:	210c      	movs	r1, #12
 80065f0:	0018      	movs	r0, r3
 80065f2:	f7ff fead 	bl	8006350 <insert_sort>
	insert_sort(arr_Y, 12);
 80065f6:	4b12      	ldr	r3, [pc, #72]	; (8006640 <Touch_Get+0xc8>)
 80065f8:	210c      	movs	r1, #12
 80065fa:	0018      	movs	r0, r3
 80065fc:	f7ff fea8 	bl	8006350 <insert_sort>

	*arr = arr_X[6];
 8006600:	4b0e      	ldr	r3, [pc, #56]	; (800663c <Touch_Get+0xc4>)
 8006602:	899a      	ldrh	r2, [r3, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	801a      	strh	r2, [r3, #0]
	*(arr + 1) = arr_Y[6];
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3302      	adds	r3, #2
 800660c:	4a0c      	ldr	r2, [pc, #48]	; (8006640 <Touch_Get+0xc8>)
 800660e:	8992      	ldrh	r2, [r2, #12]
 8006610:	801a      	strh	r2, [r3, #0]

	GPIO_SetOutput(TS_PORT_YP, TS_PIN_YP, 0);
 8006612:	4b08      	ldr	r3, [pc, #32]	; (8006634 <Touch_Get+0xbc>)
 8006614:	2200      	movs	r2, #0
 8006616:	2100      	movs	r1, #0
 8006618:	0018      	movs	r0, r3
 800661a:	f7ff ff08 	bl	800642e <GPIO_SetOutput>
	GPIO_SetOutput(TS_PORT_XM, TS_PIN_XM, 0);
 800661e:	2390      	movs	r3, #144	; 0x90
 8006620:	05db      	lsls	r3, r3, #23
 8006622:	2200      	movs	r2, #0
 8006624:	2104      	movs	r1, #4
 8006626:	0018      	movs	r0, r3
 8006628:	f7ff ff01 	bl	800642e <GPIO_SetOutput>
}
 800662c:	46c0      	nop			; (mov r8, r8)
 800662e:	46bd      	mov	sp, r7
 8006630:	b005      	add	sp, #20
 8006632:	bd90      	pop	{r4, r7, pc}
 8006634:	48000400 	.word	0x48000400
 8006638:	48000800 	.word	0x48000800
 800663c:	200008e4 	.word	0x200008e4
 8006640:	200008fc 	.word	0x200008fc

08006644 <TOUCH_VAL>:



uint16_t TOUCH_VAL(char c) {
 8006644:	b5b0      	push	{r4, r5, r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af02      	add	r7, sp, #8
 800664a:	0002      	movs	r2, r0
 800664c:	1dfb      	adds	r3, r7, #7
 800664e:	701a      	strb	r2, [r3, #0]
	Touch_Get(&adc_arr_val[0]);
 8006650:	4b34      	ldr	r3, [pc, #208]	; (8006724 <TOUCH_VAL+0xe0>)
 8006652:	0018      	movs	r0, r3
 8006654:	f7ff ff90 	bl	8006578 <Touch_Get>
	uint16_t x = 0, y = 0, z = 0;
 8006658:	230e      	movs	r3, #14
 800665a:	18fb      	adds	r3, r7, r3
 800665c:	2200      	movs	r2, #0
 800665e:	801a      	strh	r2, [r3, #0]
 8006660:	230c      	movs	r3, #12
 8006662:	18fb      	adds	r3, r7, r3
 8006664:	2200      	movs	r2, #0
 8006666:	801a      	strh	r2, [r3, #0]
 8006668:	230a      	movs	r3, #10
 800666a:	18fb      	adds	r3, r7, r3
 800666c:	2200      	movs	r2, #0
 800666e:	801a      	strh	r2, [r3, #0]
	if (c == 'x' || c == 'X') {
 8006670:	1dfb      	adds	r3, r7, #7
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b78      	cmp	r3, #120	; 0x78
 8006676:	d003      	beq.n	8006680 <TOUCH_VAL+0x3c>
 8006678:	1dfb      	adds	r3, r7, #7
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b58      	cmp	r3, #88	; 0x58
 800667e:	d10f      	bne.n	80066a0 <TOUCH_VAL+0x5c>
//		x = adc_arr_val[0] ;
		x = map(adc_arr_val[0], TS_Xmin, TS_Xmax, 0, 1023);
 8006680:	4b28      	ldr	r3, [pc, #160]	; (8006724 <TOUCH_VAL+0xe0>)
 8006682:	8818      	ldrh	r0, [r3, #0]
 8006684:	250e      	movs	r5, #14
 8006686:	197c      	adds	r4, r7, r5
 8006688:	4a27      	ldr	r2, [pc, #156]	; (8006728 <TOUCH_VAL+0xe4>)
 800668a:	4b28      	ldr	r3, [pc, #160]	; (800672c <TOUCH_VAL+0xe8>)
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	2300      	movs	r3, #0
 8006690:	2100      	movs	r1, #0
 8006692:	f7fc feed 	bl	8003470 <map>
 8006696:	0003      	movs	r3, r0
 8006698:	8023      	strh	r3, [r4, #0]
		return x;
 800669a:	197b      	adds	r3, r7, r5
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	e03c      	b.n	800671a <TOUCH_VAL+0xd6>
	} else if (c == 'y' || c == 'Y') {
 80066a0:	1dfb      	adds	r3, r7, #7
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b79      	cmp	r3, #121	; 0x79
 80066a6:	d003      	beq.n	80066b0 <TOUCH_VAL+0x6c>
 80066a8:	1dfb      	adds	r3, r7, #7
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	2b59      	cmp	r3, #89	; 0x59
 80066ae:	d10f      	bne.n	80066d0 <TOUCH_VAL+0x8c>
//		y = adc_arr_val[1];
		y = map(adc_arr_val[1], TS_Ymin, TS_Ymax, 0, 1023);
 80066b0:	4b1c      	ldr	r3, [pc, #112]	; (8006724 <TOUCH_VAL+0xe0>)
 80066b2:	8858      	ldrh	r0, [r3, #2]
 80066b4:	250c      	movs	r5, #12
 80066b6:	197c      	adds	r4, r7, r5
 80066b8:	4a1d      	ldr	r2, [pc, #116]	; (8006730 <TOUCH_VAL+0xec>)
 80066ba:	491e      	ldr	r1, [pc, #120]	; (8006734 <TOUCH_VAL+0xf0>)
 80066bc:	4b1b      	ldr	r3, [pc, #108]	; (800672c <TOUCH_VAL+0xe8>)
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	2300      	movs	r3, #0
 80066c2:	f7fc fed5 	bl	8003470 <map>
 80066c6:	0003      	movs	r3, r0
 80066c8:	8023      	strh	r3, [r4, #0]
		return y;
 80066ca:	197b      	adds	r3, r7, r5
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	e024      	b.n	800671a <TOUCH_VAL+0xd6>
	} else if (c == 'z' || c == 'Z') {
 80066d0:	1dfb      	adds	r3, r7, #7
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	2b7a      	cmp	r3, #122	; 0x7a
 80066d6:	d003      	beq.n	80066e0 <TOUCH_VAL+0x9c>
 80066d8:	1dfb      	adds	r3, r7, #7
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	2b5a      	cmp	r3, #90	; 0x5a
 80066de:	d11c      	bne.n	800671a <TOUCH_VAL+0xd6>
		z = adc_arr_val[1] - adc_arr_val[0];
 80066e0:	4b10      	ldr	r3, [pc, #64]	; (8006724 <TOUCH_VAL+0xe0>)
 80066e2:	8859      	ldrh	r1, [r3, #2]
 80066e4:	4b0f      	ldr	r3, [pc, #60]	; (8006724 <TOUCH_VAL+0xe0>)
 80066e6:	881a      	ldrh	r2, [r3, #0]
 80066e8:	240a      	movs	r4, #10
 80066ea:	193b      	adds	r3, r7, r4
 80066ec:	1a8a      	subs	r2, r1, r2
 80066ee:	801a      	strh	r2, [r3, #0]
		z = map(adc_arr_val[1] - adc_arr_val[0], 1700, 3500, 100, 1000);
 80066f0:	4b0c      	ldr	r3, [pc, #48]	; (8006724 <TOUCH_VAL+0xe0>)
 80066f2:	885a      	ldrh	r2, [r3, #2]
 80066f4:	4b0b      	ldr	r3, [pc, #44]	; (8006724 <TOUCH_VAL+0xe0>)
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	b298      	uxth	r0, r3
 80066fc:	0025      	movs	r5, r4
 80066fe:	193c      	adds	r4, r7, r4
 8006700:	4a0d      	ldr	r2, [pc, #52]	; (8006738 <TOUCH_VAL+0xf4>)
 8006702:	490e      	ldr	r1, [pc, #56]	; (800673c <TOUCH_VAL+0xf8>)
 8006704:	23fa      	movs	r3, #250	; 0xfa
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	2364      	movs	r3, #100	; 0x64
 800670c:	f7fc feb0 	bl	8003470 <map>
 8006710:	0003      	movs	r3, r0
 8006712:	8023      	strh	r3, [r4, #0]
		return z;
 8006714:	197b      	adds	r3, r7, r5
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	e7ff      	b.n	800671a <TOUCH_VAL+0xd6>
	}
}
 800671a:	0018      	movs	r0, r3
 800671c:	46bd      	mov	sp, r7
 800671e:	b004      	add	sp, #16
 8006720:	bdb0      	pop	{r4, r5, r7, pc}
 8006722:	46c0      	nop			; (mov r8, r8)
 8006724:	20000914 	.word	0x20000914
 8006728:	00000514 	.word	0x00000514
 800672c:	000003ff 	.word	0x000003ff
 8006730:	00000fff 	.word	0x00000fff
 8006734:	00000bb8 	.word	0x00000bb8
 8006738:	00000dac 	.word	0x00000dac
 800673c:	000006a4 	.word	0x000006a4

08006740 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006740:	b5b0      	push	{r4, r5, r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	0002      	movs	r2, r0
 8006748:	1dfb      	adds	r3, r7, #7
 800674a:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800674c:	1dfb      	adds	r3, r7, #7
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	4a0b      	ldr	r2, [pc, #44]	; (8006780 <disk_status+0x40>)
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	18d3      	adds	r3, r2, r3
 8006756:	3304      	adds	r3, #4
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	1dfa      	adds	r2, r7, #7
 800675e:	7812      	ldrb	r2, [r2, #0]
 8006760:	4907      	ldr	r1, [pc, #28]	; (8006780 <disk_status+0x40>)
 8006762:	188a      	adds	r2, r1, r2
 8006764:	7a12      	ldrb	r2, [r2, #8]
 8006766:	250f      	movs	r5, #15
 8006768:	197c      	adds	r4, r7, r5
 800676a:	0010      	movs	r0, r2
 800676c:	4798      	blx	r3
 800676e:	0003      	movs	r3, r0
 8006770:	7023      	strb	r3, [r4, #0]
  return stat;
 8006772:	197b      	adds	r3, r7, r5
 8006774:	781b      	ldrb	r3, [r3, #0]
}
 8006776:	0018      	movs	r0, r3
 8006778:	46bd      	mov	sp, r7
 800677a:	b004      	add	sp, #16
 800677c:	bdb0      	pop	{r4, r5, r7, pc}
 800677e:	46c0      	nop			; (mov r8, r8)
 8006780:	20000938 	.word	0x20000938

08006784 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006784:	b590      	push	{r4, r7, lr}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	0002      	movs	r2, r0
 800678c:	1dfb      	adds	r3, r7, #7
 800678e:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8006790:	200f      	movs	r0, #15
 8006792:	183b      	adds	r3, r7, r0
 8006794:	2200      	movs	r2, #0
 8006796:	701a      	strb	r2, [r3, #0]
  
  if(disk.is_initialized[pdrv] == 0)
 8006798:	1dfb      	adds	r3, r7, #7
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	4a10      	ldr	r2, [pc, #64]	; (80067e0 <disk_initialize+0x5c>)
 800679e:	5cd3      	ldrb	r3, [r2, r3]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d116      	bne.n	80067d2 <disk_initialize+0x4e>
  { 
    disk.is_initialized[pdrv] = 1;
 80067a4:	1dfb      	adds	r3, r7, #7
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	4a0d      	ldr	r2, [pc, #52]	; (80067e0 <disk_initialize+0x5c>)
 80067aa:	2101      	movs	r1, #1
 80067ac:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80067ae:	1dfb      	adds	r3, r7, #7
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	4a0b      	ldr	r2, [pc, #44]	; (80067e0 <disk_initialize+0x5c>)
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	18d3      	adds	r3, r2, r3
 80067b8:	3304      	adds	r3, #4
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	1dfa      	adds	r2, r7, #7
 80067c0:	7812      	ldrb	r2, [r2, #0]
 80067c2:	4907      	ldr	r1, [pc, #28]	; (80067e0 <disk_initialize+0x5c>)
 80067c4:	188a      	adds	r2, r1, r2
 80067c6:	7a12      	ldrb	r2, [r2, #8]
 80067c8:	183c      	adds	r4, r7, r0
 80067ca:	0010      	movs	r0, r2
 80067cc:	4798      	blx	r3
 80067ce:	0003      	movs	r3, r0
 80067d0:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 80067d2:	230f      	movs	r3, #15
 80067d4:	18fb      	adds	r3, r7, r3
 80067d6:	781b      	ldrb	r3, [r3, #0]
}
 80067d8:	0018      	movs	r0, r3
 80067da:	46bd      	mov	sp, r7
 80067dc:	b005      	add	sp, #20
 80067de:	bd90      	pop	{r4, r7, pc}
 80067e0:	20000938 	.word	0x20000938

080067e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80067e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067e6:	b087      	sub	sp, #28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	607a      	str	r2, [r7, #4]
 80067ee:	603b      	str	r3, [r7, #0]
 80067f0:	210f      	movs	r1, #15
 80067f2:	187b      	adds	r3, r7, r1
 80067f4:	1c02      	adds	r2, r0, #0
 80067f6:	701a      	strb	r2, [r3, #0]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80067f8:	187b      	adds	r3, r7, r1
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	4a0c      	ldr	r2, [pc, #48]	; (8006830 <disk_read+0x4c>)
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	18d3      	adds	r3, r2, r3
 8006802:	3304      	adds	r3, #4
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689d      	ldr	r5, [r3, #8]
 8006808:	187b      	adds	r3, r7, r1
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	4a08      	ldr	r2, [pc, #32]	; (8006830 <disk_read+0x4c>)
 800680e:	18d3      	adds	r3, r2, r3
 8006810:	7a18      	ldrb	r0, [r3, #8]
 8006812:	2617      	movs	r6, #23
 8006814:	19bc      	adds	r4, r7, r6
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	68b9      	ldr	r1, [r7, #8]
 800681c:	47a8      	blx	r5
 800681e:	0003      	movs	r3, r0
 8006820:	7023      	strb	r3, [r4, #0]
  return res;
 8006822:	19bb      	adds	r3, r7, r6
 8006824:	781b      	ldrb	r3, [r3, #0]
}
 8006826:	0018      	movs	r0, r3
 8006828:	46bd      	mov	sp, r7
 800682a:	b007      	add	sp, #28
 800682c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	20000938 	.word	0x20000938

08006834 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60b9      	str	r1, [r7, #8]
 800683c:	607a      	str	r2, [r7, #4]
 800683e:	603b      	str	r3, [r7, #0]
 8006840:	210f      	movs	r1, #15
 8006842:	187b      	adds	r3, r7, r1
 8006844:	1c02      	adds	r2, r0, #0
 8006846:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006848:	187b      	adds	r3, r7, r1
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	4a0c      	ldr	r2, [pc, #48]	; (8006880 <disk_write+0x4c>)
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	18d3      	adds	r3, r2, r3
 8006852:	3304      	adds	r3, #4
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68dd      	ldr	r5, [r3, #12]
 8006858:	187b      	adds	r3, r7, r1
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	4a08      	ldr	r2, [pc, #32]	; (8006880 <disk_write+0x4c>)
 800685e:	18d3      	adds	r3, r2, r3
 8006860:	7a18      	ldrb	r0, [r3, #8]
 8006862:	2617      	movs	r6, #23
 8006864:	19bc      	adds	r4, r7, r6
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	68b9      	ldr	r1, [r7, #8]
 800686c:	47a8      	blx	r5
 800686e:	0003      	movs	r3, r0
 8006870:	7023      	strb	r3, [r4, #0]
  return res;
 8006872:	19bb      	adds	r3, r7, r6
 8006874:	781b      	ldrb	r3, [r3, #0]
}
 8006876:	0018      	movs	r0, r3
 8006878:	46bd      	mov	sp, r7
 800687a:	b007      	add	sp, #28
 800687c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800687e:	46c0      	nop			; (mov r8, r8)
 8006880:	20000938 	.word	0x20000938

08006884 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	2383      	movs	r3, #131	; 0x83
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	58d3      	ldr	r3, [r2, r3]
 8006894:	0018      	movs	r0, r3
 8006896:	f000 ff6b 	bl	8007770 <ff_req_grant>
 800689a:	0003      	movs	r3, r0
}
 800689c:	0018      	movs	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	b002      	add	sp, #8
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	000a      	movs	r2, r1
 80068ae:	1cfb      	adds	r3, r7, #3
 80068b0:	701a      	strb	r2, [r3, #0]
	if (fs &&
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d016      	beq.n	80068e6 <unlock_fs+0x42>
 80068b8:	1cfb      	adds	r3, r7, #3
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b0c      	cmp	r3, #12
 80068be:	d012      	beq.n	80068e6 <unlock_fs+0x42>
		res != FR_NOT_ENABLED &&
 80068c0:	1cfb      	adds	r3, r7, #3
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b0b      	cmp	r3, #11
 80068c6:	d00e      	beq.n	80068e6 <unlock_fs+0x42>
		res != FR_INVALID_DRIVE &&
 80068c8:	1cfb      	adds	r3, r7, #3
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b09      	cmp	r3, #9
 80068ce:	d00a      	beq.n	80068e6 <unlock_fs+0x42>
		res != FR_INVALID_OBJECT &&
 80068d0:	1cfb      	adds	r3, r7, #3
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b0f      	cmp	r3, #15
 80068d6:	d006      	beq.n	80068e6 <unlock_fs+0x42>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	2383      	movs	r3, #131	; 0x83
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	58d3      	ldr	r3, [r2, r3]
 80068e0:	0018      	movs	r0, r3
 80068e2:	f000 ff5b 	bl	800779c <ff_rel_grant>
	}
}
 80068e6:	46c0      	nop			; (mov r8, r8)
 80068e8:	46bd      	mov	sp, r7
 80068ea:	b002      	add	sp, #8
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80068f8:	2300      	movs	r3, #0
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	e014      	b.n	8006928 <clear_lock+0x38>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80068fe:	490e      	ldr	r1, [pc, #56]	; (8006938 <clear_lock+0x48>)
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	0013      	movs	r3, r2
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	189b      	adds	r3, r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	585b      	ldr	r3, [r3, r1]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	429a      	cmp	r2, r3
 8006910:	d107      	bne.n	8006922 <clear_lock+0x32>
 8006912:	4909      	ldr	r1, [pc, #36]	; (8006938 <clear_lock+0x48>)
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	0013      	movs	r3, r2
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	189b      	adds	r3, r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	2200      	movs	r2, #0
 8006920:	505a      	str	r2, [r3, r1]
	for (i = 0; i < _FS_LOCK; i++) {
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3301      	adds	r3, #1
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d9e7      	bls.n	80068fe <clear_lock+0xe>
	}
}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	46c0      	nop			; (mov r8, r8)
 8006932:	46bd      	mov	sp, r7
 8006934:	b004      	add	sp, #16
 8006936:	bd80      	pop	{r7, pc}
 8006938:	20000920 	.word	0x20000920

0800693c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800693c:	b590      	push	{r4, r7, lr}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006944:	240f      	movs	r4, #15
 8006946:	193b      	adds	r3, r7, r4
 8006948:	2200      	movs	r2, #0
 800694a:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	2381      	movs	r3, #129	; 0x81
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	5cd3      	ldrb	r3, [r2, r3]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d03d      	beq.n	80069d4 <sync_window+0x98>
		wsect = fs->winsect;	/* Current sector number */
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	238c      	movs	r3, #140	; 0x8c
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	58d3      	ldr	r3, [r2, r3]
 8006960:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a1f      	ldr	r2, [pc, #124]	; (80069e4 <sync_window+0xa8>)
 8006966:	5c98      	ldrb	r0, [r3, r2]
 8006968:	6879      	ldr	r1, [r7, #4]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	2301      	movs	r3, #1
 800696e:	f7ff ff61 	bl	8006834 <disk_write>
 8006972:	1e03      	subs	r3, r0, #0
 8006974:	d003      	beq.n	800697e <sync_window+0x42>
			res = FR_DISK_ERR;
 8006976:	193b      	adds	r3, r7, r4
 8006978:	2201      	movs	r2, #1
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	e02a      	b.n	80069d4 <sync_window+0x98>
		} else {
			fs->wflag = 0;
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	2381      	movs	r3, #129	; 0x81
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	2100      	movs	r1, #0
 8006986:	54d1      	strb	r1, [r2, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	2389      	movs	r3, #137	; 0x89
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	58d3      	ldr	r3, [r2, r3]
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	1ad2      	subs	r2, r2, r3
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	2387      	movs	r3, #135	; 0x87
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	58cb      	ldr	r3, [r1, r3]
 800699c:	429a      	cmp	r2, r3
 800699e:	d219      	bcs.n	80069d4 <sync_window+0x98>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a11      	ldr	r2, [pc, #68]	; (80069e8 <sync_window+0xac>)
 80069a4:	5c9b      	ldrb	r3, [r3, r2]
 80069a6:	613b      	str	r3, [r7, #16]
 80069a8:	e011      	b.n	80069ce <sync_window+0x92>
					wsect += fs->fsize;
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	2387      	movs	r3, #135	; 0x87
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	58d3      	ldr	r3, [r2, r3]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	18d3      	adds	r3, r2, r3
 80069b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a0a      	ldr	r2, [pc, #40]	; (80069e4 <sync_window+0xa8>)
 80069bc:	5c98      	ldrb	r0, [r3, r2]
 80069be:	6879      	ldr	r1, [r7, #4]
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	2301      	movs	r3, #1
 80069c4:	f7ff ff36 	bl	8006834 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	613b      	str	r3, [r7, #16]
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d8ea      	bhi.n	80069aa <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80069d4:	230f      	movs	r3, #15
 80069d6:	18fb      	adds	r3, r7, r3
 80069d8:	781b      	ldrb	r3, [r3, #0]
}
 80069da:	0018      	movs	r0, r3
 80069dc:	46bd      	mov	sp, r7
 80069de:	b007      	add	sp, #28
 80069e0:	bd90      	pop	{r4, r7, pc}
 80069e2:	46c0      	nop			; (mov r8, r8)
 80069e4:	00000201 	.word	0x00000201
 80069e8:	00000203 	.word	0x00000203

080069ec <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80069ec:	b5b0      	push	{r4, r5, r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80069f6:	240f      	movs	r4, #15
 80069f8:	193b      	adds	r3, r7, r4
 80069fa:	2200      	movs	r2, #0
 80069fc:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	238c      	movs	r3, #140	; 0x8c
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	58d3      	ldr	r3, [r2, r3]
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d021      	beq.n	8006a50 <move_window+0x64>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006a0c:	0025      	movs	r5, r4
 8006a0e:	193c      	adds	r4, r7, r4
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	0018      	movs	r0, r3
 8006a14:	f7ff ff92 	bl	800693c <sync_window>
 8006a18:	0003      	movs	r3, r0
 8006a1a:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006a1c:	002c      	movs	r4, r5
 8006a1e:	193b      	adds	r3, r7, r4
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d114      	bne.n	8006a50 <move_window+0x64>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a0d      	ldr	r2, [pc, #52]	; (8006a60 <move_window+0x74>)
 8006a2a:	5c98      	ldrb	r0, [r3, r2]
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	2301      	movs	r3, #1
 8006a32:	f7ff fed7 	bl	80067e4 <disk_read>
 8006a36:	1e03      	subs	r3, r0, #0
 8006a38:	d005      	beq.n	8006a46 <move_window+0x5a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	425b      	negs	r3, r3
 8006a3e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006a40:	193b      	adds	r3, r7, r4
 8006a42:	2201      	movs	r2, #1
 8006a44:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	238c      	movs	r3, #140	; 0x8c
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	50d1      	str	r1, [r2, r3]
		}
	}
	return res;
 8006a50:	230f      	movs	r3, #15
 8006a52:	18fb      	adds	r3, r7, r3
 8006a54:	781b      	ldrb	r3, [r3, #0]
}
 8006a56:	0018      	movs	r0, r3
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	b004      	add	sp, #16
 8006a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8006a5e:	46c0      	nop			; (mov r8, r8)
 8006a60:	00000201 	.word	0x00000201

08006a64 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d906      	bls.n	8006a82 <get_fat+0x1e>
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	2386      	movs	r3, #134	; 0x86
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	58d3      	ldr	r3, [r2, r3]
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d302      	bcc.n	8006a88 <get_fat+0x24>
		val = 1;	/* Internal error */
 8006a82:	2301      	movs	r3, #1
 8006a84:	617b      	str	r3, [r7, #20]
 8006a86:	e0aa      	b.n	8006bde <get_fat+0x17a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006a88:	2301      	movs	r3, #1
 8006a8a:	425b      	negs	r3, r3
 8006a8c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	2380      	movs	r3, #128	; 0x80
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	5cd3      	ldrb	r3, [r2, r3]
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d100      	bne.n	8006a9c <get_fat+0x38>
 8006a9a:	e06b      	b.n	8006b74 <get_fat+0x110>
 8006a9c:	dd00      	ble.n	8006aa0 <get_fat+0x3c>
 8006a9e:	e094      	b.n	8006bca <get_fat+0x166>
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d002      	beq.n	8006aaa <get_fat+0x46>
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d042      	beq.n	8006b2e <get_fat+0xca>
 8006aa8:	e08f      	b.n	8006bca <get_fat+0x166>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	085b      	lsrs	r3, r3, #1
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	18d3      	adds	r3, r2, r3
 8006ab6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	2389      	movs	r3, #137	; 0x89
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	58d2      	ldr	r2, [r2, r3]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	0a5b      	lsrs	r3, r3, #9
 8006ac4:	18d2      	adds	r2, r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	0011      	movs	r1, r2
 8006aca:	0018      	movs	r0, r3
 8006acc:	f7ff ff8e 	bl	80069ec <move_window>
 8006ad0:	1e03      	subs	r3, r0, #0
 8006ad2:	d000      	beq.n	8006ad6 <get_fat+0x72>
 8006ad4:	e07c      	b.n	8006bd0 <get_fat+0x16c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	60fa      	str	r2, [r7, #12]
 8006adc:	05db      	lsls	r3, r3, #23
 8006ade:	0ddb      	lsrs	r3, r3, #23
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	5cd3      	ldrb	r3, [r2, r3]
 8006ae4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	2389      	movs	r3, #137	; 0x89
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	58d2      	ldr	r2, [r2, r3]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	0a5b      	lsrs	r3, r3, #9
 8006af2:	18d2      	adds	r2, r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	0011      	movs	r1, r2
 8006af8:	0018      	movs	r0, r3
 8006afa:	f7ff ff77 	bl	80069ec <move_window>
 8006afe:	1e03      	subs	r3, r0, #0
 8006b00:	d168      	bne.n	8006bd4 <get_fat+0x170>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	05db      	lsls	r3, r3, #23
 8006b06:	0ddb      	lsrs	r3, r3, #23
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	5cd3      	ldrb	r3, [r2, r3]
 8006b0c:	021b      	lsls	r3, r3, #8
 8006b0e:	001a      	movs	r2, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	d002      	beq.n	8006b24 <get_fat+0xc0>
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	091b      	lsrs	r3, r3, #4
 8006b22:	e002      	b.n	8006b2a <get_fat+0xc6>
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	051b      	lsls	r3, r3, #20
 8006b28:	0d1b      	lsrs	r3, r3, #20
 8006b2a:	617b      	str	r3, [r7, #20]
			break;
 8006b2c:	e057      	b.n	8006bde <get_fat+0x17a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	2389      	movs	r3, #137	; 0x89
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	58d2      	ldr	r2, [r2, r3]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	0a1b      	lsrs	r3, r3, #8
 8006b3a:	18d2      	adds	r2, r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	0011      	movs	r1, r2
 8006b40:	0018      	movs	r0, r3
 8006b42:	f7ff ff53 	bl	80069ec <move_window>
 8006b46:	1e03      	subs	r3, r0, #0
 8006b48:	d146      	bne.n	8006bd8 <get_fat+0x174>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	005a      	lsls	r2, r3, #1
 8006b4e:	23ff      	movs	r3, #255	; 0xff
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	4013      	ands	r3, r2
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	18d3      	adds	r3, r2, r3
 8006b58:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	021b      	lsls	r3, r3, #8
 8006b62:	b21a      	sxth	r2, r3
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	b21b      	sxth	r3, r3
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	b21b      	sxth	r3, r3
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	617b      	str	r3, [r7, #20]
			break;
 8006b72:	e034      	b.n	8006bde <get_fat+0x17a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	2389      	movs	r3, #137	; 0x89
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	58d2      	ldr	r2, [r2, r3]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	09db      	lsrs	r3, r3, #7
 8006b80:	18d2      	adds	r2, r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	0011      	movs	r1, r2
 8006b86:	0018      	movs	r0, r3
 8006b88:	f7ff ff30 	bl	80069ec <move_window>
 8006b8c:	1e03      	subs	r3, r0, #0
 8006b8e:	d125      	bne.n	8006bdc <get_fat+0x178>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	009a      	lsls	r2, r3, #2
 8006b94:	23fe      	movs	r3, #254	; 0xfe
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	4013      	ands	r3, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	18d3      	adds	r3, r2, r3
 8006b9e:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	3303      	adds	r3, #3
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	061a      	lsls	r2, r3, #24
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	3302      	adds	r3, #2
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	041b      	lsls	r3, r3, #16
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	3201      	adds	r2, #1
 8006bb6:	7812      	ldrb	r2, [r2, #0]
 8006bb8:	0212      	lsls	r2, r2, #8
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	7812      	ldrb	r2, [r2, #0]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	091b      	lsrs	r3, r3, #4
 8006bc6:	617b      	str	r3, [r7, #20]
			break;
 8006bc8:	e009      	b.n	8006bde <get_fat+0x17a>

		default:
			val = 1;	/* Internal error */
 8006bca:	2301      	movs	r3, #1
 8006bcc:	617b      	str	r3, [r7, #20]
 8006bce:	e006      	b.n	8006bde <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bd0:	46c0      	nop			; (mov r8, r8)
 8006bd2:	e004      	b.n	8006bde <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bd4:	46c0      	nop			; (mov r8, r8)
 8006bd6:	e002      	b.n	8006bde <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bd8:	46c0      	nop			; (mov r8, r8)
 8006bda:	e000      	b.n	8006bde <get_fat+0x17a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006bdc:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8006bde:	697b      	ldr	r3, [r7, #20]
}
 8006be0:	0018      	movs	r0, r3
 8006be2:	46bd      	mov	sp, r7
 8006be4:	b006      	add	sp, #24
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	425b      	negs	r3, r3
 8006bf4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d031      	beq.n	8006c62 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	e002      	b.n	8006c0c <get_ldnumber+0x24>
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b20      	cmp	r3, #32
 8006c12:	d903      	bls.n	8006c1c <get_ldnumber+0x34>
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b3a      	cmp	r3, #58	; 0x3a
 8006c1a:	d1f4      	bne.n	8006c06 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b3a      	cmp	r3, #58	; 0x3a
 8006c22:	d11c      	bne.n	8006c5e <get_ldnumber+0x76>
			tp = *path;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	60fa      	str	r2, [r7, #12]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	3b30      	subs	r3, #48	; 0x30
 8006c34:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b09      	cmp	r3, #9
 8006c3a:	d80e      	bhi.n	8006c5a <get_ldnumber+0x72>
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d10a      	bne.n	8006c5a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d107      	bne.n	8006c5a <get_ldnumber+0x72>
					vol = (int)i;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	3301      	adds	r3, #1
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	e002      	b.n	8006c64 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006c5e:	2300      	movs	r3, #0
 8006c60:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006c62:	693b      	ldr	r3, [r7, #16]
}
 8006c64:	0018      	movs	r0, r3
 8006c66:	46bd      	mov	sp, r7
 8006c68:	b006      	add	sp, #24
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	2381      	movs	r3, #129	; 0x81
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	54d1      	strb	r1, [r2, r3]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	238c      	movs	r3, #140	; 0x8c
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	2101      	movs	r1, #1
 8006c88:	4249      	negs	r1, r1
 8006c8a:	50d1      	str	r1, [r2, r3]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	0011      	movs	r1, r2
 8006c92:	0018      	movs	r0, r3
 8006c94:	f7ff feaa 	bl	80069ec <move_window>
 8006c98:	1e03      	subs	r3, r0, #0
 8006c9a:	d001      	beq.n	8006ca0 <check_fs+0x34>
		return 3;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e04b      	b.n	8006d38 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	33ff      	adds	r3, #255	; 0xff
 8006ca4:	33ff      	adds	r3, #255	; 0xff
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	021b      	lsls	r3, r3, #8
 8006cac:	b21a      	sxth	r2, r3
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	23ff      	movs	r3, #255	; 0xff
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	5ccb      	ldrb	r3, [r1, r3]
 8006cb6:	b21b      	sxth	r3, r3
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	b21b      	sxth	r3, r3
 8006cbc:	4a20      	ldr	r2, [pc, #128]	; (8006d40 <check_fs+0xd4>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d001      	beq.n	8006cc6 <check_fs+0x5a>
		return 2;
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	e038      	b.n	8006d38 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3336      	adds	r3, #54	; 0x36
 8006cca:	3303      	adds	r3, #3
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	061a      	lsls	r2, r3, #24
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3336      	adds	r3, #54	; 0x36
 8006cd4:	3302      	adds	r3, #2
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	041b      	lsls	r3, r3, #16
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	3236      	adds	r2, #54	; 0x36
 8006ce0:	3201      	adds	r2, #1
 8006ce2:	7812      	ldrb	r2, [r2, #0]
 8006ce4:	0212      	lsls	r2, r2, #8
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	2136      	movs	r1, #54	; 0x36
 8006cec:	5c52      	ldrb	r2, [r2, r1]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	021b      	lsls	r3, r3, #8
 8006cf2:	0a1b      	lsrs	r3, r3, #8
 8006cf4:	4a13      	ldr	r2, [pc, #76]	; (8006d44 <check_fs+0xd8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d101      	bne.n	8006cfe <check_fs+0x92>
		return 0;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e01c      	b.n	8006d38 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	3352      	adds	r3, #82	; 0x52
 8006d02:	3303      	adds	r3, #3
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	061a      	lsls	r2, r3, #24
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3352      	adds	r3, #82	; 0x52
 8006d0c:	3302      	adds	r3, #2
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	041b      	lsls	r3, r3, #16
 8006d12:	4313      	orrs	r3, r2
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	3252      	adds	r2, #82	; 0x52
 8006d18:	3201      	adds	r2, #1
 8006d1a:	7812      	ldrb	r2, [r2, #0]
 8006d1c:	0212      	lsls	r2, r2, #8
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	2152      	movs	r1, #82	; 0x52
 8006d24:	5c52      	ldrb	r2, [r2, r1]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	021b      	lsls	r3, r3, #8
 8006d2a:	0a1b      	lsrs	r3, r3, #8
 8006d2c:	4a05      	ldr	r2, [pc, #20]	; (8006d44 <check_fs+0xd8>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d101      	bne.n	8006d36 <check_fs+0xca>
		return 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	e000      	b.n	8006d38 <check_fs+0xcc>

	return 1;
 8006d36:	2301      	movs	r3, #1
}
 8006d38:	0018      	movs	r0, r3
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	b002      	add	sp, #8
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	ffffaa55 	.word	0xffffaa55
 8006d44:	00544146 	.word	0x00544146

08006d48 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006d48:	b5b0      	push	{r4, r5, r7, lr}
 8006d4a:	b096      	sub	sp, #88	; 0x58
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	1dfb      	adds	r3, r7, #7
 8006d54:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f7ff ff42 	bl	8006be8 <get_ldnumber>
 8006d64:	0003      	movs	r3, r0
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	da01      	bge.n	8006d72 <find_volume+0x2a>
 8006d6e:	230b      	movs	r3, #11
 8006d70:	e2fa      	b.n	8007368 <find_volume+0x620>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006d72:	4bd3      	ldr	r3, [pc, #844]	; (80070c0 <find_volume+0x378>)
 8006d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d76:	0092      	lsls	r2, r2, #2
 8006d78:	58d3      	ldr	r3, [r2, r3]
 8006d7a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <find_volume+0x3e>
 8006d82:	230c      	movs	r3, #12
 8006d84:	e2f0      	b.n	8007368 <find_volume+0x620>

	ENTER_FF(fs);						/* Lock the volume */
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	0018      	movs	r0, r3
 8006d8a:	f7ff fd7b 	bl	8006884 <lock_fs>
 8006d8e:	1e03      	subs	r3, r0, #0
 8006d90:	d101      	bne.n	8006d96 <find_volume+0x4e>
 8006d92:	230f      	movs	r3, #15
 8006d94:	e2e8      	b.n	8007368 <find_volume+0x620>
	*rfs = fs;							/* Return pointer to the file system object */
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d9a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006d9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d9e:	2380      	movs	r3, #128	; 0x80
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	5cd3      	ldrb	r3, [r2, r3]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d01c      	beq.n	8006de2 <find_volume+0x9a>
		stat = disk_status(fs->drv);
 8006da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006daa:	4ac6      	ldr	r2, [pc, #792]	; (80070c4 <find_volume+0x37c>)
 8006dac:	5c9b      	ldrb	r3, [r3, r2]
 8006dae:	2537      	movs	r5, #55	; 0x37
 8006db0:	197c      	adds	r4, r7, r5
 8006db2:	0018      	movs	r0, r3
 8006db4:	f7ff fcc4 	bl	8006740 <disk_status>
 8006db8:	0003      	movs	r3, r0
 8006dba:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006dbc:	0029      	movs	r1, r5
 8006dbe:	187b      	adds	r3, r7, r1
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	d10c      	bne.n	8006de2 <find_volume+0x9a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006dc8:	1dfb      	adds	r3, r7, #7
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d006      	beq.n	8006dde <find_volume+0x96>
 8006dd0:	187b      	adds	r3, r7, r1
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2204      	movs	r2, #4
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	d001      	beq.n	8006dde <find_volume+0x96>
				return FR_WRITE_PROTECTED;
 8006dda:	230a      	movs	r3, #10
 8006ddc:	e2c4      	b.n	8007368 <find_volume+0x620>
			return FR_OK;				/* The file system object is valid */
 8006dde:	2300      	movs	r3, #0
 8006de0:	e2c2      	b.n	8007368 <find_volume+0x620>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006de4:	2380      	movs	r3, #128	; 0x80
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	2100      	movs	r1, #0
 8006dea:	54d1      	strb	r1, [r2, r3]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dee:	b2d9      	uxtb	r1, r3
 8006df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df2:	4ab4      	ldr	r2, [pc, #720]	; (80070c4 <find_volume+0x37c>)
 8006df4:	5499      	strb	r1, [r3, r2]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df8:	4ab2      	ldr	r2, [pc, #712]	; (80070c4 <find_volume+0x37c>)
 8006dfa:	5c9b      	ldrb	r3, [r3, r2]
 8006dfc:	2537      	movs	r5, #55	; 0x37
 8006dfe:	197c      	adds	r4, r7, r5
 8006e00:	0018      	movs	r0, r3
 8006e02:	f7ff fcbf 	bl	8006784 <disk_initialize>
 8006e06:	0003      	movs	r3, r0
 8006e08:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006e0a:	197b      	adds	r3, r7, r5
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	4013      	ands	r3, r2
 8006e12:	d001      	beq.n	8006e18 <find_volume+0xd0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006e14:	2303      	movs	r3, #3
 8006e16:	e2a7      	b.n	8007368 <find_volume+0x620>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006e18:	1dfb      	adds	r3, r7, #7
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d007      	beq.n	8006e30 <find_volume+0xe8>
 8006e20:	2337      	movs	r3, #55	; 0x37
 8006e22:	18fb      	adds	r3, r7, r3
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	2204      	movs	r2, #4
 8006e28:	4013      	ands	r3, r2
 8006e2a:	d001      	beq.n	8006e30 <find_volume+0xe8>
		return FR_WRITE_PROTECTED;
 8006e2c:	230a      	movs	r3, #10
 8006e2e:	e29b      	b.n	8007368 <find_volume+0x620>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006e30:	2300      	movs	r3, #0
 8006e32:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006e34:	2557      	movs	r5, #87	; 0x57
 8006e36:	197c      	adds	r4, r7, r5
 8006e38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	0011      	movs	r1, r2
 8006e3e:	0018      	movs	r0, r3
 8006e40:	f7ff ff14 	bl	8006c6c <check_fs>
 8006e44:	0003      	movs	r3, r0
 8006e46:	7023      	strb	r3, [r4, #0]
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006e48:	197b      	adds	r3, r7, r5
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d155      	bne.n	8006efc <find_volume+0x1b4>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006e50:	2300      	movs	r3, #0
 8006e52:	643b      	str	r3, [r7, #64]	; 0x40
 8006e54:	e027      	b.n	8006ea6 <find_volume+0x15e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e5a:	011b      	lsls	r3, r3, #4
 8006e5c:	33bf      	adds	r3, #191	; 0xbf
 8006e5e:	33ff      	adds	r3, #255	; 0xff
 8006e60:	18d3      	adds	r3, r2, r3
 8006e62:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e66:	3304      	adds	r3, #4
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d012      	beq.n	8006e94 <find_volume+0x14c>
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e70:	330b      	adds	r3, #11
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	061a      	lsls	r2, r3, #24
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	330a      	adds	r3, #10
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	041b      	lsls	r3, r3, #16
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e82:	3209      	adds	r2, #9
 8006e84:	7812      	ldrb	r2, [r2, #0]
 8006e86:	0212      	lsls	r2, r2, #8
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e8c:	3208      	adds	r2, #8
 8006e8e:	7812      	ldrb	r2, [r2, #0]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	e000      	b.n	8006e96 <find_volume+0x14e>
 8006e94:	2300      	movs	r3, #0
 8006e96:	2214      	movs	r2, #20
 8006e98:	18ba      	adds	r2, r7, r2
 8006e9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e9c:	0089      	lsls	r1, r1, #2
 8006e9e:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d9d4      	bls.n	8006e56 <find_volume+0x10e>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006eac:	2300      	movs	r3, #0
 8006eae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <find_volume+0x174>
 8006eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006ebc:	2314      	movs	r3, #20
 8006ebe:	18fb      	adds	r3, r7, r3
 8006ec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ec2:	0092      	lsls	r2, r2, #2
 8006ec4:	58d3      	ldr	r3, [r2, r3]
 8006ec6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d008      	beq.n	8006ee0 <find_volume+0x198>
 8006ece:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	0011      	movs	r1, r2
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	f7ff fec9 	bl	8006c6c <check_fs>
 8006eda:	0003      	movs	r3, r0
 8006edc:	001a      	movs	r2, r3
 8006ede:	e000      	b.n	8006ee2 <find_volume+0x19a>
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	2157      	movs	r1, #87	; 0x57
 8006ee4:	187b      	adds	r3, r7, r1
 8006ee6:	701a      	strb	r2, [r3, #0]
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006ee8:	187b      	adds	r3, r7, r1
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d005      	beq.n	8006efc <find_volume+0x1b4>
 8006ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef8:	2b03      	cmp	r3, #3
 8006efa:	d9df      	bls.n	8006ebc <find_volume+0x174>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006efc:	2357      	movs	r3, #87	; 0x57
 8006efe:	18fb      	adds	r3, r7, r3
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d101      	bne.n	8006f0a <find_volume+0x1c2>
 8006f06:	2301      	movs	r3, #1
 8006f08:	e22e      	b.n	8007368 <find_volume+0x620>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006f0a:	2357      	movs	r3, #87	; 0x57
 8006f0c:	18fb      	adds	r3, r7, r3
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <find_volume+0x1d0>
 8006f14:	230d      	movs	r3, #13
 8006f16:	e227      	b.n	8007368 <find_volume+0x620>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1a:	7b1b      	ldrb	r3, [r3, #12]
 8006f1c:	021b      	lsls	r3, r3, #8
 8006f1e:	b21a      	sxth	r2, r3
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	7adb      	ldrb	r3, [r3, #11]
 8006f24:	b21b      	sxth	r3, r3
 8006f26:	4313      	orrs	r3, r2
 8006f28:	b21a      	sxth	r2, r3
 8006f2a:	2380      	movs	r3, #128	; 0x80
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d001      	beq.n	8006f36 <find_volume+0x1ee>
		return FR_NO_FILESYSTEM;
 8006f32:	230d      	movs	r3, #13
 8006f34:	e218      	b.n	8007368 <find_volume+0x620>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	7ddb      	ldrb	r3, [r3, #23]
 8006f3a:	021b      	lsls	r3, r3, #8
 8006f3c:	b21a      	sxth	r2, r3
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f40:	7d9b      	ldrb	r3, [r3, #22]
 8006f42:	b21b      	sxth	r3, r3
 8006f44:	4313      	orrs	r3, r2
 8006f46:	b21b      	sxth	r3, r3
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d112      	bne.n	8006f78 <find_volume+0x230>
 8006f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f54:	2227      	movs	r2, #39	; 0x27
 8006f56:	5c9b      	ldrb	r3, [r3, r2]
 8006f58:	061a      	lsls	r2, r3, #24
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	2126      	movs	r1, #38	; 0x26
 8006f5e:	5c5b      	ldrb	r3, [r3, r1]
 8006f60:	041b      	lsls	r3, r3, #16
 8006f62:	4313      	orrs	r3, r2
 8006f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f66:	2125      	movs	r1, #37	; 0x25
 8006f68:	5c52      	ldrb	r2, [r2, r1]
 8006f6a:	0212      	lsls	r2, r2, #8
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f70:	2124      	movs	r1, #36	; 0x24
 8006f72:	5c52      	ldrb	r2, [r2, r1]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006f78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f7a:	2387      	movs	r3, #135	; 0x87
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006f80:	50d1      	str	r1, [r2, r3]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f84:	7c19      	ldrb	r1, [r3, #16]
 8006f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f88:	4a4f      	ldr	r2, [pc, #316]	; (80070c8 <find_volume+0x380>)
 8006f8a:	5499      	strb	r1, [r3, r2]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	4a4e      	ldr	r2, [pc, #312]	; (80070c8 <find_volume+0x380>)
 8006f90:	5c9b      	ldrb	r3, [r3, r2]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d006      	beq.n	8006fa4 <find_volume+0x25c>
 8006f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f98:	4a4b      	ldr	r2, [pc, #300]	; (80070c8 <find_volume+0x380>)
 8006f9a:	5c9b      	ldrb	r3, [r3, r2]
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d001      	beq.n	8006fa4 <find_volume+0x25c>
		return FR_NO_FILESYSTEM;
 8006fa0:	230d      	movs	r3, #13
 8006fa2:	e1e1      	b.n	8007368 <find_volume+0x620>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa6:	4a48      	ldr	r2, [pc, #288]	; (80070c8 <find_volume+0x380>)
 8006fa8:	5c9b      	ldrb	r3, [r3, r2]
 8006faa:	001a      	movs	r2, r3
 8006fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fae:	4353      	muls	r3, r2
 8006fb0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	7b59      	ldrb	r1, [r3, #13]
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	4a44      	ldr	r2, [pc, #272]	; (80070cc <find_volume+0x384>)
 8006fba:	5499      	strb	r1, [r3, r2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	4a43      	ldr	r2, [pc, #268]	; (80070cc <find_volume+0x384>)
 8006fc0:	5c9b      	ldrb	r3, [r3, r2]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d009      	beq.n	8006fda <find_volume+0x292>
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	4a40      	ldr	r2, [pc, #256]	; (80070cc <find_volume+0x384>)
 8006fca:	5c9b      	ldrb	r3, [r3, r2]
 8006fcc:	0019      	movs	r1, r3
 8006fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd0:	4a3e      	ldr	r2, [pc, #248]	; (80070cc <find_volume+0x384>)
 8006fd2:	5c9b      	ldrb	r3, [r3, r2]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	400b      	ands	r3, r1
 8006fd8:	d001      	beq.n	8006fde <find_volume+0x296>
		return FR_NO_FILESYSTEM;
 8006fda:	230d      	movs	r3, #13
 8006fdc:	e1c4      	b.n	8007368 <find_volume+0x620>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	7c9b      	ldrb	r3, [r3, #18]
 8006fe2:	021b      	lsls	r3, r3, #8
 8006fe4:	b21a      	sxth	r2, r3
 8006fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe8:	7c5b      	ldrb	r3, [r3, #17]
 8006fea:	b21b      	sxth	r3, r3
 8006fec:	4313      	orrs	r3, r2
 8006fee:	b21b      	sxth	r3, r3
 8006ff0:	b299      	uxth	r1, r3
 8006ff2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ff4:	2382      	movs	r3, #130	; 0x82
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	52d1      	strh	r1, [r2, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006ffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ffc:	2382      	movs	r3, #130	; 0x82
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	5ad3      	ldrh	r3, [r2, r3]
 8007002:	220f      	movs	r2, #15
 8007004:	4013      	ands	r3, r2
 8007006:	b29b      	uxth	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <find_volume+0x2c8>
		return FR_NO_FILESYSTEM;
 800700c:	230d      	movs	r3, #13
 800700e:	e1ab      	b.n	8007368 <find_volume+0x620>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	7d1b      	ldrb	r3, [r3, #20]
 8007014:	021b      	lsls	r3, r3, #8
 8007016:	b21a      	sxth	r2, r3
 8007018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701a:	7cdb      	ldrb	r3, [r3, #19]
 800701c:	b21b      	sxth	r3, r3
 800701e:	4313      	orrs	r3, r2
 8007020:	b21b      	sxth	r3, r3
 8007022:	b29b      	uxth	r3, r3
 8007024:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007028:	2b00      	cmp	r3, #0
 800702a:	d112      	bne.n	8007052 <find_volume+0x30a>
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	2223      	movs	r2, #35	; 0x23
 8007030:	5c9b      	ldrb	r3, [r3, r2]
 8007032:	061a      	lsls	r2, r3, #24
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	2122      	movs	r1, #34	; 0x22
 8007038:	5c5b      	ldrb	r3, [r3, r1]
 800703a:	041b      	lsls	r3, r3, #16
 800703c:	4313      	orrs	r3, r2
 800703e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007040:	2121      	movs	r1, #33	; 0x21
 8007042:	5c52      	ldrb	r2, [r2, r1]
 8007044:	0212      	lsls	r2, r2, #8
 8007046:	4313      	orrs	r3, r2
 8007048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800704a:	2120      	movs	r1, #32
 800704c:	5c52      	ldrb	r2, [r2, r1]
 800704e:	4313      	orrs	r3, r2
 8007050:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8007052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007054:	7bdb      	ldrb	r3, [r3, #15]
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	b21a      	sxth	r2, r3
 800705a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705c:	7b9b      	ldrb	r3, [r3, #14]
 800705e:	b21b      	sxth	r3, r3
 8007060:	4313      	orrs	r3, r2
 8007062:	b21a      	sxth	r2, r3
 8007064:	212e      	movs	r1, #46	; 0x2e
 8007066:	187b      	adds	r3, r7, r1
 8007068:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800706a:	187b      	adds	r3, r7, r1
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <find_volume+0x32e>
 8007072:	230d      	movs	r3, #13
 8007074:	e178      	b.n	8007368 <find_volume+0x620>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8007076:	232e      	movs	r3, #46	; 0x2e
 8007078:	18fb      	adds	r3, r7, r3
 800707a:	881a      	ldrh	r2, [r3, #0]
 800707c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800707e:	18d3      	adds	r3, r2, r3
 8007080:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007082:	2282      	movs	r2, #130	; 0x82
 8007084:	0092      	lsls	r2, r2, #2
 8007086:	5a8a      	ldrh	r2, [r1, r2]
 8007088:	0912      	lsrs	r2, r2, #4
 800708a:	b292      	uxth	r2, r2
 800708c:	189b      	adds	r3, r3, r2
 800708e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007094:	429a      	cmp	r2, r3
 8007096:	d201      	bcs.n	800709c <find_volume+0x354>
 8007098:	230d      	movs	r3, #13
 800709a:	e165      	b.n	8007368 <find_volume+0x620>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800709c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	1ad2      	subs	r2, r2, r3
 80070a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a4:	4909      	ldr	r1, [pc, #36]	; (80070cc <find_volume+0x384>)
 80070a6:	5c5b      	ldrb	r3, [r3, r1]
 80070a8:	0019      	movs	r1, r3
 80070aa:	0010      	movs	r0, r2
 80070ac:	f7f9 f83e 	bl	800012c <__udivsi3>
 80070b0:	0003      	movs	r3, r0
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10a      	bne.n	80070d0 <find_volume+0x388>
 80070ba:	230d      	movs	r3, #13
 80070bc:	e154      	b.n	8007368 <find_volume+0x620>
 80070be:	46c0      	nop			; (mov r8, r8)
 80070c0:	20000918 	.word	0x20000918
 80070c4:	00000201 	.word	0x00000201
 80070c8:	00000203 	.word	0x00000203
 80070cc:	00000202 	.word	0x00000202
	fmt = FS_FAT12;
 80070d0:	2157      	movs	r1, #87	; 0x57
 80070d2:	187b      	adds	r3, r7, r1
 80070d4:	2201      	movs	r2, #1
 80070d6:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	4aa5      	ldr	r2, [pc, #660]	; (8007370 <find_volume+0x628>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d902      	bls.n	80070e6 <find_volume+0x39e>
 80070e0:	187b      	adds	r3, r7, r1
 80070e2:	2202      	movs	r2, #2
 80070e4:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	4aa2      	ldr	r2, [pc, #648]	; (8007374 <find_volume+0x62c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d903      	bls.n	80070f6 <find_volume+0x3ae>
 80070ee:	2357      	movs	r3, #87	; 0x57
 80070f0:	18fb      	adds	r3, r7, r3
 80070f2:	2203      	movs	r2, #3
 80070f4:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80070f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f8:	1c99      	adds	r1, r3, #2
 80070fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070fc:	2386      	movs	r3, #134	; 0x86
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	50d1      	str	r1, [r2, r3]
	fs->volbase = bsect;								/* Volume start sector */
 8007102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007104:	2388      	movs	r3, #136	; 0x88
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800710a:	50d1      	str	r1, [r2, r3]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800710c:	232e      	movs	r3, #46	; 0x2e
 800710e:	18fb      	adds	r3, r7, r3
 8007110:	881a      	ldrh	r2, [r3, #0]
 8007112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007114:	18d1      	adds	r1, r2, r3
 8007116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007118:	2389      	movs	r3, #137	; 0x89
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	50d1      	str	r1, [r2, r3]
	fs->database = bsect + sysect;						/* Data start sector */
 800711e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	18d1      	adds	r1, r2, r3
 8007124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007126:	238b      	movs	r3, #139	; 0x8b
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	50d1      	str	r1, [r2, r3]
	if (fmt == FS_FAT32) {
 800712c:	2357      	movs	r3, #87	; 0x57
 800712e:	18fb      	adds	r3, r7, r3
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b03      	cmp	r3, #3
 8007134:	d125      	bne.n	8007182 <find_volume+0x43a>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8007136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007138:	2382      	movs	r3, #130	; 0x82
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	5ad3      	ldrh	r3, [r2, r3]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <find_volume+0x3fe>
 8007142:	230d      	movs	r3, #13
 8007144:	e110      	b.n	8007368 <find_volume+0x620>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	222f      	movs	r2, #47	; 0x2f
 800714a:	5c9b      	ldrb	r3, [r3, r2]
 800714c:	061a      	lsls	r2, r3, #24
 800714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007150:	212e      	movs	r1, #46	; 0x2e
 8007152:	5c5b      	ldrb	r3, [r3, r1]
 8007154:	041b      	lsls	r3, r3, #16
 8007156:	4313      	orrs	r3, r2
 8007158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800715a:	212d      	movs	r1, #45	; 0x2d
 800715c:	5c52      	ldrb	r2, [r2, r1]
 800715e:	0212      	lsls	r2, r2, #8
 8007160:	4313      	orrs	r3, r2
 8007162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007164:	212c      	movs	r1, #44	; 0x2c
 8007166:	5c52      	ldrb	r2, [r2, r1]
 8007168:	4313      	orrs	r3, r2
 800716a:	0019      	movs	r1, r3
 800716c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800716e:	238a      	movs	r3, #138	; 0x8a
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	50d1      	str	r1, [r2, r3]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007176:	2386      	movs	r3, #134	; 0x86
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	58d3      	ldr	r3, [r2, r3]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	647b      	str	r3, [r7, #68]	; 0x44
 8007180:	e02c      	b.n	80071dc <find_volume+0x494>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007184:	2382      	movs	r3, #130	; 0x82
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	5ad3      	ldrh	r3, [r2, r3]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <find_volume+0x44a>
 800718e:	230d      	movs	r3, #13
 8007190:	e0ea      	b.n	8007368 <find_volume+0x620>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007192:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007194:	2389      	movs	r3, #137	; 0x89
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	58d2      	ldr	r2, [r2, r3]
 800719a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800719c:	18d1      	adds	r1, r2, r3
 800719e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071a0:	238a      	movs	r3, #138	; 0x8a
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	50d1      	str	r1, [r2, r3]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80071a6:	2357      	movs	r3, #87	; 0x57
 80071a8:	18fb      	adds	r3, r7, r3
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d105      	bne.n	80071bc <find_volume+0x474>
 80071b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071b2:	2386      	movs	r3, #134	; 0x86
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	58d3      	ldr	r3, [r2, r3]
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	e00e      	b.n	80071da <find_volume+0x492>
 80071bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071be:	2386      	movs	r3, #134	; 0x86
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	58d2      	ldr	r2, [r2, r3]
 80071c4:	0013      	movs	r3, r2
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	189b      	adds	r3, r3, r2
 80071ca:	085a      	lsrs	r2, r3, #1
 80071cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071ce:	2386      	movs	r3, #134	; 0x86
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	58cb      	ldr	r3, [r1, r3]
 80071d4:	2101      	movs	r1, #1
 80071d6:	400b      	ands	r3, r1
 80071d8:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80071da:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80071dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071de:	2387      	movs	r3, #135	; 0x87
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	58d2      	ldr	r2, [r2, r3]
 80071e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e6:	4964      	ldr	r1, [pc, #400]	; (8007378 <find_volume+0x630>)
 80071e8:	468c      	mov	ip, r1
 80071ea:	4463      	add	r3, ip
 80071ec:	0a5b      	lsrs	r3, r3, #9
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d201      	bcs.n	80071f6 <find_volume+0x4ae>
		return FR_NO_FILESYSTEM;
 80071f2:	230d      	movs	r3, #13
 80071f4:	e0b8      	b.n	8007368 <find_volume+0x620>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80071f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071f8:	2385      	movs	r3, #133	; 0x85
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	2101      	movs	r1, #1
 80071fe:	4249      	negs	r1, r1
 8007200:	50d1      	str	r1, [r2, r3]
 8007202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007204:	2385      	movs	r3, #133	; 0x85
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	58d1      	ldr	r1, [r2, r3]
 800720a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800720c:	2384      	movs	r3, #132	; 0x84
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	50d1      	str	r1, [r2, r3]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	4a59      	ldr	r2, [pc, #356]	; (800737c <find_volume+0x634>)
 8007216:	2180      	movs	r1, #128	; 0x80
 8007218:	5499      	strb	r1, [r3, r2]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800721a:	2357      	movs	r3, #87	; 0x57
 800721c:	18fb      	adds	r3, r7, r3
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	2b03      	cmp	r3, #3
 8007222:	d000      	beq.n	8007226 <find_volume+0x4de>
 8007224:	e089      	b.n	800733a <find_volume+0x5f2>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8007226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007228:	2231      	movs	r2, #49	; 0x31
 800722a:	5c9b      	ldrb	r3, [r3, r2]
 800722c:	021b      	lsls	r3, r3, #8
 800722e:	b21a      	sxth	r2, r3
 8007230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007232:	2130      	movs	r1, #48	; 0x30
 8007234:	5c5b      	ldrb	r3, [r3, r1]
 8007236:	b21b      	sxth	r3, r3
 8007238:	4313      	orrs	r3, r2
 800723a:	b21b      	sxth	r3, r3
 800723c:	2b01      	cmp	r3, #1
 800723e:	d000      	beq.n	8007242 <find_volume+0x4fa>
 8007240:	e07b      	b.n	800733a <find_volume+0x5f2>
		&& move_window(fs, bsect + 1) == FR_OK)
 8007242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007248:	0011      	movs	r1, r2
 800724a:	0018      	movs	r0, r3
 800724c:	f7ff fbce 	bl	80069ec <move_window>
 8007250:	1e03      	subs	r3, r0, #0
 8007252:	d172      	bne.n	800733a <find_volume+0x5f2>
	{
		fs->fsi_flag = 0;
 8007254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007256:	4a49      	ldr	r2, [pc, #292]	; (800737c <find_volume+0x634>)
 8007258:	2100      	movs	r1, #0
 800725a:	5499      	strb	r1, [r3, r2]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800725c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725e:	4a46      	ldr	r2, [pc, #280]	; (8007378 <find_volume+0x630>)
 8007260:	5c9b      	ldrb	r3, [r3, r2]
 8007262:	021b      	lsls	r3, r3, #8
 8007264:	b21a      	sxth	r2, r3
 8007266:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007268:	23ff      	movs	r3, #255	; 0xff
 800726a:	005b      	lsls	r3, r3, #1
 800726c:	5ccb      	ldrb	r3, [r1, r3]
 800726e:	b21b      	sxth	r3, r3
 8007270:	4313      	orrs	r3, r2
 8007272:	b21b      	sxth	r3, r3
 8007274:	4a42      	ldr	r2, [pc, #264]	; (8007380 <find_volume+0x638>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d15f      	bne.n	800733a <find_volume+0x5f2>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800727a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727c:	78db      	ldrb	r3, [r3, #3]
 800727e:	061a      	lsls	r2, r3, #24
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	789b      	ldrb	r3, [r3, #2]
 8007284:	041b      	lsls	r3, r3, #16
 8007286:	4313      	orrs	r3, r2
 8007288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800728a:	7852      	ldrb	r2, [r2, #1]
 800728c:	0212      	lsls	r2, r2, #8
 800728e:	4313      	orrs	r3, r2
 8007290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007292:	7812      	ldrb	r2, [r2, #0]
 8007294:	4313      	orrs	r3, r2
 8007296:	4a3b      	ldr	r2, [pc, #236]	; (8007384 <find_volume+0x63c>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d14e      	bne.n	800733a <find_volume+0x5f2>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800729c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800729e:	23e8      	movs	r3, #232	; 0xe8
 80072a0:	33ff      	adds	r3, #255	; 0xff
 80072a2:	5cd3      	ldrb	r3, [r2, r3]
 80072a4:	061a      	lsls	r2, r3, #24
 80072a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072a8:	23f3      	movs	r3, #243	; 0xf3
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	5ccb      	ldrb	r3, [r1, r3]
 80072ae:	041b      	lsls	r3, r3, #16
 80072b0:	4313      	orrs	r3, r2
 80072b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072b4:	22e6      	movs	r2, #230	; 0xe6
 80072b6:	32ff      	adds	r2, #255	; 0xff
 80072b8:	5c8a      	ldrb	r2, [r1, r2]
 80072ba:	0212      	lsls	r2, r2, #8
 80072bc:	4313      	orrs	r3, r2
 80072be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072c0:	22f2      	movs	r2, #242	; 0xf2
 80072c2:	0052      	lsls	r2, r2, #1
 80072c4:	5c8a      	ldrb	r2, [r1, r2]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	4a2f      	ldr	r2, [pc, #188]	; (8007388 <find_volume+0x640>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d135      	bne.n	800733a <find_volume+0x5f2>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80072ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072d0:	23ec      	movs	r3, #236	; 0xec
 80072d2:	33ff      	adds	r3, #255	; 0xff
 80072d4:	5cd3      	ldrb	r3, [r2, r3]
 80072d6:	061a      	lsls	r2, r3, #24
 80072d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072da:	23f5      	movs	r3, #245	; 0xf5
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	5ccb      	ldrb	r3, [r1, r3]
 80072e0:	041b      	lsls	r3, r3, #16
 80072e2:	4313      	orrs	r3, r2
 80072e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072e6:	22ea      	movs	r2, #234	; 0xea
 80072e8:	32ff      	adds	r2, #255	; 0xff
 80072ea:	5c8a      	ldrb	r2, [r1, r2]
 80072ec:	0212      	lsls	r2, r2, #8
 80072ee:	4313      	orrs	r3, r2
 80072f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072f2:	22f4      	movs	r2, #244	; 0xf4
 80072f4:	0052      	lsls	r2, r2, #1
 80072f6:	5c8a      	ldrb	r2, [r1, r2]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	0019      	movs	r1, r3
 80072fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072fe:	2385      	movs	r3, #133	; 0x85
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	50d1      	str	r1, [r2, r3]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007306:	23f0      	movs	r3, #240	; 0xf0
 8007308:	33ff      	adds	r3, #255	; 0xff
 800730a:	5cd3      	ldrb	r3, [r2, r3]
 800730c:	061a      	lsls	r2, r3, #24
 800730e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007310:	23f7      	movs	r3, #247	; 0xf7
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	5ccb      	ldrb	r3, [r1, r3]
 8007316:	041b      	lsls	r3, r3, #16
 8007318:	4313      	orrs	r3, r2
 800731a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800731c:	22ee      	movs	r2, #238	; 0xee
 800731e:	32ff      	adds	r2, #255	; 0xff
 8007320:	5c8a      	ldrb	r2, [r1, r2]
 8007322:	0212      	lsls	r2, r2, #8
 8007324:	4313      	orrs	r3, r2
 8007326:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007328:	22f6      	movs	r2, #246	; 0xf6
 800732a:	0052      	lsls	r2, r2, #1
 800732c:	5c8a      	ldrb	r2, [r1, r2]
 800732e:	4313      	orrs	r3, r2
 8007330:	0019      	movs	r1, r3
 8007332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007334:	2384      	movs	r3, #132	; 0x84
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	50d1      	str	r1, [r2, r3]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800733a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800733c:	2357      	movs	r3, #87	; 0x57
 800733e:	18f9      	adds	r1, r7, r3
 8007340:	2380      	movs	r3, #128	; 0x80
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	7809      	ldrb	r1, [r1, #0]
 8007346:	54d1      	strb	r1, [r2, r3]
	fs->id = ++Fsid;	/* File system mount ID */
 8007348:	4b10      	ldr	r3, [pc, #64]	; (800738c <find_volume+0x644>)
 800734a:	881b      	ldrh	r3, [r3, #0]
 800734c:	3301      	adds	r3, #1
 800734e:	b29a      	uxth	r2, r3
 8007350:	4b0e      	ldr	r3, [pc, #56]	; (800738c <find_volume+0x644>)
 8007352:	801a      	strh	r2, [r3, #0]
 8007354:	4b0d      	ldr	r3, [pc, #52]	; (800738c <find_volume+0x644>)
 8007356:	8819      	ldrh	r1, [r3, #0]
 8007358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735a:	4a0d      	ldr	r2, [pc, #52]	; (8007390 <find_volume+0x648>)
 800735c:	5299      	strh	r1, [r3, r2]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800735e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007360:	0018      	movs	r0, r3
 8007362:	f7ff fac5 	bl	80068f0 <clear_lock>
#endif

	return FR_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	0018      	movs	r0, r3
 800736a:	46bd      	mov	sp, r7
 800736c:	b016      	add	sp, #88	; 0x58
 800736e:	bdb0      	pop	{r4, r5, r7, pc}
 8007370:	00000ff5 	.word	0x00000ff5
 8007374:	0000fff5 	.word	0x0000fff5
 8007378:	000001ff 	.word	0x000001ff
 800737c:	00000205 	.word	0x00000205
 8007380:	ffffaa55 	.word	0xffffaa55
 8007384:	41615252 	.word	0x41615252
 8007388:	61417272 	.word	0x61417272
 800738c:	2000091c 	.word	0x2000091c
 8007390:	00000206 	.word	0x00000206

08007394 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007394:	b5b0      	push	{r4, r5, r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	1dfb      	adds	r3, r7, #7
 80073a0:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 80073a6:	2310      	movs	r3, #16
 80073a8:	18fb      	adds	r3, r7, r3
 80073aa:	0018      	movs	r0, r3
 80073ac:	f7ff fc1c 	bl	8006be8 <get_ldnumber>
 80073b0:	0003      	movs	r3, r0
 80073b2:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	da01      	bge.n	80073be <f_mount+0x2a>
 80073ba:	230b      	movs	r3, #11
 80073bc:	e055      	b.n	800746a <f_mount+0xd6>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80073be:	4b2d      	ldr	r3, [pc, #180]	; (8007474 <f_mount+0xe0>)
 80073c0:	69fa      	ldr	r2, [r7, #28]
 80073c2:	0092      	lsls	r2, r2, #2
 80073c4:	58d3      	ldr	r3, [r2, r3]
 80073c6:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d013      	beq.n	80073f6 <f_mount+0x62>
#if _FS_LOCK
		clear_lock(cfs);
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	0018      	movs	r0, r3
 80073d2:	f7ff fa8d 	bl	80068f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80073d6:	69ba      	ldr	r2, [r7, #24]
 80073d8:	2383      	movs	r3, #131	; 0x83
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	58d3      	ldr	r3, [r2, r3]
 80073de:	0018      	movs	r0, r3
 80073e0:	f000 f9b9 	bl	8007756 <ff_del_syncobj>
 80073e4:	1e03      	subs	r3, r0, #0
 80073e6:	d101      	bne.n	80073ec <f_mount+0x58>
 80073e8:	2302      	movs	r3, #2
 80073ea:	e03e      	b.n	800746a <f_mount+0xd6>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	2380      	movs	r3, #128	; 0x80
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	2100      	movs	r1, #0
 80073f4:	54d1      	strb	r1, [r2, r3]
	}

	if (fs) {
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d013      	beq.n	8007424 <f_mount+0x90>
		fs->fs_type = 0;				/* Clear new fs object */
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	2380      	movs	r3, #128	; 0x80
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	2100      	movs	r1, #0
 8007404:	54d1      	strb	r1, [r2, r3]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	b2da      	uxtb	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2183      	movs	r1, #131	; 0x83
 800740e:	0089      	lsls	r1, r1, #2
 8007410:	468c      	mov	ip, r1
 8007412:	4463      	add	r3, ip
 8007414:	0019      	movs	r1, r3
 8007416:	0010      	movs	r0, r2
 8007418:	f000 f97c 	bl	8007714 <ff_cre_syncobj>
 800741c:	1e03      	subs	r3, r0, #0
 800741e:	d101      	bne.n	8007424 <f_mount+0x90>
 8007420:	2302      	movs	r3, #2
 8007422:	e022      	b.n	800746a <f_mount+0xd6>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007424:	68f9      	ldr	r1, [r7, #12]
 8007426:	4b13      	ldr	r3, [pc, #76]	; (8007474 <f_mount+0xe0>)
 8007428:	69fa      	ldr	r2, [r7, #28]
 800742a:	0092      	lsls	r2, r2, #2
 800742c:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d003      	beq.n	800743c <f_mount+0xa8>
 8007434:	1dfb      	adds	r3, r7, #7
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d001      	beq.n	8007440 <f_mount+0xac>
 800743c:	2300      	movs	r3, #0
 800743e:	e014      	b.n	800746a <f_mount+0xd6>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8007440:	2517      	movs	r5, #23
 8007442:	197c      	adds	r4, r7, r5
 8007444:	2308      	movs	r3, #8
 8007446:	18f9      	adds	r1, r7, r3
 8007448:	230c      	movs	r3, #12
 800744a:	18fb      	adds	r3, r7, r3
 800744c:	2200      	movs	r2, #0
 800744e:	0018      	movs	r0, r3
 8007450:	f7ff fc7a 	bl	8006d48 <find_volume>
 8007454:	0003      	movs	r3, r0
 8007456:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	197b      	adds	r3, r7, r5
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	0019      	movs	r1, r3
 8007460:	0010      	movs	r0, r2
 8007462:	f7ff fa1f 	bl	80068a4 <unlock_fs>
 8007466:	197b      	adds	r3, r7, r5
 8007468:	781b      	ldrb	r3, [r3, #0]
}
 800746a:	0018      	movs	r0, r3
 800746c:	46bd      	mov	sp, r7
 800746e:	b008      	add	sp, #32
 8007470:	bdb0      	pop	{r4, r5, r7, pc}
 8007472:	46c0      	nop			; (mov r8, r8)
 8007474:	20000918 	.word	0x20000918

08007478 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007478:	b5b0      	push	{r4, r5, r7, lr}
 800747a:	b08e      	sub	sp, #56	; 0x38
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 8007484:	2537      	movs	r5, #55	; 0x37
 8007486:	197c      	adds	r4, r7, r5
 8007488:	230c      	movs	r3, #12
 800748a:	18f9      	adds	r1, r7, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	0018      	movs	r0, r3
 8007492:	f7ff fc59 	bl	8006d48 <find_volume>
 8007496:	0003      	movs	r3, r0
 8007498:	7023      	strb	r3, [r4, #0]
	fs = *fatfs;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 80074a0:	197b      	adds	r3, r7, r5
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d000      	beq.n	80074aa <f_getfree+0x32>
 80074a8:	e0c0      	b.n	800762c <f_getfree+0x1b4>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 80074aa:	69fa      	ldr	r2, [r7, #28]
 80074ac:	2385      	movs	r3, #133	; 0x85
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	58d2      	ldr	r2, [r2, r3]
 80074b2:	69f9      	ldr	r1, [r7, #28]
 80074b4:	2386      	movs	r3, #134	; 0x86
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	58cb      	ldr	r3, [r1, r3]
 80074ba:	3b02      	subs	r3, #2
 80074bc:	429a      	cmp	r2, r3
 80074be:	d806      	bhi.n	80074ce <f_getfree+0x56>
			*nclst = fs->free_clust;
 80074c0:	69fa      	ldr	r2, [r7, #28]
 80074c2:	2385      	movs	r3, #133	; 0x85
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	58d2      	ldr	r2, [r2, r3]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	e0ae      	b.n	800762c <f_getfree+0x1b4>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 80074ce:	201b      	movs	r0, #27
 80074d0:	183b      	adds	r3, r7, r0
 80074d2:	69f9      	ldr	r1, [r7, #28]
 80074d4:	2280      	movs	r2, #128	; 0x80
 80074d6:	0092      	lsls	r2, r2, #2
 80074d8:	5c8a      	ldrb	r2, [r1, r2]
 80074da:	701a      	strb	r2, [r3, #0]
			n = 0;
 80074dc:	2300      	movs	r3, #0
 80074de:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 80074e0:	183b      	adds	r3, r7, r0
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d12a      	bne.n	800753e <f_getfree+0xc6>
				clst = 2;
 80074e8:	2302      	movs	r3, #2
 80074ea:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 80074ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	0011      	movs	r1, r2
 80074f2:	0018      	movs	r0, r3
 80074f4:	f7ff fab6 	bl	8006a64 <get_fat>
 80074f8:	0003      	movs	r3, r0
 80074fa:	617b      	str	r3, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	3301      	adds	r3, #1
 8007500:	d104      	bne.n	800750c <f_getfree+0x94>
 8007502:	2337      	movs	r3, #55	; 0x37
 8007504:	18fb      	adds	r3, r7, r3
 8007506:	2201      	movs	r2, #1
 8007508:	701a      	strb	r2, [r3, #0]
 800750a:	e07e      	b.n	800760a <f_getfree+0x192>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d104      	bne.n	800751c <f_getfree+0xa4>
 8007512:	2337      	movs	r3, #55	; 0x37
 8007514:	18fb      	adds	r3, r7, r3
 8007516:	2202      	movs	r2, #2
 8007518:	701a      	strb	r2, [r3, #0]
 800751a:	e076      	b.n	800760a <f_getfree+0x192>
					if (stat == 0) n++;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d102      	bne.n	8007528 <f_getfree+0xb0>
 8007522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007524:	3301      	adds	r3, #1
 8007526:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8007528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752a:	3301      	adds	r3, #1
 800752c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800752e:	69fa      	ldr	r2, [r7, #28]
 8007530:	2386      	movs	r3, #134	; 0x86
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	58d3      	ldr	r3, [r2, r3]
 8007536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007538:	429a      	cmp	r2, r3
 800753a:	d3d7      	bcc.n	80074ec <f_getfree+0x74>
 800753c:	e065      	b.n	800760a <f_getfree+0x192>
			} else {
				clst = fs->n_fatent;
 800753e:	69fa      	ldr	r2, [r7, #28]
 8007540:	2386      	movs	r3, #134	; 0x86
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	58d3      	ldr	r3, [r2, r3]
 8007546:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8007548:	69fa      	ldr	r2, [r7, #28]
 800754a:	2389      	movs	r3, #137	; 0x89
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	58d3      	ldr	r3, [r2, r3]
 8007550:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8007552:	2300      	movs	r3, #0
 8007554:	627b      	str	r3, [r7, #36]	; 0x24
 8007556:	2300      	movs	r3, #0
 8007558:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	2b00      	cmp	r3, #0
 800755e:	d114      	bne.n	800758a <f_getfree+0x112>
						res = move_window(fs, sect++);
 8007560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	62ba      	str	r2, [r7, #40]	; 0x28
 8007566:	2537      	movs	r5, #55	; 0x37
 8007568:	197c      	adds	r4, r7, r5
 800756a:	69fa      	ldr	r2, [r7, #28]
 800756c:	0019      	movs	r1, r3
 800756e:	0010      	movs	r0, r2
 8007570:	f7ff fa3c 	bl	80069ec <move_window>
 8007574:	0003      	movs	r3, r0
 8007576:	7023      	strb	r3, [r4, #0]
						if (res != FR_OK) break;
 8007578:	197b      	adds	r3, r7, r5
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d143      	bne.n	8007608 <f_getfree+0x190>
						p = fs->win.d8;
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8007584:	2380      	movs	r3, #128	; 0x80
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 800758a:	231b      	movs	r3, #27
 800758c:	18fb      	adds	r3, r7, r3
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b02      	cmp	r3, #2
 8007592:	d115      	bne.n	80075c0 <f_getfree+0x148>
						if (LD_WORD(p) == 0) n++;
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	3301      	adds	r3, #1
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	021b      	lsls	r3, r3, #8
 800759c:	b21a      	sxth	r2, r3
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	b21b      	sxth	r3, r3
 80075a4:	4313      	orrs	r3, r2
 80075a6:	b21b      	sxth	r3, r3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d102      	bne.n	80075b2 <f_getfree+0x13a>
 80075ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ae:	3301      	adds	r3, #1
 80075b0:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	3302      	adds	r3, #2
 80075b6:	623b      	str	r3, [r7, #32]
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	3b02      	subs	r3, #2
 80075bc:	627b      	str	r3, [r7, #36]	; 0x24
 80075be:	e01c      	b.n	80075fa <f_getfree+0x182>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	3303      	adds	r3, #3
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	061a      	lsls	r2, r3, #24
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	3302      	adds	r3, #2
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	041b      	lsls	r3, r3, #16
 80075d0:	4313      	orrs	r3, r2
 80075d2:	6a3a      	ldr	r2, [r7, #32]
 80075d4:	3201      	adds	r2, #1
 80075d6:	7812      	ldrb	r2, [r2, #0]
 80075d8:	0212      	lsls	r2, r2, #8
 80075da:	4313      	orrs	r3, r2
 80075dc:	6a3a      	ldr	r2, [r7, #32]
 80075de:	7812      	ldrb	r2, [r2, #0]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	011b      	lsls	r3, r3, #4
 80075e4:	091b      	lsrs	r3, r3, #4
 80075e6:	d102      	bne.n	80075ee <f_getfree+0x176>
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	3301      	adds	r3, #1
 80075ec:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	3304      	adds	r3, #4
 80075f2:	623b      	str	r3, [r7, #32]
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	3b04      	subs	r3, #4
 80075f8:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 80075fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fc:	3b01      	subs	r3, #1
 80075fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1a9      	bne.n	800755a <f_getfree+0xe2>
 8007606:	e000      	b.n	800760a <f_getfree+0x192>
						if (res != FR_OK) break;
 8007608:	46c0      	nop			; (mov r8, r8)
			}
			fs->free_clust = n;
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	2385      	movs	r3, #133	; 0x85
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007612:	50d1      	str	r1, [r2, r3]
			fs->fsi_flag |= 1;
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	4a0c      	ldr	r2, [pc, #48]	; (8007648 <f_getfree+0x1d0>)
 8007618:	5c9b      	ldrb	r3, [r3, r2]
 800761a:	2201      	movs	r2, #1
 800761c:	4313      	orrs	r3, r2
 800761e:	b2d9      	uxtb	r1, r3
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	4a09      	ldr	r2, [pc, #36]	; (8007648 <f_getfree+0x1d0>)
 8007624:	5499      	strb	r1, [r3, r2]
			*nclst = n;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800762a:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 800762c:	2437      	movs	r4, #55	; 0x37
 800762e:	193b      	adds	r3, r7, r4
 8007630:	781a      	ldrb	r2, [r3, #0]
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	0011      	movs	r1, r2
 8007636:	0018      	movs	r0, r3
 8007638:	f7ff f934 	bl	80068a4 <unlock_fs>
 800763c:	193b      	adds	r3, r7, r4
 800763e:	781b      	ldrb	r3, [r3, #0]
}
 8007640:	0018      	movs	r0, r3
 8007642:	46bd      	mov	sp, r7
 8007644:	b00e      	add	sp, #56	; 0x38
 8007646:	bdb0      	pop	{r4, r5, r7, pc}
 8007648:	00000205 	.word	0x00000205

0800764c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800764c:	b590      	push	{r4, r7, lr}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	1dfb      	adds	r3, r7, #7
 8007658:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 800765a:	2417      	movs	r4, #23
 800765c:	193b      	adds	r3, r7, r4
 800765e:	2201      	movs	r2, #1
 8007660:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8007662:	2016      	movs	r0, #22
 8007664:	183b      	adds	r3, r7, r0
 8007666:	2200      	movs	r2, #0
 8007668:	701a      	strb	r2, [r3, #0]
  
  if(disk.nbr <= _VOLUMES)
 800766a:	4b21      	ldr	r3, [pc, #132]	; (80076f0 <FATFS_LinkDriverEx+0xa4>)
 800766c:	7a5b      	ldrb	r3, [r3, #9]
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b01      	cmp	r3, #1
 8007672:	d836      	bhi.n	80076e2 <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007674:	4b1e      	ldr	r3, [pc, #120]	; (80076f0 <FATFS_LinkDriverEx+0xa4>)
 8007676:	7a5b      	ldrb	r3, [r3, #9]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	001a      	movs	r2, r3
 800767c:	4b1c      	ldr	r3, [pc, #112]	; (80076f0 <FATFS_LinkDriverEx+0xa4>)
 800767e:	2100      	movs	r1, #0
 8007680:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007682:	4b1b      	ldr	r3, [pc, #108]	; (80076f0 <FATFS_LinkDriverEx+0xa4>)
 8007684:	7a5b      	ldrb	r3, [r3, #9]
 8007686:	b2db      	uxtb	r3, r3
 8007688:	4a19      	ldr	r2, [pc, #100]	; (80076f0 <FATFS_LinkDriverEx+0xa4>)
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	18d3      	adds	r3, r2, r3
 800768e:	3304      	adds	r3, #4
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;  
 8007694:	4b16      	ldr	r3, [pc, #88]	; (80076f0 <FATFS_LinkDriverEx+0xa4>)
 8007696:	7a5b      	ldrb	r3, [r3, #9]
 8007698:	b2db      	uxtb	r3, r3
 800769a:	001a      	movs	r2, r3
 800769c:	4b14      	ldr	r3, [pc, #80]	; (80076f0 <FATFS_LinkDriverEx+0xa4>)
 800769e:	189b      	adds	r3, r3, r2
 80076a0:	1dfa      	adds	r2, r7, #7
 80076a2:	7812      	ldrb	r2, [r2, #0]
 80076a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80076a6:	4b12      	ldr	r3, [pc, #72]	; (80076f0 <FATFS_LinkDriverEx+0xa4>)
 80076a8:	7a5b      	ldrb	r3, [r3, #9]
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	1c5a      	adds	r2, r3, #1
 80076ae:	b2d1      	uxtb	r1, r2
 80076b0:	4a0f      	ldr	r2, [pc, #60]	; (80076f0 <FATFS_LinkDriverEx+0xa4>)
 80076b2:	7251      	strb	r1, [r2, #9]
 80076b4:	183a      	adds	r2, r7, r0
 80076b6:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 80076b8:	183b      	adds	r3, r7, r0
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	3330      	adds	r3, #48	; 0x30
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	3301      	adds	r3, #1
 80076c8:	223a      	movs	r2, #58	; 0x3a
 80076ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	3302      	adds	r3, #2
 80076d0:	222f      	movs	r2, #47	; 0x2f
 80076d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	3303      	adds	r3, #3
 80076d8:	2200      	movs	r2, #0
 80076da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80076dc:	193b      	adds	r3, r7, r4
 80076de:	2200      	movs	r2, #0
 80076e0:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80076e2:	2317      	movs	r3, #23
 80076e4:	18fb      	adds	r3, r7, r3
 80076e6:	781b      	ldrb	r3, [r3, #0]
}
 80076e8:	0018      	movs	r0, r3
 80076ea:	46bd      	mov	sp, r7
 80076ec:	b007      	add	sp, #28
 80076ee:	bd90      	pop	{r4, r7, pc}
 80076f0:	20000938 	.word	0x20000938

080076f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	0018      	movs	r0, r3
 8007706:	f7ff ffa1 	bl	800764c <FATFS_LinkDriverEx>
 800770a:	0003      	movs	r3, r0
}
 800770c:	0018      	movs	r0, r3
 800770e:	46bd      	mov	sp, r7
 8007710:	b002      	add	sp, #8
 8007712:	bd80      	pop	{r7, pc}

08007714 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	0002      	movs	r2, r0
 800771c:	6039      	str	r1, [r7, #0]
 800771e:	1dfb      	adds	r3, r7, #7
 8007720:	701a      	strb	r2, [r3, #0]
  int ret;
  
  osSemaphoreDef(SEM);
 8007722:	210c      	movs	r1, #12
 8007724:	187b      	adds	r3, r7, r1
 8007726:	2200      	movs	r2, #0
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	187b      	adds	r3, r7, r1
 800772c:	2200      	movs	r2, #0
 800772e:	605a      	str	r2, [r3, #4]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 8007730:	187b      	adds	r3, r7, r1
 8007732:	2101      	movs	r1, #1
 8007734:	0018      	movs	r0, r3
 8007736:	f000 f8cd 	bl	80078d4 <osSemaphoreCreate>
 800773a:	0002      	movs	r2, r0
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	1e5a      	subs	r2, r3, #1
 8007746:	4193      	sbcs	r3, r2
 8007748:	b2db      	uxtb	r3, r3
 800774a:	617b      	str	r3, [r7, #20]
  
  return ret;
 800774c:	697b      	ldr	r3, [r7, #20]
}
 800774e:	0018      	movs	r0, r3
 8007750:	46bd      	mov	sp, r7
 8007752:	b006      	add	sp, #24
 8007754:	bd80      	pop	{r7, pc}

08007756 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	0018      	movs	r0, r3
 8007762:	f000 f967 	bl	8007a34 <osSemaphoreDelete>
  return 1;
 8007766:	2301      	movs	r3, #1
}
 8007768:	0018      	movs	r0, r3
 800776a:	46bd      	mov	sp, r7
 800776c:	b002      	add	sp, #8
 800776e:	bd80      	pop	{r7, pc}

08007770 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800777c:	23fa      	movs	r3, #250	; 0xfa
 800777e:	009a      	lsls	r2, r3, #2
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	0011      	movs	r1, r2
 8007784:	0018      	movs	r0, r3
 8007786:	f000 f8d9 	bl	800793c <osSemaphoreWait>
 800778a:	1e03      	subs	r3, r0, #0
 800778c:	d101      	bne.n	8007792 <ff_req_grant+0x22>
  {
    ret = 1;
 800778e:	2301      	movs	r3, #1
 8007790:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8007792:	68fb      	ldr	r3, [r7, #12]
}
 8007794:	0018      	movs	r0, r3
 8007796:	46bd      	mov	sp, r7
 8007798:	b004      	add	sp, #16
 800779a:	bd80      	pop	{r7, pc}

0800779c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	0018      	movs	r0, r3
 80077a8:	f000 f912 	bl	80079d0 <osSemaphoreRelease>
}
 80077ac:	46c0      	nop			; (mov r8, r8)
 80077ae:	46bd      	mov	sp, r7
 80077b0:	b002      	add	sp, #8
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	0002      	movs	r2, r0
 80077bc:	1dbb      	adds	r3, r7, #6
 80077be:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80077c4:	1dbb      	adds	r3, r7, #6
 80077c6:	2200      	movs	r2, #0
 80077c8:	5e9b      	ldrsh	r3, [r3, r2]
 80077ca:	2b84      	cmp	r3, #132	; 0x84
 80077cc:	d006      	beq.n	80077dc <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80077ce:	1dbb      	adds	r3, r7, #6
 80077d0:	2200      	movs	r2, #0
 80077d2:	5e9a      	ldrsh	r2, [r3, r2]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	18d3      	adds	r3, r2, r3
 80077d8:	3303      	adds	r3, #3
 80077da:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80077dc:	68fb      	ldr	r3, [r7, #12]
}
 80077de:	0018      	movs	r0, r3
 80077e0:	46bd      	mov	sp, r7
 80077e2:	b004      	add	sp, #16
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077ec:	f3ef 8305 	mrs	r3, IPSR
 80077f0:	607b      	str	r3, [r7, #4]
  return(result);
 80077f2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80077f4:	1e5a      	subs	r2, r3, #1
 80077f6:	4193      	sbcs	r3, r2
 80077f8:	b2db      	uxtb	r3, r3
}
 80077fa:	0018      	movs	r0, r3
 80077fc:	46bd      	mov	sp, r7
 80077fe:	b002      	add	sp, #8
 8007800:	bd80      	pop	{r7, pc}

08007802 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007806:	f001 f879 	bl	80088fc <vTaskStartScheduler>
  
  return osOK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	0018      	movs	r0, r3
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007812:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007814:	b089      	sub	sp, #36	; 0x24
 8007816:	af04      	add	r7, sp, #16
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d020      	beq.n	8007866 <osThreadCreate+0x54>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d01c      	beq.n	8007866 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685c      	ldr	r4, [r3, #4]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681d      	ldr	r5, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691e      	ldr	r6, [r3, #16]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2208      	movs	r2, #8
 800783c:	5e9b      	ldrsh	r3, [r3, r2]
 800783e:	0018      	movs	r0, r3
 8007840:	f7ff ffb8 	bl	80077b4 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	695a      	ldr	r2, [r3, #20]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	9302      	str	r3, [sp, #8]
 8007850:	9201      	str	r2, [sp, #4]
 8007852:	9000      	str	r0, [sp, #0]
 8007854:	000b      	movs	r3, r1
 8007856:	0032      	movs	r2, r6
 8007858:	0029      	movs	r1, r5
 800785a:	0020      	movs	r0, r4
 800785c:	f000 fea4 	bl	80085a8 <xTaskCreateStatic>
 8007860:	0003      	movs	r3, r0
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	e01d      	b.n	80078a2 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685c      	ldr	r4, [r3, #4]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007872:	b29e      	uxth	r6, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2208      	movs	r2, #8
 8007878:	5e9b      	ldrsh	r3, [r3, r2]
 800787a:	0018      	movs	r0, r3
 800787c:	f7ff ff9a 	bl	80077b4 <makeFreeRtosPriority>
 8007880:	0001      	movs	r1, r0
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	230c      	movs	r3, #12
 8007886:	18fb      	adds	r3, r7, r3
 8007888:	9301      	str	r3, [sp, #4]
 800788a:	9100      	str	r1, [sp, #0]
 800788c:	0013      	movs	r3, r2
 800788e:	0032      	movs	r2, r6
 8007890:	0029      	movs	r1, r5
 8007892:	0020      	movs	r0, r4
 8007894:	f000 fecb 	bl	800862e <xTaskCreate>
 8007898:	0003      	movs	r3, r0
 800789a:	2b01      	cmp	r3, #1
 800789c:	d001      	beq.n	80078a2 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800789e:	2300      	movs	r3, #0
 80078a0:	e000      	b.n	80078a4 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80078a2:	68fb      	ldr	r3, [r7, #12]
}
 80078a4:	0018      	movs	r0, r3
 80078a6:	46bd      	mov	sp, r7
 80078a8:	b005      	add	sp, #20
 80078aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078ac <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <osDelay+0x16>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	e000      	b.n	80078c4 <osDelay+0x18>
 80078c2:	2301      	movs	r3, #1
 80078c4:	0018      	movs	r0, r3
 80078c6:	f000 fff3 	bl	80088b0 <vTaskDelay>
  
  return osOK;
 80078ca:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80078cc:	0018      	movs	r0, r3
 80078ce:	46bd      	mov	sp, r7
 80078d0:	b004      	add	sp, #16
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b086      	sub	sp, #24
 80078d8:	af02      	add	r7, sp, #8
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00f      	beq.n	8007906 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d10a      	bne.n	8007902 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	2203      	movs	r2, #3
 80078f2:	9200      	str	r2, [sp, #0]
 80078f4:	2200      	movs	r2, #0
 80078f6:	2100      	movs	r1, #0
 80078f8:	2001      	movs	r0, #1
 80078fa:	f000 f9d3 	bl	8007ca4 <xQueueGenericCreateStatic>
 80078fe:	0003      	movs	r3, r0
 8007900:	e017      	b.n	8007932 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007902:	2300      	movs	r3, #0
 8007904:	e015      	b.n	8007932 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d111      	bne.n	8007930 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800790c:	2203      	movs	r2, #3
 800790e:	2100      	movs	r1, #0
 8007910:	2001      	movs	r0, #1
 8007912:	f000 fa12 	bl	8007d3a <xQueueGenericCreate>
 8007916:	0003      	movs	r3, r0
 8007918:	60fb      	str	r3, [r7, #12]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d005      	beq.n	800792c <osSemaphoreCreate+0x58>
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	2300      	movs	r3, #0
 8007924:	2200      	movs	r2, #0
 8007926:	2100      	movs	r1, #0
 8007928:	f000 fa5f 	bl	8007dea <xQueueGenericSend>
      return sema;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	e000      	b.n	8007932 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007930:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007932:	0018      	movs	r0, r3
 8007934:	46bd      	mov	sp, r7
 8007936:	b004      	add	sp, #16
 8007938:	bd80      	pop	{r7, pc}
	...

0800793c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007946:	2300      	movs	r3, #0
 8007948:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007950:	2380      	movs	r3, #128	; 0x80
 8007952:	e036      	b.n	80079c2 <osSemaphoreWait+0x86>
  }
  
  ticks = 0;
 8007954:	2300      	movs	r3, #0
 8007956:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	3301      	adds	r3, #1
 800795c:	d103      	bne.n	8007966 <osSemaphoreWait+0x2a>
    ticks = portMAX_DELAY;
 800795e:	2301      	movs	r3, #1
 8007960:	425b      	negs	r3, r3
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	e009      	b.n	800797a <osSemaphoreWait+0x3e>
  }
  else if (millisec != 0) {
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d006      	beq.n	800797a <osSemaphoreWait+0x3e>
    ticks = millisec / portTICK_PERIOD_MS;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <osSemaphoreWait+0x3e>
      ticks = 1;
 8007976:	2301      	movs	r3, #1
 8007978:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800797a:	f7ff ff34 	bl	80077e6 <inHandlerMode>
 800797e:	1e03      	subs	r3, r0, #0
 8007980:	d013      	beq.n	80079aa <osSemaphoreWait+0x6e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007982:	2308      	movs	r3, #8
 8007984:	18fa      	adds	r2, r7, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2100      	movs	r1, #0
 800798a:	0018      	movs	r0, r3
 800798c:	f000 fc30 	bl	80081f0 <xQueueReceiveFromISR>
 8007990:	0003      	movs	r3, r0
 8007992:	2b01      	cmp	r3, #1
 8007994:	d001      	beq.n	800799a <osSemaphoreWait+0x5e>
      return osErrorOS;
 8007996:	23ff      	movs	r3, #255	; 0xff
 8007998:	e013      	b.n	80079c2 <osSemaphoreWait+0x86>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00f      	beq.n	80079c0 <osSemaphoreWait+0x84>
 80079a0:	4b0a      	ldr	r3, [pc, #40]	; (80079cc <osSemaphoreWait+0x90>)
 80079a2:	2280      	movs	r2, #128	; 0x80
 80079a4:	0552      	lsls	r2, r2, #21
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	e00a      	b.n	80079c0 <osSemaphoreWait+0x84>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	0011      	movs	r1, r2
 80079b0:	0018      	movs	r0, r3
 80079b2:	f000 fb43 	bl	800803c <xQueueSemaphoreTake>
 80079b6:	0003      	movs	r3, r0
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d001      	beq.n	80079c0 <osSemaphoreWait+0x84>
    return osErrorOS;
 80079bc:	23ff      	movs	r3, #255	; 0xff
 80079be:	e000      	b.n	80079c2 <osSemaphoreWait+0x86>
  }
  
  return osOK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	0018      	movs	r0, r3
 80079c4:	46bd      	mov	sp, r7
 80079c6:	b004      	add	sp, #16
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	46c0      	nop			; (mov r8, r8)
 80079cc:	e000ed04 	.word	0xe000ed04

080079d0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80079d8:	2300      	movs	r3, #0
 80079da:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80079dc:	2300      	movs	r3, #0
 80079de:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80079e0:	f7ff ff01 	bl	80077e6 <inHandlerMode>
 80079e4:	1e03      	subs	r3, r0, #0
 80079e6:	d013      	beq.n	8007a10 <osSemaphoreRelease+0x40>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80079e8:	2308      	movs	r3, #8
 80079ea:	18fa      	adds	r2, r7, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	0011      	movs	r1, r2
 80079f0:	0018      	movs	r0, r3
 80079f2:	f000 fabe 	bl	8007f72 <xQueueGiveFromISR>
 80079f6:	0003      	movs	r3, r0
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d001      	beq.n	8007a00 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80079fc:	23ff      	movs	r3, #255	; 0xff
 80079fe:	e013      	b.n	8007a28 <osSemaphoreRelease+0x58>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00f      	beq.n	8007a26 <osSemaphoreRelease+0x56>
 8007a06:	4b0a      	ldr	r3, [pc, #40]	; (8007a30 <osSemaphoreRelease+0x60>)
 8007a08:	2280      	movs	r2, #128	; 0x80
 8007a0a:	0552      	lsls	r2, r2, #21
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	e00a      	b.n	8007a26 <osSemaphoreRelease+0x56>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	2300      	movs	r3, #0
 8007a14:	2200      	movs	r2, #0
 8007a16:	2100      	movs	r1, #0
 8007a18:	f000 f9e7 	bl	8007dea <xQueueGenericSend>
 8007a1c:	0003      	movs	r3, r0
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d001      	beq.n	8007a26 <osSemaphoreRelease+0x56>
      result = osErrorOS;
 8007a22:	23ff      	movs	r3, #255	; 0xff
 8007a24:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007a26:	68fb      	ldr	r3, [r7, #12]
}
 8007a28:	0018      	movs	r0, r3
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	b004      	add	sp, #16
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	e000ed04 	.word	0xe000ed04

08007a34 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007a3c:	f7ff fed3 	bl	80077e6 <inHandlerMode>
 8007a40:	1e03      	subs	r3, r0, #0
 8007a42:	d001      	beq.n	8007a48 <osSemaphoreDelete+0x14>
    return osErrorISR;
 8007a44:	2382      	movs	r3, #130	; 0x82
 8007a46:	e004      	b.n	8007a52 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	0018      	movs	r0, r3
 8007a4c:	f000 fc33 	bl	80082b6 <vQueueDelete>

  return osOK; 
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	0018      	movs	r0, r3
 8007a54:	46bd      	mov	sp, r7
 8007a56:	b002      	add	sp, #8
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007a5a:	b590      	push	{r4, r7, lr}
 8007a5c:	b085      	sub	sp, #20
 8007a5e:	af02      	add	r7, sp, #8
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d011      	beq.n	8007a90 <osMessageCreate+0x36>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00d      	beq.n	8007a90 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6818      	ldr	r0, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6859      	ldr	r1, [r3, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	2400      	movs	r4, #0
 8007a86:	9400      	str	r4, [sp, #0]
 8007a88:	f000 f90c 	bl	8007ca4 <xQueueGenericCreateStatic>
 8007a8c:	0003      	movs	r3, r0
 8007a8e:	e008      	b.n	8007aa2 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6818      	ldr	r0, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	0019      	movs	r1, r3
 8007a9c:	f000 f94d 	bl	8007d3a <xQueueGenericCreate>
 8007aa0:	0003      	movs	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007aa2:	0018      	movs	r0, r3
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	b003      	add	sp, #12
 8007aa8:	bd90      	pop	{r4, r7, pc}

08007aaa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b082      	sub	sp, #8
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	001a      	movs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	4252      	negs	r2, r2
 8007ac2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	3308      	adds	r3, #8
 8007ac8:	001a      	movs	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	001a      	movs	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ade:	46c0      	nop			; (mov r8, r8)
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	b002      	add	sp, #8
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b082      	sub	sp, #8
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007af4:	46c0      	nop			; (mov r8, r8)
 8007af6:	46bd      	mov	sp, r7
 8007af8:	b002      	add	sp, #8
 8007afa:	bd80      	pop	{r7, pc}

08007afc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	689a      	ldr	r2, [r3, #8]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	601a      	str	r2, [r3, #0]
}
 8007b38:	46c0      	nop			; (mov r8, r8)
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	b004      	add	sp, #16
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	3301      	adds	r3, #1
 8007b54:	d103      	bne.n	8007b5e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	e00c      	b.n	8007b78 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	3308      	adds	r3, #8
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	e002      	b.n	8007b6c <vListInsert+0x2c>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d2f6      	bcs.n	8007b66 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	1c5a      	adds	r2, r3, #1
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	601a      	str	r2, [r3, #0]
}
 8007ba4:	46c0      	nop			; (mov r8, r8)
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	b004      	add	sp, #16
 8007baa:	bd80      	pop	{r7, pc}

08007bac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	6892      	ldr	r2, [r2, #8]
 8007bc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	6852      	ldr	r2, [r2, #4]
 8007bcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d103      	bne.n	8007be0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	1e5a      	subs	r2, r3, #1
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
}
 8007bf4:	0018      	movs	r0, r3
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	b004      	add	sp, #16
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <xQueueGenericReset+0x18>
 8007c10:	b672      	cpsid	i
 8007c12:	e7fe      	b.n	8007c12 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8007c14:	f001 fc84 	bl	8009520 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c24:	434b      	muls	r3, r1
 8007c26:	18d2      	adds	r2, r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c42:	1e59      	subs	r1, r3, #1
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c48:	434b      	muls	r3, r1
 8007c4a:	18d2      	adds	r2, r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2244      	movs	r2, #68	; 0x44
 8007c54:	21ff      	movs	r1, #255	; 0xff
 8007c56:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2245      	movs	r2, #69	; 0x45
 8007c5c:	21ff      	movs	r1, #255	; 0xff
 8007c5e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10d      	bne.n	8007c82 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d013      	beq.n	8007c96 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	3310      	adds	r3, #16
 8007c72:	0018      	movs	r0, r3
 8007c74:	f001 f85e 	bl	8008d34 <xTaskRemoveFromEventList>
 8007c78:	1e03      	subs	r3, r0, #0
 8007c7a:	d00c      	beq.n	8007c96 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c7c:	f001 fc40 	bl	8009500 <vPortYield>
 8007c80:	e009      	b.n	8007c96 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3310      	adds	r3, #16
 8007c86:	0018      	movs	r0, r3
 8007c88:	f7ff ff0f 	bl	8007aaa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	3324      	adds	r3, #36	; 0x24
 8007c90:	0018      	movs	r0, r3
 8007c92:	f7ff ff0a 	bl	8007aaa <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c96:	f001 fc55 	bl	8009544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c9a:	2301      	movs	r3, #1
}
 8007c9c:	0018      	movs	r0, r3
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	b004      	add	sp, #16
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ca4:	b590      	push	{r4, r7, lr}
 8007ca6:	b089      	sub	sp, #36	; 0x24
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
 8007cb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <xQueueGenericCreateStatic+0x18>
 8007cb8:	b672      	cpsid	i
 8007cba:	e7fe      	b.n	8007cba <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d101      	bne.n	8007cc6 <xQueueGenericCreateStatic+0x22>
 8007cc2:	b672      	cpsid	i
 8007cc4:	e7fe      	b.n	8007cc4 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <xQueueGenericCreateStatic+0x2e>
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <xQueueGenericCreateStatic+0x32>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e000      	b.n	8007cd8 <xQueueGenericCreateStatic+0x34>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d101      	bne.n	8007ce0 <xQueueGenericCreateStatic+0x3c>
 8007cdc:	b672      	cpsid	i
 8007cde:	e7fe      	b.n	8007cde <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d102      	bne.n	8007cec <xQueueGenericCreateStatic+0x48>
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <xQueueGenericCreateStatic+0x4c>
 8007cec:	2301      	movs	r3, #1
 8007cee:	e000      	b.n	8007cf2 <xQueueGenericCreateStatic+0x4e>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <xQueueGenericCreateStatic+0x56>
 8007cf6:	b672      	cpsid	i
 8007cf8:	e7fe      	b.n	8007cf8 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007cfa:	2348      	movs	r3, #72	; 0x48
 8007cfc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	2b48      	cmp	r3, #72	; 0x48
 8007d02:	d001      	beq.n	8007d08 <xQueueGenericCreateStatic+0x64>
 8007d04:	b672      	cpsid	i
 8007d06:	e7fe      	b.n	8007d06 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00e      	beq.n	8007d30 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	2246      	movs	r2, #70	; 0x46
 8007d16:	2101      	movs	r1, #1
 8007d18:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d1a:	2328      	movs	r3, #40	; 0x28
 8007d1c:	18fb      	adds	r3, r7, r3
 8007d1e:	781c      	ldrb	r4, [r3, #0]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	68b9      	ldr	r1, [r7, #8]
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	0023      	movs	r3, r4
 8007d2c:	f000 f83b 	bl	8007da6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007d30:	697b      	ldr	r3, [r7, #20]
	}
 8007d32:	0018      	movs	r0, r3
 8007d34:	46bd      	mov	sp, r7
 8007d36:	b007      	add	sp, #28
 8007d38:	bd90      	pop	{r4, r7, pc}

08007d3a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007d3a:	b590      	push	{r4, r7, lr}
 8007d3c:	b08b      	sub	sp, #44	; 0x2c
 8007d3e:	af02      	add	r7, sp, #8
 8007d40:	60f8      	str	r0, [r7, #12]
 8007d42:	60b9      	str	r1, [r7, #8]
 8007d44:	1dfb      	adds	r3, r7, #7
 8007d46:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d101      	bne.n	8007d52 <xQueueGenericCreate+0x18>
 8007d4e:	b672      	cpsid	i
 8007d50:	e7fe      	b.n	8007d50 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d102      	bne.n	8007d5e <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	61fb      	str	r3, [r7, #28]
 8007d5c:	e003      	b.n	8007d66 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	4353      	muls	r3, r2
 8007d64:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	3348      	adds	r3, #72	; 0x48
 8007d6a:	0018      	movs	r0, r3
 8007d6c:	f001 fc70 	bl	8009650 <pvPortMalloc>
 8007d70:	0003      	movs	r3, r0
 8007d72:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d010      	beq.n	8007d9c <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	3348      	adds	r3, #72	; 0x48
 8007d7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	2246      	movs	r2, #70	; 0x46
 8007d84:	2100      	movs	r1, #0
 8007d86:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d88:	1dfb      	adds	r3, r7, #7
 8007d8a:	781c      	ldrb	r4, [r3, #0]
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	68b9      	ldr	r1, [r7, #8]
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	0023      	movs	r3, r4
 8007d98:	f000 f805 	bl	8007da6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007d9c:	69bb      	ldr	r3, [r7, #24]
	}
 8007d9e:	0018      	movs	r0, r3
 8007da0:	46bd      	mov	sp, r7
 8007da2:	b009      	add	sp, #36	; 0x24
 8007da4:	bd90      	pop	{r4, r7, pc}

08007da6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b084      	sub	sp, #16
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	607a      	str	r2, [r7, #4]
 8007db2:	001a      	movs	r2, r3
 8007db4:	1cfb      	adds	r3, r7, #3
 8007db6:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d103      	bne.n	8007dc6 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	e002      	b.n	8007dcc <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	2101      	movs	r1, #1
 8007ddc:	0018      	movs	r0, r3
 8007dde:	f7ff ff0d 	bl	8007bfc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007de2:	46c0      	nop			; (mov r8, r8)
 8007de4:	46bd      	mov	sp, r7
 8007de6:	b004      	add	sp, #16
 8007de8:	bd80      	pop	{r7, pc}

08007dea <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b08a      	sub	sp, #40	; 0x28
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	60f8      	str	r0, [r7, #12]
 8007df2:	60b9      	str	r1, [r7, #8]
 8007df4:	607a      	str	r2, [r7, #4]
 8007df6:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <xQueueGenericSend+0x20>
 8007e06:	b672      	cpsid	i
 8007e08:	e7fe      	b.n	8007e08 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d103      	bne.n	8007e18 <xQueueGenericSend+0x2e>
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d101      	bne.n	8007e1c <xQueueGenericSend+0x32>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e000      	b.n	8007e1e <xQueueGenericSend+0x34>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <xQueueGenericSend+0x3c>
 8007e22:	b672      	cpsid	i
 8007e24:	e7fe      	b.n	8007e24 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d103      	bne.n	8007e34 <xQueueGenericSend+0x4a>
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d101      	bne.n	8007e38 <xQueueGenericSend+0x4e>
 8007e34:	2301      	movs	r3, #1
 8007e36:	e000      	b.n	8007e3a <xQueueGenericSend+0x50>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <xQueueGenericSend+0x58>
 8007e3e:	b672      	cpsid	i
 8007e40:	e7fe      	b.n	8007e40 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e42:	f001 f915 	bl	8009070 <xTaskGetSchedulerState>
 8007e46:	1e03      	subs	r3, r0, #0
 8007e48:	d102      	bne.n	8007e50 <xQueueGenericSend+0x66>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <xQueueGenericSend+0x6a>
 8007e50:	2301      	movs	r3, #1
 8007e52:	e000      	b.n	8007e56 <xQueueGenericSend+0x6c>
 8007e54:	2300      	movs	r3, #0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <xQueueGenericSend+0x74>
 8007e5a:	b672      	cpsid	i
 8007e5c:	e7fe      	b.n	8007e5c <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e5e:	f001 fb5f 	bl	8009520 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e62:	6a3b      	ldr	r3, [r7, #32]
 8007e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d302      	bcc.n	8007e74 <xQueueGenericSend+0x8a>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d11e      	bne.n	8007eb2 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	68b9      	ldr	r1, [r7, #8]
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	f000 fa4d 	bl	800831a <prvCopyDataToQueue>
 8007e80:	0003      	movs	r3, r0
 8007e82:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d009      	beq.n	8007ea0 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	3324      	adds	r3, #36	; 0x24
 8007e90:	0018      	movs	r0, r3
 8007e92:	f000 ff4f 	bl	8008d34 <xTaskRemoveFromEventList>
 8007e96:	1e03      	subs	r3, r0, #0
 8007e98:	d007      	beq.n	8007eaa <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e9a:	f001 fb31 	bl	8009500 <vPortYield>
 8007e9e:	e004      	b.n	8007eaa <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ea6:	f001 fb2b 	bl	8009500 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007eaa:	f001 fb4b 	bl	8009544 <vPortExitCritical>
				return pdPASS;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e05b      	b.n	8007f6a <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d103      	bne.n	8007ec0 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007eb8:	f001 fb44 	bl	8009544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	e054      	b.n	8007f6a <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d106      	bne.n	8007ed4 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ec6:	2314      	movs	r3, #20
 8007ec8:	18fb      	adds	r3, r7, r3
 8007eca:	0018      	movs	r0, r3
 8007ecc:	f000 ff8e 	bl	8008dec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ed4:	f001 fb36 	bl	8009544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ed8:	f000 fd68 	bl	80089ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007edc:	f001 fb20 	bl	8009520 <vPortEnterCritical>
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	2244      	movs	r2, #68	; 0x44
 8007ee4:	5c9b      	ldrb	r3, [r3, r2]
 8007ee6:	b25b      	sxtb	r3, r3
 8007ee8:	3301      	adds	r3, #1
 8007eea:	d103      	bne.n	8007ef4 <xQueueGenericSend+0x10a>
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	2244      	movs	r2, #68	; 0x44
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	5499      	strb	r1, [r3, r2]
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	2245      	movs	r2, #69	; 0x45
 8007ef8:	5c9b      	ldrb	r3, [r3, r2]
 8007efa:	b25b      	sxtb	r3, r3
 8007efc:	3301      	adds	r3, #1
 8007efe:	d103      	bne.n	8007f08 <xQueueGenericSend+0x11e>
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	2245      	movs	r2, #69	; 0x45
 8007f04:	2100      	movs	r1, #0
 8007f06:	5499      	strb	r1, [r3, r2]
 8007f08:	f001 fb1c 	bl	8009544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f0c:	1d3a      	adds	r2, r7, #4
 8007f0e:	2314      	movs	r3, #20
 8007f10:	18fb      	adds	r3, r7, r3
 8007f12:	0011      	movs	r1, r2
 8007f14:	0018      	movs	r0, r3
 8007f16:	f000 ff7d 	bl	8008e14 <xTaskCheckForTimeOut>
 8007f1a:	1e03      	subs	r3, r0, #0
 8007f1c:	d11e      	bne.n	8007f5c <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f1e:	6a3b      	ldr	r3, [r7, #32]
 8007f20:	0018      	movs	r0, r3
 8007f22:	f000 faff 	bl	8008524 <prvIsQueueFull>
 8007f26:	1e03      	subs	r3, r0, #0
 8007f28:	d011      	beq.n	8007f4e <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	3310      	adds	r3, #16
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	0011      	movs	r1, r2
 8007f32:	0018      	movs	r0, r3
 8007f34:	f000 fee0 	bl	8008cf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	f000 fa7e 	bl	800843c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f40:	f000 fd40 	bl	80089c4 <xTaskResumeAll>
 8007f44:	1e03      	subs	r3, r0, #0
 8007f46:	d18a      	bne.n	8007e5e <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8007f48:	f001 fada 	bl	8009500 <vPortYield>
 8007f4c:	e787      	b.n	8007e5e <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	0018      	movs	r0, r3
 8007f52:	f000 fa73 	bl	800843c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f56:	f000 fd35 	bl	80089c4 <xTaskResumeAll>
 8007f5a:	e780      	b.n	8007e5e <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	0018      	movs	r0, r3
 8007f60:	f000 fa6c 	bl	800843c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f64:	f000 fd2e 	bl	80089c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f68:	2300      	movs	r3, #0
		}
	}
}
 8007f6a:	0018      	movs	r0, r3
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	b00a      	add	sp, #40	; 0x28
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b088      	sub	sp, #32
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <xQueueGiveFromISR+0x18>
 8007f86:	b672      	cpsid	i
 8007f88:	e7fe      	b.n	8007f88 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <xQueueGiveFromISR+0x24>
 8007f92:	b672      	cpsid	i
 8007f94:	e7fe      	b.n	8007f94 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d103      	bne.n	8007fa6 <xQueueGiveFromISR+0x34>
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <xQueueGiveFromISR+0x38>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e000      	b.n	8007fac <xQueueGiveFromISR+0x3a>
 8007faa:	2300      	movs	r3, #0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <xQueueGiveFromISR+0x42>
 8007fb0:	b672      	cpsid	i
 8007fb2:	e7fe      	b.n	8007fb2 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fb4:	f001 fade 	bl	8009574 <ulSetInterruptMaskFromISR>
 8007fb8:	0003      	movs	r3, r0
 8007fba:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc0:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d22c      	bcs.n	8008026 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fcc:	200f      	movs	r0, #15
 8007fce:	183b      	adds	r3, r7, r0
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	2145      	movs	r1, #69	; 0x45
 8007fd4:	5c52      	ldrb	r2, [r2, r1]
 8007fd6:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	1c5a      	adds	r2, r3, #1
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fe0:	183b      	adds	r3, r7, r0
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	b25b      	sxtb	r3, r3
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	d111      	bne.n	800800e <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d016      	beq.n	8008020 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	3324      	adds	r3, #36	; 0x24
 8007ff6:	0018      	movs	r0, r3
 8007ff8:	f000 fe9c 	bl	8008d34 <xTaskRemoveFromEventList>
 8007ffc:	1e03      	subs	r3, r0, #0
 8007ffe:	d00f      	beq.n	8008020 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00c      	beq.n	8008020 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2201      	movs	r2, #1
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	e008      	b.n	8008020 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800800e:	230f      	movs	r3, #15
 8008010:	18fb      	adds	r3, r7, r3
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	3301      	adds	r3, #1
 8008016:	b2db      	uxtb	r3, r3
 8008018:	b259      	sxtb	r1, r3
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	2245      	movs	r2, #69	; 0x45
 800801e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8008020:	2301      	movs	r3, #1
 8008022:	61fb      	str	r3, [r7, #28]
 8008024:	e001      	b.n	800802a <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008026:	2300      	movs	r3, #0
 8008028:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	0018      	movs	r0, r3
 800802e:	f001 faa7 	bl	8009580 <vClearInterruptMaskFromISR>

	return xReturn;
 8008032:	69fb      	ldr	r3, [r7, #28]
}
 8008034:	0018      	movs	r0, r3
 8008036:	46bd      	mov	sp, r7
 8008038:	b008      	add	sp, #32
 800803a:	bd80      	pop	{r7, pc}

0800803c <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b08a      	sub	sp, #40	; 0x28
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008046:	2300      	movs	r3, #0
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800804e:	2300      	movs	r3, #0
 8008050:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <xQueueSemaphoreTake+0x20>
 8008058:	b672      	cpsid	i
 800805a:	e7fe      	b.n	800805a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <xQueueSemaphoreTake+0x2c>
 8008064:	b672      	cpsid	i
 8008066:	e7fe      	b.n	8008066 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008068:	f001 f802 	bl	8009070 <xTaskGetSchedulerState>
 800806c:	1e03      	subs	r3, r0, #0
 800806e:	d102      	bne.n	8008076 <xQueueSemaphoreTake+0x3a>
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <xQueueSemaphoreTake+0x3e>
 8008076:	2301      	movs	r3, #1
 8008078:	e000      	b.n	800807c <xQueueSemaphoreTake+0x40>
 800807a:	2300      	movs	r3, #0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <xQueueSemaphoreTake+0x48>
 8008080:	b672      	cpsid	i
 8008082:	e7fe      	b.n	8008082 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008084:	f001 fa4c 	bl	8009520 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d01d      	beq.n	80080d0 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	1e5a      	subs	r2, r3, #1
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d104      	bne.n	80080ae <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80080a4:	f001 f93e 	bl	8009324 <pvTaskIncrementMutexHeldCount>
 80080a8:	0002      	movs	r2, r0
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d008      	beq.n	80080c8 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	3310      	adds	r3, #16
 80080ba:	0018      	movs	r0, r3
 80080bc:	f000 fe3a 	bl	8008d34 <xTaskRemoveFromEventList>
 80080c0:	1e03      	subs	r3, r0, #0
 80080c2:	d001      	beq.n	80080c8 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080c4:	f001 fa1c 	bl	8009500 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080c8:	f001 fa3c 	bl	8009544 <vPortExitCritical>
				return pdPASS;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e08b      	b.n	80081e8 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d108      	bne.n	80080e8 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <xQueueSemaphoreTake+0xa4>
 80080dc:	b672      	cpsid	i
 80080de:	e7fe      	b.n	80080de <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80080e0:	f001 fa30 	bl	8009544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080e4:	2300      	movs	r3, #0
 80080e6:	e07f      	b.n	80081e8 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d106      	bne.n	80080fc <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080ee:	230c      	movs	r3, #12
 80080f0:	18fb      	adds	r3, r7, r3
 80080f2:	0018      	movs	r0, r3
 80080f4:	f000 fe7a 	bl	8008dec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080f8:	2301      	movs	r3, #1
 80080fa:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080fc:	f001 fa22 	bl	8009544 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008100:	f000 fc54 	bl	80089ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008104:	f001 fa0c 	bl	8009520 <vPortEnterCritical>
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	2244      	movs	r2, #68	; 0x44
 800810c:	5c9b      	ldrb	r3, [r3, r2]
 800810e:	b25b      	sxtb	r3, r3
 8008110:	3301      	adds	r3, #1
 8008112:	d103      	bne.n	800811c <xQueueSemaphoreTake+0xe0>
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	2244      	movs	r2, #68	; 0x44
 8008118:	2100      	movs	r1, #0
 800811a:	5499      	strb	r1, [r3, r2]
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	2245      	movs	r2, #69	; 0x45
 8008120:	5c9b      	ldrb	r3, [r3, r2]
 8008122:	b25b      	sxtb	r3, r3
 8008124:	3301      	adds	r3, #1
 8008126:	d103      	bne.n	8008130 <xQueueSemaphoreTake+0xf4>
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	2245      	movs	r2, #69	; 0x45
 800812c:	2100      	movs	r1, #0
 800812e:	5499      	strb	r1, [r3, r2]
 8008130:	f001 fa08 	bl	8009544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008134:	003a      	movs	r2, r7
 8008136:	230c      	movs	r3, #12
 8008138:	18fb      	adds	r3, r7, r3
 800813a:	0011      	movs	r1, r2
 800813c:	0018      	movs	r0, r3
 800813e:	f000 fe69 	bl	8008e14 <xTaskCheckForTimeOut>
 8008142:	1e03      	subs	r3, r0, #0
 8008144:	d12e      	bne.n	80081a4 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	0018      	movs	r0, r3
 800814a:	f000 f9d5 	bl	80084f8 <prvIsQueueEmpty>
 800814e:	1e03      	subs	r3, r0, #0
 8008150:	d021      	beq.n	8008196 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10a      	bne.n	8008170 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800815a:	f001 f9e1 	bl	8009520 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	0018      	movs	r0, r3
 8008164:	f000 ffa0 	bl	80090a8 <xTaskPriorityInherit>
 8008168:	0003      	movs	r3, r0
 800816a:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800816c:	f001 f9ea 	bl	8009544 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	3324      	adds	r3, #36	; 0x24
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	0011      	movs	r1, r2
 8008178:	0018      	movs	r0, r3
 800817a:	f000 fdbd 	bl	8008cf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	0018      	movs	r0, r3
 8008182:	f000 f95b 	bl	800843c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008186:	f000 fc1d 	bl	80089c4 <xTaskResumeAll>
 800818a:	1e03      	subs	r3, r0, #0
 800818c:	d000      	beq.n	8008190 <xQueueSemaphoreTake+0x154>
 800818e:	e779      	b.n	8008084 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8008190:	f001 f9b6 	bl	8009500 <vPortYield>
 8008194:	e776      	b.n	8008084 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	0018      	movs	r0, r3
 800819a:	f000 f94f 	bl	800843c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800819e:	f000 fc11 	bl	80089c4 <xTaskResumeAll>
 80081a2:	e76f      	b.n	8008084 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	0018      	movs	r0, r3
 80081a8:	f000 f948 	bl	800843c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081ac:	f000 fc0a 	bl	80089c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	0018      	movs	r0, r3
 80081b4:	f000 f9a0 	bl	80084f8 <prvIsQueueEmpty>
 80081b8:	1e03      	subs	r3, r0, #0
 80081ba:	d100      	bne.n	80081be <xQueueSemaphoreTake+0x182>
 80081bc:	e762      	b.n	8008084 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80081be:	6a3b      	ldr	r3, [r7, #32]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d010      	beq.n	80081e6 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 80081c4:	f001 f9ac 	bl	8009520 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	0018      	movs	r0, r3
 80081cc:	f000 f88f 	bl	80082ee <prvGetDisinheritPriorityAfterTimeout>
 80081d0:	0003      	movs	r3, r0
 80081d2:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	697a      	ldr	r2, [r7, #20]
 80081da:	0011      	movs	r1, r2
 80081dc:	0018      	movs	r0, r3
 80081de:	f001 f82d 	bl	800923c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80081e2:	f001 f9af 	bl	8009544 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80081e8:	0018      	movs	r0, r3
 80081ea:	46bd      	mov	sp, r7
 80081ec:	b00a      	add	sp, #40	; 0x28
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80081f0:	b590      	push	{r4, r7, lr}
 80081f2:	b08b      	sub	sp, #44	; 0x2c
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <xQueueReceiveFromISR+0x1a>
 8008206:	b672      	cpsid	i
 8008208:	e7fe      	b.n	8008208 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d103      	bne.n	8008218 <xQueueReceiveFromISR+0x28>
 8008210:	6a3b      	ldr	r3, [r7, #32]
 8008212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <xQueueReceiveFromISR+0x2c>
 8008218:	2301      	movs	r3, #1
 800821a:	e000      	b.n	800821e <xQueueReceiveFromISR+0x2e>
 800821c:	2300      	movs	r3, #0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <xQueueReceiveFromISR+0x36>
 8008222:	b672      	cpsid	i
 8008224:	e7fe      	b.n	8008224 <xQueueReceiveFromISR+0x34>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008226:	f001 f9a5 	bl	8009574 <ulSetInterruptMaskFromISR>
 800822a:	0003      	movs	r3, r0
 800822c:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008232:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d032      	beq.n	80082a0 <xQueueReceiveFromISR+0xb0>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800823a:	2417      	movs	r4, #23
 800823c:	193b      	adds	r3, r7, r4
 800823e:	6a3a      	ldr	r2, [r7, #32]
 8008240:	2144      	movs	r1, #68	; 0x44
 8008242:	5c52      	ldrb	r2, [r2, r1]
 8008244:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	0011      	movs	r1, r2
 800824c:	0018      	movs	r0, r3
 800824e:	f000 f8cf 	bl	80083f0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	1e5a      	subs	r2, r3, #1
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800825a:	193b      	adds	r3, r7, r4
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	b25b      	sxtb	r3, r3
 8008260:	3301      	adds	r3, #1
 8008262:	d111      	bne.n	8008288 <xQueueReceiveFromISR+0x98>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008264:	6a3b      	ldr	r3, [r7, #32]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d016      	beq.n	800829a <xQueueReceiveFromISR+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800826c:	6a3b      	ldr	r3, [r7, #32]
 800826e:	3310      	adds	r3, #16
 8008270:	0018      	movs	r0, r3
 8008272:	f000 fd5f 	bl	8008d34 <xTaskRemoveFromEventList>
 8008276:	1e03      	subs	r3, r0, #0
 8008278:	d00f      	beq.n	800829a <xQueueReceiveFromISR+0xaa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00c      	beq.n	800829a <xQueueReceiveFromISR+0xaa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	e008      	b.n	800829a <xQueueReceiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008288:	2317      	movs	r3, #23
 800828a:	18fb      	adds	r3, r7, r3
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	3301      	adds	r3, #1
 8008290:	b2db      	uxtb	r3, r3
 8008292:	b259      	sxtb	r1, r3
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	2244      	movs	r2, #68	; 0x44
 8008298:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800829a:	2301      	movs	r3, #1
 800829c:	627b      	str	r3, [r7, #36]	; 0x24
 800829e:	e001      	b.n	80082a4 <xQueueReceiveFromISR+0xb4>
		}
		else
		{
			xReturn = pdFAIL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	0018      	movs	r0, r3
 80082a8:	f001 f96a 	bl	8009580 <vClearInterruptMaskFromISR>

	return xReturn;
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082ae:	0018      	movs	r0, r3
 80082b0:	46bd      	mov	sp, r7
 80082b2:	b00b      	add	sp, #44	; 0x2c
 80082b4:	bd90      	pop	{r4, r7, pc}

080082b6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <vQueueDelete+0x16>
 80082c8:	b672      	cpsid	i
 80082ca:	e7fe      	b.n	80082ca <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	0018      	movs	r0, r3
 80082d0:	f000 f940 	bl	8008554 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2246      	movs	r2, #70	; 0x46
 80082d8:	5c9b      	ldrb	r3, [r3, r2]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d103      	bne.n	80082e6 <vQueueDelete+0x30>
		{
			vPortFree( pxQueue );
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	0018      	movs	r0, r3
 80082e2:	f001 fa5b 	bl	800979c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80082e6:	46c0      	nop			; (mov r8, r8)
 80082e8:	46bd      	mov	sp, r7
 80082ea:	b004      	add	sp, #16
 80082ec:	bd80      	pop	{r7, pc}

080082ee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b084      	sub	sp, #16
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d006      	beq.n	800830c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2207      	movs	r2, #7
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	60fb      	str	r3, [r7, #12]
 800830a:	e001      	b.n	8008310 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800830c:	2300      	movs	r3, #0
 800830e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008310:	68fb      	ldr	r3, [r7, #12]
	}
 8008312:	0018      	movs	r0, r3
 8008314:	46bd      	mov	sp, r7
 8008316:	b004      	add	sp, #16
 8008318:	bd80      	pop	{r7, pc}

0800831a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b086      	sub	sp, #24
 800831e:	af00      	add	r7, sp, #0
 8008320:	60f8      	str	r0, [r7, #12]
 8008322:	60b9      	str	r1, [r7, #8]
 8008324:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008326:	2300      	movs	r3, #0
 8008328:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10e      	bne.n	8008356 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d14e      	bne.n	80083de <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	0018      	movs	r0, r3
 8008346:	f000 ff1d 	bl	8009184 <xTaskPriorityDisinherit>
 800834a:	0003      	movs	r3, r0
 800834c:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	605a      	str	r2, [r3, #4]
 8008354:	e043      	b.n	80083de <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d119      	bne.n	8008390 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6898      	ldr	r0, [r3, #8]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	0019      	movs	r1, r3
 8008368:	f001 fb44 	bl	80099f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	689a      	ldr	r2, [r3, #8]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008374:	18d2      	adds	r2, r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	689a      	ldr	r2, [r3, #8]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	429a      	cmp	r2, r3
 8008384:	d32b      	bcc.n	80083de <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	609a      	str	r2, [r3, #8]
 800838e:	e026      	b.n	80083de <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	68d8      	ldr	r0, [r3, #12]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	0019      	movs	r1, r3
 800839c:	f001 fb2a 	bl	80099f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	68da      	ldr	r2, [r3, #12]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a8:	425b      	negs	r3, r3
 80083aa:	18d2      	adds	r2, r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	68da      	ldr	r2, [r3, #12]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d207      	bcs.n	80083cc <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c4:	425b      	negs	r3, r3
 80083c6:	18d2      	adds	r2, r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d105      	bne.n	80083de <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	3b01      	subs	r3, #1
 80083dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	1c5a      	adds	r2, r3, #1
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80083e6:	697b      	ldr	r3, [r7, #20]
}
 80083e8:	0018      	movs	r0, r3
 80083ea:	46bd      	mov	sp, r7
 80083ec:	b006      	add	sp, #24
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d018      	beq.n	8008434 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68da      	ldr	r2, [r3, #12]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840a:	18d2      	adds	r2, r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	68da      	ldr	r2, [r3, #12]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	429a      	cmp	r2, r3
 800841a:	d303      	bcc.n	8008424 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	68d9      	ldr	r1, [r3, #12]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	0018      	movs	r0, r3
 8008430:	f001 fae0 	bl	80099f4 <memcpy>
	}
}
 8008434:	46c0      	nop			; (mov r8, r8)
 8008436:	46bd      	mov	sp, r7
 8008438:	b002      	add	sp, #8
 800843a:	bd80      	pop	{r7, pc}

0800843c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008444:	f001 f86c 	bl	8009520 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008448:	230f      	movs	r3, #15
 800844a:	18fb      	adds	r3, r7, r3
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	2145      	movs	r1, #69	; 0x45
 8008450:	5c52      	ldrb	r2, [r2, r1]
 8008452:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008454:	e013      	b.n	800847e <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845a:	2b00      	cmp	r3, #0
 800845c:	d016      	beq.n	800848c <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	3324      	adds	r3, #36	; 0x24
 8008462:	0018      	movs	r0, r3
 8008464:	f000 fc66 	bl	8008d34 <xTaskRemoveFromEventList>
 8008468:	1e03      	subs	r3, r0, #0
 800846a:	d001      	beq.n	8008470 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800846c:	f000 fd22 	bl	8008eb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008470:	210f      	movs	r1, #15
 8008472:	187b      	adds	r3, r7, r1
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	3b01      	subs	r3, #1
 8008478:	b2da      	uxtb	r2, r3
 800847a:	187b      	adds	r3, r7, r1
 800847c:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800847e:	230f      	movs	r3, #15
 8008480:	18fb      	adds	r3, r7, r3
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	b25b      	sxtb	r3, r3
 8008486:	2b00      	cmp	r3, #0
 8008488:	dce5      	bgt.n	8008456 <prvUnlockQueue+0x1a>
 800848a:	e000      	b.n	800848e <prvUnlockQueue+0x52>
					break;
 800848c:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2245      	movs	r2, #69	; 0x45
 8008492:	21ff      	movs	r1, #255	; 0xff
 8008494:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8008496:	f001 f855 	bl	8009544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800849a:	f001 f841 	bl	8009520 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800849e:	230e      	movs	r3, #14
 80084a0:	18fb      	adds	r3, r7, r3
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	2144      	movs	r1, #68	; 0x44
 80084a6:	5c52      	ldrb	r2, [r2, r1]
 80084a8:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084aa:	e013      	b.n	80084d4 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d016      	beq.n	80084e2 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	3310      	adds	r3, #16
 80084b8:	0018      	movs	r0, r3
 80084ba:	f000 fc3b 	bl	8008d34 <xTaskRemoveFromEventList>
 80084be:	1e03      	subs	r3, r0, #0
 80084c0:	d001      	beq.n	80084c6 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80084c2:	f000 fcf7 	bl	8008eb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80084c6:	210e      	movs	r1, #14
 80084c8:	187b      	adds	r3, r7, r1
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	3b01      	subs	r3, #1
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	187b      	adds	r3, r7, r1
 80084d2:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084d4:	230e      	movs	r3, #14
 80084d6:	18fb      	adds	r3, r7, r3
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	b25b      	sxtb	r3, r3
 80084dc:	2b00      	cmp	r3, #0
 80084de:	dce5      	bgt.n	80084ac <prvUnlockQueue+0x70>
 80084e0:	e000      	b.n	80084e4 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80084e2:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2244      	movs	r2, #68	; 0x44
 80084e8:	21ff      	movs	r1, #255	; 0xff
 80084ea:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80084ec:	f001 f82a 	bl	8009544 <vPortExitCritical>
}
 80084f0:	46c0      	nop			; (mov r8, r8)
 80084f2:	46bd      	mov	sp, r7
 80084f4:	b004      	add	sp, #16
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008500:	f001 f80e 	bl	8009520 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008508:	2b00      	cmp	r3, #0
 800850a:	d102      	bne.n	8008512 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800850c:	2301      	movs	r3, #1
 800850e:	60fb      	str	r3, [r7, #12]
 8008510:	e001      	b.n	8008516 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008512:	2300      	movs	r3, #0
 8008514:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008516:	f001 f815 	bl	8009544 <vPortExitCritical>

	return xReturn;
 800851a:	68fb      	ldr	r3, [r7, #12]
}
 800851c:	0018      	movs	r0, r3
 800851e:	46bd      	mov	sp, r7
 8008520:	b004      	add	sp, #16
 8008522:	bd80      	pop	{r7, pc}

08008524 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800852c:	f000 fff8 	bl	8009520 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008538:	429a      	cmp	r2, r3
 800853a:	d102      	bne.n	8008542 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800853c:	2301      	movs	r3, #1
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	e001      	b.n	8008546 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008542:	2300      	movs	r3, #0
 8008544:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008546:	f000 fffd 	bl	8009544 <vPortExitCritical>

	return xReturn;
 800854a:	68fb      	ldr	r3, [r7, #12]
}
 800854c:	0018      	movs	r0, r3
 800854e:	46bd      	mov	sp, r7
 8008550:	b004      	add	sp, #16
 8008552:	bd80      	pop	{r7, pc}

08008554 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800855c:	2300      	movs	r3, #0
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	e018      	b.n	8008594 <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008562:	4a10      	ldr	r2, [pc, #64]	; (80085a4 <vQueueUnregisterQueue+0x50>)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	18d3      	adds	r3, r2, r3
 800856a:	3304      	adds	r3, #4
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	429a      	cmp	r2, r3
 8008572:	d10c      	bne.n	800858e <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008574:	4b0b      	ldr	r3, [pc, #44]	; (80085a4 <vQueueUnregisterQueue+0x50>)
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	00d2      	lsls	r2, r2, #3
 800857a:	2100      	movs	r1, #0
 800857c:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800857e:	4a09      	ldr	r2, [pc, #36]	; (80085a4 <vQueueUnregisterQueue+0x50>)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	00db      	lsls	r3, r3, #3
 8008584:	18d3      	adds	r3, r2, r3
 8008586:	3304      	adds	r3, #4
 8008588:	2200      	movs	r2, #0
 800858a:	601a      	str	r2, [r3, #0]
				break;
 800858c:	e006      	b.n	800859c <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	3301      	adds	r3, #1
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2b07      	cmp	r3, #7
 8008598:	d9e3      	bls.n	8008562 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800859a:	46c0      	nop			; (mov r8, r8)
 800859c:	46c0      	nop			; (mov r8, r8)
 800859e:	46bd      	mov	sp, r7
 80085a0:	b004      	add	sp, #16
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	20000944 	.word	0x20000944

080085a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80085a8:	b590      	push	{r4, r7, lr}
 80085aa:	b08d      	sub	sp, #52	; 0x34
 80085ac:	af04      	add	r7, sp, #16
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80085b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <xTaskCreateStatic+0x18>
 80085bc:	b672      	cpsid	i
 80085be:	e7fe      	b.n	80085be <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80085c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d101      	bne.n	80085ca <xTaskCreateStatic+0x22>
 80085c6:	b672      	cpsid	i
 80085c8:	e7fe      	b.n	80085c8 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80085ca:	23b4      	movs	r3, #180	; 0xb4
 80085cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2bb4      	cmp	r3, #180	; 0xb4
 80085d2:	d001      	beq.n	80085d8 <xTaskCreateStatic+0x30>
 80085d4:	b672      	cpsid	i
 80085d6:	e7fe      	b.n	80085d6 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80085d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d020      	beq.n	8008620 <xTaskCreateStatic+0x78>
 80085de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d01d      	beq.n	8008620 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e6:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	22b1      	movs	r2, #177	; 0xb1
 80085f2:	2102      	movs	r1, #2
 80085f4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085f6:	683c      	ldr	r4, [r7, #0]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	68b9      	ldr	r1, [r7, #8]
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	2300      	movs	r3, #0
 8008600:	9303      	str	r3, [sp, #12]
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	9302      	str	r3, [sp, #8]
 8008606:	2318      	movs	r3, #24
 8008608:	18fb      	adds	r3, r7, r3
 800860a:	9301      	str	r3, [sp, #4]
 800860c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	0023      	movs	r3, r4
 8008612:	f000 f859 	bl	80086c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	0018      	movs	r0, r3
 800861a:	f000 f8e5 	bl	80087e8 <prvAddNewTaskToReadyList>
 800861e:	e001      	b.n	8008624 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8008620:	2300      	movs	r3, #0
 8008622:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008624:	69bb      	ldr	r3, [r7, #24]
	}
 8008626:	0018      	movs	r0, r3
 8008628:	46bd      	mov	sp, r7
 800862a:	b009      	add	sp, #36	; 0x24
 800862c:	bd90      	pop	{r4, r7, pc}

0800862e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800862e:	b590      	push	{r4, r7, lr}
 8008630:	b08d      	sub	sp, #52	; 0x34
 8008632:	af04      	add	r7, sp, #16
 8008634:	60f8      	str	r0, [r7, #12]
 8008636:	60b9      	str	r1, [r7, #8]
 8008638:	603b      	str	r3, [r7, #0]
 800863a:	1dbb      	adds	r3, r7, #6
 800863c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800863e:	1dbb      	adds	r3, r7, #6
 8008640:	881b      	ldrh	r3, [r3, #0]
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	0018      	movs	r0, r3
 8008646:	f001 f803 	bl	8009650 <pvPortMalloc>
 800864a:	0003      	movs	r3, r0
 800864c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d010      	beq.n	8008676 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008654:	20b4      	movs	r0, #180	; 0xb4
 8008656:	f000 fffb 	bl	8009650 <pvPortMalloc>
 800865a:	0003      	movs	r3, r0
 800865c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d003      	beq.n	800866c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	631a      	str	r2, [r3, #48]	; 0x30
 800866a:	e006      	b.n	800867a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	0018      	movs	r0, r3
 8008670:	f001 f894 	bl	800979c <vPortFree>
 8008674:	e001      	b.n	800867a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008676:	2300      	movs	r3, #0
 8008678:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d01a      	beq.n	80086b6 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	22b1      	movs	r2, #177	; 0xb1
 8008684:	2100      	movs	r1, #0
 8008686:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008688:	1dbb      	adds	r3, r7, #6
 800868a:	881a      	ldrh	r2, [r3, #0]
 800868c:	683c      	ldr	r4, [r7, #0]
 800868e:	68b9      	ldr	r1, [r7, #8]
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	2300      	movs	r3, #0
 8008694:	9303      	str	r3, [sp, #12]
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	9302      	str	r3, [sp, #8]
 800869a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869c:	9301      	str	r3, [sp, #4]
 800869e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	0023      	movs	r3, r4
 80086a4:	f000 f810 	bl	80086c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	0018      	movs	r0, r3
 80086ac:	f000 f89c 	bl	80087e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80086b0:	2301      	movs	r3, #1
 80086b2:	61bb      	str	r3, [r7, #24]
 80086b4:	e002      	b.n	80086bc <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80086b6:	2301      	movs	r3, #1
 80086b8:	425b      	negs	r3, r3
 80086ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80086bc:	69bb      	ldr	r3, [r7, #24]
	}
 80086be:	0018      	movs	r0, r3
 80086c0:	46bd      	mov	sp, r7
 80086c2:	b009      	add	sp, #36	; 0x24
 80086c4:	bd90      	pop	{r4, r7, pc}
	...

080086c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]
 80086d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80086d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	493e      	ldr	r1, [pc, #248]	; (80087d8 <prvInitialiseNewTask+0x110>)
 80086de:	468c      	mov	ip, r1
 80086e0:	4463      	add	r3, ip
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	18d3      	adds	r3, r2, r3
 80086e6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	2207      	movs	r2, #7
 80086ec:	4393      	bics	r3, r2
 80086ee:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	2207      	movs	r2, #7
 80086f4:	4013      	ands	r3, r2
 80086f6:	d001      	beq.n	80086fc <prvInitialiseNewTask+0x34>
 80086f8:	b672      	cpsid	i
 80086fa:	e7fe      	b.n	80086fa <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086fc:	2300      	movs	r3, #0
 80086fe:	617b      	str	r3, [r7, #20]
 8008700:	e013      	b.n	800872a <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008702:	68ba      	ldr	r2, [r7, #8]
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	18d3      	adds	r3, r2, r3
 8008708:	7818      	ldrb	r0, [r3, #0]
 800870a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800870c:	2134      	movs	r1, #52	; 0x34
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	18d3      	adds	r3, r2, r3
 8008712:	185b      	adds	r3, r3, r1
 8008714:	1c02      	adds	r2, r0, #0
 8008716:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	18d3      	adds	r3, r2, r3
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d006      	beq.n	8008732 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	3301      	adds	r3, #1
 8008728:	617b      	str	r3, [r7, #20]
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	2b0f      	cmp	r3, #15
 800872e:	d9e8      	bls.n	8008702 <prvInitialiseNewTask+0x3a>
 8008730:	e000      	b.n	8008734 <prvInitialiseNewTask+0x6c>
		{
			break;
 8008732:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	2243      	movs	r2, #67	; 0x43
 8008738:	2100      	movs	r1, #0
 800873a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	2b06      	cmp	r3, #6
 8008740:	d901      	bls.n	8008746 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008742:	2306      	movs	r3, #6
 8008744:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	6a3a      	ldr	r2, [r7, #32]
 800874a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	6a3a      	ldr	r2, [r7, #32]
 8008750:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008754:	2200      	movs	r2, #0
 8008756:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875a:	3304      	adds	r3, #4
 800875c:	0018      	movs	r0, r3
 800875e:	f7ff f9c2 	bl	8007ae6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	3318      	adds	r3, #24
 8008766:	0018      	movs	r0, r3
 8008768:	f7ff f9bd 	bl	8007ae6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008770:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	2207      	movs	r2, #7
 8008776:	1ad2      	subs	r2, r2, r3
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008780:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008784:	22ac      	movs	r2, #172	; 0xac
 8008786:	2100      	movs	r1, #0
 8008788:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800878a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878c:	22b0      	movs	r2, #176	; 0xb0
 800878e:	2100      	movs	r1, #0
 8008790:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008794:	334c      	adds	r3, #76	; 0x4c
 8008796:	2260      	movs	r2, #96	; 0x60
 8008798:	2100      	movs	r1, #0
 800879a:	0018      	movs	r0, r3
 800879c:	f001 f933 	bl	8009a06 <memset>
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	4a0e      	ldr	r2, [pc, #56]	; (80087dc <prvInitialiseNewTask+0x114>)
 80087a4:	651a      	str	r2, [r3, #80]	; 0x50
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	4a0d      	ldr	r2, [pc, #52]	; (80087e0 <prvInitialiseNewTask+0x118>)
 80087aa:	655a      	str	r2, [r3, #84]	; 0x54
 80087ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ae:	4a0d      	ldr	r2, [pc, #52]	; (80087e4 <prvInitialiseNewTask+0x11c>)
 80087b0:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	68f9      	ldr	r1, [r7, #12]
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	0018      	movs	r0, r3
 80087ba:	f000 fe19 	bl	80093f0 <pxPortInitialiseStack>
 80087be:	0002      	movs	r2, r0
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d002      	beq.n	80087d0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087d0:	46c0      	nop			; (mov r8, r8)
 80087d2:	46bd      	mov	sp, r7
 80087d4:	b006      	add	sp, #24
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	3fffffff 	.word	0x3fffffff
 80087dc:	0800ad4c 	.word	0x0800ad4c
 80087e0:	0800ad6c 	.word	0x0800ad6c
 80087e4:	0800ad2c 	.word	0x0800ad2c

080087e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80087f0:	f000 fe96 	bl	8009520 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80087f4:	4b28      	ldr	r3, [pc, #160]	; (8008898 <prvAddNewTaskToReadyList+0xb0>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	4b27      	ldr	r3, [pc, #156]	; (8008898 <prvAddNewTaskToReadyList+0xb0>)
 80087fc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80087fe:	4b27      	ldr	r3, [pc, #156]	; (800889c <prvAddNewTaskToReadyList+0xb4>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d109      	bne.n	800881a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008806:	4b25      	ldr	r3, [pc, #148]	; (800889c <prvAddNewTaskToReadyList+0xb4>)
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800880c:	4b22      	ldr	r3, [pc, #136]	; (8008898 <prvAddNewTaskToReadyList+0xb0>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d110      	bne.n	8008836 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008814:	f000 fb68 	bl	8008ee8 <prvInitialiseTaskLists>
 8008818:	e00d      	b.n	8008836 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800881a:	4b21      	ldr	r3, [pc, #132]	; (80088a0 <prvAddNewTaskToReadyList+0xb8>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d109      	bne.n	8008836 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008822:	4b1e      	ldr	r3, [pc, #120]	; (800889c <prvAddNewTaskToReadyList+0xb4>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882c:	429a      	cmp	r2, r3
 800882e:	d802      	bhi.n	8008836 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008830:	4b1a      	ldr	r3, [pc, #104]	; (800889c <prvAddNewTaskToReadyList+0xb4>)
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008836:	4b1b      	ldr	r3, [pc, #108]	; (80088a4 <prvAddNewTaskToReadyList+0xbc>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	4b19      	ldr	r3, [pc, #100]	; (80088a4 <prvAddNewTaskToReadyList+0xbc>)
 800883e:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008844:	4b18      	ldr	r3, [pc, #96]	; (80088a8 <prvAddNewTaskToReadyList+0xc0>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	429a      	cmp	r2, r3
 800884a:	d903      	bls.n	8008854 <prvAddNewTaskToReadyList+0x6c>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008850:	4b15      	ldr	r3, [pc, #84]	; (80088a8 <prvAddNewTaskToReadyList+0xc0>)
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008858:	0013      	movs	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	189b      	adds	r3, r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4a12      	ldr	r2, [pc, #72]	; (80088ac <prvAddNewTaskToReadyList+0xc4>)
 8008862:	189a      	adds	r2, r3, r2
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	3304      	adds	r3, #4
 8008868:	0019      	movs	r1, r3
 800886a:	0010      	movs	r0, r2
 800886c:	f7ff f946 	bl	8007afc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008870:	f000 fe68 	bl	8009544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008874:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <prvAddNewTaskToReadyList+0xb8>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d008      	beq.n	800888e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800887c:	4b07      	ldr	r3, [pc, #28]	; (800889c <prvAddNewTaskToReadyList+0xb4>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008886:	429a      	cmp	r2, r3
 8008888:	d201      	bcs.n	800888e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800888a:	f000 fe39 	bl	8009500 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800888e:	46c0      	nop			; (mov r8, r8)
 8008890:	46bd      	mov	sp, r7
 8008892:	b002      	add	sp, #8
 8008894:	bd80      	pop	{r7, pc}
 8008896:	46c0      	nop			; (mov r8, r8)
 8008898:	20000a84 	.word	0x20000a84
 800889c:	20000984 	.word	0x20000984
 80088a0:	20000a90 	.word	0x20000a90
 80088a4:	20000aa0 	.word	0x20000aa0
 80088a8:	20000a8c 	.word	0x20000a8c
 80088ac:	20000988 	.word	0x20000988

080088b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80088b8:	2300      	movs	r3, #0
 80088ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d010      	beq.n	80088e4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80088c2:	4b0d      	ldr	r3, [pc, #52]	; (80088f8 <vTaskDelay+0x48>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <vTaskDelay+0x1e>
 80088ca:	b672      	cpsid	i
 80088cc:	e7fe      	b.n	80088cc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80088ce:	f000 f86d 	bl	80089ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2100      	movs	r1, #0
 80088d6:	0018      	movs	r0, r3
 80088d8:	f000 fd36 	bl	8009348 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80088dc:	f000 f872 	bl	80089c4 <xTaskResumeAll>
 80088e0:	0003      	movs	r3, r0
 80088e2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80088ea:	f000 fe09 	bl	8009500 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088ee:	46c0      	nop			; (mov r8, r8)
 80088f0:	46bd      	mov	sp, r7
 80088f2:	b004      	add	sp, #16
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	46c0      	nop			; (mov r8, r8)
 80088f8:	20000aac 	.word	0x20000aac

080088fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80088fc:	b590      	push	{r4, r7, lr}
 80088fe:	b089      	sub	sp, #36	; 0x24
 8008900:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008902:	2300      	movs	r3, #0
 8008904:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008906:	2300      	movs	r3, #0
 8008908:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800890a:	003a      	movs	r2, r7
 800890c:	1d39      	adds	r1, r7, #4
 800890e:	2308      	movs	r3, #8
 8008910:	18fb      	adds	r3, r7, r3
 8008912:	0018      	movs	r0, r3
 8008914:	f7f7 fd80 	bl	8000418 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008918:	683c      	ldr	r4, [r7, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	491b      	ldr	r1, [pc, #108]	; (800898c <vTaskStartScheduler+0x90>)
 8008920:	481b      	ldr	r0, [pc, #108]	; (8008990 <vTaskStartScheduler+0x94>)
 8008922:	9202      	str	r2, [sp, #8]
 8008924:	9301      	str	r3, [sp, #4]
 8008926:	2300      	movs	r3, #0
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	2300      	movs	r3, #0
 800892c:	0022      	movs	r2, r4
 800892e:	f7ff fe3b 	bl	80085a8 <xTaskCreateStatic>
 8008932:	0002      	movs	r2, r0
 8008934:	4b17      	ldr	r3, [pc, #92]	; (8008994 <vTaskStartScheduler+0x98>)
 8008936:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008938:	4b16      	ldr	r3, [pc, #88]	; (8008994 <vTaskStartScheduler+0x98>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d002      	beq.n	8008946 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008940:	2301      	movs	r3, #1
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	e001      	b.n	800894a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008946:	2300      	movs	r3, #0
 8008948:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d113      	bne.n	8008978 <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8008950:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008952:	4b11      	ldr	r3, [pc, #68]	; (8008998 <vTaskStartScheduler+0x9c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	334c      	adds	r3, #76	; 0x4c
 8008958:	001a      	movs	r2, r3
 800895a:	4b10      	ldr	r3, [pc, #64]	; (800899c <vTaskStartScheduler+0xa0>)
 800895c:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800895e:	4b10      	ldr	r3, [pc, #64]	; (80089a0 <vTaskStartScheduler+0xa4>)
 8008960:	2201      	movs	r2, #1
 8008962:	4252      	negs	r2, r2
 8008964:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008966:	4b0f      	ldr	r3, [pc, #60]	; (80089a4 <vTaskStartScheduler+0xa8>)
 8008968:	2201      	movs	r2, #1
 800896a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800896c:	4b0e      	ldr	r3, [pc, #56]	; (80089a8 <vTaskStartScheduler+0xac>)
 800896e:	2200      	movs	r2, #0
 8008970:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008972:	f000 fda1 	bl	80094b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008976:	e004      	b.n	8008982 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3301      	adds	r3, #1
 800897c:	d101      	bne.n	8008982 <vTaskStartScheduler+0x86>
 800897e:	b672      	cpsid	i
 8008980:	e7fe      	b.n	8008980 <vTaskStartScheduler+0x84>
}
 8008982:	46c0      	nop			; (mov r8, r8)
 8008984:	46bd      	mov	sp, r7
 8008986:	b005      	add	sp, #20
 8008988:	bd90      	pop	{r4, r7, pc}
 800898a:	46c0      	nop			; (mov r8, r8)
 800898c:	0800a94c 	.word	0x0800a94c
 8008990:	08008ec9 	.word	0x08008ec9
 8008994:	20000aa8 	.word	0x20000aa8
 8008998:	20000984 	.word	0x20000984
 800899c:	20000068 	.word	0x20000068
 80089a0:	20000aa4 	.word	0x20000aa4
 80089a4:	20000a90 	.word	0x20000a90
 80089a8:	20000a88 	.word	0x20000a88

080089ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80089b0:	4b03      	ldr	r3, [pc, #12]	; (80089c0 <vTaskSuspendAll+0x14>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	1c5a      	adds	r2, r3, #1
 80089b6:	4b02      	ldr	r3, [pc, #8]	; (80089c0 <vTaskSuspendAll+0x14>)
 80089b8:	601a      	str	r2, [r3, #0]
}
 80089ba:	46c0      	nop			; (mov r8, r8)
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	20000aac 	.word	0x20000aac

080089c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80089ca:	2300      	movs	r3, #0
 80089cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80089ce:	2300      	movs	r3, #0
 80089d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80089d2:	4b3a      	ldr	r3, [pc, #232]	; (8008abc <xTaskResumeAll+0xf8>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <xTaskResumeAll+0x1a>
 80089da:	b672      	cpsid	i
 80089dc:	e7fe      	b.n	80089dc <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80089de:	f000 fd9f 	bl	8009520 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80089e2:	4b36      	ldr	r3, [pc, #216]	; (8008abc <xTaskResumeAll+0xf8>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	1e5a      	subs	r2, r3, #1
 80089e8:	4b34      	ldr	r3, [pc, #208]	; (8008abc <xTaskResumeAll+0xf8>)
 80089ea:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089ec:	4b33      	ldr	r3, [pc, #204]	; (8008abc <xTaskResumeAll+0xf8>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d15b      	bne.n	8008aac <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089f4:	4b32      	ldr	r3, [pc, #200]	; (8008ac0 <xTaskResumeAll+0xfc>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d057      	beq.n	8008aac <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089fc:	e02f      	b.n	8008a5e <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80089fe:	4b31      	ldr	r3, [pc, #196]	; (8008ac4 <xTaskResumeAll+0x100>)
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3318      	adds	r3, #24
 8008a0a:	0018      	movs	r0, r3
 8008a0c:	f7ff f8ce 	bl	8007bac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	3304      	adds	r3, #4
 8008a14:	0018      	movs	r0, r3
 8008a16:	f7ff f8c9 	bl	8007bac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1e:	4b2a      	ldr	r3, [pc, #168]	; (8008ac8 <xTaskResumeAll+0x104>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d903      	bls.n	8008a2e <xTaskResumeAll+0x6a>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a2a:	4b27      	ldr	r3, [pc, #156]	; (8008ac8 <xTaskResumeAll+0x104>)
 8008a2c:	601a      	str	r2, [r3, #0]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a32:	0013      	movs	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	189b      	adds	r3, r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4a24      	ldr	r2, [pc, #144]	; (8008acc <xTaskResumeAll+0x108>)
 8008a3c:	189a      	adds	r2, r3, r2
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3304      	adds	r3, #4
 8008a42:	0019      	movs	r1, r3
 8008a44:	0010      	movs	r0, r2
 8008a46:	f7ff f859 	bl	8007afc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a4e:	4b20      	ldr	r3, [pc, #128]	; (8008ad0 <xTaskResumeAll+0x10c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d302      	bcc.n	8008a5e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8008a58:	4b1e      	ldr	r3, [pc, #120]	; (8008ad4 <xTaskResumeAll+0x110>)
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a5e:	4b19      	ldr	r3, [pc, #100]	; (8008ac4 <xTaskResumeAll+0x100>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1cb      	bne.n	80089fe <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d001      	beq.n	8008a70 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a6c:	f000 fadc 	bl	8009028 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008a70:	4b19      	ldr	r3, [pc, #100]	; (8008ad8 <xTaskResumeAll+0x114>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00f      	beq.n	8008a9c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a7c:	f000 f82e 	bl	8008adc <xTaskIncrementTick>
 8008a80:	1e03      	subs	r3, r0, #0
 8008a82:	d002      	beq.n	8008a8a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8008a84:	4b13      	ldr	r3, [pc, #76]	; (8008ad4 <xTaskResumeAll+0x110>)
 8008a86:	2201      	movs	r2, #1
 8008a88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1f2      	bne.n	8008a7c <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8008a96:	4b10      	ldr	r3, [pc, #64]	; (8008ad8 <xTaskResumeAll+0x114>)
 8008a98:	2200      	movs	r2, #0
 8008a9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a9c:	4b0d      	ldr	r3, [pc, #52]	; (8008ad4 <xTaskResumeAll+0x110>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008aa8:	f000 fd2a 	bl	8009500 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008aac:	f000 fd4a 	bl	8009544 <vPortExitCritical>

	return xAlreadyYielded;
 8008ab0:	68bb      	ldr	r3, [r7, #8]
}
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	b004      	add	sp, #16
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	46c0      	nop			; (mov r8, r8)
 8008abc:	20000aac 	.word	0x20000aac
 8008ac0:	20000a84 	.word	0x20000a84
 8008ac4:	20000a44 	.word	0x20000a44
 8008ac8:	20000a8c 	.word	0x20000a8c
 8008acc:	20000988 	.word	0x20000988
 8008ad0:	20000984 	.word	0x20000984
 8008ad4:	20000a98 	.word	0x20000a98
 8008ad8:	20000a94 	.word	0x20000a94

08008adc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ae6:	4b4c      	ldr	r3, [pc, #304]	; (8008c18 <xTaskIncrementTick+0x13c>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d000      	beq.n	8008af0 <xTaskIncrementTick+0x14>
 8008aee:	e083      	b.n	8008bf8 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008af0:	4b4a      	ldr	r3, [pc, #296]	; (8008c1c <xTaskIncrementTick+0x140>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3301      	adds	r3, #1
 8008af6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008af8:	4b48      	ldr	r3, [pc, #288]	; (8008c1c <xTaskIncrementTick+0x140>)
 8008afa:	693a      	ldr	r2, [r7, #16]
 8008afc:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d117      	bne.n	8008b34 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b04:	4b46      	ldr	r3, [pc, #280]	; (8008c20 <xTaskIncrementTick+0x144>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <xTaskIncrementTick+0x36>
 8008b0e:	b672      	cpsid	i
 8008b10:	e7fe      	b.n	8008b10 <xTaskIncrementTick+0x34>
 8008b12:	4b43      	ldr	r3, [pc, #268]	; (8008c20 <xTaskIncrementTick+0x144>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	4b42      	ldr	r3, [pc, #264]	; (8008c24 <xTaskIncrementTick+0x148>)
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	4b40      	ldr	r3, [pc, #256]	; (8008c20 <xTaskIncrementTick+0x144>)
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	4b40      	ldr	r3, [pc, #256]	; (8008c24 <xTaskIncrementTick+0x148>)
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	4b40      	ldr	r3, [pc, #256]	; (8008c28 <xTaskIncrementTick+0x14c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	4b3e      	ldr	r3, [pc, #248]	; (8008c28 <xTaskIncrementTick+0x14c>)
 8008b2e:	601a      	str	r2, [r3, #0]
 8008b30:	f000 fa7a 	bl	8009028 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b34:	4b3d      	ldr	r3, [pc, #244]	; (8008c2c <xTaskIncrementTick+0x150>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d34e      	bcc.n	8008bdc <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b3e:	4b38      	ldr	r3, [pc, #224]	; (8008c20 <xTaskIncrementTick+0x144>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <xTaskIncrementTick+0x70>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e000      	b.n	8008b4e <xTaskIncrementTick+0x72>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d004      	beq.n	8008b5c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b52:	4b36      	ldr	r3, [pc, #216]	; (8008c2c <xTaskIncrementTick+0x150>)
 8008b54:	2201      	movs	r2, #1
 8008b56:	4252      	negs	r2, r2
 8008b58:	601a      	str	r2, [r3, #0]
					break;
 8008b5a:	e03f      	b.n	8008bdc <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008b5c:	4b30      	ldr	r3, [pc, #192]	; (8008c20 <xTaskIncrementTick+0x144>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d203      	bcs.n	8008b7c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b74:	4b2d      	ldr	r3, [pc, #180]	; (8008c2c <xTaskIncrementTick+0x150>)
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	601a      	str	r2, [r3, #0]
						break;
 8008b7a:	e02f      	b.n	8008bdc <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	0018      	movs	r0, r3
 8008b82:	f7ff f813 	bl	8007bac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d004      	beq.n	8008b98 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	3318      	adds	r3, #24
 8008b92:	0018      	movs	r0, r3
 8008b94:	f7ff f80a 	bl	8007bac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b9c:	4b24      	ldr	r3, [pc, #144]	; (8008c30 <xTaskIncrementTick+0x154>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d903      	bls.n	8008bac <xTaskIncrementTick+0xd0>
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba8:	4b21      	ldr	r3, [pc, #132]	; (8008c30 <xTaskIncrementTick+0x154>)
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb0:	0013      	movs	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	189b      	adds	r3, r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4a1e      	ldr	r2, [pc, #120]	; (8008c34 <xTaskIncrementTick+0x158>)
 8008bba:	189a      	adds	r2, r3, r2
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	0019      	movs	r1, r3
 8008bc2:	0010      	movs	r0, r2
 8008bc4:	f7fe ff9a 	bl	8007afc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bcc:	4b1a      	ldr	r3, [pc, #104]	; (8008c38 <xTaskIncrementTick+0x15c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d3b3      	bcc.n	8008b3e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bda:	e7b0      	b.n	8008b3e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bdc:	4b16      	ldr	r3, [pc, #88]	; (8008c38 <xTaskIncrementTick+0x15c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be2:	4914      	ldr	r1, [pc, #80]	; (8008c34 <xTaskIncrementTick+0x158>)
 8008be4:	0013      	movs	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	189b      	adds	r3, r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	585b      	ldr	r3, [r3, r1]
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d907      	bls.n	8008c02 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	617b      	str	r3, [r7, #20]
 8008bf6:	e004      	b.n	8008c02 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008bf8:	4b10      	ldr	r3, [pc, #64]	; (8008c3c <xTaskIncrementTick+0x160>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	1c5a      	adds	r2, r3, #1
 8008bfe:	4b0f      	ldr	r3, [pc, #60]	; (8008c3c <xTaskIncrementTick+0x160>)
 8008c00:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008c02:	4b0f      	ldr	r3, [pc, #60]	; (8008c40 <xTaskIncrementTick+0x164>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008c0e:	697b      	ldr	r3, [r7, #20]
}
 8008c10:	0018      	movs	r0, r3
 8008c12:	46bd      	mov	sp, r7
 8008c14:	b006      	add	sp, #24
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	20000aac 	.word	0x20000aac
 8008c1c:	20000a88 	.word	0x20000a88
 8008c20:	20000a3c 	.word	0x20000a3c
 8008c24:	20000a40 	.word	0x20000a40
 8008c28:	20000a9c 	.word	0x20000a9c
 8008c2c:	20000aa4 	.word	0x20000aa4
 8008c30:	20000a8c 	.word	0x20000a8c
 8008c34:	20000988 	.word	0x20000988
 8008c38:	20000984 	.word	0x20000984
 8008c3c:	20000a94 	.word	0x20000a94
 8008c40:	20000a98 	.word	0x20000a98

08008c44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c4a:	4b25      	ldr	r3, [pc, #148]	; (8008ce0 <vTaskSwitchContext+0x9c>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c52:	4b24      	ldr	r3, [pc, #144]	; (8008ce4 <vTaskSwitchContext+0xa0>)
 8008c54:	2201      	movs	r2, #1
 8008c56:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c58:	e03d      	b.n	8008cd6 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8008c5a:	4b22      	ldr	r3, [pc, #136]	; (8008ce4 <vTaskSwitchContext+0xa0>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008c60:	4b21      	ldr	r3, [pc, #132]	; (8008ce8 <vTaskSwitchContext+0xa4>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	607b      	str	r3, [r7, #4]
 8008c66:	e007      	b.n	8008c78 <vTaskSwitchContext+0x34>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <vTaskSwitchContext+0x2e>
 8008c6e:	b672      	cpsid	i
 8008c70:	e7fe      	b.n	8008c70 <vTaskSwitchContext+0x2c>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3b01      	subs	r3, #1
 8008c76:	607b      	str	r3, [r7, #4]
 8008c78:	491c      	ldr	r1, [pc, #112]	; (8008cec <vTaskSwitchContext+0xa8>)
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	0013      	movs	r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	189b      	adds	r3, r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	585b      	ldr	r3, [r3, r1]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d0ee      	beq.n	8008c68 <vTaskSwitchContext+0x24>
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	0013      	movs	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	189b      	adds	r3, r3, r2
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4a15      	ldr	r2, [pc, #84]	; (8008cec <vTaskSwitchContext+0xa8>)
 8008c96:	189b      	adds	r3, r3, r2
 8008c98:	603b      	str	r3, [r7, #0]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	605a      	str	r2, [r3, #4]
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	3308      	adds	r3, #8
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d104      	bne.n	8008cba <vTaskSwitchContext+0x76>
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	685a      	ldr	r2, [r3, #4]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	605a      	str	r2, [r3, #4]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	68da      	ldr	r2, [r3, #12]
 8008cc0:	4b0b      	ldr	r3, [pc, #44]	; (8008cf0 <vTaskSwitchContext+0xac>)
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	4b08      	ldr	r3, [pc, #32]	; (8008ce8 <vTaskSwitchContext+0xa4>)
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008cca:	4b09      	ldr	r3, [pc, #36]	; (8008cf0 <vTaskSwitchContext+0xac>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	334c      	adds	r3, #76	; 0x4c
 8008cd0:	001a      	movs	r2, r3
 8008cd2:	4b08      	ldr	r3, [pc, #32]	; (8008cf4 <vTaskSwitchContext+0xb0>)
 8008cd4:	601a      	str	r2, [r3, #0]
}
 8008cd6:	46c0      	nop			; (mov r8, r8)
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	b002      	add	sp, #8
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	46c0      	nop			; (mov r8, r8)
 8008ce0:	20000aac 	.word	0x20000aac
 8008ce4:	20000a98 	.word	0x20000a98
 8008ce8:	20000a8c 	.word	0x20000a8c
 8008cec:	20000988 	.word	0x20000988
 8008cf0:	20000984 	.word	0x20000984
 8008cf4:	20000068 	.word	0x20000068

08008cf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d101      	bne.n	8008d0c <vTaskPlaceOnEventList+0x14>
 8008d08:	b672      	cpsid	i
 8008d0a:	e7fe      	b.n	8008d0a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d0c:	4b08      	ldr	r3, [pc, #32]	; (8008d30 <vTaskPlaceOnEventList+0x38>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	3318      	adds	r3, #24
 8008d12:	001a      	movs	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	0011      	movs	r1, r2
 8008d18:	0018      	movs	r0, r3
 8008d1a:	f7fe ff11 	bl	8007b40 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2101      	movs	r1, #1
 8008d22:	0018      	movs	r0, r3
 8008d24:	f000 fb10 	bl	8009348 <prvAddCurrentTaskToDelayedList>
}
 8008d28:	46c0      	nop			; (mov r8, r8)
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	b002      	add	sp, #8
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	20000984 	.word	0x20000984

08008d34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <xTaskRemoveFromEventList+0x1a>
 8008d4a:	b672      	cpsid	i
 8008d4c:	e7fe      	b.n	8008d4c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	3318      	adds	r3, #24
 8008d52:	0018      	movs	r0, r3
 8008d54:	f7fe ff2a 	bl	8007bac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d58:	4b1e      	ldr	r3, [pc, #120]	; (8008dd4 <xTaskRemoveFromEventList+0xa0>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d11d      	bne.n	8008d9c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	3304      	adds	r3, #4
 8008d64:	0018      	movs	r0, r3
 8008d66:	f7fe ff21 	bl	8007bac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d6e:	4b1a      	ldr	r3, [pc, #104]	; (8008dd8 <xTaskRemoveFromEventList+0xa4>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d903      	bls.n	8008d7e <xTaskRemoveFromEventList+0x4a>
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7a:	4b17      	ldr	r3, [pc, #92]	; (8008dd8 <xTaskRemoveFromEventList+0xa4>)
 8008d7c:	601a      	str	r2, [r3, #0]
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d82:	0013      	movs	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	189b      	adds	r3, r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4a14      	ldr	r2, [pc, #80]	; (8008ddc <xTaskRemoveFromEventList+0xa8>)
 8008d8c:	189a      	adds	r2, r3, r2
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	3304      	adds	r3, #4
 8008d92:	0019      	movs	r1, r3
 8008d94:	0010      	movs	r0, r2
 8008d96:	f7fe feb1 	bl	8007afc <vListInsertEnd>
 8008d9a:	e007      	b.n	8008dac <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	3318      	adds	r3, #24
 8008da0:	001a      	movs	r2, r3
 8008da2:	4b0f      	ldr	r3, [pc, #60]	; (8008de0 <xTaskRemoveFromEventList+0xac>)
 8008da4:	0011      	movs	r1, r2
 8008da6:	0018      	movs	r0, r3
 8008da8:	f7fe fea8 	bl	8007afc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db0:	4b0c      	ldr	r3, [pc, #48]	; (8008de4 <xTaskRemoveFromEventList+0xb0>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d905      	bls.n	8008dc6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008dbe:	4b0a      	ldr	r3, [pc, #40]	; (8008de8 <xTaskRemoveFromEventList+0xb4>)
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	601a      	str	r2, [r3, #0]
 8008dc4:	e001      	b.n	8008dca <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008dca:	68fb      	ldr	r3, [r7, #12]
}
 8008dcc:	0018      	movs	r0, r3
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	b004      	add	sp, #16
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	20000aac 	.word	0x20000aac
 8008dd8:	20000a8c 	.word	0x20000a8c
 8008ddc:	20000988 	.word	0x20000988
 8008de0:	20000a44 	.word	0x20000a44
 8008de4:	20000984 	.word	0x20000984
 8008de8:	20000a98 	.word	0x20000a98

08008dec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008df4:	4b05      	ldr	r3, [pc, #20]	; (8008e0c <vTaskInternalSetTimeOutState+0x20>)
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008dfc:	4b04      	ldr	r3, [pc, #16]	; (8008e10 <vTaskInternalSetTimeOutState+0x24>)
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	605a      	str	r2, [r3, #4]
}
 8008e04:	46c0      	nop			; (mov r8, r8)
 8008e06:	46bd      	mov	sp, r7
 8008e08:	b002      	add	sp, #8
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	20000a9c 	.word	0x20000a9c
 8008e10:	20000a88 	.word	0x20000a88

08008e14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <xTaskCheckForTimeOut+0x14>
 8008e24:	b672      	cpsid	i
 8008e26:	e7fe      	b.n	8008e26 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <xTaskCheckForTimeOut+0x1e>
 8008e2e:	b672      	cpsid	i
 8008e30:	e7fe      	b.n	8008e30 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8008e32:	f000 fb75 	bl	8009520 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e36:	4b1d      	ldr	r3, [pc, #116]	; (8008eac <xTaskCheckForTimeOut+0x98>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	693a      	ldr	r2, [r7, #16]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	d102      	bne.n	8008e54 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	617b      	str	r3, [r7, #20]
 8008e52:	e024      	b.n	8008e9e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	4b15      	ldr	r3, [pc, #84]	; (8008eb0 <xTaskCheckForTimeOut+0x9c>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d007      	beq.n	8008e70 <xTaskCheckForTimeOut+0x5c>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d302      	bcc.n	8008e70 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	617b      	str	r3, [r7, #20]
 8008e6e:	e016      	b.n	8008e9e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d20c      	bcs.n	8008e94 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	1ad2      	subs	r2, r2, r3
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	0018      	movs	r0, r3
 8008e8a:	f7ff ffaf 	bl	8008dec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	617b      	str	r3, [r7, #20]
 8008e92:	e004      	b.n	8008e9e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	2200      	movs	r2, #0
 8008e98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008e9e:	f000 fb51 	bl	8009544 <vPortExitCritical>

	return xReturn;
 8008ea2:	697b      	ldr	r3, [r7, #20]
}
 8008ea4:	0018      	movs	r0, r3
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	b006      	add	sp, #24
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	20000a88 	.word	0x20000a88
 8008eb0:	20000a9c 	.word	0x20000a9c

08008eb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008eb8:	4b02      	ldr	r3, [pc, #8]	; (8008ec4 <vTaskMissedYield+0x10>)
 8008eba:	2201      	movs	r2, #1
 8008ebc:	601a      	str	r2, [r3, #0]
}
 8008ebe:	46c0      	nop			; (mov r8, r8)
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	20000a98 	.word	0x20000a98

08008ec8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ed0:	f000 f84e 	bl	8008f70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ed4:	4b03      	ldr	r3, [pc, #12]	; (8008ee4 <prvIdleTask+0x1c>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d9f9      	bls.n	8008ed0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008edc:	f000 fb10 	bl	8009500 <vPortYield>
		prvCheckTasksWaitingTermination();
 8008ee0:	e7f6      	b.n	8008ed0 <prvIdleTask+0x8>
 8008ee2:	46c0      	nop			; (mov r8, r8)
 8008ee4:	20000988 	.word	0x20000988

08008ee8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008eee:	2300      	movs	r3, #0
 8008ef0:	607b      	str	r3, [r7, #4]
 8008ef2:	e00c      	b.n	8008f0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	0013      	movs	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	189b      	adds	r3, r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4a14      	ldr	r2, [pc, #80]	; (8008f50 <prvInitialiseTaskLists+0x68>)
 8008f00:	189b      	adds	r3, r3, r2
 8008f02:	0018      	movs	r0, r3
 8008f04:	f7fe fdd1 	bl	8007aaa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	607b      	str	r3, [r7, #4]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2b06      	cmp	r3, #6
 8008f12:	d9ef      	bls.n	8008ef4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008f14:	4b0f      	ldr	r3, [pc, #60]	; (8008f54 <prvInitialiseTaskLists+0x6c>)
 8008f16:	0018      	movs	r0, r3
 8008f18:	f7fe fdc7 	bl	8007aaa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f1c:	4b0e      	ldr	r3, [pc, #56]	; (8008f58 <prvInitialiseTaskLists+0x70>)
 8008f1e:	0018      	movs	r0, r3
 8008f20:	f7fe fdc3 	bl	8007aaa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f24:	4b0d      	ldr	r3, [pc, #52]	; (8008f5c <prvInitialiseTaskLists+0x74>)
 8008f26:	0018      	movs	r0, r3
 8008f28:	f7fe fdbf 	bl	8007aaa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f2c:	4b0c      	ldr	r3, [pc, #48]	; (8008f60 <prvInitialiseTaskLists+0x78>)
 8008f2e:	0018      	movs	r0, r3
 8008f30:	f7fe fdbb 	bl	8007aaa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f34:	4b0b      	ldr	r3, [pc, #44]	; (8008f64 <prvInitialiseTaskLists+0x7c>)
 8008f36:	0018      	movs	r0, r3
 8008f38:	f7fe fdb7 	bl	8007aaa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f3c:	4b0a      	ldr	r3, [pc, #40]	; (8008f68 <prvInitialiseTaskLists+0x80>)
 8008f3e:	4a05      	ldr	r2, [pc, #20]	; (8008f54 <prvInitialiseTaskLists+0x6c>)
 8008f40:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f42:	4b0a      	ldr	r3, [pc, #40]	; (8008f6c <prvInitialiseTaskLists+0x84>)
 8008f44:	4a04      	ldr	r2, [pc, #16]	; (8008f58 <prvInitialiseTaskLists+0x70>)
 8008f46:	601a      	str	r2, [r3, #0]
}
 8008f48:	46c0      	nop			; (mov r8, r8)
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	b002      	add	sp, #8
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	20000988 	.word	0x20000988
 8008f54:	20000a14 	.word	0x20000a14
 8008f58:	20000a28 	.word	0x20000a28
 8008f5c:	20000a44 	.word	0x20000a44
 8008f60:	20000a58 	.word	0x20000a58
 8008f64:	20000a70 	.word	0x20000a70
 8008f68:	20000a3c 	.word	0x20000a3c
 8008f6c:	20000a40 	.word	0x20000a40

08008f70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f76:	e01a      	b.n	8008fae <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8008f78:	f000 fad2 	bl	8009520 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008f7c:	4b10      	ldr	r3, [pc, #64]	; (8008fc0 <prvCheckTasksWaitingTermination+0x50>)
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	3304      	adds	r3, #4
 8008f88:	0018      	movs	r0, r3
 8008f8a:	f7fe fe0f 	bl	8007bac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f8e:	4b0d      	ldr	r3, [pc, #52]	; (8008fc4 <prvCheckTasksWaitingTermination+0x54>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	1e5a      	subs	r2, r3, #1
 8008f94:	4b0b      	ldr	r3, [pc, #44]	; (8008fc4 <prvCheckTasksWaitingTermination+0x54>)
 8008f96:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f98:	4b0b      	ldr	r3, [pc, #44]	; (8008fc8 <prvCheckTasksWaitingTermination+0x58>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	1e5a      	subs	r2, r3, #1
 8008f9e:	4b0a      	ldr	r3, [pc, #40]	; (8008fc8 <prvCheckTasksWaitingTermination+0x58>)
 8008fa0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8008fa2:	f000 facf 	bl	8009544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	0018      	movs	r0, r3
 8008faa:	f000 f80f 	bl	8008fcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008fae:	4b06      	ldr	r3, [pc, #24]	; (8008fc8 <prvCheckTasksWaitingTermination+0x58>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1e0      	bne.n	8008f78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008fb6:	46c0      	nop			; (mov r8, r8)
 8008fb8:	46c0      	nop			; (mov r8, r8)
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	b002      	add	sp, #8
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	20000a58 	.word	0x20000a58
 8008fc4:	20000a84 	.word	0x20000a84
 8008fc8:	20000a6c 	.word	0x20000a6c

08008fcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	334c      	adds	r3, #76	; 0x4c
 8008fd8:	0018      	movs	r0, r3
 8008fda:	f000 fdc3 	bl	8009b64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	22b1      	movs	r2, #177	; 0xb1
 8008fe2:	5c9b      	ldrb	r3, [r3, r2]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d109      	bne.n	8008ffc <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fec:	0018      	movs	r0, r3
 8008fee:	f000 fbd5 	bl	800979c <vPortFree>
				vPortFree( pxTCB );
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	0018      	movs	r0, r3
 8008ff6:	f000 fbd1 	bl	800979c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ffa:	e010      	b.n	800901e <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	22b1      	movs	r2, #177	; 0xb1
 8009000:	5c9b      	ldrb	r3, [r3, r2]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d104      	bne.n	8009010 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	0018      	movs	r0, r3
 800900a:	f000 fbc7 	bl	800979c <vPortFree>
	}
 800900e:	e006      	b.n	800901e <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	22b1      	movs	r2, #177	; 0xb1
 8009014:	5c9b      	ldrb	r3, [r3, r2]
 8009016:	2b02      	cmp	r3, #2
 8009018:	d001      	beq.n	800901e <prvDeleteTCB+0x52>
 800901a:	b672      	cpsid	i
 800901c:	e7fe      	b.n	800901c <prvDeleteTCB+0x50>
	}
 800901e:	46c0      	nop			; (mov r8, r8)
 8009020:	46bd      	mov	sp, r7
 8009022:	b002      	add	sp, #8
 8009024:	bd80      	pop	{r7, pc}
	...

08009028 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800902e:	4b0e      	ldr	r3, [pc, #56]	; (8009068 <prvResetNextTaskUnblockTime+0x40>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d101      	bne.n	800903c <prvResetNextTaskUnblockTime+0x14>
 8009038:	2301      	movs	r3, #1
 800903a:	e000      	b.n	800903e <prvResetNextTaskUnblockTime+0x16>
 800903c:	2300      	movs	r3, #0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d004      	beq.n	800904c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009042:	4b0a      	ldr	r3, [pc, #40]	; (800906c <prvResetNextTaskUnblockTime+0x44>)
 8009044:	2201      	movs	r2, #1
 8009046:	4252      	negs	r2, r2
 8009048:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800904a:	e008      	b.n	800905e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800904c:	4b06      	ldr	r3, [pc, #24]	; (8009068 <prvResetNextTaskUnblockTime+0x40>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	4b04      	ldr	r3, [pc, #16]	; (800906c <prvResetNextTaskUnblockTime+0x44>)
 800905c:	601a      	str	r2, [r3, #0]
}
 800905e:	46c0      	nop			; (mov r8, r8)
 8009060:	46bd      	mov	sp, r7
 8009062:	b002      	add	sp, #8
 8009064:	bd80      	pop	{r7, pc}
 8009066:	46c0      	nop			; (mov r8, r8)
 8009068:	20000a3c 	.word	0x20000a3c
 800906c:	20000aa4 	.word	0x20000aa4

08009070 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009076:	4b0a      	ldr	r3, [pc, #40]	; (80090a0 <xTaskGetSchedulerState+0x30>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d102      	bne.n	8009084 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800907e:	2301      	movs	r3, #1
 8009080:	607b      	str	r3, [r7, #4]
 8009082:	e008      	b.n	8009096 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009084:	4b07      	ldr	r3, [pc, #28]	; (80090a4 <xTaskGetSchedulerState+0x34>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d102      	bne.n	8009092 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800908c:	2302      	movs	r3, #2
 800908e:	607b      	str	r3, [r7, #4]
 8009090:	e001      	b.n	8009096 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009092:	2300      	movs	r3, #0
 8009094:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009096:	687b      	ldr	r3, [r7, #4]
	}
 8009098:	0018      	movs	r0, r3
 800909a:	46bd      	mov	sp, r7
 800909c:	b002      	add	sp, #8
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	20000a90 	.word	0x20000a90
 80090a4:	20000aac 	.word	0x20000aac

080090a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80090b4:	2300      	movs	r3, #0
 80090b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d056      	beq.n	800916c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c2:	4b2d      	ldr	r3, [pc, #180]	; (8009178 <xTaskPriorityInherit+0xd0>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d246      	bcs.n	800915a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	db06      	blt.n	80090e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090d4:	4b28      	ldr	r3, [pc, #160]	; (8009178 <xTaskPriorityInherit+0xd0>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090da:	2207      	movs	r2, #7
 80090dc:	1ad2      	subs	r2, r2, r3
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	6959      	ldr	r1, [r3, #20]
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ea:	0013      	movs	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	189b      	adds	r3, r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4a22      	ldr	r2, [pc, #136]	; (800917c <xTaskPriorityInherit+0xd4>)
 80090f4:	189b      	adds	r3, r3, r2
 80090f6:	4299      	cmp	r1, r3
 80090f8:	d101      	bne.n	80090fe <xTaskPriorityInherit+0x56>
 80090fa:	2301      	movs	r3, #1
 80090fc:	e000      	b.n	8009100 <xTaskPriorityInherit+0x58>
 80090fe:	2300      	movs	r3, #0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d022      	beq.n	800914a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	3304      	adds	r3, #4
 8009108:	0018      	movs	r0, r3
 800910a:	f7fe fd4f 	bl	8007bac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800910e:	4b1a      	ldr	r3, [pc, #104]	; (8009178 <xTaskPriorityInherit+0xd0>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911c:	4b18      	ldr	r3, [pc, #96]	; (8009180 <xTaskPriorityInherit+0xd8>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	429a      	cmp	r2, r3
 8009122:	d903      	bls.n	800912c <xTaskPriorityInherit+0x84>
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009128:	4b15      	ldr	r3, [pc, #84]	; (8009180 <xTaskPriorityInherit+0xd8>)
 800912a:	601a      	str	r2, [r3, #0]
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009130:	0013      	movs	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	189b      	adds	r3, r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4a10      	ldr	r2, [pc, #64]	; (800917c <xTaskPriorityInherit+0xd4>)
 800913a:	189a      	adds	r2, r3, r2
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	3304      	adds	r3, #4
 8009140:	0019      	movs	r1, r3
 8009142:	0010      	movs	r0, r2
 8009144:	f7fe fcda 	bl	8007afc <vListInsertEnd>
 8009148:	e004      	b.n	8009154 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800914a:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <xTaskPriorityInherit+0xd0>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009154:	2301      	movs	r3, #1
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	e008      	b.n	800916c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800915e:	4b06      	ldr	r3, [pc, #24]	; (8009178 <xTaskPriorityInherit+0xd0>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009164:	429a      	cmp	r2, r3
 8009166:	d201      	bcs.n	800916c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009168:	2301      	movs	r3, #1
 800916a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800916c:	68fb      	ldr	r3, [r7, #12]
	}
 800916e:	0018      	movs	r0, r3
 8009170:	46bd      	mov	sp, r7
 8009172:	b004      	add	sp, #16
 8009174:	bd80      	pop	{r7, pc}
 8009176:	46c0      	nop			; (mov r8, r8)
 8009178:	20000984 	.word	0x20000984
 800917c:	20000988 	.word	0x20000988
 8009180:	20000a8c 	.word	0x20000a8c

08009184 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009190:	2300      	movs	r3, #0
 8009192:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d044      	beq.n	8009224 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800919a:	4b25      	ldr	r3, [pc, #148]	; (8009230 <xTaskPriorityDisinherit+0xac>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d001      	beq.n	80091a8 <xTaskPriorityDisinherit+0x24>
 80091a4:	b672      	cpsid	i
 80091a6:	e7fe      	b.n	80091a6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <xTaskPriorityDisinherit+0x30>
 80091b0:	b672      	cpsid	i
 80091b2:	e7fe      	b.n	80091b2 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091b8:	1e5a      	subs	r2, r3, #1
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d02c      	beq.n	8009224 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d128      	bne.n	8009224 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	3304      	adds	r3, #4
 80091d6:	0018      	movs	r0, r3
 80091d8:	f7fe fce8 	bl	8007bac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e8:	2207      	movs	r2, #7
 80091ea:	1ad2      	subs	r2, r2, r3
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f4:	4b0f      	ldr	r3, [pc, #60]	; (8009234 <xTaskPriorityDisinherit+0xb0>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d903      	bls.n	8009204 <xTaskPriorityDisinherit+0x80>
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009200:	4b0c      	ldr	r3, [pc, #48]	; (8009234 <xTaskPriorityDisinherit+0xb0>)
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009208:	0013      	movs	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	189b      	adds	r3, r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4a09      	ldr	r2, [pc, #36]	; (8009238 <xTaskPriorityDisinherit+0xb4>)
 8009212:	189a      	adds	r2, r3, r2
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	3304      	adds	r3, #4
 8009218:	0019      	movs	r1, r3
 800921a:	0010      	movs	r0, r2
 800921c:	f7fe fc6e 	bl	8007afc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009220:	2301      	movs	r3, #1
 8009222:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009224:	68fb      	ldr	r3, [r7, #12]
	}
 8009226:	0018      	movs	r0, r3
 8009228:	46bd      	mov	sp, r7
 800922a:	b004      	add	sp, #16
 800922c:	bd80      	pop	{r7, pc}
 800922e:	46c0      	nop			; (mov r8, r8)
 8009230:	20000984 	.word	0x20000984
 8009234:	20000a8c 	.word	0x20000a8c
 8009238:	20000988 	.word	0x20000988

0800923c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800924a:	2301      	movs	r3, #1
 800924c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d05d      	beq.n	8009310 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009258:	2b00      	cmp	r3, #0
 800925a:	d101      	bne.n	8009260 <vTaskPriorityDisinheritAfterTimeout+0x24>
 800925c:	b672      	cpsid	i
 800925e:	e7fe      	b.n	800925e <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	429a      	cmp	r2, r3
 8009268:	d902      	bls.n	8009270 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	617b      	str	r3, [r7, #20]
 800926e:	e002      	b.n	8009276 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009274:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	429a      	cmp	r2, r3
 800927e:	d047      	beq.n	8009310 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	429a      	cmp	r2, r3
 8009288:	d142      	bne.n	8009310 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800928a:	4b23      	ldr	r3, [pc, #140]	; (8009318 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	693a      	ldr	r2, [r7, #16]
 8009290:	429a      	cmp	r2, r3
 8009292:	d101      	bne.n	8009298 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8009294:	b672      	cpsid	i
 8009296:	e7fe      	b.n	8009296 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	697a      	ldr	r2, [r7, #20]
 80092a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	db04      	blt.n	80092b6 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	2207      	movs	r2, #7
 80092b0:	1ad2      	subs	r2, r2, r3
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	6959      	ldr	r1, [r3, #20]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	0013      	movs	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	189b      	adds	r3, r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	4a15      	ldr	r2, [pc, #84]	; (800931c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 80092c6:	189b      	adds	r3, r3, r2
 80092c8:	4299      	cmp	r1, r3
 80092ca:	d101      	bne.n	80092d0 <vTaskPriorityDisinheritAfterTimeout+0x94>
 80092cc:	2301      	movs	r3, #1
 80092ce:	e000      	b.n	80092d2 <vTaskPriorityDisinheritAfterTimeout+0x96>
 80092d0:	2300      	movs	r3, #0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d01c      	beq.n	8009310 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	3304      	adds	r3, #4
 80092da:	0018      	movs	r0, r3
 80092dc:	f7fe fc66 	bl	8007bac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e4:	4b0e      	ldr	r3, [pc, #56]	; (8009320 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d903      	bls.n	80092f4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f0:	4b0b      	ldr	r3, [pc, #44]	; (8009320 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 80092f2:	601a      	str	r2, [r3, #0]
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f8:	0013      	movs	r3, r2
 80092fa:	009b      	lsls	r3, r3, #2
 80092fc:	189b      	adds	r3, r3, r2
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	4a06      	ldr	r2, [pc, #24]	; (800931c <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8009302:	189a      	adds	r2, r3, r2
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	3304      	adds	r3, #4
 8009308:	0019      	movs	r1, r3
 800930a:	0010      	movs	r0, r2
 800930c:	f7fe fbf6 	bl	8007afc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009310:	46c0      	nop			; (mov r8, r8)
 8009312:	46bd      	mov	sp, r7
 8009314:	b006      	add	sp, #24
 8009316:	bd80      	pop	{r7, pc}
 8009318:	20000984 	.word	0x20000984
 800931c:	20000988 	.word	0x20000988
 8009320:	20000a8c 	.word	0x20000a8c

08009324 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009324:	b580      	push	{r7, lr}
 8009326:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009328:	4b06      	ldr	r3, [pc, #24]	; (8009344 <pvTaskIncrementMutexHeldCount+0x20>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d004      	beq.n	800933a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009330:	4b04      	ldr	r3, [pc, #16]	; (8009344 <pvTaskIncrementMutexHeldCount+0x20>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009336:	3201      	adds	r2, #1
 8009338:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800933a:	4b02      	ldr	r3, [pc, #8]	; (8009344 <pvTaskIncrementMutexHeldCount+0x20>)
 800933c:	681b      	ldr	r3, [r3, #0]
	}
 800933e:	0018      	movs	r0, r3
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	20000984 	.word	0x20000984

08009348 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009352:	4b21      	ldr	r3, [pc, #132]	; (80093d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009358:	4b20      	ldr	r3, [pc, #128]	; (80093dc <prvAddCurrentTaskToDelayedList+0x94>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3304      	adds	r3, #4
 800935e:	0018      	movs	r0, r3
 8009360:	f7fe fc24 	bl	8007bac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	3301      	adds	r3, #1
 8009368:	d10b      	bne.n	8009382 <prvAddCurrentTaskToDelayedList+0x3a>
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d008      	beq.n	8009382 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009370:	4b1a      	ldr	r3, [pc, #104]	; (80093dc <prvAddCurrentTaskToDelayedList+0x94>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	1d1a      	adds	r2, r3, #4
 8009376:	4b1a      	ldr	r3, [pc, #104]	; (80093e0 <prvAddCurrentTaskToDelayedList+0x98>)
 8009378:	0011      	movs	r1, r2
 800937a:	0018      	movs	r0, r3
 800937c:	f7fe fbbe 	bl	8007afc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009380:	e026      	b.n	80093d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	18d3      	adds	r3, r2, r3
 8009388:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800938a:	4b14      	ldr	r3, [pc, #80]	; (80093dc <prvAddCurrentTaskToDelayedList+0x94>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	429a      	cmp	r2, r3
 8009398:	d209      	bcs.n	80093ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800939a:	4b12      	ldr	r3, [pc, #72]	; (80093e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	4b0f      	ldr	r3, [pc, #60]	; (80093dc <prvAddCurrentTaskToDelayedList+0x94>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3304      	adds	r3, #4
 80093a4:	0019      	movs	r1, r3
 80093a6:	0010      	movs	r0, r2
 80093a8:	f7fe fbca 	bl	8007b40 <vListInsert>
}
 80093ac:	e010      	b.n	80093d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093ae:	4b0e      	ldr	r3, [pc, #56]	; (80093e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	4b0a      	ldr	r3, [pc, #40]	; (80093dc <prvAddCurrentTaskToDelayedList+0x94>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3304      	adds	r3, #4
 80093b8:	0019      	movs	r1, r3
 80093ba:	0010      	movs	r0, r2
 80093bc:	f7fe fbc0 	bl	8007b40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80093c0:	4b0a      	ldr	r3, [pc, #40]	; (80093ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d202      	bcs.n	80093d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80093ca:	4b08      	ldr	r3, [pc, #32]	; (80093ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	601a      	str	r2, [r3, #0]
}
 80093d0:	46c0      	nop			; (mov r8, r8)
 80093d2:	46bd      	mov	sp, r7
 80093d4:	b004      	add	sp, #16
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	20000a88 	.word	0x20000a88
 80093dc:	20000984 	.word	0x20000984
 80093e0:	20000a70 	.word	0x20000a70
 80093e4:	20000a40 	.word	0x20000a40
 80093e8:	20000a3c 	.word	0x20000a3c
 80093ec:	20000aa4 	.word	0x20000aa4

080093f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	3b04      	subs	r3, #4
 8009400:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2280      	movs	r2, #128	; 0x80
 8009406:	0452      	lsls	r2, r2, #17
 8009408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	3b04      	subs	r3, #4
 800940e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	3b04      	subs	r3, #4
 800941a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800941c:	4a08      	ldr	r2, [pc, #32]	; (8009440 <pxPortInitialiseStack+0x50>)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	3b14      	subs	r3, #20
 8009426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3b20      	subs	r3, #32
 8009432:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009434:	68fb      	ldr	r3, [r7, #12]
}
 8009436:	0018      	movs	r0, r3
 8009438:	46bd      	mov	sp, r7
 800943a:	b004      	add	sp, #16
 800943c:	bd80      	pop	{r7, pc}
 800943e:	46c0      	nop			; (mov r8, r8)
 8009440:	08009445 	.word	0x08009445

08009444 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800944a:	2300      	movs	r3, #0
 800944c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800944e:	4b08      	ldr	r3, [pc, #32]	; (8009470 <prvTaskExitError+0x2c>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3301      	adds	r3, #1
 8009454:	d001      	beq.n	800945a <prvTaskExitError+0x16>
 8009456:	b672      	cpsid	i
 8009458:	e7fe      	b.n	8009458 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800945a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800945c:	46c0      	nop			; (mov r8, r8)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d0fc      	beq.n	800945e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009464:	46c0      	nop			; (mov r8, r8)
 8009466:	46c0      	nop			; (mov r8, r8)
 8009468:	46bd      	mov	sp, r7
 800946a:	b002      	add	sp, #8
 800946c:	bd80      	pop	{r7, pc}
 800946e:	46c0      	nop			; (mov r8, r8)
 8009470:	20000064 	.word	0x20000064

08009474 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8009474:	b580      	push	{r7, lr}
 8009476:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8009478:	46c0      	nop			; (mov r8, r8)
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
	...

08009480 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8009480:	4a0b      	ldr	r2, [pc, #44]	; (80094b0 <pxCurrentTCBConst2>)
 8009482:	6813      	ldr	r3, [r2, #0]
 8009484:	6818      	ldr	r0, [r3, #0]
 8009486:	3020      	adds	r0, #32
 8009488:	f380 8809 	msr	PSP, r0
 800948c:	2002      	movs	r0, #2
 800948e:	f380 8814 	msr	CONTROL, r0
 8009492:	f3bf 8f6f 	isb	sy
 8009496:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8009498:	46ae      	mov	lr, r5
 800949a:	bc08      	pop	{r3}
 800949c:	bc04      	pop	{r2}
 800949e:	b662      	cpsie	i
 80094a0:	4718      	bx	r3
 80094a2:	46c0      	nop			; (mov r8, r8)
 80094a4:	46c0      	nop			; (mov r8, r8)
 80094a6:	46c0      	nop			; (mov r8, r8)
 80094a8:	46c0      	nop			; (mov r8, r8)
 80094aa:	46c0      	nop			; (mov r8, r8)
 80094ac:	46c0      	nop			; (mov r8, r8)
 80094ae:	46c0      	nop			; (mov r8, r8)

080094b0 <pxCurrentTCBConst2>:
 80094b0:	20000984 	.word	0x20000984
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80094b4:	46c0      	nop			; (mov r8, r8)
 80094b6:	46c0      	nop			; (mov r8, r8)

080094b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80094bc:	4b0e      	ldr	r3, [pc, #56]	; (80094f8 <xPortStartScheduler+0x40>)
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	4b0d      	ldr	r3, [pc, #52]	; (80094f8 <xPortStartScheduler+0x40>)
 80094c2:	21ff      	movs	r1, #255	; 0xff
 80094c4:	0409      	lsls	r1, r1, #16
 80094c6:	430a      	orrs	r2, r1
 80094c8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80094ca:	4b0b      	ldr	r3, [pc, #44]	; (80094f8 <xPortStartScheduler+0x40>)
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	4b0a      	ldr	r3, [pc, #40]	; (80094f8 <xPortStartScheduler+0x40>)
 80094d0:	21ff      	movs	r1, #255	; 0xff
 80094d2:	0609      	lsls	r1, r1, #24
 80094d4:	430a      	orrs	r2, r1
 80094d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80094d8:	f000 f898 	bl	800960c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80094dc:	4b07      	ldr	r3, [pc, #28]	; (80094fc <xPortStartScheduler+0x44>)
 80094de:	2200      	movs	r2, #0
 80094e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80094e2:	f7ff ffcd 	bl	8009480 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80094e6:	f7ff fbad 	bl	8008c44 <vTaskSwitchContext>
	prvTaskExitError();
 80094ea:	f7ff ffab 	bl	8009444 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	0018      	movs	r0, r3
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	46c0      	nop			; (mov r8, r8)
 80094f8:	e000ed20 	.word	0xe000ed20
 80094fc:	20000064 	.word	0x20000064

08009500 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8009504:	4b05      	ldr	r3, [pc, #20]	; (800951c <vPortYield+0x1c>)
 8009506:	2280      	movs	r2, #128	; 0x80
 8009508:	0552      	lsls	r2, r2, #21
 800950a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800950c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009510:	f3bf 8f6f 	isb	sy
}
 8009514:	46c0      	nop			; (mov r8, r8)
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	46c0      	nop			; (mov r8, r8)
 800951c:	e000ed04 	.word	0xe000ed04

08009520 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8009524:	b672      	cpsid	i
    uxCriticalNesting++;
 8009526:	4b06      	ldr	r3, [pc, #24]	; (8009540 <vPortEnterCritical+0x20>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	1c5a      	adds	r2, r3, #1
 800952c:	4b04      	ldr	r3, [pc, #16]	; (8009540 <vPortEnterCritical+0x20>)
 800952e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8009530:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009534:	f3bf 8f6f 	isb	sy
}
 8009538:	46c0      	nop			; (mov r8, r8)
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	46c0      	nop			; (mov r8, r8)
 8009540:	20000064 	.word	0x20000064

08009544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009548:	4b09      	ldr	r3, [pc, #36]	; (8009570 <vPortExitCritical+0x2c>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d101      	bne.n	8009554 <vPortExitCritical+0x10>
 8009550:	b672      	cpsid	i
 8009552:	e7fe      	b.n	8009552 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8009554:	4b06      	ldr	r3, [pc, #24]	; (8009570 <vPortExitCritical+0x2c>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	1e5a      	subs	r2, r3, #1
 800955a:	4b05      	ldr	r3, [pc, #20]	; (8009570 <vPortExitCritical+0x2c>)
 800955c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800955e:	4b04      	ldr	r3, [pc, #16]	; (8009570 <vPortExitCritical+0x2c>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d100      	bne.n	8009568 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8009566:	b662      	cpsie	i
    }
}
 8009568:	46c0      	nop			; (mov r8, r8)
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	46c0      	nop			; (mov r8, r8)
 8009570:	20000064 	.word	0x20000064

08009574 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8009574:	f3ef 8010 	mrs	r0, PRIMASK
 8009578:	b672      	cpsid	i
 800957a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800957c:	46c0      	nop			; (mov r8, r8)
 800957e:	0018      	movs	r0, r3

08009580 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8009580:	f380 8810 	msr	PRIMASK, r0
 8009584:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8009586:	46c0      	nop			; (mov r8, r8)
	...

08009590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009590:	f3ef 8009 	mrs	r0, PSP
 8009594:	4b0e      	ldr	r3, [pc, #56]	; (80095d0 <pxCurrentTCBConst>)
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	3820      	subs	r0, #32
 800959a:	6010      	str	r0, [r2, #0]
 800959c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800959e:	4644      	mov	r4, r8
 80095a0:	464d      	mov	r5, r9
 80095a2:	4656      	mov	r6, sl
 80095a4:	465f      	mov	r7, fp
 80095a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80095a8:	b508      	push	{r3, lr}
 80095aa:	b672      	cpsid	i
 80095ac:	f7ff fb4a 	bl	8008c44 <vTaskSwitchContext>
 80095b0:	b662      	cpsie	i
 80095b2:	bc0c      	pop	{r2, r3}
 80095b4:	6811      	ldr	r1, [r2, #0]
 80095b6:	6808      	ldr	r0, [r1, #0]
 80095b8:	3010      	adds	r0, #16
 80095ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80095bc:	46a0      	mov	r8, r4
 80095be:	46a9      	mov	r9, r5
 80095c0:	46b2      	mov	sl, r6
 80095c2:	46bb      	mov	fp, r7
 80095c4:	f380 8809 	msr	PSP, r0
 80095c8:	3820      	subs	r0, #32
 80095ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80095cc:	4718      	bx	r3
 80095ce:	46c0      	nop			; (mov r8, r8)

080095d0 <pxCurrentTCBConst>:
 80095d0:	20000984 	.word	0x20000984
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80095d4:	46c0      	nop			; (mov r8, r8)
 80095d6:	46c0      	nop			; (mov r8, r8)

080095d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80095de:	f7ff ffc9 	bl	8009574 <ulSetInterruptMaskFromISR>
 80095e2:	0003      	movs	r3, r0
 80095e4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095e6:	f7ff fa79 	bl	8008adc <xTaskIncrementTick>
 80095ea:	1e03      	subs	r3, r0, #0
 80095ec:	d003      	beq.n	80095f6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80095ee:	4b06      	ldr	r3, [pc, #24]	; (8009608 <SysTick_Handler+0x30>)
 80095f0:	2280      	movs	r2, #128	; 0x80
 80095f2:	0552      	lsls	r2, r2, #21
 80095f4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	0018      	movs	r0, r3
 80095fa:	f7ff ffc1 	bl	8009580 <vClearInterruptMaskFromISR>
}
 80095fe:	46c0      	nop			; (mov r8, r8)
 8009600:	46bd      	mov	sp, r7
 8009602:	b002      	add	sp, #8
 8009604:	bd80      	pop	{r7, pc}
 8009606:	46c0      	nop			; (mov r8, r8)
 8009608:	e000ed04 	.word	0xe000ed04

0800960c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800960c:	b580      	push	{r7, lr}
 800960e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8009610:	4b0b      	ldr	r3, [pc, #44]	; (8009640 <prvSetupTimerInterrupt+0x34>)
 8009612:	2200      	movs	r2, #0
 8009614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8009616:	4b0b      	ldr	r3, [pc, #44]	; (8009644 <prvSetupTimerInterrupt+0x38>)
 8009618:	2200      	movs	r2, #0
 800961a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800961c:	4b0a      	ldr	r3, [pc, #40]	; (8009648 <prvSetupTimerInterrupt+0x3c>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	22fa      	movs	r2, #250	; 0xfa
 8009622:	0091      	lsls	r1, r2, #2
 8009624:	0018      	movs	r0, r3
 8009626:	f7f6 fd81 	bl	800012c <__udivsi3>
 800962a:	0003      	movs	r3, r0
 800962c:	001a      	movs	r2, r3
 800962e:	4b07      	ldr	r3, [pc, #28]	; (800964c <prvSetupTimerInterrupt+0x40>)
 8009630:	3a01      	subs	r2, #1
 8009632:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8009634:	4b02      	ldr	r3, [pc, #8]	; (8009640 <prvSetupTimerInterrupt+0x34>)
 8009636:	2207      	movs	r2, #7
 8009638:	601a      	str	r2, [r3, #0]
}
 800963a:	46c0      	nop			; (mov r8, r8)
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	e000e010 	.word	0xe000e010
 8009644:	e000e018 	.word	0xe000e018
 8009648:	20000000 	.word	0x20000000
 800964c:	e000e014 	.word	0xe000e014

08009650 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b086      	sub	sp, #24
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009658:	2300      	movs	r3, #0
 800965a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800965c:	f7ff f9a6 	bl	80089ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009660:	4b49      	ldr	r3, [pc, #292]	; (8009788 <pvPortMalloc+0x138>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d101      	bne.n	800966c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009668:	f000 f8e0 	bl	800982c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800966c:	4b47      	ldr	r3, [pc, #284]	; (800978c <pvPortMalloc+0x13c>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	4013      	ands	r3, r2
 8009674:	d000      	beq.n	8009678 <pvPortMalloc+0x28>
 8009676:	e079      	b.n	800976c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d012      	beq.n	80096a4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800967e:	2208      	movs	r2, #8
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	189b      	adds	r3, r3, r2
 8009684:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2207      	movs	r2, #7
 800968a:	4013      	ands	r3, r2
 800968c:	d00a      	beq.n	80096a4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2207      	movs	r2, #7
 8009692:	4393      	bics	r3, r2
 8009694:	3308      	adds	r3, #8
 8009696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2207      	movs	r2, #7
 800969c:	4013      	ands	r3, r2
 800969e:	d001      	beq.n	80096a4 <pvPortMalloc+0x54>
 80096a0:	b672      	cpsid	i
 80096a2:	e7fe      	b.n	80096a2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d060      	beq.n	800976c <pvPortMalloc+0x11c>
 80096aa:	4b39      	ldr	r3, [pc, #228]	; (8009790 <pvPortMalloc+0x140>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d85b      	bhi.n	800976c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096b4:	4b37      	ldr	r3, [pc, #220]	; (8009794 <pvPortMalloc+0x144>)
 80096b6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80096b8:	4b36      	ldr	r3, [pc, #216]	; (8009794 <pvPortMalloc+0x144>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096be:	e004      	b.n	80096ca <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d903      	bls.n	80096dc <pvPortMalloc+0x8c>
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1f1      	bne.n	80096c0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80096dc:	4b2a      	ldr	r3, [pc, #168]	; (8009788 <pvPortMalloc+0x138>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d042      	beq.n	800976c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2208      	movs	r2, #8
 80096ec:	189b      	adds	r3, r3, r2
 80096ee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	1ad2      	subs	r2, r2, r3
 8009700:	2308      	movs	r3, #8
 8009702:	005b      	lsls	r3, r3, #1
 8009704:	429a      	cmp	r2, r3
 8009706:	d916      	bls.n	8009736 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	18d3      	adds	r3, r2, r3
 800970e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	2207      	movs	r2, #7
 8009714:	4013      	ands	r3, r2
 8009716:	d001      	beq.n	800971c <pvPortMalloc+0xcc>
 8009718:	b672      	cpsid	i
 800971a:	e7fe      	b.n	800971a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	685a      	ldr	r2, [r3, #4]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	1ad2      	subs	r2, r2, r3
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	0018      	movs	r0, r3
 8009732:	f000 f8db 	bl	80098ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009736:	4b16      	ldr	r3, [pc, #88]	; (8009790 <pvPortMalloc+0x140>)
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	1ad2      	subs	r2, r2, r3
 8009740:	4b13      	ldr	r3, [pc, #76]	; (8009790 <pvPortMalloc+0x140>)
 8009742:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009744:	4b12      	ldr	r3, [pc, #72]	; (8009790 <pvPortMalloc+0x140>)
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	4b13      	ldr	r3, [pc, #76]	; (8009798 <pvPortMalloc+0x148>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	429a      	cmp	r2, r3
 800974e:	d203      	bcs.n	8009758 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009750:	4b0f      	ldr	r3, [pc, #60]	; (8009790 <pvPortMalloc+0x140>)
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	4b10      	ldr	r3, [pc, #64]	; (8009798 <pvPortMalloc+0x148>)
 8009756:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	685a      	ldr	r2, [r3, #4]
 800975c:	4b0b      	ldr	r3, [pc, #44]	; (800978c <pvPortMalloc+0x13c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	431a      	orrs	r2, r3
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	2200      	movs	r2, #0
 800976a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800976c:	f7ff f92a 	bl	80089c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2207      	movs	r2, #7
 8009774:	4013      	ands	r3, r2
 8009776:	d001      	beq.n	800977c <pvPortMalloc+0x12c>
 8009778:	b672      	cpsid	i
 800977a:	e7fe      	b.n	800977a <pvPortMalloc+0x12a>
	return pvReturn;
 800977c:	68fb      	ldr	r3, [r7, #12]
}
 800977e:	0018      	movs	r0, r3
 8009780:	46bd      	mov	sp, r7
 8009782:	b006      	add	sp, #24
 8009784:	bd80      	pop	{r7, pc}
 8009786:	46c0      	nop			; (mov r8, r8)
 8009788:	20001ab8 	.word	0x20001ab8
 800978c:	20001ac4 	.word	0x20001ac4
 8009790:	20001abc 	.word	0x20001abc
 8009794:	20001ab0 	.word	0x20001ab0
 8009798:	20001ac0 	.word	0x20001ac0

0800979c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d035      	beq.n	800981a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80097ae:	2308      	movs	r3, #8
 80097b0:	425b      	negs	r3, r3
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	18d3      	adds	r3, r2, r3
 80097b6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	4b18      	ldr	r3, [pc, #96]	; (8009824 <vPortFree+0x88>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4013      	ands	r3, r2
 80097c6:	d101      	bne.n	80097cc <vPortFree+0x30>
 80097c8:	b672      	cpsid	i
 80097ca:	e7fe      	b.n	80097ca <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d001      	beq.n	80097d8 <vPortFree+0x3c>
 80097d4:	b672      	cpsid	i
 80097d6:	e7fe      	b.n	80097d6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	4b11      	ldr	r3, [pc, #68]	; (8009824 <vPortFree+0x88>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4013      	ands	r3, r2
 80097e2:	d01a      	beq.n	800981a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d116      	bne.n	800981a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	685a      	ldr	r2, [r3, #4]
 80097f0:	4b0c      	ldr	r3, [pc, #48]	; (8009824 <vPortFree+0x88>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	43db      	mvns	r3, r3
 80097f6:	401a      	ands	r2, r3
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80097fc:	f7ff f8d6 	bl	80089ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	685a      	ldr	r2, [r3, #4]
 8009804:	4b08      	ldr	r3, [pc, #32]	; (8009828 <vPortFree+0x8c>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	18d2      	adds	r2, r2, r3
 800980a:	4b07      	ldr	r3, [pc, #28]	; (8009828 <vPortFree+0x8c>)
 800980c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	0018      	movs	r0, r3
 8009812:	f000 f86b 	bl	80098ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009816:	f7ff f8d5 	bl	80089c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800981a:	46c0      	nop			; (mov r8, r8)
 800981c:	46bd      	mov	sp, r7
 800981e:	b004      	add	sp, #16
 8009820:	bd80      	pop	{r7, pc}
 8009822:	46c0      	nop			; (mov r8, r8)
 8009824:	20001ac4 	.word	0x20001ac4
 8009828:	20001abc 	.word	0x20001abc

0800982c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009832:	2380      	movs	r3, #128	; 0x80
 8009834:	015b      	lsls	r3, r3, #5
 8009836:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009838:	4b26      	ldr	r3, [pc, #152]	; (80098d4 <prvHeapInit+0xa8>)
 800983a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2207      	movs	r2, #7
 8009840:	4013      	ands	r3, r2
 8009842:	d00c      	beq.n	800985e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	3307      	adds	r3, #7
 8009848:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2207      	movs	r2, #7
 800984e:	4393      	bics	r3, r2
 8009850:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	1ad2      	subs	r2, r2, r3
 8009858:	4b1e      	ldr	r3, [pc, #120]	; (80098d4 <prvHeapInit+0xa8>)
 800985a:	18d3      	adds	r3, r2, r3
 800985c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009862:	4b1d      	ldr	r3, [pc, #116]	; (80098d8 <prvHeapInit+0xac>)
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009868:	4b1b      	ldr	r3, [pc, #108]	; (80098d8 <prvHeapInit+0xac>)
 800986a:	2200      	movs	r2, #0
 800986c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	18d3      	adds	r3, r2, r3
 8009874:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009876:	2208      	movs	r2, #8
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	1a9b      	subs	r3, r3, r2
 800987c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2207      	movs	r2, #7
 8009882:	4393      	bics	r3, r2
 8009884:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	4b14      	ldr	r3, [pc, #80]	; (80098dc <prvHeapInit+0xb0>)
 800988a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800988c:	4b13      	ldr	r3, [pc, #76]	; (80098dc <prvHeapInit+0xb0>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2200      	movs	r2, #0
 8009892:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009894:	4b11      	ldr	r3, [pc, #68]	; (80098dc <prvHeapInit+0xb0>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2200      	movs	r2, #0
 800989a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	1ad2      	subs	r2, r2, r3
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098aa:	4b0c      	ldr	r3, [pc, #48]	; (80098dc <prvHeapInit+0xb0>)
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	685a      	ldr	r2, [r3, #4]
 80098b6:	4b0a      	ldr	r3, [pc, #40]	; (80098e0 <prvHeapInit+0xb4>)
 80098b8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	685a      	ldr	r2, [r3, #4]
 80098be:	4b09      	ldr	r3, [pc, #36]	; (80098e4 <prvHeapInit+0xb8>)
 80098c0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80098c2:	4b09      	ldr	r3, [pc, #36]	; (80098e8 <prvHeapInit+0xbc>)
 80098c4:	2280      	movs	r2, #128	; 0x80
 80098c6:	0612      	lsls	r2, r2, #24
 80098c8:	601a      	str	r2, [r3, #0]
}
 80098ca:	46c0      	nop			; (mov r8, r8)
 80098cc:	46bd      	mov	sp, r7
 80098ce:	b004      	add	sp, #16
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	46c0      	nop			; (mov r8, r8)
 80098d4:	20000ab0 	.word	0x20000ab0
 80098d8:	20001ab0 	.word	0x20001ab0
 80098dc:	20001ab8 	.word	0x20001ab8
 80098e0:	20001ac0 	.word	0x20001ac0
 80098e4:	20001abc 	.word	0x20001abc
 80098e8:	20001ac4 	.word	0x20001ac4

080098ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80098f4:	4b27      	ldr	r3, [pc, #156]	; (8009994 <prvInsertBlockIntoFreeList+0xa8>)
 80098f6:	60fb      	str	r3, [r7, #12]
 80098f8:	e002      	b.n	8009900 <prvInsertBlockIntoFreeList+0x14>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	60fb      	str	r3, [r7, #12]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	429a      	cmp	r2, r3
 8009908:	d8f7      	bhi.n	80098fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	18d3      	adds	r3, r2, r3
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	429a      	cmp	r2, r3
 800991a:	d108      	bne.n	800992e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	18d2      	adds	r2, r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	18d2      	adds	r2, r2, r3
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	429a      	cmp	r2, r3
 8009940:	d118      	bne.n	8009974 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	4b14      	ldr	r3, [pc, #80]	; (8009998 <prvInsertBlockIntoFreeList+0xac>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	429a      	cmp	r2, r3
 800994c:	d00d      	beq.n	800996a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	685a      	ldr	r2, [r3, #4]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	18d2      	adds	r2, r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	601a      	str	r2, [r3, #0]
 8009968:	e008      	b.n	800997c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800996a:	4b0b      	ldr	r3, [pc, #44]	; (8009998 <prvInsertBlockIntoFreeList+0xac>)
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	601a      	str	r2, [r3, #0]
 8009972:	e003      	b.n	800997c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	429a      	cmp	r2, r3
 8009982:	d002      	beq.n	800998a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800998a:	46c0      	nop			; (mov r8, r8)
 800998c:	46bd      	mov	sp, r7
 800998e:	b004      	add	sp, #16
 8009990:	bd80      	pop	{r7, pc}
 8009992:	46c0      	nop			; (mov r8, r8)
 8009994:	20001ab0 	.word	0x20001ab0
 8009998:	20001ab8 	.word	0x20001ab8

0800999c <__errno>:
 800999c:	4b01      	ldr	r3, [pc, #4]	; (80099a4 <__errno+0x8>)
 800999e:	6818      	ldr	r0, [r3, #0]
 80099a0:	4770      	bx	lr
 80099a2:	46c0      	nop			; (mov r8, r8)
 80099a4:	20000068 	.word	0x20000068

080099a8 <__libc_init_array>:
 80099a8:	b570      	push	{r4, r5, r6, lr}
 80099aa:	2600      	movs	r6, #0
 80099ac:	4d0c      	ldr	r5, [pc, #48]	; (80099e0 <__libc_init_array+0x38>)
 80099ae:	4c0d      	ldr	r4, [pc, #52]	; (80099e4 <__libc_init_array+0x3c>)
 80099b0:	1b64      	subs	r4, r4, r5
 80099b2:	10a4      	asrs	r4, r4, #2
 80099b4:	42a6      	cmp	r6, r4
 80099b6:	d109      	bne.n	80099cc <__libc_init_array+0x24>
 80099b8:	2600      	movs	r6, #0
 80099ba:	f000 fd39 	bl	800a430 <_init>
 80099be:	4d0a      	ldr	r5, [pc, #40]	; (80099e8 <__libc_init_array+0x40>)
 80099c0:	4c0a      	ldr	r4, [pc, #40]	; (80099ec <__libc_init_array+0x44>)
 80099c2:	1b64      	subs	r4, r4, r5
 80099c4:	10a4      	asrs	r4, r4, #2
 80099c6:	42a6      	cmp	r6, r4
 80099c8:	d105      	bne.n	80099d6 <__libc_init_array+0x2e>
 80099ca:	bd70      	pop	{r4, r5, r6, pc}
 80099cc:	00b3      	lsls	r3, r6, #2
 80099ce:	58eb      	ldr	r3, [r5, r3]
 80099d0:	4798      	blx	r3
 80099d2:	3601      	adds	r6, #1
 80099d4:	e7ee      	b.n	80099b4 <__libc_init_array+0xc>
 80099d6:	00b3      	lsls	r3, r6, #2
 80099d8:	58eb      	ldr	r3, [r5, r3]
 80099da:	4798      	blx	r3
 80099dc:	3601      	adds	r6, #1
 80099de:	e7f2      	b.n	80099c6 <__libc_init_array+0x1e>
 80099e0:	0800adc0 	.word	0x0800adc0
 80099e4:	0800adc0 	.word	0x0800adc0
 80099e8:	0800adc0 	.word	0x0800adc0
 80099ec:	0800adc4 	.word	0x0800adc4

080099f0 <__retarget_lock_acquire_recursive>:
 80099f0:	4770      	bx	lr

080099f2 <__retarget_lock_release_recursive>:
 80099f2:	4770      	bx	lr

080099f4 <memcpy>:
 80099f4:	2300      	movs	r3, #0
 80099f6:	b510      	push	{r4, lr}
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d100      	bne.n	80099fe <memcpy+0xa>
 80099fc:	bd10      	pop	{r4, pc}
 80099fe:	5ccc      	ldrb	r4, [r1, r3]
 8009a00:	54c4      	strb	r4, [r0, r3]
 8009a02:	3301      	adds	r3, #1
 8009a04:	e7f8      	b.n	80099f8 <memcpy+0x4>

08009a06 <memset>:
 8009a06:	0003      	movs	r3, r0
 8009a08:	1882      	adds	r2, r0, r2
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d100      	bne.n	8009a10 <memset+0xa>
 8009a0e:	4770      	bx	lr
 8009a10:	7019      	strb	r1, [r3, #0]
 8009a12:	3301      	adds	r3, #1
 8009a14:	e7f9      	b.n	8009a0a <memset+0x4>
	...

08009a18 <sbrk_aligned>:
 8009a18:	b570      	push	{r4, r5, r6, lr}
 8009a1a:	4e0f      	ldr	r6, [pc, #60]	; (8009a58 <sbrk_aligned+0x40>)
 8009a1c:	000d      	movs	r5, r1
 8009a1e:	6831      	ldr	r1, [r6, #0]
 8009a20:	0004      	movs	r4, r0
 8009a22:	2900      	cmp	r1, #0
 8009a24:	d102      	bne.n	8009a2c <sbrk_aligned+0x14>
 8009a26:	f000 f903 	bl	8009c30 <_sbrk_r>
 8009a2a:	6030      	str	r0, [r6, #0]
 8009a2c:	0029      	movs	r1, r5
 8009a2e:	0020      	movs	r0, r4
 8009a30:	f000 f8fe 	bl	8009c30 <_sbrk_r>
 8009a34:	1c43      	adds	r3, r0, #1
 8009a36:	d00a      	beq.n	8009a4e <sbrk_aligned+0x36>
 8009a38:	2303      	movs	r3, #3
 8009a3a:	1cc5      	adds	r5, r0, #3
 8009a3c:	439d      	bics	r5, r3
 8009a3e:	42a8      	cmp	r0, r5
 8009a40:	d007      	beq.n	8009a52 <sbrk_aligned+0x3a>
 8009a42:	1a29      	subs	r1, r5, r0
 8009a44:	0020      	movs	r0, r4
 8009a46:	f000 f8f3 	bl	8009c30 <_sbrk_r>
 8009a4a:	1c43      	adds	r3, r0, #1
 8009a4c:	d101      	bne.n	8009a52 <sbrk_aligned+0x3a>
 8009a4e:	2501      	movs	r5, #1
 8009a50:	426d      	negs	r5, r5
 8009a52:	0028      	movs	r0, r5
 8009a54:	bd70      	pop	{r4, r5, r6, pc}
 8009a56:	46c0      	nop			; (mov r8, r8)
 8009a58:	20001ad0 	.word	0x20001ad0

08009a5c <_malloc_r>:
 8009a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a5e:	2203      	movs	r2, #3
 8009a60:	1ccb      	adds	r3, r1, #3
 8009a62:	4393      	bics	r3, r2
 8009a64:	3308      	adds	r3, #8
 8009a66:	0006      	movs	r6, r0
 8009a68:	001f      	movs	r7, r3
 8009a6a:	2b0c      	cmp	r3, #12
 8009a6c:	d232      	bcs.n	8009ad4 <_malloc_r+0x78>
 8009a6e:	270c      	movs	r7, #12
 8009a70:	42b9      	cmp	r1, r7
 8009a72:	d831      	bhi.n	8009ad8 <_malloc_r+0x7c>
 8009a74:	0030      	movs	r0, r6
 8009a76:	f000 f947 	bl	8009d08 <__malloc_lock>
 8009a7a:	4d32      	ldr	r5, [pc, #200]	; (8009b44 <_malloc_r+0xe8>)
 8009a7c:	682b      	ldr	r3, [r5, #0]
 8009a7e:	001c      	movs	r4, r3
 8009a80:	2c00      	cmp	r4, #0
 8009a82:	d12e      	bne.n	8009ae2 <_malloc_r+0x86>
 8009a84:	0039      	movs	r1, r7
 8009a86:	0030      	movs	r0, r6
 8009a88:	f7ff ffc6 	bl	8009a18 <sbrk_aligned>
 8009a8c:	0004      	movs	r4, r0
 8009a8e:	1c43      	adds	r3, r0, #1
 8009a90:	d11e      	bne.n	8009ad0 <_malloc_r+0x74>
 8009a92:	682c      	ldr	r4, [r5, #0]
 8009a94:	0025      	movs	r5, r4
 8009a96:	2d00      	cmp	r5, #0
 8009a98:	d14a      	bne.n	8009b30 <_malloc_r+0xd4>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	0029      	movs	r1, r5
 8009a9e:	18e3      	adds	r3, r4, r3
 8009aa0:	0030      	movs	r0, r6
 8009aa2:	9301      	str	r3, [sp, #4]
 8009aa4:	f000 f8c4 	bl	8009c30 <_sbrk_r>
 8009aa8:	9b01      	ldr	r3, [sp, #4]
 8009aaa:	4283      	cmp	r3, r0
 8009aac:	d143      	bne.n	8009b36 <_malloc_r+0xda>
 8009aae:	6823      	ldr	r3, [r4, #0]
 8009ab0:	3703      	adds	r7, #3
 8009ab2:	1aff      	subs	r7, r7, r3
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	439f      	bics	r7, r3
 8009ab8:	3708      	adds	r7, #8
 8009aba:	2f0c      	cmp	r7, #12
 8009abc:	d200      	bcs.n	8009ac0 <_malloc_r+0x64>
 8009abe:	270c      	movs	r7, #12
 8009ac0:	0039      	movs	r1, r7
 8009ac2:	0030      	movs	r0, r6
 8009ac4:	f7ff ffa8 	bl	8009a18 <sbrk_aligned>
 8009ac8:	1c43      	adds	r3, r0, #1
 8009aca:	d034      	beq.n	8009b36 <_malloc_r+0xda>
 8009acc:	6823      	ldr	r3, [r4, #0]
 8009ace:	19df      	adds	r7, r3, r7
 8009ad0:	6027      	str	r7, [r4, #0]
 8009ad2:	e013      	b.n	8009afc <_malloc_r+0xa0>
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	dacb      	bge.n	8009a70 <_malloc_r+0x14>
 8009ad8:	230c      	movs	r3, #12
 8009ada:	2500      	movs	r5, #0
 8009adc:	6033      	str	r3, [r6, #0]
 8009ade:	0028      	movs	r0, r5
 8009ae0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ae2:	6822      	ldr	r2, [r4, #0]
 8009ae4:	1bd1      	subs	r1, r2, r7
 8009ae6:	d420      	bmi.n	8009b2a <_malloc_r+0xce>
 8009ae8:	290b      	cmp	r1, #11
 8009aea:	d917      	bls.n	8009b1c <_malloc_r+0xc0>
 8009aec:	19e2      	adds	r2, r4, r7
 8009aee:	6027      	str	r7, [r4, #0]
 8009af0:	42a3      	cmp	r3, r4
 8009af2:	d111      	bne.n	8009b18 <_malloc_r+0xbc>
 8009af4:	602a      	str	r2, [r5, #0]
 8009af6:	6863      	ldr	r3, [r4, #4]
 8009af8:	6011      	str	r1, [r2, #0]
 8009afa:	6053      	str	r3, [r2, #4]
 8009afc:	0030      	movs	r0, r6
 8009afe:	0025      	movs	r5, r4
 8009b00:	f000 f90a 	bl	8009d18 <__malloc_unlock>
 8009b04:	2207      	movs	r2, #7
 8009b06:	350b      	adds	r5, #11
 8009b08:	1d23      	adds	r3, r4, #4
 8009b0a:	4395      	bics	r5, r2
 8009b0c:	1aea      	subs	r2, r5, r3
 8009b0e:	429d      	cmp	r5, r3
 8009b10:	d0e5      	beq.n	8009ade <_malloc_r+0x82>
 8009b12:	1b5b      	subs	r3, r3, r5
 8009b14:	50a3      	str	r3, [r4, r2]
 8009b16:	e7e2      	b.n	8009ade <_malloc_r+0x82>
 8009b18:	605a      	str	r2, [r3, #4]
 8009b1a:	e7ec      	b.n	8009af6 <_malloc_r+0x9a>
 8009b1c:	6862      	ldr	r2, [r4, #4]
 8009b1e:	42a3      	cmp	r3, r4
 8009b20:	d101      	bne.n	8009b26 <_malloc_r+0xca>
 8009b22:	602a      	str	r2, [r5, #0]
 8009b24:	e7ea      	b.n	8009afc <_malloc_r+0xa0>
 8009b26:	605a      	str	r2, [r3, #4]
 8009b28:	e7e8      	b.n	8009afc <_malloc_r+0xa0>
 8009b2a:	0023      	movs	r3, r4
 8009b2c:	6864      	ldr	r4, [r4, #4]
 8009b2e:	e7a7      	b.n	8009a80 <_malloc_r+0x24>
 8009b30:	002c      	movs	r4, r5
 8009b32:	686d      	ldr	r5, [r5, #4]
 8009b34:	e7af      	b.n	8009a96 <_malloc_r+0x3a>
 8009b36:	230c      	movs	r3, #12
 8009b38:	0030      	movs	r0, r6
 8009b3a:	6033      	str	r3, [r6, #0]
 8009b3c:	f000 f8ec 	bl	8009d18 <__malloc_unlock>
 8009b40:	e7cd      	b.n	8009ade <_malloc_r+0x82>
 8009b42:	46c0      	nop			; (mov r8, r8)
 8009b44:	20001acc 	.word	0x20001acc

08009b48 <cleanup_glue>:
 8009b48:	b570      	push	{r4, r5, r6, lr}
 8009b4a:	000d      	movs	r5, r1
 8009b4c:	6809      	ldr	r1, [r1, #0]
 8009b4e:	0004      	movs	r4, r0
 8009b50:	2900      	cmp	r1, #0
 8009b52:	d001      	beq.n	8009b58 <cleanup_glue+0x10>
 8009b54:	f7ff fff8 	bl	8009b48 <cleanup_glue>
 8009b58:	0029      	movs	r1, r5
 8009b5a:	0020      	movs	r0, r4
 8009b5c:	f000 f8e4 	bl	8009d28 <_free_r>
 8009b60:	bd70      	pop	{r4, r5, r6, pc}
	...

08009b64 <_reclaim_reent>:
 8009b64:	4b31      	ldr	r3, [pc, #196]	; (8009c2c <_reclaim_reent+0xc8>)
 8009b66:	b570      	push	{r4, r5, r6, lr}
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	0004      	movs	r4, r0
 8009b6c:	4283      	cmp	r3, r0
 8009b6e:	d049      	beq.n	8009c04 <_reclaim_reent+0xa0>
 8009b70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00a      	beq.n	8009b8c <_reclaim_reent+0x28>
 8009b76:	2500      	movs	r5, #0
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	42ab      	cmp	r3, r5
 8009b7c:	d147      	bne.n	8009c0e <_reclaim_reent+0xaa>
 8009b7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b80:	6819      	ldr	r1, [r3, #0]
 8009b82:	2900      	cmp	r1, #0
 8009b84:	d002      	beq.n	8009b8c <_reclaim_reent+0x28>
 8009b86:	0020      	movs	r0, r4
 8009b88:	f000 f8ce 	bl	8009d28 <_free_r>
 8009b8c:	6961      	ldr	r1, [r4, #20]
 8009b8e:	2900      	cmp	r1, #0
 8009b90:	d002      	beq.n	8009b98 <_reclaim_reent+0x34>
 8009b92:	0020      	movs	r0, r4
 8009b94:	f000 f8c8 	bl	8009d28 <_free_r>
 8009b98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009b9a:	2900      	cmp	r1, #0
 8009b9c:	d002      	beq.n	8009ba4 <_reclaim_reent+0x40>
 8009b9e:	0020      	movs	r0, r4
 8009ba0:	f000 f8c2 	bl	8009d28 <_free_r>
 8009ba4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009ba6:	2900      	cmp	r1, #0
 8009ba8:	d002      	beq.n	8009bb0 <_reclaim_reent+0x4c>
 8009baa:	0020      	movs	r0, r4
 8009bac:	f000 f8bc 	bl	8009d28 <_free_r>
 8009bb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009bb2:	2900      	cmp	r1, #0
 8009bb4:	d002      	beq.n	8009bbc <_reclaim_reent+0x58>
 8009bb6:	0020      	movs	r0, r4
 8009bb8:	f000 f8b6 	bl	8009d28 <_free_r>
 8009bbc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009bbe:	2900      	cmp	r1, #0
 8009bc0:	d002      	beq.n	8009bc8 <_reclaim_reent+0x64>
 8009bc2:	0020      	movs	r0, r4
 8009bc4:	f000 f8b0 	bl	8009d28 <_free_r>
 8009bc8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009bca:	2900      	cmp	r1, #0
 8009bcc:	d002      	beq.n	8009bd4 <_reclaim_reent+0x70>
 8009bce:	0020      	movs	r0, r4
 8009bd0:	f000 f8aa 	bl	8009d28 <_free_r>
 8009bd4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009bd6:	2900      	cmp	r1, #0
 8009bd8:	d002      	beq.n	8009be0 <_reclaim_reent+0x7c>
 8009bda:	0020      	movs	r0, r4
 8009bdc:	f000 f8a4 	bl	8009d28 <_free_r>
 8009be0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009be2:	2900      	cmp	r1, #0
 8009be4:	d002      	beq.n	8009bec <_reclaim_reent+0x88>
 8009be6:	0020      	movs	r0, r4
 8009be8:	f000 f89e 	bl	8009d28 <_free_r>
 8009bec:	69a3      	ldr	r3, [r4, #24]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d008      	beq.n	8009c04 <_reclaim_reent+0xa0>
 8009bf2:	0020      	movs	r0, r4
 8009bf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009bf6:	4798      	blx	r3
 8009bf8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009bfa:	2900      	cmp	r1, #0
 8009bfc:	d002      	beq.n	8009c04 <_reclaim_reent+0xa0>
 8009bfe:	0020      	movs	r0, r4
 8009c00:	f7ff ffa2 	bl	8009b48 <cleanup_glue>
 8009c04:	bd70      	pop	{r4, r5, r6, pc}
 8009c06:	5949      	ldr	r1, [r1, r5]
 8009c08:	2900      	cmp	r1, #0
 8009c0a:	d108      	bne.n	8009c1e <_reclaim_reent+0xba>
 8009c0c:	3504      	adds	r5, #4
 8009c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c10:	68d9      	ldr	r1, [r3, #12]
 8009c12:	2d80      	cmp	r5, #128	; 0x80
 8009c14:	d1f7      	bne.n	8009c06 <_reclaim_reent+0xa2>
 8009c16:	0020      	movs	r0, r4
 8009c18:	f000 f886 	bl	8009d28 <_free_r>
 8009c1c:	e7af      	b.n	8009b7e <_reclaim_reent+0x1a>
 8009c1e:	680e      	ldr	r6, [r1, #0]
 8009c20:	0020      	movs	r0, r4
 8009c22:	f000 f881 	bl	8009d28 <_free_r>
 8009c26:	0031      	movs	r1, r6
 8009c28:	e7ee      	b.n	8009c08 <_reclaim_reent+0xa4>
 8009c2a:	46c0      	nop			; (mov r8, r8)
 8009c2c:	20000068 	.word	0x20000068

08009c30 <_sbrk_r>:
 8009c30:	2300      	movs	r3, #0
 8009c32:	b570      	push	{r4, r5, r6, lr}
 8009c34:	4d06      	ldr	r5, [pc, #24]	; (8009c50 <_sbrk_r+0x20>)
 8009c36:	0004      	movs	r4, r0
 8009c38:	0008      	movs	r0, r1
 8009c3a:	602b      	str	r3, [r5, #0]
 8009c3c:	f7f7 f83a 	bl	8000cb4 <_sbrk>
 8009c40:	1c43      	adds	r3, r0, #1
 8009c42:	d103      	bne.n	8009c4c <_sbrk_r+0x1c>
 8009c44:	682b      	ldr	r3, [r5, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d000      	beq.n	8009c4c <_sbrk_r+0x1c>
 8009c4a:	6023      	str	r3, [r4, #0]
 8009c4c:	bd70      	pop	{r4, r5, r6, pc}
 8009c4e:	46c0      	nop			; (mov r8, r8)
 8009c50:	20001ad4 	.word	0x20001ad4

08009c54 <_vsniprintf_r>:
 8009c54:	b530      	push	{r4, r5, lr}
 8009c56:	0014      	movs	r4, r2
 8009c58:	0005      	movs	r5, r0
 8009c5a:	001a      	movs	r2, r3
 8009c5c:	b09b      	sub	sp, #108	; 0x6c
 8009c5e:	2c00      	cmp	r4, #0
 8009c60:	da05      	bge.n	8009c6e <_vsniprintf_r+0x1a>
 8009c62:	238b      	movs	r3, #139	; 0x8b
 8009c64:	6003      	str	r3, [r0, #0]
 8009c66:	2001      	movs	r0, #1
 8009c68:	4240      	negs	r0, r0
 8009c6a:	b01b      	add	sp, #108	; 0x6c
 8009c6c:	bd30      	pop	{r4, r5, pc}
 8009c6e:	2382      	movs	r3, #130	; 0x82
 8009c70:	4668      	mov	r0, sp
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	8183      	strh	r3, [r0, #12]
 8009c76:	2300      	movs	r3, #0
 8009c78:	9100      	str	r1, [sp, #0]
 8009c7a:	9104      	str	r1, [sp, #16]
 8009c7c:	429c      	cmp	r4, r3
 8009c7e:	d000      	beq.n	8009c82 <_vsniprintf_r+0x2e>
 8009c80:	1e63      	subs	r3, r4, #1
 8009c82:	9302      	str	r3, [sp, #8]
 8009c84:	9305      	str	r3, [sp, #20]
 8009c86:	2301      	movs	r3, #1
 8009c88:	4669      	mov	r1, sp
 8009c8a:	425b      	negs	r3, r3
 8009c8c:	81cb      	strh	r3, [r1, #14]
 8009c8e:	0028      	movs	r0, r5
 8009c90:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009c92:	f000 f8f5 	bl	8009e80 <_svfiprintf_r>
 8009c96:	1c43      	adds	r3, r0, #1
 8009c98:	da01      	bge.n	8009c9e <_vsniprintf_r+0x4a>
 8009c9a:	238b      	movs	r3, #139	; 0x8b
 8009c9c:	602b      	str	r3, [r5, #0]
 8009c9e:	2c00      	cmp	r4, #0
 8009ca0:	d0e3      	beq.n	8009c6a <_vsniprintf_r+0x16>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	9a00      	ldr	r2, [sp, #0]
 8009ca6:	7013      	strb	r3, [r2, #0]
 8009ca8:	e7df      	b.n	8009c6a <_vsniprintf_r+0x16>
	...

08009cac <vsniprintf>:
 8009cac:	b507      	push	{r0, r1, r2, lr}
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	0013      	movs	r3, r2
 8009cb2:	000a      	movs	r2, r1
 8009cb4:	0001      	movs	r1, r0
 8009cb6:	4802      	ldr	r0, [pc, #8]	; (8009cc0 <vsniprintf+0x14>)
 8009cb8:	6800      	ldr	r0, [r0, #0]
 8009cba:	f7ff ffcb 	bl	8009c54 <_vsniprintf_r>
 8009cbe:	bd0e      	pop	{r1, r2, r3, pc}
 8009cc0:	20000068 	.word	0x20000068

08009cc4 <_vsiprintf_r>:
 8009cc4:	b500      	push	{lr}
 8009cc6:	b09b      	sub	sp, #108	; 0x6c
 8009cc8:	9100      	str	r1, [sp, #0]
 8009cca:	9104      	str	r1, [sp, #16]
 8009ccc:	4906      	ldr	r1, [pc, #24]	; (8009ce8 <_vsiprintf_r+0x24>)
 8009cce:	9105      	str	r1, [sp, #20]
 8009cd0:	9102      	str	r1, [sp, #8]
 8009cd2:	4906      	ldr	r1, [pc, #24]	; (8009cec <_vsiprintf_r+0x28>)
 8009cd4:	9103      	str	r1, [sp, #12]
 8009cd6:	4669      	mov	r1, sp
 8009cd8:	f000 f8d2 	bl	8009e80 <_svfiprintf_r>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	9a00      	ldr	r2, [sp, #0]
 8009ce0:	7013      	strb	r3, [r2, #0]
 8009ce2:	b01b      	add	sp, #108	; 0x6c
 8009ce4:	bd00      	pop	{pc}
 8009ce6:	46c0      	nop			; (mov r8, r8)
 8009ce8:	7fffffff 	.word	0x7fffffff
 8009cec:	ffff0208 	.word	0xffff0208

08009cf0 <vsiprintf>:
 8009cf0:	b510      	push	{r4, lr}
 8009cf2:	0013      	movs	r3, r2
 8009cf4:	000a      	movs	r2, r1
 8009cf6:	0001      	movs	r1, r0
 8009cf8:	4802      	ldr	r0, [pc, #8]	; (8009d04 <vsiprintf+0x14>)
 8009cfa:	6800      	ldr	r0, [r0, #0]
 8009cfc:	f7ff ffe2 	bl	8009cc4 <_vsiprintf_r>
 8009d00:	bd10      	pop	{r4, pc}
 8009d02:	46c0      	nop			; (mov r8, r8)
 8009d04:	20000068 	.word	0x20000068

08009d08 <__malloc_lock>:
 8009d08:	b510      	push	{r4, lr}
 8009d0a:	4802      	ldr	r0, [pc, #8]	; (8009d14 <__malloc_lock+0xc>)
 8009d0c:	f7ff fe70 	bl	80099f0 <__retarget_lock_acquire_recursive>
 8009d10:	bd10      	pop	{r4, pc}
 8009d12:	46c0      	nop			; (mov r8, r8)
 8009d14:	20001ac8 	.word	0x20001ac8

08009d18 <__malloc_unlock>:
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	4802      	ldr	r0, [pc, #8]	; (8009d24 <__malloc_unlock+0xc>)
 8009d1c:	f7ff fe69 	bl	80099f2 <__retarget_lock_release_recursive>
 8009d20:	bd10      	pop	{r4, pc}
 8009d22:	46c0      	nop			; (mov r8, r8)
 8009d24:	20001ac8 	.word	0x20001ac8

08009d28 <_free_r>:
 8009d28:	b570      	push	{r4, r5, r6, lr}
 8009d2a:	0005      	movs	r5, r0
 8009d2c:	2900      	cmp	r1, #0
 8009d2e:	d010      	beq.n	8009d52 <_free_r+0x2a>
 8009d30:	1f0c      	subs	r4, r1, #4
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	da00      	bge.n	8009d3a <_free_r+0x12>
 8009d38:	18e4      	adds	r4, r4, r3
 8009d3a:	0028      	movs	r0, r5
 8009d3c:	f7ff ffe4 	bl	8009d08 <__malloc_lock>
 8009d40:	4a1d      	ldr	r2, [pc, #116]	; (8009db8 <_free_r+0x90>)
 8009d42:	6813      	ldr	r3, [r2, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d105      	bne.n	8009d54 <_free_r+0x2c>
 8009d48:	6063      	str	r3, [r4, #4]
 8009d4a:	6014      	str	r4, [r2, #0]
 8009d4c:	0028      	movs	r0, r5
 8009d4e:	f7ff ffe3 	bl	8009d18 <__malloc_unlock>
 8009d52:	bd70      	pop	{r4, r5, r6, pc}
 8009d54:	42a3      	cmp	r3, r4
 8009d56:	d908      	bls.n	8009d6a <_free_r+0x42>
 8009d58:	6821      	ldr	r1, [r4, #0]
 8009d5a:	1860      	adds	r0, r4, r1
 8009d5c:	4283      	cmp	r3, r0
 8009d5e:	d1f3      	bne.n	8009d48 <_free_r+0x20>
 8009d60:	6818      	ldr	r0, [r3, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	1841      	adds	r1, r0, r1
 8009d66:	6021      	str	r1, [r4, #0]
 8009d68:	e7ee      	b.n	8009d48 <_free_r+0x20>
 8009d6a:	001a      	movs	r2, r3
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <_free_r+0x4e>
 8009d72:	42a3      	cmp	r3, r4
 8009d74:	d9f9      	bls.n	8009d6a <_free_r+0x42>
 8009d76:	6811      	ldr	r1, [r2, #0]
 8009d78:	1850      	adds	r0, r2, r1
 8009d7a:	42a0      	cmp	r0, r4
 8009d7c:	d10b      	bne.n	8009d96 <_free_r+0x6e>
 8009d7e:	6820      	ldr	r0, [r4, #0]
 8009d80:	1809      	adds	r1, r1, r0
 8009d82:	1850      	adds	r0, r2, r1
 8009d84:	6011      	str	r1, [r2, #0]
 8009d86:	4283      	cmp	r3, r0
 8009d88:	d1e0      	bne.n	8009d4c <_free_r+0x24>
 8009d8a:	6818      	ldr	r0, [r3, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	1841      	adds	r1, r0, r1
 8009d90:	6011      	str	r1, [r2, #0]
 8009d92:	6053      	str	r3, [r2, #4]
 8009d94:	e7da      	b.n	8009d4c <_free_r+0x24>
 8009d96:	42a0      	cmp	r0, r4
 8009d98:	d902      	bls.n	8009da0 <_free_r+0x78>
 8009d9a:	230c      	movs	r3, #12
 8009d9c:	602b      	str	r3, [r5, #0]
 8009d9e:	e7d5      	b.n	8009d4c <_free_r+0x24>
 8009da0:	6821      	ldr	r1, [r4, #0]
 8009da2:	1860      	adds	r0, r4, r1
 8009da4:	4283      	cmp	r3, r0
 8009da6:	d103      	bne.n	8009db0 <_free_r+0x88>
 8009da8:	6818      	ldr	r0, [r3, #0]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	1841      	adds	r1, r0, r1
 8009dae:	6021      	str	r1, [r4, #0]
 8009db0:	6063      	str	r3, [r4, #4]
 8009db2:	6054      	str	r4, [r2, #4]
 8009db4:	e7ca      	b.n	8009d4c <_free_r+0x24>
 8009db6:	46c0      	nop			; (mov r8, r8)
 8009db8:	20001acc 	.word	0x20001acc

08009dbc <__ssputs_r>:
 8009dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dbe:	688e      	ldr	r6, [r1, #8]
 8009dc0:	b085      	sub	sp, #20
 8009dc2:	0007      	movs	r7, r0
 8009dc4:	000c      	movs	r4, r1
 8009dc6:	9203      	str	r2, [sp, #12]
 8009dc8:	9301      	str	r3, [sp, #4]
 8009dca:	429e      	cmp	r6, r3
 8009dcc:	d83c      	bhi.n	8009e48 <__ssputs_r+0x8c>
 8009dce:	2390      	movs	r3, #144	; 0x90
 8009dd0:	898a      	ldrh	r2, [r1, #12]
 8009dd2:	00db      	lsls	r3, r3, #3
 8009dd4:	421a      	tst	r2, r3
 8009dd6:	d034      	beq.n	8009e42 <__ssputs_r+0x86>
 8009dd8:	6909      	ldr	r1, [r1, #16]
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	6960      	ldr	r0, [r4, #20]
 8009dde:	1a5b      	subs	r3, r3, r1
 8009de0:	9302      	str	r3, [sp, #8]
 8009de2:	2303      	movs	r3, #3
 8009de4:	4343      	muls	r3, r0
 8009de6:	0fdd      	lsrs	r5, r3, #31
 8009de8:	18ed      	adds	r5, r5, r3
 8009dea:	9b01      	ldr	r3, [sp, #4]
 8009dec:	9802      	ldr	r0, [sp, #8]
 8009dee:	3301      	adds	r3, #1
 8009df0:	181b      	adds	r3, r3, r0
 8009df2:	106d      	asrs	r5, r5, #1
 8009df4:	42ab      	cmp	r3, r5
 8009df6:	d900      	bls.n	8009dfa <__ssputs_r+0x3e>
 8009df8:	001d      	movs	r5, r3
 8009dfa:	0553      	lsls	r3, r2, #21
 8009dfc:	d532      	bpl.n	8009e64 <__ssputs_r+0xa8>
 8009dfe:	0029      	movs	r1, r5
 8009e00:	0038      	movs	r0, r7
 8009e02:	f7ff fe2b 	bl	8009a5c <_malloc_r>
 8009e06:	1e06      	subs	r6, r0, #0
 8009e08:	d109      	bne.n	8009e1e <__ssputs_r+0x62>
 8009e0a:	230c      	movs	r3, #12
 8009e0c:	603b      	str	r3, [r7, #0]
 8009e0e:	2340      	movs	r3, #64	; 0x40
 8009e10:	2001      	movs	r0, #1
 8009e12:	89a2      	ldrh	r2, [r4, #12]
 8009e14:	4240      	negs	r0, r0
 8009e16:	4313      	orrs	r3, r2
 8009e18:	81a3      	strh	r3, [r4, #12]
 8009e1a:	b005      	add	sp, #20
 8009e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e1e:	9a02      	ldr	r2, [sp, #8]
 8009e20:	6921      	ldr	r1, [r4, #16]
 8009e22:	f7ff fde7 	bl	80099f4 <memcpy>
 8009e26:	89a3      	ldrh	r3, [r4, #12]
 8009e28:	4a14      	ldr	r2, [pc, #80]	; (8009e7c <__ssputs_r+0xc0>)
 8009e2a:	401a      	ands	r2, r3
 8009e2c:	2380      	movs	r3, #128	; 0x80
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	81a3      	strh	r3, [r4, #12]
 8009e32:	9b02      	ldr	r3, [sp, #8]
 8009e34:	6126      	str	r6, [r4, #16]
 8009e36:	18f6      	adds	r6, r6, r3
 8009e38:	6026      	str	r6, [r4, #0]
 8009e3a:	6165      	str	r5, [r4, #20]
 8009e3c:	9e01      	ldr	r6, [sp, #4]
 8009e3e:	1aed      	subs	r5, r5, r3
 8009e40:	60a5      	str	r5, [r4, #8]
 8009e42:	9b01      	ldr	r3, [sp, #4]
 8009e44:	429e      	cmp	r6, r3
 8009e46:	d900      	bls.n	8009e4a <__ssputs_r+0x8e>
 8009e48:	9e01      	ldr	r6, [sp, #4]
 8009e4a:	0032      	movs	r2, r6
 8009e4c:	9903      	ldr	r1, [sp, #12]
 8009e4e:	6820      	ldr	r0, [r4, #0]
 8009e50:	f000 faa3 	bl	800a39a <memmove>
 8009e54:	68a3      	ldr	r3, [r4, #8]
 8009e56:	2000      	movs	r0, #0
 8009e58:	1b9b      	subs	r3, r3, r6
 8009e5a:	60a3      	str	r3, [r4, #8]
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	199e      	adds	r6, r3, r6
 8009e60:	6026      	str	r6, [r4, #0]
 8009e62:	e7da      	b.n	8009e1a <__ssputs_r+0x5e>
 8009e64:	002a      	movs	r2, r5
 8009e66:	0038      	movs	r0, r7
 8009e68:	f000 faaa 	bl	800a3c0 <_realloc_r>
 8009e6c:	1e06      	subs	r6, r0, #0
 8009e6e:	d1e0      	bne.n	8009e32 <__ssputs_r+0x76>
 8009e70:	0038      	movs	r0, r7
 8009e72:	6921      	ldr	r1, [r4, #16]
 8009e74:	f7ff ff58 	bl	8009d28 <_free_r>
 8009e78:	e7c7      	b.n	8009e0a <__ssputs_r+0x4e>
 8009e7a:	46c0      	nop			; (mov r8, r8)
 8009e7c:	fffffb7f 	.word	0xfffffb7f

08009e80 <_svfiprintf_r>:
 8009e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e82:	b0a1      	sub	sp, #132	; 0x84
 8009e84:	9003      	str	r0, [sp, #12]
 8009e86:	001d      	movs	r5, r3
 8009e88:	898b      	ldrh	r3, [r1, #12]
 8009e8a:	000f      	movs	r7, r1
 8009e8c:	0016      	movs	r6, r2
 8009e8e:	061b      	lsls	r3, r3, #24
 8009e90:	d511      	bpl.n	8009eb6 <_svfiprintf_r+0x36>
 8009e92:	690b      	ldr	r3, [r1, #16]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10e      	bne.n	8009eb6 <_svfiprintf_r+0x36>
 8009e98:	2140      	movs	r1, #64	; 0x40
 8009e9a:	f7ff fddf 	bl	8009a5c <_malloc_r>
 8009e9e:	6038      	str	r0, [r7, #0]
 8009ea0:	6138      	str	r0, [r7, #16]
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d105      	bne.n	8009eb2 <_svfiprintf_r+0x32>
 8009ea6:	230c      	movs	r3, #12
 8009ea8:	9a03      	ldr	r2, [sp, #12]
 8009eaa:	3801      	subs	r0, #1
 8009eac:	6013      	str	r3, [r2, #0]
 8009eae:	b021      	add	sp, #132	; 0x84
 8009eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eb2:	2340      	movs	r3, #64	; 0x40
 8009eb4:	617b      	str	r3, [r7, #20]
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	ac08      	add	r4, sp, #32
 8009eba:	6163      	str	r3, [r4, #20]
 8009ebc:	3320      	adds	r3, #32
 8009ebe:	7663      	strb	r3, [r4, #25]
 8009ec0:	3310      	adds	r3, #16
 8009ec2:	76a3      	strb	r3, [r4, #26]
 8009ec4:	9507      	str	r5, [sp, #28]
 8009ec6:	0035      	movs	r5, r6
 8009ec8:	782b      	ldrb	r3, [r5, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <_svfiprintf_r+0x52>
 8009ece:	2b25      	cmp	r3, #37	; 0x25
 8009ed0:	d147      	bne.n	8009f62 <_svfiprintf_r+0xe2>
 8009ed2:	1bab      	subs	r3, r5, r6
 8009ed4:	9305      	str	r3, [sp, #20]
 8009ed6:	42b5      	cmp	r5, r6
 8009ed8:	d00c      	beq.n	8009ef4 <_svfiprintf_r+0x74>
 8009eda:	0032      	movs	r2, r6
 8009edc:	0039      	movs	r1, r7
 8009ede:	9803      	ldr	r0, [sp, #12]
 8009ee0:	f7ff ff6c 	bl	8009dbc <__ssputs_r>
 8009ee4:	1c43      	adds	r3, r0, #1
 8009ee6:	d100      	bne.n	8009eea <_svfiprintf_r+0x6a>
 8009ee8:	e0ae      	b.n	800a048 <_svfiprintf_r+0x1c8>
 8009eea:	6962      	ldr	r2, [r4, #20]
 8009eec:	9b05      	ldr	r3, [sp, #20]
 8009eee:	4694      	mov	ip, r2
 8009ef0:	4463      	add	r3, ip
 8009ef2:	6163      	str	r3, [r4, #20]
 8009ef4:	782b      	ldrb	r3, [r5, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d100      	bne.n	8009efc <_svfiprintf_r+0x7c>
 8009efa:	e0a5      	b.n	800a048 <_svfiprintf_r+0x1c8>
 8009efc:	2201      	movs	r2, #1
 8009efe:	2300      	movs	r3, #0
 8009f00:	4252      	negs	r2, r2
 8009f02:	6062      	str	r2, [r4, #4]
 8009f04:	a904      	add	r1, sp, #16
 8009f06:	3254      	adds	r2, #84	; 0x54
 8009f08:	1852      	adds	r2, r2, r1
 8009f0a:	1c6e      	adds	r6, r5, #1
 8009f0c:	6023      	str	r3, [r4, #0]
 8009f0e:	60e3      	str	r3, [r4, #12]
 8009f10:	60a3      	str	r3, [r4, #8]
 8009f12:	7013      	strb	r3, [r2, #0]
 8009f14:	65a3      	str	r3, [r4, #88]	; 0x58
 8009f16:	2205      	movs	r2, #5
 8009f18:	7831      	ldrb	r1, [r6, #0]
 8009f1a:	4854      	ldr	r0, [pc, #336]	; (800a06c <_svfiprintf_r+0x1ec>)
 8009f1c:	f000 fa32 	bl	800a384 <memchr>
 8009f20:	1c75      	adds	r5, r6, #1
 8009f22:	2800      	cmp	r0, #0
 8009f24:	d11f      	bne.n	8009f66 <_svfiprintf_r+0xe6>
 8009f26:	6822      	ldr	r2, [r4, #0]
 8009f28:	06d3      	lsls	r3, r2, #27
 8009f2a:	d504      	bpl.n	8009f36 <_svfiprintf_r+0xb6>
 8009f2c:	2353      	movs	r3, #83	; 0x53
 8009f2e:	a904      	add	r1, sp, #16
 8009f30:	185b      	adds	r3, r3, r1
 8009f32:	2120      	movs	r1, #32
 8009f34:	7019      	strb	r1, [r3, #0]
 8009f36:	0713      	lsls	r3, r2, #28
 8009f38:	d504      	bpl.n	8009f44 <_svfiprintf_r+0xc4>
 8009f3a:	2353      	movs	r3, #83	; 0x53
 8009f3c:	a904      	add	r1, sp, #16
 8009f3e:	185b      	adds	r3, r3, r1
 8009f40:	212b      	movs	r1, #43	; 0x2b
 8009f42:	7019      	strb	r1, [r3, #0]
 8009f44:	7833      	ldrb	r3, [r6, #0]
 8009f46:	2b2a      	cmp	r3, #42	; 0x2a
 8009f48:	d016      	beq.n	8009f78 <_svfiprintf_r+0xf8>
 8009f4a:	0035      	movs	r5, r6
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	200a      	movs	r0, #10
 8009f50:	68e3      	ldr	r3, [r4, #12]
 8009f52:	782a      	ldrb	r2, [r5, #0]
 8009f54:	1c6e      	adds	r6, r5, #1
 8009f56:	3a30      	subs	r2, #48	; 0x30
 8009f58:	2a09      	cmp	r2, #9
 8009f5a:	d94e      	bls.n	8009ffa <_svfiprintf_r+0x17a>
 8009f5c:	2900      	cmp	r1, #0
 8009f5e:	d111      	bne.n	8009f84 <_svfiprintf_r+0x104>
 8009f60:	e017      	b.n	8009f92 <_svfiprintf_r+0x112>
 8009f62:	3501      	adds	r5, #1
 8009f64:	e7b0      	b.n	8009ec8 <_svfiprintf_r+0x48>
 8009f66:	4b41      	ldr	r3, [pc, #260]	; (800a06c <_svfiprintf_r+0x1ec>)
 8009f68:	6822      	ldr	r2, [r4, #0]
 8009f6a:	1ac0      	subs	r0, r0, r3
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	4083      	lsls	r3, r0
 8009f70:	4313      	orrs	r3, r2
 8009f72:	002e      	movs	r6, r5
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	e7ce      	b.n	8009f16 <_svfiprintf_r+0x96>
 8009f78:	9b07      	ldr	r3, [sp, #28]
 8009f7a:	1d19      	adds	r1, r3, #4
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	9107      	str	r1, [sp, #28]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	db01      	blt.n	8009f88 <_svfiprintf_r+0x108>
 8009f84:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f86:	e004      	b.n	8009f92 <_svfiprintf_r+0x112>
 8009f88:	425b      	negs	r3, r3
 8009f8a:	60e3      	str	r3, [r4, #12]
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	782b      	ldrb	r3, [r5, #0]
 8009f94:	2b2e      	cmp	r3, #46	; 0x2e
 8009f96:	d10a      	bne.n	8009fae <_svfiprintf_r+0x12e>
 8009f98:	786b      	ldrb	r3, [r5, #1]
 8009f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f9c:	d135      	bne.n	800a00a <_svfiprintf_r+0x18a>
 8009f9e:	9b07      	ldr	r3, [sp, #28]
 8009fa0:	3502      	adds	r5, #2
 8009fa2:	1d1a      	adds	r2, r3, #4
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	9207      	str	r2, [sp, #28]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	db2b      	blt.n	800a004 <_svfiprintf_r+0x184>
 8009fac:	9309      	str	r3, [sp, #36]	; 0x24
 8009fae:	4e30      	ldr	r6, [pc, #192]	; (800a070 <_svfiprintf_r+0x1f0>)
 8009fb0:	2203      	movs	r2, #3
 8009fb2:	0030      	movs	r0, r6
 8009fb4:	7829      	ldrb	r1, [r5, #0]
 8009fb6:	f000 f9e5 	bl	800a384 <memchr>
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d006      	beq.n	8009fcc <_svfiprintf_r+0x14c>
 8009fbe:	2340      	movs	r3, #64	; 0x40
 8009fc0:	1b80      	subs	r0, r0, r6
 8009fc2:	4083      	lsls	r3, r0
 8009fc4:	6822      	ldr	r2, [r4, #0]
 8009fc6:	3501      	adds	r5, #1
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	6023      	str	r3, [r4, #0]
 8009fcc:	7829      	ldrb	r1, [r5, #0]
 8009fce:	2206      	movs	r2, #6
 8009fd0:	4828      	ldr	r0, [pc, #160]	; (800a074 <_svfiprintf_r+0x1f4>)
 8009fd2:	1c6e      	adds	r6, r5, #1
 8009fd4:	7621      	strb	r1, [r4, #24]
 8009fd6:	f000 f9d5 	bl	800a384 <memchr>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	d03c      	beq.n	800a058 <_svfiprintf_r+0x1d8>
 8009fde:	4b26      	ldr	r3, [pc, #152]	; (800a078 <_svfiprintf_r+0x1f8>)
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d125      	bne.n	800a030 <_svfiprintf_r+0x1b0>
 8009fe4:	2207      	movs	r2, #7
 8009fe6:	9b07      	ldr	r3, [sp, #28]
 8009fe8:	3307      	adds	r3, #7
 8009fea:	4393      	bics	r3, r2
 8009fec:	3308      	adds	r3, #8
 8009fee:	9307      	str	r3, [sp, #28]
 8009ff0:	6963      	ldr	r3, [r4, #20]
 8009ff2:	9a04      	ldr	r2, [sp, #16]
 8009ff4:	189b      	adds	r3, r3, r2
 8009ff6:	6163      	str	r3, [r4, #20]
 8009ff8:	e765      	b.n	8009ec6 <_svfiprintf_r+0x46>
 8009ffa:	4343      	muls	r3, r0
 8009ffc:	0035      	movs	r5, r6
 8009ffe:	2101      	movs	r1, #1
 800a000:	189b      	adds	r3, r3, r2
 800a002:	e7a6      	b.n	8009f52 <_svfiprintf_r+0xd2>
 800a004:	2301      	movs	r3, #1
 800a006:	425b      	negs	r3, r3
 800a008:	e7d0      	b.n	8009fac <_svfiprintf_r+0x12c>
 800a00a:	2300      	movs	r3, #0
 800a00c:	200a      	movs	r0, #10
 800a00e:	001a      	movs	r2, r3
 800a010:	3501      	adds	r5, #1
 800a012:	6063      	str	r3, [r4, #4]
 800a014:	7829      	ldrb	r1, [r5, #0]
 800a016:	1c6e      	adds	r6, r5, #1
 800a018:	3930      	subs	r1, #48	; 0x30
 800a01a:	2909      	cmp	r1, #9
 800a01c:	d903      	bls.n	800a026 <_svfiprintf_r+0x1a6>
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d0c5      	beq.n	8009fae <_svfiprintf_r+0x12e>
 800a022:	9209      	str	r2, [sp, #36]	; 0x24
 800a024:	e7c3      	b.n	8009fae <_svfiprintf_r+0x12e>
 800a026:	4342      	muls	r2, r0
 800a028:	0035      	movs	r5, r6
 800a02a:	2301      	movs	r3, #1
 800a02c:	1852      	adds	r2, r2, r1
 800a02e:	e7f1      	b.n	800a014 <_svfiprintf_r+0x194>
 800a030:	ab07      	add	r3, sp, #28
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	003a      	movs	r2, r7
 800a036:	0021      	movs	r1, r4
 800a038:	4b10      	ldr	r3, [pc, #64]	; (800a07c <_svfiprintf_r+0x1fc>)
 800a03a:	9803      	ldr	r0, [sp, #12]
 800a03c:	e000      	b.n	800a040 <_svfiprintf_r+0x1c0>
 800a03e:	bf00      	nop
 800a040:	9004      	str	r0, [sp, #16]
 800a042:	9b04      	ldr	r3, [sp, #16]
 800a044:	3301      	adds	r3, #1
 800a046:	d1d3      	bne.n	8009ff0 <_svfiprintf_r+0x170>
 800a048:	89bb      	ldrh	r3, [r7, #12]
 800a04a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a04c:	065b      	lsls	r3, r3, #25
 800a04e:	d400      	bmi.n	800a052 <_svfiprintf_r+0x1d2>
 800a050:	e72d      	b.n	8009eae <_svfiprintf_r+0x2e>
 800a052:	2001      	movs	r0, #1
 800a054:	4240      	negs	r0, r0
 800a056:	e72a      	b.n	8009eae <_svfiprintf_r+0x2e>
 800a058:	ab07      	add	r3, sp, #28
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	003a      	movs	r2, r7
 800a05e:	0021      	movs	r1, r4
 800a060:	4b06      	ldr	r3, [pc, #24]	; (800a07c <_svfiprintf_r+0x1fc>)
 800a062:	9803      	ldr	r0, [sp, #12]
 800a064:	f000 f87c 	bl	800a160 <_printf_i>
 800a068:	e7ea      	b.n	800a040 <_svfiprintf_r+0x1c0>
 800a06a:	46c0      	nop			; (mov r8, r8)
 800a06c:	0800ad8c 	.word	0x0800ad8c
 800a070:	0800ad92 	.word	0x0800ad92
 800a074:	0800ad96 	.word	0x0800ad96
 800a078:	00000000 	.word	0x00000000
 800a07c:	08009dbd 	.word	0x08009dbd

0800a080 <_printf_common>:
 800a080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a082:	0015      	movs	r5, r2
 800a084:	9301      	str	r3, [sp, #4]
 800a086:	688a      	ldr	r2, [r1, #8]
 800a088:	690b      	ldr	r3, [r1, #16]
 800a08a:	000c      	movs	r4, r1
 800a08c:	9000      	str	r0, [sp, #0]
 800a08e:	4293      	cmp	r3, r2
 800a090:	da00      	bge.n	800a094 <_printf_common+0x14>
 800a092:	0013      	movs	r3, r2
 800a094:	0022      	movs	r2, r4
 800a096:	602b      	str	r3, [r5, #0]
 800a098:	3243      	adds	r2, #67	; 0x43
 800a09a:	7812      	ldrb	r2, [r2, #0]
 800a09c:	2a00      	cmp	r2, #0
 800a09e:	d001      	beq.n	800a0a4 <_printf_common+0x24>
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	602b      	str	r3, [r5, #0]
 800a0a4:	6823      	ldr	r3, [r4, #0]
 800a0a6:	069b      	lsls	r3, r3, #26
 800a0a8:	d502      	bpl.n	800a0b0 <_printf_common+0x30>
 800a0aa:	682b      	ldr	r3, [r5, #0]
 800a0ac:	3302      	adds	r3, #2
 800a0ae:	602b      	str	r3, [r5, #0]
 800a0b0:	6822      	ldr	r2, [r4, #0]
 800a0b2:	2306      	movs	r3, #6
 800a0b4:	0017      	movs	r7, r2
 800a0b6:	401f      	ands	r7, r3
 800a0b8:	421a      	tst	r2, r3
 800a0ba:	d027      	beq.n	800a10c <_printf_common+0x8c>
 800a0bc:	0023      	movs	r3, r4
 800a0be:	3343      	adds	r3, #67	; 0x43
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	1e5a      	subs	r2, r3, #1
 800a0c4:	4193      	sbcs	r3, r2
 800a0c6:	6822      	ldr	r2, [r4, #0]
 800a0c8:	0692      	lsls	r2, r2, #26
 800a0ca:	d430      	bmi.n	800a12e <_printf_common+0xae>
 800a0cc:	0022      	movs	r2, r4
 800a0ce:	9901      	ldr	r1, [sp, #4]
 800a0d0:	9800      	ldr	r0, [sp, #0]
 800a0d2:	9e08      	ldr	r6, [sp, #32]
 800a0d4:	3243      	adds	r2, #67	; 0x43
 800a0d6:	47b0      	blx	r6
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	d025      	beq.n	800a128 <_printf_common+0xa8>
 800a0dc:	2306      	movs	r3, #6
 800a0de:	6820      	ldr	r0, [r4, #0]
 800a0e0:	682a      	ldr	r2, [r5, #0]
 800a0e2:	68e1      	ldr	r1, [r4, #12]
 800a0e4:	2500      	movs	r5, #0
 800a0e6:	4003      	ands	r3, r0
 800a0e8:	2b04      	cmp	r3, #4
 800a0ea:	d103      	bne.n	800a0f4 <_printf_common+0x74>
 800a0ec:	1a8d      	subs	r5, r1, r2
 800a0ee:	43eb      	mvns	r3, r5
 800a0f0:	17db      	asrs	r3, r3, #31
 800a0f2:	401d      	ands	r5, r3
 800a0f4:	68a3      	ldr	r3, [r4, #8]
 800a0f6:	6922      	ldr	r2, [r4, #16]
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	dd01      	ble.n	800a100 <_printf_common+0x80>
 800a0fc:	1a9b      	subs	r3, r3, r2
 800a0fe:	18ed      	adds	r5, r5, r3
 800a100:	2700      	movs	r7, #0
 800a102:	42bd      	cmp	r5, r7
 800a104:	d120      	bne.n	800a148 <_printf_common+0xc8>
 800a106:	2000      	movs	r0, #0
 800a108:	e010      	b.n	800a12c <_printf_common+0xac>
 800a10a:	3701      	adds	r7, #1
 800a10c:	68e3      	ldr	r3, [r4, #12]
 800a10e:	682a      	ldr	r2, [r5, #0]
 800a110:	1a9b      	subs	r3, r3, r2
 800a112:	42bb      	cmp	r3, r7
 800a114:	ddd2      	ble.n	800a0bc <_printf_common+0x3c>
 800a116:	0022      	movs	r2, r4
 800a118:	2301      	movs	r3, #1
 800a11a:	9901      	ldr	r1, [sp, #4]
 800a11c:	9800      	ldr	r0, [sp, #0]
 800a11e:	9e08      	ldr	r6, [sp, #32]
 800a120:	3219      	adds	r2, #25
 800a122:	47b0      	blx	r6
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	d1f0      	bne.n	800a10a <_printf_common+0x8a>
 800a128:	2001      	movs	r0, #1
 800a12a:	4240      	negs	r0, r0
 800a12c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a12e:	2030      	movs	r0, #48	; 0x30
 800a130:	18e1      	adds	r1, r4, r3
 800a132:	3143      	adds	r1, #67	; 0x43
 800a134:	7008      	strb	r0, [r1, #0]
 800a136:	0021      	movs	r1, r4
 800a138:	1c5a      	adds	r2, r3, #1
 800a13a:	3145      	adds	r1, #69	; 0x45
 800a13c:	7809      	ldrb	r1, [r1, #0]
 800a13e:	18a2      	adds	r2, r4, r2
 800a140:	3243      	adds	r2, #67	; 0x43
 800a142:	3302      	adds	r3, #2
 800a144:	7011      	strb	r1, [r2, #0]
 800a146:	e7c1      	b.n	800a0cc <_printf_common+0x4c>
 800a148:	0022      	movs	r2, r4
 800a14a:	2301      	movs	r3, #1
 800a14c:	9901      	ldr	r1, [sp, #4]
 800a14e:	9800      	ldr	r0, [sp, #0]
 800a150:	9e08      	ldr	r6, [sp, #32]
 800a152:	321a      	adds	r2, #26
 800a154:	47b0      	blx	r6
 800a156:	1c43      	adds	r3, r0, #1
 800a158:	d0e6      	beq.n	800a128 <_printf_common+0xa8>
 800a15a:	3701      	adds	r7, #1
 800a15c:	e7d1      	b.n	800a102 <_printf_common+0x82>
	...

0800a160 <_printf_i>:
 800a160:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a162:	b08b      	sub	sp, #44	; 0x2c
 800a164:	9206      	str	r2, [sp, #24]
 800a166:	000a      	movs	r2, r1
 800a168:	3243      	adds	r2, #67	; 0x43
 800a16a:	9307      	str	r3, [sp, #28]
 800a16c:	9005      	str	r0, [sp, #20]
 800a16e:	9204      	str	r2, [sp, #16]
 800a170:	7e0a      	ldrb	r2, [r1, #24]
 800a172:	000c      	movs	r4, r1
 800a174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a176:	2a78      	cmp	r2, #120	; 0x78
 800a178:	d807      	bhi.n	800a18a <_printf_i+0x2a>
 800a17a:	2a62      	cmp	r2, #98	; 0x62
 800a17c:	d809      	bhi.n	800a192 <_printf_i+0x32>
 800a17e:	2a00      	cmp	r2, #0
 800a180:	d100      	bne.n	800a184 <_printf_i+0x24>
 800a182:	e0c1      	b.n	800a308 <_printf_i+0x1a8>
 800a184:	2a58      	cmp	r2, #88	; 0x58
 800a186:	d100      	bne.n	800a18a <_printf_i+0x2a>
 800a188:	e08c      	b.n	800a2a4 <_printf_i+0x144>
 800a18a:	0026      	movs	r6, r4
 800a18c:	3642      	adds	r6, #66	; 0x42
 800a18e:	7032      	strb	r2, [r6, #0]
 800a190:	e022      	b.n	800a1d8 <_printf_i+0x78>
 800a192:	0010      	movs	r0, r2
 800a194:	3863      	subs	r0, #99	; 0x63
 800a196:	2815      	cmp	r0, #21
 800a198:	d8f7      	bhi.n	800a18a <_printf_i+0x2a>
 800a19a:	f7f5 ffbd 	bl	8000118 <__gnu_thumb1_case_shi>
 800a19e:	0016      	.short	0x0016
 800a1a0:	fff6001f 	.word	0xfff6001f
 800a1a4:	fff6fff6 	.word	0xfff6fff6
 800a1a8:	001ffff6 	.word	0x001ffff6
 800a1ac:	fff6fff6 	.word	0xfff6fff6
 800a1b0:	fff6fff6 	.word	0xfff6fff6
 800a1b4:	003600a8 	.word	0x003600a8
 800a1b8:	fff6009a 	.word	0xfff6009a
 800a1bc:	00b9fff6 	.word	0x00b9fff6
 800a1c0:	0036fff6 	.word	0x0036fff6
 800a1c4:	fff6fff6 	.word	0xfff6fff6
 800a1c8:	009e      	.short	0x009e
 800a1ca:	0026      	movs	r6, r4
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	3642      	adds	r6, #66	; 0x42
 800a1d0:	1d11      	adds	r1, r2, #4
 800a1d2:	6019      	str	r1, [r3, #0]
 800a1d4:	6813      	ldr	r3, [r2, #0]
 800a1d6:	7033      	strb	r3, [r6, #0]
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e0a7      	b.n	800a32c <_printf_i+0x1cc>
 800a1dc:	6808      	ldr	r0, [r1, #0]
 800a1de:	6819      	ldr	r1, [r3, #0]
 800a1e0:	1d0a      	adds	r2, r1, #4
 800a1e2:	0605      	lsls	r5, r0, #24
 800a1e4:	d50b      	bpl.n	800a1fe <_printf_i+0x9e>
 800a1e6:	680d      	ldr	r5, [r1, #0]
 800a1e8:	601a      	str	r2, [r3, #0]
 800a1ea:	2d00      	cmp	r5, #0
 800a1ec:	da03      	bge.n	800a1f6 <_printf_i+0x96>
 800a1ee:	232d      	movs	r3, #45	; 0x2d
 800a1f0:	9a04      	ldr	r2, [sp, #16]
 800a1f2:	426d      	negs	r5, r5
 800a1f4:	7013      	strb	r3, [r2, #0]
 800a1f6:	4b61      	ldr	r3, [pc, #388]	; (800a37c <_printf_i+0x21c>)
 800a1f8:	270a      	movs	r7, #10
 800a1fa:	9303      	str	r3, [sp, #12]
 800a1fc:	e01b      	b.n	800a236 <_printf_i+0xd6>
 800a1fe:	680d      	ldr	r5, [r1, #0]
 800a200:	601a      	str	r2, [r3, #0]
 800a202:	0641      	lsls	r1, r0, #25
 800a204:	d5f1      	bpl.n	800a1ea <_printf_i+0x8a>
 800a206:	b22d      	sxth	r5, r5
 800a208:	e7ef      	b.n	800a1ea <_printf_i+0x8a>
 800a20a:	680d      	ldr	r5, [r1, #0]
 800a20c:	6819      	ldr	r1, [r3, #0]
 800a20e:	1d08      	adds	r0, r1, #4
 800a210:	6018      	str	r0, [r3, #0]
 800a212:	062e      	lsls	r6, r5, #24
 800a214:	d501      	bpl.n	800a21a <_printf_i+0xba>
 800a216:	680d      	ldr	r5, [r1, #0]
 800a218:	e003      	b.n	800a222 <_printf_i+0xc2>
 800a21a:	066d      	lsls	r5, r5, #25
 800a21c:	d5fb      	bpl.n	800a216 <_printf_i+0xb6>
 800a21e:	680d      	ldr	r5, [r1, #0]
 800a220:	b2ad      	uxth	r5, r5
 800a222:	4b56      	ldr	r3, [pc, #344]	; (800a37c <_printf_i+0x21c>)
 800a224:	2708      	movs	r7, #8
 800a226:	9303      	str	r3, [sp, #12]
 800a228:	2a6f      	cmp	r2, #111	; 0x6f
 800a22a:	d000      	beq.n	800a22e <_printf_i+0xce>
 800a22c:	3702      	adds	r7, #2
 800a22e:	0023      	movs	r3, r4
 800a230:	2200      	movs	r2, #0
 800a232:	3343      	adds	r3, #67	; 0x43
 800a234:	701a      	strb	r2, [r3, #0]
 800a236:	6863      	ldr	r3, [r4, #4]
 800a238:	60a3      	str	r3, [r4, #8]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	db03      	blt.n	800a246 <_printf_i+0xe6>
 800a23e:	2204      	movs	r2, #4
 800a240:	6821      	ldr	r1, [r4, #0]
 800a242:	4391      	bics	r1, r2
 800a244:	6021      	str	r1, [r4, #0]
 800a246:	2d00      	cmp	r5, #0
 800a248:	d102      	bne.n	800a250 <_printf_i+0xf0>
 800a24a:	9e04      	ldr	r6, [sp, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00c      	beq.n	800a26a <_printf_i+0x10a>
 800a250:	9e04      	ldr	r6, [sp, #16]
 800a252:	0028      	movs	r0, r5
 800a254:	0039      	movs	r1, r7
 800a256:	f7f5 ffef 	bl	8000238 <__aeabi_uidivmod>
 800a25a:	9b03      	ldr	r3, [sp, #12]
 800a25c:	3e01      	subs	r6, #1
 800a25e:	5c5b      	ldrb	r3, [r3, r1]
 800a260:	7033      	strb	r3, [r6, #0]
 800a262:	002b      	movs	r3, r5
 800a264:	0005      	movs	r5, r0
 800a266:	429f      	cmp	r7, r3
 800a268:	d9f3      	bls.n	800a252 <_printf_i+0xf2>
 800a26a:	2f08      	cmp	r7, #8
 800a26c:	d109      	bne.n	800a282 <_printf_i+0x122>
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	07db      	lsls	r3, r3, #31
 800a272:	d506      	bpl.n	800a282 <_printf_i+0x122>
 800a274:	6863      	ldr	r3, [r4, #4]
 800a276:	6922      	ldr	r2, [r4, #16]
 800a278:	4293      	cmp	r3, r2
 800a27a:	dc02      	bgt.n	800a282 <_printf_i+0x122>
 800a27c:	2330      	movs	r3, #48	; 0x30
 800a27e:	3e01      	subs	r6, #1
 800a280:	7033      	strb	r3, [r6, #0]
 800a282:	9b04      	ldr	r3, [sp, #16]
 800a284:	1b9b      	subs	r3, r3, r6
 800a286:	6123      	str	r3, [r4, #16]
 800a288:	9b07      	ldr	r3, [sp, #28]
 800a28a:	0021      	movs	r1, r4
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	9805      	ldr	r0, [sp, #20]
 800a290:	9b06      	ldr	r3, [sp, #24]
 800a292:	aa09      	add	r2, sp, #36	; 0x24
 800a294:	f7ff fef4 	bl	800a080 <_printf_common>
 800a298:	1c43      	adds	r3, r0, #1
 800a29a:	d14c      	bne.n	800a336 <_printf_i+0x1d6>
 800a29c:	2001      	movs	r0, #1
 800a29e:	4240      	negs	r0, r0
 800a2a0:	b00b      	add	sp, #44	; 0x2c
 800a2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2a4:	3145      	adds	r1, #69	; 0x45
 800a2a6:	700a      	strb	r2, [r1, #0]
 800a2a8:	4a34      	ldr	r2, [pc, #208]	; (800a37c <_printf_i+0x21c>)
 800a2aa:	9203      	str	r2, [sp, #12]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	6821      	ldr	r1, [r4, #0]
 800a2b0:	ca20      	ldmia	r2!, {r5}
 800a2b2:	601a      	str	r2, [r3, #0]
 800a2b4:	0608      	lsls	r0, r1, #24
 800a2b6:	d516      	bpl.n	800a2e6 <_printf_i+0x186>
 800a2b8:	07cb      	lsls	r3, r1, #31
 800a2ba:	d502      	bpl.n	800a2c2 <_printf_i+0x162>
 800a2bc:	2320      	movs	r3, #32
 800a2be:	4319      	orrs	r1, r3
 800a2c0:	6021      	str	r1, [r4, #0]
 800a2c2:	2710      	movs	r7, #16
 800a2c4:	2d00      	cmp	r5, #0
 800a2c6:	d1b2      	bne.n	800a22e <_printf_i+0xce>
 800a2c8:	2320      	movs	r3, #32
 800a2ca:	6822      	ldr	r2, [r4, #0]
 800a2cc:	439a      	bics	r2, r3
 800a2ce:	6022      	str	r2, [r4, #0]
 800a2d0:	e7ad      	b.n	800a22e <_printf_i+0xce>
 800a2d2:	2220      	movs	r2, #32
 800a2d4:	6809      	ldr	r1, [r1, #0]
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	6022      	str	r2, [r4, #0]
 800a2da:	0022      	movs	r2, r4
 800a2dc:	2178      	movs	r1, #120	; 0x78
 800a2de:	3245      	adds	r2, #69	; 0x45
 800a2e0:	7011      	strb	r1, [r2, #0]
 800a2e2:	4a27      	ldr	r2, [pc, #156]	; (800a380 <_printf_i+0x220>)
 800a2e4:	e7e1      	b.n	800a2aa <_printf_i+0x14a>
 800a2e6:	0648      	lsls	r0, r1, #25
 800a2e8:	d5e6      	bpl.n	800a2b8 <_printf_i+0x158>
 800a2ea:	b2ad      	uxth	r5, r5
 800a2ec:	e7e4      	b.n	800a2b8 <_printf_i+0x158>
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	680d      	ldr	r5, [r1, #0]
 800a2f2:	1d10      	adds	r0, r2, #4
 800a2f4:	6949      	ldr	r1, [r1, #20]
 800a2f6:	6018      	str	r0, [r3, #0]
 800a2f8:	6813      	ldr	r3, [r2, #0]
 800a2fa:	062e      	lsls	r6, r5, #24
 800a2fc:	d501      	bpl.n	800a302 <_printf_i+0x1a2>
 800a2fe:	6019      	str	r1, [r3, #0]
 800a300:	e002      	b.n	800a308 <_printf_i+0x1a8>
 800a302:	066d      	lsls	r5, r5, #25
 800a304:	d5fb      	bpl.n	800a2fe <_printf_i+0x19e>
 800a306:	8019      	strh	r1, [r3, #0]
 800a308:	2300      	movs	r3, #0
 800a30a:	9e04      	ldr	r6, [sp, #16]
 800a30c:	6123      	str	r3, [r4, #16]
 800a30e:	e7bb      	b.n	800a288 <_printf_i+0x128>
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	1d11      	adds	r1, r2, #4
 800a314:	6019      	str	r1, [r3, #0]
 800a316:	6816      	ldr	r6, [r2, #0]
 800a318:	2100      	movs	r1, #0
 800a31a:	0030      	movs	r0, r6
 800a31c:	6862      	ldr	r2, [r4, #4]
 800a31e:	f000 f831 	bl	800a384 <memchr>
 800a322:	2800      	cmp	r0, #0
 800a324:	d001      	beq.n	800a32a <_printf_i+0x1ca>
 800a326:	1b80      	subs	r0, r0, r6
 800a328:	6060      	str	r0, [r4, #4]
 800a32a:	6863      	ldr	r3, [r4, #4]
 800a32c:	6123      	str	r3, [r4, #16]
 800a32e:	2300      	movs	r3, #0
 800a330:	9a04      	ldr	r2, [sp, #16]
 800a332:	7013      	strb	r3, [r2, #0]
 800a334:	e7a8      	b.n	800a288 <_printf_i+0x128>
 800a336:	6923      	ldr	r3, [r4, #16]
 800a338:	0032      	movs	r2, r6
 800a33a:	9906      	ldr	r1, [sp, #24]
 800a33c:	9805      	ldr	r0, [sp, #20]
 800a33e:	9d07      	ldr	r5, [sp, #28]
 800a340:	47a8      	blx	r5
 800a342:	1c43      	adds	r3, r0, #1
 800a344:	d0aa      	beq.n	800a29c <_printf_i+0x13c>
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	079b      	lsls	r3, r3, #30
 800a34a:	d415      	bmi.n	800a378 <_printf_i+0x218>
 800a34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a34e:	68e0      	ldr	r0, [r4, #12]
 800a350:	4298      	cmp	r0, r3
 800a352:	daa5      	bge.n	800a2a0 <_printf_i+0x140>
 800a354:	0018      	movs	r0, r3
 800a356:	e7a3      	b.n	800a2a0 <_printf_i+0x140>
 800a358:	0022      	movs	r2, r4
 800a35a:	2301      	movs	r3, #1
 800a35c:	9906      	ldr	r1, [sp, #24]
 800a35e:	9805      	ldr	r0, [sp, #20]
 800a360:	9e07      	ldr	r6, [sp, #28]
 800a362:	3219      	adds	r2, #25
 800a364:	47b0      	blx	r6
 800a366:	1c43      	adds	r3, r0, #1
 800a368:	d098      	beq.n	800a29c <_printf_i+0x13c>
 800a36a:	3501      	adds	r5, #1
 800a36c:	68e3      	ldr	r3, [r4, #12]
 800a36e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a370:	1a9b      	subs	r3, r3, r2
 800a372:	42ab      	cmp	r3, r5
 800a374:	dcf0      	bgt.n	800a358 <_printf_i+0x1f8>
 800a376:	e7e9      	b.n	800a34c <_printf_i+0x1ec>
 800a378:	2500      	movs	r5, #0
 800a37a:	e7f7      	b.n	800a36c <_printf_i+0x20c>
 800a37c:	0800ad9d 	.word	0x0800ad9d
 800a380:	0800adae 	.word	0x0800adae

0800a384 <memchr>:
 800a384:	b2c9      	uxtb	r1, r1
 800a386:	1882      	adds	r2, r0, r2
 800a388:	4290      	cmp	r0, r2
 800a38a:	d101      	bne.n	800a390 <memchr+0xc>
 800a38c:	2000      	movs	r0, #0
 800a38e:	4770      	bx	lr
 800a390:	7803      	ldrb	r3, [r0, #0]
 800a392:	428b      	cmp	r3, r1
 800a394:	d0fb      	beq.n	800a38e <memchr+0xa>
 800a396:	3001      	adds	r0, #1
 800a398:	e7f6      	b.n	800a388 <memchr+0x4>

0800a39a <memmove>:
 800a39a:	b510      	push	{r4, lr}
 800a39c:	4288      	cmp	r0, r1
 800a39e:	d902      	bls.n	800a3a6 <memmove+0xc>
 800a3a0:	188b      	adds	r3, r1, r2
 800a3a2:	4298      	cmp	r0, r3
 800a3a4:	d303      	bcc.n	800a3ae <memmove+0x14>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	e007      	b.n	800a3ba <memmove+0x20>
 800a3aa:	5c8b      	ldrb	r3, [r1, r2]
 800a3ac:	5483      	strb	r3, [r0, r2]
 800a3ae:	3a01      	subs	r2, #1
 800a3b0:	d2fb      	bcs.n	800a3aa <memmove+0x10>
 800a3b2:	bd10      	pop	{r4, pc}
 800a3b4:	5ccc      	ldrb	r4, [r1, r3]
 800a3b6:	54c4      	strb	r4, [r0, r3]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d1fa      	bne.n	800a3b4 <memmove+0x1a>
 800a3be:	e7f8      	b.n	800a3b2 <memmove+0x18>

0800a3c0 <_realloc_r>:
 800a3c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3c2:	0007      	movs	r7, r0
 800a3c4:	000e      	movs	r6, r1
 800a3c6:	0014      	movs	r4, r2
 800a3c8:	2900      	cmp	r1, #0
 800a3ca:	d105      	bne.n	800a3d8 <_realloc_r+0x18>
 800a3cc:	0011      	movs	r1, r2
 800a3ce:	f7ff fb45 	bl	8009a5c <_malloc_r>
 800a3d2:	0005      	movs	r5, r0
 800a3d4:	0028      	movs	r0, r5
 800a3d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a3d8:	2a00      	cmp	r2, #0
 800a3da:	d103      	bne.n	800a3e4 <_realloc_r+0x24>
 800a3dc:	f7ff fca4 	bl	8009d28 <_free_r>
 800a3e0:	0025      	movs	r5, r4
 800a3e2:	e7f7      	b.n	800a3d4 <_realloc_r+0x14>
 800a3e4:	f000 f81b 	bl	800a41e <_malloc_usable_size_r>
 800a3e8:	9001      	str	r0, [sp, #4]
 800a3ea:	4284      	cmp	r4, r0
 800a3ec:	d803      	bhi.n	800a3f6 <_realloc_r+0x36>
 800a3ee:	0035      	movs	r5, r6
 800a3f0:	0843      	lsrs	r3, r0, #1
 800a3f2:	42a3      	cmp	r3, r4
 800a3f4:	d3ee      	bcc.n	800a3d4 <_realloc_r+0x14>
 800a3f6:	0021      	movs	r1, r4
 800a3f8:	0038      	movs	r0, r7
 800a3fa:	f7ff fb2f 	bl	8009a5c <_malloc_r>
 800a3fe:	1e05      	subs	r5, r0, #0
 800a400:	d0e8      	beq.n	800a3d4 <_realloc_r+0x14>
 800a402:	9b01      	ldr	r3, [sp, #4]
 800a404:	0022      	movs	r2, r4
 800a406:	429c      	cmp	r4, r3
 800a408:	d900      	bls.n	800a40c <_realloc_r+0x4c>
 800a40a:	001a      	movs	r2, r3
 800a40c:	0031      	movs	r1, r6
 800a40e:	0028      	movs	r0, r5
 800a410:	f7ff faf0 	bl	80099f4 <memcpy>
 800a414:	0031      	movs	r1, r6
 800a416:	0038      	movs	r0, r7
 800a418:	f7ff fc86 	bl	8009d28 <_free_r>
 800a41c:	e7da      	b.n	800a3d4 <_realloc_r+0x14>

0800a41e <_malloc_usable_size_r>:
 800a41e:	1f0b      	subs	r3, r1, #4
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	1f18      	subs	r0, r3, #4
 800a424:	2b00      	cmp	r3, #0
 800a426:	da01      	bge.n	800a42c <_malloc_usable_size_r+0xe>
 800a428:	580b      	ldr	r3, [r1, r0]
 800a42a:	18c0      	adds	r0, r0, r3
 800a42c:	4770      	bx	lr
	...

0800a430 <_init>:
 800a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a432:	46c0      	nop			; (mov r8, r8)
 800a434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a436:	bc08      	pop	{r3}
 800a438:	469e      	mov	lr, r3
 800a43a:	4770      	bx	lr

0800a43c <_fini>:
 800a43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43e:	46c0      	nop			; (mov r8, r8)
 800a440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a442:	bc08      	pop	{r3}
 800a444:	469e      	mov	lr, r3
 800a446:	4770      	bx	lr
